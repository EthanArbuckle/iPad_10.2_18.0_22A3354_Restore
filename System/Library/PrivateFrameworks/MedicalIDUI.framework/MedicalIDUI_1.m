uint64_t MedicalIDEmergencyContactProvider.deinit()
{
  uint64_t v0;

  swift_release();

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MedicalIDEmergencyContactProvider.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_241624D94(void *a1)
{
  sub_241623678(a1);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_241624DD8(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (_QWORD *)sub_24162760C(v2);
  v3 = v2[2];
  v5[0] = v2 + 4;
  v5[1] = v3;
  result = sub_241624E40(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_241624E40(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  __int128 *v74;
  uint64_t v75;
  __int128 *v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t i;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v2 = a1;
  v3 = a1[1];
  result = sub_2416BB620();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_139;
    if ((unint64_t)v3 >= 2)
    {
      v82 = *v2;
      v83 = *v2 + 136;
      v84 = -1;
      for (i = 1; i != v3; ++i)
      {
        v86 = v84;
        v87 = v83;
        do
        {
          if (*(_QWORD *)(v87 + 128) >= *(_QWORD *)(v87 - 8))
            break;
          if (!v82)
            goto LABEL_143;
          v88 = v87 - 136;
          v128 = *(_OWORD *)(v87 + 96);
          v131 = *(_OWORD *)(v87 + 112);
          v134 = *(_QWORD *)(v87 + 128);
          v116 = *(_OWORD *)(v87 + 32);
          v119 = *(_OWORD *)(v87 + 48);
          v122 = *(_OWORD *)(v87 + 64);
          v125 = *(_OWORD *)(v87 + 80);
          v110 = *(_OWORD *)v87;
          v113 = *(_OWORD *)(v87 + 16);
          v89 = *(_OWORD *)(v87 - 56);
          *(_OWORD *)(v87 + 64) = *(_OWORD *)(v87 - 72);
          *(_OWORD *)(v87 + 80) = v89;
          v90 = *(_OWORD *)(v87 - 24);
          *(_OWORD *)(v87 + 96) = *(_OWORD *)(v87 - 40);
          *(_OWORD *)(v87 + 112) = v90;
          *(_QWORD *)(v87 + 128) = *(_QWORD *)(v87 - 8);
          v91 = *(_OWORD *)(v87 - 88);
          *(_OWORD *)(v87 + 32) = *(_OWORD *)(v87 - 104);
          *(_OWORD *)(v87 + 48) = v91;
          v92 = *(_OWORD *)(v87 - 120);
          *(_OWORD *)v87 = *(_OWORD *)(v87 - 136);
          *(_OWORD *)(v87 + 16) = v92;
          *(_OWORD *)(v88 + 64) = v122;
          *(_OWORD *)(v88 + 80) = v125;
          *(_OWORD *)(v88 + 96) = v128;
          *(_OWORD *)(v88 + 112) = v131;
          *(_QWORD *)(v88 + 128) = v134;
          *(_OWORD *)(v88 + 32) = v116;
          *(_OWORD *)(v88 + 48) = v119;
          v87 -= 136;
          *(_OWORD *)v88 = v110;
          *(_OWORD *)(v88 + 16) = v113;
        }
        while (!__CFADD__(v86++, 1));
        v83 += 136;
        --v84;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_148;
  v104 = result;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    v106 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v94 = (char *)MEMORY[0x24BEE4AF8];
LABEL_105:
      v103 = v8;
      if (v11 >= 2)
      {
        v95 = *v2;
        do
        {
          v96 = v11 - 2;
          if (v11 < 2)
            goto LABEL_134;
          if (!v95)
            goto LABEL_147;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v11 + 24];
          sub_241625660((char *)(v95 + 136 * v98), (char *)(v95 + 136 * *(_QWORD *)&v94[16 * v11 + 16]), v95 + 136 * v99, v106);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_241625B80((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_136;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v11 > v101)
            goto LABEL_137;
          memmove(&v97[16 * v11 + 16], &v97[16 * v11 + 32], 16 * (v101 - v11));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v11 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v103 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v103 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    sub_241627E00(0, (unint64_t *)&qword_25713D0D0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))_s14OrderedElementVMa);
    v7 = sub_2416BB224();
    *(_QWORD *)(v7 + 16) = v6;
    v103 = v7;
    v106 = (char *)(v7 + 32);
  }
  v9 = 0;
  v102 = v2;
  v10 = *v2;
  v107 = (char *)MEMORY[0x24BEE4AF8];
  v105 = v3;
  while (1)
  {
    v12 = v9++;
    if (v9 < v3)
    {
      v13 = *(_QWORD *)(v10 + 136 * v9 + 128);
      v14 = *(_QWORD *)(v10 + 136 * v12 + 128);
      v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v15 = (uint64_t *)(v10 + 400 + 136 * v12);
        v16 = v13;
        while (1)
        {
          v18 = *v15;
          v15 += 17;
          v17 = v18;
          if (v13 < v14 == v18 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v13 < v14)
      {
        if (v9 < v12)
          goto LABEL_140;
        if (v12 < v9)
        {
          v19 = (_OWORD *)(v10 - 136 + 136 * v9);
          v20 = v9;
          v21 = v12;
          v22 = (_OWORD *)(v10 + 136 * v12);
          do
          {
            if (v21 != --v20)
            {
              if (!v10)
                goto LABEL_146;
              v126 = v22[6];
              v129 = v22[7];
              v132 = *((_QWORD *)v22 + 16);
              v114 = v22[2];
              v117 = v22[3];
              v120 = v22[4];
              v123 = v22[5];
              v108 = *v22;
              v111 = v22[1];
              memmove(v22, v19, 0x88uLL);
              v19[6] = v126;
              v19[7] = v129;
              *((_QWORD *)v19 + 16) = v132;
              v19[2] = v114;
              v19[3] = v117;
              v19[4] = v120;
              v19[5] = v123;
              *v19 = v108;
              v19[1] = v111;
            }
            ++v21;
            v19 = (_OWORD *)((char *)v19 - 136);
            v22 = (_OWORD *)((char *)v22 + 136);
          }
          while (v21 < v20);
          v3 = v105;
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_39;
    if (__OFSUB__(v9, v12))
      goto LABEL_138;
    if (v9 - v12 >= v104)
      goto LABEL_39;
    v23 = v12 + v104;
    if (__OFADD__(v12, v104))
      goto LABEL_141;
    if (v23 >= v3)
      v23 = v3;
    if (v23 < v12)
      break;
    if (v9 != v23)
    {
      v74 = (__int128 *)(v10 + 136 * v9);
      v24 = v107;
      do
      {
        v75 = v12;
        v76 = v74;
        do
        {
          if (*((_QWORD *)v76 + 16) >= *((_QWORD *)v76 - 1))
            break;
          if (!v10)
            goto LABEL_144;
          v77 = (uint64_t)v76 - 136;
          v127 = v76[6];
          v130 = v76[7];
          v133 = *((_QWORD *)v76 + 16);
          v115 = v76[2];
          v118 = v76[3];
          v121 = v76[4];
          v124 = v76[5];
          v109 = *v76;
          v112 = v76[1];
          v78 = *(__int128 *)((char *)v76 - 56);
          v76[4] = *(__int128 *)((char *)v76 - 72);
          v76[5] = v78;
          v79 = *(__int128 *)((char *)v76 - 24);
          v76[6] = *(__int128 *)((char *)v76 - 40);
          v76[7] = v79;
          *((_QWORD *)v76 + 16) = *((_QWORD *)v76 - 1);
          v80 = *(__int128 *)((char *)v76 - 88);
          v76[2] = *(__int128 *)((char *)v76 - 104);
          v76[3] = v80;
          v81 = *(__int128 *)((char *)v76 - 120);
          *v76 = *(__int128 *)((char *)v76 - 136);
          v76[1] = v81;
          *(_OWORD *)(v77 + 64) = v121;
          *(_OWORD *)(v77 + 80) = v124;
          *(_OWORD *)(v77 + 96) = v127;
          *(_OWORD *)(v77 + 112) = v130;
          *(_QWORD *)(v77 + 128) = v133;
          *(_OWORD *)(v77 + 32) = v115;
          *(_OWORD *)(v77 + 48) = v118;
          ++v75;
          v76 = (__int128 *)((char *)v76 - 136);
          *(_OWORD *)v77 = v109;
          *(_OWORD *)(v77 + 16) = v112;
        }
        while (v9 != v75);
        ++v9;
        v74 = (__int128 *)((char *)v74 + 136);
      }
      while (v9 != v23);
      v9 = v23;
      if (v23 < v12)
        goto LABEL_133;
      goto LABEL_40;
    }
LABEL_39:
    v24 = v107;
    if (v9 < v12)
      goto LABEL_133;
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v24 = sub_241625914(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
    v26 = *((_QWORD *)v24 + 2);
    v25 = *((_QWORD *)v24 + 3);
    v11 = v26 + 1;
    if (v26 >= v25 >> 1)
      v24 = sub_241625914((char *)(v25 > 1), v26 + 1, 1, v24);
    *((_QWORD *)v24 + 2) = v11;
    v27 = v24 + 32;
    v28 = &v24[16 * v26 + 32];
    *(_QWORD *)v28 = v12;
    *((_QWORD *)v28 + 1) = v9;
    v107 = v24;
    if (v26)
    {
      while (1)
      {
        v29 = v11 - 1;
        if (v11 >= 4)
        {
          v34 = &v27[16 * v11];
          v35 = *((_QWORD *)v34 - 8);
          v36 = *((_QWORD *)v34 - 7);
          v40 = __OFSUB__(v36, v35);
          v37 = v36 - v35;
          if (v40)
            goto LABEL_122;
          v39 = *((_QWORD *)v34 - 6);
          v38 = *((_QWORD *)v34 - 5);
          v40 = __OFSUB__(v38, v39);
          v32 = v38 - v39;
          v33 = v40;
          if (v40)
            goto LABEL_123;
          v41 = v11 - 2;
          v42 = &v27[16 * v11 - 32];
          v44 = *(_QWORD *)v42;
          v43 = *((_QWORD *)v42 + 1);
          v40 = __OFSUB__(v43, v44);
          v45 = v43 - v44;
          if (v40)
            goto LABEL_125;
          v40 = __OFADD__(v32, v45);
          v46 = v32 + v45;
          if (v40)
            goto LABEL_128;
          if (v46 >= v37)
          {
            v64 = &v27[16 * v29];
            v66 = *(_QWORD *)v64;
            v65 = *((_QWORD *)v64 + 1);
            v40 = __OFSUB__(v65, v66);
            v67 = v65 - v66;
            if (v40)
              goto LABEL_132;
            v57 = v32 < v67;
            goto LABEL_76;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v58 = *((_QWORD *)v24 + 4);
            v59 = *((_QWORD *)v24 + 5);
            v40 = __OFSUB__(v59, v58);
            v51 = v59 - v58;
            v52 = v40;
            goto LABEL_70;
          }
          v31 = *((_QWORD *)v24 + 4);
          v30 = *((_QWORD *)v24 + 5);
          v40 = __OFSUB__(v30, v31);
          v32 = v30 - v31;
          v33 = v40;
        }
        if ((v33 & 1) != 0)
          goto LABEL_124;
        v41 = v11 - 2;
        v47 = &v27[16 * v11 - 32];
        v49 = *(_QWORD *)v47;
        v48 = *((_QWORD *)v47 + 1);
        v50 = __OFSUB__(v48, v49);
        v51 = v48 - v49;
        v52 = v50;
        if (v50)
          goto LABEL_127;
        v53 = &v27[16 * v29];
        v55 = *(_QWORD *)v53;
        v54 = *((_QWORD *)v53 + 1);
        v40 = __OFSUB__(v54, v55);
        v56 = v54 - v55;
        if (v40)
          goto LABEL_130;
        if (__OFADD__(v51, v56))
          goto LABEL_131;
        if (v51 + v56 >= v32)
        {
          v57 = v32 < v56;
LABEL_76:
          if (v57)
            v29 = v41;
          goto LABEL_78;
        }
LABEL_70:
        if ((v52 & 1) != 0)
          goto LABEL_126;
        v60 = &v27[16 * v29];
        v62 = *(_QWORD *)v60;
        v61 = *((_QWORD *)v60 + 1);
        v40 = __OFSUB__(v61, v62);
        v63 = v61 - v62;
        if (v40)
          goto LABEL_129;
        if (v63 < v51)
          goto LABEL_15;
LABEL_78:
        v68 = v29 - 1;
        if (v29 - 1 >= v11)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v10)
          goto LABEL_145;
        v69 = &v27[16 * v68];
        v70 = *(_QWORD *)v69;
        v71 = &v27[16 * v29];
        v72 = *((_QWORD *)v71 + 1);
        sub_241625660((char *)(v10 + 136 * *(_QWORD *)v69), (char *)(v10 + 136 * *(_QWORD *)v71), v10 + 136 * v72, v106);
        if (v1)
          goto LABEL_95;
        if (v72 < v70)
          goto LABEL_119;
        if (v29 > *((_QWORD *)v107 + 2))
          goto LABEL_120;
        *(_QWORD *)v69 = v70;
        *(_QWORD *)&v27[16 * v68 + 8] = v72;
        v73 = *((_QWORD *)v107 + 2);
        if (v29 >= v73)
          goto LABEL_121;
        v24 = v107;
        v11 = v73 - 1;
        memmove(&v27[16 * v29], v71 + 16, 16 * (v73 - 1 - v29));
        *((_QWORD *)v107 + 2) = v73 - 1;
        if (v73 <= 2)
          goto LABEL_15;
      }
    }
    v11 = 1;
LABEL_15:
    v3 = v105;
    if (v9 >= v105)
    {
      v8 = v103;
      v94 = v107;
      v2 = v102;
      goto LABEL_105;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  result = sub_2416BB59C();
  __break(1u);
  return result;
}

uint64_t sub_241625660(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t result;
  char *v21;
  const void *v22;
  char *v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 136;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 136;
  v23 = __dst;
  v22 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -135)
    {
      if (a4 != __src || &__src[136 * v11] <= a4)
        memmove(a4, __src, 136 * v11);
      v16 = &v4[136 * v11];
      v21 = v16;
      v23 = v6;
      if (v7 < v6 && v10 >= 136)
      {
        v17 = (char *)(a3 - 136);
        do
        {
          v18 = v17 + 136;
          if (*((_QWORD *)v16 - 1) >= *((_QWORD *)v6 - 1))
          {
            v21 = v16 - 136;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              memmove(v17, v16 - 136, 0x88uLL);
            v19 = v6;
            v16 -= 136;
            if (v6 <= v7)
              break;
          }
          else
          {
            v19 = v6 - 136;
            if (v18 != v6 || v17 >= v6)
              memmove(v17, v6 - 136, 0x88uLL);
            v23 = v6 - 136;
            if (v19 <= v7)
              break;
          }
          v17 -= 136;
          v6 = v19;
        }
        while (v16 > v4);
      }
LABEL_40:
      sub_241625A20((void **)&v23, &v22, &v21);
      return 1;
    }
  }
  else if (v8 >= -135)
  {
    if (a4 != __dst || &__dst[136 * v9] <= a4)
      memmove(a4, __dst, 136 * v9);
    v12 = &v4[136 * v9];
    v21 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 136)
    {
      v13 = v4;
      while (1)
      {
        if (*((_QWORD *)v6 + 16) >= *((_QWORD *)v13 + 16))
        {
          v4 = v13 + 136;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 136;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 136;
          }
        }
        else
        {
          v14 = v6 + 136;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        memmove(v7, v15, 0x88uLL);
LABEL_18:
        v7 += 136;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v22 = v4;
        v23 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = sub_2416BB5FC();
  __break(1u);
  return result;
}

char *sub_241625914(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24159D6B0(0, (unint64_t *)&unk_25713D0E0, (uint64_t (*)(uint64_t))sub_2415DF554, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_241625A20(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -136)
  {
    result = (char *)sub_2416BB5FC();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 136;
    if (result != v3 || result >= &v3[136 * v6])
      return (char *)memmove(result, v3, 136 * v6);
  }
  return result;
}

char *sub_241625AD8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_2416BB5FC();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_241625B80(uint64_t a1)
{
  return sub_241625914(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_241625B94(_OWORD *a1, __int128 *a2)
{
  uint64_t *v2;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  v5 = a2[5];
  v6 = a2[3];
  v45 = a2[4];
  v46 = v5;
  v7 = a2[5];
  v8 = a2[7];
  v47 = a2[6];
  v48 = v8;
  v9 = a2[1];
  v41 = *a2;
  v42 = v9;
  v10 = a2[3];
  v12 = *a2;
  v11 = a2[1];
  v43 = a2[2];
  v44 = v10;
  v13 = *v2;
  v53 = v45;
  v54 = v7;
  v14 = a2[7];
  v55 = v47;
  v56 = v14;
  v49 = v12;
  v50 = v11;
  v51 = v43;
  v52 = v6;
  sub_2416BB6BC();
  swift_bridgeObjectRetain();
  MedicalIDEmergencyContact.hash(into:)();
  v15 = sub_2416BB6EC();
  v16 = -1 << *(_BYTE *)(v13 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v13 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v18 = (__int128 *)(*(_QWORD *)(v13 + 48) + (v17 << 7));
    v53 = v18[4];
    v54 = v18[5];
    v55 = v18[6];
    v56 = v18[7];
    v49 = *v18;
    v50 = v18[1];
    v51 = v18[2];
    v52 = v18[3];
    if ((_s11MedicalIDUI0A18IDEmergencyContactV2eeoiySbAC_ACtFZ_0(&v49, &v41) & 1) != 0)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      sub_2415DA580((uint64_t)a2);
      v21 = (__int128 *)(*(_QWORD *)(*v2 + 48) + (v17 << 7));
      v22 = *v21;
      v23 = v21[1];
      v24 = v21[2];
      v52 = v21[3];
      v25 = v21[4];
      v26 = v21[5];
      v27 = v21[7];
      v55 = v21[6];
      v56 = v27;
      v53 = v25;
      v54 = v26;
      v50 = v23;
      v51 = v24;
      v49 = v22;
      v28 = *v21;
      v29 = v21[1];
      v30 = v21[3];
      a1[2] = v21[2];
      a1[3] = v30;
      *a1 = v28;
      a1[1] = v29;
      v31 = v21[4];
      v32 = v21[5];
      v33 = v21[7];
      a1[6] = v21[6];
      a1[7] = v33;
      a1[4] = v31;
      a1[5] = v32;
      sub_2415DA4E0((uint64_t)&v49);
      return 0;
    }
    v19 = ~v16;
    while (1)
    {
      v17 = (v17 + 1) & v19;
      if (((*(_QWORD *)(v13 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
        break;
      v20 = (__int128 *)(*(_QWORD *)(v13 + 48) + (v17 << 7));
      v53 = v20[4];
      v54 = v20[5];
      v55 = v20[6];
      v56 = v20[7];
      v49 = *v20;
      v50 = v20[1];
      v51 = v20[2];
      v52 = v20[3];
      if ((_s11MedicalIDUI0A18IDEmergencyContactV2eeoiySbAC_ACtFZ_0(&v49, &v41) & 1) != 0)
        goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v53 = v45;
  v54 = v46;
  v55 = v47;
  v56 = v48;
  v49 = v41;
  v50 = v42;
  v51 = v43;
  v52 = v44;
  v40 = *v2;
  *v2 = 0x8000000000000000;
  sub_2415DA4E0((uint64_t)&v49);
  sub_241626784((uint64_t)&v49, v17, isUniquelyReferenced_nonNull_native);
  *v2 = v40;
  swift_bridgeObjectRelease();
  v36 = v54;
  a1[4] = v53;
  a1[5] = v36;
  v37 = v56;
  a1[6] = v55;
  a1[7] = v37;
  v38 = v50;
  *a1 = v49;
  a1[1] = v38;
  v39 = v52;
  result = 1;
  a1[2] = v51;
  a1[3] = v39;
  return result;
}

uint64_t sub_241625E50(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t result;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v3 = v2;
  v6 = *v2;
  sub_2416BB6BC();
  v7 = *(_OWORD *)(a2 + 112);
  v60 = *(_OWORD *)(a2 + 96);
  v61 = v7;
  v62 = *(_QWORD *)(a2 + 128);
  v8 = *(_OWORD *)(a2 + 48);
  v56 = *(_OWORD *)(a2 + 32);
  v57 = v8;
  v9 = *(_OWORD *)(a2 + 80);
  v58 = *(_OWORD *)(a2 + 64);
  v59 = v9;
  v10 = *(_OWORD *)(a2 + 16);
  v54 = *(_OWORD *)a2;
  v55 = v10;
  swift_bridgeObjectRetain();
  MedicalIDEmergencyContact.hash(into:)();
  v11 = sub_2416BB6EC();
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    while (1)
    {
      v15 = *(_QWORD *)(v6 + 48) + 136 * v13;
      v54 = *(_OWORD *)v15;
      v16 = *(_OWORD *)(v15 + 48);
      v17 = *(_OWORD *)(v15 + 64);
      v18 = *(_OWORD *)(v15 + 32);
      v55 = *(_OWORD *)(v15 + 16);
      v56 = v18;
      v57 = v16;
      v58 = v17;
      v19 = *(_OWORD *)(v15 + 80);
      v20 = *(_OWORD *)(v15 + 96);
      v21 = *(_OWORD *)(v15 + 112);
      v62 = *(_QWORD *)(v15 + 128);
      v60 = v20;
      v61 = v21;
      v59 = v19;
      sub_2416BB6BC();
      v51 = v60;
      v52 = v61;
      v53 = v62;
      v47 = v56;
      v48 = v57;
      v49 = v58;
      v50 = v59;
      v45 = v54;
      v46 = v55;
      sub_2415DA4E0((uint64_t)&v54);
      MedicalIDEmergencyContact.hash(into:)();
      v22 = sub_2416BB6EC();
      sub_2416BB6BC();
      v23 = *(_OWORD *)(a2 + 112);
      v51 = *(_OWORD *)(a2 + 96);
      v52 = v23;
      v53 = *(_QWORD *)(a2 + 128);
      v24 = *(_OWORD *)(a2 + 48);
      v47 = *(_OWORD *)(a2 + 32);
      v48 = v24;
      v25 = *(_OWORD *)(a2 + 80);
      v49 = *(_OWORD *)(a2 + 64);
      v50 = v25;
      v26 = *(_OWORD *)(a2 + 16);
      v45 = *(_OWORD *)a2;
      v46 = v26;
      MedicalIDEmergencyContact.hash(into:)();
      v27 = sub_2416BB6EC();
      sub_2415DA580((uint64_t)&v54);
      if (v22 == v27)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    sub_2415DA580(a2);
    v34 = *(_QWORD *)(*v3 + 48) + 136 * v13;
    v36 = *(_OWORD *)(v34 + 16);
    v35 = *(_OWORD *)(v34 + 32);
    v37 = *(_OWORD *)(v34 + 64);
    v48 = *(_OWORD *)(v34 + 48);
    v49 = v37;
    v39 = *(_OWORD *)(v34 + 96);
    v38 = *(_OWORD *)(v34 + 112);
    v40 = *(_OWORD *)(v34 + 80);
    v53 = *(_QWORD *)(v34 + 128);
    v51 = v39;
    v52 = v38;
    v50 = v40;
    v45 = *(_OWORD *)v34;
    v46 = v36;
    v47 = v35;
    v41 = *(_OWORD *)(v34 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(v34 + 96);
    *(_OWORD *)(a1 + 112) = v41;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(v34 + 128);
    v42 = *(_OWORD *)(v34 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v34 + 32);
    *(_OWORD *)(a1 + 48) = v42;
    v43 = *(_OWORD *)(v34 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(v34 + 64);
    *(_OWORD *)(a1 + 80) = v43;
    v44 = *(_OWORD *)(v34 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v34;
    *(_OWORD *)(a1 + 16) = v44;
    sub_2415DA4E0((uint64_t)&v45);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v54 = *v3;
    *v3 = 0x8000000000000000;
    sub_2415DA4E0(a2);
    sub_241626990(a2, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v54;
    swift_bridgeObjectRelease();
    v29 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v29;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v30 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v30;
    v31 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v31;
    v32 = *(_OWORD *)(a2 + 16);
    result = 1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v32;
  }
  return result;
}

uint64_t sub_241626128()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  __int128 *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v1 = v0;
  v2 = *v0;
  sub_241627E00(0, (unint64_t *)&unk_25713D100, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE24D8]);
  v3 = sub_2416BB4B8();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9)
          goto LABEL_33;
        v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v9)
            goto LABEL_33;
          v18 = v6[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v9)
              goto LABEL_33;
            v18 = v6[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v28;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v18 = v6[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_23;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_23:
        v8 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (__int128 *)(*(_QWORD *)(v2 + 48) + (v16 << 7));
      v33 = v20[4];
      v34 = v20[5];
      v35 = v20[6];
      v36 = v20[7];
      v29 = *v20;
      v30 = v20[1];
      v31 = v20[2];
      v32 = v20[3];
      sub_2416BB6BC();
      MedicalIDEmergencyContact.hash(into:)();
      result = sub_2416BB6EC();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_OWORD *)(*(_QWORD *)(v4 + 48) + (v13 << 7));
      v14[4] = v33;
      v14[5] = v34;
      v14[6] = v35;
      v14[7] = v36;
      *v14 = v29;
      v14[1] = v30;
      v14[2] = v31;
      v14[3] = v32;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_241626454()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v1 = v0;
  v2 = *v0;
  sub_241627D90();
  v3 = sub_2416BB4B8();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9)
          goto LABEL_33;
        v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v9)
            goto LABEL_33;
          v18 = v6[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v9)
              goto LABEL_33;
            v18 = v6[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v28;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v18 = v6[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_23;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_23:
        v8 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = *(_QWORD *)(v2 + 48) + 136 * v16;
      v35 = *(_OWORD *)(v20 + 96);
      v36 = *(_OWORD *)(v20 + 112);
      v37 = *(_QWORD *)(v20 + 128);
      v31 = *(_OWORD *)(v20 + 32);
      v32 = *(_OWORD *)(v20 + 48);
      v33 = *(_OWORD *)(v20 + 64);
      v34 = *(_OWORD *)(v20 + 80);
      v29 = *(_OWORD *)v20;
      v30 = *(_OWORD *)(v20 + 16);
      sub_2416BB6BC();
      MedicalIDEmergencyContact.hash(into:)();
      result = sub_2416BB6EC();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v4 + 48) + 136 * v13;
      *(_OWORD *)(v14 + 96) = v35;
      *(_OWORD *)(v14 + 112) = v36;
      *(_QWORD *)(v14 + 128) = v37;
      *(_OWORD *)(v14 + 32) = v31;
      *(_OWORD *)(v14 + 48) = v32;
      *(_OWORD *)(v14 + 64) = v33;
      *(_OWORD *)(v14 + 80) = v34;
      *(_OWORD *)v14 = v29;
      *(_OWORD *)(v14 + 16) = v30;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_241626784(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[8];

  v5 = (__int128 *)result;
  v6 = *(_OWORD *)(result + 80);
  v46[4] = *(_OWORD *)(result + 64);
  v46[5] = v6;
  v7 = *(_OWORD *)(result + 112);
  v46[6] = *(_OWORD *)(result + 96);
  v46[7] = v7;
  v8 = *(_OWORD *)(result + 16);
  v46[0] = *(_OWORD *)result;
  v46[1] = v8;
  v9 = *(_OWORD *)(result + 48);
  v46[2] = *(_OWORD *)(result + 32);
  v46[3] = v9;
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_241626128();
  }
  else
  {
    if (v11 > v10)
    {
      result = (uint64_t)sub_241626C20();
      goto LABEL_14;
    }
    sub_241626FF8();
  }
  v12 = *v3;
  v13 = v5[5];
  v42 = v5[4];
  v43 = v13;
  v14 = v5[7];
  v44 = v5[6];
  v45 = v14;
  v15 = v5[1];
  v38 = *v5;
  v39 = v15;
  v16 = v5[3];
  v40 = v5[2];
  v41 = v16;
  sub_2416BB6BC();
  MedicalIDEmergencyContact.hash(into:)();
  result = sub_2416BB6EC();
  v17 = -1 << *(_BYTE *)(v12 + 32);
  a2 = result & ~v17;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = (__int128 *)(*(_QWORD *)(v12 + 48) + (a2 << 7));
    v19 = v18[5];
    v42 = v18[4];
    v43 = v19;
    v20 = v18[7];
    v44 = v18[6];
    v45 = v20;
    v21 = v18[1];
    v38 = *v18;
    v39 = v21;
    v22 = v18[3];
    v40 = v18[2];
    v41 = v22;
    result = _s11MedicalIDUI0A18IDEmergencyContactV2eeoiySbAC_ACtFZ_0(&v38, v46);
    if ((result & 1) != 0)
    {
LABEL_13:
      result = sub_2416BB65C();
      __break(1u);
    }
    else
    {
      v23 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v23;
        if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v24 = (__int128 *)(*(_QWORD *)(v12 + 48) + (a2 << 7));
        v25 = v24[5];
        v42 = v24[4];
        v43 = v25;
        v26 = v24[7];
        v44 = v24[6];
        v45 = v26;
        v27 = v24[1];
        v38 = *v24;
        v39 = v27;
        v28 = v24[3];
        v40 = v24[2];
        v41 = v28;
        result = _s11MedicalIDUI0A18IDEmergencyContactV2eeoiySbAC_ACtFZ_0(&v38, v46);
        if ((result & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v29 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v30 = (__int128 *)(*(_QWORD *)(v29 + 48) + (a2 << 7));
  v31 = v5[1];
  *v30 = *v5;
  v30[1] = v31;
  v32 = v5[3];
  v30[2] = v5[2];
  v30[3] = v32;
  v33 = v5[7];
  v30[6] = v5[6];
  v30[7] = v33;
  v34 = v5[5];
  v30[4] = v5[4];
  v30[5] = v34;
  v35 = *(_QWORD *)(v29 + 16);
  v36 = __OFADD__(v35, 1);
  v37 = v35 + 1;
  if (v36)
    __break(1u);
  else
    *(_QWORD *)(v29 + 16) = v37;
  return result;
}

uint64_t sub_241626990(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_241626454();
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_241626E0C();
      goto LABEL_12;
    }
    sub_2416272F8();
  }
  v9 = *v3;
  sub_2416BB6BC();
  v10 = *(_OWORD *)(v6 + 112);
  v40 = *(_OWORD *)(v6 + 96);
  v41 = v10;
  v42 = *(_QWORD *)(v6 + 128);
  v11 = *(_OWORD *)(v6 + 48);
  v36 = *(_OWORD *)(v6 + 32);
  v37 = v11;
  v12 = *(_OWORD *)(v6 + 80);
  v38 = *(_OWORD *)(v6 + 64);
  v39 = v12;
  v13 = *(_OWORD *)(v6 + 16);
  v34 = *(_OWORD *)v6;
  v35 = v13;
  MedicalIDEmergencyContact.hash(into:)();
  result = sub_2416BB6EC();
  v14 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v14;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    do
    {
      v16 = *(_QWORD *)(v9 + 48) + 136 * a2;
      v34 = *(_OWORD *)v16;
      v17 = *(_OWORD *)(v16 + 48);
      v18 = *(_OWORD *)(v16 + 64);
      v19 = *(_OWORD *)(v16 + 32);
      v35 = *(_OWORD *)(v16 + 16);
      v36 = v19;
      v37 = v17;
      v38 = v18;
      v20 = *(_OWORD *)(v16 + 80);
      v21 = *(_OWORD *)(v16 + 96);
      v22 = *(_OWORD *)(v16 + 112);
      v42 = *(_QWORD *)(v16 + 128);
      v40 = v21;
      v41 = v22;
      v39 = v20;
      sub_2416BB6BC();
      sub_2415DA4E0((uint64_t)&v34);
      MedicalIDEmergencyContact.hash(into:)();
      v23 = sub_2416BB6EC();
      sub_2416BB6BC();
      MedicalIDEmergencyContact.hash(into:)();
      v24 = sub_2416BB6EC();
      result = sub_2415DA580((uint64_t)&v34);
      if (v23 == v24)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v25 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v26 = *(_QWORD *)(v25 + 48) + 136 * a2;
  v27 = *(_OWORD *)(v6 + 48);
  *(_OWORD *)(v26 + 32) = *(_OWORD *)(v6 + 32);
  *(_OWORD *)(v26 + 48) = v27;
  *(_QWORD *)(v26 + 128) = *(_QWORD *)(v6 + 128);
  v28 = *(_OWORD *)(v6 + 112);
  *(_OWORD *)(v26 + 96) = *(_OWORD *)(v6 + 96);
  *(_OWORD *)(v26 + 112) = v28;
  v29 = *(_OWORD *)(v6 + 80);
  *(_OWORD *)(v26 + 64) = *(_OWORD *)(v6 + 64);
  *(_OWORD *)(v26 + 80) = v29;
  v30 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v6;
  *(_OWORD *)(v26 + 16) = v30;
  v31 = *(_QWORD *)(v25 + 16);
  v32 = __OFADD__(v31, 1);
  v33 = v31 + 1;
  if (!v32)
  {
    *(_QWORD *)(v25 + 16) = v33;
    return result;
  }
  __break(1u);
LABEL_15:
  sub_241627E00(0, (unint64_t *)&qword_25713D0D0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))_s14OrderedElementVMa);
  result = sub_2416BB65C();
  __break(1u);
  return result;
}

void *sub_241626C20()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  _OWORD v27[8];

  v1 = v0;
  sub_241627E00(0, (unint64_t *)&unk_25713D100, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE24D8]);
  v2 = *v0;
  v3 = sub_2416BB4AC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v13)
      goto LABEL_28;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_28;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
      {
        v9 = v24 + 2;
        if (v24 + 2 >= v13)
          goto LABEL_28;
        v25 = *(_QWORD *)(v6 + 8 * v9);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = v15 << 7;
    v17 = (__int128 *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = v17[2];
    v27[3] = v17[3];
    v21 = v17[4];
    v22 = v17[5];
    v23 = v17[7];
    v27[6] = v17[6];
    v27[7] = v23;
    v27[4] = v21;
    v27[5] = v22;
    v27[1] = v18;
    v27[2] = v20;
    v27[0] = v19;
    memmove((void *)(*(_QWORD *)(v4 + 48) + v16), v17, 0x80uLL);
    result = (void *)sub_2415DA4E0((uint64_t)v27);
  }
  v26 = v24 + 3;
  if (v26 >= v13)
    goto LABEL_28;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_241626E0C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  _OWORD v27[8];
  uint64_t v28;

  v1 = v0;
  sub_241627D90();
  v2 = *v0;
  v3 = sub_2416BB4AC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v13)
      goto LABEL_28;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_28;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
      {
        v9 = v24 + 2;
        if (v24 + 2 >= v13)
          goto LABEL_28;
        v25 = *(_QWORD *)(v6 + 8 * v9);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 136 * v15;
    v17 = (_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = v17[1];
    v18 = v17[2];
    v20 = v17[4];
    v27[3] = v17[3];
    v27[4] = v20;
    v21 = v17[5];
    v22 = v17[6];
    v23 = v17[7];
    v28 = *((_QWORD *)v17 + 16);
    v27[6] = v22;
    v27[7] = v23;
    v27[5] = v21;
    v27[0] = *v17;
    v27[1] = v19;
    v27[2] = v18;
    memmove((void *)(*(_QWORD *)(v4 + 48) + v16), v17, 0x88uLL);
    result = (void *)sub_2415DA4E0((uint64_t)v27);
  }
  v26 = v24 + 3;
  if (v26 >= v13)
    goto LABEL_28;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_241626FF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v1 = v0;
  v2 = *v0;
  sub_241627E00(0, (unint64_t *)&unk_25713D100, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE24D8]);
  v3 = sub_2416BB4B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v21 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v22 = v21 | (v12 << 6);
      goto LABEL_24;
    }
    v23 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v23 >= v9)
      goto LABEL_33;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v12;
    if (!v24)
    {
      v12 = v23 + 1;
      if (v23 + 1 >= v9)
        goto LABEL_33;
      v24 = *(_QWORD *)(v6 + 8 * v12);
      if (!v24)
      {
        v12 = v23 + 2;
        if (v23 + 2 >= v9)
          goto LABEL_33;
        v24 = *(_QWORD *)(v6 + 8 * v12);
        if (!v24)
          break;
      }
    }
LABEL_23:
    v8 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v12 << 6);
LABEL_24:
    v26 = (__int128 *)(*(_QWORD *)(v2 + 48) + (v22 << 7));
    v28 = *v26;
    v27 = v26[1];
    v29 = v26[3];
    v42 = v26[2];
    v43 = v29;
    v30 = v26[4];
    v31 = v26[5];
    v32 = v26[7];
    v46 = v26[6];
    v47 = v32;
    v44 = v30;
    v45 = v31;
    v40 = v28;
    v41 = v27;
    sub_2416BB6BC();
    sub_2415DA4E0((uint64_t)&v40);
    MedicalIDEmergencyContact.hash(into:)();
    result = sub_2416BB6EC();
    v33 = -1 << *(_BYTE *)(v4 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v10 + 8 * (v34 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v10 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v10 + 8 * v35);
      }
      while (v39 == -1);
      v13 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_OWORD *)(*(_QWORD *)(v4 + 48) + (v13 << 7));
    v15 = v40;
    v17 = v42;
    v16 = v43;
    v14[1] = v41;
    v14[2] = v17;
    *v14 = v15;
    v18 = v44;
    v19 = v45;
    v20 = v47;
    v14[6] = v46;
    v14[7] = v20;
    v14[4] = v18;
    v14[5] = v19;
    v14[3] = v16;
    ++*(_QWORD *)(v4 + 16);
  }
  v25 = v23 + 3;
  if (v25 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v12 = v25;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v24 = *(_QWORD *)(v6 + 8 * v12);
    ++v25;
    if (v24)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_2416272F8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v1 = v0;
  v2 = *v0;
  sub_241627D90();
  v3 = sub_2416BB4B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v21 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v22 = v21 | (v12 << 6);
      goto LABEL_24;
    }
    v23 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v23 >= v9)
      goto LABEL_33;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v12;
    if (!v24)
    {
      v12 = v23 + 1;
      if (v23 + 1 >= v9)
        goto LABEL_33;
      v24 = *(_QWORD *)(v6 + 8 * v12);
      if (!v24)
      {
        v12 = v23 + 2;
        if (v23 + 2 >= v9)
          goto LABEL_33;
        v24 = *(_QWORD *)(v6 + 8 * v12);
        if (!v24)
          break;
      }
    }
LABEL_23:
    v8 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v12 << 6);
LABEL_24:
    v26 = *(_QWORD *)(v2 + 48) + 136 * v22;
    v27 = *(_OWORD *)(v26 + 64);
    v28 = *(_OWORD *)(v26 + 16);
    v29 = *(_OWORD *)(v26 + 32);
    v43 = *(_OWORD *)(v26 + 48);
    v44 = v27;
    v42 = v29;
    v30 = *(_OWORD *)(v26 + 80);
    v31 = *(_OWORD *)(v26 + 96);
    v32 = *(_OWORD *)(v26 + 112);
    v48 = *(_QWORD *)(v26 + 128);
    v46 = v31;
    v47 = v32;
    v45 = v30;
    v40 = *(_OWORD *)v26;
    v41 = v28;
    sub_2416BB6BC();
    sub_2415DA4E0((uint64_t)&v40);
    MedicalIDEmergencyContact.hash(into:)();
    result = sub_2416BB6EC();
    v33 = -1 << *(_BYTE *)(v4 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v10 + 8 * (v34 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v10 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v10 + 8 * v35);
      }
      while (v39 == -1);
      v13 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v4 + 48) + 136 * v13;
    v15 = v41;
    v16 = v42;
    v17 = v44;
    *(_OWORD *)(v14 + 48) = v43;
    *(_OWORD *)(v14 + 64) = v17;
    *(_OWORD *)(v14 + 16) = v15;
    *(_OWORD *)(v14 + 32) = v16;
    v18 = v45;
    v19 = v46;
    v20 = v47;
    *(_QWORD *)(v14 + 128) = v48;
    *(_OWORD *)(v14 + 96) = v19;
    *(_OWORD *)(v14 + 112) = v20;
    *(_OWORD *)(v14 + 80) = v18;
    *(_OWORD *)v14 = v40;
    ++*(_QWORD *)(v4 + 16);
  }
  v25 = v23 + 3;
  if (v25 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v12 = v25;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v24 = *(_QWORD *)(v6 + 8 * v12);
    ++v25;
    if (v24)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_24162760C(_QWORD *a1)
{
  return sub_2415FEA6C(0, a1[2], 0, a1);
}

uint64_t sub_241627620(uint64_t a1)
{
  return sub_2415FED7C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_241627634(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[8];
  uint64_t v18;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_2416BB5C0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v18 = MEMORY[0x24BEE4AF8];
  result = sub_2415FE51C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v3 = v18;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x242698CF4](v5, a1);
      else
        v6 = *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      sub_2416238EC(v6, v17);

      v18 = v3;
      v9 = *(_QWORD *)(v3 + 16);
      v8 = *(_QWORD *)(v3 + 24);
      if (v9 >= v8 >> 1)
      {
        sub_2415FE51C(v8 > 1, v9 + 1, 1);
        v3 = v18;
      }
      ++v5;
      *(_QWORD *)(v3 + 16) = v9 + 1;
      v10 = (_OWORD *)(v3 + (v9 << 7));
      v11 = v17[0];
      v12 = v17[1];
      v13 = v17[3];
      v10[4] = v17[2];
      v10[5] = v13;
      v10[2] = v11;
      v10[3] = v12;
      v14 = v17[4];
      v15 = v17[5];
      v16 = v17[7];
      v10[8] = v17[6];
      v10[9] = v16;
      v10[6] = v14;
      v10[7] = v15;
    }
    while (v2 != v5);
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_2416277A4(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t Request;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;

  v3 = v2;
  v6 = type metadata accessor for SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker();
  v7 = swift_allocObject();
  Request = type metadata accessor for SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest();
  v9 = swift_allocObject();
  type metadata accessor for SuggestedEmergencyContactFetcher();
  v10 = (_QWORD *)swift_allocObject();
  v10[5] = v6;
  v10[6] = &protocol witness table for SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker;
  v10[2] = v7;
  v10[10] = Request;
  v10[11] = &protocol witness table for SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest;
  v10[7] = v9;
  *(_QWORD *)(v3 + 16) = v10;
  sub_241628630();
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 32) = v11;
  *(_QWORD *)(v3 + 40) = v12;
  *(_BYTE *)(v3 + 56) = 0;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB90, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_2416BFEF0;
  v14 = (void *)objc_opt_self();
  *(_QWORD *)(v13 + 32) = objc_msgSend(v14, sel_descriptorForRequiredKeysForStyle_, 0);
  v15 = objc_msgSend(v14, sel_descriptorForRequiredKeysForStyle_, 1);
  v16 = (void *)*MEMORY[0x24BDBA258];
  *(_QWORD *)(v13 + 40) = v15;
  *(_QWORD *)(v13 + 48) = v16;
  v17 = (void *)*MEMORY[0x24BDBA2F0];
  v18 = (void *)*MEMORY[0x24BDBA3E8];
  *(_QWORD *)(v13 + 56) = *MEMORY[0x24BDBA2F0];
  *(_QWORD *)(v13 + 64) = v18;
  v19 = (void *)*MEMORY[0x24BDBA348];
  v20 = (void *)*MEMORY[0x24BDBA3F0];
  *(_QWORD *)(v13 + 72) = *MEMORY[0x24BDBA348];
  *(_QWORD *)(v13 + 80) = v20;
  *(_QWORD *)(v13 + 88) = v18;
  sub_2416BB200();
  *(_QWORD *)(v3 + 64) = v13;
  *(_QWORD *)(v3 + 48) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  v21 = v18;
  v22 = v16;
  v23 = v17;
  v24 = v19;
  v25 = v20;
  v26 = a1;
  v27 = a2;
  sub_241623490();
  return v3;
}

uint64_t dispatch thunk of MedicalIDEmergencyContactProviding.medicalIDEmergencyContacts(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for MedicalIDEmergencyContactProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for MedicalIDEmergencyContactProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicalIDEmergencyContactProvider.__allocating_init(medicalIDStore:healthStore:contactStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_2416279E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D7F0(0, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_241627A3C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 96);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_241627A54(uint64_t a1)
{
  sub_241627AAC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(void **)(a1 + 96), *(void **)(a1 + 104));
  return a1;
}

void sub_241627AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  if (a13)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
}

uint64_t sub_241627B6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[8];
  uint64_t v10;
  _OWORD v11[8];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[8];
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  sub_241627E00(0, (unint64_t *)&qword_25713D0D0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))_s14OrderedElementVMa);
  sub_241627D38();
  result = sub_2416BB2CC();
  v13 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      v5 = *(_OWORD *)(v4 + 112);
      v14[6] = *(_OWORD *)(v4 + 96);
      v14[7] = v5;
      v15 = *(_QWORD *)(v4 + 128);
      v6 = *(_OWORD *)(v4 + 48);
      v14[2] = *(_OWORD *)(v4 + 32);
      v14[3] = v6;
      v7 = *(_OWORD *)(v4 + 80);
      v14[4] = *(_OWORD *)(v4 + 64);
      v14[5] = v7;
      v8 = *(_OWORD *)(v4 + 16);
      v14[0] = *(_OWORD *)v4;
      v14[1] = v8;
      sub_2415DA4E0((uint64_t)v14);
      sub_241625E50((uint64_t)v9, (uint64_t)v14);
      v11[6] = v9[6];
      v11[7] = v9[7];
      v12 = v10;
      v11[2] = v9[2];
      v11[3] = v9[3];
      v11[4] = v9[4];
      v11[5] = v9[5];
      v11[0] = v9[0];
      v11[1] = v9[1];
      sub_2415DA580((uint64_t)v11);
      v4 += 136;
      --v2;
    }
    while (v2);
    return v13;
  }
  return result;
}

uint64_t sub_241627C74(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[8];
  _OWORD v10[8];
  uint64_t v11;
  __int128 v12[8];

  v2 = *(_QWORD *)(a1 + 16);
  sub_2415DF910();
  result = sub_2416BB2CC();
  v11 = result;
  if (v2)
  {
    v4 = (__int128 *)(a1 + 32);
    do
    {
      v5 = v4[5];
      v12[4] = v4[4];
      v12[5] = v5;
      v6 = v4[7];
      v12[6] = v4[6];
      v12[7] = v6;
      v7 = v4[1];
      v12[0] = *v4;
      v12[1] = v7;
      v8 = v4[3];
      v12[2] = v4[2];
      v12[3] = v8;
      sub_2415DA4E0((uint64_t)v12);
      sub_241625B94(v9, v12);
      v10[4] = v9[4];
      v10[5] = v9[5];
      v10[6] = v9[6];
      v10[7] = v9[7];
      v10[0] = v9[0];
      v10[1] = v9[1];
      v10[2] = v9[2];
      v10[3] = v9[3];
      sub_2415DA580((uint64_t)v10);
      v4 += 8;
      --v2;
    }
    while (v2);
    return v11;
  }
  return result;
}

unint64_t sub_241627D38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713D0F0;
  if (!qword_25713D0F0)
  {
    sub_241627E00(255, (unint64_t *)&qword_25713D0D0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))_s14OrderedElementVMa);
    result = MEMORY[0x2426994BC](&unk_2416C0CA0, v1);
    atomic_store(result, (unint64_t *)&qword_25713D0F0);
  }
  return result;
}

void sub_241627D90()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D0F8)
  {
    sub_241627E00(255, (unint64_t *)&qword_25713D0D0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))_s14OrderedElementVMa);
    sub_241627D38();
    v0 = sub_2416BB4D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D0F8);
  }
}

void sub_241627E00(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_2415DF910();
    v7 = a3(a1, &type metadata for MedicalIDEmergencyContact, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_241627E5C(unint64_t a1, void *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_18;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = sub_2416BB5C0())
  {
    v21 = v2;
    v22 = v2 & 0xC000000000000001;
    v4 = 4;
    while (1)
    {
      v6 = v22 ? (id)MEMORY[0x242698CF4](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      v7 = v6;
      v8 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v9 = objc_msgSend(v6, sel_identifier);
      v10 = sub_2416BB128();
      v12 = v11;

      v13 = objc_msgSend(a2, sel_phoneNumberContactIdentifier);
      if (v13)
      {
        v14 = v13;
        v15 = v3;
        v16 = sub_2416BB128();
        v18 = v17;

        if (v10 == v16 && v12 == v18)
        {
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          v19 = 1;
          goto LABEL_20;
        }
        v5 = sub_2416BB644();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3 = v15;
        v2 = v21;
        if ((v5 & 1) != 0)
        {
          v19 = 1;
          goto LABEL_20;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      ++v4;
      if (v8 == v3)
      {
        v19 = 0;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  v19 = 0;
LABEL_20:
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_241628048(unint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  void *v21;

  if (a1 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    v3 = sub_2416BB5C0();
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      for (i = 4; ; ++i)
      {
        v5 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v6 = (id)MEMORY[0x242698CF4](i - 4, a1);
          v7 = i - 3;
          if (__OFADD__(v5, 1))
            goto LABEL_18;
        }
        else
        {
          v6 = *(id *)(a1 + 8 * i);
          v7 = i - 3;
          if (__OFADD__(v5, 1))
          {
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
        }
        v21 = v6;
        v8 = objc_msgSend(v6, sel_value);
        v9 = objc_msgSend(v8, sel_digits);

        v10 = sub_2416BB128();
        v12 = v11;

        v13 = objc_msgSend(a2, sel_digits);
        v14 = sub_2416BB128();
        v16 = v15;

        if (v10 == v14 && v12 == v16)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_17:
          v3 = (uint64_t)v21;
          swift_bridgeObjectRelease();
          return v3;
        }
        v18 = sub_2416BB644();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
          goto LABEL_17;

        if (v7 == v3)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_241628228(void *a1, void *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  id v9;
  char v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  unint64_t v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v34;
  uint64_t v35;
  uint64_t v36;

  v4 = objc_msgSend(a1, sel_phoneNumberContactIdentifier);
  if (!v4)
  {
LABEL_4:
    v11 = objc_msgSend(a1, sel_phoneNumber);
    if (v11)
    {
      v12 = v11;
      v13 = sub_2416BB128();
      v15 = v14;

      v35 = v13;
      v36 = v15;
      v16 = sub_2416B994C();
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(_QWORD *)(v17 + 64);
      MEMORY[0x24BDAC7A8](v16);
      v19 = sub_2416B9934();
      MEMORY[0x24BDAC7A8](v19);
      v20 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2416B9940();
      v34 = a2;
      v21 = *(void (**)(char *, uint64_t))(v17 + 8);
      v21(v20, v16);
      sub_2415C343C();
      v22 = MEMORY[0x24BEE0D00];
      v23 = sub_2416BB464();
      v21(v20, v16);
      v35 = v23;
      sub_24159D7F0(0, &qword_25713D110, v22, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
      sub_241628564();
      sub_2416BB068();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = objc_allocWithZone(MEMORY[0x24BDBAD88]);
      v25 = (void *)sub_2416BB0F8();
      swift_bridgeObjectRelease();
      v26 = objc_msgSend(v24, sel_initWithStringValue_, v25);

      v27 = objc_msgSend(v34, sel_phoneNumbers);
      sub_2415C0788(0, &qword_25713D120);
      v28 = sub_2416BB1F4();

      v29 = v26;
      v30 = (void *)sub_241628048(v28, v29);
      swift_bridgeObjectRelease();

      if (v30)
      {
        v31 = v30;
        v32 = objc_msgSend(v31, sel_identifier);
        v6 = sub_2416BB128();

        return v6;
      }

    }
    return 0;
  }
  v5 = v4;
  v6 = sub_2416BB128();

  v7 = objc_msgSend(a2, sel_phoneNumbers);
  sub_2415C0788(0, &qword_25713D120);
  v8 = sub_2416BB1F4();

  v9 = a1;
  v10 = sub_241627E5C(v8, v9);
  swift_bridgeObjectRelease();

  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  return v6;
}

unint64_t sub_241628564()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713D118;
  if (!qword_25713D118)
  {
    sub_24159D7F0(255, &qword_25713D110, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_25713D118);
  }
  return result;
}

unint64_t sub_2416285C4()
{
  unint64_t result;

  result = qword_25713D128;
  if (!qword_25713D128)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25713D128);
  }
  return result;
}

double sub_241628618(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void sub_241628630()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D140)
  {
    sub_24159D6B0(255, &qword_25713D148, (uint64_t (*)(uint64_t))sub_2416286AC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_2416BB50C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D140);
  }
}

void sub_2416286AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D150[0])
  {
    sub_2415C0788(255, &qword_25713EB60);
    v0 = sub_2416BB23C();
    if (!v1)
      atomic_store(v0, qword_25713D150);
  }
}

uint64_t sub_241628710()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_241628734(uint64_t a1)
{
  return sub_2416235A0(a1);
}

uint64_t sub_24162873C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_241628760(uint64_t a1)
{
  uint64_t v1;

  return sub_24165B600(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_241628768()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_241628770()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_2416287A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_241628808(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_24162887C(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  return a1;
}

void type metadata accessor for EditingScrollView()
{
  JUMPOUT(0x242699438);
}

uint64_t sub_2416288DC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_241628918@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  _QWORD v34[4];

  v21 = a2;
  v3 = a1[2];
  v19 = a1[3];
  v4 = a1[4];
  v5 = sub_2416BAEC4();
  v6 = a1[5];
  v8 = a1[7];
  v34[0] = a1[6];
  v7 = v34[0];
  v34[1] = v6;
  v34[2] = v8;
  MEMORY[0x2426994BC](MEMORY[0x24BDF4AF8], v5, v34);
  v9 = sub_2416BA924();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - v11;
  v22 = v3;
  v23 = v19;
  v24 = v4;
  v25 = v6;
  v26 = v7;
  v27 = v8;
  v28 = v20;
  sub_2416BA918();
  v13 = MEMORY[0x2426994BC](MEMORY[0x24BDF1988], v9);
  sub_24159C6D0(v9, v13, &v31);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v30[0] = v31;
  v30[1] = v32;
  sub_24159D6B0(255, &qword_257139748, (uint64_t (*)(uint64_t))sub_24159D694, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
  v14 = sub_2416BA150();
  v15 = sub_2415CE734();
  v29[0] = v13;
  v29[1] = v15;
  MEMORY[0x2426994BC](MEMORY[0x24BDED308], v14, v29);
  v16 = sub_2416BA1EC();
  MEMORY[0x2426994BC](MEMORY[0x24BDEDA10], v16);
  sub_2415E3D20((uint64_t)v30, v16, (uint64_t)v33);
  swift_release();
  v31 = v33[0];
  v32 = v33[1];
  sub_2415E07B8((uint64_t)&v31, v16, v21);
  return swift_release();
}

uint64_t sub_241628B2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[10];
  _QWORD v35[10];
  _QWORD v36[4];

  v26 = a8;
  v15 = sub_2416BAEC4();
  v25 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v24 = (uint64_t)&v23 - v19;
  v35[2] = a2;
  v35[3] = a3;
  v35[4] = a4;
  v35[5] = a5;
  v35[6] = a6;
  v35[7] = a7;
  v35[8] = a1;
  v34[2] = a2;
  v34[3] = a3;
  v34[4] = a4;
  v34[5] = a5;
  v34[6] = a6;
  v34[7] = a7;
  v34[8] = a1;
  v27 = a2;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = a6;
  v32 = a7;
  v33 = a1;
  sub_241628F5C((uint64_t)sub_241629098, (uint64_t)v35, (uint64_t)sub_2416290A4, (uint64_t)v34, (void (*)(uint64_t))sub_2416290B0);
  v36[0] = a6;
  v36[1] = a5;
  v36[2] = a7;
  MEMORY[0x2426994BC](MEMORY[0x24BDF4AF8], v15, v36);
  v20 = v24;
  sub_2415E3D20((uint64_t)v18, v15, v24);
  v21 = *(void (**)(char *, uint64_t))(v25 + 8);
  v21(v18, v15);
  sub_2415E07B8(v20, v15, v26);
  return ((uint64_t (*)(uint64_t, uint64_t))v21)(v20, v15);
}

uint64_t sub_241628CD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (**v9)(void);
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void (**)(void))MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v14 - v10;
  (*v9)();
  sub_2415E3D20((uint64_t)v8, a2, (uint64_t)v11);
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, a2);
  sub_2415E07B8((uint64_t)v11, a2, a3);
  return ((uint64_t (*)(char *, uint64_t))v12)(v11, a2);
}

uint64_t sub_241628DAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v14 - v10;
  (*(void (**)(void))(v9 + 16))();
  sub_2415E3D20((uint64_t)v8, a2, (uint64_t)v11);
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, a2);
  sub_2415E07B8((uint64_t)v11, a2, a3);
  return ((uint64_t (*)(char *, uint64_t))v12)(v11, a2);
}

uint64_t sub_241628E84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v14 - v10;
  (*(void (**)(void))(v9 + 32))();
  sub_2415E3D20((uint64_t)v8, a2, (uint64_t)v11);
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, a2);
  sub_2415E07B8((uint64_t)v11, a2, a3);
  return ((uint64_t (*)(char *, uint64_t))v12)(v11, a2);
}

uint64_t sub_241628F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;

  v6 = MEMORY[0x24BDAC7A8](a1);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = v8(v7);
  a5(v9);
  return sub_2416BAEAC();
}

uint64_t sub_241629054@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_241628918(a1, a2);
}

uint64_t sub_24162908C()
{
  return sub_2416290BC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241628B2C);
}

uint64_t sub_241629098()
{
  return sub_2416290BC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241628CD4);
}

uint64_t sub_2416290A4()
{
  return sub_2416290BC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241628DAC);
}

uint64_t sub_2416290B0()
{
  return sub_2416290BC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241628E84);
}

uint64_t sub_2416290BC(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_2416290D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  int8x16_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = sub_2416BAEC4();
  v9 = vextq_s8(*(int8x16_t *)(a1 + 24), *(int8x16_t *)(a1 + 24), 8uLL);
  v10 = v2;
  MEMORY[0x2426994BC](MEMORY[0x24BDF4AF8], v3, &v9);
  v4 = sub_2416BA924();
  sub_24159D6B0(255, &qword_257139748, (uint64_t (*)(uint64_t))sub_24159D694, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
  v5 = sub_2416BA150();
  v8[0] = MEMORY[0x2426994BC](MEMORY[0x24BDF1988], v4);
  v8[1] = sub_2415CE734();
  MEMORY[0x2426994BC](MEMORY[0x24BDED308], v5, v8);
  v6 = sub_2416BA1EC();
  return MEMORY[0x2426994BC](MEMORY[0x24BDEDA10], v6);
}

uint64_t *sub_2416291D4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_2416B9A18();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = a3[8];
    v16 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = (uint64_t)v16;
    v17 = *(void **)((char *)a2 + v15);
    *(uint64_t *)((char *)v4 + v15) = (uint64_t)v17;
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v18 = v16;
    v19 = v17;
  }
  return v4;
}

void sub_2416292C0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = sub_2416B9A18();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

}

_QWORD *sub_241629330(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2416B9A18();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = a3[8];
  v15 = *(void **)((char *)a2 + v13);
  *(_QWORD *)((char *)a1 + v13) = v15;
  v16 = *(void **)((char *)a2 + v14);
  *(_QWORD *)((char *)a1 + v14) = v16;
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  v17 = v15;
  v18 = v16;
  return a1;
}

_QWORD *sub_2416293F0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2416B9A18();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[7];
  v11 = *(void **)((char *)a2 + v10);
  v12 = *(void **)((char *)a1 + v10);
  *(_QWORD *)((char *)a1 + v10) = v11;
  v13 = v11;

  v14 = a3[8];
  v15 = *(void **)((char *)a2 + v14);
  v16 = *(void **)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = v15;
  v17 = v15;

  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_OWORD *sub_2416294D0(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2416B9A18();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_QWORD *sub_24162955C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2416B9A18();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  v13 = *(void **)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);

  v14 = a3[8];
  v15 = *(void **)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);

  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t sub_241629614()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_241629620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2416B9A18();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_24162969C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416296A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_2416B9A18();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for HealthDemographicData()
{
  uint64_t result;

  result = qword_25713D230;
  if (!qword_25713D230)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_241629758()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2416B9A18();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL sub_2416297EC(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  _BOOL8 result;
  BOOL v7;
  char v8;
  uint64_t v9;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_2416BB644(), result = 0, (v5 & 1) != 0))
  {
    v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (v8 = sub_2416BB644(), result = 0, (v8 & 1) != 0))
    {
      v9 = type metadata accessor for HealthDemographicData();
      if ((MEMORY[0x242697188]((char *)a1 + *(int *)(v9 + 24), (char *)a2 + *(int *)(v9 + 24)) & 1) != 0
        && (sub_2416298D8(), (sub_2416BB428() & 1) != 0)
        && (sub_2416BB428() & 1) != 0)
      {
        return *(_QWORD *)((char *)a1 + *(int *)(v9 + 36)) == *(_QWORD *)((char *)a2 + *(int *)(v9 + 36));
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_2416298D8()
{
  unint64_t result;

  result = qword_25713ADA0;
  if (!qword_25713ADA0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25713ADA0);
  }
  return result;
}

void sub_241629914()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_24159D6B0(319, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  if (v0 <= 0x3F)
  {
    sub_2416B9B50();
    if (v1 <= 0x3F)
    {
      sub_2415A0A74(319);
      if (v2 <= 0x3F)
      {
        sub_24159D6B0(319, &qword_25713BC48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

_QWORD *sub_241629A34(_QWORD *a1, char *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *(_QWORD *)a2;
  *a1 = *(_QWORD *)a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v7 = a1;
    a1[1] = *((_QWORD *)a2 + 1);
    sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    v9 = *(int *)(v8 + 32);
    v10 = (char *)v7 + v9;
    v11 = &a2[v9];
    v12 = sub_2416B9B50();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_retain();
    swift_retain();
    if (v14(v11, 1, v12))
    {
      sub_2415A0A74(0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v16 = a3[9];
    v17 = a3[10];
    v18 = (_QWORD *)((char *)v7 + v16);
    v19 = &a2[v16];
    v20 = *((_QWORD *)v19 + 1);
    *v18 = *(_QWORD *)v19;
    v18[1] = v20;
    v21 = (char *)v7 + v17;
    v22 = &a2[v17];
    v23 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    swift_bridgeObjectRetain();
    v23(v21, v22, v12);
    v24 = a3[11];
    v25 = (char *)v7 + v24;
    v26 = &a2[v24];
    if (v14(&a2[v24], 1, v12))
    {
      sub_2415A0A74(0);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v23(v25, v26, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v25, 0, 1, v12);
    }
    v28 = a3[12];
    v29 = (char *)v7 + v28;
    v30 = &a2[v28];
    if (v14(&a2[v28], 1, v12))
    {
      sub_2415A0A74(0);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v23(v29, v30, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v29, 0, 1, v12);
    }
    v32 = a3[14];
    *((_BYTE *)v7 + a3[13]) = a2[a3[13]];
    v33 = (_QWORD *)((char *)v7 + v32);
    v34 = &a2[v32];
    if (*(_QWORD *)v34)
    {
      v35 = *((_QWORD *)v34 + 1);
      *v33 = *(_QWORD *)v34;
      v33[1] = v35;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v33 = *(_OWORD *)v34;
    }
    v36 = a3[15];
    v37 = a3[16];
    v38 = (_QWORD *)((char *)v7 + v36);
    v39 = &a2[v36];
    v40 = *((_QWORD *)v39 + 1);
    *v38 = *(_QWORD *)v39;
    v38[1] = v40;
    v41 = (_QWORD *)((char *)v7 + v37);
    v42 = &a2[v37];
    v43 = *((_QWORD *)v42 + 1);
    *v41 = *(_QWORD *)v42;
    v41[1] = v43;
    v44 = a3[17];
    v45 = (char *)v7 + v44;
    v46 = &a2[v44];
    swift_retain();
    swift_bridgeObjectRetain();
    v23(v45, v46, v12);
    sub_24159D6B0(0, &qword_25713BC48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    *(_QWORD *)&v45[*(int *)(v47 + 28)] = *(_QWORD *)&v46[*(int *)(v47 + 28)];
    v48 = a3[18];
    v49 = (char *)v7 + v48;
    v50 = &a2[v48];
    *v49 = *v50;
    *((_QWORD *)v49 + 1) = *((_QWORD *)v50 + 1);
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t sub_241629D34(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  swift_release();
  swift_release();
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v5 = a1 + *(int *)(v4 + 32);
  v6 = sub_2416B9B50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease();
  v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v9(a1 + a2[10], v6);
  v10 = a1 + a2[11];
  if (!v8(v10, 1, v6))
    v9(v10, v6);
  v11 = a1 + a2[12];
  if (!v8(v11, 1, v6))
    v9(v11, v6);
  if (*(_QWORD *)(a1 + a2[14]))
    swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v9(a1 + a2[17], v6);
  sub_24159D6B0(0, &qword_25713BC48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  swift_release();
  return swift_release();
}

_QWORD *sub_241629ECC(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;

  v6 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v8 = *(int *)(v7 + 32);
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = sub_2416B9B50();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_retain();
  swift_retain();
  if (v13(v10, 1, v11))
  {
    sub_2415A0A74(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[9];
  v16 = a3[10];
  v17 = (_QWORD *)((char *)a1 + v15);
  v18 = &a2[v15];
  v19 = *((_QWORD *)v18 + 1);
  *v17 = *(_QWORD *)v18;
  v17[1] = v19;
  v20 = (char *)a1 + v16;
  v21 = &a2[v16];
  v22 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v11);
  v23 = a3[11];
  v24 = (char *)a1 + v23;
  v25 = &a2[v23];
  if (v13(&a2[v23], 1, v11))
  {
    sub_2415A0A74(0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v22(v24, v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v24, 0, 1, v11);
  }
  v27 = a3[12];
  v28 = (char *)a1 + v27;
  v29 = &a2[v27];
  if (v13(&a2[v27], 1, v11))
  {
    sub_2415A0A74(0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v22(v28, v29, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v28, 0, 1, v11);
  }
  v31 = a3[14];
  *((_BYTE *)a1 + a3[13]) = a2[a3[13]];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = &a2[v31];
  if (*(_QWORD *)v33)
  {
    v34 = *((_QWORD *)v33 + 1);
    *v32 = *(_QWORD *)v33;
    v32[1] = v34;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v32 = *(_OWORD *)v33;
  }
  v35 = a3[15];
  v36 = a3[16];
  v37 = (_QWORD *)((char *)a1 + v35);
  v38 = &a2[v35];
  v39 = *((_QWORD *)v38 + 1);
  *v37 = *(_QWORD *)v38;
  v37[1] = v39;
  v40 = (_QWORD *)((char *)a1 + v36);
  v41 = &a2[v36];
  v42 = *((_QWORD *)v41 + 1);
  *v40 = *(_QWORD *)v41;
  v40[1] = v42;
  v43 = a3[17];
  v44 = (char *)a1 + v43;
  v45 = &a2[v43];
  swift_retain();
  swift_bridgeObjectRetain();
  v22(v44, v45, v11);
  sub_24159D6B0(0, &qword_25713BC48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v44[*(int *)(v46 + 28)] = *(_QWORD *)&v45[*(int *)(v46 + 28)];
  v47 = a3[18];
  v48 = (char *)a1 + v47;
  v49 = &a2[v47];
  *v48 = *v49;
  *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_24162A1A4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_retain();
  swift_release();
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v7 = *(int *)(v6 + 32);
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = sub_2416B9B50();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    sub_2415A0A74(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = a3[9];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = *(void (**)(char *, char *, uint64_t))(v11 + 24);
  v19(&a1[a3[10]], &a2[a3[10]], v10);
  v20 = a3[11];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = v12(&a1[v20], 1, v10);
  v24 = v12(v22, 1, v10);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v21, v22, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, v10);
LABEL_12:
    sub_2415A0A74(0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  v19(v21, v22, v10);
LABEL_13:
  v26 = a3[12];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = v12(&a1[v26], 1, v10);
  v30 = v12(v28, 1, v10);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v27, v28, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v27, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v27, v10);
LABEL_18:
    sub_2415A0A74(0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_19;
  }
  v19(v27, v28, v10);
LABEL_19:
  a1[a3[13]] = a2[a3[13]];
  v32 = a3[14];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = *(_QWORD *)&a1[v32];
  v36 = *(_QWORD *)&a2[v32];
  if (!v35)
  {
    if (v36)
    {
      v38 = *((_QWORD *)v34 + 1);
      *(_QWORD *)v33 = v36;
      *((_QWORD *)v33 + 1) = v38;
      swift_retain();
      goto LABEL_26;
    }
LABEL_25:
    *(_OWORD *)v33 = *(_OWORD *)v34;
    goto LABEL_26;
  }
  if (!v36)
  {
    swift_release();
    goto LABEL_25;
  }
  v37 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v33 = v36;
  *((_QWORD *)v33 + 1) = v37;
  swift_retain();
  swift_release();
LABEL_26:
  v39 = a3[15];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = v42;
  swift_retain();
  swift_release();
  v43 = a3[16];
  v44 = &a1[v43];
  v45 = &a2[v43];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *((_QWORD *)v44 + 1) = *((_QWORD *)v45 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = a3[17];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v19(&a1[v46], &a2[v46], v10);
  sub_24159D6B0(0, &qword_25713BC48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v47[*(int *)(v49 + 28)] = *(_QWORD *)&v48[*(int *)(v49 + 28)];
  swift_retain();
  swift_release();
  v50 = a3[18];
  v51 = &a1[v50];
  v52 = &a2[v50];
  *v51 = *v52;
  *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
  swift_retain();
  swift_release();
  return a1;
}

char *sub_24162A5D8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v8 = *(int *)(v7 + 32);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_2416B9B50();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    sub_2415A0A74(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    v15 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  }
  else
  {
    v15 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v15(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v16 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  v15(&a1[v16], &a2[v16], v11);
  v17 = a3[11];
  v18 = &a1[v17];
  v19 = &a2[v17];
  if (v13(&a2[v17], 1, v11))
  {
    sub_2415A0A74(0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v15(v18, v19, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
  }
  v21 = a3[12];
  v22 = &a1[v21];
  v23 = &a2[v21];
  if (v13(&a2[v21], 1, v11))
  {
    sub_2415A0A74(0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v15(v22, v23, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v22, 0, 1, v11);
  }
  v25 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  v26 = &a1[v25];
  v27 = (uint64_t *)&a2[v25];
  v28 = *v27;
  if (*v27)
  {
    v29 = v27[1];
    *(_QWORD *)v26 = v28;
    *((_QWORD *)v26 + 1) = v29;
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
  }
  v30 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  *(_OWORD *)&a1[v30] = *(_OWORD *)&a2[v30];
  v31 = a3[17];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v15(&a1[v31], &a2[v31], v11);
  sub_24159D6B0(0, &qword_25713BC48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v32[*(int *)(v34 + 28)] = *(_QWORD *)&v33[*(int *)(v34 + 28)];
  *(_OWORD *)&a1[a3[18]] = *(_OWORD *)&a2[a3[18]];
  return a1;
}

char *sub_24162A850(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_release();
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v7 = *(int *)(v6 + 32);
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = sub_2416B9B50();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    sub_2415A0A74(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = a3[9];
  v17 = &a1[v16];
  v18 = (uint64_t *)&a2[v16];
  v20 = *v18;
  v19 = v18[1];
  *(_QWORD *)v17 = v20;
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  v21 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v21(&a1[a3[10]], &a2[a3[10]], v10);
  v22 = a3[11];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = v12(&a1[v22], 1, v10);
  v26 = v12(v24, 1, v10);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v23, v24, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v23, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v23, v10);
LABEL_12:
    sub_2415A0A74(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  v21(v23, v24, v10);
LABEL_13:
  v28 = a3[12];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = v12(&a1[v28], 1, v10);
  v32 = v12(v30, 1, v10);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v29, v30, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v29, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v29, v10);
LABEL_18:
    sub_2415A0A74(0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_19;
  }
  v21(v29, v30, v10);
LABEL_19:
  v34 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = *(_QWORD *)&a2[v34];
  if (!*(_QWORD *)&a1[v34])
  {
    if (v37)
    {
      v39 = *((_QWORD *)v36 + 1);
      *(_QWORD *)v35 = v37;
      *((_QWORD *)v35 + 1) = v39;
      goto LABEL_26;
    }
LABEL_25:
    *(_OWORD *)v35 = *(_OWORD *)v36;
    goto LABEL_26;
  }
  if (!v37)
  {
    swift_release();
    goto LABEL_25;
  }
  v38 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v35 = v37;
  *((_QWORD *)v35 + 1) = v38;
  swift_release();
LABEL_26:
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  swift_release();
  v40 = a3[16];
  v41 = &a1[v40];
  v42 = (uint64_t *)&a2[v40];
  v44 = *v42;
  v43 = v42[1];
  *(_QWORD *)v41 = v44;
  *((_QWORD *)v41 + 1) = v43;
  swift_bridgeObjectRelease();
  v45 = a3[17];
  v46 = &a1[v45];
  v47 = &a2[v45];
  v21(&a1[v45], &a2[v45], v10);
  sub_24159D6B0(0, &qword_25713BC48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v46[*(int *)(v48 + 28)] = *(_QWORD *)&v47[*(int *)(v48 + 28)];
  swift_release();
  v49 = a3[18];
  v50 = &a1[v49];
  v51 = &a2[v49];
  *v50 = *v51;
  *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
  swift_release();
  return a1;
}

uint64_t sub_24162AC28()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24162AC34(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = sub_2416B9B50();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[10];
    }
    else
    {
      sub_2415A0A74(0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
      {
        v8 = v16;
        v15 = a3[11];
      }
      else
      {
        sub_24159D6B0(0, &qword_25713BC48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
        v8 = v17;
        v14 = *(_QWORD *)(v17 - 8);
        v15 = a3[17];
      }
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[9] + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_24162AD58()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_24162AD64(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[9] + 8) = (a2 - 1);
      return;
    }
    v13 = sub_2416B9B50();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[10];
    }
    else
    {
      sub_2415A0A74(0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[11];
      }
      else
      {
        sub_24159D6B0(0, &qword_25713BC48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
        v10 = v17;
        v14 = *(_QWORD *)(v17 - 8);
        v15 = a4[17];
      }
    }
    v12 = a1 + v15;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for DatePickerEditView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DatePickerEditView);
}

uint64_t sub_24162AE90()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24162AEC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  sub_2415A0A74(0);
  MEMORY[0x24BDAC7A8](v2);
  sub_2415BEF64(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))sub_2415A0A74);
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  sub_2416BAE1C();
  return sub_2415A6154(a1, (uint64_t (*)(_QWORD))sub_2415A0A74);
}

void sub_24162AF6C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(void);
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t KeyPath;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  _BYTE v120[7];
  _BYTE v121[7];
  char v122;
  _BYTE v123[7];
  _BYTE v124[7];
  char v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _BYTE v133[25];

  v99 = a2;
  v112 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v110 = v4;
  v111 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24162FFEC();
  v104 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v107 = (uint64_t)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_2416BA1D4();
  MEMORY[0x24BDAC7A8](v102);
  v105 = (uint64_t *)((char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24162FF30(0);
  v103 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (_OWORD *)((char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24162FF14(0);
  v106 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v108 = (uint64_t)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24162FE88(0, &qword_25713D390, v13, (unint64_t *)&qword_257139CD0, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF06F8]);
  v113 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v109 = (uint64_t)&v95 - v15;
  sub_24162FDF4(0);
  v98 = v16;
  v97 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v114 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24162FDD8(0);
  MEMORY[0x24BDAC7A8](v18);
  v96 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_2416B9B50();
  v100 = *(_QWORD *)(v101 - 8);
  MEMORY[0x24BDAC7A8](v101);
  v21 = (char *)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = a1;
  v116 = v2;
  sub_24159D6B0(0, &qword_25713BC48, v22, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v23 = sub_2416B9AFC();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416B9AF0();
  v27 = sub_2416B9AE4();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v95 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416B9AD8();
  v31 = sub_2416B9B38();
  v33 = v32;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v21, v101);
  *(_QWORD *)&v126 = v31;
  *((_QWORD *)&v126 + 1) = v33;
  sub_2415C343C();
  v34 = sub_2416BA9D8();
  v36 = v35;
  v38 = v37;
  v40 = v39;
  v41 = sub_2416BA810();
  if (qword_2571394F0 != -1)
    swift_once();
  sub_2416B9EF8();
  v43 = v42;
  v45 = v44;
  v47 = v46;
  v49 = v48;
  v50 = sub_2416BA864();
  if (qword_2571394F8 != -1)
    swift_once();
  sub_2416B9EF8();
  v52 = v51;
  v54 = v53;
  v56 = v55;
  v58 = v57;
  v125 = v38 & 1;
  v122 = 0;
  v119 = 0;
  v59 = objc_msgSend((id)objc_opt_self(), sel_tertiarySystemGroupedBackgroundColor);
  v60 = MEMORY[0x242698478](v59);
  v61 = sub_2416BA81C();
  *(_QWORD *)&v126 = v34;
  *((_QWORD *)&v126 + 1) = v36;
  LOBYTE(v127) = v125;
  *(_DWORD *)((char *)&v127 + 1) = *(_DWORD *)v124;
  DWORD1(v127) = *(_DWORD *)&v124[3];
  *((_QWORD *)&v127 + 1) = v40;
  LOBYTE(v128) = v41;
  *(_DWORD *)((char *)&v128 + 1) = *(_DWORD *)v123;
  DWORD1(v128) = *(_DWORD *)&v123[3];
  *((_QWORD *)&v128 + 1) = v43;
  *(_QWORD *)&v129 = v45;
  *((_QWORD *)&v129 + 1) = v47;
  *(_QWORD *)&v130 = v49;
  BYTE8(v130) = v122;
  HIDWORD(v130) = *(_DWORD *)&v121[3];
  *(_DWORD *)((char *)&v130 + 9) = *(_DWORD *)v121;
  LOBYTE(v131) = v50;
  DWORD1(v131) = *(_DWORD *)&v120[3];
  *(_DWORD *)((char *)&v131 + 1) = *(_DWORD *)v120;
  *((_QWORD *)&v131 + 1) = v52;
  *(_QWORD *)&v132 = v54;
  *((_QWORD *)&v132 + 1) = v56;
  *(_QWORD *)v133 = v58;
  v133[8] = v119;
  *(_QWORD *)&v133[16] = v60;
  v133[24] = v61;
  if (qword_2571394E8 != -1)
    swift_once();
  v62 = qword_25713D278;
  v63 = v105;
  v64 = (char *)v105 + *(int *)(v102 + 20);
  v65 = *MEMORY[0x24BDEEB68];
  v66 = sub_2416BA4EC();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 104))(v64, v65, v66);
  *v63 = v62;
  v63[1] = v62;
  v67 = MEMORY[0x24BDED998];
  v68 = v107;
  sub_2415BEF64((uint64_t)v63, v107, (uint64_t (*)(_QWORD))MEMORY[0x24BDED998]);
  *(_WORD *)(v68 + *(int *)(v104 + 36)) = 256;
  sub_2415BEF64(v68, (uint64_t)v10 + *(int *)(v103 + 36), (uint64_t (*)(_QWORD))sub_24162FFEC);
  v69 = v131;
  v70 = *(_OWORD *)v133;
  v10[6] = v132;
  v10[7] = v70;
  *(_OWORD *)((char *)v10 + 121) = *(_OWORD *)&v133[9];
  v71 = v129;
  v10[2] = v128;
  v10[3] = v71;
  v10[4] = v130;
  v10[5] = v69;
  v72 = v127;
  *v10 = v126;
  v10[1] = v72;
  sub_241630A60((uint64_t)&v126);
  sub_2415A6154(v68, (uint64_t (*)(_QWORD))sub_24162FFEC);
  sub_2415A6154((uint64_t)v63, (uint64_t (*)(_QWORD))v67);
  sub_241630AB0((uint64_t)&v126);
  v73 = sub_2416BA87C();
  KeyPath = swift_getKeyPath();
  v75 = v108;
  sub_2415BEF64((uint64_t)v10, v108, (uint64_t (*)(_QWORD))sub_24162FF30);
  v76 = (uint64_t *)(v75 + *(int *)(v106 + 36));
  *v76 = KeyPath;
  v76[1] = v73;
  sub_2415A6154((uint64_t)v10, (uint64_t (*)(_QWORD))sub_24162FF30);
  v77 = sub_2416BAC18();
  v78 = v109;
  sub_2415BEF64(v75, v109, (uint64_t (*)(_QWORD))sub_24162FF14);
  v79 = v113;
  *(_QWORD *)(v78 + *(int *)(v113 + 36)) = v77;
  sub_2415A6154(v75, (uint64_t (*)(_QWORD))sub_24162FF14);
  v80 = v112;
  v81 = v111;
  v82 = v116;
  v83 = v115;
  (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v111, v116, v115);
  v84 = (*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
  v85 = swift_allocObject();
  *(_OWORD *)(v85 + 16) = *(_OWORD *)(v83 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v80 + 32))(v85 + v84, v81, v83);
  v86 = sub_241630064();
  v87 = v114;
  sub_2416BAA80();
  swift_release();
  sub_241630D28(v78);
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v88 = swift_allocObject();
  *(_OWORD *)(v88 + 16) = xmmword_2416BCC80;
  v89 = (_QWORD *)(v82 + *(int *)(v83 + 64));
  v90 = v89[1];
  *(_QWORD *)(v88 + 32) = *v89;
  *(_QWORD *)(v88 + 40) = v90;
  *(_QWORD *)(v88 + 48) = 1702125892;
  *(_QWORD *)(v88 + 56) = 0xE400000000000000;
  swift_bridgeObjectRetain();
  v91 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v92 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v92)
  {
    sub_2416BB128();

    v117 = v79;
    v118 = v86;
    swift_getOpaqueTypeConformance2();
    v93 = (uint64_t)v96;
    v94 = v98;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v87, v94);
    sub_2415A85BC(v93, v99, (uint64_t (*)(_QWORD))sub_24162FDD8);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24162B920(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  v2 = *(uint64_t (**)(void))(v1 + *(int *)(a1 + 56));
  if (v2)
    a1 = v2();
  MEMORY[0x24BDAC7A8](a1);
  sub_2416BAF60();
  sub_2416BA0D8();
  return swift_release();
}

uint64_t sub_24162B9C0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  char v20;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  result = MEMORY[0x24BDAC7A8](a1);
  if (*(_BYTE *)(v2 + *(int *)(result + 52)) == 1)
  {
    v9 = (char *)(v2 + *(int *)(a1 + 72));
    v10 = *v9;
    v11 = *((_QWORD *)v9 + 1);
    v18[8] = v10;
    v19 = v11;
    sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
    result = sub_2416BAD14();
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if (v20 == 1)
    {
      v16 = (uint64_t *)(v3 + *(int *)(a1 + 64));
      v12 = *v16;
      v13 = v16[1];
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(&v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v3, a1);
      v17 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = *(_OWORD *)(a1 + 16);
      (*(void (**)(unint64_t, _BYTE *, uint64_t))(v6 + 32))(v15 + v17, &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], a1);
      result = swift_bridgeObjectRetain();
      v14 = sub_2416309F4;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  *a2 = v12;
  a2[1] = v13;
  a2[2] = v14;
  a2[3] = v15;
  return result;
}

uint64_t sub_24162BB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  _BYTE v15[24];
  uint64_t v16;

  v5 = type metadata accessor for DatePickerEditView(0, a2, a3, a4);
  v6 = *(void (**)(void))(a1 + *(int *)(v5 + 56));
  if (v6)
    v6();
  sub_2415A0A74(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_2416B9B50();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  sub_24162AEC4((uint64_t)v9);
  v11 = (char *)(a1 + *(int *)(v5 + 72));
  v12 = *v11;
  v13 = *((_QWORD *)v11 + 1);
  v15[16] = v12;
  v16 = v13;
  v15[15] = 0;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  return sub_2416BAD20();
}

void sub_24162BC3C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[9];
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v54 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380];
  sub_24162FC40(0, &qword_25713D310, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
  v51 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v53 = (char *)v37 - v5;
  sub_24162FA2C(0, &qword_25713D348, v3);
  v37[5] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v37[6] = (char *)v37 - v7;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8];
  sub_24162FA2C(0, &qword_25713D318, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
  v52 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v37[7] = (char *)v37 - v10;
  sub_24162FBE4(0, &qword_25713D350, v3);
  v37[1] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v37[2] = (char *)v37 - v12;
  v48 = sub_2416BA684();
  v44 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v43 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_2416BA5A0();
  v37[8] = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v39 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415A3D28(0, &qword_25713D330, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], MEMORY[0x24BDEB018]);
  v45 = v15;
  v41 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v40 = (char *)v37 - v16;
  sub_24162FAA4(0);
  v50 = v17;
  v47 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v42 = (char *)v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v46 = (char *)v37 - v20;
  sub_24162FBE4(0, &qword_25713D320, v8);
  v37[4] = v21;
  MEMORY[0x24BDAC7A8](v21);
  v37[3] = (char *)v37 - v22;
  sub_24162FC40(0, &qword_25713D358, v8);
  v61 = v23;
  v60 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v49 = (char *)v37 - v24;
  sub_24162FCB8();
  v62 = v25;
  v26 = MEMORY[0x24BDAC7A8](v25);
  v63 = (char *)v37 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v59 = (char *)v37 - v29;
  v64 = *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
  MEMORY[0x24BDAC7A8](v28);
  v65 = (char *)v37 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415E40F8();
  sub_24162FD1C(255);
  sub_2416BA588();
  swift_getTupleTypeMetadata3();
  v31 = sub_2416BAFA8();
  v32 = MEMORY[0x24BDF5428];
  MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v31);
  v33 = sub_2416BAD8C();
  sub_2416302B8(255);
  sub_2416BA588();
  swift_getTupleTypeMetadata2();
  v34 = sub_2416BAFA8();
  MEMORY[0x2426994BC](v32, v34);
  v35 = sub_2416BADF8();
  v57 = v35;
  v58 = v33;
  v36 = MEMORY[0x2426994BC](MEMORY[0x24BDF4498], v33);
  v56 = v36;
  v55 = MEMORY[0x2426994BC](MEMORY[0x24BDF4700], v35);
  v66 = v33;
  v67 = v35;
  v68 = v36;
  v69 = v55;
  type metadata accessor for MedicalIDAXLayoutView();
}

void sub_24162C190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;

  *(_QWORD *)(v12 - 408) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v12 - 480) = (char *)&a9 - v14;
  *(_QWORD *)(v12 - 520) = a1;
  v15 = sub_2416BA150();
  *(_QWORD *)(v12 - 400) = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  *(_QWORD *)(v12 - 488) = (char *)&a9 - v16;
  sub_24161B9F8();
  *(_QWORD *)(v12 - 504) = v15;
  v17 = sub_2416BA150();
  *(_QWORD *)(v12 - 360) = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)(v12 - 496) = (char *)&a9 - v18;
  v19 = MEMORY[0x2426994BC](&unk_2416C0968, a1);
  *(_QWORD *)(v12 - 552) = v19;
  v20 = MEMORY[0x24BDEF830];
  *(_QWORD *)(v12 - 136) = v19;
  *(_QWORD *)(v12 - 128) = v20;
  v21 = MEMORY[0x24BDED308];
  v22 = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v15, v12 - 136);
  *(_QWORD *)(v12 - 544) = v22;
  v23 = sub_24159CE88(qword_25713CDD0, (uint64_t (*)(uint64_t))sub_24161B9F8, MEMORY[0x24BDEFAD8]);
  *(_QWORD *)(v12 - 152) = v22;
  *(_QWORD *)(v12 - 144) = v23;
  v24 = MEMORY[0x2426994BC](v21, v17, v12 - 152);
  *(_QWORD *)(v12 - 120) = v17;
  *(_QWORD *)(v12 - 112) = v24;
  v25 = v17;
  *(_QWORD *)(v12 - 536) = v17;
  v26 = v24;
  *(_QWORD *)(v12 - 528) = v24;
  v27 = MEMORY[0x242699480](0, v12 - 120, MEMORY[0x24BDF2550], 0);
  *(_QWORD *)(v12 - 352) = *(_QWORD *)(v27 - 8);
  v28 = v27;
  *(_QWORD *)(v12 - 472) = v27;
  MEMORY[0x24BDAC7A8](v27);
  *(_QWORD *)(v12 - 512) = (char *)&a9 - v29;
  sub_2415A0A74(255);
  v31 = v30;
  *(_QWORD *)(v12 - 120) = v25;
  *(_QWORD *)(v12 - 112) = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v33 = sub_2416303FC();
  *(_QWORD *)(v12 - 120) = v28;
  *(_QWORD *)(v12 - 112) = v31;
  v34 = v31;
  *(_QWORD *)(v12 - 560) = v31;
  *(_QWORD *)(v12 - 104) = OpaqueTypeConformance2;
  *(_QWORD *)(v12 - 96) = v33;
  *(_QWORD *)(v12 - 456) = OpaqueTypeConformance2;
  *(_QWORD *)(v12 - 464) = v33;
  v35 = MEMORY[0x24BDF3908];
  v36 = MEMORY[0x242699480](255, v12 - 120, MEMORY[0x24BDF3908], 0);
  v37 = sub_2416B9B50();
  *(_QWORD *)(v12 - 448) = v37;
  *(_QWORD *)(v12 - 120) = v28;
  *(_QWORD *)(v12 - 112) = v34;
  *(_QWORD *)(v12 - 104) = OpaqueTypeConformance2;
  *(_QWORD *)(v12 - 96) = v33;
  v38 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v12 - 368) = v38;
  v39 = sub_241630894(&qword_25713BA90, MEMORY[0x24BDCE950]);
  *(_QWORD *)(v12 - 344) = v39;
  *(_QWORD *)(v12 - 120) = v36;
  *(_QWORD *)(v12 - 112) = v37;
  *(_QWORD *)(v12 - 104) = v38;
  *(_QWORD *)(v12 - 96) = v39;
  v40 = MEMORY[0x242699480](0, v12 - 120, v35, 0);
  *(_QWORD *)(v12 - 304) = v40;
  v41 = *(_QWORD *)(v40 - 8);
  *(_QWORD *)(v12 - 320) = v41;
  *(_QWORD *)(v12 - 328) = *(_QWORD *)(v41 + 64);
  v42 = MEMORY[0x24BDAC7A8](v40);
  *(_QWORD *)(v12 - 312) = (char *)&a9 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v42);
  *(_QWORD *)(v12 - 584) = v44;
  *(_QWORD *)(v12 - 384) = (char *)&a9 - v44;
  v45 = swift_checkMetadataState();
  *(_QWORD *)(v12 - 392) = v45;
  *(_QWORD *)(v12 - 376) = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  *(_QWORD *)(v12 - 208) = (char *)&a9 - v46;
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v48 = *(_QWORD *)(v12 - 216);
  v49 = *(_QWORD *)(v12 - 192);
  v47(v48, v49, v9);
  v50 = v47;
  *(_QWORD *)(v12 - 256) = v47;
  v51 = *(unsigned __int8 *)(v10 + 80);
  v52 = v10;
  v53 = (v51 + 32) & ~v51;
  v54 = v53 + *(_QWORD *)(v12 - 224);
  *(_QWORD *)(v12 - 264) = v51 | 7;
  *(_QWORD *)(v12 - 232) = v54;
  v55 = swift_allocObject();
  v56 = v9;
  v57 = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v12 - 200) = v11;
  *(_QWORD *)(v55 + 16) = v11;
  *(_QWORD *)(v55 + 24) = v57;
  *(_QWORD *)(v12 - 240) = v53;
  v58 = *(void (**)(uint64_t, uint64_t))(v52 + 32);
  v59 = v56;
  v58(v55 + v53, v48);
  *(_QWORD *)(v12 - 248) = v58;
  v50(v48, v49, v59);
  v60 = swift_allocObject();
  *(_QWORD *)(v60 + 16) = v11;
  *(_QWORD *)(v60 + 24) = v57;
  *(_QWORD *)(v12 - 224) = v57;
  ((void (*)(uint64_t, uint64_t, uint64_t))v58)(v60 + v53, v48, v59);
  sub_241641A58(*(uint64_t **)(v12 - 480));
}

uint64_t sub_24162C638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  void (*v43)(_BYTE *, uint64_t);
  uint64_t v44;
  uint64_t OpaqueTypeConformance2;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  int *v51;
  char *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  unsigned int (*v64)(_BYTE *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t result;
  uint64_t (*v96)(uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(_QWORD, _QWORD);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  void (*v120)(_BYTE *, _BYTE *, uint64_t);
  uint64_t (*v121)(uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _BYTE *v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _BYTE *v147;
  uint64_t (*v148)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v149;
  _BYTE *v150;
  void (*v151)(_BYTE *, _BYTE *, uint64_t);
  uint64_t (*v152)(_BYTE *, uint64_t);
  uint64_t v153;
  _BYTE *v154;
  void (*v155)(_QWORD, _QWORD);
  uint64_t (*v156)(uint64_t);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v172;
  void (*v173)(uint64_t, uint64_t);
  _BYTE v174[96];

  v5 = *(_QWORD *)(v4 - 488);
  v6 = *(_QWORD *)(v4 - 520);
  sub_2416BAA5C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 408) + 8))(v3, v6);
  sub_2415BE1DC();
  v7 = *(_QWORD *)(v4 - 496);
  v8 = *(_QWORD *)(v4 - 504);
  sub_2416BAA68();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 400) + 8))(v5, v8);
  v9 = v2;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 - 256);
  v10(v0, *(_QWORD *)(v4 - 192), v2);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v4 - 200);
  *(_QWORD *)(v11 + 24) = v1;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 - 248);
  v13 = *(_QWORD *)(v4 - 240);
  v12(v11 + v13, v0, v9);
  v14 = *(_QWORD *)(v4 - 512);
  v15 = *(_QWORD *)(v4 - 536);
  sub_2416BAA80();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 360) + 8))(v7, v15);
  v16 = swift_checkMetadataState();
  *(_QWORD *)(v4 - 360) = *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64);
  MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v4 - 416) = v17;
  v18 = &v174[-v17];
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v19 = *(_QWORD *)(v4 - 192);
  MEMORY[0x242698604]();
  v20 = *(_QWORD *)(v4 - 216);
  v10(v20, v19, v9);
  v21 = swift_allocObject();
  v22 = *(_QWORD *)(v4 - 224);
  *(_QWORD *)(v21 + 16) = *(_QWORD *)(v4 - 200);
  *(_QWORD *)(v21 + 24) = v22;
  v23 = v21 + v13;
  v24 = v20;
  v12(v23, v20, v9);
  v25 = *(_QWORD *)(v4 - 472);
  sub_2416BABE8();
  swift_release();
  sub_2415A6154((uint64_t)v18, (uint64_t (*)(_QWORD))sub_2415A0A74);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 352) + 8))(v14, v25);
  v26 = swift_checkMetadataState();
  v27 = *(_QWORD *)(v26 - 8);
  *(_QWORD *)(v4 - 424) = *(_QWORD *)(v27 + 64);
  MEMORY[0x24BDAC7A8](v26);
  *(_QWORD *)(v4 - 432) = v28;
  v29 = &v174[-v28];
  v30 = *(_QWORD *)(v4 - 192);
  v31 = v30 + *(int *)(v9 + 68);
  sub_24159D6B0(0, &qword_25713BC48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)(v4 - 408) = v32;
  *(_QWORD *)(v4 - 400) = v31;
  sub_2416BAD14();
  v33 = v9;
  *(_QWORD *)(v4 - 568) = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 - 256))(v24, v30, v9);
  v34 = *(_QWORD *)(v4 - 304);
  v35 = swift_allocObject();
  v36 = *(_QWORD *)(v4 - 224);
  *(_QWORD *)(v35 + 16) = *(_QWORD *)(v4 - 200);
  *(_QWORD *)(v35 + 24) = v36;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 - 248))(v35 + *(_QWORD *)(v4 - 240), v24, v33);
  v37 = *(_QWORD *)(v4 - 384);
  v38 = *(_QWORD *)(v4 - 392);
  v39 = *(_QWORD *)(v4 - 368);
  v40 = *(_QWORD *)(v4 - 344);
  v41 = *(_QWORD *)(v4 - 208);
  sub_2416BABE8();
  swift_release();
  *(_QWORD *)(v4 - 216) = v27;
  v42 = v29;
  v43 = *(void (**)(_BYTE *, uint64_t))(v27 + 8);
  v43(v42, v26);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 376) + 8))(v41, v38);
  *(_QWORD *)(v4 - 120) = v38;
  *(_QWORD *)(v4 - 112) = v26;
  *(_QWORD *)(v4 - 352) = v26;
  v44 = *(_QWORD *)(v4 - 272);
  *(_QWORD *)(v4 - 104) = v39;
  *(_QWORD *)(v4 - 96) = v40;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v46 = v37;
  v47 = *(_QWORD *)(v4 - 312);
  sub_2415E3D20(v46, v34, v47);
  v48 = *(_QWORD *)(v4 - 320);
  v49 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  *(_QWORD *)(v4 - 200) = v49;
  v49(v46, v34);
  v50 = *(_QWORD *)(v4 - 280);
  v51 = *(int **)(v4 - 568);
  v52 = (char *)(*(_QWORD *)(v4 - 192) + v51[18]);
  v53 = *v52;
  v54 = *((_QWORD *)v52 + 1);
  *(_BYTE *)(v4 - 120) = v53;
  *(_QWORD *)(v4 - 112) = v54;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  v55 = sub_2416BAD14();
  v56 = 1;
  v57 = *(_QWORD *)(v4 - 288);
  v58 = *(_QWORD *)(v4 - 296);
  if (*(_BYTE *)(v4 - 168) != 1)
    goto LABEL_14;
  *(_QWORD *)(v4 - 224) = v43;
  *(_QWORD *)(v4 - 208) = OpaqueTypeConformance2;
  v59 = *(_QWORD *)(v4 - 424);
  MEMORY[0x24BDAC7A8](v55);
  v60 = &v174[-*(_QWORD *)(v4 - 432)];
  v61 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v4 - 192) + v51[11]);
  v62 = &v174[-*(_QWORD *)(v4 - 416)];
  sub_2415BEF64(v61, (uint64_t)v62, (uint64_t (*)(_QWORD))sub_2415A0A74);
  v63 = *(_QWORD *)(v4 - 216);
  v64 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v63 + 48);
  v65 = *(_QWORD *)(v4 - 352);
  if (v64(v62, 1, v65) == 1)
  {
    v66 = sub_2415A6154((uint64_t)v62, (uint64_t (*)(_QWORD))sub_2415A0A74);
    MEMORY[0x24BDAC7A8](v66);
    v67 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v4 - 192) + v51[12]);
    v69 = &v174[-((v68 + 15) & 0xFFFFFFFFFFFFFFF0)];
    sub_2415BEF64(v67, (uint64_t)v69, (uint64_t (*)(_QWORD))sub_2415A0A74);
    if (v64(v69, 1, v65) == 1)
    {
      sub_2415A6154((uint64_t)v69, (uint64_t (*)(_QWORD))sub_2415A0A74);
      sub_2416BA4C8();
      sub_24159D6B0(0, &qword_25713D460, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
      MEMORY[0x24BDAC7A8](v70);
      sub_2416BAD2C();
      v71 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEF488];
      sub_24159D6B0(0, &qword_25713D468, (uint64_t (*)(uint64_t))MEMORY[0x24BDEF488], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v72 = swift_allocObject();
      *(_OWORD *)(v72 + 16) = xmmword_2416BCF30;
      sub_2416BA594();
      *(_QWORD *)(v4 - 120) = v72;
      sub_24159CE88(&qword_25713D470, v71, MEMORY[0x24BDEF4A8]);
      sub_2416307B8(0);
      sub_24159CE88(&qword_25713D480, (uint64_t (*)(uint64_t))sub_2416307B8, MEMORY[0x24BEE12C8]);
      sub_2416BB4A0();
      v73 = *(_QWORD *)(v4 - 696);
      sub_2416B9EC8();
      v74 = *(_QWORD *)(v4 - 672);
      sub_2416BA678();
      v75 = sub_24162FB7C();
      v76 = sub_24159CE88(&qword_25713D340, (uint64_t (*)(uint64_t))MEMORY[0x24BDF0508], MEMORY[0x24BDF04F8]);
      v77 = *(_QWORD *)(v4 - 680);
      v78 = *(_QWORD *)(v4 - 656);
      v79 = *(_QWORD *)(v4 - 632);
      sub_2416BAA98();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 664) + 8))(v74, v79);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 688) + 8))(v73, v78);
      v80 = *(_QWORD *)(v4 - 640);
      v81 = *(_QWORD *)(v4 - 648);
      v82 = v77;
      v83 = *(_QWORD *)(v4 - 616);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 32))(v81, v82, v83);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v80 + 16))(*(_QWORD *)(v4 - 592), v81, v83);
      swift_storeEnumTagMultiPayload();
      sub_24163069C();
      *(_QWORD *)(v4 - 120) = v78;
      *(_QWORD *)(v4 - 112) = v79;
      *(_QWORD *)(v4 - 104) = v75;
      *(_QWORD *)(v4 - 96) = v76;
      swift_getOpaqueTypeConformance2();
      v84 = *(_QWORD *)(v4 - 624);
      sub_2416BA57C();
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v81, v83);
LABEL_13:
      sub_2416307D4(v84, *(_QWORD *)(v4 - 336), (uint64_t)&qword_25713D358, (uint64_t)MEMORY[0x24BDEF3B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24162FC40);
      v56 = 0;
      v44 = *(_QWORD *)(v4 - 272);
      v50 = *(_QWORD *)(v4 - 280);
      v57 = *(_QWORD *)(v4 - 288);
      v58 = *(_QWORD *)(v4 - 296);
      v34 = *(_QWORD *)(v4 - 304);
      v47 = *(_QWORD *)(v4 - 312);
      v48 = *(_QWORD *)(v4 - 320);
      OpaqueTypeConformance2 = *(_QWORD *)(v4 - 208);
LABEL_14:
      v170 = *(_QWORD *)(v4 - 336);
      v171 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v170, v56, 1, v57);
      MEMORY[0x24BDAC7A8](v171);
      v172 = &v174[-*(_QWORD *)(v4 - 584)];
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v48 + 16))(v172, v47, v34);
      *(_QWORD *)(v4 - 120) = v172;
      sub_2415BEF64(v170, v44, (uint64_t (*)(_QWORD))sub_24162FCB8);
      *(_QWORD *)(v4 - 112) = v44;
      *(_QWORD *)(v4 - 168) = v34;
      *(_QWORD *)(v4 - 160) = v50;
      *(_QWORD *)(v4 - 184) = OpaqueTypeConformance2;
      *(_QWORD *)(v4 - 176) = sub_24163051C();
      sub_2416310F0((uint64_t *)(v4 - 120), 2uLL, v4 - 168);
      sub_2415A6154(v170, (uint64_t (*)(_QWORD))sub_24162FCB8);
      v173 = *(void (**)(uint64_t, uint64_t))(v4 - 200);
      v173(v47, v34);
      sub_2415A6154(v44, (uint64_t (*)(_QWORD))sub_24162FCB8);
      return ((uint64_t (*)(_BYTE *, uint64_t))v173)(v172, v34);
    }
    *(_QWORD *)(v4 - 192) = v174;
    v111 = *(_QWORD *)(v4 - 216);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v111 + 32))(&v174[-((v59 + 15) & 0xFFFFFFFFFFFFFFF0)], v69, v65);
    v112 = sub_2416BA4C8();
    *(_QWORD *)(v4 - 240) = v113;
    *(_QWORD *)(v4 - 232) = v112;
    *(_QWORD *)(v4 - 248) = v114;
    sub_24159D6B0(0, &qword_25713D460, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    MEMORY[0x24BDAC7A8](v115);
    v116 = &v174[-((v59 + 15) & 0xFFFFFFFFFFFFFFF0)];
    sub_2416BAD2C();
    sub_241630820(0, &qword_25713D488, MEMORY[0x24BEE30B8]);
    MEMORY[0x24BDAC7A8](v117);
    v119 = &v174[-v118];
    result = sub_2416BB08C();
    if ((result & 1) != 0)
    {
      v120 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v111 + 16);
      *(_QWORD *)(v4 - 256) = v116;
      v120(v119, v116, v65);
      v121 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEF488];
      sub_24159D6B0(0, &qword_25713D468, (uint64_t (*)(uint64_t))MEMORY[0x24BDEF488], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v122 = swift_allocObject();
      *(_OWORD *)(v122 + 16) = xmmword_2416BCF30;
      sub_2416BA594();
      *(_QWORD *)(v4 - 120) = v122;
      sub_24159CE88(&qword_25713D470, v121, MEMORY[0x24BDEF4A8]);
      sub_2416307B8(0);
      sub_24159CE88(&qword_25713D480, (uint64_t (*)(uint64_t))sub_2416307B8, MEMORY[0x24BEE12C8]);
      sub_2416BB4A0();
      v123 = *(_QWORD *)(v4 - 696);
      sub_2416B9EEC();
      v124 = *(_QWORD *)(v4 - 672);
      sub_2416BA678();
      v125 = sub_24162FB7C();
      v126 = sub_24159CE88(&qword_25713D340, (uint64_t (*)(uint64_t))MEMORY[0x24BDF0508], MEMORY[0x24BDF04F8]);
      v127 = *(_QWORD *)(v4 - 680);
      v128 = *(_QWORD *)(v4 - 656);
      v129 = *(_QWORD *)(v4 - 632);
      sub_2416BAA98();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 664) + 8))(v124, v129);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 688) + 8))(v123, v128);
      v130 = *(_QWORD *)(v4 - 640);
      v131 = *(_QWORD *)(v4 - 648);
      v132 = v127;
      v133 = *(_QWORD *)(v4 - 616);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 32))(v131, v132, v133);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v130 + 16))(*(_QWORD *)(v4 - 736), v131, v133);
      swift_storeEnumTagMultiPayload();
      sub_2416306C0();
      *(_QWORD *)(v4 - 120) = v128;
      *(_QWORD *)(v4 - 112) = v129;
      *(_QWORD *)(v4 - 104) = v125;
      *(_QWORD *)(v4 - 96) = v126;
      swift_getOpaqueTypeConformance2();
      v134 = *(_QWORD *)(v4 - 728);
      sub_2416BA57C();
      sub_2415D8F0C(v134, *(_QWORD *)(v4 - 592), (uint64_t)&qword_25713D318, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_24162FA2C);
      swift_storeEnumTagMultiPayload();
      sub_24163069C();
      v84 = *(_QWORD *)(v4 - 624);
      sub_2416BA57C();
      sub_2415D8F60(v134, (uint64_t)&qword_25713D318, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_24162FA2C);
      (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v131, v133);
      (*(void (**)(_QWORD, _QWORD))(v4 - 224))(*(_QWORD *)(v4 - 256), *(_QWORD *)(v4 - 352));
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  v85 = *(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v63 + 32);
  *(_QWORD *)(v4 - 248) = v174;
  *(_QWORD *)(v4 - 240) = v85;
  v86 = v85(v60, v62, v65);
  MEMORY[0x24BDAC7A8](v86);
  v87 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v4 - 192) + v51[12]);
  v89 = &v174[-((v88 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2415BEF64(v87, (uint64_t)v89, (uint64_t (*)(_QWORD))sub_2415A0A74);
  v90 = v64(v89, 1, v65);
  *(_QWORD *)(v4 - 232) = v60;
  if (v90 == 1)
  {
    sub_2415A6154((uint64_t)v89, (uint64_t (*)(_QWORD))sub_2415A0A74);
    *(_QWORD *)(v4 - 192) = sub_2416BA4C8();
    sub_24159D6B0(0, &qword_25713D460, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    MEMORY[0x24BDAC7A8](v91);
    sub_2416BAD2C();
    sub_241630820(0, &qword_25713D498, MEMORY[0x24BEE2C38]);
    MEMORY[0x24BDAC7A8](v92);
    v94 = &v174[-v93];
    result = sub_2416BB08C();
    if ((result & 1) == 0)
    {
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    (*(void (**)(_BYTE *, _QWORD, _QWORD))(*(_QWORD *)(v4 - 216) + 16))(v94, *(_QWORD *)(v4 - 232), *(_QWORD *)(v4 - 352));
    v96 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEF488];
    sub_24159D6B0(0, &qword_25713D468, (uint64_t (*)(uint64_t))MEMORY[0x24BDEF488], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v97 = swift_allocObject();
    *(_OWORD *)(v97 + 16) = xmmword_2416BCF30;
    sub_2416BA594();
    *(_QWORD *)(v4 - 120) = v97;
    sub_24159CE88(&qword_25713D470, v96, MEMORY[0x24BDEF4A8]);
    sub_2416307B8(0);
    sub_24159CE88(&qword_25713D480, (uint64_t (*)(uint64_t))sub_2416307B8, MEMORY[0x24BEE12C8]);
    sub_2416BB4A0();
    v98 = *(_QWORD *)(v4 - 696);
    sub_2416B9EE0();
    v99 = *(_QWORD *)(v4 - 672);
    sub_2416BA678();
    v100 = sub_24162FB7C();
    v101 = sub_24159CE88(&qword_25713D340, (uint64_t (*)(uint64_t))MEMORY[0x24BDF0508], MEMORY[0x24BDF04F8]);
    v102 = *(_QWORD *)(v4 - 680);
    v103 = *(_QWORD *)(v4 - 656);
    v104 = *(_QWORD *)(v4 - 632);
    sub_2416BAA98();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 664) + 8))(v99, v104);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 688) + 8))(v98, v103);
    v105 = *(_QWORD *)(v4 - 640);
    v106 = *(_QWORD *)(v4 - 648);
    v107 = v102;
    v108 = *(_QWORD *)(v4 - 616);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 32))(v106, v107, v108);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v105 + 16))(*(_QWORD *)(v4 - 768), v106, v108);
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v4 - 120) = v103;
    *(_QWORD *)(v4 - 112) = v104;
    *(_QWORD *)(v4 - 104) = v100;
    *(_QWORD *)(v4 - 96) = v101;
    swift_getOpaqueTypeConformance2();
    v109 = *(_QWORD *)(v4 - 760);
    sub_2416BA57C();
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v106, v108);
    v110 = *(void (**)(_QWORD, _QWORD))(v4 - 224);
LABEL_12:
    sub_2415D8F0C(v109, *(_QWORD *)(v4 - 736), (uint64_t)&qword_25713D320, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_24162FBE4);
    swift_storeEnumTagMultiPayload();
    sub_2416306C0();
    v167 = sub_24162FB7C();
    v168 = sub_24159CE88(&qword_25713D340, (uint64_t (*)(uint64_t))MEMORY[0x24BDF0508], MEMORY[0x24BDF04F8]);
    *(_QWORD *)(v4 - 120) = v103;
    *(_QWORD *)(v4 - 112) = v104;
    *(_QWORD *)(v4 - 104) = v167;
    *(_QWORD *)(v4 - 96) = v168;
    swift_getOpaqueTypeConformance2();
    v169 = *(_QWORD *)(v4 - 728);
    sub_2416BA57C();
    sub_2415D8F0C(v169, *(_QWORD *)(v4 - 592), (uint64_t)&qword_25713D318, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_24162FA2C);
    swift_storeEnumTagMultiPayload();
    sub_24163069C();
    v84 = *(_QWORD *)(v4 - 624);
    sub_2416BA57C();
    sub_2415D8F60(v169, (uint64_t)&qword_25713D318, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_24162FA2C);
    sub_2415D8F60(v109, (uint64_t)&qword_25713D320, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_24162FBE4);
    v110(*(_QWORD *)(v4 - 232), *(_QWORD *)(v4 - 352));
    goto LABEL_13;
  }
  *(_QWORD *)(v4 - 192) = v174;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 - 240))(&v174[-((v59 + 15) & 0xFFFFFFFFFFFFFFF0)], v89, v65);
  *(_QWORD *)(v4 - 256) = sub_2416BA4C8();
  *(_QWORD *)(v4 - 264) = v135;
  *(_DWORD *)(v4 - 360) = v136;
  *(_QWORD *)(v4 - 344) = v137;
  sub_24159D6B0(0, &qword_25713D460, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  *(_QWORD *)(v4 - 368) = v174;
  MEMORY[0x24BDAC7A8](v138);
  *(_QWORD *)(v4 - 376) = &v174[-v139];
  sub_2416BAD2C();
  sub_241630820(0, &qword_25713D4A0, MEMORY[0x24BEE08B8]);
  *(_QWORD *)(v4 - 384) = v174;
  *(_QWORD *)(v4 - 400) = v140;
  v141 = (*(_QWORD *)(*(_QWORD *)(v140 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v140);
  *(_QWORD *)(v4 - 392) = &v174[-v141];
  sub_241630894((unint64_t *)&qword_25713D490, MEMORY[0x24BDCE940]);
  v142 = &v174[-((v59 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = sub_2416BB080();
  if ((result & 1) != 0)
  {
    *(_QWORD *)(v4 - 408) = v174;
    MEMORY[0x24BDAC7A8](result);
    v143 = &v174[-v141];
    sub_2416308D4();
    v145 = v144;
    *(_QWORD *)(v4 - 424) = v174;
    v146 = (*(_QWORD *)(*(_QWORD *)(v144 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
    v147 = &v174[*(int *)(MEMORY[0x24BDAC7A8](v144) + 48) - v146];
    v148 = *(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v4 - 216) + 16);
    v148(&v174[-v146], *(_BYTE **)(v4 - 232), v65);
    *(_QWORD *)(v4 - 416) = v142;
    v149 = v148(v147, v142, v65);
    *(_QWORD *)(v4 - 216) = v174;
    MEMORY[0x24BDAC7A8](v149);
    v150 = &v174[*(int *)(v145 + 48) - v146];
    v148(&v174[-v146], &v174[-v146], v65);
    v148(v150, v147, v65);
    v151 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 - 240);
    v151(v143, &v174[-v146], v65);
    v152 = *(uint64_t (**)(_BYTE *, uint64_t))(v4 - 224);
    v153 = v152(v150, v65);
    *(_QWORD *)(v4 - 216) = v174;
    MEMORY[0x24BDAC7A8](v153);
    v154 = &v174[*(int *)(v145 + 48) - v146];
    v151(&v174[-v146], &v174[-v146], v65);
    v151(v154, v147, v65);
    v151(&v143[*(int *)(*(_QWORD *)(v4 - 400) + 36)], v154, v65);
    v152(&v174[-v146], v65);
    v155 = (void (*)(_QWORD, _QWORD))v152;
    sub_2416307D4((uint64_t)v143, *(_QWORD *)(v4 - 392), (uint64_t)&qword_25713D4A0, MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_241630820);
    v156 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEF488];
    sub_24159D6B0(0, &qword_25713D468, (uint64_t (*)(uint64_t))MEMORY[0x24BDEF488], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v157 = swift_allocObject();
    *(_OWORD *)(v157 + 16) = xmmword_2416BCF30;
    sub_2416BA594();
    *(_QWORD *)(v4 - 120) = v157;
    sub_24159CE88(&qword_25713D470, v156, MEMORY[0x24BDEF4A8]);
    sub_2416307B8(0);
    sub_24159CE88(&qword_25713D480, (uint64_t (*)(uint64_t))sub_2416307B8, MEMORY[0x24BEE12C8]);
    sub_2416BB4A0();
    v158 = *(_QWORD *)(v4 - 696);
    sub_2416B9ED4();
    v159 = *(_QWORD *)(v4 - 672);
    sub_2416BA678();
    v160 = sub_24162FB7C();
    v161 = sub_24159CE88(&qword_25713D340, (uint64_t (*)(uint64_t))MEMORY[0x24BDF0508], MEMORY[0x24BDF04F8]);
    v162 = *(_QWORD *)(v4 - 680);
    v103 = *(_QWORD *)(v4 - 656);
    v104 = *(_QWORD *)(v4 - 632);
    sub_2416BAA98();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 664) + 8))(v159, v104);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 688) + 8))(v158, v103);
    v163 = *(_QWORD *)(v4 - 640);
    v164 = *(_QWORD *)(v4 - 648);
    v165 = v162;
    v166 = *(_QWORD *)(v4 - 616);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v163 + 32))(v164, v165, v166);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v163 + 16))(*(_QWORD *)(v4 - 768), v164, v166);
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v4 - 120) = v103;
    *(_QWORD *)(v4 - 112) = v104;
    *(_QWORD *)(v4 - 104) = v160;
    *(_QWORD *)(v4 - 96) = v161;
    swift_getOpaqueTypeConformance2();
    v109 = *(_QWORD *)(v4 - 760);
    sub_2416BA57C();
    (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v164, v166);
    v110 = v155;
    v155(*(_QWORD *)(v4 - 416), *(_QWORD *)(v4 - 352));
    goto LABEL_12;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_24162E024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  void (*v16)(_BYTE *, uint64_t);
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_2415E40F8();
  sub_24162FD1C(255);
  sub_2416BA588();
  swift_getTupleTypeMetadata3();
  v8 = sub_2416BAFA8();
  MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v8);
  v9 = sub_2416BAD8C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v15 = &v18[-v14];
  v19 = a2;
  v20 = a3;
  v21 = a1;
  sub_2416BA468();
  sub_2416BAD80();
  MEMORY[0x2426994BC](MEMORY[0x24BDF4498], v9);
  sub_2415E3D20((uint64_t)v13, v9, (uint64_t)v15);
  v16 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
  v16(v13, v9);
  sub_2415E07B8((uint64_t)v15, v9, a4);
  return ((uint64_t (*)(_BYTE *, uint64_t))v16)(v15, v9);
}

void sub_24162E1C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[5];
  _QWORD v84[3];
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t *v88;
  char *v89;
  uint64_t v90;

  v73 = a4;
  v66 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v68 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v67 = (uint64_t)&v66 - v9;
  sub_24162FD1C(0);
  v11 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v69 = (uint64_t *)((char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = a3;
  v14 = (int *)type metadata accessor for DatePickerEditView(0, a2, a3, v13);
  v75 = *((_QWORD *)v14 - 1);
  MEMORY[0x24BDAC7A8](v14);
  v74 = (char *)&v66 - v15;
  v70 = v11;
  v71 = a2;
  v81 = sub_2416BA588();
  v79 = *(_QWORD *)(v81 - 8);
  v16 = MEMORY[0x24BDAC7A8](v81);
  v80 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v78 = (char *)&v66 - v18;
  sub_2415E40F8();
  v76 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v77 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v66 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v82 = (uint64_t)&v66 - v25;
  v26 = (uint64_t *)(a1 + v14[9]);
  v27 = (uint64_t *)v26[1];
  v87 = *v26;
  v88 = v27;
  sub_2415C343C();
  swift_bridgeObjectRetain();
  v28 = MEMORY[0x24BEE0D00];
  v29 = sub_2416BA9D8();
  v31 = (uint64_t)v30;
  v87 = v29;
  v88 = v30;
  v33 = v32 & 1;
  LOBYTE(v89) = v32 & 1;
  v90 = v34;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, v28, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_2416BCC80;
  v36 = (_QWORD *)(a1 + v14[16]);
  v37 = v36[1];
  *(_QWORD *)(v35 + 32) = *v36;
  *(_QWORD *)(v35 + 40) = v37;
  *(_QWORD *)(v35 + 48) = 0x656C746954;
  *(_QWORD *)(v35 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  v38 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v39 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v39)
  {
    sub_2416BB128();

    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v29, v31, v33);
    swift_bridgeObjectRelease();
    sub_2415A85BC((uint64_t)v24, v82, (uint64_t (*)(_QWORD))sub_2415E40F8);
    sub_2415A0A74(0);
    MEMORY[0x24BDAC7A8](v40);
    v42 = (char *)&v66 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    MEMORY[0x242698604]();
    v43 = sub_2416B9B50();
    v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v42, 1, v43);
    sub_2415A6154((uint64_t)v42, (uint64_t (*)(_QWORD))sub_2415A0A74);
    v45 = v75;
    v46 = v74;
    (*(void (**)(char *, uint64_t, int *))(v75 + 16))(v74, a1, v14);
    if (v44 == 1)
    {
      v47 = &v46[v14[18]];
      v48 = *v47;
      v49 = (uint64_t *)*((_QWORD *)v47 + 1);
      LOBYTE(v87) = v48;
      v88 = v49;
      sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
      sub_2416BAD14();
      v50 = (*(uint64_t (**)(char *, int *))(v45 + 8))(v46, v14);
      v52 = v80;
      v51 = v81;
      v54 = v78;
      v53 = v79;
      v55 = (uint64_t)v77;
      if (LOBYTE(v84[0]) != 1)
      {
        v56 = (uint64_t)v68;
        (*(void (**)(uint64_t))(a1 + v14[15]))(v50);
        v57 = v67;
        v58 = v71;
        v59 = v72;
        sub_2415E3D20(v56, v71, v67);
        v60 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
        v60(v56, v58);
        sub_2415E07B8(v57, v58, v56);
        sub_24159CE88(&qword_25713D4C0, (uint64_t (*)(uint64_t))sub_24162FD1C, MEMORY[0x24BDF4498]);
        sub_2415E0894(v56, v70, v58);
        v60(v56, v58);
        v60(v57, v58);
LABEL_7:
        v64 = v82;
        sub_2415BEF64(v82, v55, (uint64_t (*)(_QWORD))sub_2415E40F8);
        v85 = 0;
        v86 = 1;
        v87 = v55;
        v88 = &v85;
        (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v52, v54, v51);
        v89 = v52;
        v84[0] = v76;
        v84[1] = MEMORY[0x24BDF4638];
        v84[2] = v51;
        v83[2] = sub_2415E419C();
        v83[3] = MEMORY[0x24BDF4610];
        v83[0] = sub_24159CE88(&qword_25713D4C0, (uint64_t (*)(uint64_t))sub_24162FD1C, MEMORY[0x24BDF4498]);
        v83[1] = v59;
        v83[4] = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v51, v83);
        sub_2416310F0(&v87, 3uLL, (uint64_t)v84);
        v65 = *(void (**)(char *, uint64_t))(v53 + 8);
        v65(v54, v51);
        sub_2415A6154(v64, (uint64_t (*)(_QWORD))sub_2415E40F8);
        v65(v52, v51);
        sub_2415A6154(v55, (uint64_t (*)(_QWORD))sub_2415E40F8);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, int *))(v45 + 8))(v46, v14);
      v52 = v80;
      v51 = v81;
      v54 = v78;
      v53 = v79;
      v55 = (uint64_t)v77;
    }
    v61 = sub_2416BA468();
    v62 = (uint64_t)v69;
    *v69 = v61;
    *(_QWORD *)(v62 + 8) = 0;
    *(_BYTE *)(v62 + 16) = 1;
    sub_241630D90(0, &qword_25713D4C8, sub_24162FD38);
    v59 = v72;
    sub_24162E908(v71, v72, v62 + *(int *)(v63 + 44));
    sub_24159CE88(&qword_25713D4C0, (uint64_t (*)(uint64_t))sub_24162FD1C, MEMORY[0x24BDF4498]);
    sub_2415E07D0(v62, v70);
    sub_2415A6154(v62, (uint64_t (*)(_QWORD))sub_24162FD1C);
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t sub_24162E908@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD v21[4];

  sub_24162FDD8(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v21 - v10;
  v13 = type metadata accessor for DatePickerEditView(0, a1, a2, v12);
  sub_24162AF6C(v13, (uint64_t)v11);
  sub_24162B9C0(v13, v21);
  v14 = v21[0];
  v15 = v21[1];
  v16 = v21[2];
  v17 = v21[3];
  sub_2415BEF64((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_24162FDD8);
  sub_2415BEF64((uint64_t)v9, a3, (uint64_t (*)(_QWORD))sub_24162FDD8);
  sub_24162FD54();
  v19 = (uint64_t *)(a3 + *(int *)(v18 + 48));
  *v19 = v14;
  v19[1] = v15;
  v19[2] = v16;
  v19[3] = v17;
  sub_241630990(v14, v15);
  sub_2415A6154((uint64_t)v11, (uint64_t (*)(_QWORD))sub_24162FDD8);
  sub_2416309C0(v14, v15);
  return sub_2415A6154((uint64_t)v9, (uint64_t (*)(_QWORD))sub_24162FDD8);
}

uint64_t sub_24162EA50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  void (*v16)(_BYTE *, uint64_t);
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_2415E40F8();
  sub_2416302B8(255);
  sub_2416BA588();
  swift_getTupleTypeMetadata2();
  v8 = sub_2416BAFA8();
  MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v8);
  v9 = sub_2416BADF8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v15 = &v18[-v14];
  sub_2416BA51C();
  v19 = a2;
  v20 = a3;
  v21 = a1;
  sub_2416BADEC();
  MEMORY[0x2426994BC](MEMORY[0x24BDF4700], v9);
  sub_2415E3D20((uint64_t)v13, v9, (uint64_t)v15);
  v16 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
  v16(v13, v9);
  sub_2415E07B8((uint64_t)v15, v9, a4);
  return ((uint64_t (*)(_BYTE *, uint64_t))v16)(v15, v9);
}

void sub_24162EBE4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[4];
  _QWORD v84[2];
  uint64_t v85;
  char *v86;
  char v87;
  uint64_t v88;

  v73 = a4;
  v66 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v68 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v67 = (uint64_t)&v66 - v9;
  sub_2416302B8(0);
  v11 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v69 = (uint64_t *)((char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = a3;
  v14 = (int *)type metadata accessor for DatePickerEditView(0, a2, a3, v13);
  v75 = *((_QWORD *)v14 - 1);
  MEMORY[0x24BDAC7A8](v14);
  v74 = (char *)&v66 - v15;
  v70 = v11;
  v71 = a2;
  v81 = sub_2416BA588();
  v79 = *(_QWORD *)(v81 - 8);
  v16 = MEMORY[0x24BDAC7A8](v81);
  v80 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v78 = (char *)&v66 - v18;
  sub_2415E40F8();
  v76 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v77 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v66 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v82 = (uint64_t)&v66 - v25;
  v26 = (uint64_t *)(a1 + v14[9]);
  v27 = v26[1];
  v85 = *v26;
  v86 = (char *)v27;
  sub_2415C343C();
  swift_bridgeObjectRetain();
  v28 = MEMORY[0x24BEE0D00];
  v29 = sub_2416BA9D8();
  v31 = v30;
  v85 = v29;
  v86 = (char *)v30;
  v33 = v32 & 1;
  v87 = v32 & 1;
  v88 = v34;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, v28, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_2416BCC80;
  v36 = (_QWORD *)(a1 + v14[16]);
  v37 = v36[1];
  *(_QWORD *)(v35 + 32) = *v36;
  *(_QWORD *)(v35 + 40) = v37;
  *(_QWORD *)(v35 + 48) = 0x656C746954;
  *(_QWORD *)(v35 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  v38 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v39 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v39)
  {
    sub_2416BB128();

    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v29, v31, v33);
    swift_bridgeObjectRelease();
    sub_2415A85BC((uint64_t)v24, v82, (uint64_t (*)(_QWORD))sub_2415E40F8);
    sub_2415A0A74(0);
    MEMORY[0x24BDAC7A8](v40);
    v42 = (char *)&v66 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    MEMORY[0x242698604]();
    v43 = sub_2416B9B50();
    v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v42, 1, v43);
    sub_2415A6154((uint64_t)v42, (uint64_t (*)(_QWORD))sub_2415A0A74);
    v46 = v74;
    v45 = v75;
    (*(void (**)(char *, uint64_t, int *))(v75 + 16))(v74, a1, v14);
    if (v44 == 1)
    {
      v47 = &v46[v14[18]];
      v48 = *v47;
      v49 = (char *)*((_QWORD *)v47 + 1);
      LOBYTE(v85) = v48;
      v86 = v49;
      sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
      sub_2416BAD14();
      v50 = (*(uint64_t (**)(char *, int *))(v45 + 8))(v46, v14);
      v52 = v80;
      v51 = v81;
      v54 = v78;
      v53 = v79;
      v55 = (uint64_t)v77;
      if (LOBYTE(v84[0]) != 1)
      {
        v56 = (uint64_t)v68;
        (*(void (**)(uint64_t))(a1 + v14[15]))(v50);
        v57 = v67;
        v58 = v71;
        v59 = v72;
        sub_2415E3D20(v56, v71, v67);
        v60 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
        v60(v56, v58);
        sub_2415E07B8(v57, v58, v56);
        sub_24159CE88(&qword_25713D4B0, (uint64_t (*)(uint64_t))sub_2416302B8, MEMORY[0x24BDF4498]);
        sub_2415E0894(v56, v70, v58);
        v60(v56, v58);
        v60(v57, v58);
LABEL_7:
        v64 = v82;
        sub_2415BEF64(v82, v55, (uint64_t (*)(_QWORD))sub_2415E40F8);
        v85 = v55;
        (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v52, v54, v51);
        v86 = v52;
        v84[0] = v76;
        v84[1] = v51;
        v83[2] = sub_2415E419C();
        v83[0] = sub_24159CE88(&qword_25713D4B0, (uint64_t (*)(uint64_t))sub_2416302B8, MEMORY[0x24BDF4498]);
        v83[1] = v59;
        v83[3] = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v51, v83);
        sub_2416310F0(&v85, 2uLL, (uint64_t)v84);
        v65 = *(void (**)(char *, uint64_t))(v53 + 8);
        v65(v54, v51);
        sub_2415A6154(v64, (uint64_t (*)(_QWORD))sub_2415E40F8);
        v65(v52, v51);
        sub_2415A6154(v55, (uint64_t (*)(_QWORD))sub_2415E40F8);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, int *))(v45 + 8))(v46, v14);
      v52 = v80;
      v51 = v81;
      v54 = v78;
      v53 = v79;
      v55 = (uint64_t)v77;
    }
    v61 = sub_2416BA468();
    v62 = (uint64_t)v69;
    *v69 = v61;
    *(_QWORD *)(v62 + 8) = 0;
    *(_BYTE *)(v62 + 16) = 1;
    sub_241630D90(0, &qword_25713D4B8, sub_241630354);
    v59 = v72;
    sub_24162F2E0(v71, v72, v62 + *(int *)(v63 + 44));
    sub_24159CE88(&qword_25713D4B0, (uint64_t (*)(uint64_t))sub_2416302B8, MEMORY[0x24BDF4498]);
    sub_2415E07D0(v62, v70);
    sub_2415A6154(v62, (uint64_t (*)(_QWORD))sub_2416302B8);
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t sub_24162F2E0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD v22[4];

  sub_24162FDD8(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v22 - v10;
  v13 = type metadata accessor for DatePickerEditView(0, a1, a2, v12);
  sub_24162AF6C(v13, (uint64_t)v11);
  sub_24162B9C0(v13, v22);
  v14 = v22[0];
  v15 = v22[1];
  v16 = v22[2];
  v17 = v22[3];
  sub_2415BEF64((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_24162FDD8);
  sub_2415BEF64((uint64_t)v9, a3, (uint64_t (*)(_QWORD))sub_24162FDD8);
  sub_241630370();
  v19 = a3 + *(int *)(v18 + 48);
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = (uint64_t *)(a3 + *(int *)(v18 + 64));
  *v20 = v14;
  v20[1] = v15;
  v20[2] = v16;
  v20[3] = v17;
  sub_241630990(v14, v15);
  sub_2415A6154((uint64_t)v11, (uint64_t (*)(_QWORD))sub_24162FDD8);
  sub_2416309C0(v14, v15);
  return sub_2415A6154((uint64_t)v9, (uint64_t (*)(_QWORD))sub_24162FDD8);
}

uint64_t sub_24162F43C()
{
  return sub_2416BA000();
}

uint64_t sub_24162F460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *);
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v5 = sub_2416B9B50();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2415A0A74(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DatePickerEditView(0, a2, a3, v12);
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604]();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    v13 = sub_2415A6154((uint64_t)v11, (uint64_t (*)(_QWORD))sub_2415A0A74);
    MEMORY[0x24BDAC7A8](v13);
    v14 = *(uint64_t (**)(char *))(v6 + 16);
    v15 = v14((char *)&v18 - v8);
    MEMORY[0x24BDAC7A8](v15);
    ((void (*)(char *, char *, uint64_t))v14)((char *)&v18 - v8, (char *)&v18 - v8, v5);
  }
  else
  {
    v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))((char *)&v18 - v8, v11, v5);
    MEMORY[0x24BDAC7A8](v17);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)&v18 - v8, (char *)&v18 - v8, v5);
  }
  sub_24159D6B0(0, &qword_25713BC48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD20();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))((char *)&v18 - v8, v5);
}

uint64_t sub_24162F6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  uint64_t v12;

  v4 = *(void (**)(void))(a1 + *(int *)(type metadata accessor for DatePickerEditView(0, a2, a3, a4) + 56));
  if (v4)
    v4();
  sub_2415A0A74(0);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604]();
  v8 = sub_2416B9B50();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))((char *)&v12 - v7, 1, v8);
  result = sub_2415A6154((uint64_t)&v12 - v7, (uint64_t (*)(_QWORD))sub_2415A0A74);
  if (v10 != 1)
  {
    MEMORY[0x24BDAC7A8](result);
    sub_24159D6B0(0, &qword_25713BC48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    sub_2416BAD14();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))((char *)&v12 - v7, 0, 1, v8);
    return sub_24162AEC4((uint64_t)&v12 - v7);
  }
  return result;
}

uint64_t sub_24162F848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  char v23;

  sub_2415A0A74(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = type metadata accessor for DatePickerEditView(0, a2, a3, v9);
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604]();
  v11 = sub_2416B9B50();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))((char *)&v19 - v8, 1, v11);
  v14 = sub_2415A6154((uint64_t)&v19 - v8, (uint64_t (*)(_QWORD))sub_2415A0A74);
  if (v13 == 1)
  {
    MEMORY[0x24BDAC7A8](v14);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v19 - v8, a1 + *(int *)(v10 + 40), v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))((char *)&v19 - v8, 0, 1, v11);
    sub_24162AEC4((uint64_t)&v19 - v8);
  }
  v15 = (char *)(a1 + *(int *)(v10 + 72));
  v17 = *((_QWORD *)v15 + 1);
  v20 = *v15;
  v16 = v20;
  v21 = v17;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  swift_retain();
  sub_2416BAD14();
  v20 = v16;
  v21 = v17;
  v22 = (v23 & 1) == 0;
  sub_2416BAD20();
  return swift_release();
}

void sub_24162FA2C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_24162FBE4(255, &qword_25713D320, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v7 = v6;
    sub_24162FAA4(255);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_24162FAA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_25713D328)
  {
    sub_2415A3D28(255, &qword_25713D330, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], MEMORY[0x24BDEB018]);
    v3 = v2;
    v4 = sub_2416BA684();
    v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF0508];
    v8[0] = v3;
    v8[1] = v4;
    v8[2] = sub_24162FB7C();
    v8[3] = sub_24159CE88(&qword_25713D340, v5, MEMORY[0x24BDF04F8]);
    v6 = MEMORY[0x242699480](a1, v8, MEMORY[0x24BDF27D8], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713D328);
  }
}

unint64_t sub_24162FB7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713D338;
  if (!qword_25713D338)
  {
    sub_2415A3D28(255, &qword_25713D330, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], MEMORY[0x24BDEB018]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEB028], v1);
    atomic_store(result, (unint64_t *)&qword_25713D338);
  }
  return result;
}

void sub_24162FBE4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_24162FAA4(255);
    v7 = a3(a1, v6, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_24162FC40(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_24162FA2C(255, &qword_25713D318, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v7 = v6;
    sub_24162FAA4(255);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_24162FCB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D360)
  {
    sub_24162FC40(255, &qword_25713D358, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D360);
  }
}

void sub_24162FD1C(uint64_t a1)
{
  sub_2416302D4(a1, &qword_25713D368, (uint64_t (*)(uint64_t))sub_24162FD38, &qword_25713D410);
}

void sub_24162FD38(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713D370, (uint64_t (*)(uint64_t))sub_24162FD54, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_24162FD54()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713D378)
  {
    sub_24162FDD8(255);
    sub_24159D7F0(255, &qword_25713D408, (uint64_t)&type metadata for ClearButtonView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713D378);
  }
}

void sub_24162FDD8(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_25713D380, sub_24162FDF4, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
}

void sub_24162FDF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_25713D388)
  {
    sub_24162FE88(255, &qword_25713D390, sub_24162FF14, (unint64_t *)&qword_257139CD0, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF06F8]);
    v5[0] = v2;
    v5[1] = sub_241630064();
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF2550], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713D388);
  }
}

void sub_24162FE88(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    a3(255);
    sub_2415A3D28(255, a4, MEMORY[0x24BDF3E48], MEMORY[0x24BDF3E18], a5);
    v8 = sub_2416BA150();
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_24162FF14(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_25713D398, sub_24162FF30, (void (*)(uint64_t))sub_2415A3F74);
}

void sub_24162FF30(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_25713D3A0, sub_24162FF4C, (void (*)(uint64_t))sub_24162FFEC);
}

void sub_24162FF4C(uint64_t a1)
{
  sub_24162FE88(a1, &qword_25713D3A8, (void (*)(uint64_t))sub_24162FF70, &qword_25713D3B8, MEMORY[0x24BDF06B8]);
}

void sub_24162FF70()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D3B0)
  {
    sub_2415A3D28(255, &qword_257139CE0, MEMORY[0x24BDF1FA8], MEMORY[0x24BDECC80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D3B0);
  }
}

void sub_24162FFEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D3C0)
  {
    sub_2416BA1D4();
    sub_24159CE88(&qword_25713D3C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDED998], MEMORY[0x24BDED990]);
    v0 = sub_2416BA00C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D3C0);
  }
}

unint64_t sub_241630064()
{
  unint64_t result;
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_25713D3D0;
  if (!qword_25713D3D0)
  {
    v1 = MEMORY[0x24BDF06F8];
    sub_24162FE88(255, &qword_25713D390, sub_24162FF14, (unint64_t *)&qword_257139CD0, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF06F8]);
    v3 = v2;
    v4[0] = sub_2415A40A4(&qword_25713D3D8, (uint64_t (*)(uint64_t))sub_24162FF14, sub_241630134, sub_2415A4130);
    v4[1] = sub_241630264((unint64_t *)&qword_25713CCB8, (unint64_t *)&qword_257139CD0, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v1, MEMORY[0x24BDF0710]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v3, v4);
    atomic_store(result, (unint64_t *)&qword_25713D3D0);
  }
  return result;
}

uint64_t sub_241630134()
{
  return sub_2415A40A4(&qword_25713D3E0, (uint64_t (*)(uint64_t))sub_24162FF30, (uint64_t (*)(void))sub_241630158, sub_241630248);
}

unint64_t sub_241630158()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713D3E8;
  if (!qword_25713D3E8)
  {
    sub_24162FF4C(255);
    v2 = v1;
    v3[0] = sub_2416301E0();
    v3[1] = sub_241630264((unint64_t *)&qword_25713D3F8, &qword_25713D3B8, MEMORY[0x24BDF06B8], MEMORY[0x24BDF06D0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713D3E8);
  }
  return result;
}

unint64_t sub_2416301E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713D3F0;
  if (!qword_25713D3F0)
  {
    sub_24162FF70();
    v2 = v1;
    v3[0] = sub_2415C3480();
    v3[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713D3F0);
  }
  return result;
}

uint64_t sub_241630248()
{
  return sub_24159CE88(&qword_25713D400, (uint64_t (*)(uint64_t))sub_24162FFEC, MEMORY[0x24BDEB950]);
}

uint64_t sub_241630264(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_2415A3D28(255, a2, MEMORY[0x24BDF3E48], MEMORY[0x24BDF3E18], a3);
    result = MEMORY[0x2426994BC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_2416302B8(uint64_t a1)
{
  sub_2416302D4(a1, &qword_25713D418, (uint64_t (*)(uint64_t))sub_241630354, &qword_25713D430);
}

void sub_2416302D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    a3(255);
    sub_24159CE88(a4, a3, MEMORY[0x24BDF5428]);
    v7 = sub_2416BAD8C();
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_241630354(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713D420, (uint64_t (*)(uint64_t))sub_241630370, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_241630370()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713D428)
  {
    sub_24162FDD8(255);
    sub_24159D7F0(255, &qword_25713D408, (uint64_t)&type metadata for ClearButtonView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713D428);
  }
}

unint64_t sub_2416303FC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_25713D438;
  if (!qword_25713D438)
  {
    sub_2415A0A74(255);
    v2 = v1;
    v3 = sub_241630894(&qword_25713BA90, MEMORY[0x24BDCE950]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE4AB8], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713D438);
  }
  return result;
}

uint64_t sub_241630470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24163048C((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_24162E024, a2, a3, a4);
}

uint64_t sub_241630480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24163048C((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_24162EA50, a2, a3, a4);
}

uint64_t sub_24163048C(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DatePickerEditView(0, v5, v6, a4) - 8) + 80);
  return a1(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_241630500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_241630A00(sub_24162F460, a2, a3, a4);
}

uint64_t sub_241630510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_241630A00((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_24162F6C4, a2, a3, a4);
}

unint64_t sub_24163051C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_25713D440;
  if (!qword_25713D440)
  {
    sub_24162FCB8();
    v2 = v1;
    v3 = sub_24163059C(&qword_25713D448, (uint64_t)&qword_25713D358, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_24162FC40, sub_24163069C);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5578], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713D440);
  }
  return result;
}

uint64_t sub_24163059C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t (*)(void)), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  _QWORD v13[6];

  result = *a1;
  if (!result)
  {
    v7 = a3(255, a2, MEMORY[0x24BDEF3B8]);
    v8 = a4();
    sub_2415A3D28(255, &qword_25713D330, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], MEMORY[0x24BDEB018]);
    v10 = v9;
    v11 = sub_2416BA684();
    v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF0508];
    v13[2] = v10;
    v13[3] = v11;
    v13[4] = sub_24162FB7C();
    v13[5] = sub_24159CE88(&qword_25713D340, v12, MEMORY[0x24BDF04F8]);
    v13[0] = v8;
    v13[1] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v7, v13);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24163069C()
{
  return sub_24163059C(&qword_25713D450, (uint64_t)&qword_25713D318, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_24162FA2C, (uint64_t (*)(void))sub_2416306C0);
}

unint64_t sub_2416306C0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  _QWORD v7[6];

  result = qword_25713D458;
  if (!qword_25713D458)
  {
    sub_24162FBE4(255, &qword_25713D320, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v2 = v1;
    sub_2415A3D28(255, &qword_25713D330, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], MEMORY[0x24BDEB018]);
    v4 = v3;
    v5 = sub_2416BA684();
    v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF0508];
    v7[2] = v4;
    v7[3] = v5;
    v7[4] = sub_24162FB7C();
    v7[5] = sub_24159CE88(&qword_25713D340, v6, MEMORY[0x24BDF04F8]);
    v7[0] = swift_getOpaqueTypeConformance2();
    v7[1] = v7[0];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v7);
    atomic_store(result, (unint64_t *)&qword_25713D458);
  }
  return result;
}

void sub_2416307B8(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713D478, (uint64_t (*)(uint64_t))MEMORY[0x24BDEF488], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

uint64_t sub_2416307D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

void sub_241630820(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = sub_2416B9B50();
    v7 = sub_241630894((unint64_t *)&qword_25713D490, MEMORY[0x24BDCE940]);
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_241630894(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_2416B9B50();
    result = MEMORY[0x2426994BC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_2416308D4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713D4A8)
  {
    sub_2416B9B50();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713D4A8);
  }
}

uint64_t sub_241630938()
{
  uint64_t *v0;

  return sub_24162F848(v0[4], v0[2], v0[3]);
}

void sub_241630954(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_24162EBE4(v1[4], v1[2], v1[3], a1);
}

void sub_241630960()
{
  qword_25713D278 = 0x4020000000000000;
}

void sub_241630970()
{
  qword_25713D280 = 0x4026000000000000;
}

void sub_241630980()
{
  qword_25713D288 = 0x401C000000000000;
}

uint64_t sub_241630990(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_2416309C0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_2416309F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_241630A00((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_24162BB34, a2, a3, a4);
}

uint64_t sub_241630A00(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DatePickerEditView(0, v5, v6, a4) - 8) + 80);
  return a1(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_241630A60(uint64_t a1)
{
  sub_2415A43C8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_241630AB0(uint64_t a1)
{
  sub_2415A431C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t objectdestroyTm_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v5 = (int *)type metadata accessor for DatePickerEditView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = v4
     + ((*(unsigned __int8 *)(*((_QWORD *)v5 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v5 - 1) + 80));
  swift_release();
  swift_release();
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v8 = v6 + *(int *)(v7 + 32);
  v9 = sub_2416B9B50();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v12(v6 + v5[10], v9);
  v13 = v6 + v5[11];
  if (!v11(v13, 1, v9))
    v12(v13, v9);
  v14 = v6 + v5[12];
  if (!v11(v14, 1, v9))
    v12(v14, v9);
  if (*(_QWORD *)(v6 + v5[14]))
    swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v12(v6 + v5[17], v9);
  sub_24159D6B0(0, &qword_25713BC48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_241630CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for DatePickerEditView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return sub_24162B920(v5);
}

uint64_t sub_241630D28(uint64_t a1)
{
  uint64_t v2;

  sub_24162FE88(0, &qword_25713D390, sub_24162FF14, (unint64_t *)&qword_257139CD0, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF06F8]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_241630D84(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_24162E1C0(v1[4], v1[2], v1[3], a1);
}

void sub_241630D90(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_2416BA0C0();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_241630DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_2415E40F8();
  sub_24162FD1C(255);
  sub_2416BA588();
  swift_getTupleTypeMetadata3();
  v0 = sub_2416BAFA8();
  v1 = MEMORY[0x24BDF5428];
  MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v0);
  v2 = sub_2416BAD8C();
  sub_2416302B8(255);
  sub_2416BA588();
  swift_getTupleTypeMetadata2();
  v3 = sub_2416BAFA8();
  MEMORY[0x2426994BC](v1, v3);
  v4 = sub_2416BADF8();
  MEMORY[0x2426994BC](MEMORY[0x24BDF4498], v2);
  MEMORY[0x2426994BC](MEMORY[0x24BDF4700], v4);
  type metadata accessor for MedicalIDAXLayoutView();
}

uint64_t sub_241630F20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeConformance2;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v3 = sub_2416BA150();
  sub_24161B9F8();
  v4 = sub_2416BA150();
  v20[0] = MEMORY[0x2426994BC](&unk_2416C0968, a1);
  v20[1] = MEMORY[0x24BDEF830];
  v5 = MEMORY[0x24BDED308];
  v19[0] = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v3, v20);
  v19[1] = sub_24159CE88(qword_25713CDD0, (uint64_t (*)(uint64_t))sub_24161B9F8, MEMORY[0x24BDEFAD8]);
  v6 = MEMORY[0x2426994BC](v5, v4, v19);
  v21 = v4;
  v22 = v6;
  v7 = MEMORY[0x242699480](255, &v21, MEMORY[0x24BDF2550], 0);
  sub_2415A0A74(255);
  v9 = v8;
  v21 = v4;
  v22 = v6;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v11 = sub_2416303FC();
  v21 = v7;
  v22 = v9;
  v23 = OpaqueTypeConformance2;
  v24 = v11;
  v12 = MEMORY[0x24BDF3908];
  v13 = MEMORY[0x242699480](255, &v21, MEMORY[0x24BDF3908], 0);
  v14 = sub_2416B9B50();
  v21 = v7;
  v22 = v9;
  v23 = OpaqueTypeConformance2;
  v24 = v11;
  v15 = swift_getOpaqueTypeConformance2();
  v16 = sub_241630894(&qword_25713BA90, MEMORY[0x24BDCE950]);
  v21 = v13;
  v22 = v14;
  v23 = v15;
  v24 = v16;
  MEMORY[0x242699480](255, &v21, v12, 0);
  sub_24162FCB8();
  swift_getTupleTypeMetadata2();
  v17 = sub_2416BAFA8();
  return MEMORY[0x2426994BC](v1, v17);
}

uint64_t sub_2416310F0(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v4 = a1;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    MEMORY[0x24BDAC7A8](a1);
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return sub_2416BAFB4();
  }
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return sub_2416BAFB4();
}

void sub_2416312A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_24159D6B0(255, &qword_25713D558, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDCellHeaderView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  swift_getTupleTypeMetadata2();
  v0 = sub_2416BAFA8();
  MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v0);
  v1 = sub_2416BADF8();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_2416BA150();
  v3 = MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  sub_2416BA51C();
  sub_2416BADEC();
  MEMORY[0x2426994BC](MEMORY[0x24BDF4700], v1);
  sub_241649488();
}

uint64_t sub_24163142C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v4);
  v8 = sub_241632174();
  *(_QWORD *)(v7 - 96) = v0;
  *(_QWORD *)(v7 - 88) = v8;
  MEMORY[0x2426994BC](MEMORY[0x24BDED308], v1, v7 - 96);
  sub_2415E3D20(v5, v1, v3);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 168) + 8);
  v9(v5, v1);
  sub_2415E07B8(v3, v1, *(_QWORD *)(v7 - 152));
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v3, v1);
}

uint64_t sub_2416314C4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  uint64_t v62[3];

  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v58 = (uint64_t)&v43 - v12;
  v13 = (int *)type metadata accessor for MedicalIDCellHeaderView();
  v56 = *((_QWORD *)v13 - 1);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_25713D558, v16, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v57 = v17;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v43 - v21;
  if (*((_BYTE *)a1 + 64) == 1)
  {
    v48 = *a1;
    v49 = a3;
    v23 = a1[1];
    v24 = *((unsigned __int8 *)a1 + 16);
    v46 = *((unsigned __int8 *)a1 + 17);
    v47 = v24;
    v25 = a1[3];
    v54 = a1[4];
    v55 = v23;
    v44 = a1[5];
    v45 = v25;
    v53 = a1[6];
    v26 = (uint64_t *)&v15[v13[5]];
    *v26 = swift_getKeyPath();
    sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    swift_storeEnumTagMultiPayload();
    v27 = v13[6];
    v50 = a4;
    v28 = (uint64_t *)&v15[v27];
    v52 = v11;
    sub_2415C0788(0, (unint64_t *)&qword_25713A430);
    v51 = v8;
    sub_2415E3B38((unint64_t *)&qword_25713A4D8, (unint64_t *)&qword_25713A430, (uint64_t)off_251193198, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    *v28 = sub_2416BA270();
    v28[1] = v29;
    v30 = (uint64_t *)&v15[v13[7]];
    sub_2415C0788(0, &qword_25713A448);
    sub_2415E3B38(&qword_25713B300, &qword_25713A448, 0x24BDD3C40, (uint64_t)&protocol conformance descriptor for HKHealthStore);
    *v30 = sub_2416BA270();
    v30[1] = v31;
    v32 = (uint64_t *)&v15[v13[8]];
    sub_2415C0788(0, (unint64_t *)&qword_25713A460);
    v8 = v51;
    v11 = v52;
    sub_2415E3B38(&qword_25713B308, (unint64_t *)&qword_25713A460, 0x24BDD3E40, (uint64_t)&protocol conformance descriptor for HKProfileStore);
    a3 = v49;
    *v32 = sub_2416BA270();
    v32[1] = v33;
    v34 = v55;
    *(_QWORD *)v15 = v48;
    *((_QWORD *)v15 + 1) = v34;
    v15[16] = v47;
    v15[17] = v46;
    v35 = v54;
    *((_QWORD *)v15 + 3) = v45;
    *((_QWORD *)v15 + 4) = v35;
    v36 = v53;
    *((_QWORD *)v15 + 5) = v44;
    *((_QWORD *)v15 + 6) = v36;
    sub_241632330((uint64_t)v15, (uint64_t)v22);
    v37 = 0;
  }
  else
  {
    v37 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, int *))(v56 + 56))(v22, v37, 1, v13);
  v39 = type metadata accessor for MedicalIDCellView(0, a2, a3, v38);
  v40 = v58;
  sub_2415E3D20((uint64_t)a1 + *(int *)(v39 + 44), a2, v58);
  sub_2416321B8((uint64_t)v22, (uint64_t)v20);
  v62[0] = (uint64_t)v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v40, a2);
  v62[1] = (uint64_t)v11;
  v61[0] = v57;
  v61[1] = a2;
  v59 = sub_241632214();
  v60 = a3;
  sub_2416310F0(v62, 2uLL, (uint64_t)v61);
  v41 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v41(v40, a2);
  sub_2416322D4((uint64_t)v22);
  v41((uint64_t)v11, a2);
  return sub_2416322D4((uint64_t)v20);
}

void sub_2416318DC()
{
  qword_25713D4D0 = 0x4018000000000000;
}

uint64_t sub_2416318EC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2416318F4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_241631984(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 65) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v10;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    v11 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v11;
    v12 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v12;
    v13 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
    v14 = ((unint64_t)a2 + 63) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
    v15 = (v13 + v6 + 9) & ~v6;
    v16 = (v14 + v6 + 9) & ~v6;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v17(v15, v16, v4);
  }
  return a1;
}

uint64_t sub_241631A98(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((a1 + 63) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t sub_241631AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 9 + v7) & ~v11;
  v13 = (v11 + 9 + v8) & ~v11;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v14(v12, v13, v9);
  return a1;
}

uint64_t sub_241631BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))((*(unsigned __int8 *)(v9 + 80) + 9 + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 9 + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t sub_241631C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  v6 = (a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v5 = *(_QWORD *)v6;
  *(_BYTE *)(v5 + 8) = *(_BYTE *)(v6 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(unsigned __int8 *)(v7 + 80) + 9 + v5) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 9 + v6) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_241631D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  v8 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  v9 = (a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(unsigned __int8 *)(v10 + 80) + 9 + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 9 + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t sub_241631DCC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 65) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 63) & 0xFFFFFFFFFFFFFFF8) + v7 + 9) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_241631EA0 + 4 * byte_2416C0190[(v9 - 1)]))();
}

void sub_241631F18(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for MedicalIDCellView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MedicalIDCellView);
}

uint64_t sub_241632134()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_241632168@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2416314C4(*(uint64_t **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_241632174()
{
  unint64_t result;

  result = qword_25713D560;
  if (!qword_25713D560)
  {
    result = MEMORY[0x2426994BC](&unk_2416C0F3C, &type metadata for MedicalIDCellStyle);
    atomic_store(result, (unint64_t *)&qword_25713D560);
  }
  return result;
}

uint64_t sub_2416321B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, &qword_25713D558, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDCellHeaderView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_241632214()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_25713D568;
  if (!qword_25713D568)
  {
    sub_24159D6B0(255, &qword_25713D558, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDCellHeaderView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v2 = v1;
    v3 = sub_24163228C();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5578], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713D568);
  }
  return result;
}

unint64_t sub_24163228C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713D570;
  if (!qword_25713D570)
  {
    v1 = type metadata accessor for MedicalIDCellHeaderView();
    result = MEMORY[0x2426994BC](&unk_2416C1DF0, v1);
    atomic_store(result, (unint64_t *)&qword_25713D570);
  }
  return result;
}

uint64_t sub_2416322D4(uint64_t a1)
{
  uint64_t v2;

  sub_24159D6B0(0, &qword_25713D558, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDCellHeaderView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_241632330(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MedicalIDCellHeaderView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_241632374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  sub_24159D6B0(255, &qword_25713D558, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDCellHeaderView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  swift_getTupleTypeMetadata2();
  v0 = sub_2416BAFA8();
  MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v0);
  v1 = sub_2416BADF8();
  v2 = sub_2416BA150();
  v4[0] = MEMORY[0x2426994BC](MEMORY[0x24BDF4700], v1);
  v4[1] = sub_241632174();
  return MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
}

uint64_t initializeBufferWithCopyOfBuffer for MedicalIDEditMedicalNotesModalView(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for MedicalIDEditMedicalNotesModalView()
{
  return swift_release();
}

uint64_t assignWithCopy for MedicalIDEditMedicalNotesModalView(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for MedicalIDEditMedicalNotesModalView(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDEditMedicalNotesModalView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDEditMedicalNotesModalView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDEditMedicalNotesModalView()
{
  return &type metadata for MedicalIDEditMedicalNotesModalView;
}

uint64_t sub_2416325B0()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2416325C0(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v38 = a1;
  v37 = a2 & 1;
  v4 = type metadata accessor for MedicalIDData();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415A6FC4(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2416BB0EC();
  v40 = &v35;
  MEMORY[0x24BDAC7A8](v10);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v11 = (void *)qword_25713A038;
  v12 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v12);
  v13 = v11;
  sub_2416B9C04();
  v14 = sub_2416BB134();
  v41 = v15;
  v42 = v14;
  if (qword_257139488 != -1)
    swift_once();
  v16 = 0x4E6C61636964654DLL;
  v39 = qword_257147720;
  v40 = (uint64_t *)MEMORY[0x24BDAC7A8](*(_QWORD *)algn_257147728);
  swift_bridgeObjectRetain();
  v17 = sub_2416BB098();
  v18 = (void *)qword_25713A038;
  MEMORY[0x24BDAC7A8](v17);
  v19 = v18;
  sub_2416B9C04();
  v20 = sub_2416BB134();
  v36 = v21;
  v22 = swift_retain();
  v23 = sub_2415C0C54(v22, v37);
  swift_release();
  swift_getKeyPath();
  v43 = v23;
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  v24 = v23 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_2415A700C(v24, (uint64_t)v9);
  swift_release();
  LoadState<>.loadedValue.getter((uint64_t)v6);
  sub_2415A6154((uint64_t)v9, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  v26 = *((_QWORD *)v6 + 7);
  v25 = *((_QWORD *)v6 + 8);
  swift_bridgeObjectRetain();
  sub_2415A6154((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  sub_24159F83C();
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v27 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v27 + 40) = 0xE900000000000044;
  v28 = 0xEC0000007365746FLL;
  strcpy((char *)(v27 + 48), "MedicalNotes");
  *(_BYTE *)(v27 + 61) = 0;
  *(_WORD *)(v27 + 62) = -5120;
  v29 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v30 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v30)
  {
    v16 = sub_2416BB128();
    v28 = v31;

  }
  v32 = v41;
  *a3 = v42;
  a3[1] = v32;
  v33 = v40;
  a3[2] = v39;
  a3[3] = (uint64_t)v33;
  v34 = v36;
  a3[4] = v20;
  a3[5] = v34;
  a3[6] = v26;
  a3[7] = v25;
  a3[8] = 0;
  a3[9] = 0;
  a3[10] = v16;
  a3[11] = v28;
}

uint64_t sub_241632A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = a3;
  return result;
}

double sub_241632A64@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _OWORD v4[6];

  sub_2416325C0(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), (uint64_t *)v4);
  return sub_2416392BC(v4, (uint64_t)sub_241632A20, 0, a1);
}

uint64_t ImageProcessorError.hash(into:)()
{
  return sub_2416BB6C8();
}

BOOL static ImageProcessorError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ImageProcessorError.hashValue.getter()
{
  sub_2416BB6BC();
  sub_2416BB6C8();
  return sub_2416BB6EC();
}

uint8_t *_s11MedicalIDUI16UIImageProcessorV5scale5image2toSo0C0CSgAH_So6CGSizeVtAA05ImageD5ErrorOYKF(uint8_t *a1, _BYTE *a2, double a3, double a4)
{
  uint8_t *v4;
  double v8;
  double v9;
  double v10;
  double v11;
  uint8_t *v13;
  double v14;
  id v15;
  void *v16;
  double v17;
  double v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8_t *v33;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;

  if (a3 <= 0.0 || a4 <= 0.0)
  {
    if (qword_2571395C0 != -1)
      swift_once();
    v19 = sub_2416B9D6C();
    __swift_project_value_buffer(v19, (uint64_t)qword_257147810);
    v20 = sub_2416B9D54();
    v21 = sub_2416BB374();
    if (os_log_type_enabled(v20, v21))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v44 = v22;
      *(_DWORD *)v4 = 136315394;
      sub_2415A8600(0xD000000000000010, 0x80000002416C0310, &v44);
      v23 = sub_2416BB44C();
      *((_WORD *)v4 + 6) = 2080;
      v24 = MEMORY[0x242698BF8](v23, a3, a4);
      sub_2415A8600(v24, v25, &v44);
      sub_2416BB44C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_241599000, v20, v21, "[%s]: passed in an invalid size: %s", v4, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242699570](v22, -1, -1);
      MEMORY[0x242699570](v4, -1, -1);
    }

    goto LABEL_26;
  }
  v4 = a1;
  -[uint8_t size](a1, sel_size);
  if (v9 <= 0.0 || v8 <= 0.0)
  {
    if (qword_2571395C0 != -1)
      swift_once();
    v26 = sub_2416B9D6C();
    __swift_project_value_buffer(v26, (uint64_t)qword_257147810);
    v4 = v4;
    v27 = sub_2416B9D54();
    v28 = sub_2416BB374();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc();
      v30 = swift_slowAlloc();
      v44 = v30;
      *(_DWORD *)v29 = 136315394;
      sub_2415A8600(0xD000000000000010, 0x80000002416C0310, &v44);
      sub_2416BB44C();
      *(_WORD *)(v29 + 12) = 2080;
      v31 = MEMORY[0x242698BF8](-[uint8_t size](v4, sel_size));
      sub_2415A8600(v31, v32, &v44);
      sub_2416BB44C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_241599000, v27, v28, "[%s]: passed in an image with an invalid size: %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242699570](v30, -1, -1);
      MEMORY[0x242699570](v29, -1, -1);

    }
    else
    {

    }
LABEL_26:
    *a2 = 0;
    LOBYTE(v44) = 0;
LABEL_27:
    sub_241633414();
    swift_willThrowTypedImpl();
    return v4;
  }
  -[uint8_t size](v4, sel_size);
  if (v11 == a3 && v10 == a4)
  {
    v33 = v4;
    return v4;
  }
  v13 = (uint8_t *)sub_241633250(v4, a4 / a3);
  if (!v13)
  {
    if (qword_2571395C0 != -1)
      swift_once();
    v35 = sub_2416B9D6C();
    __swift_project_value_buffer(v35, (uint64_t)qword_257147810);
    v36 = sub_2416B9D54();
    v37 = sub_2416BB374();
    if (os_log_type_enabled(v36, v37))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v44 = v38;
      *(_DWORD *)v4 = 136315138;
      sub_2415A8600(0xD000000000000010, 0x80000002416C0310, &v44);
      sub_2416BB44C();
      _os_log_impl(&dword_241599000, v36, v37, "[%s]: Could not crop image", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v38, -1, -1);
      MEMORY[0x242699570](v4, -1, -1);
    }

    *a2 = 2;
    LOBYTE(v44) = 2;
    goto LABEL_27;
  }
  v4 = v13;
  -[uint8_t size](v13, sel_size);
  if (v14 > a3)
  {
    v15 = -[uint8_t imageByPreparingThumbnailOfSize:](v4, sel_imageByPreparingThumbnailOfSize_, a3, a4);
    if (v15)
    {
      v16 = v15;
      objc_msgSend(v15, sel_size);
      if (v18 > 0.0 && v17 > 0.0)
      {

        return (uint8_t *)v16;
      }

    }
    if (qword_2571395C0 != -1)
      swift_once();
    v39 = sub_2416B9D6C();
    __swift_project_value_buffer(v39, (uint64_t)qword_257147810);
    v40 = sub_2416B9D54();
    v41 = sub_2416BB374();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      v44 = v43;
      *(_DWORD *)v42 = 136315138;
      sub_2415A8600(0xD000000000000010, 0x80000002416C0310, &v44);
      sub_2416BB44C();
      _os_log_impl(&dword_241599000, v40, v41, "[%s]: image scaling failed", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v43, -1, -1);
      MEMORY[0x242699570](v42, -1, -1);
    }

    *a2 = 1;
    LOBYTE(v44) = 1;
    sub_241633414();
    swift_willThrowTypedImpl();

  }
  return v4;
}

id sub_241633250(void *a1, double a2)
{
  id v3;
  double v4;
  double v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGImage *v21;
  CGImage *v22;
  CGImageRef v23;
  CGImageRef v24;
  id v25;
  CGRect v27;

  v3 = a1;
  objc_msgSend(a1, sel_size);
  if (v5 / v4 != a2)
  {
    objc_msgSend(v3, sel_size);
    v8 = v7;
    v10 = v9;
    objc_msgSend(v3, sel_size);
    v12 = v11;
    objc_msgSend(v3, sel_size);
    v14 = v13;
    objc_msgSend(v3, sel_size);
    if (v14 >= v12)
      v10 = floor(v15 * a2);
    else
      v8 = floor(v16 / a2);
    objc_msgSend(v3, sel_size);
    v18 = v17;
    objc_msgSend(v3, sel_size);
    v20 = v19;
    v21 = (CGImage *)objc_msgSend(v3, sel_CGImage);
    if (v21)
    {
      v22 = v21;
      v27.origin.y = floor(ceil(v20 * 0.5) - v10 * 0.5);
      v27.origin.x = floor(ceil(v18 * 0.5) - v8 * 0.5);
      v27.size.width = v8;
      v27.size.height = v10;
      v23 = CGImageCreateWithImageInRect(v21, v27);
      if (v23)
      {
        v24 = v23;
        v25 = objc_msgSend(v3, sel_imageOrientation);
        v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD640]), sel_initWithCGImage_scale_orientation_, v24, v25, 1.0);

        return v3;
      }

    }
    return 0;
  }
  v6 = v3;
  return v3;
}

uint8_t *sub_2416333E0(uint8_t *a1, _BYTE *a2, double a3, double a4)
{
  uint64_t v4;
  uint8_t *result;
  char v7;

  result = _s11MedicalIDUI16UIImageProcessorV5scale5image2toSo0C0CSgAH_So6CGSizeVtAA05ImageD5ErrorOYKF(a1, &v7, a3, a4);
  if (v4)
    *a2 = v7;
  return result;
}

unint64_t sub_241633414()
{
  unint64_t result;

  result = qword_25713D578;
  if (!qword_25713D578)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for ImageProcessorError, &type metadata for ImageProcessorError);
    atomic_store(result, (unint64_t *)&qword_25713D578);
  }
  return result;
}

unint64_t sub_24163345C()
{
  unint64_t result;

  result = qword_25713D580;
  if (!qword_25713D580)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for ImageProcessorError, &type metadata for ImageProcessorError);
    atomic_store(result, (unint64_t *)&qword_25713D580);
  }
  return result;
}

uint64_t _s11MedicalIDUI14ImageProcessorP5scale5image2toSo7UIImageCSgAH_So6CGSizeVtAA0cD5ErrorOYKFTj(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t storeEnumTagSinglePayload for ImageProcessorError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_241633504 + 4 * byte_2416C0325[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_241633538 + 4 * byte_2416C0320[v4]))();
}

uint64_t sub_241633538(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_241633540(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x241633548);
  return result;
}

uint64_t sub_241633554(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24163355CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_241633560(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_241633568(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageProcessorError()
{
  return &type metadata for ImageProcessorError;
}

ValueMetadata *type metadata accessor for UIImageProcessor()
{
  return &type metadata for UIImageProcessor;
}

__n128 sub_241633594@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  _QWORD *v21;
  __int128 v24;
  __n128 v25;
  uint64_t v26;
  __int128 v27;

  v14 = (int *)type metadata accessor for EditPrimaryLanguageCellView();
  v15 = a8 + v14[7];
  sub_24159D7F0(0, (unint64_t *)&qword_25713A910, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v27 = 0uLL;
  sub_2416BAD08();
  *(_OWORD *)v15 = v24;
  *(_QWORD *)(v15 + 16) = v26;
  v16 = a8 + v14[8];
  LOBYTE(v27) = 0;
  sub_2416BAD08();
  *(_BYTE *)v16 = v24;
  *(_QWORD *)(v16 + 8) = *((_QWORD *)&v24 + 1);
  sub_2415BEF64(a1, a8, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
  v17 = (unint64_t *)(a8 + v14[5]);
  *v17 = a2;
  v17[1] = a3;
  v17[2] = a4;
  v17[3] = a5;
  v25.n128_u64[0] = a2;
  v25.n128_u64[1] = a3;
  sub_2415FFE44();
  v19 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x242698604](&v27, v19);
  sub_2416BAD08();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_2415A6154(a1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
  swift_bridgeObjectRelease();
  swift_release();
  result = v25;
  *(__n128 *)v15 = v25;
  *(_QWORD *)(v15 + 16) = a4;
  v21 = (_QWORD *)(a8 + v14[6]);
  *v21 = a6;
  v21[1] = a7;
  return result;
}

uint64_t type metadata accessor for EditPrimaryLanguageCellView()
{
  uint64_t result;

  result = qword_25713D5E0;
  if (!qword_25713D5E0)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *sub_241633794(_QWORD *a1, char *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  id v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  char *__dst;
  int *v94;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    v7 = *((_QWORD *)a2 + 3);
    a1[2] = *((_QWORD *)a2 + 2);
    a1[3] = v7;
    v8 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v8;
    v9 = *((_QWORD *)a2 + 7);
    a1[6] = *((_QWORD *)a2 + 6);
    a1[7] = v9;
    v10 = *((_QWORD *)a2 + 9);
    a1[8] = *((_QWORD *)a2 + 8);
    a1[9] = v10;
    v11 = *((_QWORD *)a2 + 11);
    a1[10] = *((_QWORD *)a2 + 10);
    a1[11] = v11;
    v90 = (void *)*((_QWORD *)a2 + 12);
    v91 = (void *)*((_QWORD *)a2 + 13);
    a1[12] = v90;
    a1[13] = v91;
    v12 = type metadata accessor for MedicalIDData();
    v13 = *(int *)(v12 + 52);
    __dst = (char *)v4 + v13;
    v94 = (int *)v12;
    v89 = &a2[v13];
    v14 = sub_2416B9B50();
    v92 = *(_QWORD *)(v14 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = v90;
    v17 = v91;
    if (v15(v89, 1, v14))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v89, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      v19 = v92;
    }
    else
    {
      v19 = v92;
      (*(void (**)(char *, char *, uint64_t))(v92 + 16))(__dst, v89, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(__dst, 0, 1, v14);
    }
    v21 = v94[14];
    v22 = (char *)v4 + v21;
    v23 = &a2[v21];
    if (v15(&a2[v21], 1, v14))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v23, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v14);
    }
    v25 = v94[15];
    v26 = (_QWORD *)((char *)v4 + v25);
    v27 = &a2[v25];
    v28 = *((_QWORD *)v27 + 1);
    *v26 = *(_QWORD *)v27;
    v26[1] = v28;
    v29 = v94[16];
    v30 = (_QWORD *)((char *)v4 + v29);
    v31 = &a2[v29];
    v32 = *((_QWORD *)v31 + 1);
    *v30 = *(_QWORD *)v31;
    v30[1] = v32;
    *((_BYTE *)v4 + v94[17]) = a2[v94[17]];
    *((_BYTE *)v4 + v94[18]) = a2[v94[18]];
    v33 = v94[19];
    v34 = (char *)v4 + v33;
    v35 = (uint64_t *)&a2[v33];
    v36 = *(_QWORD *)&a2[v33 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v36 >> 60 == 15)
    {
      *(_OWORD *)v34 = *(_OWORD *)v35;
    }
    else
    {
      v37 = *v35;
      sub_2415A0A90(*v35, v36);
      *(_QWORD *)v34 = v37;
      *((_QWORD *)v34 + 1) = v36;
    }
    v38 = v15;
    v39 = v94[20];
    v40 = (char *)v4 + v39;
    v41 = &a2[v39];
    v42 = sub_2416B9A18();
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
    v45 = v94[21];
    v46 = *(void **)&a2[v45];
    *(_QWORD *)((char *)v4 + v45) = v46;
    v47 = v94[22];
    v48 = (char *)v4 + v47;
    v49 = &a2[v47];
    v50 = v46;
    if (v38(v49, 1, v14))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v48, v49, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v48, 0, 1, v14);
    }
    v52 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    v53 = v52[5];
    v54 = (char *)v4 + v53;
    v55 = &a2[v53];
    v56 = sub_2416B9C70();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v54, v55, v56);
    v57 = v52[6];
    v58 = (char *)v4 + v57;
    v59 = &a2[v57];
    v60 = sub_2416B9C10();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
    v61 = v52[7];
    v62 = *(void **)&a2[v61];
    *(_QWORD *)((char *)v4 + v61) = v62;
    v63 = v52[8];
    v64 = *(void **)&a2[v63];
    *(_QWORD *)((char *)v4 + v63) = v64;
    v65 = v52[9];
    v66 = (_QWORD *)((char *)v4 + v65);
    v67 = &a2[v65];
    v68 = *((_QWORD *)v67 + 1);
    *v66 = *(_QWORD *)v67;
    v66[1] = v68;
    v69 = a3[5];
    v70 = a3[6];
    v71 = (_QWORD *)((char *)v4 + v69);
    v72 = &a2[v69];
    v73 = *((_QWORD *)v72 + 1);
    *v71 = *(_QWORD *)v72;
    v71[1] = v73;
    v74 = *((_QWORD *)v72 + 3);
    v71[2] = *((_QWORD *)v72 + 2);
    v71[3] = v74;
    v75 = (_QWORD *)((char *)v4 + v70);
    v76 = &a2[v70];
    v77 = *(_QWORD *)&a2[v70];
    v78 = v62;
    v79 = v64;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v77)
    {
      v80 = *((_QWORD *)v76 + 1);
      *v75 = v77;
      v75[1] = v80;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v75 = *(_OWORD *)v76;
    }
    v81 = a3[7];
    v82 = a3[8];
    v83 = (_QWORD *)((char *)v4 + v81);
    v84 = &a2[v81];
    v85 = *((_QWORD *)v84 + 1);
    *v83 = *(_QWORD *)v84;
    v83[1] = v85;
    v83[2] = *((_QWORD *)v84 + 2);
    v86 = (char *)v4 + v82;
    v87 = &a2[v82];
    *v86 = *v87;
    *((_QWORD *)v86 + 1) = *((_QWORD *)v87 + 1);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_241633CCC(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = (int *)type metadata accessor for MedicalIDData();
  v5 = a1 + v4[13];
  v6 = sub_2416B9B50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + v4[14];
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)(a1 + v4[19]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_2415A0DAC(*v10, v11);
  v12 = a1 + v4[20];
  v13 = sub_2416B9A18();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);

  v15 = a1 + v4[22];
  if (!v8(v15, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  v16 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v17 = a1 + v16[5];
  v18 = sub_2416B9C70();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + v16[6];
  v20 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + *(int *)(a2 + 24)))
    swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

_QWORD *sub_241633F54(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  id v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  char *__dst;
  int *v92;

  v5 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *((_QWORD *)a2 + 3);
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = v6;
  v7 = *((_QWORD *)a2 + 5);
  a1[4] = *((_QWORD *)a2 + 4);
  a1[5] = v7;
  v8 = *((_QWORD *)a2 + 7);
  a1[6] = *((_QWORD *)a2 + 6);
  a1[7] = v8;
  v9 = *((_QWORD *)a2 + 9);
  a1[8] = *((_QWORD *)a2 + 8);
  a1[9] = v9;
  v10 = *((_QWORD *)a2 + 11);
  a1[10] = *((_QWORD *)a2 + 10);
  a1[11] = v10;
  v88 = (void *)*((_QWORD *)a2 + 12);
  v89 = (void *)*((_QWORD *)a2 + 13);
  a1[12] = v88;
  a1[13] = v89;
  v11 = type metadata accessor for MedicalIDData();
  v12 = *(int *)(v11 + 52);
  __dst = (char *)a1 + v12;
  v92 = (int *)v11;
  v87 = &a2[v12];
  v13 = sub_2416B9B50();
  v90 = *(_QWORD *)(v13 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = v88;
  v16 = v89;
  if (v14(v87, 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v87, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    v18 = v90;
  }
  else
  {
    v18 = v90;
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(__dst, v87, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(__dst, 0, 1, v13);
  }
  v19 = v92[14];
  v20 = (char *)a1 + v19;
  v21 = &a2[v19];
  if (v14(&a2[v19], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v20, v21, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v13);
  }
  v23 = v92[15];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = &a2[v23];
  v26 = *((_QWORD *)v25 + 1);
  *v24 = *(_QWORD *)v25;
  v24[1] = v26;
  v27 = v92[16];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = &a2[v27];
  v30 = *((_QWORD *)v29 + 1);
  *v28 = *(_QWORD *)v29;
  v28[1] = v30;
  *((_BYTE *)a1 + v92[17]) = a2[v92[17]];
  *((_BYTE *)a1 + v92[18]) = a2[v92[18]];
  v31 = v92[19];
  v32 = (char *)a1 + v31;
  v33 = (uint64_t *)&a2[v31];
  v34 = *(_QWORD *)&a2[v31 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v34 >> 60 == 15)
  {
    *(_OWORD *)v32 = *(_OWORD *)v33;
  }
  else
  {
    v35 = *v33;
    sub_2415A0A90(*v33, v34);
    *(_QWORD *)v32 = v35;
    *((_QWORD *)v32 + 1) = v34;
  }
  v36 = v14;
  v37 = v92[20];
  v38 = (char *)a1 + v37;
  v39 = &a2[v37];
  v40 = sub_2416B9A18();
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  v43 = v92[21];
  v44 = *(void **)&a2[v43];
  *(_QWORD *)((char *)a1 + v43) = v44;
  v45 = v92[22];
  v46 = (char *)a1 + v45;
  v47 = &a2[v45];
  v48 = v44;
  if (v36(v47, 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v46, v47, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v46, 0, 1, v13);
  }
  v50 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v51 = v50[5];
  v52 = (char *)a1 + v51;
  v53 = &a2[v51];
  v54 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
  v55 = v50[6];
  v56 = (char *)a1 + v55;
  v57 = &a2[v55];
  v58 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
  v59 = v50[7];
  v60 = *(void **)&a2[v59];
  *(_QWORD *)((char *)a1 + v59) = v60;
  v61 = v50[8];
  v62 = *(void **)&a2[v61];
  *(_QWORD *)((char *)a1 + v61) = v62;
  v63 = v50[9];
  v64 = (_QWORD *)((char *)a1 + v63);
  v65 = &a2[v63];
  v66 = *((_QWORD *)v65 + 1);
  *v64 = *(_QWORD *)v65;
  v64[1] = v66;
  v67 = a3[5];
  v68 = a3[6];
  v69 = (_QWORD *)((char *)a1 + v67);
  v70 = &a2[v67];
  v71 = *((_QWORD *)v70 + 1);
  *v69 = *(_QWORD *)v70;
  v69[1] = v71;
  v72 = *((_QWORD *)v70 + 3);
  v69[2] = *((_QWORD *)v70 + 2);
  v69[3] = v72;
  v73 = (_QWORD *)((char *)a1 + v68);
  v74 = &a2[v68];
  v75 = *(_QWORD *)&a2[v68];
  v76 = v60;
  v77 = v62;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v75)
  {
    v78 = *((_QWORD *)v74 + 1);
    *v73 = v75;
    v73[1] = v78;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v73 = *(_OWORD *)v74;
  }
  v79 = a3[7];
  v80 = a3[8];
  v81 = (_QWORD *)((char *)a1 + v79);
  v82 = &a2[v79];
  v83 = *((_QWORD *)v82 + 1);
  *v81 = *(_QWORD *)v82;
  v81[1] = v83;
  v81[2] = *((_QWORD *)v82 + 2);
  v84 = (char *)a1 + v80;
  v85 = &a2[v80];
  *v84 = *v85;
  *((_QWORD *)v84 + 1) = *((_QWORD *)v85 + 1);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_241634464(char *a1, _QWORD *a2, int *a3)
{
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t (*v97)(char *, uint64_t, uint64_t);
  uint64_t v98;

  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 3) = a2[3];
  *((_QWORD *)a1 + 4) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 7) = a2[7];
  *((_QWORD *)a1 + 8) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 9) = a2[9];
  *((_QWORD *)a1 + 10) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 11) = a2[11];
  v5 = (void *)*((_QWORD *)a1 + 12);
  v6 = (void *)a2[12];
  *((_QWORD *)a1 + 12) = v6;
  v7 = v6;

  v8 = (void *)*((_QWORD *)a1 + 13);
  v9 = (void *)a2[13];
  *((_QWORD *)a1 + 13) = v9;
  v10 = v9;

  v11 = (int *)type metadata accessor for MedicalIDData();
  v12 = v11[13];
  v13 = &a1[v12];
  v14 = (char *)a2 + v12;
  v15 = sub_2416B9B50();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  v21 = v11[14];
  v22 = &a1[v21];
  v23 = (char *)a2 + v21;
  v24 = v17(&a1[v21], 1, v15);
  v25 = v17(v23, 1, v15);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  v27 = v11[15];
  v28 = &a1[v27];
  v29 = (_QWORD *)((char *)a2 + v27);
  *(_QWORD *)v28 = *v29;
  *((_QWORD *)v28 + 1) = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = v11[16];
  v31 = &a1[v30];
  v32 = (_QWORD *)((char *)a2 + v30);
  *(_QWORD *)v31 = *v32;
  *((_QWORD *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v11[17]] = *((_BYTE *)a2 + v11[17]);
  a1[v11[18]] = *((_BYTE *)a2 + v11[18]);
  v33 = v11[19];
  v34 = (uint64_t *)&a1[v33];
  v35 = (_QWORD *)((char *)a2 + v33);
  v36 = *(_QWORD *)((char *)a2 + v33 + 8);
  v97 = v17;
  v98 = v16;
  if (*(_QWORD *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      v37 = *v35;
      sub_2415A0A90(v37, v36);
      *v34 = v37;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v34);
LABEL_18:
    *(_OWORD *)v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  v38 = *v35;
  sub_2415A0A90(v38, v36);
  v39 = *v34;
  v40 = v34[1];
  *v34 = v38;
  v34[1] = v36;
  sub_2415A0DAC(v39, v40);
LABEL_20:
  v41 = v11[20];
  v42 = &a1[v41];
  v43 = (char *)a2 + v41;
  v44 = sub_2416B9A18();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46(v43, 1, v44);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_26:
  v50 = v11[21];
  v51 = *(void **)&a1[v50];
  v52 = *(void **)((char *)a2 + v50);
  *(_QWORD *)&a1[v50] = v52;
  v53 = v52;

  v54 = v11[22];
  v55 = &a1[v54];
  v56 = (char *)a2 + v54;
  v57 = v97(&a1[v54], 1, v15);
  v58 = v97(v56, 1, v15);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v55, v56, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v55, 0, 1, v15);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v98 + 8))(v55, v15);
LABEL_31:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v98 + 24))(v55, v56, v15);
LABEL_32:
  v60 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v61 = v60[5];
  v62 = &a1[v61];
  v63 = (char *)a2 + v61;
  v64 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 24))(v62, v63, v64);
  v65 = v60[6];
  v66 = &a1[v65];
  v67 = (char *)a2 + v65;
  v68 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 24))(v66, v67, v68);
  v69 = v60[7];
  v70 = *(void **)&a1[v69];
  v71 = *(void **)((char *)a2 + v69);
  *(_QWORD *)&a1[v69] = v71;
  v72 = v71;

  v73 = v60[8];
  v74 = *(void **)((char *)a2 + v73);
  v75 = *(void **)&a1[v73];
  *(_QWORD *)&a1[v73] = v74;
  v76 = v74;

  v77 = v60[9];
  v78 = &a1[v77];
  v79 = (_QWORD *)((char *)a2 + v77);
  *(_QWORD *)v78 = *v79;
  *((_QWORD *)v78 + 1) = v79[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v80 = a3[5];
  v81 = &a1[v80];
  v82 = (_QWORD *)((char *)a2 + v80);
  *(_QWORD *)&a1[v80] = *(_QWORD *)((char *)a2 + v80);
  swift_retain();
  swift_release();
  *((_QWORD *)v81 + 1) = v82[1];
  swift_retain();
  swift_release();
  *((_QWORD *)v81 + 2) = v82[2];
  *((_QWORD *)v81 + 3) = v82[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83 = a3[6];
  v84 = &a1[v83];
  v85 = (char *)a2 + v83;
  v86 = *(_QWORD *)&a1[v83];
  v87 = *(_QWORD *)((char *)a2 + v83);
  if (!v86)
  {
    if (v87)
    {
      v89 = *((_QWORD *)v85 + 1);
      *(_QWORD *)v84 = v87;
      *((_QWORD *)v84 + 1) = v89;
      swift_retain();
      goto LABEL_39;
    }
LABEL_38:
    *(_OWORD *)v84 = *(_OWORD *)v85;
    goto LABEL_39;
  }
  if (!v87)
  {
    swift_release();
    goto LABEL_38;
  }
  v88 = *((_QWORD *)v85 + 1);
  *(_QWORD *)v84 = v87;
  *((_QWORD *)v84 + 1) = v88;
  swift_retain();
  swift_release();
LABEL_39:
  v90 = a3[7];
  v91 = &a1[v90];
  v92 = (char *)a2 + v90;
  *(_QWORD *)v91 = *(_QWORD *)((char *)a2 + v90);
  *((_QWORD *)v91 + 1) = *(_QWORD *)((char *)a2 + v90 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v91 + 2) = *((_QWORD *)v92 + 2);
  swift_retain();
  swift_release();
  v93 = a3[8];
  v94 = &a1[v93];
  v95 = (char *)a2 + v93;
  *v94 = *v95;
  *((_QWORD *)v94 + 1) = *((_QWORD *)v95 + 1);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_241634BF0(uint64_t a1, uint64_t a2, int *a3)
{
  int *v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = v5[13];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_2416B9B50();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = v5[14];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(_OWORD *)(a1 + v5[15]) = *(_OWORD *)(a2 + v5[15]);
  *(_OWORD *)(a1 + v5[16]) = *(_OWORD *)(a2 + v5[16]);
  *(_BYTE *)(a1 + v5[17]) = *(_BYTE *)(a2 + v5[17]);
  *(_BYTE *)(a1 + v5[18]) = *(_BYTE *)(a2 + v5[18]);
  *(_OWORD *)(a1 + v5[19]) = *(_OWORD *)(a2 + v5[19]);
  v17 = v5[20];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = sub_2416B9A18();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_QWORD *)(a1 + v5[21]) = *(_QWORD *)(a2 + v5[21]);
  v23 = v5[22];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  if (v11((const void *)(a2 + v23), 1, v9))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v24, v25, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
  }
  v27 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v28 = v27[5];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = sub_2416B9C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
  v32 = v27[6];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
  *(_QWORD *)(a1 + v27[7]) = *(_QWORD *)(a2 + v27[7]);
  *(_QWORD *)(a1 + v27[8]) = *(_QWORD *)(a2 + v27[8]);
  *(_OWORD *)(a1 + v27[9]) = *(_OWORD *)(a2 + v27[9]);
  v36 = a3[5];
  v37 = a3[6];
  v38 = (_OWORD *)(a1 + v36);
  v39 = (_OWORD *)(a2 + v36);
  v40 = v39[1];
  *v38 = *v39;
  v38[1] = v40;
  v41 = (_QWORD *)(a1 + v37);
  v42 = (uint64_t *)(a2 + v37);
  v43 = *v42;
  if (*v42)
  {
    v44 = v42[1];
    *v41 = v43;
    v41[1] = v44;
  }
  else
  {
    *(_OWORD *)v41 = *(_OWORD *)v42;
  }
  v45 = a3[7];
  v46 = a3[8];
  v47 = a1 + v45;
  v48 = a2 + v45;
  *(_OWORD *)v47 = *(_OWORD *)v48;
  *(_QWORD *)(v47 + 16) = *(_QWORD *)(v48 + 16);
  *(_OWORD *)(a1 + v46) = *(_OWORD *)(a2 + v46);
  return a1;
}

char *sub_241634FF4(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;

  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  v6 = a2[4];
  *((_QWORD *)a1 + 3) = a2[3];
  *((_QWORD *)a1 + 4) = v6;
  swift_bridgeObjectRelease();
  v7 = a2[6];
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = v7;
  swift_bridgeObjectRelease();
  v8 = a2[8];
  *((_QWORD *)a1 + 7) = a2[7];
  *((_QWORD *)a1 + 8) = v8;
  swift_bridgeObjectRelease();
  v9 = a2[10];
  *((_QWORD *)a1 + 9) = a2[9];
  *((_QWORD *)a1 + 10) = v9;
  swift_bridgeObjectRelease();
  v10 = (void *)*((_QWORD *)a1 + 12);
  v11 = a2[12];
  *((_QWORD *)a1 + 11) = a2[11];
  *((_QWORD *)a1 + 12) = v11;

  v12 = (void *)*((_QWORD *)a1 + 13);
  *((_QWORD *)a1 + 13) = a2[13];

  v13 = (int *)type metadata accessor for MedicalIDData();
  v14 = v13[13];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = sub_2416B9B50();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  v23 = v13[14];
  v24 = &a1[v23];
  v25 = (char *)a2 + v23;
  v26 = v19(&a1[v23], 1, v17);
  v27 = v19(v25, 1, v17);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  v29 = v13[15];
  v30 = &a1[v29];
  v31 = (_QWORD *)((char *)a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *(_QWORD *)v30 = v33;
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  v34 = v13[16];
  v35 = &a1[v34];
  v36 = (_QWORD *)((char *)a2 + v34);
  v38 = *v36;
  v37 = v36[1];
  *(_QWORD *)v35 = v38;
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  a1[v13[17]] = *((_BYTE *)a2 + v13[17]);
  a1[v13[18]] = *((_BYTE *)a2 + v13[18]);
  v39 = v13[19];
  v40 = (uint64_t)&a1[v39];
  v41 = (char *)a2 + v39;
  v42 = *(_QWORD *)&a1[v39 + 8];
  v99 = v19;
  v100 = v18;
  if (v42 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v40 = *(_OWORD *)v41;
    goto LABEL_18;
  }
  v43 = *((_QWORD *)v41 + 1);
  if (v43 >> 60 == 15)
  {
    sub_2415A1B38(v40);
    goto LABEL_16;
  }
  v44 = *(_QWORD *)v40;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_QWORD *)(v40 + 8) = v43;
  sub_2415A0DAC(v44, v42);
LABEL_18:
  v45 = v13[20];
  v46 = &a1[v45];
  v47 = (char *)a2 + v45;
  v48 = sub_2416B9A18();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v46, 1, v48);
  v52 = v50(v47, 1, v48);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
LABEL_23:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 40))(v46, v47, v48);
LABEL_24:
  v54 = v13[21];
  v55 = *(void **)&a1[v54];
  *(_QWORD *)&a1[v54] = *(_QWORD *)((char *)a2 + v54);

  v56 = v13[22];
  v57 = &a1[v56];
  v58 = (char *)a2 + v56;
  v59 = v99(&a1[v56], 1, v17);
  v60 = v99(v58, 1, v17);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v57, v58, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v57, 0, 1, v17);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v60)
  {
    (*(void (**)(char *, uint64_t))(v100 + 8))(v57, v17);
LABEL_29:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v100 + 40))(v57, v58, v17);
LABEL_30:
  v62 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v63 = v62[5];
  v64 = &a1[v63];
  v65 = (char *)a2 + v63;
  v66 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 40))(v64, v65, v66);
  v67 = v62[6];
  v68 = &a1[v67];
  v69 = (char *)a2 + v67;
  v70 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 40))(v68, v69, v70);
  v71 = v62[7];
  v72 = *(void **)&a1[v71];
  *(_QWORD *)&a1[v71] = *(_QWORD *)((char *)a2 + v71);

  v73 = v62[8];
  v74 = *(void **)&a1[v73];
  *(_QWORD *)&a1[v73] = *(_QWORD *)((char *)a2 + v73);

  v75 = v62[9];
  v76 = &a1[v75];
  v77 = (_QWORD *)((char *)a2 + v75);
  v79 = *v77;
  v78 = v77[1];
  *(_QWORD *)v76 = v79;
  *((_QWORD *)v76 + 1) = v78;
  swift_bridgeObjectRelease();
  v80 = a3[5];
  v81 = &a1[v80];
  v82 = (_QWORD *)((char *)a2 + v80);
  *(_QWORD *)&a1[v80] = *(_QWORD *)((char *)a2 + v80);
  swift_release();
  *((_QWORD *)v81 + 1) = v82[1];
  swift_release();
  v83 = v82[3];
  *((_QWORD *)v81 + 2) = v82[2];
  *((_QWORD *)v81 + 3) = v83;
  swift_bridgeObjectRelease();
  v84 = a3[6];
  v85 = &a1[v84];
  v86 = (char *)a2 + v84;
  v87 = *(_QWORD *)&a1[v84];
  v88 = *(_QWORD *)((char *)a2 + v84);
  if (!v87)
  {
    if (v88)
    {
      v90 = *((_QWORD *)v86 + 1);
      *(_QWORD *)v85 = v88;
      *((_QWORD *)v85 + 1) = v90;
      goto LABEL_37;
    }
LABEL_36:
    *(_OWORD *)v85 = *(_OWORD *)v86;
    goto LABEL_37;
  }
  if (!v88)
  {
    swift_release();
    goto LABEL_36;
  }
  v89 = *((_QWORD *)v86 + 1);
  *(_QWORD *)v85 = v88;
  *((_QWORD *)v85 + 1) = v89;
  swift_release();
LABEL_37:
  v91 = a3[7];
  v92 = &a1[v91];
  v93 = (char *)a2 + v91;
  v94 = *(_QWORD *)((char *)a2 + v91 + 8);
  *(_QWORD *)v92 = *(_QWORD *)((char *)a2 + v91);
  *((_QWORD *)v92 + 1) = v94;
  swift_bridgeObjectRelease();
  *((_QWORD *)v92 + 2) = *((_QWORD *)v93 + 2);
  swift_release();
  v95 = a3[8];
  v96 = &a1[v95];
  v97 = (char *)a2 + v95;
  *v96 = *v97;
  *((_QWORD *)v96 + 1) = *((_QWORD *)v97 + 1);
  swift_release();
  return a1;
}

uint64_t sub_24163565C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_241635668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_2416356E8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416356F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDPersonalInfoViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_241635770()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MedicalIDPersonalInfoViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2416357F8()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_241635808(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  uint64_t v83;
  void *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  id v114;
  unint64_t v115;
  void *v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;

  v147 = a2;
  sub_241637E84(0, &qword_25713D6F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
  v144 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v146 = (uint64_t)&v127 - v4;
  sub_24159D6B0(0, &qword_25713D668, (uint64_t (*)(uint64_t))sub_2416379E4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
  v145 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v127 - v6;
  sub_24159D6B0(0, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v127 - v12;
  sub_2415E40F8();
  v143 = v14;
  v140 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v139 = (char *)&v127 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v138 = (uint64_t)&v127 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)&v141 = (char *)&v127 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v148 = (char *)&v127 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v127 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v127 - v29;
  v31 = a1 + *(int *)(type metadata accessor for EditPrimaryLanguageCellView() + 20);
  v32 = *(_QWORD *)(v31 + 8);
  v149 = *(_QWORD *)v31;
  v150 = v32;
  v151 = *(_OWORD *)(v31 + 16);
  sub_2415FFE44();
  MEMORY[0x242698604](&v152);
  v34 = v152;
  v33 = v153;
  if (!v153)
  {
    *(_QWORD *)&v142 = v30;
    v148 = v28;
    sub_2416BA4C8();
    if (qword_257139300 != -1)
      swift_once();
    v57 = (id)qword_25713A038;
    v58 = sub_2416BA9CC();
    v60 = v59;
    v62 = v61 & 1;
    v149 = sub_2416BAC18();
    v63 = sub_2416BA990();
    v65 = v64;
    v67 = v66;
    v69 = v68;
    sub_2415A431C(v58, v60, v62);
    swift_release();
    swift_bridgeObjectRelease();
    v149 = v63;
    v150 = v65;
    LOBYTE(v151) = v67 & 1;
    v140 = v69;
    *((_QWORD *)&v151 + 1) = v69;
    sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v70 = swift_allocObject();
    v141 = xmmword_2416BCC80;
    *(_OWORD *)(v70 + 16) = xmmword_2416BCC80;
    v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16) = v141;
    v72 = (_QWORD *)(a1 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
    v73 = v72[1];
    *(_QWORD *)(v71 + 32) = *v72;
    *(_QWORD *)(v71 + 40) = v73;
    v74 = 0x4C7972616D697250;
    v75 = 0xEF65676175676E61;
    *(_QWORD *)(v71 + 48) = 0x4C7972616D697250;
    *(_QWORD *)(v71 + 56) = 0xEF65676175676E61;
    swift_bridgeObjectRetain();
    v76 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    v77 = (id)HKUIJoinStringsForAutomationIdentifier();

    v78 = v142;
    if (v77)
    {
      v74 = sub_2416BB128();
      v75 = v79;

    }
    v80 = (uint64_t)v148;
    *(_QWORD *)(v70 + 32) = v74;
    *(_QWORD *)(v70 + 40) = v75;
    *(_QWORD *)(v70 + 48) = 6579265;
    *(_QWORD *)(v70 + 56) = 0xE300000000000000;
    v81 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    v82 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v82)
    {
      sub_2416BB128();

      sub_2416BAB1C();
      swift_bridgeObjectRelease();
      sub_2415A431C(v63, v65, v67 & 1);
      swift_bridgeObjectRelease();
      sub_2415A85BC(v80, v78, (uint64_t (*)(_QWORD))sub_2415E40F8);
      sub_2415BEF64(v78, v146, (uint64_t (*)(_QWORD))sub_2415E40F8);
      swift_storeEnumTagMultiPayload();
      sub_2415A3F2C(&qword_25713D680, &qword_25713D668, (uint64_t (*)(uint64_t))sub_2416379E4);
      sub_2415E419C();
      sub_2416BA57C();
      v83 = v78;
LABEL_19:
      sub_2415A6154(v83, (uint64_t (*)(_QWORD))sub_2415E40F8);
      return;
    }
    goto LABEL_21;
  }
  v129 = v17;
  v130 = v11;
  v136 = v13;
  v131 = v7;
  v149 = v152;
  v150 = v153;
  v149 = MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
  v150 = v35;
  v135 = sub_2415C343C();
  v36 = sub_2416BA9D8();
  v38 = v37;
  v40 = v39 & 1;
  v149 = sub_2416BAC18();
  v41 = sub_2416BA990();
  v43 = v42;
  v137 = a1;
  v45 = v44;
  LOBYTE(v44) = v40;
  v47 = v46;
  sub_2415A431C(v36, v38, v44);
  v48 = 0xEF65676175676E61;
  swift_release();
  swift_bridgeObjectRelease();
  v134 = v41;
  v149 = v41;
  v150 = v43;
  v133 = v43;
  v132 = v45;
  LOBYTE(v151) = v45 & 1;
  *((_QWORD *)&v151 + 1) = v47;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v49 = swift_allocObject();
  v142 = xmmword_2416BCC80;
  *(_OWORD *)(v49 + 16) = xmmword_2416BCC80;
  v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = v142;
  v51 = (uint64_t *)(v137 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
  v52 = v51[1];
  v128 = *v51;
  *(_QWORD *)(v50 + 32) = v128;
  *(_QWORD *)(v50 + 40) = v52;
  *(_QWORD *)(v50 + 48) = 0x4C7972616D697250;
  *(_QWORD *)(v50 + 56) = 0xEF65676175676E61;
  v137 = v52;
  swift_bridgeObjectRetain();
  v53 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v54 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v54)
  {
    v55 = sub_2416BB128();
    v48 = v56;

  }
  else
  {
    v55 = 0x4C7972616D697250;
  }
  *(_QWORD *)(v49 + 32) = v55;
  *(_QWORD *)(v49 + 40) = v48;
  *(_QWORD *)(v49 + 48) = 0xD000000000000012;
  *(_QWORD *)(v49 + 56) = 0x80000002416C5390;
  v84 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v85 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v85)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_2416BB128();

  v86 = v141;
  sub_2416BAB1C();
  swift_bridgeObjectRelease();
  sub_2415A431C(v134, v133, v132 & 1);
  swift_bridgeObjectRelease();
  v87 = (uint64_t)v148;
  sub_2415A85BC(v86, (uint64_t)v148, (uint64_t (*)(_QWORD))sub_2415E40F8);
  v149 = v34;
  v150 = v33;
  swift_bridgeObjectRetain();
  v149 = MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
  v150 = v88;
  v152 = v34;
  v153 = v33;
  v152 = MedicalIDSpokenLanguage.languageInLanguageLocale.getter();
  v153 = v89;
  v90 = sub_2416BB488();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v90 & 1) != 0)
  {
    swift_bridgeObjectRelease_n();
    v91 = 1;
    v92 = (uint64_t)v136;
LABEL_18:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v140 + 56))(v92, v91, 1, v143);
    v120 = v87;
    v121 = (uint64_t)v129;
    sub_2415BEF64(v120, (uint64_t)v129, (uint64_t (*)(_QWORD))sub_2415E40F8);
    v122 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
    v123 = (uint64_t)v130;
    sub_241637F04(v92, (uint64_t)v130, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v124 = (uint64_t)v131;
    sub_2415BEF64(v121, (uint64_t)v131, (uint64_t (*)(_QWORD))sub_2415E40F8);
    sub_2416379E4();
    sub_241637F04(v123, v124 + *(int *)(v125 + 48), (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8, v122);
    sub_2415CCAFC(v123, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8, v122);
    sub_2415A6154(v121, (uint64_t (*)(_QWORD))sub_2415E40F8);
    v126 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0];
    sub_241637F04(v124, v146, &qword_25713D668, (uint64_t (*)(uint64_t))sub_2416379E4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    swift_storeEnumTagMultiPayload();
    sub_2415A3F2C(&qword_25713D680, &qword_25713D668, (uint64_t (*)(uint64_t))sub_2416379E4);
    sub_2415E419C();
    sub_2416BA57C();
    v83 = (uint64_t)v148;
    sub_2415CCAFC(v124, &qword_25713D668, (uint64_t (*)(uint64_t))sub_2416379E4, v126);
    sub_2415CCAFC(v92, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    goto LABEL_19;
  }
  v149 = v34;
  v150 = v33;
  v93 = MedicalIDSpokenLanguage.languageInLanguageLocale.getter();
  v95 = v94;
  swift_bridgeObjectRelease_n();
  v149 = v93;
  v150 = v95;
  v96 = sub_2416BA9D8();
  v98 = v97;
  v100 = v99 & 1;
  v149 = sub_2416BAC18();
  v101 = sub_2416BA990();
  v103 = v102;
  v105 = v104;
  v107 = v106;
  v108 = v100;
  v109 = 0xEF65676175676E61;
  sub_2415A431C(v96, v98, v108);
  swift_release();
  swift_bridgeObjectRelease();
  v149 = v101;
  v150 = v103;
  LOBYTE(v151) = v105 & 1;
  *((_QWORD *)&v151 + 1) = v107;
  v110 = swift_allocObject();
  *(_OWORD *)(v110 + 16) = v142;
  v111 = swift_allocObject();
  *(_OWORD *)(v111 + 16) = v142;
  *(_QWORD *)(v111 + 32) = v128;
  v112 = 0x4C7972616D697250;
  *(_QWORD *)(v111 + 40) = v137;
  *(_QWORD *)(v111 + 48) = 0x4C7972616D697250;
  *(_QWORD *)(v111 + 56) = 0xEF65676175676E61;
  swift_bridgeObjectRetain();
  v113 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v114 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v114)
  {
    v112 = sub_2416BB128();
    v109 = v115;

  }
  v92 = (uint64_t)v136;
  *(_QWORD *)(v110 + 32) = v112;
  *(_QWORD *)(v110 + 40) = v109;
  *(_QWORD *)(v110 + 48) = 0xD000000000000014;
  *(_QWORD *)(v110 + 56) = 0x80000002416C53B0;
  v116 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v117 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v117)
  {
    sub_2416BB128();

    v118 = (uint64_t)v139;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v101, v103, v105 & 1);
    swift_bridgeObjectRelease();
    v119 = v138;
    sub_2415A85BC(v118, v138, (uint64_t (*)(_QWORD))sub_2415E40F8);
    sub_2415A85BC(v119, v92, (uint64_t (*)(_QWORD))sub_2415E40F8);
    v91 = 0;
    v87 = (uint64_t)v148;
    goto LABEL_18;
  }
LABEL_22:
  __break(1u);
}

uint64_t sub_241636530(uint64_t a1)
{
  void (**v1)(void);

  v1 = (void (**)(void))(a1 + *(int *)(type metadata accessor for EditPrimaryLanguageCellView() + 24));
  if (*v1)
    (*v1)();
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  return sub_2416BAD20();
}

uint64_t sub_2416365D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (**v18)@<X0>(uint64_t@<X8>);
  uint64_t (**v19)@<X0>(uint64_t@<X8>);
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v2 = v1;
  v30 = a1;
  v29 = type metadata accessor for EditPrimaryLanguageCellView();
  v3 = *(_QWORD *)(v29 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v29);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)sub_241637668();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v26 - v10;
  v27 = v2;
  sub_2415BEF64(v2, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for EditPrimaryLanguageCellView);
  v12 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = v12 + v4;
  v13 = swift_allocObject();
  sub_2415A85BC((uint64_t)v5, v13 + v12, (uint64_t (*)(_QWORD))type metadata accessor for EditPrimaryLanguageCellView);
  sub_2415BEF64(v2, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for EditPrimaryLanguageCellView);
  v14 = swift_allocObject();
  sub_2415A85BC((uint64_t)v5, v14 + v12, (uint64_t (*)(_QWORD))type metadata accessor for EditPrimaryLanguageCellView);
  *v9 = swift_getKeyPath();
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v15 = (char *)v9 + v6[13];
  v16 = *MEMORY[0x24BDECEA0];
  v17 = sub_2416BA144();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v15, v16, v17);
  v18 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v9 + v6[14]);
  *v18 = sub_241637BF8;
  v18[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v13;
  v19 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v9 + v6[15]);
  *v19 = sub_241637C18;
  v19[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v14;
  sub_2415A85BC((uint64_t)v9, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_241637668);
  v20 = v27;
  v21 = v27 + *(int *)(v29 + 32);
  v22 = *(_BYTE *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  v31 = v22;
  v32 = v23;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  sub_2415BEF64(v20, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for EditPrimaryLanguageCellView);
  v24 = swift_allocObject();
  sub_2415A85BC((uint64_t)v5, v24 + v12, (uint64_t (*)(_QWORD))type metadata accessor for EditPrimaryLanguageCellView);
  sub_24159CE88(&qword_25713D6C8, (uint64_t (*)(uint64_t))sub_241637668, (uint64_t)&unk_2416C0968);
  sub_241637CE4();
  sub_2416BAB70();
  swift_release();
  swift_release();
  swift_release();
  return sub_2415A6154((uint64_t)v11, (uint64_t (*)(_QWORD))sub_241637668);
}

void sub_241636910(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  id v35;
  unint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;

  v72 = a1;
  v70 = a2;
  v2 = type metadata accessor for EditPrimaryLanguageCellView();
  v60 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v61 = v3;
  v63 = (uint64_t)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241637974();
  v66 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416378E8(0);
  v67 = v7;
  v65 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v64 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24163783C();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v69 = (uint64_t)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v55 - v12;
  sub_2415E40F8();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v68 = (uint64_t)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v59 = (char *)&v55 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v62 = (uint64_t)&v55 - v19;
  sub_2416BA4C8();
  if (qword_257139300 != -1)
    swift_once();
  v20 = 0x4C7972616D697250;
  v21 = (id)qword_25713A038;
  v22 = sub_2416BA9CC();
  v24 = v23;
  v57 = v22;
  v73 = v22;
  v74 = v25;
  v56 = v25;
  v75 = v23 & 1;
  v58 = v26;
  v76 = v26;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v27 = swift_allocObject();
  v71 = xmmword_2416BCC80;
  *(_OWORD *)(v27 + 16) = xmmword_2416BCC80;
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = v71;
  v29 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  v30 = v72;
  v31 = (_QWORD *)(v72 + *(int *)(v29 + 36));
  v32 = v31[1];
  *(_QWORD *)(v28 + 32) = *v31;
  *(_QWORD *)(v28 + 40) = v32;
  v33 = 0xEF65676175676E61;
  *(_QWORD *)(v28 + 48) = 0x4C7972616D697250;
  *(_QWORD *)(v28 + 56) = 0xEF65676175676E61;
  swift_bridgeObjectRetain();
  v34 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v35 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v35)
  {
    v20 = sub_2416BB128();
    v33 = v36;

  }
  *(_QWORD *)(v27 + 32) = v20;
  *(_QWORD *)(v27 + 40) = v33;
  *(_QWORD *)(v27 + 48) = 0x656C746954;
  *(_QWORD *)(v27 + 56) = 0xE500000000000000;
  v37 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v38 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v38)
  {
    v39 = v30;
    sub_2416BB128();

    v40 = (uint64_t)v59;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v57, v56, v24 & 1);
    swift_bridgeObjectRelease();
    v41 = v62;
    sub_2415A85BC(v40, v62, (uint64_t (*)(_QWORD))sub_2415E40F8);
    v42 = sub_2416BA528();
    *(_QWORD *)v13 = sub_2416BA468();
    *((_QWORD *)v13 + 1) = 0;
    v13[16] = 1;
    sub_241637DA4();
    v44 = &v13[*(int *)(v43 + 44)];
    *(_QWORD *)v6 = v42;
    *((_QWORD *)v6 + 1) = 0;
    v6[16] = 1;
    sub_241637E08();
    sub_241635808(v39, (uint64_t)&v6[*(int *)(v45 + 44)]);
    v46 = v63;
    sub_2415BEF64(v39, v63, (uint64_t (*)(_QWORD))type metadata accessor for EditPrimaryLanguageCellView);
    v47 = (*(unsigned __int8 *)(v60 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
    v48 = swift_allocObject();
    sub_2415A85BC(v46, v48 + v47, (uint64_t (*)(_QWORD))type metadata accessor for EditPrimaryLanguageCellView);
    sub_24159CE88(&qword_25713D688, (uint64_t (*)(uint64_t))sub_241637974, MEMORY[0x24BDF4700]);
    v49 = v64;
    sub_2416BAA80();
    swift_release();
    sub_2415A6154((uint64_t)v6, (uint64_t (*)(_QWORD))sub_241637974);
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v44, v49, v67);
    v50 = v68;
    sub_2415BEF64(v41, v68, (uint64_t (*)(_QWORD))sub_2415E40F8);
    v51 = v69;
    sub_2415BEF64((uint64_t)v13, v69, (uint64_t (*)(_QWORD))sub_24163783C);
    v52 = v70;
    sub_2415BEF64(v50, v70, (uint64_t (*)(_QWORD))sub_2415E40F8);
    sub_2416377C8();
    v54 = v52 + *(int *)(v53 + 48);
    *(_QWORD *)v54 = 0;
    *(_BYTE *)(v54 + 8) = 1;
    sub_2415BEF64(v51, v52 + *(int *)(v53 + 64), (uint64_t (*)(_QWORD))sub_24163783C);
    sub_2415A6154((uint64_t)v13, (uint64_t (*)(_QWORD))sub_24163783C);
    sub_2415A6154(v41, (uint64_t (*)(_QWORD))sub_2415E40F8);
    sub_2415A6154(v51, (uint64_t (*)(_QWORD))sub_24163783C);
    sub_2415A6154(v50, (uint64_t (*)(_QWORD))sub_2415E40F8);
  }
  else
  {
    __break(1u);
  }
}

void sub_241636F24(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  unint64_t v29;
  void *v30;
  id v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v66 = a2;
  v3 = type metadata accessor for EditPrimaryLanguageCellView();
  v57 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v58 = v4;
  v60 = (uint64_t)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241637974();
  v63 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416378E8(0);
  v64 = v8;
  v62 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v61 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24163783C();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v65 = (uint64_t)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v59 = (_QWORD *)((char *)v56 - v13);
  sub_2416BA4C8();
  if (qword_257139300 != -1)
    swift_once();
  v14 = 0x4C7972616D697250;
  v15 = (id)qword_25713A038;
  v16 = sub_2416BA9CC();
  v18 = v17;
  LODWORD(v56[0]) = v19;
  v56[1] = v20;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v21 = swift_allocObject();
  v67 = xmmword_2416BCC80;
  *(_OWORD *)(v21 + 16) = xmmword_2416BCC80;
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = v67;
  v23 = *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36);
  *(_QWORD *)&v67 = a1;
  v24 = (_QWORD *)(a1 + v23);
  v25 = v24[1];
  *(_QWORD *)(v22 + 32) = *v24;
  *(_QWORD *)(v22 + 40) = v25;
  v26 = 0xEF65676175676E61;
  *(_QWORD *)(v22 + 48) = 0x4C7972616D697250;
  *(_QWORD *)(v22 + 56) = 0xEF65676175676E61;
  swift_bridgeObjectRetain();
  v27 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v28 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v28)
  {
    v14 = sub_2416BB128();
    v26 = v29;

  }
  *(_QWORD *)(v21 + 32) = v14;
  *(_QWORD *)(v21 + 40) = v26;
  *(_QWORD *)(v21 + 48) = 0x656C746954;
  *(_QWORD *)(v21 + 56) = 0xE500000000000000;
  v30 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v31 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v31)
  {
    v32 = v56[0] & 1;
    v33 = sub_2416BB128();
    v35 = v34;

    v68 = v33;
    v69 = v35;
    sub_2415C343C();
    v36 = sub_2416BA99C();
    v38 = v37;
    v56[0] = v39;
    LOBYTE(v33) = v40 & 1;
    sub_2415A431C(v16, v18, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v41 = sub_2416BA51C();
    v42 = sub_2416BA468();
    v43 = (uint64_t)v59;
    *v59 = v42;
    *(_QWORD *)(v43 + 8) = 0;
    *(_BYTE *)(v43 + 16) = 1;
    sub_241637DA4();
    v45 = v43 + *(int *)(v44 + 44);
    *(_QWORD *)v7 = v41;
    *((_QWORD *)v7 + 1) = 0;
    v7[16] = 1;
    sub_241637E08();
    v47 = v67;
    sub_241635808(v67, (uint64_t)&v7[*(int *)(v46 + 44)]);
    v48 = v47;
    v49 = v60;
    sub_2415BEF64(v48, v60, (uint64_t (*)(_QWORD))type metadata accessor for EditPrimaryLanguageCellView);
    v50 = (*(unsigned __int8 *)(v57 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
    v51 = swift_allocObject();
    sub_2415A85BC(v49, v51 + v50, (uint64_t (*)(_QWORD))type metadata accessor for EditPrimaryLanguageCellView);
    sub_24159CE88(&qword_25713D688, (uint64_t (*)(uint64_t))sub_241637974, MEMORY[0x24BDF4700]);
    v52 = v61;
    sub_2416BAA80();
    swift_release();
    sub_2415A6154((uint64_t)v7, (uint64_t (*)(_QWORD))sub_241637974);
    (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v45, v52, v64);
    v53 = v65;
    sub_2415BEF64(v43, v65, (uint64_t (*)(_QWORD))sub_24163783C);
    v54 = v66;
    *v66 = v36;
    v54[1] = v38;
    *((_BYTE *)v54 + 16) = v33;
    v54[3] = v56[0];
    sub_241637B90();
    sub_2415BEF64(v53, (uint64_t)v54 + *(int *)(v55 + 48), (uint64_t (*)(_QWORD))sub_24163783C);
    sub_2415A43C8(v36, v38, v33);
    swift_bridgeObjectRetain();
    sub_2415A6154(v43, (uint64_t (*)(_QWORD))sub_24163783C);
    sub_2415A6154(v53, (uint64_t (*)(_QWORD))sub_24163783C);
    sub_2415A431C(v36, v38, v33);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_241637490(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for EditPrimaryLanguageCellView();
  sub_2415FFE44();
  sub_2416BAE34();
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v2 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v2 + 40) = 0xE900000000000044;
  *(_QWORD *)(v2 + 48) = 0xD000000000000015;
  *(_QWORD *)(v2 + 56) = 0x80000002416C5350;
  v3 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v4 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v4)
  {
    v5 = sub_2416BB128();
    v7 = v6;

    type metadata accessor for MedicalIDSpokenLanguagePickerViewModel();
    swift_allocObject();
    v8 = MedicalIDSpokenLanguagePickerViewModel.init(primaryLanguageCode:)(v9, v10, v11, v12);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v10;
    *(_BYTE *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = v7;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_241637668()
{
  uint64_t result;

  result = qword_25713D628;
  if (!qword_25713D628)
  {
    sub_241637730();
    sub_241637AF8();
    sub_24159CE88(&qword_25713D6B8, (uint64_t (*)(uint64_t))sub_241637730, MEMORY[0x24BDF4498]);
    sub_24159CE88(&qword_25713D6C0, (uint64_t (*)(uint64_t))sub_241637AF8, MEMORY[0x24BDF4700]);
    type metadata accessor for MedicalIDAXLayoutView();
  }
  return result;
}

void sub_241637730()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D630)
  {
    sub_24159D6B0(255, &qword_25713D638, (uint64_t (*)(uint64_t))sub_2416377C8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2415A3F2C(&qword_25713D690, &qword_25713D638, (uint64_t (*)(uint64_t))sub_2416377C8);
    v0 = sub_2416BAD8C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D630);
  }
}

void sub_2416377C8()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713D640)
  {
    sub_2415E40F8();
    sub_24163783C();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713D640);
  }
}

void sub_24163783C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D648)
  {
    sub_2416378E8(255);
    sub_241637974();
    sub_24159CE88(&qword_25713D688, (uint64_t (*)(uint64_t))sub_241637974, MEMORY[0x24BDF4700]);
    swift_getOpaqueTypeConformance2();
    v0 = sub_2416BAD8C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D648);
  }
}

void sub_2416378E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_25713D650)
  {
    sub_241637974();
    v5[0] = v2;
    v5[1] = sub_24159CE88(&qword_25713D688, (uint64_t (*)(uint64_t))sub_241637974, MEMORY[0x24BDF4700]);
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF2550], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713D650);
  }
}

void sub_241637974()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D658)
  {
    sub_241637E84(255, &qword_25713D660, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    sub_241637A68();
    v0 = sub_2416BADF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D658);
  }
}

void sub_2416379E4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713D670)
  {
    sub_2415E40F8();
    sub_24159D6B0(255, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713D670);
  }
}

unint64_t sub_241637A68()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713D678;
  if (!qword_25713D678)
  {
    sub_241637E84(255, &qword_25713D660, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3[0] = sub_2415A3F2C(&qword_25713D680, &qword_25713D668, (uint64_t (*)(uint64_t))sub_2416379E4);
    v3[1] = sub_2415E419C();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713D678);
  }
  return result;
}

void sub_241637AF8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D698)
  {
    sub_24159D6B0(255, &qword_25713D6A0, (uint64_t (*)(uint64_t))sub_241637B90, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2415A3F2C(&qword_25713D6B0, &qword_25713D6A0, (uint64_t (*)(uint64_t))sub_241637B90);
    v0 = sub_2416BADF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D698);
  }
}

void sub_241637B90()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713D6A8)
  {
    sub_24163783C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713D6A8);
  }
}

uint64_t sub_241637BF8@<X0>(uint64_t a1@<X8>)
{
  return sub_241637C34(MEMORY[0x24BDEE730], (void (*)(_QWORD))sub_241637F54, (uint64_t (*)(uint64_t))sub_241636910, a1);
}

uint64_t sub_241637C18@<X0>(uint64_t a1@<X8>)
{
  return sub_241637C34(MEMORY[0x24BDEEF78], (void (*)(_QWORD))sub_241637D28, (uint64_t (*)(uint64_t))sub_241636F24, a1);
}

uint64_t sub_241637C34@<X0>(uint64_t (*a1)(void)@<X0>, void (*a2)(_QWORD)@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EditPrimaryLanguageCellView() - 8) + 80);
  return sub_24160DA08(v4 + ((v9 + 16) & ~v9), a1, a2, a3, a4);
}

void sub_241637CA8(uint64_t a1@<X8>)
{
  type metadata accessor for EditPrimaryLanguageCellView();
  sub_241637490(a1);
}

unint64_t sub_241637CE4()
{
  unint64_t result;

  result = qword_25713D6D0;
  if (!qword_25713D6D0)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDSpokenLanguagePickerView, &type metadata for MedicalIDSpokenLanguagePickerView);
    atomic_store(result, (unint64_t *)&qword_25713D6D0);
  }
  return result;
}

void sub_241637D28()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D6D8)
  {
    sub_24159D6B0(255, &qword_25713D6A0, (uint64_t (*)(uint64_t))sub_241637B90, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D6D8);
  }
}

void sub_241637DA4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D6E0)
  {
    sub_2416378E8(255);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D6E0);
  }
}

void sub_241637E08()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D6E8)
  {
    sub_241637E84(255, &qword_25713D660, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D6E8);
  }
}

void sub_241637E84(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_24159D6B0(255, &qword_25713D668, (uint64_t (*)(uint64_t))sub_2416379E4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v7 = v6;
    sub_2415E40F8();
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_241637F04(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;

  sub_24159D6B0(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void sub_241637F54()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D6F8)
  {
    sub_24159D6B0(255, &qword_25713D638, (uint64_t (*)(uint64_t))sub_2416377C8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D6F8);
  }
}

uint64_t objectdestroyTm_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for EditPrimaryLanguageCellView();
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v3 = (int *)type metadata accessor for MedicalIDData();
  v4 = v2 + v3[13];
  v5 = sub_2416B9B50();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = v2 + v3[14];
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (uint64_t *)(v2 + v3[19]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_2415A0DAC(*v9, v10);
  v11 = v2 + v3[20];
  v12 = sub_2416B9A18();
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);

  v14 = v2 + v3[22];
  if (!v7(v14, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  v15 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v16 = v2 + v15[5];
  v17 = sub_2416B9C70();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = v2 + v15[6];
  v19 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + *(int *)(v1 + 24)))
    swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2416382A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EditPrimaryLanguageCellView() - 8) + 80);
  return sub_241636530(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_2416382D0()
{
  sub_241637668();
  sub_24159CE88(&qword_25713D6C8, (uint64_t (*)(uint64_t))sub_241637668, (uint64_t)&unk_2416C0968);
  sub_241637CE4();
  return swift_getOpaqueTypeConformance2();
}

void MedicalIDWeightFormatter.init(locale:personWeightFormatter:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;

  v6 = sub_2416B9C10();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a3, a1, v6);
  v8 = type metadata accessor for MedicalIDWeightFormatter();
  *(_QWORD *)(a3 + *(int *)(v8 + 20)) = a2;
  v9 = a2;
  v10 = objc_msgSend(v9, sel_massFormatter);
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(v10, sel_numberFormatter);

    if (v12)
    {
      v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1668]), sel_init);
      v14 = (void *)sub_2416B9BE0();
      objc_msgSend(v13, sel_setLocale_, v14);

      objc_msgSend(v13, sel_setUnitOptions_, 1);
      objc_msgSend(v13, sel_setUnitStyle_, 2);
      objc_msgSend(v13, sel_setNumberFormatter_, v12);

      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
      *(_QWORD *)(a3 + *(int *)(v8 + 24)) = v13;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t type metadata accessor for MedicalIDWeightFormatter()
{
  uint64_t result;

  result = qword_25713D758;
  if (!qword_25713D758)
    return swift_getSingletonMetadata();
  return result;
}

Swift::String_optional __swiftcall MedicalIDWeightFormatter.localizedDescription(for:)(HKQuantity_optional a1)
{
  Class isa;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  Swift::String_optional result;
  uint64_t v16;

  isa = a1.value.super.isa;
  sub_241601CC8(0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v16 - v5;
  sub_24161F2E0(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24163863C(isa, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_2416231D0((uint64_t)v9);
    v10 = 0;
    v11 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    type metadata accessor for MedicalIDWeightFormatter();
    sub_2415C0788(0, &qword_25713BEE8);
    v10 = sub_2416BB3E0();
    v11 = v12;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  v13 = v10;
  v14 = v11;
  result.value._object = v14;
  result.value._countAndFlagsBits = v13;
  return result;
}

void sub_24163863C(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;

  v4 = sub_241638B50();
  sub_241600E18(a1, (uint64_t)v4, a2);

}

Swift::String __swiftcall MedicalIDWeightFormatter.localizedUnitDescription()()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String result;

  sub_2416389E4(1);
  v1 = v0;
  v2 = sub_241638B50();
  v3 = objc_msgSend(v1, sel_stringFromUnit_, v2);

  v4 = sub_2416BB128();
  v6 = v5;

  v7 = v4;
  v8 = v6;
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

void sub_2416389E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;

  v2 = v1;
  v4 = sub_2416B9C10();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v8 = objc_msgSend(*(id *)(v2 + *(int *)(type metadata accessor for MedicalIDWeightFormatter() + 20)), sel_massFormatter);
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, sel_numberFormatter);

    if (v10)
    {
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1668]), sel_init);
      v12 = (void *)sub_2416B9BE0();
      objc_msgSend(v11, sel_setLocale_, v12);

      objc_msgSend(v11, sel_setUnitOptions_, 1);
      objc_msgSend(v11, sel_setUnitStyle_, a1);
      objc_msgSend(v11, sel_setNumberFormatter_, v10);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_241638B50()
{
  uint64_t v0;
  uint64_t v1;
  char **v2;
  id result;

  v1 = (uint64_t)objc_msgSend(*(id *)(v0 + *(int *)(type metadata accessor for MedicalIDWeightFormatter() + 20)), sel_localWeightUnit);
  if (v1 <= 1536)
  {
    if (v1 == 11)
    {
      v2 = &selRef_grams;
      return objc_msgSend((id)objc_opt_self(), *v2);
    }
    if (v1 == 14)
    {
      v2 = &selRef_kilograms;
      return objc_msgSend((id)objc_opt_self(), *v2);
    }
  }
  else
  {
    switch(v1)
    {
      case 1537:
        v2 = &selRef_ounces;
        return objc_msgSend((id)objc_opt_self(), *v2);
      case 1538:
        v2 = &selRef_poundsMass;
        return objc_msgSend((id)objc_opt_self(), *v2);
      case 1539:
        v2 = &selRef_stones;
        return objc_msgSend((id)objc_opt_self(), *v2);
    }
  }
  result = (id)sub_2416BB5A8();
  __break(1u);
  return result;
}

id MedicalIDWeightFormatter.formattedText(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  id v13;
  id result;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  sub_241601CC8(0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - v7;
  sub_24161F2E0(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241638E44(a1, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    sub_2416231D0((uint64_t)v11);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
  sub_2416B98EC();
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v12);
  result = objc_msgSend(*(id *)(v2 + *(int *)(type metadata accessor for MedicalIDWeightFormatter() + 24)), sel_numberFormatter);
  if (result)
  {
    v15 = result;
    v16 = objc_msgSend(result, sel_stringFromNumber_, v13);

    if (v16)
    {
      v17 = sub_2416BB128();

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return (id)v17;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_241638E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24161F2E0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for MedicalIDWeightFormatter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_2416B9C10();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    v11 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v11;
    v12 = v10;
    v13 = v11;
  }
  return a1;
}

void destroy for MedicalIDWeightFormatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t initializeWithCopy for MedicalIDWeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;

  v6 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = *(void **)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  v11 = v9;
  v12 = v10;
  return a1;
}

uint64_t assignWithCopy for MedicalIDWeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  v6 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  v11 = *(int *)(a3 + 24);
  v12 = *(void **)(a2 + v11);
  v13 = *(void **)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  v14 = v12;

  return a1;
}

uint64_t initializeWithTake for MedicalIDWeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for MedicalIDWeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v6 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = *(int *)(a3 + 24);
  v10 = *(void **)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);

  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDWeightFormatter()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_241639144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_2416B9C10();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDWeightFormatter()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416391CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_2416B9C10();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_241639244()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2416B9C10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double sub_2416392BC@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  double result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  sub_24159D7F0(0, (unint64_t *)&qword_25713A918, (uint64_t)&type metadata for BasicAlertModel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  sub_2416BAD08();
  *(_OWORD *)(a4 + 112) = v17;
  *(_OWORD *)(a4 + 128) = v18;
  *(_OWORD *)(a4 + 144) = v19;
  *(_OWORD *)(a4 + 160) = v20;
  v8 = (int *)type metadata accessor for MedicalIDEditFreeformTextModalView();
  v9 = (uint64_t *)(a4 + v8[7]);
  *v9 = swift_getKeyPath();
  sub_24163A150(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v10 = a4 + v8[8];
  type metadata accessor for MedicalIDDataManager();
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  *(_QWORD *)v10 = sub_2416B9FC4();
  *(_BYTE *)(v10 + 8) = v11 & 1;
  v12 = a1[1];
  *(_OWORD *)a4 = *a1;
  *(_OWORD *)(a4 + 16) = v12;
  v13 = a1[5];
  *(_OWORD *)(a4 + 64) = a1[4];
  *(_OWORD *)(a4 + 80) = v13;
  v14 = a1[3];
  *(_OWORD *)(a4 + 32) = a1[2];
  *(_OWORD *)(a4 + 48) = v14;
  *(_QWORD *)(a4 + 96) = a2;
  *(_QWORD *)(a4 + 104) = a3;
  v15 = a4 + v8[9];
  swift_bridgeObjectRetain();
  sub_2416BAD08();
  result = *(double *)&v17;
  *(_OWORD *)v15 = v17;
  *(_QWORD *)(v15 + 16) = v18;
  return result;
}

uint64_t type metadata accessor for MedicalIDEditFreeformTextModalView()
{
  uint64_t result;

  result = qword_25713D7F0;
  if (!qword_25713D7F0)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *sub_241639498(_QWORD *a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *v4 = *a2;
    v4[1] = v7;
    v8 = a2[3];
    v4[2] = a2[2];
    v4[3] = v8;
    v9 = a2[5];
    v4[4] = a2[4];
    v4[5] = v9;
    v10 = a2[7];
    v4[6] = a2[6];
    v4[7] = v10;
    v11 = a2[9];
    v4[8] = a2[8];
    v4[9] = v11;
    v4[10] = a2[10];
    v12 = a2[13];
    *(_OWORD *)(v4 + 11) = *(_OWORD *)(a2 + 11);
    v4[13] = v12;
    v13 = a2[15];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v13)
    {
      v4[14] = a2[14];
      v4[15] = v13;
      v14 = a2[17];
      v4[16] = a2[16];
      v4[17] = v14;
      v15 = a2[19];
      v4[18] = a2[18];
      v4[19] = v15;
      v4[20] = a2[20];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v17 = *((_OWORD *)a2 + 8);
      *((_OWORD *)v4 + 7) = *((_OWORD *)a2 + 7);
      *((_OWORD *)v4 + 8) = v17;
      *((_OWORD *)v4 + 9) = *((_OWORD *)a2 + 9);
      v4[20] = a2[20];
    }
    v4[21] = a2[21];
    v18 = a3[7];
    v19 = (_QWORD *)((char *)v4 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    sub_24163A150(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v21 = sub_2416BA06C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    }
    else
    {
      *v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v22 = a3[8];
    v23 = a3[9];
    v24 = (char *)v4 + v22;
    v25 = (uint64_t *)((char *)a2 + v22);
    v26 = *v25;
    LOBYTE(v25) = *((_BYTE *)v25 + 8);
    *(_QWORD *)v24 = v26;
    v24[8] = (char)v25;
    v27 = (_QWORD *)((char *)v4 + v23);
    v28 = (uint64_t *)((char *)a2 + v23);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v27[2] = v28[2];
    swift_retain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_2416396D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(a1 + 120))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  v4 = a1 + *(int *)(a2 + 28);
  sub_24163A150(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_2416397D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = v11;
  v12 = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v12)
  {
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v12;
    v13 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v13;
    v14 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = v14;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v15;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  }
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  sub_24163A150(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v19 = sub_2416BA06C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  else
  {
    *v17 = *v18;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v20 = a3[8];
  v21 = a3[9];
  v22 = a1 + v20;
  v23 = (uint64_t *)(a2 + v20);
  v24 = *v23;
  LOBYTE(v23) = *((_BYTE *)v23 + 8);
  *(_QWORD *)v22 = v24;
  *(_BYTE *)(v22 + 8) = (_BYTE)v23;
  v25 = (_QWORD *)(a1 + v21);
  v26 = (_QWORD *)(a2 + v21);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v25[2] = v26[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *sub_2416399E8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[13];
  a1[12] = a2[12];
  a1[13] = v6;
  swift_retain();
  swift_release();
  v7 = a1 + 14;
  v8 = (__int128 *)(a2 + 14);
  v9 = a2[15];
  if (a1[15])
  {
    if (v9)
    {
      a1[14] = a2[14];
      a1[15] = a2[15];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[16] = a2[16];
      a1[17] = a2[17];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[18] = a2[18];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[19] = a2[19];
      a1[20] = a2[20];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2415CCAC8((uint64_t)(a1 + 14));
      v11 = *((_OWORD *)a2 + 8);
      v10 = *((_OWORD *)a2 + 9);
      v12 = *v8;
      a1[20] = a2[20];
      *((_OWORD *)a1 + 8) = v11;
      *((_OWORD *)a1 + 9) = v10;
      *v7 = v12;
    }
  }
  else if (v9)
  {
    a1[14] = a2[14];
    a1[15] = a2[15];
    a1[16] = a2[16];
    a1[17] = a2[17];
    a1[18] = a2[18];
    a1[19] = a2[19];
    a1[20] = a2[20];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = *v8;
    v14 = *((_OWORD *)a2 + 8);
    v15 = *((_OWORD *)a2 + 9);
    a1[20] = a2[20];
    *((_OWORD *)a1 + 8) = v14;
    *((_OWORD *)a1 + 9) = v15;
    *v7 = v13;
  }
  a1[21] = a2[21];
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    v16 = a3[7];
    v17 = (_QWORD *)((char *)a1 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    sub_241639D38((uint64_t)a1 + v16);
    sub_24163A150(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v19 = sub_2416BA06C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    }
    else
    {
      *v17 = *v18;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v20 = a3[8];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)v22;
  LOBYTE(v22) = v22[8];
  *(_QWORD *)v21 = v23;
  v21[8] = (char)v22;
  swift_retain();
  swift_release();
  v24 = a3[9];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (char *)a2 + v24;
  *v25 = *(_QWORD *)((char *)a2 + v24);
  v25[1] = *(_QWORD *)((char *)a2 + v24 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25[2] = *((_QWORD *)v26 + 2);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_241639D38(uint64_t a1)
{
  uint64_t v2;

  sub_24163A150(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_241639D84(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;

  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[10];
  a1[9] = a2[9];
  a1[10] = v11;
  v12 = a2[8];
  a1[7] = v10;
  a1[8] = v12;
  v13 = a3[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  a1[6] = v9;
  sub_24163A150(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v17 = v16;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = sub_2416BA06C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v14, v15, v18);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  v19 = a3[8];
  v20 = a3[9];
  v21 = (char *)a1 + v19;
  v22 = (char *)a2 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = (char *)a1 + v20;
  v24 = (char *)a2 + v20;
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
  return a1;
}

uint64_t sub_241639EA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  if (*(_QWORD *)(a1 + 120))
  {
    v12 = *(_QWORD *)(a2 + 120);
    if (v12)
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v12;
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v13;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = v14;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_2415CCAC8(a1 + 112);
  }
  v15 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v15;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
LABEL_6:
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_release();
  if (a1 != a2)
  {
    v16 = a3[7];
    v17 = (void *)(a1 + v16);
    v18 = (const void *)(a2 + v16);
    sub_241639D38(a1 + v16);
    sub_24163A150(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v20 = v19;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v21 = sub_2416BA06C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v17, v18, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
  }
  v22 = a3[8];
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  LOBYTE(v24) = *((_BYTE *)v24 + 8);
  *(_QWORD *)v23 = v25;
  *(_BYTE *)(v23 + 8) = (_BYTE)v24;
  swift_release();
  v26 = a3[9];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  v27[2] = v28[2];
  swift_release();
  return a1;
}

uint64_t sub_24163A0B8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24163A0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_24163A150(0, qword_25713A930, MEMORY[0x24BDEB580]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

void sub_24163A150(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_2416BA06C();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_24163A1A8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24163A1B4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_24163A150(0, qword_25713A930, MEMORY[0x24BDEB580]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_24163A238()
{
  unint64_t v0;

  sub_24163A150(319, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_24163A2E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24163A2F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  int *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t (**v22)();
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t result;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v2 = v1;
  v4 = type metadata accessor for MedicalIDEditFreeformTextModalView();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + 8);
  v33 = *(_QWORD *)v2;
  sub_2415BEF64(v2, (uint64_t)v7, v9);
  v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v11 = swift_allocObject();
  sub_24163B1EC((uint64_t)v7, v11 + v10);
  v12 = *(_OWORD *)(v2 + 128);
  v35 = *(_OWORD *)(v2 + 112);
  v36 = v12;
  v13 = *(_OWORD *)(v2 + 160);
  v37 = *(_OWORD *)(v2 + 144);
  v38 = v13;
  sub_2415DE314();
  swift_bridgeObjectRetain();
  sub_2416BAD2C();
  v32 = v39;
  v31 = v40;
  v30 = v41;
  v29 = v42;
  v14 = v43;
  *a1 = swift_getKeyPath();
  sub_24163A150(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  sub_24163B2B0(0);
  v16 = v15;
  v17 = (uint64_t *)((char *)a1 + v15[9]);
  *v17 = v33;
  v17[1] = v8;
  v18 = (uint64_t *)((char *)a1 + v15[10]);
  *v18 = &unk_25713D840;
  v18[1] = v11;
  v19 = (char *)a1 + v15[11];
  v20 = v31;
  *(_OWORD *)v19 = v32;
  *((_OWORD *)v19 + 1) = v20;
  v21 = v29;
  *((_OWORD *)v19 + 2) = v30;
  *((_OWORD *)v19 + 3) = v21;
  *((_QWORD *)v19 + 8) = v14;
  v22 = (uint64_t (**)())((char *)a1 + v15[12]);
  sub_2415BEF64(v2, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditFreeformTextModalView);
  v23 = swift_allocObject();
  sub_24163B1EC((uint64_t)v7, v23 + v10);
  sub_2415BEF64(v2, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditFreeformTextModalView);
  v24 = swift_allocObject();
  sub_24163B1EC((uint64_t)v7, v24 + v10);
  sub_2415BEF64(v2, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditFreeformTextModalView);
  v25 = swift_allocObject();
  sub_24163B1EC((uint64_t)v7, v25 + v10);
  *v22 = sub_24163B644;
  v22[1] = (uint64_t (*)())v23;
  v22[2] = (uint64_t (*)())sub_24163B654;
  v22[3] = (uint64_t (*)())v24;
  v22[4] = sub_24163B7E0;
  v22[5] = (uint64_t (*)())v25;
  v26 = (char *)a1 + v16[13];
  v34 = 0;
  result = sub_2416BAD08();
  v28 = *((_QWORD *)&v35 + 1);
  *v26 = v35;
  *((_QWORD *)v26 + 1) = v28;
  return result;
}

uint64_t sub_24163A5C8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2415C2834;
  return sub_24163A610();
}

uint64_t sub_24163A610()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[17] = v0;
  v2 = sub_2416BA06C();
  v1[18] = v2;
  v1[19] = *(_QWORD *)(v2 - 8);
  v1[20] = swift_task_alloc();
  sub_2415A6FC4(0);
  v1[21] = swift_task_alloc();
  type metadata accessor for MedicalIDData();
  v1[22] = swift_task_alloc();
  v1[23] = type metadata accessor for MedicalIDEditFreeformTextModalView();
  v1[24] = swift_task_alloc();
  v1[25] = sub_2416BB290();
  v1[26] = sub_2416BB284();
  v1[27] = sub_2416BB254();
  v1[28] = v3;
  return swift_task_switch();
}

uint64_t sub_24163A70C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[24];
  v2 = v0[17];
  v3 = *(_BYTE *)(v2 + *(int *)(v0[23] + 32) + 8);
  v4 = swift_retain();
  v0[29] = sub_2415C0C54(v4, v3);
  swift_release();
  sub_2415BEF64(v2, v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditFreeformTextModalView);
  v0[30] = sub_2416BB284();
  v0[31] = sub_2416BB254();
  v0[32] = v5;
  return swift_task_switch();
}

uint64_t sub_24163A7C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD, uint64_t, uint64_t);
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = v0[29];
  v3 = v0[23];
  v2 = v0[24];
  v5 = v0[21];
  v4 = v0[22];
  swift_getKeyPath();
  v0[15] = v1;
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  v6 = v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_2415BEF64(v6, v5, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  LoadState<>.loadedValue.getter(v4);
  sub_2415A6154(v5, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  v7 = *(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 96);
  v8 = (uint64_t *)(v2 + *(int *)(v3 + 36));
  v10 = *v8;
  v9 = v8[1];
  v11 = v8[2];
  v0[2] = *v8;
  v0[3] = v9;
  v0[4] = v11;
  sub_24159D7F0(0, &qword_25713CF88, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v13 = v0[11];
  v12 = v0[12];
  swift_bridgeObjectRelease();
  v14 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v14 = v13 & 0xFFFFFFFFFFFFLL;
  if (v14)
  {
    v0[8] = v10;
    v0[9] = v9;
    v0[10] = v11;
    sub_2416BAD14();
    v15 = v0[13];
    v16 = v0[14];
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  v7(v0[22], v15, v16);
  swift_bridgeObjectRelease();
  v17 = (_QWORD *)swift_task_alloc();
  v0[33] = v17;
  *v17 = v0;
  v17[1] = sub_24163A9A4;
  return sub_24167239C(v0[22], (uint64_t)(v0 + 16));
}

uint64_t sub_24163A9A4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24163AA04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 176);
  swift_release();
  sub_2415A6154(v2, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  sub_2415A6154(v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditFreeformTextModalView);
  swift_release();
  return swift_task_switch();
}

uint64_t sub_24163AA74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  swift_release();
  sub_2415C0E10(v1);
  sub_2416BA060();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24163AB18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[24];
  v2 = v0[22];
  swift_release();
  sub_2415A6154(v2, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  v0[34] = v0[16];
  sub_2415A6154(v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditFreeformTextModalView);
  swift_release();
  return swift_task_switch();
}

uint64_t sub_24163AB90()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 272);
  swift_release();
  sub_2415CF224();
  swift_allocError();
  *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_24163AC28(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21 = a2;
  sub_24163B3FC();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24163B4BC(0, &qword_25713D858, v8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v21 - v10;
  v12 = a1[3];
  v24 = a1[2];
  v25 = v12;
  v13 = (char *)a1 + *(int *)(type metadata accessor for MedicalIDEditFreeformTextModalView() + 36);
  v14 = *(_OWORD *)v13;
  v15 = *((_QWORD *)v13 + 2);
  v22 = v14;
  v23 = v15;
  v16 = MEMORY[0x24BEE0D00];
  sub_24159D7F0(0, &qword_25713CF88, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  swift_bridgeObjectRetain();
  sub_2416BAD2C();
  sub_2415C343C();
  sub_2416BAF90();
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, v16, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_2416BCC80;
  v18 = a1[11];
  *(_QWORD *)(v17 + 32) = a1[10];
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = 0x6C65694674786554;
  *(_QWORD *)(v17 + 56) = 0xE900000000000064;
  swift_bridgeObjectRetain();
  v19 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v20 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v20)
  {
    sub_2416BB128();

    sub_24163B520();
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_24163B840((uint64_t)v11, v21, &qword_25713D858, (void (*)(uint64_t))sub_24163B3FC);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24163AE84@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[10];
  v6 = a1[11];
  *a2 = a1[2];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void sub_24163AEC8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  sub_24163B4BC(0, (unint64_t *)&qword_25713B778, (void (*)(uint64_t))sub_2415EF7CC);
  v5 = MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  if (a1[9])
  {
    v33 = (uint64_t)&v32 - v7;
    v35 = v9;
    v38 = v8;
    v39 = v6;
    v40 = a2;
    swift_bridgeObjectRetain();
    sub_2416BA4C8();
    v10 = sub_2416BA9CC();
    v12 = v11;
    v14 = v13 & 1;
    sub_2416BA8F4();
    v15 = sub_2416BA9C0();
    v17 = v16;
    v19 = v18;
    v21 = v20;
    swift_release();
    sub_2415A431C(v10, v12, v14);
    swift_bridgeObjectRelease();
    KeyPath = swift_getKeyPath();
    v36 = v15;
    v37 = v21;
    v41 = v15;
    v42 = v17;
    v34 = v17;
    v23 = v19 & 1;
    v43 = v23;
    v44 = v21;
    v45 = KeyPath;
    v46 = 0;
    sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_2416BCC80;
    v25 = a1[11];
    *(_QWORD *)(v24 + 32) = a1[10];
    *(_QWORD *)(v24 + 40) = v25;
    *(_QWORD *)(v24 + 48) = 0x7265746F6F46;
    *(_QWORD *)(v24 + 56) = 0xE600000000000000;
    swift_bridgeObjectRetain();
    v26 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    v27 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v27)
    {
      sub_2416BB128();

      sub_2415EF7CC();
      sub_2415F1DD8();
      v28 = v35;
      sub_2416BAB1C();
      swift_bridgeObjectRelease();
      sub_2415A431C(v36, v34, v23);
      swift_release();
      swift_bridgeObjectRelease();
      v29 = v33;
      sub_24163B840(v28, v33, (unint64_t *)&qword_25713B778, (void (*)(uint64_t))sub_2415EF7CC);
      v30 = v29;
      v31 = v40;
      sub_24163B840(v30, v40, (unint64_t *)&qword_25713B778, (void (*)(uint64_t))sub_2415EF7CC);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v31, 0, 1, v39);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, 1, 1);
  }
}

uint64_t sub_24163B1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MedicalIDEditFreeformTextModalView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24163B230()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  type metadata accessor for MedicalIDEditFreeformTextModalView();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2415C2834;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_2415C2834;
  return sub_24163A610();
}

void sub_24163B2B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_25713D848)
  {
    v2 = sub_24163B328();
    v3 = sub_24159CE88(&qword_25713D878, (uint64_t (*)(uint64_t))sub_24163B328, (uint64_t)&unk_2416BFFF0);
    v5 = type metadata accessor for MedicalIDEditModal(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25713D848);
  }
}

uint64_t sub_24163B328()
{
  uint64_t result;

  result = qword_25713D850;
  if (!qword_25713D850)
  {
    sub_24163B4BC(255, &qword_25713D858, (void (*)(uint64_t))sub_24163B3FC);
    sub_24163B458();
    sub_24163B5BC(&qword_25713D860, &qword_25713D858, (void (*)(uint64_t))sub_24163B3FC, sub_24163B520);
    sub_2415DFB54();
    sub_24163B53C();
    type metadata accessor for EditingScrollView();
  }
  return result;
}

void sub_24163B3FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713CC98)
  {
    v0 = sub_2416BAF9C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713CC98);
  }
}

void sub_24163B458()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B770)
  {
    sub_24163B4BC(255, (unint64_t *)&qword_25713B778, (void (*)(uint64_t))sub_2415EF7CC);
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B770);
  }
}

void sub_24163B4BC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    sub_2416BA768();
    v4 = sub_2416BA150();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_24163B520()
{
  return sub_24159CE88(&qword_25713CCA0, (uint64_t (*)(uint64_t))sub_24163B3FC, MEMORY[0x24BDF53E0]);
}

unint64_t sub_24163B53C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_25713D868;
  if (!qword_25713D868)
  {
    sub_24163B458();
    v2 = v1;
    v3 = sub_24163B5BC((unint64_t *)&qword_25713D870, (unint64_t *)&qword_25713B778, (void (*)(uint64_t))sub_2415EF7CC, (uint64_t (*)(void))sub_2415F1DD8);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5578], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713D868);
  }
  return result;
}

uint64_t sub_24163B5BC(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    sub_24163B4BC(255, a2, a3);
    v8 = v7;
    v9[0] = a4();
    v9[1] = sub_24159CE88(&qword_257139D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24163B644()
{
  return sub_24163B7EC((uint64_t (*)(uint64_t))sub_24163AC28);
}

uint64_t sub_24163B654@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDEditFreeformTextModalView() - 8) + 80);
  return sub_24163AE84((_QWORD *)(v1 + ((v3 + 16) & ~v3)), a1);
}

uint64_t objectdestroyTm_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for MedicalIDEditFreeformTextModalView();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(v3 + 120))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  v4 = v3 + *(int *)(v1 + 28);
  sub_24163A150(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24163B7E0()
{
  return sub_24163B7EC((uint64_t (*)(uint64_t))sub_24163AEC8);
}

uint64_t sub_24163B7EC(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDEditFreeformTextModalView() - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_24163B840(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_24163B4BC(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t destroy for MedicalIDEditFreeformTextConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MedicalIDEditFreeformTextConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MedicalIDEditFreeformTextConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

_QWORD *assignWithTake for MedicalIDEditFreeformTextConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDEditFreeformTextConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDEditFreeformTextConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDEditFreeformTextConfiguration()
{
  return &type metadata for MedicalIDEditFreeformTextConfiguration;
}

uint64_t sub_24163BBA4()
{
  return sub_24159CE88(&qword_25713D888, (uint64_t (*)(uint64_t))sub_24163B2B0, (uint64_t)&unk_2416BFE00);
}

uint64_t *sub_24163BBD0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  sub_2415F630C();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_2416BA06C();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_24163BC94(uint64_t a1)
{
  uint64_t v2;

  sub_2415F630C();
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v2 = sub_2416BA06C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

_QWORD *sub_24163BCF4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  sub_2415F630C();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_2416BA06C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *sub_24163BD8C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    sub_2415A6154((uint64_t)a1, (uint64_t (*)(_QWORD))sub_2415F630C);
    sub_2415F630C();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = sub_2416BA06C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_24163BE3C(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_2415F630C();
  v5 = v4;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_2416BA06C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  return a1;
}

void *sub_24163BED0(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    sub_2415A6154((uint64_t)a1, (uint64_t (*)(_QWORD))sub_2415F630C);
    sub_2415F630C();
    v5 = v4;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_2416BA06C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_24163BF7C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24163BF88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_24163BFDC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24163BFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MedicalIDLearnMoreNavigationView()
{
  uint64_t result;

  result = qword_25713D900;
  if (!qword_25713D900)
    return swift_getSingletonMetadata();
  return result;
}

void sub_24163C07C()
{
  unint64_t v0;

  sub_2415F630C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_24163C0E4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24163C0F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t OpaqueTypeConformance2;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v53 = a1;
  v1 = sub_2416BA450();
  v54 = *(_QWORD *)(v1 - 8);
  v55 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v52 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_2416BA600();
  v44 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24163D8F4();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24163DC38(0, &qword_25713D9B8, v11, sub_24163DCB8, MEMORY[0x24BDF2DC8]);
  v13 = v12;
  v43 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v43 - v14;
  sub_24163DCD4(0);
  v17 = v16;
  v46 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24163DDB4(0);
  v47 = *(_QWORD *)(v20 - 8);
  v48 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v45 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24163DEB8(0);
  v50 = *(_QWORD *)(v22 - 8);
  v51 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v49 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24163D970();
  sub_24163DB68();
  sub_2416BA954();
  v24 = sub_24163DCB8();
  sub_2416BAAF8();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_2416BA5F4();
  v56 = v7;
  v57 = v24;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v26 = MEMORY[0x24BDEF958];
  sub_2416BAC00();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v13);
  if (qword_257139510 != -1)
    swift_once();
  v56 = v13;
  v57 = v3;
  v58 = OpaqueTypeConformance2;
  v59 = v26;
  v27 = swift_getOpaqueTypeConformance2();
  v28 = v45;
  sub_2416BAA38();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v17);
  sub_2416BA4C8();
  if (qword_257139300 != -1)
    swift_once();
  v29 = (id)qword_25713A038;
  v30 = sub_2416BA9CC();
  v32 = v31;
  v34 = v33 & 1;
  v56 = v17;
  v57 = v27;
  v35 = swift_getOpaqueTypeConformance2();
  v37 = v48;
  v36 = v49;
  sub_2416BAAB0();
  sub_2415A431C(v30, v32, v34);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v28, v37);
  v39 = v54;
  v38 = v55;
  v40 = v52;
  (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v52, *MEMORY[0x24BDEE5F0], v55);
  v56 = v37;
  v57 = v35;
  swift_getOpaqueTypeConformance2();
  v41 = v51;
  sub_2416BAB4C();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v36, v41);
}

double sub_24163C5DC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double result;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[9];
  _BYTE v12[151];
  char v13;

  if (qword_257139508 != -1)
    swift_once();
  v2 = qword_25713D890;
  v3 = sub_2416BA510();
  sub_24163C748((uint64_t)v11);
  *(_OWORD *)&v12[87] = v11[5];
  *(_OWORD *)&v12[103] = v11[6];
  *(_OWORD *)&v12[119] = v11[7];
  *(_OWORD *)&v12[135] = v11[8];
  *(_OWORD *)&v12[23] = v11[1];
  *(_OWORD *)&v12[39] = v11[2];
  *(_OWORD *)&v12[55] = v11[3];
  *(_OWORD *)&v12[71] = v11[4];
  v13 = 0;
  *(_OWORD *)&v12[7] = v11[0];
  if (qword_257139518 != -1)
    swift_once();
  v4 = *(_OWORD *)&v12[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v12[96];
  *(_OWORD *)(a1 + 129) = v4;
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v12[128];
  v5 = *(_OWORD *)&v12[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v12[32];
  *(_OWORD *)(a1 + 65) = v5;
  v6 = *(_OWORD *)&v12[80];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v12[64];
  *(_OWORD *)(a1 + 97) = v6;
  result = *(double *)v12;
  v8 = *(_OWORD *)&v12[16];
  *(_OWORD *)(a1 + 17) = *(_OWORD *)v12;
  v9 = qword_25713D8A0;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 0;
  v10 = *(_QWORD *)&v12[143];
  *(_OWORD *)(a1 + 33) = v8;
  *(_QWORD *)(a1 + 160) = v10;
  *(_QWORD *)(a1 + 168) = v9;
  *(_QWORD *)(a1 + 176) = v9;
  *(_QWORD *)(a1 + 184) = v9;
  *(_QWORD *)(a1 + 192) = v9;
  *(_BYTE *)(a1 + 200) = 0;
  return result;
}

uint64_t sub_24163C748@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;

  v16 = sub_2416BA51C();
  sub_24163C89C((uint64_t)&v17);
  v2 = v19;
  v14 = v18;
  v15 = v17;
  v3 = v20;
  v4 = v21;
  v5 = v22;
  v13 = sub_2416BA51C();
  sub_24163CAF4((uint64_t)&v17);
  v6 = v17;
  v7 = v18;
  v8 = v19;
  v9 = v20;
  v10 = v21;
  v11 = v22;
  LOBYTE(v17) = 0;
  v25 = v4;
  v24 = 0;
  v23 = v21;
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v15;
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 48) = v3;
  *(_BYTE *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = v9;
  *(_BYTE *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 136) = v11;
  swift_bridgeObjectRetain();
  sub_2415A43C8(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2415A43C8(v8, v9, v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_2415A431C(v8, v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2415A431C(v2, v3, v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24163C89C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v2 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v2);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v3 = (void *)qword_25713A038;
  v4 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v4);
  v5 = v3;
  sub_2416B9C04();
  v6 = sub_2416BB134();
  v8 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = sub_2416BB098();
  MEMORY[0x24BDAC7A8](v9);
  v10 = v5;
  sub_2416B9C04();
  sub_2416BB134();
  sub_2415C343C();
  v11 = sub_2416BA9D8();
  v13 = v12;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  LOBYTE(v6) = v14 & 1;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v12;
  *(_BYTE *)(a1 + 32) = v14 & 1;
  *(_QWORD *)(a1 + 40) = v15;
  swift_bridgeObjectRetain();
  sub_2415A43C8(v11, v13, v6);
  swift_bridgeObjectRetain();
  sub_2415A431C(v11, v13, v6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24163CAF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD v18[4];

  v2 = sub_2416BB0EC();
  v18[0] = v18;
  MEMORY[0x24BDAC7A8](v2);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v3 = (void *)qword_25713A038;
  v4 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v4);
  v5 = v3;
  sub_2416B9C04();
  v6 = sub_2416BB134();
  v8 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = sub_2416BB098();
  MEMORY[0x24BDAC7A8](v9);
  v10 = v5;
  sub_2416B9C04();
  v18[1] = sub_2416BB134();
  v18[2] = v11;
  sub_2415C343C();
  v12 = sub_2416BA9D8();
  v14 = v13;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  LOBYTE(v6) = v15 & 1;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v13;
  *(_BYTE *)(a1 + 32) = v15 & 1;
  *(_QWORD *)(a1 + 40) = v16;
  swift_bridgeObjectRetain();
  sub_2415A43C8(v12, v14, v6);
  swift_bridgeObjectRetain();
  sub_2415A431C(v12, v14, v6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24163CD58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a3;
  sub_2415EF990(0);
  v40 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v39 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2415EF9AC(0);
  MEMORY[0x24BDAC7A8](v7);
  v38 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a1;
  v43 = a2;
  sub_2415C343C();
  swift_bridgeObjectRetain();
  v9 = sub_2416BA9D8();
  v11 = v10;
  v13 = v12 & 1;
  v14 = sub_2416BA9B4();
  v16 = v15;
  v18 = v17 & 1;
  sub_2415A431C(v9, v11, v13);
  swift_bridgeObjectRelease();
  sub_2416BA8AC();
  v19 = sub_2416BA9C0();
  v21 = v20;
  LOBYTE(v11) = v22;
  swift_release();
  LOBYTE(v9) = v11 & 1;
  sub_2415A431C(v14, v16, v18);
  swift_bridgeObjectRelease();
  sub_2416BAC60();
  v23 = sub_2416BA984();
  v25 = v24;
  v27 = v26;
  v29 = v28;
  swift_release();
  sub_2415A431C(v19, v21, v9);
  swift_bridgeObjectRelease();
  v30 = sub_2416BA9A8();
  v31 = (uint64_t)v38;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v38, 1, 1, v30);
  KeyPath = swift_getKeyPath();
  v33 = v39;
  sub_2415BEF64(v31, (uint64_t)v39 + *(int *)(v40 + 28), (uint64_t (*)(_QWORD))sub_2415EF9AC);
  *v33 = KeyPath;
  sub_2415EF934();
  v35 = v41;
  sub_2415BEF64((uint64_t)v33, v41 + *(int *)(v34 + 36), (uint64_t (*)(_QWORD))sub_2415EF990);
  *(_QWORD *)v35 = v23;
  *(_QWORD *)(v35 + 8) = v25;
  *(_BYTE *)(v35 + 16) = v27 & 1;
  *(_QWORD *)(v35 + 24) = v29;
  sub_2415A43C8(v23, v25, v27 & 1);
  swift_bridgeObjectRetain();
  sub_2415A6154((uint64_t)v33, (uint64_t (*)(_QWORD))sub_2415EF990);
  sub_2415A6154(v31, (uint64_t (*)(_QWORD))sub_2415EF9AC);
  sub_2415A431C(v23, v25, v27 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24163CFF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_24163CD58(*v1, v1[1], a1);
}

uint64_t sub_24163D000()
{
  sub_24163DC38(0, (unint64_t *)&qword_25713B4C8, (uint64_t (*)(uint64_t))sub_2415E88A8, sub_24163D708, MEMORY[0x24BDEFA90]);
  sub_24163D724();
  sub_2415E88A8();
  sub_24163D708();
  swift_getOpaqueTypeConformance2();
  return sub_2416BABAC();
}

uint64_t sub_24163D0BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v10[16];
  uint64_t v11;

  v2 = sub_2416BA5E8();
  MEMORY[0x24BDAC7A8](v2);
  sub_2415E88A8();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2416BA5D0();
  v11 = a1;
  sub_241609510();
  sub_24159CE88((unint64_t *)&qword_25713B4E0, (uint64_t (*)(uint64_t))sub_241609510, MEMORY[0x24BDF43B0]);
  sub_2416B9FE8();
  v8 = sub_24163D708();
  MEMORY[0x242697E0C](v7, v4, v8);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_24163D1DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v2 = type metadata accessor for MedicalIDLearnMoreNavigationView();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v5);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v6 = (void *)qword_25713A038;
  v7 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v7);
  v8 = v6;
  sub_2416B9C04();
  v13[1] = sub_2416BB134();
  v13[2] = v9;
  sub_2415BEF64(a1, (uint64_t)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDLearnMoreNavigationView);
  v10 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v11 = swift_allocObject();
  sub_2415F6360((uint64_t)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  sub_2415C343C();
  return sub_2416BAD68();
}

uint64_t sub_24163D3B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  ValueMetadata *v9;
  ValueMetadata *v10;
  uint64_t v11;
  uint64_t OpaqueTypeConformance2;
  _BYTE v14[16];
  uint64_t v15;
  ValueMetadata *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  sub_24163D520();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = v0;
  sub_24163D62C(0);
  sub_24163DC38(255, (unint64_t *)&qword_25713B4C8, (uint64_t (*)(uint64_t))sub_2415E88A8, sub_24163D708, MEMORY[0x24BDEFA90]);
  v7 = v6;
  v8 = sub_24163D724();
  sub_2415E88A8();
  v10 = v9;
  v11 = sub_24163D708();
  v16 = v10;
  v17 = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v16 = &type metadata for MedicalIDLearnMoreView;
  v17 = v7;
  v18 = v8;
  v19 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  sub_2416BA15C();
  sub_24159CE88(&qword_25713D950, (uint64_t (*)(uint64_t))sub_24163D520, MEMORY[0x24BDED358]);
  sub_2416BAAF8();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_24163D520()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D938)
  {
    sub_2416BA108();
    sub_24163D62C(255);
    sub_24163DC38(255, (unint64_t *)&qword_25713B4C8, (uint64_t (*)(uint64_t))sub_2415E88A8, sub_24163D708, MEMORY[0x24BDEFA90]);
    sub_24163D724();
    sub_2415E88A8();
    sub_24163D708();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v0 = sub_2416BA168();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D938);
  }
}

void sub_24163D62C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_25713D940)
  {
    sub_24163DC38(255, (unint64_t *)&qword_25713B4C8, (uint64_t (*)(uint64_t))sub_2415E88A8, sub_24163D708, MEMORY[0x24BDEFA90]);
    v3 = v2;
    v4 = sub_24163D724();
    sub_2415E88A8();
    sub_24163D708();
    v7[0] = &type metadata for MedicalIDLearnMoreView;
    v7[1] = v3;
    v7[2] = v4;
    v7[3] = swift_getOpaqueTypeConformance2();
    v5 = MEMORY[0x242699480](a1, v7, MEMORY[0x24BDF3858], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25713D940);
  }
}

uint64_t sub_24163D708()
{
  return sub_24159CE88(&qword_25713B4E8, (uint64_t (*)(uint64_t))sub_2415E88A8, MEMORY[0x24BDEB848]);
}

unint64_t sub_24163D724()
{
  unint64_t result;

  result = qword_25713D948;
  if (!qword_25713D948)
  {
    result = MEMORY[0x2426994BC](&unk_2416C0798, &type metadata for MedicalIDLearnMoreView);
    atomic_store(result, (unint64_t *)&qword_25713D948);
  }
  return result;
}

uint64_t sub_24163D768()
{
  return sub_24163D000();
}

uint64_t sub_24163D770()
{
  uint64_t v0;

  return sub_24163D0BC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_24163D778()
{
  uint64_t v0;

  return sub_24163D1DC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_24163D780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDLearnMoreNavigationView() - 8) + 80);
  sub_2415F630C();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0 + ((v1 + 16) & ~v1), v2);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_24163D818()
{
  type metadata accessor for MedicalIDLearnMoreNavigationView();
  return sub_24161DC3C();
}

void sub_24163D844()
{
  qword_25713D890 = 0x4034000000000000;
}

void sub_24163D854()
{
  qword_25713D898 = 0x4034000000000000;
}

void sub_24163D864()
{
  qword_25713D8A0 = 0x4030000000000000;
}

ValueMetadata *type metadata accessor for MedicalIDLearnMoreView()
{
  return &type metadata for MedicalIDLearnMoreView;
}

uint64_t sub_24163D884()
{
  sub_24163D520();
  sub_24159CE88(&qword_25713D950, (uint64_t (*)(uint64_t))sub_24163D520, MEMORY[0x24BDED358]);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24163D8E4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_24163D8F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D958)
  {
    sub_24163D970();
    sub_24163DB68();
    v0 = sub_2416BA960();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D958);
  }
}

void sub_24163D970()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713D960)
  {
    sub_24159EF1C(255, &qword_25713D968, (uint64_t (*)(uint64_t))sub_24163DA14, sub_24163DB4C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF46E0]);
    sub_24159EF1C(255, &qword_25713AFD8, MEMORY[0x24BDEF980], sub_2415DF398, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEFB28]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713D960);
  }
}

void sub_24163DA14(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713D970, (uint64_t (*)(uint64_t))sub_24163DA30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_24163DA30()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713D978)
  {
    sub_24159EF1C(255, &qword_25713D980, (uint64_t (*)(uint64_t))sub_24163DAB0, sub_24163DB30, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF46E0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713D978);
  }
}

void sub_24163DAB0(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713D988, (uint64_t (*)(uint64_t))sub_24163DACC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_24163DACC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713D990)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713D990);
  }
}

uint64_t sub_24163DB30()
{
  return sub_24159CE88(&qword_25713D998, (uint64_t (*)(uint64_t))sub_24163DAB0, MEMORY[0x24BDF5428]);
}

uint64_t sub_24163DB4C()
{
  return sub_24159CE88(&qword_25713D9A0, (uint64_t (*)(uint64_t))sub_24163DA14, MEMORY[0x24BDF5428]);
}

unint64_t sub_24163DB68()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713D9A8;
  if (!qword_25713D9A8)
  {
    sub_24163D970();
    v2 = v1;
    v3[0] = sub_24163DBD0();
    v3[1] = sub_2415DFEFC();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713D9A8);
  }
  return result;
}

unint64_t sub_24163DBD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713D9B0;
  if (!qword_25713D9B0)
  {
    sub_24159EF1C(255, &qword_25713D968, (uint64_t (*)(uint64_t))sub_24163DA14, sub_24163DB4C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF46E0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF4700], v1);
    atomic_store(result, (unint64_t *)&qword_25713D9B0);
  }
  return result;
}

void sub_24163DC38(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  if (!*a2)
  {
    v11[0] = a3(255);
    v11[1] = a4();
    v9 = MEMORY[0x242699480](a1, v11, a5, 0);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_24163DCB8()
{
  return sub_24159CE88(&qword_25713D9C0, (uint64_t (*)(uint64_t))sub_24163D8F4, MEMORY[0x24BDF1A30]);
}

void sub_24163DCD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_25713D9C8)
  {
    sub_24163DC38(255, &qword_25713D9B8, (uint64_t (*)(uint64_t))sub_24163D8F4, sub_24163DCB8, MEMORY[0x24BDF2DC8]);
    v3 = v2;
    v4 = sub_2416BA600();
    sub_24163D8F4();
    sub_24163DCB8();
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = swift_getOpaqueTypeConformance2();
    v7[3] = MEMORY[0x24BDEF958];
    v5 = MEMORY[0x242699480](a1, v7, MEMORY[0x24BDF3A80], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25713D9C8);
  }
}

void sub_24163DDB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_25713D9D0)
  {
    sub_24163DCD4(255);
    v3 = v2;
    sub_24163DC38(255, &qword_25713D9B8, (uint64_t (*)(uint64_t))sub_24163D8F4, sub_24163DCB8, MEMORY[0x24BDF2DC8]);
    sub_2416BA600();
    sub_24163D8F4();
    sub_24163DCB8();
    v6[2] = swift_getOpaqueTypeConformance2();
    v6[3] = MEMORY[0x24BDEF958];
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x242699480](a1, v6, MEMORY[0x24BDF23A8], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_25713D9D0);
  }
}

void sub_24163DEB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_25713D9D8)
  {
    sub_24163DDB4(255);
    v3 = v2;
    sub_24163DCD4(255);
    sub_24163DC38(255, &qword_25713D9B8, (uint64_t (*)(uint64_t))sub_24163D8F4, sub_24163DCB8, MEMORY[0x24BDF2DC8]);
    sub_2416BA600();
    sub_24163D8F4();
    sub_24163DCB8();
    v6[2] = swift_getOpaqueTypeConformance2();
    v6[3] = MEMORY[0x24BDEF958];
    swift_getOpaqueTypeConformance2();
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x242699480](a1, v6, MEMORY[0x24BDF2898], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_25713D9D8);
  }
}

ValueMetadata *type metadata accessor for LearnMoreHeaderView()
{
  return &type metadata for LearnMoreHeaderView;
}

uint64_t sub_24163DFF8()
{
  sub_24163DEB8(255);
  sub_24163DDB4(255);
  sub_24163DCD4(255);
  sub_24163DC38(255, &qword_25713D9B8, (uint64_t (*)(uint64_t))sub_24163D8F4, sub_24163DCB8, MEMORY[0x24BDF2DC8]);
  sub_2416BA600();
  sub_24163D8F4();
  sub_24163DCB8();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24163E120()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_24163E13C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_25713B7E8;
  if (!qword_25713B7E8)
  {
    sub_2415EF934();
    v2 = v1;
    v3 = sub_24159CE88(&qword_25713B7F0, (uint64_t (*)(uint64_t))sub_2415EF990, MEMORY[0x24BDF1028]);
    v4[0] = MEMORY[0x24BDF1F80];
    v4[1] = v3;
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713B7E8);
  }
  return result;
}

_QWORD *sub_24163E1BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  void *v79;
  id v80;
  int *v82;
  void *v83;
  char *__dst;
  _QWORD *v86;
  _QWORD *v87;
  void *v88;
  uint64_t v89;
  int *v90;
  unsigned int (*v91)(char *, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    v26 = (_QWORD *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v82 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
    v7 = v82[5];
    v86 = a2;
    v87 = a1;
    v8 = (_QWORD *)((char *)a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = *(_QWORD *)((char *)a2 + v7 + 8);
    *v8 = *(_QWORD *)((char *)a2 + v7);
    v8[1] = v10;
    v12 = *(_QWORD *)((char *)a2 + v7 + 16);
    v11 = *(_QWORD *)((char *)a2 + v7 + 24);
    v8[2] = v12;
    v8[3] = v11;
    v13 = *((_QWORD *)v9 + 5);
    v8[4] = *((_QWORD *)v9 + 4);
    v8[5] = v13;
    v14 = *((_QWORD *)v9 + 7);
    v8[6] = *((_QWORD *)v9 + 6);
    v8[7] = v14;
    v15 = *((_QWORD *)v9 + 9);
    v8[8] = *((_QWORD *)v9 + 8);
    v8[9] = v15;
    v16 = *((_QWORD *)v9 + 11);
    v8[10] = *((_QWORD *)v9 + 10);
    v8[11] = v16;
    v83 = (void *)*((_QWORD *)v9 + 12);
    v88 = (void *)*((_QWORD *)v9 + 13);
    v8[12] = v83;
    v8[13] = v88;
    v90 = (int *)type metadata accessor for MedicalIDData();
    v17 = v90[13];
    __dst = (char *)v8 + v17;
    v18 = &v9[v17];
    v19 = sub_2416B9B50();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = v83;
    v23 = v88;
    v91 = v21;
    v89 = v20;
    if (v21(v18, 1, v19))
    {
      sub_2415A0A74(0);
      memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    v27 = v90[14];
    v28 = (char *)v8 + v27;
    v29 = &v9[v27];
    v26 = v87;
    if (v21(&v9[v27], 1, v19))
    {
      sub_2415A0A74(0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v28, v29, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v28, 0, 1, v19);
    }
    v31 = v90[15];
    v32 = (_QWORD *)((char *)v8 + v31);
    v33 = &v9[v31];
    v34 = *((_QWORD *)v33 + 1);
    *v32 = *(_QWORD *)v33;
    v32[1] = v34;
    v35 = v90[16];
    v36 = (_QWORD *)((char *)v8 + v35);
    v37 = &v9[v35];
    v38 = *((_QWORD *)v37 + 1);
    *v36 = *(_QWORD *)v37;
    v36[1] = v38;
    *((_BYTE *)v8 + v90[17]) = v9[v90[17]];
    *((_BYTE *)v8 + v90[18]) = v9[v90[18]];
    v39 = v90[19];
    v40 = (char *)v8 + v39;
    v41 = (uint64_t *)&v9[v39];
    v42 = *(_QWORD *)&v9[v39 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v42 >> 60 == 15)
    {
      *(_OWORD *)v40 = *(_OWORD *)v41;
    }
    else
    {
      v43 = *v41;
      sub_2415A0A90(*v41, v42);
      *(_QWORD *)v40 = v43;
      *((_QWORD *)v40 + 1) = v42;
    }
    v44 = v90[20];
    v45 = (char *)v8 + v44;
    v46 = &v9[v44];
    v47 = sub_2416B9A18();
    v48 = *(_QWORD *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    v50 = v90[21];
    v51 = *(void **)&v9[v50];
    *(_QWORD *)((char *)v8 + v50) = v51;
    v52 = v90[22];
    v53 = (char *)v8 + v52;
    v54 = &v9[v52];
    v55 = v51;
    if (v91(v54, 1, v19))
    {
      sub_2415A0A74(0);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      v57 = v89;
    }
    else
    {
      v58 = v54;
      v57 = v89;
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v53, v58, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v53, 0, 1, v19);
    }
    v59 = v82[6];
    v60 = (char *)v87 + v59;
    v61 = (char *)v86 + v59;
    v62 = sub_2416B9C70();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
    v63 = v82[7];
    v64 = (char *)v87 + v63;
    v65 = (char *)v86 + v63;
    v66 = sub_2416B9C10();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
    *(_QWORD *)((char *)v87 + v82[8]) = *(_QWORD *)((char *)v86 + v82[8]);
    v67 = v82[9];
    v68 = (char *)v87 + v67;
    v69 = (char *)v86 + v67;
    swift_retain();
    if (v91(v69, 1, v19))
    {
      sub_2415A0A74(0);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v68, v69, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v68, 0, 1, v19);
    }
    v71 = *(int *)(a3 + 20);
    v72 = *(int *)(a3 + 24);
    v73 = (_QWORD *)((char *)v87 + v71);
    v74 = (_QWORD *)((char *)v86 + v71);
    v75 = v74[1];
    *v73 = *v74;
    v73[1] = v75;
    v76 = (_QWORD *)((char *)v87 + v72);
    v77 = (char *)v86 + v72;
    v79 = *(void **)v77;
    v78 = *((_QWORD *)v77 + 1);
    *v76 = v79;
    v76[1] = v78;
    swift_retain();
    v80 = v79;
  }
  return v26;
}

void sub_24163E6C4(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  swift_bridgeObjectRelease();
  v3 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v4 = a1 + v3[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = v4 + v5[13];
  v7 = sub_2416B9B50();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v10 = v4 + v5[14];
  if (!v9(v10, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)(v4 + v5[19]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_2415A0DAC(*v11, v12);
  v13 = v4 + v5[20];
  v14 = sub_2416B9A18();
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);

  v16 = v4 + v5[22];
  if (!v9(v16, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v16, v7);
  v17 = a1 + v3[6];
  v18 = sub_2416B9C70();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + v3[7];
  v20 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  swift_release();
  v21 = a1 + v3[9];
  if (!v9(v21, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v21, v7);
  swift_release();

}

_QWORD *sub_24163E934(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  void *v76;
  id v77;
  int *v79;
  _QWORD *v80;
  void *v81;
  char *__dst;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  int *v87;
  unsigned int (*v88)(char *, uint64_t, uint64_t);

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v79 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v80 = a1;
  v6 = v79[5];
  v7 = (_QWORD *)((char *)a1 + v6);
  v84 = a2;
  v8 = (char *)a2 + v6;
  v9 = *(_QWORD *)((char *)a2 + v6 + 8);
  *v7 = *(_QWORD *)((char *)a2 + v6);
  v7[1] = v9;
  v11 = *(_QWORD *)((char *)a2 + v6 + 16);
  v10 = *(_QWORD *)((char *)a2 + v6 + 24);
  v7[2] = v11;
  v7[3] = v10;
  v12 = *((_QWORD *)v8 + 5);
  v7[4] = *((_QWORD *)v8 + 4);
  v7[5] = v12;
  v13 = *((_QWORD *)v8 + 7);
  v7[6] = *((_QWORD *)v8 + 6);
  v7[7] = v13;
  v14 = *((_QWORD *)v8 + 9);
  v7[8] = *((_QWORD *)v8 + 8);
  v7[9] = v14;
  v15 = *((_QWORD *)v8 + 11);
  v7[10] = *((_QWORD *)v8 + 10);
  v7[11] = v15;
  v81 = (void *)*((_QWORD *)v8 + 12);
  v85 = (void *)*((_QWORD *)v8 + 13);
  v7[12] = v81;
  v7[13] = v85;
  v87 = (int *)type metadata accessor for MedicalIDData();
  v16 = v87[13];
  __dst = (char *)v7 + v16;
  v17 = &v8[v16];
  v18 = sub_2416B9B50();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v81;
  v22 = v85;
  v88 = v20;
  v86 = v19;
  if (v20(v17, 1, v18))
  {
    sub_2415A0A74(0);
    memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(__dst, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
  }
  v24 = v87[14];
  v25 = (char *)v7 + v24;
  v26 = &v8[v24];
  if (v20(&v8[v24], 1, v18))
  {
    sub_2415A0A74(0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
  }
  v28 = v87[15];
  v29 = (_QWORD *)((char *)v7 + v28);
  v30 = &v8[v28];
  v31 = *((_QWORD *)v30 + 1);
  *v29 = *(_QWORD *)v30;
  v29[1] = v31;
  v32 = v87[16];
  v33 = (_QWORD *)((char *)v7 + v32);
  v34 = &v8[v32];
  v35 = *((_QWORD *)v34 + 1);
  *v33 = *(_QWORD *)v34;
  v33[1] = v35;
  *((_BYTE *)v7 + v87[17]) = v8[v87[17]];
  *((_BYTE *)v7 + v87[18]) = v8[v87[18]];
  v36 = v87[19];
  v37 = (char *)v7 + v36;
  v38 = (uint64_t *)&v8[v36];
  v39 = *(_QWORD *)&v8[v36 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v39 >> 60 == 15)
  {
    *(_OWORD *)v37 = *(_OWORD *)v38;
  }
  else
  {
    v40 = *v38;
    sub_2415A0A90(*v38, v39);
    *(_QWORD *)v37 = v40;
    *((_QWORD *)v37 + 1) = v39;
  }
  v41 = v87[20];
  v42 = (char *)v7 + v41;
  v43 = &v8[v41];
  v44 = sub_2416B9A18();
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  v47 = v87[21];
  v48 = *(void **)&v8[v47];
  *(_QWORD *)((char *)v7 + v47) = v48;
  v49 = v87[22];
  v50 = (char *)v7 + v49;
  v51 = &v8[v49];
  v52 = v48;
  if (v88(v51, 1, v18))
  {
    sub_2415A0A74(0);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    v54 = v86;
  }
  else
  {
    v55 = v51;
    v54 = v86;
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v50, v55, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v50, 0, 1, v18);
  }
  v56 = v79[6];
  v57 = (char *)v80 + v56;
  v58 = (char *)v84 + v56;
  v59 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
  v60 = v79[7];
  v61 = (char *)v80 + v60;
  v62 = (char *)v84 + v60;
  v63 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
  *(_QWORD *)((char *)v80 + v79[8]) = *(_QWORD *)((char *)v84 + v79[8]);
  v64 = v79[9];
  v65 = (char *)v80 + v64;
  v66 = (char *)v84 + v64;
  swift_retain();
  if (v88(v66, 1, v18))
  {
    sub_2415A0A74(0);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v65, v66, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v65, 0, 1, v18);
  }
  v68 = *(int *)(a3 + 20);
  v69 = *(int *)(a3 + 24);
  v70 = (_QWORD *)((char *)v80 + v68);
  v71 = (_QWORD *)((char *)v84 + v68);
  v72 = v71[1];
  *v70 = *v71;
  v70[1] = v72;
  v73 = (_QWORD *)((char *)v80 + v69);
  v74 = (char *)v84 + v69;
  v76 = *(void **)v74;
  v75 = *((_QWORD *)v74 + 1);
  *v73 = v76;
  v73[1] = v75;
  swift_retain();
  v77 = v76;
  return v80;
}

char *sub_24163EE0C(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  id v86;
  uint64_t (*v88)(char *, uint64_t, uint64_t);
  uint64_t v89;
  int *v90;
  _QWORD *v92;
  char *v93;

  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v90 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v5 = v90[5];
  v92 = a2;
  v93 = a1;
  v6 = &a1[v5];
  v7 = (_QWORD *)((char *)a2 + v5);
  *(_QWORD *)v6 = *(_QWORD *)((char *)a2 + v5);
  *((_QWORD *)v6 + 1) = *(_QWORD *)((char *)a2 + v5 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 2) = v7[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 3) = v7[3];
  *((_QWORD *)v6 + 4) = v7[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 5) = v7[5];
  *((_QWORD *)v6 + 6) = v7[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 7) = v7[7];
  *((_QWORD *)v6 + 8) = v7[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 9) = v7[9];
  *((_QWORD *)v6 + 10) = v7[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 11) = v7[11];
  v8 = (void *)*((_QWORD *)v6 + 12);
  v9 = (void *)v7[12];
  *((_QWORD *)v6 + 12) = v9;
  v10 = v9;

  v11 = (void *)*((_QWORD *)v6 + 13);
  v12 = (void *)v7[13];
  *((_QWORD *)v6 + 13) = v12;
  v13 = v12;

  v14 = (int *)type metadata accessor for MedicalIDData();
  v15 = v14[13];
  v16 = &v6[v15];
  v17 = (char *)v7 + v15;
  v18 = sub_2416B9B50();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    sub_2415A0A74(0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  v24 = v14[14];
  v25 = &v6[v24];
  v26 = (char *)v7 + v24;
  v27 = v20(&v6[v24], 1, v18);
  v28 = v20(v26, 1, v18);
  v89 = v19;
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    sub_2415A0A74(0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v25, v26, v18);
LABEL_13:
  v30 = v14[15];
  v31 = &v6[v30];
  v32 = (_QWORD *)((char *)v7 + v30);
  *(_QWORD *)v31 = *v32;
  *((_QWORD *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = v14[16];
  v34 = &v6[v33];
  v35 = (_QWORD *)((char *)v7 + v33);
  *(_QWORD *)v34 = *v35;
  *((_QWORD *)v34 + 1) = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6[v14[17]] = *((_BYTE *)v7 + v14[17]);
  v6[v14[18]] = *((_BYTE *)v7 + v14[18]);
  v36 = v14[19];
  v37 = (uint64_t *)&v6[v36];
  v38 = (_QWORD *)((char *)v7 + v36);
  v39 = *(_QWORD *)((char *)v7 + v36 + 8);
  v88 = v20;
  if (*(_QWORD *)&v6[v36 + 8] >> 60 == 15)
  {
    if (v39 >> 60 != 15)
    {
      v40 = *v38;
      sub_2415A0A90(*v38, v39);
      *v37 = v40;
      v37[1] = v39;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v39 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v37);
LABEL_18:
    *(_OWORD *)v37 = *(_OWORD *)v38;
    goto LABEL_20;
  }
  v41 = *v38;
  sub_2415A0A90(*v38, v39);
  v42 = *v37;
  v43 = v37[1];
  *v37 = v41;
  v37[1] = v39;
  sub_2415A0DAC(v42, v43);
LABEL_20:
  v44 = v14[20];
  v45 = &v6[v44];
  v46 = (char *)v7 + v44;
  v47 = sub_2416B9A18();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v47);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 24))(v45, v46, v47);
LABEL_26:
  v53 = v14[21];
  v54 = *(void **)&v6[v53];
  v55 = *(void **)((char *)v7 + v53);
  *(_QWORD *)&v6[v53] = v55;
  v56 = v55;

  v57 = v14[22];
  v58 = &v6[v57];
  v59 = (char *)v7 + v57;
  v60 = v88(&v6[v57], 1, v18);
  v61 = v88(v59, 1, v18);
  if (v60)
  {
    v62 = v92;
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v58, v59, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v58, 0, 1, v18);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  v62 = v92;
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v89 + 8))(v58, v18);
LABEL_31:
    sub_2415A0A74(0);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v89 + 24))(v58, v59, v18);
LABEL_32:
  v64 = v90[6];
  v65 = &v93[v64];
  v66 = (uint64_t)v62 + v64;
  v67 = sub_2416B9C70();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 24))(v65, v66, v67);
  v68 = v90[7];
  v69 = &v93[v68];
  v70 = (uint64_t)v62 + v68;
  v71 = sub_2416B9C10();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 24))(v69, v70, v71);
  *(_QWORD *)&v93[v90[8]] = *(_QWORD *)((char *)v62 + v90[8]);
  swift_retain();
  swift_release();
  v72 = v90[9];
  v73 = &v93[v72];
  v74 = (char *)v62 + v72;
  LODWORD(v70) = v88(&v93[v72], 1, v18);
  v75 = v88(v74, 1, v18);
  if (!(_DWORD)v70)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 24))(v73, v74, v18);
      goto LABEL_38;
    }
    (*(void (**)(char *, uint64_t))(v89 + 8))(v73, v18);
    goto LABEL_37;
  }
  if (v75)
  {
LABEL_37:
    sub_2415A0A74(0);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v73, v74, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v73, 0, 1, v18);
LABEL_38:
  v77 = *(int *)(a3 + 20);
  v78 = &v93[v77];
  v79 = (_QWORD *)((char *)v62 + v77);
  v80 = v79[1];
  *(_QWORD *)v78 = *v79;
  *((_QWORD *)v78 + 1) = v80;
  swift_retain();
  swift_release();
  v81 = *(int *)(a3 + 24);
  v82 = &v93[v81];
  v83 = (uint64_t)v62 + v81;
  v84 = *(void **)&v93[v81];
  v85 = *(void **)v83;
  *(_QWORD *)v82 = *(_QWORD *)v83;
  v86 = v85;

  *((_QWORD *)v82 + 1) = *(_QWORD *)(v83 + 8);
  return v93;
}

_OWORD *sub_24163F524(_OWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  int *v46;

  *a1 = *(_OWORD *)a2;
  v46 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v5 = v46[5];
  v6 = (char *)a1 + v5;
  v7 = &a2[v5];
  *(_OWORD *)v6 = *(_OWORD *)&a2[v5];
  *((_QWORD *)v6 + 2) = *(_QWORD *)&a2[v5 + 16];
  *(_OWORD *)(v6 + 24) = *(_OWORD *)&a2[v5 + 24];
  *(_OWORD *)(v6 + 40) = *(_OWORD *)&a2[v5 + 40];
  *(_OWORD *)(v6 + 56) = *(_OWORD *)&a2[v5 + 56];
  *(_OWORD *)(v6 + 72) = *(_OWORD *)&a2[v5 + 72];
  *((_QWORD *)v6 + 11) = *(_QWORD *)&a2[v5 + 88];
  *((_OWORD *)v6 + 6) = *(_OWORD *)&a2[v5 + 96];
  v8 = (int *)type metadata accessor for MedicalIDData();
  v9 = v8[13];
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = sub_2416B9B50();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = v8[14];
  v17 = &v6[v16];
  v18 = &v7[v16];
  v44 = v14;
  v45 = v13;
  if (v14(&v7[v16], 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v18, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  *(_OWORD *)&v6[v8[15]] = *(_OWORD *)&v7[v8[15]];
  *(_OWORD *)&v6[v8[16]] = *(_OWORD *)&v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  v6[v8[18]] = v7[v8[18]];
  *(_OWORD *)&v6[v8[19]] = *(_OWORD *)&v7[v8[19]];
  v20 = v8[20];
  v21 = &v6[v20];
  v22 = &v7[v20];
  v23 = sub_2416B9A18();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(_QWORD *)&v6[v8[21]] = *(_QWORD *)&v7[v8[21]];
  v26 = v8[22];
  v27 = &v6[v26];
  v28 = &v7[v26];
  if (v44(&v7[v26], 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v27, v28, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v27, 0, 1, v12);
  }
  v30 = v46[6];
  v31 = (char *)a1 + v30;
  v32 = &a2[v30];
  v33 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
  v34 = v46[7];
  v35 = (char *)a1 + v34;
  v36 = &a2[v34];
  v37 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  *(_QWORD *)((char *)a1 + v46[8]) = *(_QWORD *)&a2[v46[8]];
  v38 = v46[9];
  v39 = (char *)a1 + v38;
  v40 = &a2[v38];
  if (v44(&a2[v38], 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v39, v40, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v39, 0, 1, v12);
  }
  v42 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)((char *)a1 + v42) = *(_OWORD *)&a2[v42];
  return a1;
}

char *sub_24163F910(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int v63;
  int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  void *v83;
  uint64_t v85;
  int *v86;
  _QWORD *v88;
  char *v89;
  uint64_t (*v90)(char *, uint64_t, uint64_t);

  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  v86 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v6 = v86[5];
  v7 = &a1[v6];
  v88 = a2;
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = *(_QWORD *)((char *)a2 + v6 + 8);
  *(_QWORD *)v7 = *(_QWORD *)((char *)a2 + v6);
  *((_QWORD *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 2) = v8[2];
  swift_bridgeObjectRelease();
  v10 = v8[4];
  *((_QWORD *)v7 + 3) = v8[3];
  *((_QWORD *)v7 + 4) = v10;
  swift_bridgeObjectRelease();
  v11 = v8[6];
  *((_QWORD *)v7 + 5) = v8[5];
  *((_QWORD *)v7 + 6) = v11;
  swift_bridgeObjectRelease();
  v12 = v8[8];
  *((_QWORD *)v7 + 7) = v8[7];
  *((_QWORD *)v7 + 8) = v12;
  swift_bridgeObjectRelease();
  v13 = v8[10];
  *((_QWORD *)v7 + 9) = v8[9];
  *((_QWORD *)v7 + 10) = v13;
  swift_bridgeObjectRelease();
  v14 = (void *)*((_QWORD *)v7 + 12);
  v15 = v8[12];
  *((_QWORD *)v7 + 11) = v8[11];
  *((_QWORD *)v7 + 12) = v15;

  v16 = (void *)*((_QWORD *)v7 + 13);
  *((_QWORD *)v7 + 13) = v8[13];

  v17 = (int *)type metadata accessor for MedicalIDData();
  v18 = v17[13];
  v19 = &v7[v18];
  v20 = (char *)v8 + v18;
  v21 = sub_2416B9B50();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v90 = v23;
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    sub_2415A0A74(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  v27 = v17[14];
  v28 = &v7[v27];
  v29 = (char *)v8 + v27;
  v30 = v23(&v7[v27], 1, v21);
  v31 = v23(v29, 1, v21);
  v89 = a1;
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v28, v29, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v28, v21);
LABEL_12:
    sub_2415A0A74(0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v28, v29, v21);
LABEL_13:
  v33 = v17[15];
  v34 = &v7[v33];
  v35 = (_QWORD *)((char *)v8 + v33);
  v37 = *v35;
  v36 = v35[1];
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v38 = v17[16];
  v39 = &v7[v38];
  v40 = (_QWORD *)((char *)v8 + v38);
  v42 = *v40;
  v41 = v40[1];
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v7[v17[17]] = *((_BYTE *)v8 + v17[17]);
  v7[v17[18]] = *((_BYTE *)v8 + v17[18]);
  v43 = v17[19];
  v44 = (uint64_t)&v7[v43];
  v45 = (char *)v8 + v43;
  v46 = *(_QWORD *)&v7[v43 + 8];
  v85 = v22;
  if (v46 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v44 = *(_OWORD *)v45;
    goto LABEL_18;
  }
  v47 = *((_QWORD *)v45 + 1);
  if (v47 >> 60 == 15)
  {
    sub_2415A1B38(v44);
    goto LABEL_16;
  }
  v48 = *(_QWORD *)v44;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_QWORD *)(v44 + 8) = v47;
  sub_2415A0DAC(v48, v46);
LABEL_18:
  v49 = v17[20];
  v50 = &v7[v49];
  v51 = (char *)v8 + v49;
  v52 = sub_2416B9A18();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v50, 1, v52);
  v56 = v54(v51, 1, v52);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v50, v51, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
LABEL_23:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v50, v51, v52);
LABEL_24:
  v58 = v17[21];
  v59 = *(void **)&v7[v58];
  *(_QWORD *)&v7[v58] = *(_QWORD *)((char *)v8 + v58);

  v60 = v17[22];
  v61 = &v7[v60];
  v62 = (char *)v8 + v60;
  v63 = v90(&v7[v60], 1, v21);
  v64 = v90(v62, 1, v21);
  if (v63)
  {
    v65 = v88;
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v61, v62, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v61, 0, 1, v21);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  v65 = v88;
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v85 + 8))(v61, v21);
LABEL_29:
    sub_2415A0A74(0);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v85 + 40))(v61, v62, v21);
LABEL_30:
  v67 = v86[6];
  v68 = &v89[v67];
  v69 = (uint64_t)v65 + v67;
  v70 = sub_2416B9C70();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 40))(v68, v69, v70);
  v71 = v86[7];
  v72 = &v89[v71];
  v73 = (uint64_t)v65 + v71;
  v74 = sub_2416B9C10();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 40))(v72, v73, v74);
  *(_QWORD *)&v89[v86[8]] = *(_QWORD *)((char *)v65 + v86[8]);
  swift_release();
  v75 = v86[9];
  v76 = &v89[v75];
  v77 = (char *)v65 + v75;
  LODWORD(v73) = v90(&v89[v75], 1, v21);
  v78 = v90(v77, 1, v21);
  if (!(_DWORD)v73)
  {
    if (!v78)
    {
      (*(void (**)(char *, char *, uint64_t))(v85 + 40))(v76, v77, v21);
      goto LABEL_36;
    }
    (*(void (**)(char *, uint64_t))(v85 + 8))(v76, v21);
    goto LABEL_35;
  }
  if (v78)
  {
LABEL_35:
    sub_2415A0A74(0);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v76, v77, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v76, 0, 1, v21);
LABEL_36:
  *(_OWORD *)&v89[*(int *)(a3 + 20)] = *(_OWORD *)((char *)v65 + *(int *)(a3 + 20));
  swift_release();
  v80 = *(int *)(a3 + 24);
  v81 = &v89[v80];
  v82 = (_QWORD *)((char *)v65 + v80);
  v83 = *(void **)&v89[v80];
  *(_QWORD *)v81 = *v82;

  *((_QWORD *)v81 + 1) = v82[1];
  return v89;
}

uint64_t sub_24163FF54()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24163FF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MedicalIDPregnancyViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_24163FFDC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24163FFE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDPregnancyViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MedicalIDPregnancyCellView()
{
  uint64_t result;

  result = qword_25713DA40;
  if (!qword_25713DA40)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24164009C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MedicalIDPregnancyViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24164011C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_24164012C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD);
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  _QWORD v39[7];
  char v40;
  uint64_t v41;

  sub_2415D8800(0, &qword_25713DAC0, (uint64_t (*)(uint64_t))sub_241640DA4, (uint64_t (*)(uint64_t))sub_241640EB8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
  v39[2] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v39 - v5;
  sub_241640DA4();
  v39[4] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241640EB8(0);
  v39[3] = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v39 - v14;
  sub_2415A0A74(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_2416B9B50();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = MedicalIDPregnancyViewModel.gestationalAgeDescription(startDate:)((uint64_t)v18);
  v22 = v21;
  sub_2415A6154((uint64_t)v18, (uint64_t (*)(_QWORD))sub_2415A0A74);
  if (v22)
  {
    v23 = sub_2416BA51C();
    if (qword_257139520 != -1)
      swift_once();
    v24 = qword_25713D9E0;
    *(_QWORD *)v9 = v23;
    *((_QWORD *)v9 + 1) = v24;
    v9[16] = 0;
    sub_241641050();
    sub_2416405E0(v20, v22, a1, (uint64_t *)&v9[*(int *)(v25 + 44)]);
    swift_bridgeObjectRelease();
    v26 = (uint64_t (*)(_QWORD))sub_241640DA4;
    sub_2415BEF64((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_241640DA4);
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713DAB8, (uint64_t (*)(uint64_t))sub_241640DA4, MEMORY[0x24BDF4700]);
    sub_24160EC84();
    sub_2416BA57C();
    v27 = (uint64_t)v9;
    goto LABEL_9;
  }
  v39[1] = a2;
  sub_2416BA4C8();
  if (qword_257139300 != -1)
    swift_once();
  v28 = (id)qword_25713A038;
  v29 = sub_2416BA9CC();
  v31 = v30;
  v39[5] = v29;
  v39[6] = v30;
  v33 = v32 & 1;
  v40 = v32 & 1;
  v39[0] = v34;
  v41 = v34;
  sub_24159F83C();
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_2416BCC80;
  v36 = a1[1];
  *(_QWORD *)(v35 + 32) = *a1;
  *(_QWORD *)(v35 + 40) = v36;
  strcpy((char *)(v35 + 48), "PregnancyState");
  *(_BYTE *)(v35 + 63) = -18;
  swift_bridgeObjectRetain();
  v37 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v38 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v38)
  {
    sub_2416BB128();

    sub_241640EDC();
    sub_241640FD8();
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v29, v31, v33);
    swift_bridgeObjectRelease();
    v26 = (uint64_t (*)(_QWORD))sub_241640EB8;
    sub_2415A85BC((uint64_t)v13, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_241640EB8);
    sub_2415BEF64((uint64_t)v15, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_241640EB8);
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713DAB8, (uint64_t (*)(uint64_t))sub_241640DA4, MEMORY[0x24BDF4700]);
    sub_24160EC84();
    sub_2416BA57C();
    v27 = (uint64_t)v15;
LABEL_9:
    sub_2415A6154(v27, v26);
    return;
  }
  __break(1u);
}

uint64_t sub_2416405E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v63 = a1;
  v64 = a2;
  v6 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x24BDAC7A8](v6);
  v59 = (uint64_t)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MedicalIDPregnancyCellView();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241640E9C(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v62 = (uint64_t)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v61 = (uint64_t)&v52 - v14;
  v15 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v15);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v16 = (void *)qword_25713A038;
  v17 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v17);
  v18 = v16;
  sub_2416B9C04();
  v60 = sub_2416BB134();
  v20 = a3[1];
  v21 = *(void **)((char *)a3 + *(int *)(v8 + 24));
  if (v21)
  {
    v22 = v19;
    v23 = *a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = objc_msgSend(v21, sel_isLockScreen);
    sub_2415BEF64((uint64_t)a3, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyCellView);
    if ((v24 & 1) == 0)
    {
      v57 = v23;
      v58 = v22;
      v25 = sub_2416B9B50();
      v56 = &v52;
      v26 = *(_QWORD *)(v25 - 8);
      MEMORY[0x24BDAC7A8](v25);
      v28 = (char *)&v52 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
      v29 = *(int *)(v6 + 20);
      v30 = (uint64_t)&v10[v29 + *(int *)(type metadata accessor for MedicalIDData() + 52)];
      sub_2415A0A74(0);
      v55 = &v52;
      v52 = v31;
      v32 = *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64);
      MEMORY[0x24BDAC7A8](v31);
      sub_2415BEF64(v30, (uint64_t)&v52 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0), v33);
      v53 = v26;
      v54 = v25;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))((char *)&v52 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v25) != 1)
      {
        v41 = v53;
        v40 = v54;
        (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v28, (char *)&v52 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0), v54);
        sub_2415C0788(0, (unint64_t *)&qword_25713DAD0);
        v42 = sub_2416BB3F8();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v28, v40);
        sub_2415A6154((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyCellView);
        v23 = v57;
        v22 = v58;
        if ((v42 & 1) != 0)
        {
          v43 = (uint64_t)a3;
          v44 = v59;
          sub_2415BEF64(v43, v59, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
          sub_2416410B4(0);
          v46 = MEMORY[0x24BDAC7A8](v45);
          v48 = (char *)&v52 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
          MEMORY[0x24BDAC7A8](v46);
          v49 = (char *)&v52 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v49, 1, 1, v54);
          sub_2416BAE4C();
          sub_2415A6154((uint64_t)v49, (uint64_t (*)(_QWORD))sub_2415A0A74);
          v35 = v61;
          sub_2415A85BC(v44, v61, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
          v50 = type metadata accessor for MedicalIDPregnancyStatusLabelView();
          *(_BYTE *)(v35 + *(int *)(v50 + 20)) = 0;
          v51 = (uint64_t)v48;
          v23 = v57;
          sub_2415A85BC(v51, v35 + *(int *)(v50 + 24), (uint64_t (*)(_QWORD))sub_2416410B4);
          v22 = v58;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v35, 0, 1, v50);
          goto LABEL_9;
        }
LABEL_8:
        v34 = type metadata accessor for MedicalIDPregnancyStatusLabelView();
        v35 = v61;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v61, 1, 1, v34);
LABEL_9:
        v36 = v62;
        sub_2415BEF64(v35, v62, (uint64_t (*)(_QWORD))sub_241640E9C);
        *a4 = v60;
        a4[1] = v22;
        v37 = v64;
        a4[2] = v63;
        a4[3] = v37;
        a4[4] = v23;
        a4[5] = v20;
        sub_241640E38();
        sub_2415BEF64(v36, (uint64_t)a4 + *(int *)(v38 + 48), (uint64_t (*)(_QWORD))sub_241640E9C);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_2415A6154(v35, (uint64_t (*)(_QWORD))sub_241640E9C);
        sub_2415A6154(v36, (uint64_t (*)(_QWORD))sub_241640E9C);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      sub_2415A6154((uint64_t)&v52 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))sub_2415A0A74);
      v23 = v57;
      v22 = v58;
    }
    sub_2415A6154((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyCellView);
    goto LABEL_8;
  }
  sub_2415C0788(0, (unint64_t *)&qword_25713A430);
  sub_2415BEF08();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = sub_2416BA264();
  __break(1u);
  return result;
}

void sub_241640C10(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  Swift::Bool v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (qword_2571394D8 != -1)
    swift_once();
  v6 = qword_2571477C0;
  v5 = *(_QWORD *)algn_2571477C8;
  swift_bridgeObjectRetain();
  v7 = MedicalIDPregnancyViewModel.hasPregnancyData()();
  v9 = *v2;
  v8 = v2[1];
  v10 = (uint64_t *)((char *)v2 + *(int *)(a1 + 20));
  v12 = *v10;
  v11 = v10[1];
  v13 = qword_257139500;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v13 != -1)
    swift_once();
  v14 = qword_25713D4D0;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 17) = 2;
  *(_QWORD *)(a2 + 24) = v12;
  *(_QWORD *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v14;
  *(_BYTE *)(a2 + 64) = 1;
  sub_241640D24(0);
  sub_24164012C(v2, a2 + *(int *)(v15 + 44));
}

void sub_241640D24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_25713DA80)
  {
    sub_2415D8800(255, &qword_25713DA88, (uint64_t (*)(uint64_t))sub_241640DA4, (uint64_t (*)(uint64_t))sub_241640EB8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v3 = v2;
    v4 = sub_241640F38();
    v6 = type metadata accessor for MedicalIDCellView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713DA80);
  }
}

void sub_241640DA4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DA90)
  {
    sub_241640E1C(255);
    sub_24159CE88(&qword_25713DAA8, (uint64_t (*)(uint64_t))sub_241640E1C, MEMORY[0x24BDF5428]);
    v0 = sub_2416BADF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DA90);
  }
}

void sub_241640E1C(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713DA98, (uint64_t (*)(uint64_t))sub_241640E38, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_241640E38()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713DAA0)
  {
    sub_241640E9C(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713DAA0);
  }
}

void sub_241640E9C(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713BC00, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDPregnancyStatusLabelView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_241640EB8(uint64_t a1)
{
  sub_2415D8800(a1, &qword_25713C678, (uint64_t (*)(uint64_t))sub_241640EDC, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
}

void sub_241640EDC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C680)
  {
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C680);
  }
}

unint64_t sub_241640F38()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713DAB0;
  if (!qword_25713DAB0)
  {
    sub_2415D8800(255, &qword_25713DA88, (uint64_t (*)(uint64_t))sub_241640DA4, (uint64_t (*)(uint64_t))sub_241640EB8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713DAB8, (uint64_t (*)(uint64_t))sub_241640DA4, MEMORY[0x24BDF4700]);
    v3[1] = sub_24160EC84();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713DAB0);
  }
  return result;
}

unint64_t sub_241640FD8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_25713C688;
  if (!qword_25713C688)
  {
    sub_241640EDC();
    v2 = v1;
    v3 = sub_24160EC10();
    v4[0] = MEMORY[0x24BDF1F80];
    v4[1] = v3;
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713C688);
  }
  return result;
}

void sub_241641040()
{
  qword_25713D9E0 = 0x4010000000000000;
}

void sub_241641050()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DAC8)
  {
    sub_241640E1C(255);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DAC8);
  }
}

void sub_2416410B4(uint64_t a1)
{
  sub_24159D6B0(a1, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
}

uint64_t sub_2416410D0()
{
  return sub_24159CE88(qword_25713DAD8, (uint64_t (*)(uint64_t))sub_241640D24, (uint64_t)&unk_2416C01F8);
}

uint64_t sub_2416410FC()
{
  return swift_allocateGenericValueMetadata();
}

void sub_241641104()
{
  unint64_t v0;
  unint64_t v1;

  sub_241641900(319, &qword_25713A5E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (v0 <= 0x3F)
  {
    sub_2416BA144();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *sub_2416411A8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_241641900(0, &qword_25713A5E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_2416BA144();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = a3[13];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_2416BA144();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[14];
    v14 = a3[15];
    v15 = (uint64_t *)((char *)v4 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (uint64_t *)((char *)v4 + v14);
    v19 = (uint64_t *)((char *)a2 + v14);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_2416412E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_241641900(0, &qword_25713A5E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_2416BA144();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  v5 = a1 + *(int *)(a2 + 52);
  v6 = sub_2416BA144();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  return swift_release();
}

_QWORD *sub_24164139C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  sub_241641900(0, &qword_25713A5E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_2416BA144();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = a3[13];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2416BA144();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[14];
  v12 = a3[15];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_QWORD *)((char *)a1 + v12);
  v17 = (_QWORD *)((char *)a2 + v12);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_2416414AC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_2416415E4((uint64_t)a1);
    sub_241641900(0, &qword_25713A5E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_2416BA144();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v7 = a3[13];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2416BA144();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[14];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  v15 = a3[15];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_2416415E4(uint64_t a1)
{
  uint64_t v2;

  sub_241641900(0, &qword_25713A5E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_241641630(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  sub_241641900(0, &qword_25713A5E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_2416BA144();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v9 = a3[13];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_2416BA144();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  return a1;
}

char *sub_241641720(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_2416415E4((uint64_t)a1);
    sub_241641900(0, &qword_25713A5E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = sub_2416BA144();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  v9 = a3[13];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_2416BA144();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  swift_release();
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  swift_release();
  return a1;
}

uint64_t sub_24164183C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_241641848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  sub_241641900(0, qword_25713C260, MEMORY[0x24BDEB580]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_2416BA144();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 52);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 56));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

void sub_241641900(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_2416BA144();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_241641958()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_241641964(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  sub_241641900(0, qword_25713C260, MEMORY[0x24BDEB580]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_2416BA144();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 52);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 56)) = (a2 - 1);
  return result;
}

void type metadata accessor for MedicalIDAXLayoutView()
{
  JUMPOUT(0x242699438);
}

uint64_t sub_241641A24()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_241641A58(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_241641900(0, &qword_25713A5E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for MedicalIDAXLayoutView();
}

uint64_t sub_241641AE8(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;

  v7 = v5 + a1[13];
  v8 = *MEMORY[0x24BDECEA0];
  v9 = sub_2416BA144();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  v11 = (_QWORD *)(v5 + a1[14]);
  *v11 = v4;
  v11[1] = v3;
  v12 = (_QWORD *)(v5 + a1[15]);
  *v12 = v2;
  v12[1] = v1;
  return result;
}

uint64_t sub_241641B58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];

  v40 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  v35 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v36 = (uint64_t)&v33 - v9;
  v10 = *(_QWORD *)(v8 + 16);
  v33 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v34 = (uint64_t)&v33 - v14;
  v15 = sub_2416BA144();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_2416BA588();
  v38 = *(_QWORD *)(v19 - 8);
  v39 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v37 = (char *)&v33 - v20;
  sub_2415C153C((uint64_t)v18);
  v21 = sub_2416BA138();
  v22 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if ((v21 & 1) != 0)
  {
    (*(void (**)(uint64_t))(v2 + *(int *)(a1 + 56)))(v22);
    v23 = *(_QWORD *)(a1 + 32);
    v24 = v34;
    sub_2415E3D20((uint64_t)v13, v10, v34);
    v25 = *(void (**)(char *, uint64_t))(v33 + 8);
    v25(v13, v10);
    sub_2415E07B8(v24, v10, (uint64_t)v13);
    v26 = *(_QWORD *)(a1 + 40);
    v27 = (uint64_t)v37;
    sub_2415E07D0((uint64_t)v13, v10);
    v25(v13, v10);
    v28 = v24;
    v29 = v10;
  }
  else
  {
    (*(void (**)(uint64_t))(v2 + *(int *)(a1 + 60)))(v22);
    v26 = *(_QWORD *)(a1 + 40);
    v30 = v36;
    sub_2415E3D20((uint64_t)v7, v4, v36);
    v25 = *(void (**)(char *, uint64_t))(v35 + 8);
    v25(v7, v4);
    sub_2415E07B8(v30, v4, (uint64_t)v7);
    v23 = *(_QWORD *)(a1 + 32);
    v27 = (uint64_t)v37;
    sub_2415E0894((uint64_t)v7, v10, v4);
    v25(v7, v4);
    v28 = v30;
    v29 = v4;
  }
  v25((char *)v28, v29);
  v41[0] = v23;
  v41[1] = v26;
  v31 = v39;
  MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v39, v41);
  sub_2415E07B8(v27, v31, v40);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v27, v31);
}

uint64_t sub_241641E68(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;

  v2 = sub_2416BA588();
  v4 = *(_OWORD *)(a1 + 16);
  return MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, &v4);
}

uint64_t storeEnumTagSinglePayload for MeasurementError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_241641F00 + 4 * byte_2416C09F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_241641F34 + 4 * byte_2416C09F0[v4]))();
}

uint64_t sub_241641F34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_241641F3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x241641F44);
  return result;
}

uint64_t sub_241641F50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x241641F58);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_241641F5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_241641F64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MeasurementError()
{
  return &type metadata for MeasurementError;
}

unint64_t sub_241641F84()
{
  unint64_t result;

  result = qword_25713DB60;
  if (!qword_25713DB60)
  {
    result = MEMORY[0x2426994BC](&unk_2416C0A74, &type metadata for MeasurementError);
    atomic_store(result, (unint64_t *)&qword_25713DB60);
  }
  return result;
}

_QWORD *sub_241641FC8(_QWORD *a1, char *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  char *v88;
  void *v89;
  char *__dst;
  void (*__dsta)(char *, char *);
  int *v92;
  uint64_t v93;
  uint64_t v94;
  void *v96;
  unsigned int (*v97)(char *, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    v7 = *((_QWORD *)a2 + 3);
    a1[2] = *((_QWORD *)a2 + 2);
    a1[3] = v7;
    v8 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v8;
    v9 = *((_QWORD *)a2 + 7);
    a1[6] = *((_QWORD *)a2 + 6);
    a1[7] = v9;
    v10 = *((_QWORD *)a2 + 9);
    a1[8] = *((_QWORD *)a2 + 8);
    a1[9] = v10;
    v11 = *((_QWORD *)a2 + 11);
    a1[10] = *((_QWORD *)a2 + 10);
    a1[11] = v11;
    v89 = (void *)*((_QWORD *)a2 + 12);
    v96 = (void *)*((_QWORD *)a2 + 13);
    a1[12] = v89;
    a1[13] = v96;
    v12 = type metadata accessor for MedicalIDData();
    v13 = *(int *)(v12 + 52);
    __dst = (char *)v4 + v13;
    v92 = (int *)v12;
    v88 = &a2[v13];
    v14 = sub_2416B9B50();
    v94 = *(_QWORD *)(v14 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = v89;
    v17 = v96;
    v97 = v15;
    if (v15(v88, 1, v14))
    {
      sub_2415A0A74(0);
      memcpy(__dst, v88, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      v19 = v94;
    }
    else
    {
      v19 = v94;
      (*(void (**)(char *, char *, uint64_t))(v94 + 16))(__dst, v88, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(__dst, 0, 1, v14);
    }
    v21 = v92[14];
    v22 = (char *)v4 + v21;
    v23 = &a2[v21];
    if (v97(&a2[v21], 1, v14))
    {
      sub_2415A0A74(0);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v23, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v14);
    }
    v25 = v92[15];
    v26 = (_QWORD *)((char *)v4 + v25);
    v27 = &a2[v25];
    v28 = *((_QWORD *)v27 + 1);
    *v26 = *(_QWORD *)v27;
    v26[1] = v28;
    v29 = v92[16];
    v30 = (_QWORD *)((char *)v4 + v29);
    v31 = &a2[v29];
    v32 = *((_QWORD *)v31 + 1);
    *v30 = *(_QWORD *)v31;
    v30[1] = v32;
    *((_BYTE *)v4 + v92[17]) = a2[v92[17]];
    *((_BYTE *)v4 + v92[18]) = a2[v92[18]];
    v33 = v92[19];
    v34 = (char *)v4 + v33;
    v35 = (uint64_t *)&a2[v33];
    v36 = *(_QWORD *)&a2[v33 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v36 >> 60 == 15)
    {
      *(_OWORD *)v34 = *(_OWORD *)v35;
    }
    else
    {
      v37 = *v35;
      sub_2415A0A90(*v35, v36);
      *(_QWORD *)v34 = v37;
      *((_QWORD *)v34 + 1) = v36;
    }
    v38 = v92[20];
    v39 = (char *)v4 + v38;
    v40 = &a2[v38];
    v41 = sub_2416B9A18();
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
    v44 = v92[21];
    v45 = *(void **)&a2[v44];
    *(_QWORD *)((char *)v4 + v44) = v45;
    v46 = v92[22];
    v47 = (char *)v4 + v46;
    v48 = &a2[v46];
    v49 = v45;
    if (v97(v48, 1, v14))
    {
      sub_2415A0A74(0);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v47, v48, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v47, 0, 1, v14);
    }
    v51 = v14;
    v52 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    v53 = v52[5];
    v54 = (char *)v4 + v53;
    v55 = &a2[v53];
    v56 = sub_2416B9C70();
    __dsta = *(void (**)(char *, char *))(*(_QWORD *)(v56 - 8) + 16);
    v93 = v56;
    __dsta(v54, v55);
    v57 = v52[6];
    v58 = (char *)v4 + v57;
    v59 = &a2[v57];
    v60 = sub_2416B9C10();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
    v61 = v52[7];
    v62 = *(void **)&a2[v61];
    *(_QWORD *)((char *)v4 + v61) = v62;
    v63 = v52[8];
    v64 = *(void **)&a2[v63];
    *(_QWORD *)((char *)v4 + v63) = v64;
    v65 = v52[9];
    v66 = (_QWORD *)((char *)v4 + v65);
    v67 = &a2[v65];
    v68 = *((_QWORD *)v67 + 1);
    *v66 = *(_QWORD *)v67;
    v66[1] = v68;
    v69 = a3[5];
    v70 = (_QWORD *)((char *)v4 + v69);
    v71 = &a2[v69];
    v72 = *(_QWORD *)&a2[v69 + 8];
    *v70 = *(_QWORD *)&a2[v69];
    v70[1] = v72;
    sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    v74 = *(int *)(v73 + 32);
    v75 = (char *)v70 + v74;
    v76 = &v71[v74];
    v77 = v62;
    v78 = v64;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v97(v76, 1, v51))
    {
      sub_2415A0A74(0);
      memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v75, v76, v51);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v75, 0, 1, v51);
    }
    v80 = a3[6];
    v81 = (_QWORD *)((char *)v4 + v80);
    v82 = &a2[v80];
    if (*(_QWORD *)v82)
    {
      v83 = *((_QWORD *)v82 + 1);
      *v81 = *(_QWORD *)v82;
      v81[1] = v83;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v81 = *(_OWORD *)v82;
    }
    v84 = a3[7];
    v85 = (_QWORD *)((char *)v4 + v84);
    v86 = &a2[v84];
    sub_24164257C(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      ((void (*)(_QWORD *, char *, uint64_t))__dsta)(v85, v86, v93);
    }
    else
    {
      *v85 = *(_QWORD *)v86;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

void sub_24164257C(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
}

uint64_t sub_241642598(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = (int *)type metadata accessor for MedicalIDData();
  v5 = a1 + v4[13];
  v6 = sub_2416B9B50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + v4[14];
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)(a1 + v4[19]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_2415A0DAC(*v10, v11);
  v12 = a1 + v4[20];
  v13 = sub_2416B9A18();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);

  v15 = a1 + v4[22];
  if (!v8(v15, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  v16 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v17 = a1 + v16[5];
  v18 = sub_2416B9C70();
  v26 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v26(v17, v18);
  v19 = a1 + v16[6];
  v20 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);

  swift_bridgeObjectRelease();
  v21 = a1 + a2[5];
  swift_release();
  swift_release();
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v23 = v21 + *(int *)(v22 + 32);
  if (!v8(v23, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v23, v6);
  if (*(_QWORD *)(a1 + a2[6]))
    swift_release();
  v24 = a1 + a2[7];
  sub_24164257C(0);
  if (swift_getEnumCaseMultiPayload() == 1)
    return ((uint64_t (*)(uint64_t, uint64_t))v26)(v24, v18);
  else
    return swift_release();
}

_QWORD *sub_2416428A4(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  char *v86;
  void *v87;
  char *__dst;
  void (*__dsta)(char *, char *);
  int *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  unsigned int (*v94)(char *, uint64_t, uint64_t);

  v5 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *((_QWORD *)a2 + 3);
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = v6;
  v7 = *((_QWORD *)a2 + 5);
  a1[4] = *((_QWORD *)a2 + 4);
  a1[5] = v7;
  v8 = *((_QWORD *)a2 + 7);
  a1[6] = *((_QWORD *)a2 + 6);
  a1[7] = v8;
  v9 = *((_QWORD *)a2 + 9);
  a1[8] = *((_QWORD *)a2 + 8);
  a1[9] = v9;
  v10 = *((_QWORD *)a2 + 11);
  a1[10] = *((_QWORD *)a2 + 10);
  a1[11] = v10;
  v87 = (void *)*((_QWORD *)a2 + 12);
  v93 = (void *)*((_QWORD *)a2 + 13);
  a1[12] = v87;
  a1[13] = v93;
  v11 = type metadata accessor for MedicalIDData();
  v12 = *(int *)(v11 + 52);
  __dst = (char *)a1 + v12;
  v90 = (int *)v11;
  v86 = &a2[v12];
  v13 = sub_2416B9B50();
  v92 = *(_QWORD *)(v13 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = v87;
  v16 = v93;
  v94 = v14;
  if (v14(v86, 1, v13))
  {
    sub_2415A0A74(0);
    memcpy(__dst, v86, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    v18 = v92;
  }
  else
  {
    v18 = v92;
    (*(void (**)(char *, char *, uint64_t))(v92 + 16))(__dst, v86, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(__dst, 0, 1, v13);
  }
  v19 = v90[14];
  v20 = (char *)a1 + v19;
  v21 = &a2[v19];
  if (v94(&a2[v19], 1, v13))
  {
    sub_2415A0A74(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v20, v21, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v13);
  }
  v23 = v90[15];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = &a2[v23];
  v26 = *((_QWORD *)v25 + 1);
  *v24 = *(_QWORD *)v25;
  v24[1] = v26;
  v27 = v90[16];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = &a2[v27];
  v30 = *((_QWORD *)v29 + 1);
  *v28 = *(_QWORD *)v29;
  v28[1] = v30;
  *((_BYTE *)a1 + v90[17]) = a2[v90[17]];
  *((_BYTE *)a1 + v90[18]) = a2[v90[18]];
  v31 = v90[19];
  v32 = (char *)a1 + v31;
  v33 = (uint64_t *)&a2[v31];
  v34 = *(_QWORD *)&a2[v31 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v34 >> 60 == 15)
  {
    *(_OWORD *)v32 = *(_OWORD *)v33;
  }
  else
  {
    v35 = *v33;
    sub_2415A0A90(*v33, v34);
    *(_QWORD *)v32 = v35;
    *((_QWORD *)v32 + 1) = v34;
  }
  v36 = v90[20];
  v37 = (char *)a1 + v36;
  v38 = &a2[v36];
  v39 = sub_2416B9A18();
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  v42 = v90[21];
  v43 = *(void **)&a2[v42];
  *(_QWORD *)((char *)a1 + v42) = v43;
  v44 = v90[22];
  v45 = (char *)a1 + v44;
  v46 = &a2[v44];
  v47 = v43;
  if (v94(v46, 1, v13))
  {
    sub_2415A0A74(0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v45, v46, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v45, 0, 1, v13);
  }
  v49 = v13;
  v50 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v51 = v50[5];
  v52 = (char *)a1 + v51;
  v53 = &a2[v51];
  v54 = sub_2416B9C70();
  __dsta = *(void (**)(char *, char *))(*(_QWORD *)(v54 - 8) + 16);
  v91 = v54;
  __dsta(v52, v53);
  v55 = v50[6];
  v56 = (char *)a1 + v55;
  v57 = &a2[v55];
  v58 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
  v59 = v50[7];
  v60 = *(void **)&a2[v59];
  *(_QWORD *)((char *)a1 + v59) = v60;
  v61 = v50[8];
  v62 = *(void **)&a2[v61];
  *(_QWORD *)((char *)a1 + v61) = v62;
  v63 = v50[9];
  v64 = (_QWORD *)((char *)a1 + v63);
  v65 = &a2[v63];
  v66 = *((_QWORD *)v65 + 1);
  *v64 = *(_QWORD *)v65;
  v64[1] = v66;
  v67 = a3[5];
  v68 = (_QWORD *)((char *)a1 + v67);
  v69 = &a2[v67];
  v70 = *(_QWORD *)&a2[v67 + 8];
  *v68 = *(_QWORD *)&a2[v67];
  v68[1] = v70;
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v72 = *(int *)(v71 + 32);
  v73 = (char *)v68 + v72;
  v74 = &v69[v72];
  v75 = v60;
  v76 = v62;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v94(v74, 1, v49))
  {
    sub_2415A0A74(0);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v73, v74, v49);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v73, 0, 1, v49);
  }
  v78 = a3[6];
  v79 = (_QWORD *)((char *)a1 + v78);
  v80 = &a2[v78];
  if (*(_QWORD *)v80)
  {
    v81 = *((_QWORD *)v80 + 1);
    *v79 = *(_QWORD *)v80;
    v79[1] = v81;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v79 = *(_OWORD *)v80;
  }
  v82 = a3[7];
  v83 = (_QWORD *)((char *)a1 + v82);
  v84 = &a2[v82];
  sub_24164257C(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    ((void (*)(_QWORD *, char *, uint64_t))__dsta)(v83, v84, v91);
  }
  else
  {
    *v83 = *(_QWORD *)v84;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *sub_241642E28(char *a1, char *a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  id v74;
  uint64_t v75;
  void *v76;
  void *v77;
  id v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  int *v102;
  uint64_t v103;
  uint64_t (*v104)(char *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
  v6 = (void *)*((_QWORD *)a1 + 12);
  v7 = (void *)*((_QWORD *)a2 + 12);
  *((_QWORD *)a1 + 12) = v7;
  v8 = v7;

  v9 = (void *)*((_QWORD *)a1 + 13);
  v10 = (void *)*((_QWORD *)a2 + 13);
  *((_QWORD *)a1 + 13) = v10;
  v11 = v10;

  v12 = (int *)type metadata accessor for MedicalIDData();
  v13 = v12[13];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = sub_2416B9B50();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v104 = v18;
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
LABEL_6:
    sub_2415A0A74(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 24))(v14, v15, v16);
LABEL_7:
  v22 = v12[14];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = v18(&a1[v22], 1, v16);
  v26 = v18(v24, 1, v16);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v23, v24, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v23, 0, 1, v16);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v16);
LABEL_12:
    sub_2415A0A74(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 24))(v23, v24, v16);
LABEL_13:
  v28 = v12[15];
  v29 = &a1[v28];
  v30 = &a2[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = v12[16];
  v32 = &a1[v31];
  v33 = &a2[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v12[17]] = a2[v12[17]];
  a1[v12[18]] = a2[v12[18]];
  v34 = v12[19];
  v35 = (uint64_t *)&a1[v34];
  v36 = (uint64_t *)&a2[v34];
  v37 = *(_QWORD *)&a2[v34 + 8];
  v102 = a3;
  v103 = v17;
  if (*(_QWORD *)&a1[v34 + 8] >> 60 == 15)
  {
    if (v37 >> 60 != 15)
    {
      v38 = *v36;
      sub_2415A0A90(v38, v37);
      *v35 = v38;
      v35[1] = v37;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v37 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v35);
LABEL_18:
    *(_OWORD *)v35 = *(_OWORD *)v36;
    goto LABEL_20;
  }
  v39 = *v36;
  sub_2415A0A90(v39, v37);
  v40 = *v35;
  v41 = v35[1];
  *v35 = v39;
  v35[1] = v37;
  sub_2415A0DAC(v40, v41);
LABEL_20:
  v42 = v12[20];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v45 = sub_2416B9A18();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  v48 = v47(v43, 1, v45);
  v49 = v47(v44, 1, v45);
  if (v48)
  {
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v43, v45);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 24))(v43, v44, v45);
LABEL_26:
  v51 = v12[21];
  v52 = *(void **)&a1[v51];
  v53 = *(void **)&a2[v51];
  *(_QWORD *)&a1[v51] = v53;
  v54 = v53;

  v55 = v12[22];
  v56 = &a1[v55];
  v57 = &a2[v55];
  v58 = v104(&a1[v55], 1, v16);
  v59 = v104(v57, 1, v16);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v56, v57, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v56, 0, 1, v16);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v103 + 8))(v56, v16);
LABEL_31:
    sub_2415A0A74(0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v103 + 24))(v56, v57, v16);
LABEL_32:
  v61 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v62 = v61[5];
  v63 = &a1[v62];
  v64 = &a2[v62];
  v65 = sub_2416B9C70();
  v66 = *(_QWORD *)(v65 - 8);
  (*(void (**)(char *, char *, uint64_t))(v66 + 24))(v63, v64, v65);
  v67 = v61[6];
  v68 = &a1[v67];
  v69 = &a2[v67];
  v70 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 24))(v68, v69, v70);
  v71 = v61[7];
  v72 = *(void **)&a1[v71];
  v73 = *(void **)&a2[v71];
  *(_QWORD *)&a1[v71] = v73;
  v74 = v73;

  v75 = v61[8];
  v76 = *(void **)&a2[v75];
  v77 = *(void **)&a1[v75];
  *(_QWORD *)&a1[v75] = v76;
  v78 = v76;

  v79 = v61[9];
  v80 = &a1[v79];
  v81 = &a2[v79];
  *(_QWORD *)v80 = *(_QWORD *)v81;
  *((_QWORD *)v80 + 1) = *((_QWORD *)v81 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v82 = v102[5];
  v83 = &a1[v82];
  v84 = &a2[v82];
  *(_QWORD *)&a1[v82] = *(_QWORD *)&a2[v82];
  swift_retain();
  swift_release();
  *((_QWORD *)v83 + 1) = *((_QWORD *)v84 + 1);
  swift_retain();
  swift_release();
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v86 = *(int *)(v85 + 32);
  v87 = &v83[v86];
  v88 = &v84[v86];
  LODWORD(v69) = v104(&v83[v86], 1, v16);
  v89 = v104(v88, 1, v16);
  if ((_DWORD)v69)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v87, v88, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v87, 0, 1, v16);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v103 + 8))(v87, v16);
LABEL_37:
    sub_2415A0A74(0);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v103 + 24))(v87, v88, v16);
LABEL_38:
  v91 = v102[6];
  v92 = &a1[v91];
  v93 = &a2[v91];
  v94 = *(_QWORD *)&a1[v91];
  v95 = *(_QWORD *)&a2[v91];
  if (v94)
  {
    if (v95)
    {
      v96 = *((_QWORD *)v93 + 1);
      *(_QWORD *)v92 = v95;
      *((_QWORD *)v92 + 1) = v96;
      swift_retain();
      swift_release();
      goto LABEL_45;
    }
    swift_release();
  }
  else if (v95)
  {
    v97 = *((_QWORD *)v93 + 1);
    *(_QWORD *)v92 = v95;
    *((_QWORD *)v92 + 1) = v97;
    swift_retain();
    goto LABEL_45;
  }
  *(_OWORD *)v92 = *(_OWORD *)v93;
LABEL_45:
  if (a1 != a2)
  {
    v98 = v102[7];
    v99 = &a1[v98];
    v100 = &a2[v98];
    sub_2415A6154((uint64_t)&a1[v98], (uint64_t (*)(_QWORD))sub_24164257C);
    sub_24164257C(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v99, v100, v65);
    }
    else
    {
      *(_QWORD *)v99 = *(_QWORD *)v100;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_241643648(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  int *v58;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v6 = (int *)type metadata accessor for MedicalIDData();
  v7 = v6[13];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_2416B9B50();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    sub_2415A0A74(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = v6[14];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v58 = a3;
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    sub_2415A0A74(0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  *(_OWORD *)(a1 + v6[15]) = *(_OWORD *)(a2 + v6[15]);
  *(_OWORD *)(a1 + v6[16]) = *(_OWORD *)(a2 + v6[16]);
  *(_BYTE *)(a1 + v6[17]) = *(_BYTE *)(a2 + v6[17]);
  *(_BYTE *)(a1 + v6[18]) = *(_BYTE *)(a2 + v6[18]);
  *(_OWORD *)(a1 + v6[19]) = *(_OWORD *)(a2 + v6[19]);
  v18 = v6[20];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = sub_2416B9A18();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(_QWORD *)(a1 + v6[21]) = *(_QWORD *)(a2 + v6[21]);
  v24 = v6[22];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  if (v12((const void *)(a2 + v24), 1, v10))
  {
    sub_2415A0A74(0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v25, v26, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v25, 0, 1, v10);
  }
  v28 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v29 = v28[5];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = sub_2416B9C70();
  v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
  v57(v30, v31, v32);
  v33 = v28[6];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
  *(_QWORD *)(a1 + v28[7]) = *(_QWORD *)(a2 + v28[7]);
  *(_QWORD *)(a1 + v28[8]) = *(_QWORD *)(a2 + v28[8]);
  *(_OWORD *)(a1 + v28[9]) = *(_OWORD *)(a2 + v28[9]);
  v37 = v58[5];
  v38 = (_QWORD *)(a1 + v37);
  v39 = a2 + v37;
  v40 = *(_QWORD *)(a2 + v37 + 8);
  *v38 = *(_QWORD *)(a2 + v37);
  v38[1] = v40;
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v42 = *(int *)(v41 + 32);
  v43 = (char *)v38 + v42;
  v44 = (const void *)(v39 + v42);
  if (v12(v44, 1, v10))
  {
    sub_2415A0A74(0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v11 + 32))(v43, v44, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v43, 0, 1, v10);
  }
  v46 = v58[6];
  v47 = (_QWORD *)(a1 + v46);
  v48 = (uint64_t *)(a2 + v46);
  v49 = *v48;
  if (*v48)
  {
    v50 = v48[1];
    *v47 = v49;
    v47[1] = v50;
  }
  else
  {
    *(_OWORD *)v47 = *(_OWORD *)v48;
  }
  v51 = v58[7];
  v52 = (void *)(a1 + v51);
  v53 = (const void *)(a2 + v51);
  sub_24164257C(0);
  v55 = v54;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v57((uint64_t)v52, (uint64_t)v53, v32);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  return a1;
}

char *sub_241643AE4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  int v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  char *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  int *v104;
  uint64_t v105;
  uint64_t (*v106)(char *, uint64_t, uint64_t);

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRelease();
  v7 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 4) = v7;
  swift_bridgeObjectRelease();
  v8 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a1 + 6) = v8;
  swift_bridgeObjectRelease();
  v9 = *((_QWORD *)a2 + 8);
  *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a1 + 8) = v9;
  swift_bridgeObjectRelease();
  v10 = *((_QWORD *)a2 + 10);
  *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a1 + 10) = v10;
  swift_bridgeObjectRelease();
  v11 = (void *)*((_QWORD *)a1 + 12);
  v12 = *((_QWORD *)a2 + 12);
  *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a1 + 12) = v12;

  v13 = (void *)*((_QWORD *)a1 + 13);
  *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);

  v14 = (int *)type metadata accessor for MedicalIDData();
  v15 = v14[13];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = sub_2416B9B50();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v106 = v20;
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    sub_2415A0A74(0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v16, v17, v18);
LABEL_7:
  v24 = v14[14];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = v20(&a1[v24], 1, v18);
  v28 = v20(v26, 1, v18);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v25, v26, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    sub_2415A0A74(0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v25, v26, v18);
LABEL_13:
  v30 = v14[15];
  v31 = &a1[v30];
  v32 = (uint64_t *)&a2[v30];
  v34 = *v32;
  v33 = v32[1];
  *(_QWORD *)v31 = v34;
  *((_QWORD *)v31 + 1) = v33;
  swift_bridgeObjectRelease();
  v35 = v14[16];
  v36 = &a1[v35];
  v37 = (uint64_t *)&a2[v35];
  v39 = *v37;
  v38 = v37[1];
  *(_QWORD *)v36 = v39;
  *((_QWORD *)v36 + 1) = v38;
  swift_bridgeObjectRelease();
  a1[v14[17]] = a2[v14[17]];
  a1[v14[18]] = a2[v14[18]];
  v40 = v14[19];
  v41 = (uint64_t)&a1[v40];
  v42 = &a2[v40];
  v43 = *(_QWORD *)&a1[v40 + 8];
  v104 = a3;
  v105 = v19;
  if (v43 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v41 = *(_OWORD *)v42;
    goto LABEL_18;
  }
  v44 = *((_QWORD *)v42 + 1);
  if (v44 >> 60 == 15)
  {
    sub_2415A1B38(v41);
    goto LABEL_16;
  }
  v45 = *(_QWORD *)v41;
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *(_QWORD *)(v41 + 8) = v44;
  sub_2415A0DAC(v45, v43);
LABEL_18:
  v46 = v14[20];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v49 = sub_2416B9A18();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  v52 = v51(v47, 1, v49);
  v53 = v51(v48, 1, v49);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v49);
LABEL_23:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v50 + 40))(v47, v48, v49);
LABEL_24:
  v55 = v14[21];
  v56 = *(void **)&a1[v55];
  *(_QWORD *)&a1[v55] = *(_QWORD *)&a2[v55];

  v57 = v14[22];
  v58 = &a1[v57];
  v59 = &a2[v57];
  v60 = v106(&a1[v57], 1, v18);
  v61 = v106(v59, 1, v18);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v58, v59, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v58, 0, 1, v18);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v58, v18);
LABEL_29:
    sub_2415A0A74(0);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v105 + 40))(v58, v59, v18);
LABEL_30:
  v63 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v64 = v63[5];
  v65 = &a1[v64];
  v66 = &a2[v64];
  v67 = sub_2416B9C70();
  v68 = *(_QWORD *)(v67 - 8);
  (*(void (**)(char *, char *, uint64_t))(v68 + 40))(v65, v66, v67);
  v69 = v63[6];
  v70 = &a1[v69];
  v71 = &a2[v69];
  v72 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 40))(v70, v71, v72);
  v73 = v63[7];
  v74 = *(void **)&a1[v73];
  *(_QWORD *)&a1[v73] = *(_QWORD *)&a2[v73];

  v75 = v63[8];
  v76 = *(void **)&a1[v75];
  *(_QWORD *)&a1[v75] = *(_QWORD *)&a2[v75];

  v77 = v63[9];
  v78 = &a1[v77];
  v79 = (uint64_t *)&a2[v77];
  v81 = *v79;
  v80 = v79[1];
  *(_QWORD *)v78 = v81;
  *((_QWORD *)v78 + 1) = v80;
  swift_bridgeObjectRelease();
  v82 = v104[5];
  v83 = &a1[v82];
  v84 = &a2[v82];
  *(_QWORD *)&a1[v82] = *(_QWORD *)&a2[v82];
  swift_release();
  *((_QWORD *)v83 + 1) = *((_QWORD *)v84 + 1);
  swift_release();
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v86 = *(int *)(v85 + 32);
  v87 = &v83[v86];
  v88 = &v84[v86];
  LODWORD(v71) = v106(&v83[v86], 1, v18);
  v89 = v106(v88, 1, v18);
  if ((_DWORD)v71)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v87, v88, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v87, 0, 1, v18);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v87, v18);
LABEL_35:
    sub_2415A0A74(0);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v105 + 40))(v87, v88, v18);
LABEL_36:
  v91 = v104[6];
  v92 = &a1[v91];
  v93 = &a2[v91];
  v94 = *(_QWORD *)&a1[v91];
  v95 = *(_QWORD *)&a2[v91];
  if (v94)
  {
    if (v95)
    {
      v96 = *((_QWORD *)v93 + 1);
      *(_QWORD *)v92 = v95;
      *((_QWORD *)v92 + 1) = v96;
      swift_release();
      goto LABEL_43;
    }
    swift_release();
  }
  else if (v95)
  {
    v97 = *((_QWORD *)v93 + 1);
    *(_QWORD *)v92 = v95;
    *((_QWORD *)v92 + 1) = v97;
    goto LABEL_43;
  }
  *(_OWORD *)v92 = *(_OWORD *)v93;
LABEL_43:
  if (a1 != a2)
  {
    v98 = v104[7];
    v99 = &a1[v98];
    v100 = &a2[v98];
    sub_2415A6154((uint64_t)&a1[v98], (uint64_t (*)(_QWORD))sub_24164257C);
    sub_24164257C(0);
    v102 = v101;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v99, v100, v67);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_24164421C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_241644228(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;

  v6 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    sub_24159D6B0(0, &qword_25713A1D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], MEMORY[0x24BDEB580]);
    v11 = v15;
    v10 = *(_QWORD *)(v15 - 8);
    v12 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(_QWORD *)(a1 + a3[6]);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  v14 = v13 - 1;
  if (v14 < 0)
    v14 = -1;
  return (v14 + 1);
}

uint64_t sub_241644330()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_24164433C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(_QWORD *)(a1 + a4[6]) = a2;
        return;
      }
      sub_24159D6B0(0, &qword_25713A1D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], MEMORY[0x24BDEB580]);
      v10 = v16;
      v14 = *(_QWORD *)(v16 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for EditDateOfBirthCellView()
{
  uint64_t result;

  result = qword_25713DBC0;
  if (!qword_25713DBC0)
    return swift_getSingletonMetadata();
  return result;
}

void sub_241644470()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for MedicalIDPersonalInfoViewModel();
  if (v0 <= 0x3F)
  {
    sub_24159D6B0(319, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    if (v1 <= 0x3F)
    {
      sub_24164257C(319);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t sub_241644530()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_241644540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = type metadata accessor for EditDateOfBirthCellView();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159F83C();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2416BCC80;
  v5 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  v6 = (_QWORD *)(v0 + *(int *)(v5 + 36));
  v7 = v6[1];
  *(_QWORD *)(v4 + 32) = *v6;
  *(_QWORD *)(v4 + 40) = v7;
  *(_QWORD *)(v4 + 48) = 0x6942664F65746144;
  *(_QWORD *)(v4 + 56) = 0xEB00000000687472;
  swift_bridgeObjectRetain();
  v8 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v9 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v9)
  {
    sub_241644CA8(v0, (uint64_t)v3);
LABEL_5:
    v10 = *(_QWORD *)&v3[*(int *)(v5 + 36)];
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  v10 = sub_2416BB128();
  v12 = v11;

  sub_241644CA8(v0, (uint64_t)v3);
  if (!v12)
    goto LABEL_5;
LABEL_6:
  sub_2415A6154((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for EditDateOfBirthCellView);
  return v10;
}

uint64_t sub_24164469C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v40 = a1;
  v3 = type metadata accessor for EditDateOfBirthCellView();
  v38 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v39 = v4;
  v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x24BDAC7A8](v6);
  v37 = (uint64_t)v33 - v7;
  sub_2416BAE34();
  v8 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v8);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v9 = (void *)qword_25713A038;
  v10 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v10);
  v11 = v9;
  sub_2416B9C04();
  v12 = sub_2416BB134();
  v34 = v13;
  v35 = v12;
  v14 = sub_2416B9B50();
  v36 = v33;
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MedicalIDPersonalInfoViewModel.defaultDateOfBirth()(v17);
  sub_2415A0A74(0);
  v33[1] = v33;
  v19 = *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v22 = v21(v20, 1, 1, v14);
  v33[0] = v33;
  MEMORY[0x24BDAC7A8](v22);
  sub_2416B9B44();
  v21(v20, 0, 1, v14);
  v23 = (uint64_t *)(v2 + *(int *)(v3 + 24));
  v24 = (char *)*v23;
  v25 = v23[1];
  sub_2415A4818(*v23);
  v26 = sub_241644540();
  v28 = v27;
  sub_241644CA8(v2, (uint64_t)v5);
  v29 = (uint64_t)v5;
  v30 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  v31 = swift_allocObject();
  sub_2415A85BC(v29, v31 + v30, (uint64_t (*)(_QWORD))type metadata accessor for EditDateOfBirthCellView);
  return sub_2415F8678(v37, v35, v34, (uint64_t)v17, (uint64_t)v20, (uint64_t)v20, 1, v24, v40, v25, v26, v28, (uint64_t)sub_241645010, v31);
}

void sub_241644A30(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v24 = a2;
  v25 = a1;
  sub_2415E40F8();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416BA4C8();
  if (qword_257139300 != -1)
    swift_once();
  v5 = (id)qword_25713A038;
  v6 = sub_2416BA9CC();
  v8 = v7;
  v10 = v9 & 1;
  v26 = sub_2416BAC18();
  v11 = sub_2416BA990();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  sub_2415A431C(v6, v8, v10);
  swift_release();
  swift_bridgeObjectRelease();
  v26 = v11;
  v27 = v13;
  v18 = v15 & 1;
  v28 = v15 & 1;
  v29 = v17;
  sub_24159F83C();
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v19 + 32) = sub_241644540();
  *(_QWORD *)(v19 + 40) = v20;
  *(_QWORD *)(v19 + 48) = 6579265;
  *(_QWORD *)(v19 + 56) = 0xE300000000000000;
  v21 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v22 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v22)
  {
    sub_2416BB128();

    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v11, v13, v18);
    swift_bridgeObjectRelease();
    sub_2415A85BC((uint64_t)v4, v24, (uint64_t (*)(_QWORD))sub_2415E40F8);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_241644CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EditDateOfBirthCellView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_241644CEC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = (int *)type metadata accessor for EditDateOfBirthCellView();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v3 = (int *)type metadata accessor for MedicalIDData();
  v4 = v2 + v3[13];
  v5 = sub_2416B9B50();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = v2 + v3[14];
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (uint64_t *)(v2 + v3[19]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_2415A0DAC(*v9, v10);
  v11 = v2 + v3[20];
  v12 = sub_2416B9A18();
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);

  v14 = v2 + v3[22];
  if (!v7(v14, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  v15 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v16 = v2 + v15[5];
  v17 = sub_2416B9C70();
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v18(v16, v17);
  v19 = v2 + v15[6];
  v20 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);

  swift_bridgeObjectRelease();
  v21 = v2 + v1[5];
  swift_release();
  swift_release();
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v23 = v21 + *(int *)(v22 + 32);
  if (!v7(v23, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v23, v5);
  if (*(_QWORD *)(v2 + v1[6]))
    swift_release();
  v24 = v2 + v1[7];
  sub_24164257C(0);
  if (swift_getEnumCaseMultiPayload() == 1)
    v18(v24, v17);
  else
    swift_release();
  return swift_deallocObject();
}

void sub_241645010(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EditDateOfBirthCellView() - 8) + 80);
  sub_241644A30(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_24164504C()
{
  return sub_24159CE88(qword_25713DC00, (uint64_t (*)(uint64_t))sub_2415FCB3C, (uint64_t)&unk_2416C0110);
}

uint64_t *sub_241645078(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  _QWORD *v21;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v18 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v18 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    v9 = a2[9];
    a1[8] = a2[8];
    a1[9] = v9;
    v10 = a2[11];
    a1[10] = a2[10];
    a1[11] = v10;
    v12 = (void *)a2[12];
    v11 = (void *)a2[13];
    a1[12] = (uint64_t)v12;
    a1[13] = (uint64_t)v11;
    v13 = a2[15];
    v14 = *(int *)(a3 + 20);
    v20 = (uint64_t *)((char *)a2 + v14);
    v21 = (uint64_t *)((char *)a1 + v14);
    a1[14] = a2[14];
    a1[15] = v13;
    sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v12;
    v16 = v11;
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = sub_2416BA144();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v21, v20, v17);
    }
    else
    {
      *v21 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t sub_24164520C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v5 = sub_2416BA144();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_2416452D8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  v11 = (void *)a2[12];
  v10 = (void *)a2[13];
  a1[12] = v11;
  a1[13] = v10;
  v12 = a2[15];
  v13 = *(int *)(a3 + 20);
  v18 = (_QWORD *)((char *)a2 + v13);
  v19 = (_QWORD *)((char *)a1 + v13);
  a1[14] = a2[14];
  a1[15] = v12;
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = v11;
  v15 = v10;
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = sub_2416BA144();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v19, v18, v16);
  }
  else
  {
    *v19 = *v18;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *sub_24164543C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (void *)a2[12];
  v7 = (void *)a1[12];
  a1[12] = v6;
  v8 = v6;

  v9 = (void *)a1[13];
  v10 = (void *)a2[13];
  a1[13] = v10;
  v11 = v10;

  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 20);
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    v15 = (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50];
    v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)a1 + v12, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, &qword_25713A5E0, v15, v16);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = sub_2416BA144();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v13, v14, v17);
    }
    else
    {
      *v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_24164562C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  v5 = a2[7];
  a1[6] = a2[6];
  a1[7] = v5;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  a1[2] = a2[2];
  a1[3] = v7;
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v12 = v11;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = sub_2416BA144();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v9, v10, v13);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_241645700(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t (*v18)(uint64_t);
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  swift_bridgeObjectRelease();
  v11 = a2[11];
  a1[10] = a2[10];
  a1[11] = v11;
  swift_bridgeObjectRelease();
  v12 = (void *)a1[12];
  a1[12] = a2[12];

  v13 = (void *)a1[13];
  a1[13] = a2[13];

  v14 = a2[15];
  a1[14] = a2[14];
  a1[15] = v14;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v15 = *(int *)(a3 + 20);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50];
    v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)a1 + v15, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, &qword_25713A5E0, v18, v19);
    v21 = v20;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v22 = sub_2416BA144();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v16, v17, v22);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_24164587C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_241645888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 96);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_24159D6B0(0, qword_25713C260, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], MEMORY[0x24BDEB580]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_24164591C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_241645928(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 96) = (a2 - 1);
  }
  else
  {
    sub_24159D6B0(0, qword_25713C260, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], MEMORY[0x24BDEB580]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ContactLabelView()
{
  uint64_t result;

  result = qword_25713DC60;
  if (!qword_25713DC60)
    return swift_getSingletonMetadata();
  return result;
}

void sub_2416459F0()
{
  unint64_t v0;

  sub_24159D6B0(319, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_241645A7C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_241645A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  sub_24164695C();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v14 - v8;
  *(_QWORD *)v9 = sub_2416BA51C();
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  sub_241646CC4();
  sub_241645B90(a1, &v9[*(int *)(v10 + 44)]);
  sub_2415BEF64((uint64_t)v9, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_24164695C);
  sub_2415BEF64((uint64_t)v7, a2, (uint64_t (*)(_QWORD))sub_24164695C);
  sub_2416468F8();
  v12 = a2 + *(int *)(v11 + 48);
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  sub_2415A6154((uint64_t)v9, (uint64_t (*)(_QWORD))sub_24164695C);
  return sub_2415A6154((uint64_t)v7, (uint64_t (*)(_QWORD))sub_24164695C);
}

uint64_t sub_241645B90@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  unsigned int v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t);
  uint64_t result;
  _QWORD v91[2];
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t KeyPath;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;

  v98 = a2;
  sub_241646B80();
  v97 = v3;
  v96 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v93 = (char *)v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_24159D6B0(0, &qword_25713DCE0, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v105 = (uint64_t)v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v103 = (uint64_t)v91 - v10;
  sub_241608F0C(0, (unint64_t *)&qword_25713B320, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
  v100 = v11;
  v99 = (_QWORD *)*(v11 - 1);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v95 = (char *)v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v94 = (uint64_t)v91 - v14;
  sub_241608458();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v104 = (uint64_t)v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v91 - v18;
  sub_24159D6B0(0, &qword_25713B7D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678], v5);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v91 - v21;
  v23 = sub_2416BA90C();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(a1 + 88);
  if (v27)
  {
    v28 = *(_QWORD *)(a1 + 112);
    v29 = *(_QWORD *)(a1 + 120);
    v114 = *(_QWORD *)(a1 + 80);
    v115 = v28;
    (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v26, *MEMORY[0x24BDF1860], v23);
    v30 = sub_2416BA888();
    v31 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678];
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v22, 1, 1, v30);
    swift_bridgeObjectRetain();
    v108 = v29;
    swift_bridgeObjectRetain();
    sub_2416BA894();
    v113 = sub_2416BA8A0();
    sub_2415CCAFC((uint64_t)v22, &qword_25713B7D0, v31, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    KeyPath = swift_getKeyPath();
    v32 = sub_2416BA660();
    v33 = sub_2416BA834();
    if (qword_2571393B0 != -1)
      swift_once();
    sub_2416B9EF8();
    v102 = v34;
    v101 = v35;
    v111 = v36;
    v110 = v37;
    v107 = v33;
    v106 = v32;
  }
  else
  {
    v114 = 0;
    v115 = 0;
    v108 = 0;
    KeyPath = 0;
    v113 = 0;
    v106 = 0;
    v107 = 0;
    v102 = 0;
    v101 = 0;
    v111 = 0;
    v110 = 0;
  }
  v116 = v27;
  v38 = *(_QWORD *)a1;
  v39 = *(_QWORD *)(a1 + 8);
  v109 = v19;
  if (!v39)
  {
    v54 = 1;
LABEL_10:
    ((void (*)(char *, uint64_t, uint64_t, _QWORD *))v99[7])(v19, v54, 1, v100);
    v55 = *(_QWORD *)(a1 + 56);
    if (v55)
    {
      v56 = *(char **)(a1 + 48);
      v57 = sub_2416B9AB4();
      v100 = v91;
      v58 = *(_QWORD *)(v57 - 8);
      v59 = *(_QWORD *)(v58 + 64);
      MEMORY[0x24BDAC7A8](v57);
      v60 = (v59 + 15) & 0xFFFFFFFFFFFFFFF0;
      v94 = (uint64_t)v91 - v60;
      sub_24159D6B0(0, (unint64_t *)&qword_25713ADA8, v61, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v99 = v91;
      MEMORY[0x24BDAC7A8](v62);
      v64 = (char *)v91 - v63;
      v65 = *(_QWORD *)(a1 + 96);
      v66 = *(_QWORD *)(a1 + 120);
      v117 = v38;
      v118 = v39;
      v67 = *(_OWORD *)(a1 + 32);
      v119 = *(_OWORD *)(a1 + 16);
      v120 = v67;
      v95 = v56;
      v121 = v56;
      v122 = v55;
      v68 = *(_OWORD *)(a1 + 80);
      v123 = *(_OWORD *)(a1 + 64);
      v124 = v68;
      v125 = v65;
      v126 = *(_OWORD *)(a1 + 104);
      v127 = v66;
      sub_2415D9E34((uint64_t)v64);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v64, 1, v57) != 1)
      {
        v70 = v94;
        v71 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v58 + 32))(v94, v64, v57);
        v99 = v91;
        MEMORY[0x24BDAC7A8](v71);
        v72 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 16))((char *)v91 - v60, v70, v57);
        MEMORY[0x24BDAC7A8](v72);
        sub_241646BE0();
        sub_241646C44();
        v73 = v93;
        sub_2416BA930();
        (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v70, v57);
        v74 = v96;
        v69 = v103;
        v75 = v97;
        (*(void (**)(uint64_t, char *, uint64_t))(v96 + 32))(v103, v73, v97);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v74 + 56))(v69, 0, 1, v75);
        v19 = v109;
        goto LABEL_15;
      }
      sub_2415CCAFC((uint64_t)v64, (unint64_t *)&qword_25713ADA8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAB8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v19 = v109;
    }
    v69 = v103;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 56))(v103, 1, 1, v97);
LABEL_15:
    v76 = v104;
    sub_2415BEF64((uint64_t)v19, v104, (uint64_t (*)(_QWORD))sub_241608458);
    sub_241646D40(v69, v105);
    v77 = v98;
    v78 = v115;
    v79 = v116;
    *v98 = v114;
    v77[1] = v79;
    v115 = v78;
    v80 = v108;
    v77[2] = v78;
    v77[3] = v80;
    v82 = KeyPath;
    v81 = v113;
    v77[4] = KeyPath;
    v77[5] = v81;
    KeyPath = v82;
    v113 = v81;
    v83 = v107;
    v77[6] = v106;
    v77[7] = v83;
    v84 = v101;
    v77[8] = v102;
    v77[9] = v84;
    v85 = v110;
    v77[10] = v111;
    v77[11] = v85;
    v110 = v85;
    *((_BYTE *)v77 + 96) = 0;
    sub_2416469F4();
    v87 = v86;
    sub_2415BEF64(v76, (uint64_t)v77 + *(int *)(v86 + 48), (uint64_t (*)(_QWORD))sub_241608458);
    v88 = v105;
    sub_241646D40(v105, (uint64_t)v77 + *(int *)(v87 + 64));
    sub_241646D9C(v114, v116);
    v89 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
    sub_2415CCAFC(v103, &qword_25713DCE0, (uint64_t (*)(uint64_t))sub_241646B80, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_2415A6154((uint64_t)v109, (uint64_t (*)(_QWORD))sub_241608458);
    sub_2415CCAFC(v88, &qword_25713DCE0, (uint64_t (*)(uint64_t))sub_241646B80, v89);
    sub_2415A6154(v104, (uint64_t (*)(_QWORD))sub_241608458);
    return sub_241646DEC(v114, v116);
  }
  v92 = v38;
  v117 = v38;
  v118 = v39;
  sub_2415C343C();
  swift_bridgeObjectRetain();
  v40 = MEMORY[0x24BEE0D00];
  v41 = sub_2416BA9D8();
  v43 = v42;
  v117 = v41;
  v118 = v42;
  v45 = v44 & 1;
  LOBYTE(v119) = v44 & 1;
  v91[1] = v46;
  *((_QWORD *)&v119 + 1) = v46;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, v40, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_2416BCC80;
  v48 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(v47 + 32) = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(v47 + 40) = v48;
  *(_QWORD *)(v47 + 48) = 1701667150;
  *(_QWORD *)(v47 + 56) = 0xE400000000000000;
  swift_bridgeObjectRetain();
  v49 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v50 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v50)
  {
    sub_2416BB128();

    v51 = v95;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v41, v43, v45);
    swift_bridgeObjectRelease();
    v52 = (uint64_t)v51;
    v53 = v94;
    sub_2415E4154(v52, v94);
    v19 = v109;
    sub_2415E4154(v53, (uint64_t)v109);
    v54 = 0;
    v38 = v92;
    goto LABEL_10;
  }
  result = sub_241646DEC(v114, v116);
  __break(1u);
  return result;
}

void sub_241646654(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v25 = a4;
  sub_241646BE0();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a1;
  v27 = a2;
  sub_2415C343C();
  swift_bridgeObjectRetain();
  v10 = MEMORY[0x24BEE0D00];
  v11 = sub_2416BA9D8();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  KeyPath = swift_getKeyPath();
  v26 = v11;
  v27 = v13;
  v19 = v15 & 1;
  v28 = v19;
  v29 = v17;
  v30 = KeyPath;
  v31 = 0;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, v10, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_2416BCC80;
  v21 = *(_QWORD *)(a3 + 120);
  *(_QWORD *)(v20 + 32) = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(v20 + 40) = v21;
  *(_QWORD *)(v20 + 48) = 0x7265626D754ELL;
  *(_QWORD *)(v20 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  v22 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v23 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v23)
  {
    sub_2416BB128();

    sub_2415EF7CC();
    sub_2415F1DD8();
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v11, v13, v19);
    swift_release();
    swift_bridgeObjectRelease();
    sub_241646E58((uint64_t)v9, v25);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24164683C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = sub_2416BA468();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  sub_24164687C();
  return sub_241645A8C(v1, a1 + *(int *)(v3 + 44));
}

void sub_24164687C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DC98)
  {
    sub_24159D6B0(255, &qword_25713DCA0, (uint64_t (*)(uint64_t))sub_2416468F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DC98);
  }
}

void sub_2416468F8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713DCA8)
  {
    sub_24164695C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713DCA8);
  }
}

void sub_24164695C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DCB0)
  {
    sub_24159D6B0(255, &qword_25713DCB8, (uint64_t (*)(uint64_t))sub_2416469F4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2415A3F2C(&qword_25713DCF0, &qword_25713DCB8, (uint64_t (*)(uint64_t))sub_2416469F4);
    v0 = sub_2416BADF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DCB0);
  }
}

void sub_2416469F4()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  unint64_t TupleTypeMetadata3;
  uint64_t v2;

  if (!qword_25713DCC0)
  {
    v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
    sub_24159D6B0(255, &qword_25713DCC8, (uint64_t (*)(uint64_t))sub_241646AA8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_241608458();
    sub_24159D6B0(255, &qword_25713DCE0, (uint64_t (*)(uint64_t))sub_241646B80, v0);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v2)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713DCC0);
  }
}

void sub_241646AA8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DCD0)
  {
    sub_241646B04();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DCD0);
  }
}

void sub_241646B04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DCD8)
  {
    sub_241608F0C(255, &qword_25713C3E8, (void (*)(uint64_t))sub_2415A3F74);
    sub_2415EF9C8();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DCD8);
  }
}

void sub_241646B80()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DCE8)
  {
    sub_241646BE0();
    sub_241646C44();
    v0 = sub_2416BA93C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DCE8);
  }
}

void sub_241646BE0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B778)
  {
    sub_2415EF7CC();
    sub_2416BA768();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B778);
  }
}

unint64_t sub_241646C44()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713D870;
  if (!qword_25713D870)
  {
    sub_241646BE0();
    v2 = v1;
    v3[0] = sub_2415F1DD8();
    v3[1] = sub_24159CE88(&qword_257139D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713D870);
  }
  return result;
}

void sub_241646CC4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DCF8)
  {
    sub_24159D6B0(255, &qword_25713DCB8, (uint64_t (*)(uint64_t))sub_2416469F4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DCF8);
  }
}

uint64_t sub_241646D40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, &qword_25713DCE0, (uint64_t (*)(uint64_t))sub_241646B80, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_241646D9C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_241646DEC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_241646E3C(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_241646654(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_241646E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_241646BE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_241646E9C()
{
  return sub_24159CE88(&qword_25713DD00, (uint64_t (*)(uint64_t))sub_241646EC8, MEMORY[0x24BDF4498]);
}

void sub_241646EC8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DD08)
  {
    sub_24159D6B0(255, &qword_25713DCA0, (uint64_t (*)(uint64_t))sub_2416468F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2415A3F2C(qword_25713DD10, &qword_25713DCA0, (uint64_t (*)(uint64_t))sub_2416468F8);
    v0 = sub_2416BAD8C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DD08);
  }
}

id static MIUIDisplayConfiguration.mockDisplayConfiguration()()
{
  return objc_msgSend(objc_allocWithZone((Class)MIUIDisplayConfiguration), sel_initWithEntryPoint_isEditingAvailable_isDeletionAvailable_shouldShowDonateLifeRegistrationIfAvailable_isShowWhenLockedVisible_isShareDuringEmergencyCallVisible_accessPoint_, 0, 1, 1, 1, 1, 1, 0);
}

uint64_t sub_241646FAC(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x24BDAC7A8](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - v16;
  v18 = sub_2416BB308();
  if (!v18)
    return sub_2416BB218();
  v19 = v18;
  v25 = v15;
  v39 = sub_2416BB578();
  v32 = sub_2416BB584();
  sub_2416BB53C();
  v36 = v17;
  result = sub_2416BB2FC();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))sub_2416BB320();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      sub_2416BB56C();
      sub_2416BB314();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

uint64_t Array<A>.withoutDuplicates(preserveOrder:)(char a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[16];
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if ((a1 & 1) != 0)
  {
    v6 = sub_2416BB23C();
    MEMORY[0x2426994BC](MEMORY[0x24BEE12C8], v6);
    v7 = sub_2416BB1C4();
    v30 = v31;
    MEMORY[0x24BDAC7A8](v7);
    v28 = a3;
    v29 = a4;
    v8 = sub_2416BB5B4();
    v10 = _s14OrderedElementVMa(0, (uint64_t)a3, a4, v9);
    v11 = MEMORY[0x2426994BC](MEMORY[0x24BEE2FC0], v8);
    v12 = MEMORY[0x24BEE4078];
    v13 = MEMORY[0x24BEE40A8];
    sub_241647674((void (*)(char *, char *))sub_241647658, (uint64_t)v27, v8, v10, MEMORY[0x24BEE4078], v11, MEMORY[0x24BEE40A8], v14);
    swift_bridgeObjectRelease();
    MEMORY[0x2426994BC](&unk_2416C0CA0, v10);
    v15 = sub_241647B8C();
    v16 = swift_bridgeObjectRelease();
    v31 = v15;
    MEMORY[0x24BDAC7A8](v16);
    v28 = a3;
    v29 = a4;
    v17 = sub_2416BB2D8();
    MEMORY[0x2426994BC](MEMORY[0x24BEE1718], v17);
    v18 = sub_2416BB1D0();
    v19 = swift_bridgeObjectRelease();
    v31 = v18;
    MEMORY[0x24BDAC7A8](v19);
    v28 = a3;
    v29 = a4;
    v20 = sub_2416BB23C();
    v21 = MEMORY[0x2426994BC](MEMORY[0x24BEE12E0], v20);
    v23 = sub_241646FAC((void (*)(char *, char *))sub_241647C50, (uint64_t)v27, v20, a3, v12, v21, v13, v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = sub_2416BB23C();
    swift_bridgeObjectRetain();
    MEMORY[0x2426994BC](MEMORY[0x24BEE12C8], v24);
    v31 = sub_2416BB2E4();
    v25 = sub_2416BB2D8();
    MEMORY[0x2426994BC](MEMORY[0x24BEE1718], v25);
    return sub_2416BB248();
  }
  return v23;
}

uint64_t sub_241647574@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = *(int *)(MEMORY[0x24BDAC7A8](TupleTypeMetadata2) + 48);
  v11 = (char *)&v17 + v10 - v9;
  v12 = (char *)a1 + v10;
  v13 = *a1;
  v14 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a4, v11, a2);
  result = _s14OrderedElementVMa(0, a2, a3, v15);
  *(_QWORD *)(a4 + *(int *)(result + 36)) = v13;
  return result;
}

uint64_t sub_241647658@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_241647574(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_241647674(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v52 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = sub_2416BB434();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v49 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v37 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v37[1] = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x24BDAC7A8](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = sub_2416BB1B8();
  v57 = sub_2416BB578();
  v53 = sub_2416BB584();
  sub_2416BB53C();
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = sub_2416BB1AC();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_2416BB440();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v24, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      sub_2416BB56C();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  sub_2416BB440();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_2416BB56C();
      sub_2416BB440();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

uint64_t _s14OrderedElementVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s14OrderedElementVMn);
}

uint64_t sub_241647B8C()
{
  uint64_t v0;

  v0 = sub_2416BB23C();
  swift_bridgeObjectRetain();
  MEMORY[0x2426994BC](MEMORY[0x24BEE12C8], v0);
  return sub_2416BB2E4();
}

BOOL sub_241647C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;

  v7 = _s14OrderedElementVMa(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return *(_QWORD *)(a1 + *(int *)(v7 + 36)) < *(_QWORD *)(a2 + *(int *)(v7 + 36));
}

uint64_t sub_241647C50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, a1);
}

uint64_t sub_241647C88()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_241647D00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_241647DB0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_241647DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_241647E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_241647E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_241647ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_241647F30(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_241647FA0 + 4 * byte_2416C0C40[v8]))();
}

void sub_241647FF8(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_2416480E0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_2416480E8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2416480F0);
}

void sub_24164810C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_241648114()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_24164811C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x241648124);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t sub_24164813C()
{
  return sub_2416BB05C();
}

BOOL sub_241648148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  _s14OrderedElementVMa(0, a3, a4, a4);
  v4 = sub_2416481A0();
  return v4 == sub_2416481A0();
}

uint64_t sub_2416481A0()
{
  sub_2416BB6BC();
  sub_2416BB05C();
  return sub_2416BB6EC();
}

uint64_t sub_2416481EC()
{
  sub_2416BB6BC();
  sub_24164813C();
  return sub_2416BB6EC();
}

BOOL sub_24164822C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_241648148(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void sub_241648238()
{
  JUMPOUT(0x2426994BCLL);
}

uint64_t *destroy for ProfileImageView(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if (v1 >> 60 != 15)
    return (uint64_t *)sub_2415A0DAC(*result, v1);
  return result;
}

uint64_t _s11MedicalIDUI16ProfileImageViewVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    sub_2415A0A90(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for ProfileImageView(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *(_QWORD *)a2;
      sub_2415A0A90(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_2415A0DAC(v7, v8);
      return a1;
    }
    sub_2415A1B38((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v5 = *(_QWORD *)a2;
  sub_2415A0A90(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

uint64_t *assignWithTake for ProfileImageView(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_2415A0DAC(v6, v4);
      return a1;
    }
    sub_2415A1B38((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for ProfileImageView(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 12);
  v3 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ProfileImageView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = a2 - 12;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProfileImageView()
{
  return &type metadata for ProfileImageView;
}

uint64_t sub_241648480()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_241648490(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  uint64_t v39;
  _OWORD *v40;
  __int128 v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  id v49;
  unint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;

  v58 = a3;
  sub_24162FFEC();
  v61 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2416BA1D4();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (double *)((char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_2416BACCC();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241648AD0();
  v59 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t *)((char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_241648B2C();
  v60 = v18;
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)&v62 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241648B88(0);
  v57 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v63 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415D8800(0, &qword_25713DDC0, v22, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  MEMORY[0x24BDAC7A8](v23);
  v56 = (char *)&v54 - v24;
  v25 = a2 >> 60;
  if (a2 >> 60 != 15)
  {
    v55 = v8;
    v26 = a1;
    v27 = objc_allocWithZone(MEMORY[0x24BEBD640]);
    sub_2415A0A90(v26, a2);
    v28 = a2;
    v29 = v26;
    v54 = v28;
    v30 = (void *)sub_2416B9AC0();
    v31 = objc_msgSend(v27, sel_initWithData_, v30);

    if (v31)
    {
      sub_2416BACB4();
      sub_2415C3524(v29, v54);
      v8 = v55;
      goto LABEL_6;
    }
    sub_2415C3524(v29, v54);
    v8 = v55;
  }
  sub_2416BACC0();
LABEL_6:
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BDF3FD0], v11);
  v32 = sub_2416BACE4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (qword_257139528 != -1)
    swift_once();
  v33 = 0x6C616E6F73726550;
  v34 = *(double *)&qword_25713DD98 * 0.5;
  v35 = (char *)v10 + *(int *)(v8 + 20);
  v36 = *MEMORY[0x24BDEEB68];
  v37 = sub_2416BA4EC();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v35, v36, v37);
  *v10 = v34;
  v10[1] = v34;
  v38 = MEMORY[0x24BDED998];
  sub_2415BEF64((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(_QWORD))MEMORY[0x24BDED998]);
  *(_WORD *)&v7[*(int *)(v61 + 36)] = 256;
  sub_2415BEF64((uint64_t)v7, (uint64_t)v17 + *(int *)(v59 + 36), (uint64_t (*)(_QWORD))sub_24162FFEC);
  *v17 = v32;
  swift_retain();
  sub_2415A6154((uint64_t)v7, (uint64_t (*)(_QWORD))sub_24162FFEC);
  sub_2415A6154((uint64_t)v10, (uint64_t (*)(_QWORD))v38);
  swift_release();
  sub_2416BAF48();
  sub_2416BA054();
  v39 = v62;
  sub_2415BEF64((uint64_t)v17, v62, (uint64_t (*)(_QWORD))sub_241648AD0);
  v40 = (_OWORD *)(v39 + *(int *)(v60 + 36));
  v41 = v65;
  *v40 = v64;
  v40[1] = v41;
  v40[2] = v66;
  sub_2415A6154((uint64_t)v17, (uint64_t (*)(_QWORD))sub_241648AD0);
  v42 = objc_msgSend((id)objc_opt_self(), sel_secondarySystemFillColor);
  v43 = MEMORY[0x242698478](v42);
  v44 = (uint64_t)v63;
  sub_241648C2C(v39, v25 > 0xE, v43);
  swift_release();
  sub_2415A6154(v39, (uint64_t (*)(_QWORD))sub_241648B2C);
  sub_24159F83C();
  v45 = swift_allocObject();
  v62 = xmmword_2416BCC80;
  *(_OWORD *)(v45 + 16) = xmmword_2416BCC80;
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = v62;
  *(_QWORD *)(v46 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v46 + 40) = 0xE900000000000044;
  v47 = 0xEC0000006F666E49;
  strcpy((char *)(v46 + 48), "PersonalInfo");
  *(_BYTE *)(v46 + 61) = 0;
  *(_WORD *)(v46 + 62) = -5120;
  v48 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v49 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v49)
  {
    v33 = sub_2416BB128();
    v47 = v50;

  }
  *(_QWORD *)(v45 + 32) = v33;
  *(_QWORD *)(v45 + 40) = v47;
  *(_QWORD *)(v45 + 48) = 0x6F746F6850;
  *(_QWORD *)(v45 + 56) = 0xE500000000000000;
  v51 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v52 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v52)
  {
    sub_2416BB128();

    sub_241648E40();
    v53 = (uint64_t)v56;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A6154(v44, (uint64_t (*)(_QWORD))sub_241648B88);
    sub_241649010(v53, v58);
  }
  else
  {
    __break(1u);
  }
}

void sub_241648AC8(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_241648490(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), a1);
}

void sub_241648AD0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DDA0)
  {
    sub_24162FFEC();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DDA0);
  }
}

void sub_241648B2C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DDA8)
  {
    sub_241648AD0();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DDA8);
  }
}

void sub_241648B88(uint64_t a1)
{
  sub_2415D8800(a1, &qword_25713DDB0, (uint64_t (*)(uint64_t))sub_241648BAC, (uint64_t (*)(uint64_t))sub_241648B2C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
}

void sub_241648BAC(uint64_t a1)
{
  sub_2415D8800(a1, &qword_25713DDB8, (uint64_t (*)(uint64_t))sub_241648B2C, (uint64_t (*)(uint64_t))sub_241648BD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
}

void sub_241648BD0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257139CD0)
  {
    v0 = sub_2416BA690();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257139CD0);
  }
}

uint64_t sub_241648C2C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v21;

  sub_241648B2C();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415D8800(0, &qword_25713DDE8, (uint64_t (*)(uint64_t))sub_241648BAC, v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v21 - v11;
  sub_241648BAC(0);
  v14 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v17 = (char *)&v21 - v16;
  if ((a2 & 1) != 0)
  {
    sub_2415BEF64(a1, (uint64_t)&v21 - v16, (uint64_t (*)(_QWORD))sub_241648B2C);
    *(_QWORD *)&v17[*(int *)(v14 + 36)] = a3;
    sub_2415BEF64((uint64_t)v17, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_241648BAC);
    swift_storeEnumTagMultiPayload();
    sub_241648EA8();
    sub_241648F28();
    swift_retain();
    sub_2416BA57C();
    v18 = (uint64_t)v17;
    v19 = (uint64_t (*)(_QWORD))sub_241648BAC;
  }
  else
  {
    sub_2415BEF64(a1, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_241648B2C);
    sub_2415BEF64((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_241648B2C);
    swift_storeEnumTagMultiPayload();
    sub_241648EA8();
    sub_241648F28();
    sub_2416BA57C();
    v18 = (uint64_t)v8;
    v19 = (uint64_t (*)(_QWORD))sub_241648B2C;
  }
  return sub_2415A6154(v18, v19);
}

void sub_241648E30()
{
  qword_25713DD98 = 0x4056000000000000;
}

unint64_t sub_241648E40()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713DDC8;
  if (!qword_25713DDC8)
  {
    sub_241648B88(255);
    v2 = v1;
    v3[0] = sub_241648EA8();
    v3[1] = sub_241648F28();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713DDC8);
  }
  return result;
}

unint64_t sub_241648EA8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713DDD0;
  if (!qword_25713DDD0)
  {
    sub_241648BAC(255);
    v2 = v1;
    v3[0] = sub_241648F28();
    v3[1] = sub_24159CE88((unint64_t *)&qword_25713CCB8, (uint64_t (*)(uint64_t))sub_241648BD0, MEMORY[0x24BDF0710]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713DDD0);
  }
  return result;
}

unint64_t sub_241648F28()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713DDD8;
  if (!qword_25713DDD8)
  {
    sub_241648B2C();
    v2 = v1;
    v3[0] = sub_241648F90();
    v3[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713DDD8);
  }
  return result;
}

unint64_t sub_241648F90()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_25713DDE0;
  if (!qword_25713DDE0)
  {
    sub_241648AD0();
    v2 = v1;
    v3 = sub_24159CE88(&qword_25713D400, (uint64_t (*)(uint64_t))sub_24162FFEC, MEMORY[0x24BDEB950]);
    v4[0] = MEMORY[0x24BDF40E8];
    v4[1] = v3;
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713DDE0);
  }
  return result;
}

uint64_t sub_241649010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415D8800(0, &qword_25713DDC0, (uint64_t (*)(uint64_t))sub_241648B88, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_241649078()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_25713DDF0;
  if (!qword_25713DDF0)
  {
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
    sub_2415D8800(255, &qword_25713DDC0, (uint64_t (*)(uint64_t))sub_241648B88, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v3 = v2;
    v4[0] = sub_241648E40();
    v4[1] = sub_24159CE88(&qword_257139D68, v1, MEMORY[0x24BDF1078]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v3, v4);
    atomic_store(result, (unint64_t *)&qword_25713DDF0);
  }
  return result;
}

uint64_t sub_241649120@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  sub_2415CA770();
  result = sub_2416B9DD8();
  *a1 = result;
  return result;
}

void sub_24164915C()
{
  qword_25713DDF8 = (uint64_t)&unk_251193B28;
}

uint64_t static MIUIEntryPoint.allCases.getter()
{
  return sub_2416491D8(&qword_257139530);
}

uint64_t sub_24164918C@<X0>(_QWORD *a1@<X8>)
{
  return sub_241649424(&qword_257139530, &qword_25713DDF8, a1);
}

void sub_2416491A8()
{
  qword_25713DE00 = (uint64_t)&unk_251193B58;
}

uint64_t static MIUIMedicalIDAccessPoint.allCases.getter()
{
  return sub_2416491D8(&qword_257139538);
}

uint64_t sub_2416491D8(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

unint64_t MIUIMedicalIDAccessPoint.analyticsDisplayName.getter(uint64_t a1)
{
  unint64_t result;

  result = 0xD000000000000016;
  switch(a1)
  {
    case 0:
      result = 0x64657473696C6E55;
      break;
    case 1:
      result = 0x502068746C616548;
      break;
    case 2:
    case 3:
      return result;
    case 4:
      result = 0xD00000000000001CLL;
      break;
    case 5:
      result = 0xD00000000000001FLL;
      break;
    case 6:
      result = 0xD00000000000001CLL;
      break;
    case 7:
      result = 0x532068746C616548;
      break;
    case 8:
      result = 0x7041206863746157;
      break;
    default:
      result = 0x6E776F6E6B6E55;
      break;
  }
  return result;
}

uint64_t sub_241649324()
{
  return sub_24164937C(&qword_25713DE08, &qword_25713DE10, type metadata accessor for MIUIEntryPoint);
}

uint64_t sub_241649350()
{
  return sub_24164937C(&qword_25713DE18, &qword_25713DE20, type metadata accessor for MIUIMedicalIDAccessPoint);
}

uint64_t sub_24164937C(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_2416493BC(255, a2, a3);
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE12E0], v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_2416493BC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_2416BB23C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_241649408@<X0>(_QWORD *a1@<X8>)
{
  return sub_241649424(&qword_257139538, &qword_25713DE00, a1);
}

uint64_t sub_241649424@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for MedicalIDCellPlaceholderTextStyle()
{
  return &type metadata for MedicalIDCellPlaceholderTextStyle;
}

uint64_t sub_241649478()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_241649488()
{
  JUMPOUT(0x2426983C4);
}

void sub_24164949C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_2416BA864();
  if (qword_257139540 != -1)
    swift_once();
  sub_2416B9EF8();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  sub_24164AF34(0, &qword_25713DF00, (void (*)(void))sub_241632174);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a2, a1, v13);
  sub_24164AAC8();
  v15 = a2 + *(int *)(v14 + 36);
  *(_BYTE *)v15 = v4;
  *(_QWORD *)(v15 + 8) = v6;
  *(_QWORD *)(v15 + 16) = v8;
  *(_QWORD *)(v15 + 24) = v10;
  *(_QWORD *)(v15 + 32) = v12;
  *(_BYTE *)(v15 + 40) = 0;
}

uint64_t sub_241649578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  sub_24164A7F0(0, &qword_25713DF68, &qword_25713DF70, (void (*)(void))sub_24164AF8C);
  v4 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v21 - v5;
  sub_24164AFD0();
  v8 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2416BA900();
  KeyPath = swift_getKeyPath();
  sub_24164AF34(0, &qword_25713DF70, (void (*)(void))sub_24164AF8C);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v6, a1, v13);
  v14 = (uint64_t *)&v6[*(int *)(v4 + 36)];
  *v14 = KeyPath;
  v14[1] = v11;
  if (qword_2571395A0 != -1)
    swift_once();
  v15 = qword_2571477E0;
  sub_24164AA50((uint64_t)v6, (uint64_t)v10, &qword_25713DF68, &qword_25713DF70, (void (*)(void))sub_24164AF8C);
  *(_QWORD *)&v10[*(int *)(v8 + 36)] = v15;
  swift_retain();
  sub_24164A730((uint64_t)v6, &qword_25713DF68, &qword_25713DF70, (void (*)(void))sub_24164AF8C);
  v16 = swift_getKeyPath();
  v17 = v22;
  sub_2415BEF64((uint64_t)v10, v22, (uint64_t (*)(_QWORD))sub_24164AFD0);
  sub_24164B06C();
  v19 = v17 + *(int *)(v18 + 36);
  *(_QWORD *)v19 = v16;
  *(_BYTE *)(v19 + 8) = 0;
  return sub_2415A6154((uint64_t)v10, (uint64_t (*)(_QWORD))sub_24164AFD0);
}

uint64_t sub_241649778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  sub_24164AF34(0, &qword_25713DEF8, (void (*)(void))sub_24160E9E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_2416497CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  sub_2416498A0();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24164AF34(0, &qword_25713DE38, (void (*)(void))sub_24160EC10);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, a1, v7);
  LODWORD(a1) = sub_2416BA660();
  sub_2415BEF64((uint64_t)v6, a2, (uint64_t (*)(_QWORD))sub_2416498A0);
  sub_241649914();
  *(_DWORD *)(a2 + *(int *)(v8 + 36)) = a1;
  return sub_2415A6154((uint64_t)v6, (uint64_t (*)(_QWORD))sub_2416498A0);
}

void sub_2416498A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DE30)
  {
    sub_24164AF34(255, &qword_25713DE38, (void (*)(void))sub_24160EC10);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DE30);
  }
}

void sub_241649914()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DE40)
  {
    sub_2416498A0();
    sub_24164A5B0(255, (unint64_t *)&qword_25713B7C8);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DE40);
  }
}

ValueMetadata *type metadata accessor for EditSectionHeaderViewDescriptionStyle()
{
  return &type metadata for EditSectionHeaderViewDescriptionStyle;
}

ValueMetadata *type metadata accessor for EditSectionHeaderViewTitleStyle()
{
  return &type metadata for EditSectionHeaderViewTitleStyle;
}

ValueMetadata *type metadata accessor for MedicalIDCellStyle()
{
  return &type metadata for MedicalIDCellStyle;
}

ValueMetadata *type metadata accessor for MedicalIDCellBodyTextStyle()
{
  return &type metadata for MedicalIDCellBodyTextStyle;
}

uint64_t sub_2416499D0()
{
  return sub_2415A40A4(&qword_25713DE48, (uint64_t (*)(uint64_t))sub_241649914, sub_241649A04, (uint64_t (*)(void))sub_241649A88);
}

uint64_t sub_241649A04()
{
  return sub_2415A40A4(&qword_25713DE50, (uint64_t (*)(uint64_t))sub_2416498A0, (uint64_t (*)(void))sub_241649A28, (uint64_t (*)(void))sub_24160E9E0);
}

unint64_t sub_241649A28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713DE58;
  if (!qword_25713DE58)
  {
    sub_24164AF34(255, &qword_25713DE38, (void (*)(void))sub_24160EC10);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEFB78], v1);
    atomic_store(result, (unint64_t *)&qword_25713DE58);
  }
  return result;
}

unint64_t sub_241649A88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713B7F8;
  if (!qword_25713B7F8)
  {
    sub_24164A5B0(255, (unint64_t *)&qword_25713B7C8);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF0710], v1);
    atomic_store(result, (unint64_t *)&qword_25713B7F8);
  }
  return result;
}

uint64_t sub_241649AE8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_241649AF8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_241649B08()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_241649B18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;

  v43 = a1;
  v50 = a2;
  sub_2415EF9AC(0);
  MEMORY[0x24BDAC7A8](v2);
  v49 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_2416B9F64();
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v44 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24164A7F0(0, &qword_25713DE60, &qword_25713DE68, (void (*)(void))sub_24164A2B4);
  v7 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v41 - v8;
  sub_24164A358(0);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24164A534();
  v16 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24164A5F8(0);
  v47 = *(_QWORD *)(v19 - 8);
  v48 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v42 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_2416BA8B8();
  KeyPath = swift_getKeyPath();
  sub_24164AF34(0, &qword_25713DE68, (void (*)(void))sub_24164A2B4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v9, v43, v23);
  v24 = (uint64_t *)&v9[*(int *)(v7 + 36)];
  *v24 = KeyPath;
  v24[1] = v21;
  sub_2416BA894();
  sub_24164A3EC();
  sub_2416BA9FC();
  sub_24164A730((uint64_t)v9, &qword_25713DE60, &qword_25713DE68, (void (*)(void))sub_24164A2B4);
  v25 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
  v26 = MEMORY[0x242698478](v25);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v18, v14, v11);
  *(_QWORD *)&v18[*(int *)(v16 + 36)] = v26;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v28 = v44;
  v27 = v45;
  v29 = v46;
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v44, *MEMORY[0x24BDEB1C0], v46);
  sub_24164A66C();
  v30 = v42;
  sub_2416BAAC8();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
  sub_2415A6154((uint64_t)v18, (uint64_t (*)(_QWORD))sub_24164A534);
  v31 = sub_2416BA9A8();
  v32 = (uint64_t)v49;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v49, 1, 1, v31);
  v33 = swift_getKeyPath();
  sub_24164A774(0, &qword_25713DEA8, sub_24164A5F8);
  v35 = v50;
  v36 = (uint64_t *)(v50 + *(int *)(v34 + 36));
  sub_24159D6B0(0, &qword_25713B7B8, (uint64_t (*)(uint64_t))sub_2415EF9AC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
  sub_2415BEF64(v32, (uint64_t)v36 + *(int *)(v37 + 28), (uint64_t (*)(_QWORD))sub_2415EF9AC);
  *v36 = v33;
  v39 = v47;
  v38 = v48;
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 16))(v35, v30, v48);
  sub_2415A6154(v32, (uint64_t (*)(_QWORD))sub_2415EF9AC);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v30, v38);
}

uint64_t sub_241649F00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;

  v38 = a1;
  v41 = a2;
  sub_2415EF9AC(0);
  MEMORY[0x24BDAC7A8](v2);
  v40 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24164A7F0(0, &qword_25713DEB0, &qword_25713DEB8, (void (*)(void))sub_24164A878);
  v5 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v36 - v6;
  sub_24164A8BC();
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24164A958();
  v37 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24164A9D4();
  v39 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_2416BA870();
  KeyPath = swift_getKeyPath();
  sub_24164AF34(0, &qword_25713DEB8, (void (*)(void))sub_24164A878);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v7, v38, v20);
  v21 = (uint64_t *)&v7[*(int *)(v5 + 36)];
  *v21 = KeyPath;
  v21[1] = v18;
  v22 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  v23 = MEMORY[0x242698478](v22);
  sub_24164AA50((uint64_t)v7, (uint64_t)v11, &qword_25713DEB0, &qword_25713DEB8, (void (*)(void))sub_24164A878);
  *(_QWORD *)&v11[*(int *)(v9 + 36)] = v23;
  sub_24164A730((uint64_t)v7, &qword_25713DEB0, &qword_25713DEB8, (void (*)(void))sub_24164A878);
  v24 = swift_getKeyPath();
  sub_2415BEF64((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(_QWORD))sub_24164A8BC);
  v25 = &v14[*(int *)(v37 + 36)];
  *(_QWORD *)v25 = v24;
  *((_QWORD *)v25 + 1) = 0;
  v25[16] = 1;
  sub_2415A6154((uint64_t)v11, (uint64_t (*)(_QWORD))sub_24164A8BC);
  v26 = swift_getKeyPath();
  sub_2415BEF64((uint64_t)v14, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_24164A958);
  v27 = &v17[*(int *)(v39 + 36)];
  *(_QWORD *)v27 = v26;
  v27[8] = 0;
  sub_2415A6154((uint64_t)v14, (uint64_t (*)(_QWORD))sub_24164A958);
  v28 = sub_2416BA9A8();
  v29 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v40, 1, 1, v28);
  v30 = swift_getKeyPath();
  sub_24164AAB4(0);
  v32 = v41;
  v33 = (uint64_t *)(v41 + *(int *)(v31 + 36));
  sub_24159D6B0(0, &qword_25713B7B8, (uint64_t (*)(uint64_t))sub_2415EF9AC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
  sub_2415BEF64(v29, (uint64_t)v33 + *(int *)(v34 + 28), (uint64_t (*)(_QWORD))sub_2415EF9AC);
  *v33 = v30;
  sub_2415BEF64((uint64_t)v17, v32, (uint64_t (*)(_QWORD))sub_24164A9D4);
  sub_2415A6154(v29, (uint64_t (*)(_QWORD))sub_2415EF9AC);
  return sub_2415A6154((uint64_t)v17, (uint64_t (*)(_QWORD))sub_24164A9D4);
}

uint64_t sub_24164A2A4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_24164A2B4()
{
  unint64_t result;

  result = qword_25713DE70;
  if (!qword_25713DE70)
  {
    result = MEMORY[0x2426994BC](&unk_2416C102C, &type metadata for EditSectionHeaderViewTitleStyle);
    atomic_store(result, (unint64_t *)&qword_25713DE70);
  }
  return result;
}

void sub_24164A2F8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_24159D7F0(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v5 = sub_2416BA75C();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_24164A358(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_25713DE78)
  {
    sub_24164A7F0(255, &qword_25713DE60, &qword_25713DE68, (void (*)(void))sub_24164A2B4);
    v5[0] = v2;
    v5[1] = sub_24164A3EC();
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF2150], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713DE78);
  }
}

unint64_t sub_24164A3EC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713DE80;
  if (!qword_25713DE80)
  {
    sub_24164A7F0(255, &qword_25713DE60, &qword_25713DE68, (void (*)(void))sub_24164A2B4);
    v2 = v1;
    v3[0] = sub_24164A494();
    v3[1] = sub_24164A4F4(&qword_257139D40, (unint64_t *)&qword_257139D20, &qword_257139D28, MEMORY[0x24BDF1948]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713DE80);
  }
  return result;
}

unint64_t sub_24164A494()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713DE88;
  if (!qword_25713DE88)
  {
    sub_24164AF34(255, &qword_25713DE68, (void (*)(void))sub_24164A2B4);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEFB78], v1);
    atomic_store(result, (unint64_t *)&qword_25713DE88);
  }
  return result;
}

uint64_t sub_24164A4F4(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_24164A2F8(255, a2, a3, a4);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF1028], v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_24164A534()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DE90)
  {
    sub_24164A358(255);
    sub_24164A5B0(255, (unint64_t *)&qword_257139CD0);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DE90);
  }
}

void sub_24164A5B0(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_2416BA690();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_24164A5F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_25713DE98)
  {
    sub_24164A534();
    v5[0] = v2;
    v5[1] = sub_24164A66C();
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF2950], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713DE98);
  }
}

unint64_t sub_24164A66C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  result = qword_25713DEA0;
  if (!qword_25713DEA0)
  {
    sub_24164A534();
    v2 = v1;
    sub_24164A7F0(255, &qword_25713DE60, &qword_25713DE68, (void (*)(void))sub_24164A2B4);
    v4[2] = v3;
    v4[3] = sub_24164A3EC();
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = sub_24161AB14();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713DEA0);
  }
  return result;
}

void sub_24164A718()
{
  qword_25713DE28 = 0x4030000000000000;
}

uint64_t sub_24164A730(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  uint64_t v5;

  sub_24164A7F0(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_24164A774(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    sub_24159D6B0(255, &qword_25713B7B8, (uint64_t (*)(uint64_t))sub_2415EF9AC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    v4 = sub_2416BA150();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_24164A7F0(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_24164AF34(255, a3, a4);
    sub_24164A2F8(255, (unint64_t *)&qword_257139D20, &qword_257139D28, MEMORY[0x24BDF1948]);
    v5 = sub_2416BA150();
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t sub_24164A878()
{
  unint64_t result;

  result = qword_25713DEC0;
  if (!qword_25713DEC0)
  {
    result = MEMORY[0x2426994BC](&unk_2416C0FDC, &type metadata for EditSectionHeaderViewDescriptionStyle);
    atomic_store(result, (unint64_t *)&qword_25713DEC0);
  }
  return result;
}

void sub_24164A8BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DEC8)
  {
    sub_24164A7F0(255, &qword_25713DEB0, &qword_25713DEB8, (void (*)(void))sub_24164A878);
    sub_24164A5B0(255, (unint64_t *)&qword_257139CD0);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DEC8);
  }
}

void sub_24164A958()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DED0)
  {
    sub_24164A8BC();
    sub_24164A2F8(255, &qword_25713DED8, &qword_25713DEE0, MEMORY[0x24BEE1768]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DED0);
  }
}

void sub_24164A9D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DEE8)
  {
    sub_24164A958();
    sub_24159D7F0(255, &qword_25713B788, MEMORY[0x24BDEC3D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DEE8);
  }
}

uint64_t sub_24164AA50(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, void (*a5)(void))
{
  uint64_t v7;

  sub_24164A7F0(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void sub_24164AAB4(uint64_t a1)
{
  sub_24164A774(a1, &qword_25713DEF0, (void (*)(uint64_t))sub_24164A9D4);
}

void sub_24164AAC8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DF08)
  {
    sub_24164AF34(255, &qword_25713DF00, (void (*)(void))sub_241632174);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DF08);
  }
}

ValueMetadata *type metadata accessor for MedicalIDCellHeaderTextStyle()
{
  return &type metadata for MedicalIDCellHeaderTextStyle;
}

unint64_t sub_24164AB50()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  result = qword_25713DF10;
  if (!qword_25713DF10)
  {
    sub_24164A774(255, &qword_25713DEA8, sub_24164A5F8);
    v2 = v1;
    sub_24164A534();
    v4[2] = v3;
    v4[3] = sub_24164A66C();
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = sub_2415EFBA8();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713DF10);
  }
  return result;
}

uint64_t sub_24164ABEC()
{
  return sub_2415A40A4(&qword_25713DF18, (uint64_t (*)(uint64_t))sub_24164AAB4, sub_24164AC20, sub_2415EFBA8);
}

uint64_t sub_24164AC20()
{
  return sub_2415A40A4(&qword_25713DF20, (uint64_t (*)(uint64_t))sub_24164A9D4, (uint64_t (*)(void))sub_24164AC44, (uint64_t (*)(void))sub_2415EFBC4);
}

unint64_t sub_24164AC44()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713DF28;
  if (!qword_25713DF28)
  {
    sub_24164A958();
    v2 = v1;
    v3[0] = sub_2415A40A4(&qword_25713DF30, (uint64_t (*)(uint64_t))sub_24164A8BC, (uint64_t (*)(void))sub_24164ACEC, (uint64_t (*)(void))sub_24161AB14);
    v3[1] = sub_24164A4F4(&qword_25713DF48, &qword_25713DED8, &qword_25713DEE0, MEMORY[0x24BEE1768]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713DF28);
  }
  return result;
}

unint64_t sub_24164ACEC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713DF38;
  if (!qword_25713DF38)
  {
    sub_24164A7F0(255, &qword_25713DEB0, &qword_25713DEB8, (void (*)(void))sub_24164A878);
    v2 = v1;
    v3[0] = sub_24164AD94();
    v3[1] = sub_24164A4F4(&qword_257139D40, (unint64_t *)&qword_257139D20, &qword_257139D28, MEMORY[0x24BDF1948]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713DF38);
  }
  return result;
}

unint64_t sub_24164AD94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713DF40;
  if (!qword_25713DF40)
  {
    sub_24164AF34(255, &qword_25713DEB8, (void (*)(void))sub_24164A878);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEFB78], v1);
    atomic_store(result, (unint64_t *)&qword_25713DF40);
  }
  return result;
}

unint64_t sub_24164ADF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713DF50;
  if (!qword_25713DF50)
  {
    sub_24164AF34(255, &qword_25713DEF8, (void (*)(void))sub_24160E9E0);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEFB78], v1);
    atomic_store(result, (unint64_t *)&qword_25713DF50);
  }
  return result;
}

unint64_t sub_24164AE5C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713DF58;
  if (!qword_25713DF58)
  {
    sub_24164AAC8();
    v2 = v1;
    v3[0] = sub_24164AEC4();
    v3[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713DF58);
  }
  return result;
}

unint64_t sub_24164AEC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713DF60;
  if (!qword_25713DF60)
  {
    sub_24164AF34(255, &qword_25713DF00, (void (*)(void))sub_241632174);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEFB78], v1);
    atomic_store(result, (unint64_t *)&qword_25713DF60);
  }
  return result;
}

uint64_t sub_24164AF24()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_24164AF34(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = sub_2416BA648();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_24164AF8C()
{
  unint64_t result;

  result = qword_25713DF78;
  if (!qword_25713DF78)
  {
    result = MEMORY[0x2426994BC](&unk_2416C1160, &type metadata for MedicalIDCellHeaderTextStyle);
    atomic_store(result, (unint64_t *)&qword_25713DF78);
  }
  return result;
}

void sub_24164AFD0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DF80)
  {
    sub_24164A7F0(255, &qword_25713DF68, &qword_25713DF70, (void (*)(void))sub_24164AF8C);
    sub_24164A5B0(255, (unint64_t *)&qword_257139CD0);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DF80);
  }
}

void sub_24164B06C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713DF88)
  {
    sub_24164AFD0();
    sub_24159D7F0(255, &qword_25713B788, MEMORY[0x24BDEC3D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713DF88);
  }
}

uint64_t sub_24164B0E8()
{
  return sub_2415A40A4(&qword_25713DF90, (uint64_t (*)(uint64_t))sub_24164B06C, sub_24164B11C, (uint64_t (*)(void))sub_2415EFBC4);
}

uint64_t sub_24164B11C()
{
  return sub_2415A40A4(&qword_25713DF98, (uint64_t (*)(uint64_t))sub_24164AFD0, (uint64_t (*)(void))sub_24164B140, (uint64_t (*)(void))sub_24161AB14);
}

unint64_t sub_24164B140()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713DFA0;
  if (!qword_25713DFA0)
  {
    sub_24164A7F0(255, &qword_25713DF68, &qword_25713DF70, (void (*)(void))sub_24164AF8C);
    v2 = v1;
    v3[0] = sub_24164B1E8();
    v3[1] = sub_24164A4F4(&qword_257139D40, (unint64_t *)&qword_257139D20, &qword_257139D28, MEMORY[0x24BDF1948]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713DFA0);
  }
  return result;
}

unint64_t sub_24164B1E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713DFA8;
  if (!qword_25713DFA8)
  {
    sub_24164AF34(255, &qword_25713DF70, (void (*)(void))sub_24164AF8C);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEFB78], v1);
    atomic_store(result, (unint64_t *)&qword_25713DFA8);
  }
  return result;
}

id sub_24164B24C(void *a1)
{
  return objc_msgSend(a1, sel_dismissViewControllerAnimated_completion_, 1, 0);
}

void **sub_24164B260(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = type metadata accessor for MedicalIDMedicalInfoViewModel();
    v9 = *(int *)(v8 + 20);
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_2416B9C70();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v14 = v4;
    v13(v10, v11, v12);
    v15 = *(int *)(v8 + 24);
    v16 = (char *)v7 + v15;
    v17 = (char *)a2 + v15;
    v18 = sub_2416B9C10();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = *(int *)(a3 + 20);
    v20 = *(void **)((char *)a2 + v19);
    *(void **)((char *)v7 + v19) = v20;
    v21 = v20;
  }
  return v7;
}

void sub_24164B354(id *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v4 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v5 = (char *)a1 + *(int *)(v4 + 20);
  v6 = sub_2416B9C70();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)a1 + *(int *)(v4 + 24);
  v8 = sub_2416B9C10();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);

}

void **sub_24164B3E0(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  v6 = *a2;
  *a1 = *a2;
  v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v8 = *(int *)(v7 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2416B9C70();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v13 = v6;
  v12(v9, v10, v11);
  v14 = *(int *)(v7 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = *(int *)(a3 + 20);
  v19 = *(void **)((char *)a2 + v18);
  *(void **)((char *)a1 + v18) = v19;
  v20 = v19;
  return a1;
}

void **sub_24164B4AC(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v10 = *(int *)(v9 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = *(int *)(v9 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = *(int *)(a3 + 20);
  v19 = *(void **)((char *)a2 + v18);
  v20 = *(void **)((char *)a1 + v18);
  *(void **)((char *)a1 + v18) = v19;
  v21 = v19;

  return a1;
}

_QWORD *sub_24164B574(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v7 = *(int *)(v6 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(v6 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void **sub_24164B624(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v6 = *a1;
  *a1 = *a2;

  v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v8 = *(int *)(v7 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(v7 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = *(int *)(a3 + 20);
  v17 = *(void **)((char *)a1 + v16);
  *(void **)((char *)a1 + v16) = *(void **)((char *)a2 + v16);

  return a1;
}

uint64_t sub_24164B6E4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24164B6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_24164B76C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24164B778(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MedicalIDEditAllergiesModalView()
{
  uint64_t result;

  result = qword_25713E008;
  if (!qword_25713E008)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24164B82C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24164B8A0()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_24164B8B0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  id v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v3);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v4 = (void *)qword_25713A038;
  v5 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v5);
  v6 = v4;
  sub_2416B9C04();
  v7 = sub_2416BB134();
  v39 = v8;
  v40 = v7;
  if (qword_257139478 != -1)
    swift_once();
  v37 = qword_257147700;
  v38 = MEMORY[0x24BDAC7A8](*(_QWORD *)algn_257147708);
  swift_bridgeObjectRetain();
  v9 = sub_2416BB098();
  v10 = (void *)qword_25713A038;
  MEMORY[0x24BDAC7A8](v9);
  v11 = v10;
  sub_2416B9C04();
  v12 = sub_2416BB134();
  v35 = v13;
  v36 = v12;
  v14 = *a1;
  v15 = objc_msgSend(*a1, sel_allergyInfo);
  if (v15)
  {
    v16 = v15;
    v17 = sub_2416BB128();
    v19 = v18;

  }
  else
  {
    v17 = 0;
    v19 = 0;
  }
  v20 = objc_msgSend(v14, sel_allergiesListVersion, a1);
  if (v20)
  {

    MEMORY[0x24BDAC7A8](v21);
    v22 = sub_2416BB098();
    v23 = (void *)qword_25713A038;
    MEMORY[0x24BDAC7A8](v22);
    v24 = v23;
    sub_2416B9C04();
    v25 = sub_2416BB134();
    v27 = v26;
  }
  else
  {
    v25 = 0;
    v27 = 0;
  }
  v28 = 0x65696772656C6C41;
  sub_24159F83C();
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_2416BCC80;
  v30 = 0xE900000000000073;
  *(_QWORD *)(v29 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v29 + 40) = 0xE900000000000044;
  *(_QWORD *)(v29 + 48) = 0x65696772656C6C41;
  *(_QWORD *)(v29 + 56) = 0xE900000000000073;
  v31 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v32 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v32)
  {
    v28 = sub_2416BB128();
    v30 = v33;

  }
  *a2 = v40;
  a2[1] = v39;
  a2[2] = v37;
  a2[3] = v38;
  a2[4] = v36;
  a2[5] = v35;
  a2[6] = v17;
  a2[7] = v19;
  a2[8] = v25;
  a2[9] = v27;
  a2[10] = v28;
  a2[11] = v30;
}

uint64_t sub_24164BCE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  return result;
}

double sub_24164BD24@<D0>(uint64_t a1@<X8>)
{
  id *v1;
  _OWORD v4[6];

  sub_24164B8B0(v1, (uint64_t *)v4);
  return sub_2416392BC(v4, (uint64_t)sub_24164BCE0, 0, a1);
}

uint64_t sub_24164BD6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t *v15;
  char v16;
  uint64_t v17;

  v4 = (int *)type metadata accessor for MedicalIDEditSettingsView();
  v5 = a2 + v4[5];
  sub_2416BAD08();
  *(_BYTE *)v5 = v16;
  *(_QWORD *)(v5 + 8) = v17;
  v6 = (uint64_t *)(a2 + v4[8]);
  sub_2415CA770();
  sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
  *v6 = sub_2416BA270();
  v6[1] = v7;
  v8 = a2 + v4[9];
  type metadata accessor for MedicalIDDataManager();
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  *(_QWORD *)v8 = sub_2416B9FC4();
  *(_BYTE *)(v8 + 8) = v9 & 1;
  sub_2415BEF64(a1, a2, type metadata accessor for MedicalIDSettingsViewModel);
  v10 = type metadata accessor for MedicalIDData();
  v11 = *(_BYTE *)(a1 + *(int *)(v10 + 72));
  v12 = a2 + v4[6];
  sub_2416BAD08();
  *(_BYTE *)v12 = v16;
  *(_QWORD *)(v12 + 8) = v17;
  LOBYTE(v10) = *(_BYTE *)(a1 + *(int *)(v10 + 68));
  type metadata accessor for MedicalIDEditableSettingsViewModel(0);
  v13 = swift_allocObject();
  sub_2416B9CD0();
  *(_BYTE *)(v13 + 17) = (v10 & 1) == 0;
  *(_BYTE *)(v13 + 16) = v11;
  result = sub_2415A6154(a1, type metadata accessor for MedicalIDSettingsViewModel);
  v15 = (uint64_t *)(a2 + v4[7]);
  *v15 = v13;
  v15[1] = 0;
  return result;
}

uint64_t type metadata accessor for MedicalIDEditSettingsView()
{
  uint64_t result;

  result = qword_25713E0D0;
  if (!qword_25713E0D0)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *sub_24164BF68(_QWORD *a1, char *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  id v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  id v82;
  id v83;
  char *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  char *__dst;
  int *v90;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    v7 = *((_QWORD *)a2 + 3);
    a1[2] = *((_QWORD *)a2 + 2);
    a1[3] = v7;
    v8 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v8;
    v9 = *((_QWORD *)a2 + 7);
    a1[6] = *((_QWORD *)a2 + 6);
    a1[7] = v9;
    v10 = *((_QWORD *)a2 + 9);
    a1[8] = *((_QWORD *)a2 + 8);
    a1[9] = v10;
    v11 = *((_QWORD *)a2 + 11);
    a1[10] = *((_QWORD *)a2 + 10);
    a1[11] = v11;
    v86 = (void *)*((_QWORD *)a2 + 12);
    v87 = (void *)*((_QWORD *)a2 + 13);
    a1[12] = v86;
    a1[13] = v87;
    v12 = type metadata accessor for MedicalIDData();
    v13 = *(int *)(v12 + 52);
    __dst = (char *)v4 + v13;
    v90 = (int *)v12;
    v85 = &a2[v13];
    v14 = sub_2416B9B50();
    v88 = *(_QWORD *)(v14 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = v86;
    v17 = v87;
    if (v15(v85, 1, v14))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v85, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      v19 = v88;
    }
    else
    {
      v19 = v88;
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))(__dst, v85, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(__dst, 0, 1, v14);
    }
    v21 = v90[14];
    v22 = (char *)v4 + v21;
    v23 = &a2[v21];
    if (v15(&a2[v21], 1, v14))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v23, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v14);
    }
    v25 = v90[15];
    v26 = (_QWORD *)((char *)v4 + v25);
    v27 = &a2[v25];
    v28 = *((_QWORD *)v27 + 1);
    *v26 = *(_QWORD *)v27;
    v26[1] = v28;
    v29 = v90[16];
    v30 = (_QWORD *)((char *)v4 + v29);
    v31 = &a2[v29];
    v32 = *((_QWORD *)v31 + 1);
    *v30 = *(_QWORD *)v31;
    v30[1] = v32;
    *((_BYTE *)v4 + v90[17]) = a2[v90[17]];
    *((_BYTE *)v4 + v90[18]) = a2[v90[18]];
    v33 = v90[19];
    v34 = (char *)v4 + v33;
    v35 = (uint64_t *)&a2[v33];
    v36 = *(_QWORD *)&a2[v33 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v36 >> 60 == 15)
    {
      *(_OWORD *)v34 = *(_OWORD *)v35;
    }
    else
    {
      v37 = *v35;
      sub_2415A0A90(*v35, v36);
      *(_QWORD *)v34 = v37;
      *((_QWORD *)v34 + 1) = v36;
    }
    v38 = v15;
    v39 = v90[20];
    v40 = (char *)v4 + v39;
    v41 = &a2[v39];
    v42 = sub_2416B9A18();
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
    v45 = v90[21];
    v46 = *(void **)&a2[v45];
    *(_QWORD *)((char *)v4 + v45) = v46;
    v47 = v90[22];
    v48 = (char *)v4 + v47;
    v49 = &a2[v47];
    v50 = v46;
    if (v38(v49, 1, v14))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v48, v49, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v48, 0, 1, v14);
    }
    v52 = (int *)type metadata accessor for MedicalIDSettingsViewModel(0);
    v53 = v52[5];
    v54 = *(void **)&a2[v53];
    *(_QWORD *)((char *)v4 + v53) = v54;
    v55 = v52[6];
    v56 = (_QWORD *)((char *)v4 + v55);
    v57 = &a2[v55];
    v58 = *((_QWORD *)v57 + 1);
    *v56 = *(_QWORD *)v57;
    v56[1] = v58;
    *((_BYTE *)v4 + v52[7]) = a2[v52[7]];
    *((_BYTE *)v4 + v52[8]) = a2[v52[8]];
    *((_BYTE *)v4 + v52[9]) = a2[v52[9]];
    *((_BYTE *)v4 + v52[10]) = a2[v52[10]];
    v59 = v52[11];
    v60 = (_QWORD *)((char *)v4 + v59);
    v61 = &a2[v59];
    v62 = *((_QWORD *)v61 + 1);
    *v60 = *(_QWORD *)v61;
    v60[1] = v62;
    v63 = a3[5];
    v64 = a3[6];
    v65 = (char *)v4 + v63;
    v66 = &a2[v63];
    *v65 = *v66;
    *((_QWORD *)v65 + 1) = *((_QWORD *)v66 + 1);
    v67 = (char *)v4 + v64;
    v68 = &a2[v64];
    *v67 = *v68;
    *((_QWORD *)v67 + 1) = *((_QWORD *)v68 + 1);
    v69 = a3[7];
    v70 = a3[8];
    v71 = (_QWORD *)((char *)v4 + v69);
    v72 = &a2[v69];
    v73 = *((_QWORD *)v72 + 1);
    *v71 = *(_QWORD *)v72;
    v71[1] = v73;
    v74 = (_QWORD *)((char *)v4 + v70);
    v75 = &a2[v70];
    v77 = *(void **)v75;
    v76 = *((_QWORD *)v75 + 1);
    *v74 = v77;
    v74[1] = v76;
    v78 = a3[9];
    v79 = (char *)v4 + v78;
    v80 = &a2[v78];
    v81 = *(_QWORD *)v80;
    LOBYTE(v80) = v80[8];
    *(_QWORD *)v79 = v81;
    v79[8] = (char)v80;
    v82 = v54;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v83 = v77;
  }
  swift_retain();
  return v4;
}

uint64_t sub_24164C478(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = (int *)type metadata accessor for MedicalIDData();
  v5 = a1 + v4[13];
  v6 = sub_2416B9B50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + v4[14];
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)(a1 + v4[19]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_2415A0DAC(*v10, v11);
  v12 = a1 + v4[20];
  v13 = sub_2416B9A18();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);

  v15 = a1 + v4[22];
  if (!v8(v15, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

_QWORD *sub_24164C6AC(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  id v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  id v80;
  id v81;
  char *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  char *__dst;
  int *v88;

  v5 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *((_QWORD *)a2 + 3);
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = v6;
  v7 = *((_QWORD *)a2 + 5);
  a1[4] = *((_QWORD *)a2 + 4);
  a1[5] = v7;
  v8 = *((_QWORD *)a2 + 7);
  a1[6] = *((_QWORD *)a2 + 6);
  a1[7] = v8;
  v9 = *((_QWORD *)a2 + 9);
  a1[8] = *((_QWORD *)a2 + 8);
  a1[9] = v9;
  v10 = *((_QWORD *)a2 + 11);
  a1[10] = *((_QWORD *)a2 + 10);
  a1[11] = v10;
  v84 = (void *)*((_QWORD *)a2 + 12);
  v85 = (void *)*((_QWORD *)a2 + 13);
  a1[12] = v84;
  a1[13] = v85;
  v11 = type metadata accessor for MedicalIDData();
  v12 = *(int *)(v11 + 52);
  __dst = (char *)a1 + v12;
  v88 = (int *)v11;
  v83 = &a2[v12];
  v13 = sub_2416B9B50();
  v86 = *(_QWORD *)(v13 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = v84;
  v16 = v85;
  if (v14(v83, 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v83, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    v18 = v86;
  }
  else
  {
    v18 = v86;
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(__dst, v83, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(__dst, 0, 1, v13);
  }
  v19 = v88[14];
  v20 = (char *)a1 + v19;
  v21 = &a2[v19];
  if (v14(&a2[v19], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v20, v21, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v13);
  }
  v23 = v88[15];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = &a2[v23];
  v26 = *((_QWORD *)v25 + 1);
  *v24 = *(_QWORD *)v25;
  v24[1] = v26;
  v27 = v88[16];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = &a2[v27];
  v30 = *((_QWORD *)v29 + 1);
  *v28 = *(_QWORD *)v29;
  v28[1] = v30;
  *((_BYTE *)a1 + v88[17]) = a2[v88[17]];
  *((_BYTE *)a1 + v88[18]) = a2[v88[18]];
  v31 = v88[19];
  v32 = (char *)a1 + v31;
  v33 = (uint64_t *)&a2[v31];
  v34 = *(_QWORD *)&a2[v31 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v34 >> 60 == 15)
  {
    *(_OWORD *)v32 = *(_OWORD *)v33;
  }
  else
  {
    v35 = *v33;
    sub_2415A0A90(*v33, v34);
    *(_QWORD *)v32 = v35;
    *((_QWORD *)v32 + 1) = v34;
  }
  v36 = v14;
  v37 = v88[20];
  v38 = (char *)a1 + v37;
  v39 = &a2[v37];
  v40 = sub_2416B9A18();
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  v43 = v88[21];
  v44 = *(void **)&a2[v43];
  *(_QWORD *)((char *)a1 + v43) = v44;
  v45 = v88[22];
  v46 = (char *)a1 + v45;
  v47 = &a2[v45];
  v48 = v44;
  if (v36(v47, 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v46, v47, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v46, 0, 1, v13);
  }
  v50 = (int *)type metadata accessor for MedicalIDSettingsViewModel(0);
  v51 = v50[5];
  v52 = *(void **)&a2[v51];
  *(_QWORD *)((char *)a1 + v51) = v52;
  v53 = v50[6];
  v54 = (_QWORD *)((char *)a1 + v53);
  v55 = &a2[v53];
  v56 = *((_QWORD *)v55 + 1);
  *v54 = *(_QWORD *)v55;
  v54[1] = v56;
  *((_BYTE *)a1 + v50[7]) = a2[v50[7]];
  *((_BYTE *)a1 + v50[8]) = a2[v50[8]];
  *((_BYTE *)a1 + v50[9]) = a2[v50[9]];
  *((_BYTE *)a1 + v50[10]) = a2[v50[10]];
  v57 = v50[11];
  v58 = (_QWORD *)((char *)a1 + v57);
  v59 = &a2[v57];
  v60 = *((_QWORD *)v59 + 1);
  *v58 = *(_QWORD *)v59;
  v58[1] = v60;
  v61 = a3[5];
  v62 = a3[6];
  v63 = (char *)a1 + v61;
  v64 = &a2[v61];
  *v63 = *v64;
  *((_QWORD *)v63 + 1) = *((_QWORD *)v64 + 1);
  v65 = (char *)a1 + v62;
  v66 = &a2[v62];
  *v65 = *v66;
  *((_QWORD *)v65 + 1) = *((_QWORD *)v66 + 1);
  v67 = a3[7];
  v68 = a3[8];
  v69 = (_QWORD *)((char *)a1 + v67);
  v70 = &a2[v67];
  v71 = *((_QWORD *)v70 + 1);
  *v69 = *(_QWORD *)v70;
  v69[1] = v71;
  v72 = (_QWORD *)((char *)a1 + v68);
  v73 = &a2[v68];
  v75 = *(void **)v73;
  v74 = *((_QWORD *)v73 + 1);
  *v72 = v75;
  v72[1] = v74;
  v76 = a3[9];
  v77 = (char *)a1 + v76;
  v78 = &a2[v76];
  v79 = *(_QWORD *)v78;
  LOBYTE(v78) = v78[8];
  *(_QWORD *)v77 = v79;
  v77[8] = (char)v78;
  v80 = v52;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v81 = v75;
  swift_retain();
  return a1;
}

char *sub_24164CB94(char *a1, _QWORD *a2, int *a3)
{
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  id v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void *v83;
  void *v84;
  id v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t (*v91)(char *, uint64_t, uint64_t);
  uint64_t v92;

  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 3) = a2[3];
  *((_QWORD *)a1 + 4) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 7) = a2[7];
  *((_QWORD *)a1 + 8) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 9) = a2[9];
  *((_QWORD *)a1 + 10) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 11) = a2[11];
  v5 = (void *)*((_QWORD *)a1 + 12);
  v6 = (void *)a2[12];
  *((_QWORD *)a1 + 12) = v6;
  v7 = v6;

  v8 = (void *)*((_QWORD *)a1 + 13);
  v9 = (void *)a2[13];
  *((_QWORD *)a1 + 13) = v9;
  v10 = v9;

  v11 = (int *)type metadata accessor for MedicalIDData();
  v12 = v11[13];
  v13 = &a1[v12];
  v14 = (char *)a2 + v12;
  v15 = sub_2416B9B50();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  v21 = v11[14];
  v22 = &a1[v21];
  v23 = (char *)a2 + v21;
  v24 = v17(&a1[v21], 1, v15);
  v25 = v17(v23, 1, v15);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  v27 = v11[15];
  v28 = &a1[v27];
  v29 = (_QWORD *)((char *)a2 + v27);
  *(_QWORD *)v28 = *v29;
  *((_QWORD *)v28 + 1) = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = v11[16];
  v31 = &a1[v30];
  v32 = (_QWORD *)((char *)a2 + v30);
  *(_QWORD *)v31 = *v32;
  *((_QWORD *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v11[17]] = *((_BYTE *)a2 + v11[17]);
  a1[v11[18]] = *((_BYTE *)a2 + v11[18]);
  v33 = v11[19];
  v34 = (uint64_t *)&a1[v33];
  v35 = (_QWORD *)((char *)a2 + v33);
  v36 = *(_QWORD *)((char *)a2 + v33 + 8);
  v91 = v17;
  v92 = v16;
  if (*(_QWORD *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      v37 = *v35;
      sub_2415A0A90(v37, v36);
      *v34 = v37;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v34);
LABEL_18:
    *(_OWORD *)v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  v38 = *v35;
  sub_2415A0A90(v38, v36);
  v39 = *v34;
  v40 = v34[1];
  *v34 = v38;
  v34[1] = v36;
  sub_2415A0DAC(v39, v40);
LABEL_20:
  v41 = v11[20];
  v42 = &a1[v41];
  v43 = (char *)a2 + v41;
  v44 = sub_2416B9A18();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46(v43, 1, v44);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_26:
  v50 = v11[21];
  v51 = *(void **)&a1[v50];
  v52 = *(void **)((char *)a2 + v50);
  *(_QWORD *)&a1[v50] = v52;
  v53 = v52;

  v54 = v11[22];
  v55 = &a1[v54];
  v56 = (char *)a2 + v54;
  v57 = v91(&a1[v54], 1, v15);
  v58 = v91(v56, 1, v15);
  if (!v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 24))(v55, v56, v15);
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v92 + 8))(v55, v15);
    goto LABEL_31;
  }
  if (v58)
  {
LABEL_31:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v55, v56, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v55, 0, 1, v15);
LABEL_32:
  v60 = (int *)type metadata accessor for MedicalIDSettingsViewModel(0);
  v61 = v60[5];
  v62 = *(void **)((char *)a2 + v61);
  v63 = *(void **)&a1[v61];
  *(_QWORD *)&a1[v61] = v62;
  v64 = v62;

  v65 = v60[6];
  v66 = &a1[v65];
  v67 = (_QWORD *)((char *)a2 + v65);
  *(_QWORD *)v66 = *v67;
  *((_QWORD *)v66 + 1) = v67[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v60[7]] = *((_BYTE *)a2 + v60[7]);
  a1[v60[8]] = *((_BYTE *)a2 + v60[8]);
  a1[v60[9]] = *((_BYTE *)a2 + v60[9]);
  a1[v60[10]] = *((_BYTE *)a2 + v60[10]);
  v68 = v60[11];
  v69 = &a1[v68];
  v70 = (_QWORD *)((char *)a2 + v68);
  *(_QWORD *)v69 = *v70;
  *((_QWORD *)v69 + 1) = v70[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v71 = a3[5];
  v72 = &a1[v71];
  v73 = (char *)a2 + v71;
  *v72 = *v73;
  *((_QWORD *)v72 + 1) = *((_QWORD *)v73 + 1);
  swift_retain();
  swift_release();
  v74 = a3[6];
  v75 = &a1[v74];
  v76 = (char *)a2 + v74;
  *v75 = *v76;
  *((_QWORD *)v75 + 1) = *((_QWORD *)v76 + 1);
  swift_retain();
  swift_release();
  v77 = a3[7];
  v78 = &a1[v77];
  v79 = (char *)a2 + v77;
  *(_QWORD *)&a1[v77] = *(_QWORD *)((char *)a2 + v77);
  swift_retain();
  swift_release();
  *((_QWORD *)v78 + 1) = *((_QWORD *)v79 + 1);
  swift_retain();
  swift_release();
  v80 = a3[8];
  v81 = &a1[v80];
  v82 = (char *)a2 + v80;
  v83 = *(void **)&a1[v80];
  v84 = *(void **)((char *)a2 + v80);
  *(_QWORD *)v81 = v84;
  v85 = v84;

  *((_QWORD *)v81 + 1) = *((_QWORD *)v82 + 1);
  v86 = a3[9];
  v87 = &a1[v86];
  v88 = (char *)a2 + v86;
  v89 = *(_QWORD *)v88;
  LOBYTE(v88) = v88[8];
  *(_QWORD *)v87 = v89;
  v87[8] = (char)v88;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_24164D2CC(uint64_t a1, uint64_t a2, int *a3)
{
  int *v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = v5[13];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_2416B9B50();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = v5[14];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(_OWORD *)(a1 + v5[15]) = *(_OWORD *)(a2 + v5[15]);
  *(_OWORD *)(a1 + v5[16]) = *(_OWORD *)(a2 + v5[16]);
  *(_BYTE *)(a1 + v5[17]) = *(_BYTE *)(a2 + v5[17]);
  *(_BYTE *)(a1 + v5[18]) = *(_BYTE *)(a2 + v5[18]);
  *(_OWORD *)(a1 + v5[19]) = *(_OWORD *)(a2 + v5[19]);
  v17 = v5[20];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = sub_2416B9A18();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_QWORD *)(a1 + v5[21]) = *(_QWORD *)(a2 + v5[21]);
  v23 = v5[22];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  if (v11((const void *)(a2 + v23), 1, v9))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v24, v25, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
  }
  v27 = (int *)type metadata accessor for MedicalIDSettingsViewModel(0);
  *(_QWORD *)(a1 + v27[5]) = *(_QWORD *)(a2 + v27[5]);
  *(_OWORD *)(a1 + v27[6]) = *(_OWORD *)(a2 + v27[6]);
  *(_BYTE *)(a1 + v27[7]) = *(_BYTE *)(a2 + v27[7]);
  *(_BYTE *)(a1 + v27[8]) = *(_BYTE *)(a2 + v27[8]);
  *(_BYTE *)(a1 + v27[9]) = *(_BYTE *)(a2 + v27[9]);
  *(_BYTE *)(a1 + v27[10]) = *(_BYTE *)(a2 + v27[10]);
  *(_OWORD *)(a1 + v27[11]) = *(_OWORD *)(a2 + v27[11]);
  v28 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v28) = *(_OWORD *)(a2 + v28);
  v29 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
  v30 = a3[9];
  v31 = a1 + v30;
  v32 = a2 + v30;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  return a1;
}

char *sub_24164D68C(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  void *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;

  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  v6 = a2[4];
  *((_QWORD *)a1 + 3) = a2[3];
  *((_QWORD *)a1 + 4) = v6;
  swift_bridgeObjectRelease();
  v7 = a2[6];
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = v7;
  swift_bridgeObjectRelease();
  v8 = a2[8];
  *((_QWORD *)a1 + 7) = a2[7];
  *((_QWORD *)a1 + 8) = v8;
  swift_bridgeObjectRelease();
  v9 = a2[10];
  *((_QWORD *)a1 + 9) = a2[9];
  *((_QWORD *)a1 + 10) = v9;
  swift_bridgeObjectRelease();
  v10 = (void *)*((_QWORD *)a1 + 12);
  v11 = a2[12];
  *((_QWORD *)a1 + 11) = a2[11];
  *((_QWORD *)a1 + 12) = v11;

  v12 = (void *)*((_QWORD *)a1 + 13);
  *((_QWORD *)a1 + 13) = a2[13];

  v13 = (int *)type metadata accessor for MedicalIDData();
  v14 = v13[13];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = sub_2416B9B50();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  v23 = v13[14];
  v24 = &a1[v23];
  v25 = (char *)a2 + v23;
  v26 = v19(&a1[v23], 1, v17);
  v27 = v19(v25, 1, v17);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  v29 = v13[15];
  v30 = &a1[v29];
  v31 = (_QWORD *)((char *)a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *(_QWORD *)v30 = v33;
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  v34 = v13[16];
  v35 = &a1[v34];
  v36 = (_QWORD *)((char *)a2 + v34);
  v38 = *v36;
  v37 = v36[1];
  *(_QWORD *)v35 = v38;
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  a1[v13[17]] = *((_BYTE *)a2 + v13[17]);
  a1[v13[18]] = *((_BYTE *)a2 + v13[18]);
  v39 = v13[19];
  v40 = (uint64_t)&a1[v39];
  v41 = (char *)a2 + v39;
  v42 = *(_QWORD *)&a1[v39 + 8];
  v93 = v19;
  v94 = v18;
  if (v42 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v40 = *(_OWORD *)v41;
    goto LABEL_18;
  }
  v43 = *((_QWORD *)v41 + 1);
  if (v43 >> 60 == 15)
  {
    sub_2415A1B38(v40);
    goto LABEL_16;
  }
  v44 = *(_QWORD *)v40;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_QWORD *)(v40 + 8) = v43;
  sub_2415A0DAC(v44, v42);
LABEL_18:
  v45 = v13[20];
  v46 = &a1[v45];
  v47 = (char *)a2 + v45;
  v48 = sub_2416B9A18();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v46, 1, v48);
  v52 = v50(v47, 1, v48);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
LABEL_23:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 40))(v46, v47, v48);
LABEL_24:
  v54 = v13[21];
  v55 = *(void **)&a1[v54];
  *(_QWORD *)&a1[v54] = *(_QWORD *)((char *)a2 + v54);

  v56 = v13[22];
  v57 = &a1[v56];
  v58 = (char *)a2 + v56;
  v59 = v93(&a1[v56], 1, v17);
  v60 = v93(v58, 1, v17);
  if (!v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v94 + 40))(v57, v58, v17);
      goto LABEL_30;
    }
    (*(void (**)(char *, uint64_t))(v94 + 8))(v57, v17);
    goto LABEL_29;
  }
  if (v60)
  {
LABEL_29:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v57, v58, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v57, 0, 1, v17);
LABEL_30:
  v62 = (int *)type metadata accessor for MedicalIDSettingsViewModel(0);
  v63 = v62[5];
  v64 = *(void **)&a1[v63];
  *(_QWORD *)&a1[v63] = *(_QWORD *)((char *)a2 + v63);

  v65 = v62[6];
  v66 = &a1[v65];
  v67 = (_QWORD *)((char *)a2 + v65);
  v69 = *v67;
  v68 = v67[1];
  *(_QWORD *)v66 = v69;
  *((_QWORD *)v66 + 1) = v68;
  swift_bridgeObjectRelease();
  a1[v62[7]] = *((_BYTE *)a2 + v62[7]);
  a1[v62[8]] = *((_BYTE *)a2 + v62[8]);
  a1[v62[9]] = *((_BYTE *)a2 + v62[9]);
  a1[v62[10]] = *((_BYTE *)a2 + v62[10]);
  v70 = v62[11];
  v71 = &a1[v70];
  v72 = (_QWORD *)((char *)a2 + v70);
  v74 = *v72;
  v73 = v72[1];
  *(_QWORD *)v71 = v74;
  *((_QWORD *)v71 + 1) = v73;
  swift_bridgeObjectRelease();
  v75 = a3[5];
  v76 = &a1[v75];
  v77 = (char *)a2 + v75;
  *v76 = *v77;
  *((_QWORD *)v76 + 1) = *((_QWORD *)v77 + 1);
  swift_release();
  v78 = a3[6];
  v79 = &a1[v78];
  v80 = (char *)a2 + v78;
  *v79 = *v80;
  *((_QWORD *)v79 + 1) = *((_QWORD *)v80 + 1);
  swift_release();
  v81 = a3[7];
  v82 = &a1[v81];
  v83 = (char *)a2 + v81;
  *(_QWORD *)&a1[v81] = *(_QWORD *)((char *)a2 + v81);
  swift_release();
  *((_QWORD *)v82 + 1) = *((_QWORD *)v83 + 1);
  swift_release();
  v84 = a3[8];
  v85 = &a1[v84];
  v86 = (_QWORD *)((char *)a2 + v84);
  v87 = *(void **)&a1[v84];
  *(_QWORD *)v85 = *v86;

  *((_QWORD *)v85 + 1) = v86[1];
  v88 = a3[9];
  v89 = &a1[v88];
  v90 = (char *)a2 + v88;
  v91 = *(_QWORD *)v90;
  LOBYTE(v90) = v90[8];
  *(_QWORD *)v89 = v91;
  v89[8] = (char)v90;
  swift_release();
  return a1;
}

uint64_t sub_24164DCB4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24164DCC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MedicalIDSettingsViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_24164DD3C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24164DD48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDSettingsViewModel(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t sub_24164DDC0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MedicalIDSettingsViewModel(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24164DE48()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24164DE58()
{
  return sub_2416BA378();
}

uint64_t sub_24164DE78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_2416BA0A8();
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_2416BA384();
}

uint64_t sub_24164DEF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v57 = a1;
  v47 = type metadata accessor for MedicalIDEditSettingsView();
  v54 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v55 = v2;
  v56 = (uint64_t)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_2416BA60C();
  MEMORY[0x24BDAC7A8](v3);
  v4 = sub_2416BAF18();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (_OWORD *)((char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_241650EF8();
  v46 = v8;
  v45 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416515BC();
  v58 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241651618(0);
  v52 = *(_QWORD *)(v14 - 8);
  v53 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v50 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241651750(0);
  v51 = v16;
  v49 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v48 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_25713E218, (uint64_t (*)(uint64_t))MEMORY[0x24BDF4D58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  sub_2416BAF24();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2416BCF30;
  *v7 = xmmword_2416C1220;
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDF4D40], v4);
  sub_2416BAF30();
  sub_2416BA51C();
  v18 = v1;
  v59 = v1;
  LODWORD(v60) = 0;
  sub_24159CE88(&qword_25713A558, (uint64_t (*)(uint64_t))MEMORY[0x24BDEF998], MEMORY[0x24BDEF9B8]);
  sub_2416BB6F8();
  sub_24159D6B0(0, &qword_25713E120, (uint64_t (*)(uint64_t))sub_241650F70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
  sub_24165155C();
  sub_2416BAF6C();
  v19 = sub_2416BA840();
  v20 = sub_2416BA858();
  v21 = sub_2416BA828();
  v22 = sub_2416BA84C();
  sub_2416BA84C();
  if (sub_2416BA84C() != v19)
    v22 = sub_2416BA84C();
  sub_2416BA84C();
  if (sub_2416BA84C() != v20)
    v22 = sub_2416BA84C();
  sub_2416BA84C();
  if (sub_2416BA84C() != v21)
    v22 = sub_2416BA84C();
  v23 = v45;
  v24 = v46;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v13, v10, v46);
  v25 = &v13[*(int *)(v58 + 36)];
  *v25 = v22;
  *(_OWORD *)(v25 + 8) = 0u;
  *(_OWORD *)(v25 + 24) = 0u;
  v25[40] = 1;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v24);
  v26 = v47;
  v27 = v18 + *(int *)(v47 + 20);
  v28 = *(_BYTE *)v27;
  v29 = *(_QWORD *)(v27 + 8);
  LOBYTE(v64) = v28;
  v65 = v29;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  v44 = type metadata accessor for MedicalIDLearnMoreNavigationView();
  v45 = sub_2416516D0();
  v46 = sub_24159CE88((unint64_t *)&qword_25713BAB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDLearnMoreNavigationView, (uint64_t)&unk_2416C0724);
  v30 = v50;
  sub_2416BAB70();
  swift_release();
  swift_release();
  sub_2415A6154((uint64_t)v13, (uint64_t (*)(_QWORD))sub_2416515BC);
  sub_24159D7F0(0, &qword_25713E220, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_2416BCC80;
  v32 = (uint64_t *)(v18 + *(int *)(v26 + 28));
  v33 = v32[1];
  v60 = *v32;
  v61 = v33;
  sub_24159D6B0(0, &qword_25713E228, type metadata accessor for MedicalIDEditableSettingsViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v34 = v64;
  swift_getKeyPath();
  v60 = v34;
  sub_24159CE88((unint64_t *)&qword_25713A8F0, type metadata accessor for MedicalIDEditableSettingsViewModel, (uint64_t)&unk_2416BD800);
  sub_2416B9CAC();
  swift_release();
  LOBYTE(v24) = *(_BYTE *)(v34 + 16);
  swift_release();
  *(_BYTE *)(v31 + 32) = v24;
  v35 = v32[1];
  v60 = *v32;
  v61 = v35;
  sub_2416BAD14();
  v36 = v64;
  swift_getKeyPath();
  v60 = v36;
  sub_2416B9CAC();
  swift_release();
  LOBYTE(v24) = *(_BYTE *)(v36 + 17);
  swift_release();
  *(_BYTE *)(v31 + 33) = v24;
  v64 = v31;
  v37 = v56;
  sub_2415BEF64(v18, v56, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditSettingsView);
  v38 = (*(unsigned __int8 *)(v54 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
  v39 = swift_allocObject();
  sub_2415A85BC(v37, v39 + v38, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditSettingsView);
  sub_24159D7F0(0, &qword_25713E208, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  v60 = v58;
  v61 = v44;
  v62 = v45;
  v63 = v46;
  swift_getOpaqueTypeConformance2();
  sub_241651864();
  v40 = v48;
  v41 = v53;
  sub_2416BABE8();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v30, v41);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v57, v40, v51);
}

uint64_t sub_24164E6A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  id *v65;
  unsigned __int8 v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  void *v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  id v132;
  uint64_t v133;
  uint64_t KeyPath;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t result;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  id *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  char v205;

  v187 = a2;
  v170 = sub_2416BA0A8();
  v169 = *(_QWORD *)(v170 - 8);
  MEMORY[0x24BDAC7A8](v170);
  v167 = (char *)&v159 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241651500();
  MEMORY[0x24BDAC7A8](v4);
  v166 = (char *)&v159 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241651484();
  v7 = v6;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v171 = (uint64_t)&v159 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v165 = (char *)&v159 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v168 = (uint64_t)&v159 - v12;
  sub_241651428(0, &qword_25713E1B8, (uint64_t)&qword_25713E1C0, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_241652428);
  v178 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v189 = (uint64_t)&v159 - v14;
  sub_2416513B8(0, &qword_25713E1B0, &qword_25713E1B8, (uint64_t)&qword_25713E1C0, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_241652428);
  MEMORY[0x24BDAC7A8](v15);
  v179 = (char *)&v159 - v16;
  sub_24165133C();
  v177 = v17;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v164 = (uint64_t)&v159 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v176 = (uint64_t)&v159 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v159 - v22;
  sub_241651298(0);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v159 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v196 = (uint64_t)&v159 - v28;
  sub_241651218(0, &qword_25713E180, &qword_25713E188, (uint64_t)&type metadata for ListInsetGroupedFooterView);
  v30 = MEMORY[0x24BDAC7A8](v29);
  v175 = (uint64_t)&v159 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x24BDAC7A8](v30);
  v173 = (char *)&v159 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v174 = (uint64_t)&v159 - v34;
  sub_241651428(0, &qword_25713E170, (uint64_t)&qword_25713E178, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_241651198);
  v183 = v35;
  MEMORY[0x24BDAC7A8](v35);
  v192 = (char *)&v159 - v36;
  sub_2416513B8(0, &qword_25713E168, &qword_25713E170, (uint64_t)&qword_25713E178, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_241651198);
  MEMORY[0x24BDAC7A8](v37);
  v184 = (char *)&v159 - v38;
  sub_24165111C();
  v182 = v39;
  v40 = MEMORY[0x24BDAC7A8](v39);
  v172 = (uint64_t)&v159 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x24BDAC7A8](v40);
  v181 = (uint64_t)&v159 - v43;
  MEMORY[0x24BDAC7A8](v42);
  v188 = (uint64_t)&v159 - v44;
  sub_241651060(0);
  v46 = MEMORY[0x24BDAC7A8](v45);
  v193 = (uint64_t)&v159 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v46);
  v195 = (uint64_t)&v159 - v48;
  sub_241651218(0, &qword_25713E138, &qword_25713E140, (uint64_t)&type metadata for ListInsetGroupedTableHeaderView);
  v190 = *(_QWORD *)(v49 - 8);
  v191 = v49;
  v50 = MEMORY[0x24BDAC7A8](v49);
  v52 = (char *)&v159 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v50);
  v54 = (char *)&v159 - v53;
  v55 = type metadata accessor for MedicalIDEditSettingsView();
  v160 = *(_QWORD *)(v55 - 8);
  v56 = MEMORY[0x24BDAC7A8](v55);
  v162 = (uint64_t)&v159 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = v57;
  MEMORY[0x24BDAC7A8](v56);
  v59 = (char *)&v159 - v58;
  sub_241650FF4();
  v61 = MEMORY[0x24BDAC7A8](v60);
  v63 = (char *)&v159 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v61);
  v197 = (uint64_t)&v159 - v64;
  v65 = (id *)(a1 + *(int *)(v55 + 32));
  if (!*v65)
    goto LABEL_31;
  v66 = objc_msgSend(*v65, sel_isShowWhenLockedVisible);
  sub_2415BEF64(a1, (uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditSettingsView);
  v194 = v27;
  v163 = v7;
  v180 = v23;
  v186 = v63;
  if ((v66 & 1) != 0)
  {
    sub_2415A6154((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditSettingsView);
  }
  else
  {
    v67 = sub_24164FAA8();
    sub_2415A6154((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditSettingsView);
    if ((v67 & 1) == 0)
    {
      v72 = a1;
      v78 = 1;
      v77 = v197;
      goto LABEL_10;
    }
  }
  if (qword_257139548 != -1)
    swift_once();
  v185 = v65;
  v68 = qword_25713E040;
  v69 = *(_QWORD *)algn_25713E048;
  swift_bridgeObjectRetain();
  v70 = sub_2416BA810();
  v198 = v68;
  v199 = v69;
  v200 = v70;
  v201 = 0u;
  v202 = 0u;
  LOBYTE(v203) = 1;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_2416BCC80;
  v72 = a1;
  v73 = (_QWORD *)(a1 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 44));
  v74 = v73[1];
  *(_QWORD *)(v71 + 32) = *v73;
  *(_QWORD *)(v71 + 40) = v74;
  *(_QWORD *)(v71 + 48) = 0x726564616548;
  *(_QWORD *)(v71 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  v75 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v76 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v76)
  {
    __break(1u);
    goto LABEL_27;
  }
  sub_2416BB128();

  sub_2415A3D28(0, &qword_25713E140, (uint64_t)&type metadata for ListInsetGroupedTableHeaderView, MEMORY[0x24BDECC80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  sub_2416522BC(&qword_25713E278, &qword_25713E140, (uint64_t)&type metadata for ListInsetGroupedTableHeaderView, (uint64_t (*)(void))sub_241652394);
  sub_2416BAB1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2416523D8((uint64_t)v52, (uint64_t)v54, &qword_25713E138, &qword_25713E140, (uint64_t)&type metadata for ListInsetGroupedTableHeaderView);
  v77 = v197;
  sub_2416523D8((uint64_t)v54, v197, &qword_25713E138, &qword_25713E140, (uint64_t)&type metadata for ListInsetGroupedTableHeaderView);
  v78 = 0;
  v27 = v194;
  v65 = v185;
LABEL_10:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v190 + 56))(v77, v78, 1, v191);
  v79 = v196;
  v80 = (uint64_t)v192;
  if (!*v65)
    goto LABEL_31;
  v81 = v72;
  if ((objc_msgSend(*v65, sel_isShowWhenLockedVisible) & 1) == 0)
  {
    sub_24165107C(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56))(v195, 1, 1, v114);
LABEL_20:
    v115 = sub_24164FAA8();
    v116 = v189;
    if ((v115 & 1) == 0)
    {
      sub_2416512B4(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 56))(v79, 1, 1, v149);
      goto LABEL_25;
    }
    sub_24164FF6C(v81, v189);
    sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v117 = swift_allocObject();
    *(_OWORD *)(v117 + 16) = xmmword_2416BCC80;
    v118 = v81;
    v119 = (_QWORD *)(v81 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 44));
    v120 = v119[1];
    *(_QWORD *)(v117 + 32) = *v119;
    *(_QWORD *)(v117 + 40) = v120;
    *(_QWORD *)(v117 + 48) = 0xD000000000000014;
    *(_QWORD *)(v117 + 56) = 0x80000002416C55E0;
    swift_bridgeObjectRetain();
    v121 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    v122 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v122)
    {
      sub_2416BB128();

      sub_241651CD4();
      v123 = (uint64_t)v179;
      sub_2416BAB1C();
      swift_bridgeObjectRelease();
      sub_2415C2970(v116, (uint64_t)&qword_25713E1B8, (uint64_t)&qword_25713E1C0, (uint64_t)sub_241652428, (uint64_t (*)(_QWORD))sub_241651428);
      v124 = v176;
      sub_241651E80(v123, v176, &qword_25713E1B0, &qword_25713E1B8, (uint64_t)&qword_25713E1C0, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_241652428);
      *(_BYTE *)(v124 + *(int *)(v177 + 36)) = 1;
      sub_241651ED4(v123, &qword_25713E1B0, &qword_25713E1B8, (uint64_t)&qword_25713E1C0, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_241652428);
      v125 = (uint64_t)v180;
      sub_2415A85BC(v124, (uint64_t)v180, (uint64_t (*)(_QWORD))sub_24165133C);
      MedicalIDSettingsViewModel.shareDuringEmergencyCallFooter.getter();
      v198 = sub_2416BA4C8();
      v199 = v126;
      v200 = v127 & 1;
      *(_QWORD *)&v201 = v128;
      v129 = swift_allocObject();
      *(_OWORD *)(v129 + 16) = xmmword_2416C1230;
      v130 = v119[1];
      *(_QWORD *)(v129 + 32) = *v119;
      *(_QWORD *)(v129 + 40) = v130;
      *(_QWORD *)(v129 + 48) = 0xD000000000000014;
      *(_QWORD *)(v129 + 56) = 0x80000002416C55E0;
      *(_QWORD *)(v129 + 64) = 0x7265746F6F46;
      *(_QWORD *)(v129 + 72) = 0xE600000000000000;
      swift_bridgeObjectRetain();
      v131 = (void *)sub_2416BB1E8();
      swift_bridgeObjectRelease();
      v132 = (id)HKUIJoinStringsForAutomationIdentifier();

      if (v132)
      {
        sub_2416BB128();

        sub_241651F10();
        v133 = (uint64_t)v166;
        sub_2416BAB1C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        KeyPath = swift_getKeyPath();
        v135 = v162;
        sub_2415BEF64(v118, v162, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditSettingsView);
        v136 = (*(unsigned __int8 *)(v160 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80);
        v137 = swift_allocObject();
        sub_2415A85BC(v135, v137 + v136, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditSettingsView);
        v138 = v167;
        sub_2416BA09C();
        v139 = (uint64_t)v165;
        v140 = (uint64_t *)&v165[*(int *)(v163 + 36)];
        sub_24159D6B0(0, &qword_25713B948, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
        v142 = v169;
        v143 = v170;
        (*(void (**)(char *, char *, uint64_t))(v169 + 16))((char *)v140 + *(int *)(v141 + 28), v138, v170);
        *v140 = KeyPath;
        sub_2415BEF64(v133, v139, (uint64_t (*)(_QWORD))sub_241651500);
        (*(void (**)(char *, uint64_t))(v142 + 8))(v138, v143);
        sub_2415A6154(v133, (uint64_t (*)(_QWORD))sub_241651500);
        v144 = v168;
        sub_2415A85BC(v139, v168, (uint64_t (*)(_QWORD))sub_241651484);
        v145 = v164;
        sub_2415BEF64(v125, v164, (uint64_t (*)(_QWORD))sub_24165133C);
        v146 = v171;
        sub_2415BEF64(v144, v171, (uint64_t (*)(_QWORD))sub_241651484);
        v27 = v194;
        sub_2415BEF64(v145, (uint64_t)v194, (uint64_t (*)(_QWORD))sub_24165133C);
        sub_2416512D0();
        sub_2415BEF64(v146, (uint64_t)&v27[*(int *)(v147 + 48)], (uint64_t (*)(_QWORD))sub_241651484);
        sub_2415A6154(v144, (uint64_t (*)(_QWORD))sub_241651484);
        sub_2415A6154(v125, (uint64_t (*)(_QWORD))sub_24165133C);
        sub_2415A6154(v146, (uint64_t (*)(_QWORD))sub_241651484);
        sub_2415A6154(v145, (uint64_t (*)(_QWORD))sub_24165133C);
        sub_2416512B4(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 56))(v27, 0, 1, v148);
        v79 = v196;
        sub_2415A85BC((uint64_t)v27, v196, (uint64_t (*)(_QWORD))sub_241651298);
LABEL_25:
        v150 = v197;
        v151 = (uint64_t)v186;
        sub_2415BEF64(v197, (uint64_t)v186, (uint64_t (*)(_QWORD))sub_241650FF4);
        v152 = v195;
        v153 = v193;
        sub_2415BEF64(v195, v193, (uint64_t (*)(_QWORD))sub_241651060);
        sub_2415BEF64(v79, (uint64_t)v27, (uint64_t (*)(_QWORD))sub_241651298);
        v154 = v187;
        sub_2415BEF64(v151, v187, (uint64_t (*)(_QWORD))sub_241650FF4);
        sub_241650F70();
        v155 = v79;
        v157 = v156;
        sub_2415BEF64(v153, v154 + *(int *)(v156 + 48), (uint64_t (*)(_QWORD))sub_241651060);
        sub_2415BEF64((uint64_t)v27, v154 + *(int *)(v157 + 64), (uint64_t (*)(_QWORD))sub_241651298);
        sub_2415A6154(v155, (uint64_t (*)(_QWORD))sub_241651298);
        sub_2415A6154(v152, (uint64_t (*)(_QWORD))sub_241651060);
        sub_2415A6154(v150, (uint64_t (*)(_QWORD))sub_241650FF4);
        sub_2415A6154((uint64_t)v27, (uint64_t (*)(_QWORD))sub_241651298);
        sub_2415A6154(v153, (uint64_t (*)(_QWORD))sub_241651060);
        return sub_2415A6154(v151, (uint64_t (*)(_QWORD))sub_241650FF4);
      }
      goto LABEL_30;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v82 = v65;
  sub_24164FC24(v72, v80);
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v83 = swift_allocObject();
  *(_OWORD *)(v83 + 16) = xmmword_2416BCC80;
  v84 = (_QWORD *)(v72 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 44));
  v85 = v84[1];
  *(_QWORD *)(v83 + 32) = *v84;
  *(_QWORD *)(v83 + 40) = v85;
  strcpy((char *)(v83 + 48), "ShowWhenLocked");
  *(_BYTE *)(v83 + 63) = -18;
  swift_bridgeObjectRetain();
  v86 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v87 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v87)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  sub_2416BB128();

  sub_241652244();
  v88 = (uint64_t)v184;
  sub_2416BAB1C();
  swift_bridgeObjectRelease();
  sub_2415C2970(v80, (uint64_t)&qword_25713E170, (uint64_t)&qword_25713E178, (uint64_t)sub_241651198, (uint64_t (*)(_QWORD))sub_241651428);
  v89 = v181;
  sub_241651E80(v88, v181, &qword_25713E168, &qword_25713E170, (uint64_t)&qword_25713E178, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_241651198);
  *(_BYTE *)(v89 + *(int *)(v182 + 36)) = 1;
  sub_241651ED4(v88, &qword_25713E168, &qword_25713E170, (uint64_t)&qword_25713E178, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_241651198);
  sub_2415A85BC(v89, v188, (uint64_t (*)(_QWORD))sub_24165111C);
  v192 = (char *)v72;
  MedicalIDSettingsViewModel.showWhenLockedFooter.getter();
  v90 = sub_2416BA4C8();
  v92 = v91;
  v94 = v93;
  v96 = v95;
  v97 = sub_2416BA834();
  if (*v82)
  {
    if ((objc_msgSend(*v82, sel_isShareDuringEmergencyCallVisible) & 1) != 0 && qword_257139560 != -1)
      swift_once();
    sub_2416B9EF8();
    v198 = v90;
    v199 = v92;
    v200 = v94 & 1;
    *(_QWORD *)&v201 = v96;
    BYTE8(v201) = v97;
    *(_QWORD *)&v202 = v98;
    *((_QWORD *)&v202 + 1) = v99;
    v203 = v100;
    v204 = v101;
    v205 = 0;
    v102 = swift_allocObject();
    *(_OWORD *)(v102 + 16) = xmmword_2416C1230;
    v103 = v84[1];
    *(_QWORD *)(v102 + 32) = *v84;
    *(_QWORD *)(v102 + 40) = v103;
    strcpy((char *)(v102 + 48), "ShowWhenLocked");
    *(_BYTE *)(v102 + 63) = -18;
    *(_QWORD *)(v102 + 64) = 0x7265746F6F46;
    *(_QWORD *)(v102 + 72) = 0xE600000000000000;
    swift_bridgeObjectRetain();
    v104 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    v105 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v105)
    {
      sub_2416BB128();

      sub_2415A3D28(0, &qword_25713E188, (uint64_t)&type metadata for ListInsetGroupedFooterView, MEMORY[0x24BDECC80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
      sub_2416522BC(&qword_25713E270, &qword_25713E188, (uint64_t)&type metadata for ListInsetGroupedFooterView, (uint64_t (*)(void))sub_241651F10);
      v106 = (uint64_t)v173;
      sub_2416BAB1C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v107 = v174;
      sub_2416523D8(v106, v174, &qword_25713E180, &qword_25713E188, (uint64_t)&type metadata for ListInsetGroupedFooterView);
      v108 = v188;
      v109 = v172;
      sub_2415BEF64(v188, v172, (uint64_t (*)(_QWORD))sub_24165111C);
      v110 = v175;
      sub_241652338(v107, v175);
      v111 = v193;
      sub_2415BEF64(v109, v193, (uint64_t (*)(_QWORD))sub_24165111C);
      sub_241651098();
      sub_241652338(v110, v111 + *(int *)(v112 + 48));
      sub_2415C2970(v107, (uint64_t)&qword_25713E180, (uint64_t)&qword_25713E188, (uint64_t)&type metadata for ListInsetGroupedFooterView, (uint64_t (*)(_QWORD))sub_241651218);
      sub_2415A6154(v108, (uint64_t (*)(_QWORD))sub_24165111C);
      sub_2415C2970(v110, (uint64_t)&qword_25713E180, (uint64_t)&qword_25713E188, (uint64_t)&type metadata for ListInsetGroupedFooterView, (uint64_t (*)(_QWORD))sub_241651218);
      sub_2415A6154(v109, (uint64_t (*)(_QWORD))sub_24165111C);
      sub_24165107C(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56))(v111, 0, 1, v113);
      sub_2415A85BC(v111, v195, (uint64_t (*)(_QWORD))sub_241651060);
      v27 = v194;
      v79 = v196;
      v81 = (uint64_t)v192;
      goto LABEL_20;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_31:
  sub_2415CA770();
  sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
  result = sub_2416BA264();
  __break(1u);
  return result;
}

uint64_t sub_24164FAA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  MIUIDisplayConfiguration *v10;
  Swift::Bool v11;
  unsigned int v12;
  _BOOL8 v13;
  uint64_t result;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  Swift::Bool v18;

  v1 = type metadata accessor for MedicalIDSettingsViewModel(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEF64(v0, (uint64_t)v3, v4);
  v5 = type metadata accessor for MedicalIDEditSettingsView();
  v6 = *(void **)(v0 + *(int *)(v5 + 32));
  if (v6)
  {
    v7 = v0 + *(int *)(v5 + 24);
    v8 = *(_BYTE *)v7;
    v9 = *(_QWORD *)(v7 + 8);
    v16 = v8;
    v17 = v9;
    sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
    v10 = v6;
    sub_2416BAD14();
    v11 = v18;
    if (-[MIUIDisplayConfiguration isShareDuringEmergencyCallVisible](v10, sel_isShareDuringEmergencyCallVisible))
    {
      MedicalIDSettingsViewModel.shareDuringEmergencyCallViewState(with:hasShareDuringEmergencyCallBeenEnabled:)(v10, v11);
      v12 = v16;

      v13 = v12 < 2;
    }
    else
    {

      v13 = 0;
    }
    sub_2415A6154((uint64_t)v3, type metadata accessor for MedicalIDSettingsViewModel);
    return v13;
  }
  else
  {
    sub_2415CA770();
    sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
    result = sub_2416BA264();
    __break(1u);
  }
  return result;
}

uint64_t sub_24164FC24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  MIUIDisplayConfiguration *v16;
  Swift::Bool v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t locked;
  uint64_t v28;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_241651198(0, &qword_25713E288, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x24BDEF380]);
  v5 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (_QWORD *)((char *)v29 - v6);
  sub_2415A3D28(0, &qword_25713BBE8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], MEMORY[0x24BDF46B0]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v29 - v11;
  v13 = type metadata accessor for MedicalIDEditSettingsView();
  v14 = *(void **)(a1 + *(int *)(v13 + 32));
  if (v14)
  {
    v15 = v13;
    v16 = v14;
    v17 = MedicalIDSettingsViewModel.isShowWhenLockedEditable(with:)(v16);

    if (v17)
    {
      v18 = (uint64_t *)(a1 + *(int *)(v15 + 28));
      v20 = *v18;
      v19 = v18[1];
      v29[2] = v20;
      v29[3] = v19;
      sub_24159D6B0(0, &qword_25713E228, type metadata accessor for MedicalIDEditableSettingsViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
      sub_2416BAD2C();
      v21 = v30;
      v22 = v31;
      v29[1] = a2;
      v23 = v32;
      swift_getKeyPath();
      v29[0] = v5;
      v30 = v21;
      v31 = v22;
      v32 = v23;
      sub_24159D6B0(0, &qword_25713E290, type metadata accessor for MedicalIDEditableSettingsViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
      sub_2416BAE28();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_2416BADD4();
      (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(v7, v12, v9);
      swift_storeEnumTagMultiPayload();
      sub_2415FC998();
      sub_241651E3C();
      sub_2416BA57C();
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      if (qword_257139558 != -1)
        swift_once();
      v26 = qword_25713E060;
      v25 = *(_QWORD *)algn_25713E068;
      swift_bridgeObjectRetain();
      locked = MedicalIDSettingsViewModel.showWhenLockedDetail.getter();
      *v7 = v26;
      v7[1] = v25;
      v7[2] = locked;
      v7[3] = v28;
      swift_storeEnumTagMultiPayload();
      sub_2415FC998();
      sub_241651E3C();
      return sub_2416BA57C();
    }
  }
  else
  {
    sub_2415CA770();
    sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
    result = sub_2416BA264();
    __break(1u);
  }
  return result;
}

uint64_t sub_24164FF4C@<X0>(uint64_t a1@<X8>)
{
  return sub_2416504D0(&qword_257139558, a1);
}

uint64_t sub_24164FF6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, ValueMetadata *);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  MIUIDisplayConfiguration *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;

  v46 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x24BDEF380];
  sub_241652428(0, &qword_25713E298, (uint64_t (*)(uint64_t, uint64_t, _QWORD))MEMORY[0x24BDEF380]);
  v45 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v40 - v5;
  sub_241651198(0, &qword_25713E288, v3);
  v42 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v40 - v8);
  sub_241651198(0, &qword_25713E178, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x24BDEF3B8]);
  v44 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v40 - v11;
  sub_2415A3D28(0, &qword_25713BBE8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], MEMORY[0x24BDF46B0]);
  v43 = v13;
  v41 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v40 - v14;
  v16 = type metadata accessor for MedicalIDSettingsViewModel(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEF64(a1, (uint64_t)v18, v19);
  v20 = type metadata accessor for MedicalIDEditSettingsView();
  v21 = *(void **)(a1 + *(int *)(v20 + 32));
  if (v21)
  {
    v22 = v20;
    v23 = a1 + *(int *)(v20 + 24);
    v24 = *(_BYTE *)v23;
    v25 = *(_QWORD *)(v23 + 8);
    LOBYTE(v49) = v24;
    v50 = v25;
    sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
    v26 = v21;
    sub_2416BAD14();
    MedicalIDSettingsViewModel.shareDuringEmergencyCallViewState(with:hasShareDuringEmergencyCallBeenEnabled:)(v26, v47);

    sub_2415A6154((uint64_t)v18, type metadata accessor for MedicalIDSettingsViewModel);
    if (v52)
    {
      if (v52 == 1)
      {
        if (qword_257139550 != -1)
          swift_once();
        v28 = qword_25713E050;
        v27 = *(_QWORD *)algn_25713E058;
        swift_bridgeObjectRetain();
        v29 = MedicalIDSettingsViewModel.shareDuringEmergencyCallDetail.getter();
        *v9 = v28;
        v9[1] = v27;
        v9[2] = v29;
        v9[3] = v30;
        swift_storeEnumTagMultiPayload();
        sub_2415FC998();
        sub_241651E3C();
        sub_2416BA57C();
        sub_241652498((uint64_t)v12, (uint64_t)v6);
        swift_storeEnumTagMultiPayload();
        sub_241651DC4();
        sub_2416BA57C();
        return sub_2416524EC((uint64_t)v12);
      }
      else
      {
        swift_storeEnumTagMultiPayload();
        sub_241651DC4();
        return sub_2416BA57C();
      }
    }
    else
    {
      v32 = (uint64_t *)(a1 + *(int *)(v22 + 28));
      v34 = *v32;
      v33 = v32[1];
      v47 = v34;
      v48 = v33;
      sub_24159D6B0(0, &qword_25713E228, type metadata accessor for MedicalIDEditableSettingsViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
      sub_2416BAD2C();
      v35 = v49;
      v36 = v50;
      v37 = v51;
      swift_getKeyPath();
      v49 = v35;
      v50 = v36;
      v51 = v37;
      sub_24159D6B0(0, &qword_25713E290, type metadata accessor for MedicalIDEditableSettingsViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
      sub_2416BAE28();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_2416BADD4();
      v38 = v41;
      v39 = v43;
      (*(void (**)(uint64_t *, char *, uint64_t))(v41 + 16))(v9, v15, v43);
      swift_storeEnumTagMultiPayload();
      sub_2415FC998();
      sub_241651E3C();
      sub_2416BA57C();
      sub_241652498((uint64_t)v12, (uint64_t)v6);
      swift_storeEnumTagMultiPayload();
      sub_241651DC4();
      sub_2416BA57C();
      sub_2416524EC((uint64_t)v12);
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v15, v39);
    }
  }
  else
  {
    sub_2415CA770();
    sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
    result = sub_2416BA264();
    __break(1u);
  }
  return result;
}

uint64_t sub_2416504B0@<X0>(uint64_t a1@<X8>)
{
  return sub_2416504D0(&qword_257139550, a1);
}

uint64_t sub_2416504D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  sub_2415C343C();
  swift_bridgeObjectRetain();
  result = sub_2416BA9D8();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5 & 1;
  *(_QWORD *)(a2 + 24) = v6;
  return result;
}

uint64_t sub_24165055C()
{
  type metadata accessor for MedicalIDEditSettingsView();
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD20();
  return sub_2416BA090();
}

uint64_t sub_2416505EC@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_241650644(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = type metadata accessor for MedicalIDEditSettingsView();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24165191C(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2416BB2A8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  sub_2415BEF64(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditSettingsView);
  sub_2416BB290();
  v10 = sub_2416BB284();
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v12 = swift_allocObject();
  v13 = MEMORY[0x24BEE6930];
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v13;
  sub_2415A85BC((uint64_t)v5, v12 + v11, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditSettingsView);
  sub_241650DC0((uint64_t)v8, (uint64_t)&unk_25713E238, v12);
  return swift_release();
}

uint64_t sub_241650784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[15] = a4;
  sub_2415A6FC4(0);
  v4[16] = swift_task_alloc();
  v4[17] = type metadata accessor for MedicalIDData();
  v4[18] = swift_task_alloc();
  v4[19] = type metadata accessor for MedicalIDEditSettingsView();
  v4[20] = swift_task_alloc();
  v4[21] = sub_2416BB290();
  v4[22] = sub_2416BB284();
  v4[23] = sub_2416BB254();
  v4[24] = v5;
  return swift_task_switch();
}

uint64_t sub_24165085C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[20];
  v2 = v0[15];
  v3 = *(_BYTE *)(v2 + *(int *)(v0[19] + 36) + 8);
  v4 = swift_retain();
  v0[25] = sub_2415C0C54(v4, v3);
  swift_release();
  sub_2415BEF64(v2, v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditSettingsView);
  v0[26] = sub_2416BB284();
  v0[27] = sub_2416BB254();
  v0[28] = v5;
  return swift_task_switch();
}

uint64_t sub_241650914()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v1 = v0[25];
  v2 = v0[19];
  v3 = v0[20];
  v4 = v0[18];
  v14 = v0[17];
  v5 = v0[16];
  swift_getKeyPath();
  v0[12] = v1;
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  v6 = v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_2415BEF64(v6, v5, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  LoadState<>.loadedValue.getter(v4);
  sub_2415A6154(v5, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  v7 = (_QWORD *)(v3 + *(int *)(v2 + 28));
  v8 = v7[1];
  v0[7] = *v7;
  v0[8] = v8;
  sub_24159D6B0(0, &qword_25713E228, type metadata accessor for MedicalIDEditableSettingsViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v9 = v0[9];
  swift_getKeyPath();
  v0[10] = v9;
  sub_24159CE88((unint64_t *)&qword_25713A8F0, type metadata accessor for MedicalIDEditableSettingsViewModel, (uint64_t)&unk_2416BD800);
  sub_2416B9CAC();
  swift_release();
  LOBYTE(v6) = *(_BYTE *)(v9 + 16);
  swift_release();
  *(_BYTE *)(v4 + *(int *)(v14 + 72)) = v6;
  v10 = v7[1];
  v0[5] = *v7;
  v0[6] = v10;
  sub_2416BAD14();
  v11 = v0[11];
  swift_getKeyPath();
  v0[13] = v11;
  sub_2416B9CAC();
  swift_release();
  LOBYTE(v6) = *(_BYTE *)(v11 + 17);
  swift_release();
  *(_BYTE *)(v4 + *(int *)(v14 + 68)) = (v6 & 1) == 0;
  v12 = (_QWORD *)swift_task_alloc();
  v0[29] = v12;
  *v12 = v0;
  v12[1] = sub_241650B88;
  return sub_24167239C(v0[18], (uint64_t)(v0 + 14));
}

uint64_t sub_241650B88()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_241650BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 144);
  swift_release();
  sub_2415A6154(v2, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  sub_2415A6154(v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditSettingsView);
  swift_release();
  return swift_task_switch();
}

uint64_t sub_241650C58()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_241650CB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[20];
  v2 = v0[18];
  swift_release();
  sub_2415A6154(v2, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  v0[30] = v0[14];
  sub_2415A6154(v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditSettingsView);
  swift_release();
  return swift_task_switch();
}

uint64_t sub_241650D30()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 240);
  swift_release();
  sub_2415CF224();
  swift_allocError();
  *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_241650DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_2416BB2A8();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_2416BB29C();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_2415A6154(a1, (uint64_t (*)(_QWORD))sub_24165191C);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_2416BB254();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void sub_241650EF8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E118)
  {
    sub_24159D6B0(255, &qword_25713E120, (uint64_t (*)(uint64_t))sub_241650F70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_24165155C();
    v0 = sub_2416BAF78();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E118);
  }
}

void sub_241650F70()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713E128)
  {
    sub_241650FF4();
    sub_241651060(255);
    sub_241651298(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713E128);
  }
}

void sub_241650FF4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E130)
  {
    sub_241651218(255, &qword_25713E138, &qword_25713E140, (uint64_t)&type metadata for ListInsetGroupedTableHeaderView);
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E130);
  }
}

void sub_241651060(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713E148, (uint64_t (*)(uint64_t))sub_24165107C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_24165107C(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713E150, (uint64_t (*)(uint64_t))sub_241651098, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_241651098()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713E158)
  {
    sub_24165111C();
    sub_241651218(255, &qword_25713E180, &qword_25713E188, (uint64_t)&type metadata for ListInsetGroupedFooterView);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713E158);
  }
}

void sub_24165111C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E160)
  {
    sub_2416513B8(255, &qword_25713E168, &qword_25713E170, (uint64_t)&unk_25713E178, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_241651198);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E160);
  }
}

void sub_241651198(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, ValueMetadata *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_2415A3D28(255, &qword_25713BBE8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], MEMORY[0x24BDF46B0]);
    v7 = a3(a1, v6, &type metadata for HorizontalTitleDetailLabelView);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_241651218(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_2415A3D28(255, a3, a4, MEMORY[0x24BDECC80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    sub_2416BA768();
    v5 = sub_2416BA150();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_241651298(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713E190, (uint64_t (*)(uint64_t))sub_2416512B4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_2416512B4(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713E198, (uint64_t (*)(uint64_t))sub_2416512D0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_2416512D0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713E1A0)
  {
    sub_24165133C();
    sub_241651484();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713E1A0);
  }
}

void sub_24165133C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E1A8)
  {
    sub_2416513B8(255, &qword_25713E1B0, &qword_25713E1B8, (uint64_t)&unk_25713E1C0, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_241652428);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E1A8);
  }
}

void sub_2416513B8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t (*)(void)))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_241651428(255, a3, a4, a5);
    sub_2416BA768();
    v6 = sub_2416BA150();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_241651428(uint64_t a1, unint64_t *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t (*)(void)))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    a4(255, a3, MEMORY[0x24BDEF3B8]);
    v5 = sub_2416BACA8();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_241651484()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E1C8)
  {
    sub_241651500();
    sub_24159D6B0(255, &qword_25713B948, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E1C8);
  }
}

void sub_241651500()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E1D0)
  {
    sub_2416BA768();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E1D0);
  }
}

unint64_t sub_24165155C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713E1D8;
  if (!qword_25713E1D8)
  {
    sub_24159D6B0(255, &qword_25713E120, (uint64_t (*)(uint64_t))sub_241650F70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v1);
    atomic_store(result, (unint64_t *)&qword_25713E1D8);
  }
  return result;
}

void sub_2416515BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E1E0)
  {
    sub_241650EF8();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E1E0);
  }
}

void sub_241651618(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_25713E1E8)
  {
    sub_2416515BC();
    v5[0] = v2;
    v5[1] = type metadata accessor for MedicalIDLearnMoreNavigationView();
    v5[2] = sub_2416516D0();
    v5[3] = sub_24159CE88((unint64_t *)&qword_25713BAB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDLearnMoreNavigationView, (uint64_t)&unk_2416C0724);
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF3650], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713E1E8);
  }
}

unint64_t sub_2416516D0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713E1F0;
  if (!qword_25713E1F0)
  {
    sub_2416515BC();
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713E1F8, (uint64_t (*)(uint64_t))sub_241650EF8, MEMORY[0x24BDF5210]);
    v3[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713E1F0);
  }
  return result;
}

void sub_241651750(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_25713E200)
  {
    sub_241651618(255);
    v3 = v2;
    sub_24159D7F0(255, &qword_25713E208, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v5 = v4;
    sub_2416515BC();
    type metadata accessor for MedicalIDLearnMoreNavigationView();
    sub_2416516D0();
    sub_24159CE88((unint64_t *)&qword_25713BAB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDLearnMoreNavigationView, (uint64_t)&unk_2416C0724);
    v8[0] = v3;
    v8[1] = v5;
    v8[2] = swift_getOpaqueTypeConformance2();
    v8[3] = sub_241651864();
    v6 = MEMORY[0x242699480](a1, v8, MEMORY[0x24BDF3908], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713E200);
  }
}

unint64_t sub_241651864()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_25713E210;
  if (!qword_25713E210)
  {
    sub_24159D7F0(255, &qword_25713E208, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v2 = MEMORY[0x24BEE1340];
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE12C0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_25713E210);
  }
  return result;
}

uint64_t sub_2416518D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24164E6A0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2416518F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDEditSettingsView() - 8) + 80);
  return sub_241650644(v0 + ((v1 + 16) & ~v1));
}

void sub_24165191C(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713A560, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_241651938()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(unint64_t, uint64_t, uint64_t);
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v1 = type metadata accessor for MedicalIDEditSettingsView();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_unknownObjectRelease();
  v3 = v0 + v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = (int *)type metadata accessor for MedicalIDData();
  v5 = v0 + v2 + v4[13];
  v6 = sub_2416B9B50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = v3 + v4[14];
  if (!v8(v9, 1, v6))
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)(v3 + v4[19]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_2415A0DAC(*v10, v11);
  v12 = v3 + v4[20];
  v13 = sub_2416B9A18();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);

  v15 = v3 + v4[22];
  if (!v8(v15, 1, v6))
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v15, v6);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_241651BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDEditSettingsView() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_2415C2834;
  return sub_241650784(a1, v5, v6, v7);
}

uint64_t sub_241651C40(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0xD000000000000010, 0x80000002416C5600, &qword_25713E040, algn_25713E048);
}

uint64_t sub_241651C68(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0xD00000000000001BLL, 0x80000002416C5440, &qword_25713E050, algn_25713E058);
}

uint64_t sub_241651C90(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0xD000000000000010, 0x80000002416C5620, &qword_25713E060, algn_25713E068);
}

void sub_241651CB8()
{
  qword_25713E070 = 0x4020000000000000;
}

unint64_t sub_241651CD4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_25713E240;
  if (!qword_25713E240)
  {
    sub_241651428(255, &qword_25713E1B8, (uint64_t)&qword_25713E1C0, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_241652428);
    v2 = v1;
    v3 = sub_241651D4C();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF3F50], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713E240);
  }
  return result;
}

unint64_t sub_241651D4C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713E248;
  if (!qword_25713E248)
  {
    sub_241652428(255, &qword_25713E1C0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3[0] = sub_241651DC4();
    v3[1] = MEMORY[0x24BDF5138];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713E248);
  }
  return result;
}

unint64_t sub_241651DC4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713E250;
  if (!qword_25713E250)
  {
    sub_241651198(255, &qword_25713E178, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3[0] = sub_2415FC998();
    v3[1] = sub_241651E3C();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713E250);
  }
  return result;
}

unint64_t sub_241651E3C()
{
  unint64_t result;

  result = qword_25713E258;
  if (!qword_25713E258)
  {
    result = MEMORY[0x2426994BC](&unk_2416C2B80, &type metadata for HorizontalTitleDetailLabelView);
    atomic_store(result, (unint64_t *)&qword_25713E258);
  }
  return result;
}

uint64_t sub_241651E80(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t (*)(void)))
{
  uint64_t v8;

  sub_2416513B8(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_241651ED4(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t (*)(void)))
{
  uint64_t v6;

  sub_2416513B8(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

unint64_t sub_241651F10()
{
  unint64_t result;

  result = qword_25713E260;
  if (!qword_25713E260)
  {
    result = MEMORY[0x2426994BC](&unk_2416C20D0, &type metadata for ListInsetGroupedFooterView);
    atomic_store(result, (unint64_t *)&qword_25713E260);
  }
  return result;
}

uint64_t sub_241651F54()
{
  return sub_2416BA378();
}

uint64_t objectdestroyTm_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for MedicalIDEditSettingsView();
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v3 = (int *)type metadata accessor for MedicalIDData();
  v4 = v2 + v3[13];
  v5 = sub_2416B9B50();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = v2 + v3[14];
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (uint64_t *)(v2 + v3[19]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_2415A0DAC(*v9, v10);
  v11 = v2 + v3[20];
  v12 = sub_2416B9A18();
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);

  v14 = v2 + v3[22];
  if (!v7(v14, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2416521F8()
{
  type metadata accessor for MedicalIDEditSettingsView();
  return sub_24165055C();
}

unint64_t sub_241652244()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_25713E268;
  if (!qword_25713E268)
  {
    sub_241651428(255, &qword_25713E170, (uint64_t)&qword_25713E178, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_241651198);
    v2 = v1;
    v3 = sub_241651DC4();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF3F50], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713E268);
  }
  return result;
}

uint64_t sub_2416522BC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    sub_2415A3D28(255, a2, a3, MEMORY[0x24BDECC80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v8 = v7;
    v9[0] = a4();
    v9[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_241652338(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_241651218(0, &qword_25713E180, &qword_25713E188, (uint64_t)&type metadata for ListInsetGroupedFooterView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_241652394()
{
  unint64_t result;

  result = qword_25713E280;
  if (!qword_25713E280)
  {
    result = MEMORY[0x2426994BC](&unk_2416C2080, &type metadata for ListInsetGroupedTableHeaderView);
    atomic_store(result, (unint64_t *)&qword_25713E280);
  }
  return result;
}

uint64_t sub_2416523D8(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v7;

  sub_241651218(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

void sub_241652428(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_241651198(255, &qword_25713E178, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x24BDEF3B8]);
    v7 = a3(a1, v6, MEMORY[0x24BDF5158]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_241652498(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_241651198(0, &qword_25713E178, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x24BDEF3B8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2416524EC(uint64_t a1)
{
  uint64_t v2;

  sub_241651198(0, &qword_25713E178, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x24BDEF3B8]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_241652538()
{
  sub_241651618(255);
  sub_24159D7F0(255, &qword_25713E208, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_2416515BC();
  type metadata accessor for MedicalIDLearnMoreNavigationView();
  sub_2416516D0();
  sub_24159CE88((unint64_t *)&qword_25713BAB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDLearnMoreNavigationView, (uint64_t)&unk_2416C0724);
  swift_getOpaqueTypeConformance2();
  sub_241651864();
  return swift_getOpaqueTypeConformance2();
}

void *MedicalIDViewFactory.scrollView.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDViewFactory_scrollView);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void MedicalIDViewFactory.scrollView.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDViewFactory_scrollView);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*MedicalIDViewFactory.scrollView.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id MedicalIDViewFactory.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id MedicalIDViewFactory.init()()
{
  char *v0;
  objc_class *ObjectType;
  objc_super v3;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MedicalIDUI20MedicalIDViewFactory_scrollView] = 0;
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_init);
}

char *MedicalIDViewFactory.makeHostingController(healthStore:medicalIDData:displayConfiguration:)(void *a1, void *a2, void *a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t *v14;
  id v15;
  id v16;
  char *v17;
  char *v18;
  void *v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  char *v22;
  void *v23;
  void **v24;
  void *v25;
  id v26;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a1;
  v5 = sub_2416BA78C();
  MEMORY[0x24BDAC7A8](v5);
  v6 = (int *)type metadata accessor for MedicalIDMainView();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v28 - v10;
  objc_msgSend(a3, sel_setIsHostingView_, 1);
  v12 = (_QWORD *)((char *)v9 + v6[5]);
  *v12 = swift_getKeyPath();
  v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v14 = (_QWORD *)((char *)v9 + v6[6]);
  *v14 = swift_getKeyPath();
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], v13);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for MedicalIDModelProvider();
  swift_allocObject();
  v15 = a2;
  v16 = a3;
  *v9 = sub_2415A6230(v29, a2, (uint64_t)v16);
  *(_QWORD *)((char *)v9 + v6[8]) = v16;
  v17 = (char *)v9 + v6[7];
  *v17 = 1;
  *((_QWORD *)v17 + 1) = 0;
  sub_2415E2C0C((uint64_t)v9, (uint64_t)v11);
  v18 = (char *)objc_allocWithZone((Class)type metadata accessor for MedicalIDHostingController());
  *(_QWORD *)&v18[qword_25713E2A8] = 0;
  sub_241652E50((uint64_t)v11, (uint64_t)v9);
  v19 = (void *)sub_2416BA54C();
  sub_241652E94((uint64_t)v11);
  v20 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1200];
  sub_24159D6B0(0, &qword_25713E2B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1200], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_2416BCC80;
  v22 = v19;
  sub_2416BA774();
  sub_2416BA780();
  v31 = v21;
  sub_241652ED0();
  sub_24159D6B0(0, &qword_25713E2C0, v20, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_241652F18();
  sub_2416BB4A0();
  sub_2416BA540();

  v23 = *(void **)&v22[qword_25713E2A8];
  v24 = (void **)(v30 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDViewFactory_scrollView);
  swift_beginAccess();
  v25 = *v24;
  *v24 = v23;
  v26 = v23;

  return v22;
}

uint64_t sub_241652B74(uint64_t a1)
{
  objc_class *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v3 = type metadata accessor for MedicalIDMainView();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v6[qword_25713E2A8] = 0;
  sub_241652E50(a1, (uint64_t)v5);
  v7 = sub_2416BA54C();
  sub_241652E94(a1);
  return v7;
}

uint64_t sub_241652CA0()
{
  return 1;
}

void sub_241652CA8(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  char *v7;
  void *v8;
  objc_super v9;

  v9.receiver = a1;
  v9.super_class = (Class)swift_getObjectType();
  v6 = a3;
  v7 = (char *)v9.receiver;
  objc_msgSendSuper2(&v9, sel_setContentScrollView_forEdge_, v6, a4);
  v8 = *(void **)&v7[qword_25713E2A8];
  *(_QWORD *)&v7[qword_25713E2A8] = a3;

}

id sub_241652D30(char *a1, uint64_t a2, uint64_t a3)
{
  objc_class *ObjectType;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&a1[qword_25713E2A8] = 0;
  v7.receiver = a1;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_initWithCoder_, a3);
}

void sub_241652D80()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_241652DAC()
{
  uint64_t v0;

}

id _s11MedicalIDUI0A13IDViewFactoryCfD_0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_241652DF4(uint64_t a1)
{

}

uint64_t type metadata accessor for MedicalIDHostingController()
{
  uint64_t result;

  result = qword_25713E2F8;
  if (!qword_25713E2F8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_241652E50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MedicalIDMainView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_241652E94(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MedicalIDMainView();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_241652ED0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713E2B8;
  if (!qword_25713E2B8)
  {
    v1 = sub_2416BA78C();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF1210], v1);
    atomic_store(result, (unint64_t *)&qword_25713E2B8);
  }
  return result;
}

unint64_t sub_241652F18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713E2C8;
  if (!qword_25713E2C8)
  {
    sub_24159D6B0(255, &qword_25713E2C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1200], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25713E2C8);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDViewFactory()
{
  return objc_opt_self();
}

uint64_t sub_241652F98()
{
  return swift_initClassMetadata2();
}

uint64_t sub_241652FE0()
{
  return type metadata accessor for MedicalIDHostingController();
}

void sub_241652FE8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *oslog;
  uint64_t v7;

  if (HKImproveHealthAndActivityAnalyticsAllowed())
  {
    v0 = (void *)sub_2416BB0F8();
    sub_2416298D8();
    v1 = (void *)sub_2416BB038();
    AnalyticsSendEvent();

    if (qword_2571395C0 != -1)
      swift_once();
    v2 = sub_2416B9D6C();
    __swift_project_value_buffer(v2, (uint64_t)qword_257147810);
    oslog = sub_2416B9D54();
    v3 = sub_2416BB38C();
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = swift_slowAlloc();
      v7 = v5;
      *(_DWORD *)v4 = 136315138;
      sub_2415A8600(0xD00000000000001DLL, 0x80000002416C57B0, &v7);
      sub_2416BB44C();
      _os_log_impl(&dword_241599000, oslog, v3, "[%s] Submitted Medical ID Access Event", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v5, -1, -1);
      MEMORY[0x242699570](v4, -1, -1);

    }
    else
    {

    }
  }
}

unint64_t sub_2416531DC()
{
  uint64_t inited;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_241653394();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2416C14C0;
  *(_QWORD *)(inited + 32) = 0xD000000000000015;
  *(_QWORD *)(inited + 40) = 0x80000002416C57D0;
  v1 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v2 = objc_msgSend(v1, sel_bundleIdentifier);

  if (v2)
  {
    sub_2416BB128();

  }
  v3 = sub_2416BB0F8();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = 0xD000000000000010;
  *(_QWORD *)(inited + 64) = 0x80000002416C57F0;
  v4 = sub_2416BB0F8();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 72) = v4;
  *(_QWORD *)(inited + 80) = 0x54656C69666F7270;
  *(_QWORD *)(inited + 88) = 0xEB00000000657079;
  *(_QWORD *)(inited + 96) = sub_2416BB2F0();
  strcpy((char *)(inited + 104), "typeOfAccess");
  *(_BYTE *)(inited + 117) = 0;
  *(_WORD *)(inited + 118) = -5120;
  v5 = sub_2416BB0F8();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 120) = v5;
  return sub_24166CD90(inited);
}

void sub_241653394()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E348)
  {
    sub_2416533E8();
    v0 = sub_2416BB638();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E348);
  }
}

void sub_2416533E8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713E350)
  {
    sub_2416298D8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713E350);
  }
}

uint64_t sub_24165344C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_241653458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_2416534D4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416534E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MedicalIDMedicalConditionsCellView()
{
  uint64_t result;

  result = qword_25713E3B0;
  if (!qword_25713E3B0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_241653594()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2416535A4@<X0>(uint64_t a1@<X8>)
{
  void **v1;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  if (qword_257139480 != -1)
    swift_once();
  v3 = *(_QWORD *)algn_257147718;
  v21 = qword_257147710;
  v4 = *v1;
  swift_bridgeObjectRetain();
  v5 = objc_msgSend(v4, sel_medicalConditions);
  if (v5)
  {
    v6 = v5;
    v7 = sub_2416BB128();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v10);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v11 = (void *)qword_25713A038;
  v12 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v12);
  v13 = v11;
  sub_2416B9C04();
  v14 = sub_2416BB134();
  v16 = v15;
  v17 = (uint64_t *)((char *)v1 + *(int *)(type metadata accessor for MedicalIDMedicalConditionsCellView() + 20));
  v19 = *v17;
  v18 = v17[1];
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = 2;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 64) = v18;
  return swift_retain();
}

__n128 sub_24165379C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  _QWORD v8[2];
  char v9;
  __int128 v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;

  sub_2416535A4((uint64_t)v8);
  v2 = v8[1];
  v3 = v9;
  v4 = v11;
  v5 = v13;
  result = v12;
  v7 = v10;
  *(_QWORD *)a1 = v8[0];
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 40) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_QWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t MedicalIDPregnancyViewModel.pregnancyDueDateLabelState(_:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t result;
  char v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  void (*v64)(char *, char *, uint64_t);
  char v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t);
  char *v79;
  char v80;
  _QWORD v81[2];
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t (*v89)(char *, uint64_t, uint64_t);
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  char *v95;

  v3 = v2;
  v94 = a2;
  v5 = type metadata accessor for MedicalIDPregnancyViewModel();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v86 = (uint64_t)v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v87 = (_QWORD *)((char *)v81 - v9);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v90 = (void (*)(char *, uint64_t))((char *)v81 - v11);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v81 - v12;
  v14 = sub_2416B9B50();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x24BDAC7A8](v14);
  v95 = (char *)v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_257139BD0, v17, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = v20;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)v81 - v22;
  sub_24160C2C8(a1, (uint64_t)v81 - v22);
  v93 = v3;
  sub_2415BEF64(v3, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v25 = v24(v23, 1, v14);
  v91 = v5;
  if (v25 == 1)
  {
    v26 = *(int *)(v5 + 20);
    v27 = type metadata accessor for MedicalIDData();
    sub_24160C2C8((uint64_t)&v13[v26 + *(int *)(v27 + 56)], (uint64_t)v21);
    sub_2416540DC((uint64_t)v13);
    sub_2415A3FE0((uint64_t)v23);
    if (v24(v21, 1, v14) != 1)
    {
      v28 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      goto LABEL_6;
    }
LABEL_5:
    result = sub_2415A3FE0((uint64_t)v21);
    v30 = 3;
LABEL_16:
    *v94 = v30;
    return result;
  }
  sub_2416540DC((uint64_t)v13);
  v28 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v28(v21, v23, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v21, 0, 1, v14);
  if (v24(v21, 1, v14) == 1)
    goto LABEL_5;
LABEL_6:
  v31 = v16;
  v32 = v95;
  v33 = ((uint64_t (*)(char *, char *, uint64_t))v28)(v95, v21, v14);
  v85 = (char *)v81;
  MEMORY[0x24BDAC7A8](v33);
  v34 = v15;
  v35 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  v89 = v24;
  v36 = v91;
  v37 = v93;
  v88 = v93 + *(int *)(v91 + 24);
  sub_2416B9C34();
  v38 = v36;
  v39 = *(void (**)(char *, uint64_t))(v34 + 8);
  v39(v32, v14);
  v40 = v32;
  v41 = v31;
  v42 = ((uint64_t (*)(char *, char *, uint64_t))v28)(v40, (char *)v81 - v35, v14);
  v85 = (char *)v81;
  MEMORY[0x24BDAC7A8](v42);
  v82 = (char *)v35;
  v43 = (char *)v81 - v35;
  v44 = MEMORY[0x24BDAC7A8](v37 + *(int *)(v38 + 36));
  v46 = (char *)v81 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = v44;
  sub_24160C2C8(v44, (uint64_t)v46);
  v47 = v90;
  sub_2415BEF64(v37, (uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
  v48 = v89(v46, 1, v14);
  v83 = v28;
  if ((_DWORD)v48 == 1)
  {
    MEMORY[0x24BDAC7A8](v48);
    v49 = (uint64_t)v47;
    v50 = (char *)((char *)v81 - v82);
    sub_2416B9B44();
    sub_2416B9C34();
    v39(v50, v14);
    sub_2416540DC(v49);
    v51 = v95;
    v52 = sub_2415A3FE0((uint64_t)v46);
  }
  else
  {
    sub_2416540DC((uint64_t)v47);
    v52 = ((uint64_t (*)(char *, char *, uint64_t))v28)(v43, v46, v14);
    v51 = v95;
  }
  MEMORY[0x24BDAC7A8](v52);
  v53 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2416B9C34();
  v54 = sub_2416B9B20();
  v39((char *)v81 - v53, v14);
  v55 = ((uint64_t (*)(char *, uint64_t))v39)(v43, v14);
  if ((v54 & 1) != 0)
  {
    result = ((uint64_t (*)(char *, uint64_t))v39)(v51, v14);
    *v94 = 0;
    return result;
  }
  v90 = v39;
  v85 = (char *)v81;
  v56 = MEMORY[0x24BDAC7A8](v55);
  v82 = (char *)v81;
  v57 = MEMORY[0x24BDAC7A8](v56);
  v58 = (char *)v81 - v53;
  MEMORY[0x24BDAC7A8](v57);
  v60 = (char *)v81 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24160C2C8(v84, (uint64_t)v60);
  v61 = (uint64_t)v87;
  sub_2415BEF64(v93, (uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
  v62 = v89(v60, 1, v14);
  if ((_DWORD)v62 == 1)
  {
    MEMORY[0x24BDAC7A8](v62);
    sub_2416B9B44();
    sub_2416B9C34();
    v63 = v90;
    v90((char *)v81 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    sub_2416540DC(v61);
    v51 = v95;
    sub_2415A3FE0((uint64_t)v60);
    v64 = v83;
  }
  else
  {
    sub_2416540DC(v61);
    v64 = v83;
    v83(v58, v60, v14);
    v63 = v90;
  }
  sub_2416B9C34();
  v63(v58, v14);
  v65 = sub_2416B9B14();
  v66 = ((uint64_t (*)(char *, uint64_t))v63)((char *)v81 - v53, v14);
  if ((v65 & 1) != 0)
  {
    result = ((uint64_t (*)(char *, uint64_t))v63)(v51, v14);
    v30 = 2;
    goto LABEL_16;
  }
  v87 = v81;
  MEMORY[0x24BDAC7A8](v66);
  v67 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_241654118();
  v85 = (char *)v81 - v67;
  v68 = sub_2416BB3EC();
  v82 = (char *)v81;
  v69 = MEMORY[0x24BDAC7A8](v68);
  v70 = (char *)v81 - v67;
  v81[1] = v81;
  v71 = MEMORY[0x24BDAC7A8](v69);
  v72 = (char *)v81 - v67;
  MEMORY[0x24BDAC7A8](v71);
  v74 = (char *)v81 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24160C2C8(v84, (uint64_t)v74);
  v75 = v86;
  sub_2415BEF64(v93, v86, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
  v76 = v89(v74, 1, v14);
  if ((_DWORD)v76 == 1)
  {
    MEMORY[0x24BDAC7A8](v76);
    sub_2416B9B44();
    sub_2416B9C34();
    v77 = (char *)v81 - v67;
    v78 = v90;
    v90(v77, v14);
    sub_2416540DC(v75);
    sub_2415A3FE0((uint64_t)v74);
  }
  else
  {
    sub_2416540DC(v75);
    v64((char *)v81 - v67, v74, v14);
    v78 = v90;
  }
  sub_2416B9C34();
  v78(v72, v14);
  v79 = v85;
  v80 = sub_2416B9B14();
  v78(v70, v14);
  v78(v79, v14);
  result = ((uint64_t (*)(char *, uint64_t))v78)(v51, v14);
  *v94 = (v80 & 1) != 0;
  return result;
}

uint64_t type metadata accessor for MedicalIDPregnancyViewModel()
{
  uint64_t result;

  result = qword_25713E450;
  if (!qword_25713E450)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2416540DC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MedicalIDPregnancyViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_241654118()
{
  unint64_t result;

  result = qword_25713DAD0;
  if (!qword_25713DAD0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25713DAD0);
  }
  return result;
}

uint64_t MedicalIDPregnancyViewModel.gestationalAgeDescription(dueDate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  char *v27;
  uint64_t v28;

  v3 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2416B9B50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v27 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_257139BD0, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v27 - v14;
  sub_24160C2C8(a1, (uint64_t)&v27 - v14);
  v28 = v1;
  sub_2415BEF64(v1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v16(v15, 1, v6) == 1)
  {
    v17 = *(int *)(v3 + 20);
    v18 = type metadata accessor for MedicalIDData();
    sub_24160C2C8((uint64_t)&v5[v17 + *(int *)(v18 + 56)], (uint64_t)v13);
    sub_2416540DC((uint64_t)v5);
    sub_2415A3FE0((uint64_t)v15);
    if (v16(v13, 1, v6) != 1)
    {
      v19 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
LABEL_6:
      v21 = v27;
      v22 = v19(v27, v13, v6);
      MEMORY[0x24BDAC7A8](v22);
      sub_241654118();
      v23 = sub_2416BB3EC();
      MEMORY[0x24BDAC7A8](v23);
      v24 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v24, (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v24, 0, 1, v6);
      v20 = MedicalIDPregnancyViewModel.gestationalAgeDescription(startDate:)((uint64_t)v24);
      sub_2415A3FE0((uint64_t)v24);
      v25 = *(void (**)(char *, uint64_t))(v7 + 8);
      v25((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
      v25(v21, v6);
      return v20;
    }
  }
  else
  {
    sub_2416540DC((uint64_t)v5);
    v19 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
    v19(v13, v15, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
    if (v16(v13, 1, v6) != 1)
      goto LABEL_6;
  }
  sub_2415A3FE0((uint64_t)v13);
  return 0;
}

uint64_t MedicalIDPregnancyViewModel.init(data:calendar:locale:sampleDataProvider:currentDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  id v16;
  unint64_t v17;
  int *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v12 = 0x636E616E67657250;
  sub_24159F83C();
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_2416BCC80;
  v14 = 0xE900000000000079;
  *(_QWORD *)(v13 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v13 + 40) = 0xE900000000000044;
  *(_QWORD *)(v13 + 48) = 0x636E616E67657250;
  *(_QWORD *)(v13 + 56) = 0xE900000000000079;
  v15 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v16 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v16)
  {
    v12 = sub_2416BB128();
    v14 = v17;

  }
  *a6 = v12;
  a6[1] = v14;
  v18 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  sub_2415A85BC(a1, (uint64_t)a6 + v18[5], (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  v19 = (char *)a6 + v18[6];
  v20 = sub_2416B9C70();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a2, v20);
  v21 = (char *)a6 + v18[7];
  v22 = sub_2416B9C10();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a3, v22);
  *(uint64_t *)((char *)a6 + v18[8]) = a4;
  return sub_2415A852C(a5, (uint64_t)a6 + v18[9]);
}

uint64_t MedicalIDPregnancyViewModel.defaultPregnancyDueDate(with:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  _QWORD v23[4];

  if (objc_msgSend(a1, sel_suggestHealthData))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    MEMORY[0x24BDAC7A8](v4);
    v6 = (char *)v23 - v5;
    v7 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for MedicalIDPregnancyViewModel() + 32));
    if (v7)
    {
      swift_getKeyPath();
      v23[1] = v7;
      sub_24160C244();
      sub_2416B9CAC();
      swift_release();
      v8 = v7 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate;
      swift_beginAccess();
      sub_24160C2C8(v8, (uint64_t)v6);
      v9 = sub_2416B9B50();
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) != 1)
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v6, v9);
    }
    else
    {
      v12 = sub_2416B9B50();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
    }
    sub_2415A3FE0((uint64_t)v6);
  }
  v13 = (id)HKUIDefaultPregnancyDueDate();
  sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v23 - v15;
  if (v13)
  {
    v17 = sub_2416B9B50();
    v18 = *(_QWORD *)(v17 - 8);
    MEMORY[0x24BDAC7A8](v17);
    v20 = (char *)v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2416B9B2C();

    v21 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v21(v16, v20, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v21)(a2, v16, v17);
  }
  else
  {
    v22 = sub_2416B9B50();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v16, 1, 1, v22);
  }
  sub_2416B9B44();
  return sub_2415A3FE0((uint64_t)v16);
}

id MedicalIDPregnancyViewModel.minimumSelectableDueDate.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id result;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD, uint64_t);
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, _QWORD, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t (*v40)(char *, char *, uint64_t);
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  char *v49;

  v3 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x24BDAC7A8](v3);
  v46 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2416B9B50();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v49 = (char *)&v36 - v8;
  sub_24159D6B0(0, &qword_257139BD0, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v48 = v1;
  _s11MedicalIDUI0A20IDPregnancyViewModelV24maximumSelectableDueDate10Foundation0I0VSgvg_0((uint64_t)&v36 - v12);
  v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v47((char *)&v36 - v12, 1, v5) == 1)
  {
    sub_2415A3FE0((uint64_t)&v36 - v12);
    return (id)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(a1, 1, 1, v5);
  }
  else
  {
    v44 = v6;
    v45 = a1;
    v40 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 32);
    v14 = v40(v49, (char *)&v36 - v12, v5);
    v43 = &v36;
    v15 = MEMORY[0x24BDAC7A8](v14);
    v38 = (char *)&v36 - v8;
    v42 = &v36;
    MEMORY[0x24BDAC7A8](v15);
    v16 = (char *)&v36 - v12;
    v39 = v3;
    v17 = sub_2416B9C64();
    v41 = &v36;
    v18 = *(_QWORD **)(v17 - 8);
    v19 = v18[8];
    MEMORY[0x24BDAC7A8](v17);
    v20 = (void (*)(char *, _QWORD, uint64_t))v18[13];
    v20((char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x24BDCF1E0], v17);
    result = objc_msgSend((id)objc_opt_self(), sel_maximumNumberOfWeeksPregnant);
    if (__OFSUB__(0, result))
    {
      __break(1u);
    }
    else
    {
      v37 = v20;
      v21 = v48;
      sub_2416B9C58();
      v22 = (void (*)(char *, uint64_t))v18[1];
      v22((char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
      v23 = v47;
      if (v47(v16, 1, v5) == 1)
      {
        v24 = v49;
        sub_2415A3FE0((uint64_t)v16);
        v25 = MEMORY[0x24BDAC7A8](v21 + *(int *)(v39 + 36));
        v26 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_24160C2C8(v25, (uint64_t)v26);
        v27 = v46;
        sub_2415BEF64(v21, v46, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
        v28 = v23(v26, 1, v5);
        if ((_DWORD)v28 == 1)
        {
          MEMORY[0x24BDAC7A8](v28);
          v29 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
          sub_2416B9B44();
          v30 = v45;
          sub_2416B9C34();
          v31 = v44;
          v32 = *(void (**)(char *, uint64_t))(v44 + 8);
          v32(v29, v5);
          sub_2416540DC(v27);
          sub_2415A3FE0((uint64_t)v26);
        }
        else
        {
          sub_2416540DC(v27);
          v30 = v45;
          v40(v45, v26, v5);
          v31 = v44;
          v32 = *(void (**)(char *, uint64_t))(v44 + 8);
        }
        v32(v24, v5);
        return (id)(*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v30, 0, 1, v5);
      }
      else
      {
        v33 = v38;
        v34 = v40(v38, v16, v5);
        MEMORY[0x24BDAC7A8](v34);
        v37((char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x24BDCF218], v17);
        sub_2416B9C58();
        v22((char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
        v35 = *(void (**)(char *, uint64_t))(v44 + 8);
        v35(v33, v5);
        return (id)((uint64_t (*)(char *, uint64_t))v35)(v49, v5);
      }
    }
  }
  return result;
}

uint64_t MedicalIDPregnancyViewModel.update(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v4 = sub_2416B9B50();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_257139BD0, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  sub_24160C2C8(a2, (uint64_t)&v20 - v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))((char *)&v20 - v10, 1, v4) == 1)
  {
    sub_2415A3FE0((uint64_t)&v20 - v10);
    v11 = type metadata accessor for MedicalIDData();
    v12 = a1 + *(int *)(v11 + 56);
    sub_2415A3FE0(v12);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v13(v12, 1, 1, v4);
    v14 = a1 + *(int *)(v11 + 52);
    sub_2415A3FE0(v14);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v14, 1, 1, v4);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, (char *)&v20 - v10, v4);
    v16 = type metadata accessor for MedicalIDData();
    v17 = a1 + *(int *)(v16 + 56);
    sub_2415A3FE0(v17);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v17, v7, v4);
    v18 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56);
    v19 = v18(v17, 0, 1, v4);
    MEMORY[0x24BDAC7A8](v19);
    sub_241654118();
    sub_2416BB3EC();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v18((uint64_t)&v20 - v10, 0, 1, v4);
    return sub_241657304((uint64_t)&v20 - v10, a1 + *(int *)(v16 + 52));
  }
}

double MedicalIDPregnancyViewModel.validationResult(for:)@<D0>(uint64_t (*a1)(char *, uint64_t)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  double result;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  char v46;
  void (*v47)(char *, char *);
  void *object;
  void *rawValue;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *);
  uint64_t v71;
  uint64_t (*v72)(char *, uint64_t, char *);
  char *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char v93;
  uint64_t v94;
  void *v95;
  void (*v96)(char *, char *);
  BOOL v97;
  uint64_t *v98;
  char *v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  void *v103;
  void *v104;
  void (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  uint64_t *v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t *v112;
  void (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  _QWORD v115[2];
  __int128 v116;
  void (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  _QWORD *v131;
  _QWORD *v132;
  void (*v133)(char *, char *);
  _QWORD *v134;
  _QWORD *v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t (*v139)(char *, char *, uint64_t);
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t (*v145)(char *, uint64_t);
  uint64_t *v146;
  char *v147;
  char v148;
  MedicalIDUI::BasicAlertModel v149;

  v146 = a2;
  v143 = type metadata accessor for MedicalIDPregnancyViewModel();
  v3 = MEMORY[0x24BDAC7A8](v143);
  v141 = (uint64_t)v115 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v142 = (uint64_t)v115 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v115 - v7;
  v9 = sub_2416B9B50();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908];
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v147 = (char *)v115 - v13;
  v14 = type metadata accessor for MedicalIDData();
  v15 = *(int *)(v14 + 52);
  v145 = a1;
  v16 = (uint64_t)a1 + v15;
  sub_24159D6B0(0, &qword_257139BD0, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v18 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64);
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v17);
  sub_24160C2C8(v16, (uint64_t)v115 - v19);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v20((char *)v115 - v19, 1, v9) == 1)
  {
    sub_2415A3FE0((uint64_t)v115 - v19);
LABEL_5:
    v25 = v146;
    v146[6] = 0;
    result = 0.0;
    *((_OWORD *)v25 + 1) = 0u;
    *((_OWORD *)v25 + 2) = 0u;
    *(_OWORD *)v25 = 0u;
    return result;
  }
  v21 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 32);
  v138 = v8;
  v139 = v21;
  v22 = v21(v147, (char *)v115 - v19, v9);
  MEMORY[0x24BDAC7A8](v22);
  v23 = (char *)v115 - v13;
  v140 = v115;
  v24 = MEMORY[0x24BDAC7A8]((char *)v145 + *(int *)(v14 + 56));
  sub_24160C2C8(v24, (uint64_t)v115 - v19);
  v145 = (uint64_t (*)(char *, uint64_t))v20;
  if (v20((char *)v115 - v19, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v147, v9);
    sub_2415A3FE0((uint64_t)v115 - v19);
    goto LABEL_5;
  }
  v135 = (_QWORD *)v11;
  v132 = v115;
  v27 = v139(v23, (char *)v115 - v19, v9);
  v28 = v23;
  v140 = v115;
  MEMORY[0x24BDAC7A8](v27);
  v136 = (char *)v9;
  v29 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v30 = (char *)v115 - v29;
  v31 = v143;
  v32 = (uint64_t)v144;
  v33 = v12;
  v34 = (char *)v144 + *(int *)(v143 + 24);
  v35 = v147;
  v36 = sub_2416B9C34();
  v131 = v115;
  MEMORY[0x24BDAC7A8](v36);
  v137 = (char *)v115 - v29;
  v130 = v28;
  v126 = v34;
  v37 = sub_2416B9C34();
  v134 = v115;
  MEMORY[0x24BDAC7A8](v37);
  v38 = (char *)v115 - v29;
  v133 = (void (*)(char *, char *))v115;
  v39 = MEMORY[0x24BDAC7A8](v32 + *(int *)(v31 + 36));
  v128 = v18;
  v40 = (char *)v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = v39;
  sub_24160C2C8(v39, (uint64_t)v40);
  v41 = (uint64_t)v138;
  sub_2415BEF64(v32, (uint64_t)v138, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
  v42 = v136;
  v43 = v145(v40, 1);
  v129 = v33;
  if ((_DWORD)v43 == 1)
  {
    MEMORY[0x24BDAC7A8](v43);
    sub_2416B9B44();
    sub_2416B9C34();
    v44 = v135;
    ((void (*)(char *, char *))v135[1])((char *)v115 - v29, v42);
    sub_2416540DC(v41);
    v30 = (char *)v115 - v29;
    v35 = v147;
    sub_2415A3FE0((uint64_t)v40);
    v45 = v42;
  }
  else
  {
    sub_2416540DC(v41);
    v139((char *)v115 - v29, (char *)v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v42);
    v45 = v42;
    v44 = v135;
  }
  sub_241657360();
  v46 = sub_2416BB074();
  v47 = (void (*)(char *, char *))v44[1];
  v47(v38, v45);
  if ((v46 & 1) != 0)
  {
    v148 = 1;
    MedicalIDPregnancyViewModel.validationError(for:)(&v149, (MedicalIDUI::MedicalIDPregnancyViewModel::ValidationError)&v148);
    v47(v137, v45);
    v47(v30, v45);
    v47(v130, v45);
    v47(v35, v45);
    object = v149.title._object;
    rawValue = v149.actions._rawValue;
    v50 = v146;
    *v146 = v149.title._countAndFlagsBits;
    v50[1] = (uint64_t)object;
    *((_OWORD *)v50 + 1) = v149.message;
    v50[4] = (uint64_t)rawValue;
    result = *(double *)&v149.code.value._countAndFlagsBits;
    *(Swift::String_optional *)(v50 + 5) = v149.code;
  }
  else
  {
    v133 = v47;
    v138 = v30;
    v51 = sub_2416B9A18();
    v124 = *(_QWORD *)(v51 - 8);
    MEMORY[0x24BDAC7A8](v51);
    v122 = v52;
    v136 = (char *)v115 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_24159D6B0(0, &qword_25713E3E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF298], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v54 = v53;
    v55 = sub_2416B9C64();
    v56 = *(_QWORD *)(v55 - 8);
    v57 = *(unsigned __int8 *)(v56 + 80);
    v58 = (v57 + 32) & ~v57;
    v59 = v58 + *(_QWORD *)(v56 + 72);
    v121 = v54;
    v119 = v59;
    v118 = v57 | 7;
    v60 = swift_allocObject();
    v116 = xmmword_2416BCF30;
    *(_OWORD *)(v60 + 16) = xmmword_2416BCF30;
    v120 = v58;
    v61 = *MEMORY[0x24BDCF1E0];
    v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 104);
    v117(v60 + v58, v61, v55);
    v135 = (_QWORD *)sub_2416B6AF0(v60);
    swift_setDeallocating();
    v123 = v55;
    swift_arrayDestroy();
    v62 = swift_deallocClassInstance();
    v134 = v115;
    v63 = v129;
    v64 = MEMORY[0x24BDAC7A8](v62);
    v65 = (v63 + 15) & 0xFFFFFFFFFFFFFFF0;
    MEMORY[0x24BDAC7A8](v64);
    v67 = (char *)v115 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_24160C2C8(v127, (uint64_t)v67);
    v68 = v142;
    sub_2415BEF64((uint64_t)v144, v142, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
    v69 = ((uint64_t (*)(char *, uint64_t, char *))v145)(v67, 1, v45);
    v125 = v51;
    if ((_DWORD)v69 == 1)
    {
      MEMORY[0x24BDAC7A8](v69);
      sub_2416B9B44();
      sub_2416B9C34();
      v70 = v133;
      v133((char *)v115 - v65, v45);
      sub_2416540DC(v68);
      sub_2415A3FE0((uint64_t)v67);
      v71 = (uint64_t)v138;
      v72 = (uint64_t (*)(char *, uint64_t, char *))v145;
    }
    else
    {
      sub_2416540DC(v68);
      v139((char *)v115 - v65, v67, (uint64_t)v45);
      v71 = (uint64_t)v138;
      v72 = (uint64_t (*)(char *, uint64_t, char *))v145;
      v70 = v133;
    }
    v73 = v136;
    sub_2416B9C40();
    swift_bridgeObjectRelease();
    v70((char *)v115 - v65, v45);
    v74 = sub_2416B997C();
    if ((v75 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v124 + 8))(v73, v125);
      v70(v137, v45);
      v70((char *)v71, v45);
      v70(v130, v45);
      v70(v147, v45);
      v87 = v146;
      v146[6] = 0;
      result = 0.0;
      *((_OWORD *)v87 + 1) = 0u;
      *((_OWORD *)v87 + 2) = 0u;
      *(_OWORD *)v87 = 0u;
    }
    else
    {
      v133 = (void (*)(char *, char *))v74;
      v145 = (uint64_t (*)(char *, uint64_t))v115;
      MEMORY[0x24BDAC7A8](v74);
      v142 = (uint64_t)v115 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
      v77 = swift_allocObject();
      *(_OWORD *)(v77 + 16) = v116;
      v117(v77 + v120, *MEMORY[0x24BDCF218], v123);
      sub_2416B6AF0(v77);
      swift_setDeallocating();
      swift_arrayDestroy();
      v78 = swift_deallocClassInstance();
      v135 = v115;
      v79 = v129;
      v80 = MEMORY[0x24BDAC7A8](v78);
      v81 = (v79 + 15) & 0xFFFFFFFFFFFFFFF0;
      v82 = (char *)v115 - v81;
      v134 = v115;
      MEMORY[0x24BDAC7A8](v80);
      v84 = (char *)v115 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_24160C2C8(v127, (uint64_t)v84);
      v85 = v141;
      sub_2415BEF64((uint64_t)v144, v141, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
      v86 = v72(v84, 1, v45);
      v115[1] = v115;
      if ((_DWORD)v86 == 1)
      {
        v144 = v115;
        MEMORY[0x24BDAC7A8](v86);
        sub_2416B9B44();
        sub_2416B9C34();
        v70((char *)v115 - v81, v45);
        sub_2416540DC(v85);
        sub_2415A3FE0((uint64_t)v84);
      }
      else
      {
        sub_2416540DC(v85);
        v139((char *)v115 - v81, v84, (uint64_t)v45);
      }
      v89 = v137;
      v88 = (uint64_t)v138;
      v90 = v142;
      sub_2416B9C40();
      swift_bridgeObjectRelease();
      v70(v82, v45);
      v91 = sub_2416B99AC();
      v92 = v45;
      if ((v93 & 1) != 0)
      {
        v105 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
        v106 = v125;
        v105(v90, v125);
        v105((uint64_t)v136, v106);
        v70(v89, v45);
        v70((char *)v88, v45);
        v70(v130, v45);
        v70(v147, v45);
        v107 = v146;
        v146[6] = 0;
        result = 0.0;
        *((_OWORD *)v107 + 1) = 0u;
        *((_OWORD *)v107 + 2) = 0u;
        *(_OWORD *)v107 = 0u;
      }
      else
      {
        v94 = v91;
        v95 = (void *)objc_opt_self();
        v96 = (void (*)(char *, char *))objc_msgSend(v95, sel_maximumNumberOfWeeksPregnant);
        if ((uint64_t)v133 >= (uint64_t)v96)
        {
          v148 = 0;
          MedicalIDPregnancyViewModel.validationError(for:)(&v149, (MedicalIDUI::MedicalIDPregnancyViewModel::ValidationError)&v148);
          v108 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
          v109 = v125;
          v108(v90, v125);
          v108((uint64_t)v136, v109);
          v70(v89, v45);
          v70((char *)v88, v45);
          v70(v130, v45);
          v70(v147, v45);
          v110 = v149.title._object;
          v111 = v149.actions._rawValue;
          v112 = v146;
          *v146 = v149.title._countAndFlagsBits;
          v112[1] = (uint64_t)v110;
          *((_OWORD *)v112 + 1) = v149.message;
          v112[4] = (uint64_t)v111;
          result = *(double *)&v149.code.value._countAndFlagsBits;
          *(Swift::String_optional *)(v112 + 5) = v149.code;
        }
        else
        {
          v97 = (uint64_t)objc_msgSend(v95, sel_estimatedDueDateNumberOfDays) < v94;
          v98 = v146;
          v99 = v130;
          v100 = v124;
          if (v97)
          {
            v148 = 1;
            MedicalIDPregnancyViewModel.validationError(for:)(&v149, (MedicalIDUI::MedicalIDPregnancyViewModel::ValidationError)&v148);
            v101 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
            v102 = v125;
            v101(v90, v125);
            v101((uint64_t)v136, v102);
            v70(v137, v92);
            v70(v138, v92);
            v70(v99, v92);
            v70(v147, v92);
            v103 = v149.title._object;
            v104 = v149.actions._rawValue;
            *v98 = v149.title._countAndFlagsBits;
            v98[1] = (uint64_t)v103;
            *((_OWORD *)v98 + 1) = v149.message;
            v98[4] = (uint64_t)v104;
            result = *(double *)&v149.code.value._countAndFlagsBits;
            *(Swift::String_optional *)(v98 + 5) = v149.code;
          }
          else
          {
            v113 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
            v114 = v125;
            v113(v90, v125);
            v113((uint64_t)v136, v114);
            v70(v137, v92);
            v70(v138, v92);
            v70(v99, v92);
            v70(v147, v92);
            v98[6] = 0;
            result = 0.0;
            *((_OWORD *)v98 + 1) = 0u;
            *((_OWORD *)v98 + 2) = 0u;
            *(_OWORD *)v98 = 0u;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_241655D40@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_getKeyPath();
  sub_24160C244();
  sub_2416B9CAC();
  swift_release();
  v4 = v3 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate;
  swift_beginAccess();
  return sub_24160C2C8(v4, a2);
}

uint64_t sub_241655DD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v9[-v5];
  sub_24160C2C8(a1, (uint64_t)&v9[-v5]);
  v7 = *a2;
  swift_getKeyPath();
  v10 = v7;
  v11 = v6;
  v12 = v7;
  sub_24160C244();
  sub_2416B9CA0();
  swift_release();
  return sub_2415A3FE0((uint64_t)v6);
}

uint64_t MedicalIDPregnancyViewModel.gestationalAgeDescription(startDate:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(_QWORD, _QWORD);
  uint64_t v31;
  void *v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  id v40;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;

  v2 = v1;
  v4 = type metadata accessor for MedicalIDPregnancyViewModel();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v48 = (uint64_t *)((char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v42 - v7;
  v9 = sub_2416B9B50();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v49 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_257139BD0, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v14 = *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v42 - v17;
  sub_24160C2C8(a1, (uint64_t)&v42 - v17);
  v47 = v2;
  sub_2415BEF64((uint64_t)v2, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v20 = v19(v18, 1, v9);
  v46 = v4;
  if (v20 != 1)
  {
    sub_2416540DC((uint64_t)v8);
    v23 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v23(v16, v18, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
    if (v19(v16, 1, v9) != 1)
      goto LABEL_6;
LABEL_5:
    sub_2415A3FE0((uint64_t)v16);
    return 0;
  }
  v21 = *(int *)(v4 + 20);
  v22 = type metadata accessor for MedicalIDData();
  sub_24160C2C8((uint64_t)&v8[v21 + *(int *)(v22 + 52)], (uint64_t)v16);
  sub_2416540DC((uint64_t)v8);
  sub_2415A3FE0((uint64_t)v18);
  if (v19(v16, 1, v9) == 1)
    goto LABEL_5;
  v23 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
LABEL_6:
  v43 = v23;
  v25 = ((uint64_t (*)(char *, char *, uint64_t))v23)(v49, v16, v9);
  v45 = &v42;
  MEMORY[0x24BDAC7A8](v25);
  v26 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v44 = &v42;
  v27 = (uint64_t)v47;
  v28 = MEMORY[0x24BDAC7A8](&v47[*(int *)(v46 + 36)]);
  v29 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24160C2C8(v28, (uint64_t)v29);
  v30 = (void (*)(_QWORD, _QWORD))v48;
  sub_2415BEF64(v27, (uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
  v31 = v19(v29, 1, v9);
  if ((_DWORD)v31 == 1)
  {
    MEMORY[0x24BDAC7A8](v31);
    sub_2416B9B44();
    sub_2416B9C34();
    (*(void (**)(char *, uint64_t))(v10 + 8))((char *)&v42 - v26, v9);
    sub_2416540DC((uint64_t)v30);
    sub_2415A3FE0((uint64_t)v29);
  }
  else
  {
    sub_2416540DC((uint64_t)v30);
    v43((char *)&v42 - v26, v29, v9);
  }
  v47 = (char *)objc_opt_self();
  v32 = (void *)sub_2416B9B08();
  v48 = *(uint64_t **)(v10 + 8);
  ((void (*)(char *, uint64_t))v48)((char *)&v42 - v26, v9);
  v33 = v49;
  v34 = (void *)sub_2416B9B08();
  v35 = sub_2416B9C94();
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)&v42 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416B9C88();
  sub_2416B9C7C();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
  v39 = (void *)sub_2416BB0F8();
  swift_bridgeObjectRelease();
  v40 = objc_msgSend(v47, sel_gestationalAgeStringOnDate_pregnancyStartDate_startTimeZoneName_, v32, v34, v39);

  v24 = sub_2416BB128();
  ((void (*)(char *, uint64_t))v48)(v33, v9);
  return v24;
}

Swift::Bool __swiftcall MedicalIDPregnancyViewModel.isGestationalAgeValid()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v13;

  v1 = sub_2416B9B50();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908];
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0 + *(int *)(type metadata accessor for MedicalIDPregnancyViewModel() + 20);
  v7 = v6 + *(int *)(type metadata accessor for MedicalIDData() + 52);
  sub_24159D6B0(0, &qword_257139BD0, v2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - v9;
  sub_24160C2C8(v7, (uint64_t)&v13 - v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v1) == 1)
  {
    sub_2415A3FE0((uint64_t)v10);
    v11 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v10, v1);
    sub_241654118();
    v11 = sub_2416BB3F8();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v1);
  }
  return v11 & 1;
}

Swift::Bool __swiftcall MedicalIDPregnancyViewModel.hasPregnancyData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  Swift::Bool v14;
  uint64_t v15;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for MedicalIDPregnancyViewModel();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + *(int *)(v3 + 20);
  v7 = type metadata accessor for MedicalIDData();
  v8 = v6 + *(int *)(v7 + 52);
  sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  sub_24160C2C8(v8, (uint64_t)&v17 - v10);
  v11 = sub_2416B9B50();
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
  v13 = v12((char *)&v17 - v10, 1, v11);
  sub_2415A3FE0((uint64_t)&v17 - v10);
  sub_2415BEF64(v1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
  if (v13 == 1)
  {
    sub_2416540DC((uint64_t)v5);
    return 0;
  }
  else
  {
    v15 = MEMORY[0x24BDAC7A8](&v5[*(int *)(v2 + 20) + (uint64_t)*(int *)(v7 + 56)]);
    sub_24160C2C8(v15, (uint64_t)&v17 - v10);
    sub_2416540DC((uint64_t)v5);
    v14 = v12((char *)&v17 - v10, 1, v11) != 1;
    sub_2415A3FE0((uint64_t)&v17 - v10);
  }
  return v14;
}

uint64_t MedicalIDPregnancyViewModel.baseIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDPregnancyViewModel.data.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MedicalIDPregnancyViewModel();
  return sub_2415BEF64(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
}

uint64_t MedicalIDPregnancyViewModel.calendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MedicalIDPregnancyViewModel() + 24);
  v4 = sub_2416B9C70();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MedicalIDPregnancyViewModel.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MedicalIDPregnancyViewModel() + 28);
  v4 = sub_2416B9C10();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MedicalIDPregnancyViewModel.sampleDataProvider.getter()
{
  type metadata accessor for MedicalIDPregnancyViewModel();
  return swift_retain();
}

uint64_t _s11MedicalIDUI0A20IDPregnancyViewModelV24maximumSelectableDueDate10Foundation0I0VSgvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a1;
  v2 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2416B9C64();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *MEMORY[0x24BDCF218];
  v23 = v10;
  v24 = v9;
  (*(void (**)(char *, uint64_t))(v10 + 104))(v7, v8);
  v22[1] = objc_msgSend((id)objc_opt_self(), sel_estimatedDueDateNumberOfDays);
  v11 = sub_2416B9B50();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v26 = v2;
  v15 = v1 + *(int *)(v2 + 36);
  sub_24159D6B0(0, &qword_257139BD0, v16, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v22 - v18;
  sub_24160C2C8(v15, (uint64_t)v22 - v18);
  sub_2415BEF64(v1, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v19, 1, v11);
  if ((_DWORD)v20 == 1)
  {
    v22[0] = v22;
    MEMORY[0x24BDAC7A8](v20);
    sub_2416B9B44();
    sub_2416B9C34();
    (*(void (**)(char *, uint64_t))(v12 + 8))((char *)v22 - v14, v11);
    sub_2416540DC((uint64_t)v4);
    sub_2415A3FE0((uint64_t)v19);
  }
  else
  {
    sub_2416540DC((uint64_t)v4);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))((char *)v22 - v14, v19, v11);
  }
  sub_2416B9C58();
  (*(void (**)(char *, uint64_t))(v12 + 8))((char *)v22 - v14, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v7, v24);
}

Swift::String_optional __swiftcall MedicalIDPregnancyViewModel.dueDateDescription()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  Swift::String_optional result;
  uint64_t v17;

  v1 = sub_2416B9B50();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908];
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0 + *(int *)(type metadata accessor for MedicalIDPregnancyViewModel() + 20);
  v7 = v6 + *(int *)(type metadata accessor for MedicalIDData() + 56);
  sub_24159D6B0(0, &qword_257139BD0, v2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  sub_24160C2C8(v7, (uint64_t)&v17 - v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))((char *)&v17 - v9, 1, v1) == 1)
  {
    sub_2415A3FE0((uint64_t)&v17 - v9);
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))(v5, (char *)&v17 - v9, v1);
    MEMORY[0x24BDAC7A8](v12);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)&v17 - v9, v5, v1);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))((char *)&v17 - v9, 0, 1, v1);
    v10 = sub_241656BA4((uint64_t)&v17 - v9);
    v11 = v13;
    sub_2415A3FE0((uint64_t)&v17 - v9);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v1);
  }
  v14 = v10;
  v15 = v11;
  result.value._object = v15;
  result.value._countAndFlagsBits = v14;
  return result;
}

uint64_t sub_241656BA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v16;

  v2 = sub_2416B9B50();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_257139BD0, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - v8;
  sub_24160C2C8(a1, (uint64_t)&v16 - v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    sub_2415A3FE0((uint64_t)v9);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
    type metadata accessor for MedicalIDPregnancyViewModel();
    v12 = (void *)sub_2416B9BE0();
    objc_msgSend(v11, sel_setLocale_, v12);

    objc_msgSend(v11, sel_setDateStyle_, 2);
    v13 = (void *)sub_2416B9B08();
    v14 = objc_msgSend(v11, sel_stringFromDate_, v13);

    v10 = sub_2416BB128();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v10;
}

void __swiftcall MedicalIDPregnancyViewModel.validationError(for:)(MedicalIDUI::BasicAlertModel *__return_ptr retstr, MedicalIDUI::MedicalIDPregnancyViewModel::ValidationError a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  MedicalIDUI::BasicAlertModel *v30;
  void *v31;
  unint64_t v32;
  _QWORD v33[2];
  id v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  MedicalIDUI::BasicAlertModel *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;

  v2 = (unsigned __int8 *)a2;
  v39 = retstr;
  v3 = type metadata accessor for BasicAlertModel.Action();
  v4 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  v41 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v42 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v2;
  v7 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v7);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v8 = (void *)qword_25713A038;
  v9 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v9);
  v34 = v8;
  sub_2416B9C04();
  v10 = sub_2416BB134();
  v37 = v11;
  v38 = v10;
  v33[1] = v33;
  MEMORY[0x24BDAC7A8](v10);
  v12 = sub_2416BB098();
  if (v6)
  {
    v36 = 0xD000000000000015;
    v13 = "dueDateTooFarInFuture";
  }
  else
  {
    v36 = 0xD000000000000013;
    v13 = "dueDateTooFarInPast";
  }
  v35 = (unint64_t)(v13 - 32) | 0x8000000000000000;
  MEMORY[0x24BDAC7A8](v12);
  v14 = v34;
  sub_2416B9C04();
  v34 = (id)sub_2416BB134();
  v16 = v15;
  MEMORY[0x24BDAC7A8](v34);
  v17 = sub_2416BB098();
  MEMORY[0x24BDAC7A8](v17);
  v18 = v14;
  sub_2416B9C04();
  v19 = sub_2416BB134();
  v21 = v20;
  v22 = v40;
  v23 = (uint64_t)v42;
  v24 = &v42[*(int *)(v40 + 24)];
  sub_2416B9EB0();
  v25 = sub_2416B9EBC();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 0, 1, v25);
  sub_2416B9B74();
  v26 = (uint64_t *)(v23 + *(int *)(v22 + 20));
  *v26 = v19;
  v26[1] = v21;
  v27 = (_QWORD *)(v23 + *(int *)(v22 + 28));
  sub_24159D6B0(0, &qword_257139D78, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  *v27 = 0;
  v27[1] = 0;
  v28 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_2416BCF30;
  sub_2415A85BC(v23, v29 + v28, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
  v30 = v39;
  v31 = v37;
  v39->title._countAndFlagsBits = v38;
  v30->title._object = v31;
  v30->message.value._countAndFlagsBits = (uint64_t)v34;
  v30->message.value._object = v16;
  v32 = v36;
  v30->actions._rawValue = (void *)v29;
  v30->code.value._countAndFlagsBits = v32;
  v30->code.value._object = (void *)v35;
}

MedicalIDUI::MedicalIDPregnancyViewModel::ValidationError_optional __swiftcall MedicalIDPregnancyViewModel.ValidationError.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  MedicalIDUI::MedicalIDPregnancyViewModel::ValidationError_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2416BB614();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

unint64_t MedicalIDPregnancyViewModel.ValidationError.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0xD000000000000013;
}

uint64_t sub_241657230(char *a1, char *a2)
{
  return sub_2416027D4(*a1, *a2);
}

uint64_t sub_24165723C()
{
  return sub_2416823A8();
}

uint64_t sub_241657244()
{
  sub_2416BB164();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2416572A4()
{
  return sub_241682998();
}

MedicalIDUI::MedicalIDPregnancyViewModel::ValidationError_optional sub_2416572AC(Swift::String *a1)
{
  return MedicalIDPregnancyViewModel.ValidationError.init(rawValue:)(*a1);
}

void sub_2416572B8(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000015;
  else
    v2 = 0xD000000000000013;
  v3 = 0x80000002416C3B50;
  if (*v1)
    v3 = 0x80000002416C3B70;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_241657304(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_241657360()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713D490;
  if (!qword_25713D490)
  {
    v1 = sub_2416B9B50();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDCE940], v1);
    atomic_store(result, (unint64_t *)&qword_25713D490);
  }
  return result;
}

unint64_t sub_2416573AC()
{
  unint64_t result;

  result = qword_25713E3F0;
  if (!qword_25713E3F0)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDPregnancyViewModel.ValidationError, &type metadata for MedicalIDPregnancyViewModel.ValidationError);
    atomic_store(result, (unint64_t *)&qword_25713E3F0);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MedicalIDPregnancyViewModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  unint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  id v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void *v74;
  void *v75;
  char *__dst;
  int *v79;
  uint64_t v80;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    v26 = (_QWORD *)(v25 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a3[5];
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (char *)a2 + v6;
    v9 = *(_QWORD *)((char *)a2 + v6 + 8);
    *v7 = *(_QWORD *)((char *)a2 + v6);
    v7[1] = v9;
    v11 = *(_QWORD *)((char *)a2 + v6 + 16);
    v10 = *(_QWORD *)((char *)a2 + v6 + 24);
    v7[2] = v11;
    v7[3] = v10;
    v12 = *((_QWORD *)v8 + 5);
    v7[4] = *((_QWORD *)v8 + 4);
    v7[5] = v12;
    v13 = *((_QWORD *)v8 + 7);
    v7[6] = *((_QWORD *)v8 + 6);
    v7[7] = v13;
    v14 = *((_QWORD *)v8 + 9);
    v7[8] = *((_QWORD *)v8 + 8);
    v7[9] = v14;
    v15 = *((_QWORD *)v8 + 11);
    v7[10] = *((_QWORD *)v8 + 10);
    v7[11] = v15;
    v74 = (void *)*((_QWORD *)v8 + 12);
    v75 = (void *)*((_QWORD *)v8 + 13);
    v7[12] = v74;
    v7[13] = v75;
    v79 = (int *)type metadata accessor for MedicalIDData();
    v16 = v79[13];
    __dst = (char *)v7 + v16;
    v17 = &v8[v16];
    v18 = sub_2416B9B50();
    v80 = *(_QWORD *)(v18 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = v74;
    v22 = v75;
    if (v19(v17, 1, v18))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v24 = v80;
    }
    else
    {
      v24 = v80;
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(__dst, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(__dst, 0, 1, v18);
    }
    v27 = v79[14];
    v28 = (char *)v7 + v27;
    v29 = &v8[v27];
    if (v19(&v8[v27], 1, v18))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v29, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v18);
    }
    v31 = v79[15];
    v32 = (_QWORD *)((char *)v7 + v31);
    v33 = &v8[v31];
    v34 = *((_QWORD *)v33 + 1);
    *v32 = *(_QWORD *)v33;
    v32[1] = v34;
    v35 = v79[16];
    v36 = (_QWORD *)((char *)v7 + v35);
    v37 = &v8[v35];
    v38 = *((_QWORD *)v37 + 1);
    *v36 = *(_QWORD *)v37;
    v36[1] = v38;
    *((_BYTE *)v7 + v79[17]) = v8[v79[17]];
    *((_BYTE *)v7 + v79[18]) = v8[v79[18]];
    v39 = v79[19];
    v40 = (char *)v7 + v39;
    v41 = (uint64_t *)&v8[v39];
    v42 = *(_QWORD *)&v8[v39 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v43 = v20;
    if (v42 >> 60 == 15)
    {
      *(_OWORD *)v40 = *(_OWORD *)v41;
    }
    else
    {
      v44 = *v41;
      sub_2415A0A90(*v41, v42);
      *(_QWORD *)v40 = v44;
      *((_QWORD *)v40 + 1) = v42;
    }
    v26 = a1;
    v45 = v79[20];
    v46 = (char *)v7 + v45;
    v47 = &v8[v45];
    v48 = sub_2416B9A18();
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    v51 = v79[21];
    v52 = *(void **)&v8[v51];
    *(_QWORD *)((char *)v7 + v51) = v52;
    v53 = v79[22];
    v54 = (char *)v7 + v53;
    v55 = &v8[v53];
    v56 = v52;
    if (v43(v55, 1, v18))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      v58 = a2;
      v59 = v80;
    }
    else
    {
      v59 = v80;
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v54, v55, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v54, 0, 1, v18);
      v58 = a2;
    }
    v60 = a3[6];
    v61 = (char *)a1 + v60;
    v62 = (char *)v58 + v60;
    v63 = sub_2416B9C70();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
    v64 = a3[7];
    v65 = (char *)a1 + v64;
    v66 = (char *)v58 + v64;
    v67 = sub_2416B9C10();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
    v68 = a3[9];
    *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)v58 + a3[8]);
    v69 = (char *)a1 + v68;
    v70 = (char *)v58 + v68;
    swift_retain();
    if (v43(v70, 1, v18))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v69, v70, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v69, 0, 1, v18);
    }
  }
  return v26;
}

uint64_t destroy for MedicalIDPregnancyViewModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = v4 + v5[13];
  v7 = sub_2416B9B50();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v10 = v4 + v5[14];
  if (!v9(v10, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)(v4 + v5[19]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_2415A0DAC(*v11, v12);
  v13 = v4 + v5[20];
  v14 = sub_2416B9A18();
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);

  v16 = v4 + v5[22];
  if (!v9(v16, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v16, v7);
  v17 = a1 + a2[6];
  v18 = sub_2416B9C70();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + a2[7];
  v20 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  swift_release();
  v21 = a1 + a2[9];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v21, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v21, v7);
  return result;
}

_QWORD *initializeWithCopy for MedicalIDPregnancyViewModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  unint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  id v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v68;
  void *v69;
  void *v70;
  char *__dst;
  int *v74;
  uint64_t v75;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a3[5];
  v5 = (_QWORD *)((char *)a1 + v4);
  v6 = (char *)a2 + v4;
  v7 = *(_QWORD *)((char *)a2 + v4 + 8);
  *v5 = *(_QWORD *)((char *)a2 + v4);
  v5[1] = v7;
  v9 = *(_QWORD *)((char *)a2 + v4 + 16);
  v8 = *(_QWORD *)((char *)a2 + v4 + 24);
  v5[2] = v9;
  v5[3] = v8;
  v10 = *((_QWORD *)v6 + 5);
  v5[4] = *((_QWORD *)v6 + 4);
  v5[5] = v10;
  v11 = *((_QWORD *)v6 + 7);
  v5[6] = *((_QWORD *)v6 + 6);
  v5[7] = v11;
  v12 = *((_QWORD *)v6 + 9);
  v5[8] = *((_QWORD *)v6 + 8);
  v5[9] = v12;
  v13 = *((_QWORD *)v6 + 11);
  v5[10] = *((_QWORD *)v6 + 10);
  v5[11] = v13;
  v69 = (void *)*((_QWORD *)v6 + 12);
  v70 = (void *)*((_QWORD *)v6 + 13);
  v5[12] = v69;
  v5[13] = v70;
  v74 = (int *)type metadata accessor for MedicalIDData();
  v14 = v74[13];
  __dst = (char *)v5 + v14;
  v68 = &v6[v14];
  v15 = sub_2416B9B50();
  v75 = *(_QWORD *)(v15 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = v69;
  v18 = v70;
  if (v16(v68, 1, v15))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v68, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    v20 = v75;
  }
  else
  {
    v20 = v75;
    (*(void (**)(char *, char *, uint64_t))(v75 + 16))(__dst, v68, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(__dst, 0, 1, v15);
  }
  v21 = v74[14];
  v22 = (char *)v5 + v21;
  v23 = &v6[v21];
  if (v16(&v6[v21], 1, v15))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v22, v23, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, v15);
  }
  v25 = v74[15];
  v26 = (_QWORD *)((char *)v5 + v25);
  v27 = &v6[v25];
  v28 = *((_QWORD *)v27 + 1);
  *v26 = *(_QWORD *)v27;
  v26[1] = v28;
  v29 = v74[16];
  v30 = (_QWORD *)((char *)v5 + v29);
  v31 = &v6[v29];
  v32 = *((_QWORD *)v31 + 1);
  *v30 = *(_QWORD *)v31;
  v30[1] = v32;
  *((_BYTE *)v5 + v74[17]) = v6[v74[17]];
  *((_BYTE *)v5 + v74[18]) = v6[v74[18]];
  v33 = v74[19];
  v34 = (char *)v5 + v33;
  v35 = (uint64_t *)&v6[v33];
  v36 = *(_QWORD *)&v6[v33 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v37 = v16;
  if (v36 >> 60 == 15)
  {
    *(_OWORD *)v34 = *(_OWORD *)v35;
  }
  else
  {
    v38 = *v35;
    sub_2415A0A90(*v35, v36);
    *(_QWORD *)v34 = v38;
    *((_QWORD *)v34 + 1) = v36;
  }
  v39 = v74[20];
  v40 = (char *)v5 + v39;
  v41 = &v6[v39];
  v42 = sub_2416B9A18();
  v43 = *(_QWORD *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  }
  v45 = v74[21];
  v46 = *(void **)&v6[v45];
  *(_QWORD *)((char *)v5 + v45) = v46;
  v47 = v74[22];
  v48 = (char *)v5 + v47;
  v49 = &v6[v47];
  v50 = v46;
  if (v37(v49, 1, v15))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    v52 = a1;
    v53 = v75;
  }
  else
  {
    v53 = v75;
    (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v48, v49, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v48, 0, 1, v15);
    v52 = a1;
  }
  v54 = a3[6];
  v55 = (char *)v52 + v54;
  v56 = (char *)a2 + v54;
  v57 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
  v58 = a3[7];
  v59 = (char *)v52 + v58;
  v60 = (char *)a2 + v58;
  v61 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v59, v60, v61);
  v62 = a3[9];
  *(_QWORD *)((char *)v52 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v63 = (char *)v52 + v62;
  v64 = (char *)a2 + v62;
  swift_retain();
  if (v37(v64, 1, v15))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v63, v64, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v63, 0, 1, v15);
  }
  return v52;
}

char *assignWithCopy for MedicalIDPregnancyViewModel(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  int v79;
  uint64_t v80;
  uint64_t (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  int *v84;
  _QWORD *v85;
  char *v86;

  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v84 = a3;
  v85 = a2;
  v6 = a3[5];
  v86 = a1;
  v7 = &a1[v6];
  v8 = (_QWORD *)((char *)a2 + v6);
  *(_QWORD *)v7 = *v8;
  *((_QWORD *)v7 + 1) = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 2) = v8[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 3) = v8[3];
  *((_QWORD *)v7 + 4) = v8[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 5) = v8[5];
  *((_QWORD *)v7 + 6) = v8[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 7) = v8[7];
  *((_QWORD *)v7 + 8) = v8[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 9) = v8[9];
  *((_QWORD *)v7 + 10) = v8[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 11) = v8[11];
  v9 = (void *)*((_QWORD *)v7 + 12);
  v10 = (void *)v8[12];
  *((_QWORD *)v7 + 12) = v10;
  v11 = v10;

  v12 = (void *)*((_QWORD *)v7 + 13);
  v13 = (void *)v8[13];
  *((_QWORD *)v7 + 13) = v13;
  v14 = v13;

  v15 = (int *)type metadata accessor for MedicalIDData();
  v16 = v15[13];
  v17 = &v7[v16];
  v18 = (char *)v8 + v16;
  v19 = sub_2416B9B50();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
LABEL_7:
  v25 = v15[14];
  v26 = &v7[v25];
  v27 = (char *)v8 + v25;
  v28 = v21(&v7[v25], 1, v19);
  v29 = v21(v27, 1, v19);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v26, v27, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v19);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v26, v27, v19);
LABEL_13:
  v31 = v15[15];
  v32 = &v7[v31];
  v33 = (_QWORD *)((char *)v8 + v31);
  *(_QWORD *)v32 = *v33;
  *((_QWORD *)v32 + 1) = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = v15[16];
  v35 = &v7[v34];
  v36 = (_QWORD *)((char *)v8 + v34);
  *(_QWORD *)v35 = *v36;
  *((_QWORD *)v35 + 1) = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v15[17]] = *((_BYTE *)v8 + v15[17]);
  v7[v15[18]] = *((_BYTE *)v8 + v15[18]);
  v37 = v15[19];
  v38 = (uint64_t *)&v7[v37];
  v39 = (_QWORD *)((char *)v8 + v37);
  v40 = *(_QWORD *)((char *)v8 + v37 + 8);
  v82 = v21;
  v83 = v19;
  v41 = v20;
  if (*(_QWORD *)&v7[v37 + 8] >> 60 == 15)
  {
    if (v40 >> 60 != 15)
    {
      v42 = *v39;
      sub_2415A0A90(*v39, v40);
      *v38 = v42;
      v38[1] = v40;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v40 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v38);
LABEL_18:
    *(_OWORD *)v38 = *(_OWORD *)v39;
    goto LABEL_20;
  }
  v43 = *v39;
  sub_2415A0A90(*v39, v40);
  v44 = *v38;
  v45 = v38[1];
  *v38 = v43;
  v38[1] = v40;
  sub_2415A0DAC(v44, v45);
LABEL_20:
  v46 = v15[20];
  v47 = &v7[v46];
  v48 = (char *)v8 + v46;
  v49 = sub_2416B9A18();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  v52 = v51(v47, 1, v49);
  v53 = v51(v48, 1, v49);
  if (v52)
  {
    v54 = v41;
    v55 = v82;
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v48, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v54 = v41;
  v55 = v82;
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v49);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v50 + 24))(v47, v48, v49);
LABEL_26:
  v57 = v15[21];
  v58 = *(void **)&v7[v57];
  v59 = *(void **)((char *)v8 + v57);
  *(_QWORD *)&v7[v57] = v59;
  v60 = v59;

  v61 = v15[22];
  v62 = &v7[v61];
  v63 = (char *)v8 + v61;
  v64 = v55(&v7[v61], 1, v83);
  v65 = v55(v63, 1, v83);
  if (v64)
  {
    v66 = v86;
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v62, v63, v83);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v62, 0, 1, v83);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  v66 = v86;
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v62, v83);
LABEL_31:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v54 + 24))(v62, v63, v83);
LABEL_32:
  v68 = v84[6];
  v69 = &v66[v68];
  v70 = (char *)v85 + v68;
  v71 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 24))(v69, v70, v71);
  v72 = v84[7];
  v73 = &v66[v72];
  v74 = (char *)v85 + v72;
  v75 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 24))(v73, v74, v75);
  *(_QWORD *)&v66[v84[8]] = *(_QWORD *)((char *)v85 + v84[8]);
  swift_retain();
  swift_release();
  v76 = v84[9];
  v77 = &v66[v76];
  v78 = (char *)v85 + v76;
  LODWORD(v73) = v55(&v66[v76], 1, v83);
  v79 = v55(v78, 1, v83);
  if (!(_DWORD)v73)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 24))(v77, v78, v83);
      return v66;
    }
    (*(void (**)(char *, uint64_t))(v54 + 8))(v77, v83);
    goto LABEL_37;
  }
  if (v79)
  {
LABEL_37:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    return v66;
  }
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v77, v78, v83);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v77, 0, 1, v83);
  return v66;
}

_OWORD *initializeWithTake for MedicalIDPregnancyViewModel(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;

  *a1 = *a2;
  v5 = a3[5];
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  *(_OWORD *)v6 = *(_OWORD *)((char *)a2 + v5);
  *((_QWORD *)v6 + 2) = *(_QWORD *)((char *)a2 + v5 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)((char *)a2 + v5 + 24);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)((char *)a2 + v5 + 40);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)((char *)a2 + v5 + 56);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)((char *)a2 + v5 + 72);
  *((_QWORD *)v6 + 11) = *(_QWORD *)((char *)a2 + v5 + 88);
  *((_OWORD *)v6 + 6) = *(_OWORD *)((char *)a2 + v5 + 96);
  v8 = (int *)type metadata accessor for MedicalIDData();
  v9 = v8[13];
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = sub_2416B9B50();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = v8[14];
  v17 = &v6[v16];
  v18 = &v7[v16];
  v43 = v14;
  v44 = v13;
  if (v14(&v7[v16], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v18, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  *(_OWORD *)&v6[v8[15]] = *(_OWORD *)&v7[v8[15]];
  *(_OWORD *)&v6[v8[16]] = *(_OWORD *)&v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  v6[v8[18]] = v7[v8[18]];
  *(_OWORD *)&v6[v8[19]] = *(_OWORD *)&v7[v8[19]];
  v20 = v8[20];
  v21 = &v6[v20];
  v22 = &v7[v20];
  v23 = sub_2416B9A18();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(_QWORD *)&v6[v8[21]] = *(_QWORD *)&v7[v8[21]];
  v26 = v8[22];
  v27 = &v6[v26];
  v28 = &v7[v26];
  if (v43(&v7[v26], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v27, v28, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v27, 0, 1, v12);
  }
  v30 = a3[6];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
  v34 = a3[7];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  v38 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  if (v43(v40, 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v39, v40, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v39, 0, 1, v12);
  }
  return a1;
}

char *assignWithTake for MedicalIDPregnancyViewModel(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, uint64_t, uint64_t);
  int v57;
  int v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  _QWORD *v86;
  char *v87;

  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v85 = a3;
  v86 = a2;
  v7 = a3[5];
  v8 = &a1[v7];
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = v9[1];
  *(_QWORD *)v8 = *v9;
  *((_QWORD *)v8 + 1) = v10;
  swift_bridgeObjectRelease();
  *((_QWORD *)v8 + 2) = v9[2];
  swift_bridgeObjectRelease();
  v11 = v9[4];
  *((_QWORD *)v8 + 3) = v9[3];
  *((_QWORD *)v8 + 4) = v11;
  swift_bridgeObjectRelease();
  v12 = v9[6];
  *((_QWORD *)v8 + 5) = v9[5];
  *((_QWORD *)v8 + 6) = v12;
  swift_bridgeObjectRelease();
  v13 = v9[8];
  *((_QWORD *)v8 + 7) = v9[7];
  *((_QWORD *)v8 + 8) = v13;
  swift_bridgeObjectRelease();
  v14 = v9[10];
  *((_QWORD *)v8 + 9) = v9[9];
  *((_QWORD *)v8 + 10) = v14;
  swift_bridgeObjectRelease();
  v15 = (void *)*((_QWORD *)v8 + 12);
  v16 = v9[12];
  *((_QWORD *)v8 + 11) = v9[11];
  *((_QWORD *)v8 + 12) = v16;

  v17 = (void *)*((_QWORD *)v8 + 13);
  *((_QWORD *)v8 + 13) = v9[13];

  v18 = (int *)type metadata accessor for MedicalIDData();
  v19 = v18[13];
  v20 = &v8[v19];
  v21 = (char *)v9 + v19;
  v22 = sub_2416B9B50();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v20, v21, v22);
LABEL_7:
  v28 = v18[14];
  v29 = &v8[v28];
  v30 = (char *)v9 + v28;
  v31 = v24(&v8[v28], 1, v22);
  v32 = v24(v30, 1, v22);
  v87 = a1;
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v29, v30, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v29, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v22);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v29, v30, v22);
LABEL_13:
  v34 = v18[15];
  v35 = &v8[v34];
  v36 = (_QWORD *)((char *)v9 + v34);
  v38 = *v36;
  v37 = v36[1];
  *(_QWORD *)v35 = v38;
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  v39 = v18[16];
  v40 = &v8[v39];
  v41 = (_QWORD *)((char *)v9 + v39);
  v43 = *v41;
  v42 = v41[1];
  *(_QWORD *)v40 = v43;
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  v8[v18[17]] = *((_BYTE *)v9 + v18[17]);
  v8[v18[18]] = *((_BYTE *)v9 + v18[18]);
  v44 = v18[19];
  v45 = (uint64_t)&v8[v44];
  v46 = (char *)v9 + v44;
  v47 = *(_QWORD *)&v8[v44 + 8];
  v83 = v22;
  v84 = v23;
  if (v47 >> 60 == 15)
  {
    v48 = v24;
LABEL_17:
    *(_OWORD *)v45 = *(_OWORD *)v46;
    goto LABEL_19;
  }
  v49 = *((_QWORD *)v46 + 1);
  v48 = v24;
  if (v49 >> 60 == 15)
  {
    sub_2415A1B38(v45);
    goto LABEL_17;
  }
  v50 = *(_QWORD *)v45;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *(_QWORD *)(v45 + 8) = v49;
  sub_2415A0DAC(v50, v47);
LABEL_19:
  v51 = v18[20];
  v52 = &v8[v51];
  v53 = (char *)v9 + v51;
  v54 = sub_2416B9A18();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
  v57 = v56(v52, 1, v54);
  v58 = v56(v53, 1, v54);
  if (v57)
  {
    v59 = v48;
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v52, v53, v54);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v59 = v48;
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v55 + 8))(v52, v54);
LABEL_24:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v55 + 40))(v52, v53, v54);
LABEL_25:
  v61 = v18[21];
  v62 = *(void **)&v8[v61];
  *(_QWORD *)&v8[v61] = *(_QWORD *)((char *)v9 + v61);

  v63 = v18[22];
  v64 = &v8[v63];
  v65 = (char *)v9 + v63;
  v66 = v59(&v8[v63], 1, v83);
  v67 = v59(v65, 1, v83);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v64, v65, v83);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v64, 0, 1, v83);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v67)
  {
    (*(void (**)(char *, uint64_t))(v84 + 8))(v64, v83);
LABEL_30:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v84 + 40))(v64, v65, v83);
LABEL_31:
  v69 = v85[6];
  v70 = &v87[v69];
  v71 = (char *)v86 + v69;
  v72 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 40))(v70, v71, v72);
  v73 = v85[7];
  v74 = &v87[v73];
  v75 = (char *)v86 + v73;
  v76 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 40))(v74, v75, v76);
  *(_QWORD *)&v87[v85[8]] = *(_QWORD *)((char *)v86 + v85[8]);
  swift_release();
  v77 = v85[9];
  v78 = &v87[v77];
  v79 = (char *)v86 + v77;
  LODWORD(v74) = v59(&v87[v77], 1, v83);
  v80 = v59(v79, 1, v83);
  if (!(_DWORD)v74)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v84 + 40))(v78, v79, v83);
      return v87;
    }
    (*(void (**)(char *, uint64_t))(v84 + 8))(v78, v83);
    goto LABEL_36;
  }
  if (v80)
  {
LABEL_36:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    return v87;
  }
  (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v78, v79, v83);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v78, 0, 1, v83);
  return v87;
}

uint64_t getEnumTagSinglePayload for MedicalIDPregnancyViewModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416591FC(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for MedicalIDData();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = sub_2416B9C70();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v13 = sub_2416B9C10();
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[7];
        }
        else
        {
          sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v10 = v14;
          v9 = *(_QWORD *)(v14 - 8);
          v11 = a3[9];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MedicalIDPregnancyViewModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_241659308(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for MedicalIDData();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = sub_2416B9C70();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v13 = sub_2416B9C10();
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[7];
        }
        else
        {
          sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v10 = v14;
          v9 = *(_QWORD *)(v14 - 8);
          v11 = a4[9];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_241659404()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for MedicalIDData();
  if (v0 <= 0x3F)
  {
    sub_2416B9C70();
    if (v1 <= 0x3F)
    {
      sub_2416B9C10();
      if (v2 <= 0x3F)
      {
        sub_24159D6B0(319, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t storeEnumTagSinglePayload for MedicalIDPregnancyViewModel.ValidationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_241659538 + 4 * byte_2416C1555[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24165956C + 4 * byte_2416C1550[v4]))();
}

uint64_t sub_24165956C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_241659574(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24165957CLL);
  return result;
}

uint64_t sub_241659588(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x241659590);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_241659594(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24165959C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDPregnancyViewModel.ValidationError()
{
  return &type metadata for MedicalIDPregnancyViewModel.ValidationError;
}

uint64_t _s11MedicalIDUI0A18IDValidationResultO2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v18;
  _QWORD v19[7];
  _QWORD v20[8];

  v2 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v14 = a2[4];
  v13 = a2[5];
  v15 = a2[6];
  if (!v3)
  {
    if (!v10)
    {
      sub_24160AD24(*a1, 0);
      sub_24160AD24(v9, 0);
      v16 = 1;
      return v16 & 1;
    }
    goto LABEL_5;
  }
  if (!v10)
  {
LABEL_5:
    sub_24160ADF4(*a2, a2[1]);
    sub_24160ADF4(v2, v3);
    sub_24160AD24(v2, v3);
    sub_24160AD24(v9, v10);
    v16 = 0;
    return v16 & 1;
  }
  v20[0] = *a1;
  v20[1] = v3;
  v20[2] = v5;
  v20[3] = v4;
  v20[4] = v6;
  v20[5] = v7;
  v20[6] = v8;
  v19[0] = v9;
  v19[1] = v10;
  v19[2] = v12;
  v19[3] = v11;
  v19[4] = v14;
  v19[5] = v13;
  v19[6] = v15;
  sub_24160ADF4(v9, v10);
  sub_24160ADF4(v2, v3);
  sub_24160ADF4(v9, v10);
  sub_24160ADF4(v2, v3);
  v18 = _s11MedicalIDUI15BasicAlertModelV2eeoiySbAC_ACtFZ_0(v20, v19);
  sub_24160AD24(v2, v3);
  sub_24160AD24(v9, v10);
  sub_24160AD24(v9, v10);
  sub_24160AD24(v2, v3);
  v16 = v18;
  return v16 & 1;
}

unint64_t destroy for MedicalIDValidationResult(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for MedicalIDValidationResult(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v4;
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for MedicalIDValidationResult(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v5 = *(_OWORD *)a2;
    v6 = *((_OWORD *)a2 + 1);
    v7 = *((_OWORD *)a2 + 2);
    a1[6] = a2[6];
    *((_OWORD *)a1 + 1) = v6;
    *((_OWORD *)a1 + 2) = v7;
    *(_OWORD *)a1 = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MedicalIDValidationResult(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDValidationResult(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MedicalIDValidationResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_241659C28(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_241659C40(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDValidationResult()
{
  return &type metadata for MedicalIDValidationResult;
}

id sub_241659C80()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v4;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD658]), sel_init);
  sub_24165AC00();
  sub_2416BA7E0();
  objc_msgSend(v1, sel_setDelegate_, v4);

  objc_msgSend(v1, sel_setAllowsEditing_, 1);
  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ImagePickerView(0) + 20));
  objc_msgSend(v1, sel_setSourceType_, v2);
  if (v2 == 1)
    objc_msgSend(v1, sel_setCameraDevice_, 1);
  return v1;
}

uint64_t sub_241659EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[2] = a4;
  v5[3] = a5;
  sub_2416BA1C8();
  v5[4] = swift_task_alloc();
  sub_2415C3694(0);
  v5[5] = v6;
  v5[6] = swift_task_alloc();
  sub_2416BB290();
  v5[7] = sub_2416BB284();
  sub_2416BB254();
  return swift_task_switch();
}

uint64_t sub_241659FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release();
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtCV11MedicalIDUI15ImagePickerView11Coordinator_imageProcessor + 24);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtCV11MedicalIDUI15ImagePickerView11Coordinator_imageProcessor + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + OBJC_IVAR____TtCV11MedicalIDUI15ImagePickerView11Coordinator_imageProcessor), v2);
  if (qword_257139568 != -1)
    swift_once();
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, double, double))(v3 + 8))(*(_QWORD *)(v0 + 24), v0 + 64, v2, v3, *(double *)&xmmword_25713E4A0, *((double *)&xmmword_25713E4A0 + 1));
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtCV11MedicalIDUI15ImagePickerView11Coordinator_parent;
    v7 = type metadata accessor for ImagePickerView(0);
    (*(void (**)(void *))(v6 + *(int *)(v7 + 24)))(v5);

  }
  v9 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  sub_2415C17A8(v8);
  MEMORY[0x242698604](v9);
  sub_2416BA1BC();
  sub_2416BAE1C();
  sub_2415A6154(v8, (uint64_t (*)(_QWORD))sub_2415C3694);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24165A174()
{
  return type metadata accessor for ImagePickerView.Coordinator(0);
}

uint64_t type metadata accessor for ImagePickerView.Coordinator(uint64_t a1)
{
  return sub_2415C5864(a1, qword_25713E5A8);
}

uint64_t sub_24165A190()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ImagePickerView(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ImagePickerView(uint64_t a1)
{
  return sub_2415C5864(a1, qword_25713E628);
}

uint64_t *sub_24165A218(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_24165A340(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1] = a2[1];
      sub_2415C3694(0);
      v9 = *(int *)(v8 + 32);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = sub_2416BA1C8();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      swift_retain();
      swift_retain();
      v13(v10, v11, v12);
    }
    else
    {
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v15 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
  }
  swift_retain();
  return a1;
}

void sub_24165A340(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713A5B8, (uint64_t (*)(uint64_t))sub_2415C3694, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
}

uint64_t sub_24165A35C(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_24165A340(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_release();
  if (EnumCaseMultiPayload == 1)
  {
    swift_release();
    sub_2415C3694(0);
    v4 = a1 + *(int *)(v3 + 32);
    v5 = sub_2416BA1C8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  return swift_release();
}

_QWORD *sub_24165A3EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  sub_24165A340(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    a1[1] = a2[1];
    sub_2415C3694(0);
    v8 = *(int *)(v7 + 32);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_2416BA1C8();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_retain();
    swift_retain();
    v12(v9, v10, v11);
  }
  else
  {
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v13 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  return a1;
}

_QWORD *sub_24165A4EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_2415A6154((uint64_t)a1, (uint64_t (*)(_QWORD))sub_24165A340);
    sub_24165A340(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1] = a2[1];
      sub_2415C3694(0);
      v8 = *(int *)(v7 + 32);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = sub_2416BA1C8();
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      swift_retain();
      swift_retain();
      v12(v9, v10, v11);
    }
    else
    {
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_24165A614(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  sub_24165A340(0);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    sub_2415C3694(0);
    v10 = *(int *)(v9 + 32);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_2416BA1C8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v14 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  return a1;
}

_QWORD *sub_24165A6E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_2415A6154((uint64_t)a1, (uint64_t (*)(_QWORD))sub_24165A340);
    sub_24165A340(0);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      sub_2415C3694(0);
      v10 = *(int *)(v9 + 32);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = sub_2416BA1C8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  v14 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  swift_release();
  return a1;
}

uint64_t sub_24165A7D8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24165A7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_24159D6B0(0, qword_25713E5C8, (uint64_t (*)(uint64_t))sub_2415C3694, MEMORY[0x24BDEB580]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_24165A878()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_24165A884(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_24159D6B0(0, qword_25713E5C8, (uint64_t (*)(uint64_t))sub_2415C3694, MEMORY[0x24BDEB580]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
}

void sub_24165A914()
{
  unint64_t v0;

  sub_24165A340(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_24165A998()
{
  return sub_24159CE88(&qword_25713C718, type metadata accessor for ImagePickerView, (uint64_t)&unk_2416C17DC);
}

uint64_t sub_24165A9C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  objc_class *v6;
  id v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  objc_super v11;
  _BYTE v12[24];
  ValueMetadata *v13;
  _UNKNOWN **v14;

  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24165ABBC(v2, (uint64_t)v5);
  v13 = &type metadata for UIImageProcessor;
  v14 = &protocol witness table for UIImageProcessor;
  v6 = (objc_class *)type metadata accessor for ImagePickerView.Coordinator(0);
  v7 = objc_allocWithZone(v6);
  sub_24165ABBC((uint64_t)v5, (uint64_t)v7 + OBJC_IVAR____TtCV11MedicalIDUI15ImagePickerView11Coordinator_parent);
  sub_2415A7348((uint64_t)v12, (uint64_t)v7 + OBJC_IVAR____TtCV11MedicalIDUI15ImagePickerView11Coordinator_imageProcessor);
  v11.receiver = v7;
  v11.super_class = v6;
  v8 = objc_msgSendSuper2(&v11, sel_init);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  result = sub_2415A6154((uint64_t)v5, type metadata accessor for ImagePickerView);
  *a2 = v8;
  return result;
}

uint64_t sub_24165AAB0()
{
  sub_24159CE88(&qword_25713E670, type metadata accessor for ImagePickerView, (uint64_t)&unk_2416C1764);
  return sub_2416BA744();
}

uint64_t sub_24165AB18()
{
  sub_24159CE88(&qword_25713E670, type metadata accessor for ImagePickerView, (uint64_t)&unk_2416C1764);
  return sub_2416BA714();
}

void sub_24165AB80()
{
  sub_24159CE88(&qword_25713E670, type metadata accessor for ImagePickerView, (uint64_t)&unk_2416C1764);
  sub_2416BA738();
  __break(1u);
}

uint64_t sub_24165ABBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImagePickerView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_24165AC00()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E678)
  {
    type metadata accessor for ImagePickerView(255);
    sub_24159CE88(&qword_25713E670, type metadata accessor for ImagePickerView, (uint64_t)&unk_2416C1764);
    v0 = sub_2416BA7EC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E678);
  }
}

int64x2_t sub_24165AC78()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4069000000000000uLL);
  xmmword_25713E4A0 = (__int128)result;
  return result;
}

unint64_t sub_24165AC90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2416BB6BC();
  sub_2416BB164();
  v4 = sub_2416BB6EC();
  return sub_24165AD84(a1, a2, v4);
}

unint64_t sub_24165ACF8(uint64_t a1)
{
  uint64_t v2;

  sub_2416BB128();
  sub_2416BB6BC();
  sub_2416BB164();
  v2 = sub_2416BB6EC();
  swift_bridgeObjectRelease();
  return sub_24165AE64(a1, v2);
}

unint64_t sub_24165AD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_2416BB644() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_2416BB644() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_24165AE64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_2416BB128();
    v8 = v7;
    if (v6 == sub_2416BB128() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_2416BB644();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_2416BB128();
          v15 = v14;
          if (v13 == sub_2416BB128() && v15 == v16)
            break;
          v18 = sub_2416BB644();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_24165AFD8(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;

  v2 = v1;
  sub_24159D6B0(0, &qword_25713A560, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v18 - v5;
  if (!*(_QWORD *)(a1 + 16))
  {
    v19 = 0u;
    v20 = 0u;
    return sub_2415A6154((uint64_t)&v19, (uint64_t (*)(_QWORD))sub_24165B17C);
  }
  v7 = (id)*MEMORY[0x24BEBE2F8];
  v8 = sub_24165ACF8((uint64_t)v7);
  if ((v9 & 1) == 0)
  {
    v19 = 0u;
    v20 = 0u;

    return sub_2415A6154((uint64_t)&v19, (uint64_t (*)(_QWORD))sub_24165B17C);
  }
  sub_2415AFA44(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)&v19);

  if (!*((_QWORD *)&v20 + 1))
    return sub_2415A6154((uint64_t)&v19, (uint64_t (*)(_QWORD))sub_24165B17C);
  sub_24165B1D4();
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    v11 = (void *)v18[1];
    v12 = sub_2416BB2A8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
    sub_2416BB290();
    v13 = v2;
    v14 = v11;
    v15 = sub_2416BB284();
    v16 = (_QWORD *)swift_allocObject();
    v17 = MEMORY[0x24BEE6930];
    v16[2] = v15;
    v16[3] = v17;
    v16[4] = v13;
    v16[5] = v14;
    sub_24160B674((uint64_t)v6, (uint64_t)&unk_25713E698, (uint64_t)v16);

    return swift_release();
  }
  return result;
}

void sub_24165B17C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E680)
  {
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E680);
  }
}

unint64_t sub_24165B1D4()
{
  unint64_t result;

  result = qword_25713E688;
  if (!qword_25713E688)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_25713E688);
  }
  return result;
}

uint64_t sub_24165B210()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_24165B244(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_2415C2834;
  return sub_241659EF8(a1, v4, v5, v7, v6);
}

uint64_t *SuggestedEmergencyContactFetcher.__allocating_init(contactAuthorizationChecker:suggestedContactFetcher:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;

  v4 = (uint64_t *)swift_allocObject();
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = __swift_mutable_project_boxed_opaque_existential_1(a2, v11);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  v17 = sub_24165C73C((uint64_t)v9, (uint64_t)v15, v4, v5, v11, v6, v12);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v17;
}

uint64_t SuggestedEmergencyContactFetcher.fetch(_:)(uint64_t (*a1)(_QWORD), uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t (*)(), uint64_t, uint64_t, uint64_t);

  v5 = v2[5];
  v6 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v5);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) & 1) == 0)
    return a1(0);
  v8 = v2[10];
  v7 = v2[11];
  __swift_project_boxed_opaque_existential_1(v2 + 7, v8);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v7 + 8);
  swift_retain();
  v10(sub_2415DFDC8, v9, v8, v7);
  return swift_release();
}

uint64_t SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t *SuggestedEmergencyContactFetcher.init(contactAuthorizationChecker:suggestedContactFetcher:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = __swift_mutable_project_boxed_opaque_existential_1(a1, v6);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = __swift_mutable_project_boxed_opaque_existential_1(a2, v12);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v16);
  v18 = sub_24165C73C((uint64_t)v10, (uint64_t)v16, v3, v6, v12, v7, v13);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v18;
}

uint64_t sub_24165B600(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker.init()()
{
  uint64_t v0;

  return v0;
}

BOOL sub_24165B628()
{
  id v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v0 = objc_msgSend((id)objc_opt_self(), sel_authorizationStatusForEntityType_, 0);
  if (v0 != (id)3)
  {
    if (qword_2571395C0 != -1)
      swift_once();
    v1 = sub_2416B9D6C();
    __swift_project_value_buffer(v1, (uint64_t)qword_257147810);
    v2 = sub_2416B9D54();
    v3 = sub_2416BB374();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = swift_slowAlloc();
      v9 = v5;
      *(_DWORD *)v4 = 136315138;
      v6 = sub_2416BB704();
      sub_2415A8600(v6, v7, &v9);
      sub_2416BB44C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_241599000, v2, v3, "%s MedicalID is unauthorized for fetching contacts and cannot get family circle contacts", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v5, -1, -1);
      MEMORY[0x242699570](v4, -1, -1);
    }

  }
  return v0 == (id)3;
}

uint64_t SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker.deinit()
{
  uint64_t v0;

  return v0;
}

BOOL sub_24165B7D4()
{
  return sub_24165B628();
}

uint64_t SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest.init()()
{
  uint64_t v0;

  return v0;
}

void sub_24165B800(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  void *v8;
  _QWORD v9[6];

  v5 = *v2;
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE30A88]), sel_init);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = v5;
  v9[4] = sub_24165C830;
  v9[5] = v7;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1107296256;
  v9[2] = sub_2415A674C;
  v9[3] = &block_descriptor_4;
  v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_startRequestWithCompletionHandler_, v8);
  _Block_release(v8);

}

uint64_t sub_24165B8E4(void *a1, id a2, void (*a3)(_QWORD *))
{
  unint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  _QWORD *v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __objc2_ivar *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char isUniquelyReferenced_nonNull_native;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t result;
  void *v58;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;

  v4 = (unint64_t)&unk_257139000;
  if (!a2)
  {
LABEL_5:
    if (a1)
      goto LABEL_6;
LABEL_30:
    if (*(_QWORD *)(v4 + 1472) != -1)
      swift_once();
    v48 = sub_2416B9D6C();
    __swift_project_value_buffer(v48, (uint64_t)qword_257147810);
    v49 = sub_2416B9D54();
    v50 = sub_2416BB38C();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      v52 = swift_slowAlloc();
      v63 = (_QWORD *)v52;
      *(_DWORD *)v51 = 136315138;
      v53 = sub_2416BB704();
      sub_2415A8600(v53, v54, (uint64_t *)&v63);
      sub_2416BB44C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_241599000, v49, v50, "%s there was no familyCircle fetched", v51, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v52, -1, -1);
      MEMORY[0x242699570](v51, -1, -1);
    }

    v55 = 0;
    goto LABEL_41;
  }
  v5 = (uint64_t)a2;
  v6 = a2;
  if (qword_2571395C0 != -1)
LABEL_38:
    swift_once();
  v7 = sub_2416B9D6C();
  __swift_project_value_buffer(v7, (uint64_t)qword_257147810);
  v8 = (id)v5;
  v9 = (id)v5;
  v10 = sub_2416B9D54();
  v11 = sub_2416BB374();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v63 = (_QWORD *)v13;
    *(_DWORD *)v12 = 136315394;
    v14 = sub_2416BB704();
    sub_2415A8600(v14, v15, (uint64_t *)&v63);
    sub_2416BB44C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    swift_getErrorValue();
    v16 = sub_2416BB674();
    sub_2415A8600(v16, v17, (uint64_t *)&v63);
    v4 = 0x257139000;
    sub_2416BB44C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_241599000, v10, v11, "%s Failed to fetch family circle with error %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242699570](v13, -1, -1);
    MEMORY[0x242699570](v12, -1, -1);

    goto LABEL_5;
  }

  if (!a1)
    goto LABEL_30;
LABEL_6:
  v18 = a1;
  v19 = (_QWORD *)sub_24166CEDC(MEMORY[0x24BEE4AF8]);
  v58 = v18;
  v20 = objc_msgSend(v18, sel_members);
  sub_2415C0788(0, &qword_25713E888);
  v21 = sub_2416BB1F4();

  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    v22 = sub_2416BB5C0();
    swift_bridgeObjectRelease();
    if (v22)
      goto LABEL_8;
    goto LABEL_40;
  }
  v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v22)
  {
LABEL_40:
    swift_bridgeObjectRelease();
    v56 = swift_bridgeObjectRetain();
    v55 = sub_24165C190(v56);

    swift_bridgeObjectRelease_n();
LABEL_41:
    a3(v55);
    return swift_bridgeObjectRelease();
  }
LABEL_8:
  v23 = v21 & 0xC000000000000001;
  v5 = 4;
  v24 = &stru_25119C000;
  v61 = v22;
  v62 = v21;
  v60 = v21 & 0xC000000000000001;
  while (1)
  {
    v4 = v5 - 4;
    if (v23)
      v25 = (id)MEMORY[0x242698CF4](v5 - 4, v21);
    else
      v25 = *(id *)(v21 + 8 * v5);
    v26 = v25;
    a1 = (void *)(v5 - 3);
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if ((objc_msgSend(v25, *(SEL *)&v24[104].align) & 1) == 0)
    {
      v27 = objc_msgSend(v26, sel_contact);
      if (v27)
        break;
    }

LABEL_10:
    ++v5;
    if (a1 == (void *)v22)
      goto LABEL_40;
  }
  v28 = v27;
  v29 = objc_msgSend(v27, sel_identifier);
  v30 = sub_2416BB128();
  v32 = v31;

  v33 = v28;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v63 = v19;
  v4 = sub_24165AC90(v30, v32);
  v36 = v19[2];
  v37 = (v35 & 1) == 0;
  v38 = v36 + v37;
  if (__OFADD__(v36, v37))
    goto LABEL_36;
  v39 = v35;
  if (v19[3] >= v38)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v19 = v63;
      if ((v35 & 1) != 0)
        goto LABEL_24;
    }
    else
    {
      sub_24165C590();
      v19 = v63;
      if ((v39 & 1) != 0)
        goto LABEL_24;
    }
LABEL_26:
    v19[(v4 >> 6) + 8] |= 1 << v4;
    v44 = (uint64_t *)(v19[6] + 16 * v4);
    *v44 = v30;
    v44[1] = v32;
    *(_QWORD *)(v19[7] + 8 * v4) = v33;
    v45 = v19[2];
    v46 = __OFADD__(v45, 1);
    v47 = v45 + 1;
    if (v46)
      goto LABEL_37;
    v19[2] = v47;
    swift_bridgeObjectRetain();
    goto LABEL_28;
  }
  sub_24165C288(v38, isUniquelyReferenced_nonNull_native);
  v40 = sub_24165AC90(v30, v32);
  if ((v39 & 1) == (v41 & 1))
  {
    v4 = v40;
    v19 = v63;
    if ((v39 & 1) == 0)
      goto LABEL_26;
LABEL_24:
    v42 = v19[7];
    v43 = 8 * v4;

    *(_QWORD *)(v42 + v43) = v33;
LABEL_28:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v61;
    v21 = v62;
    v23 = v60;
    v24 = &stru_25119C000;
    goto LABEL_10;
  }
  result = sub_2416BB668();
  __break(1u);
  return result;
}

uint64_t SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void sub_24165BF44(uint64_t a1, uint64_t a2)
{
  sub_24165B800(a1, a2);
}

uint64_t SuggestedEmergencyContactFetcher.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return v0;
}

uint64_t SuggestedEmergencyContactFetcher.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocClassInstance();
}

uint64_t sub_24165BFB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  sub_24165D040(0, &qword_25713BE08);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 + 95;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * (v5 >> 7);
  v6 = sub_24165C984(&v8, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_24165CFE4();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_24165C0A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  sub_24165CFEC();
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 136);
  v5 = sub_24165CBAC(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_24165CFE4();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

_QWORD *sub_24165C190(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_24165D040(0, (unint64_t *)&qword_25713EB90);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  v6 = sub_24165CDEC(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_24165CFE4();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_24165C288(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  sub_24165C910();
  v38 = a2;
  v6 = sub_2416BB5D8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    sub_2416BB6BC();
    sub_2416BB164();
    result = sub_2416BB6EC();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

id sub_24165C590()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_24165C910();
  v2 = *v0;
  v3 = sub_2416BB5CC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t *sub_24165C73C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v14;

  a3[5] = a4;
  a3[6] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  a3[10] = a5;
  a3[11] = a7;
  v14 = __swift_allocate_boxed_opaque_existential_1(a3 + 7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v14, a2, a5);
  return a3;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_24165C7E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24165C80C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24165C830(void *a1, void *a2)
{
  uint64_t v2;

  return sub_24165B8E4(a1, a2, *(void (**)(_QWORD *))(v2 + 16));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t dispatch thunk of ContactAuthorizationChecker.isContactsAuthorized()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ContactRequestFetcher.fetchContacts(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for SuggestedEmergencyContactFetcher()
{
  return objc_opt_self();
}

uint64_t method lookup function for SuggestedEmergencyContactFetcher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SuggestedEmergencyContactFetcher.__allocating_init(contactAuthorizationChecker:suggestedContactFetcher:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata accessor for SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker()
{
  return objc_opt_self();
}

uint64_t method lookup function for SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker.isContactsAuthorized()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t type metadata accessor for SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest()
{
  return objc_opt_self();
}

uint64_t method lookup function for SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest.fetchContacts(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

void sub_24165C910()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E890)
  {
    sub_2415C0788(255, &qword_25713EB60);
    v0 = sub_2416BB5F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E890);
  }
}

_QWORD *sub_24165C984(_QWORD *result, char *__dst, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[8];

  v5 = result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!__dst)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = __dst;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (__int128 *)(*(_QWORD *)(a4 + 48) + (v16 << 7));
    v21 = v20[3];
    v23 = *v20;
    v22 = v20[1];
    v27[2] = v20[2];
    v27[3] = v21;
    v27[0] = v23;
    v27[1] = v22;
    v24 = v20[7];
    v26 = v20[4];
    v25 = v20[5];
    v27[6] = v20[6];
    v27[7] = v24;
    v27[4] = v26;
    v27[5] = v25;
    memmove(v11, v20, 0x80uLL);
    if (v13 == v10)
    {
      sub_2415DA4E0((uint64_t)v27);
      goto LABEL_38;
    }
    v11 += 128;
    result = (_QWORD *)sub_2415DA4E0((uint64_t)v27);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_24165CBAC(_QWORD *result, char *__dst, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[8];
  uint64_t v29;

  v5 = result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!__dst)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = __dst;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v27 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_OWORD *)(*(_QWORD *)(a4 + 48) + 136 * v16);
    v28[0] = *v20;
    v21 = v20[4];
    v23 = v20[1];
    v22 = v20[2];
    v28[3] = v20[3];
    v28[4] = v21;
    v28[1] = v23;
    v28[2] = v22;
    v25 = v20[6];
    v24 = v20[7];
    v26 = v20[5];
    v29 = *((_QWORD *)v20 + 16);
    v28[6] = v25;
    v28[7] = v24;
    v28[5] = v26;
    memmove(v11, v20, 0x88uLL);
    if (v13 == v10)
    {
      sub_2415DA4E0((uint64_t)v28);
      goto LABEL_38;
    }
    v11 += 136;
    result = (_QWORD *)sub_2415DA4E0((uint64_t)v28);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v27;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_24165CDEC(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_24165CFE4()
{
  return swift_release();
}

void sub_24165CFEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713BE10)
  {
    sub_2416007D4(255);
    v0 = sub_2416BB638();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713BE10);
  }
}

void sub_24165D040(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_2416BB638();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t MedicalIDSpokenLanguagePickerView.body.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  _BYTE v51[32];
  uint64_t v52;

  v39 = a1;
  v2 = sub_2416BA5B8();
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24165D494();
  v38 = v5;
  v40 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v50 = *v1;
  *(_OWORD *)v51 = v8;
  *(_OWORD *)&v51[16] = v1[2];
  v52 = *((_QWORD *)v1 + 6);
  v43 = &v50;
  sub_24165D688(0);
  v37 = v9;
  sub_24165D854(255);
  v11 = v10;
  sub_24159D7F0(255, &qword_25713E8F0, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v13 = v12;
  sub_24165D9AC(255);
  v15 = v14;
  sub_24165DAC4(255);
  v17 = v16;
  sub_24165DBB8();
  v19 = v18;
  sub_2415E881C(255);
  v21 = v20;
  v22 = sub_24159CE88(&qword_25713EA30, (uint64_t (*)(uint64_t))sub_24165DBB8, MEMORY[0x24BDF1A30]);
  sub_2415E88A8();
  v24 = v23;
  v25 = sub_24159CE88(&qword_25713B4E8, (uint64_t (*)(uint64_t))sub_2415E88A8, MEMORY[0x24BDEB848]);
  v46 = v24;
  v47 = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v46 = v19;
  v47 = v21;
  v48 = v22;
  v49 = OpaqueTypeConformance2;
  v27 = swift_getOpaqueTypeConformance2();
  v46 = v17;
  v47 = v27;
  v28 = swift_getOpaqueTypeConformance2();
  v29 = sub_2415C343C();
  v46 = v15;
  v47 = MEMORY[0x24BEE0D00];
  v48 = v28;
  v49 = v29;
  v30 = swift_getOpaqueTypeConformance2();
  v31 = sub_24165E928(&qword_25713EA38, (uint64_t (*)(void))sub_2416025A8, MEMORY[0x24BEE4AB8]);
  v46 = v11;
  v47 = v13;
  v48 = v30;
  v49 = v31;
  swift_getOpaqueTypeConformance2();
  sub_2416BA15C();
  v44 = *(_OWORD *)&v51[8];
  sub_24159D6B0(0, &qword_25713EA40, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  v32 = v46;
  v33 = v47;
  v34 = v48;
  swift_getKeyPath();
  *(_QWORD *)&v44 = v32;
  *((_QWORD *)&v44 + 1) = v33;
  v45 = v34;
  sub_24159D6B0(0, &qword_25713EA48, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  sub_2416BAE28();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_2416BA5AC();
  sub_24159CE88(&qword_25713EA50, (uint64_t (*)(uint64_t))sub_24165D494, MEMORY[0x24BDED358]);
  v35 = v38;
  sub_2416BAA08();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v4, v42);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v7, v35);
}

void sub_24165D494()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E898)
  {
    sub_2416BA108();
    sub_24165D688(255);
    sub_24165D854(255);
    sub_24159D7F0(255, &qword_25713E8F0, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    sub_24165D9AC(255);
    sub_24165DAC4(255);
    sub_24165DBB8();
    sub_2415E881C(255);
    sub_24159CE88(&qword_25713EA30, (uint64_t (*)(uint64_t))sub_24165DBB8, MEMORY[0x24BDF1A30]);
    sub_2415E88A8();
    sub_24159CE88(&qword_25713B4E8, (uint64_t (*)(uint64_t))sub_2415E88A8, MEMORY[0x24BDEB848]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_2415C343C();
    swift_getOpaqueTypeConformance2();
    sub_24165E928(&qword_25713EA38, (uint64_t (*)(void))sub_2416025A8, MEMORY[0x24BEE4AB8]);
    swift_getOpaqueTypeConformance2();
    v0 = sub_2416BA168();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E898);
  }
}

void sub_24165D688(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_25713E8A0)
  {
    sub_24165D854(255);
    v3 = v2;
    sub_24159D7F0(255, &qword_25713E8F0, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v5 = v4;
    sub_24165D9AC(255);
    sub_24165DAC4(255);
    sub_24165DBB8();
    sub_2415E881C(255);
    sub_24159CE88(&qword_25713EA30, (uint64_t (*)(uint64_t))sub_24165DBB8, MEMORY[0x24BDF1A30]);
    sub_2415E88A8();
    sub_24159CE88(&qword_25713B4E8, (uint64_t (*)(uint64_t))sub_2415E88A8, MEMORY[0x24BDEB848]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_2415C343C();
    v8[0] = v3;
    v8[1] = v5;
    v8[2] = swift_getOpaqueTypeConformance2();
    v8[3] = sub_24165E928(&qword_25713EA38, (uint64_t (*)(void))sub_2416025A8, MEMORY[0x24BEE4AB8]);
    v6 = MEMORY[0x242699480](a1, v8, MEMORY[0x24BDF3908], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713E8A0);
  }
}

void sub_24165D854(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_25713E8A8)
  {
    sub_24165D9AC(255);
    v3 = v2;
    sub_24165DAC4(255);
    sub_24165DBB8();
    sub_2415E881C(255);
    sub_24159CE88(&qword_25713EA30, (uint64_t (*)(uint64_t))sub_24165DBB8, MEMORY[0x24BDF1A30]);
    sub_2415E88A8();
    sub_24159CE88(&qword_25713B4E8, (uint64_t (*)(uint64_t))sub_2415E88A8, MEMORY[0x24BDEB848]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v5 = sub_2415C343C();
    v8[0] = v3;
    v8[1] = MEMORY[0x24BEE0D00];
    v8[2] = OpaqueTypeConformance2;
    v8[3] = v5;
    v6 = MEMORY[0x242699480](a1, v8, MEMORY[0x24BDF28C0], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713E8A8);
  }
}

void sub_24165D9AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_25713E8B0)
  {
    sub_24165DAC4(255);
    v3 = v2;
    sub_24165DBB8();
    sub_2415E881C(255);
    v4 = sub_24159CE88(&qword_25713EA30, (uint64_t (*)(uint64_t))sub_24165DBB8, MEMORY[0x24BDF1A30]);
    sub_2415E88A8();
    sub_24159CE88(&qword_25713B4E8, (uint64_t (*)(uint64_t))sub_2415E88A8, MEMORY[0x24BDEB848]);
    v7[2] = v4;
    v7[3] = swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = swift_getOpaqueTypeConformance2();
    v5 = MEMORY[0x242699480](a1, v7, MEMORY[0x24BDF33A8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25713E8B0);
  }
}

void sub_24165DAC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  if (!qword_25713E8B8)
  {
    sub_24165DBB8();
    v3 = v2;
    sub_2415E881C(255);
    v5 = v4;
    v6 = sub_24159CE88(&qword_25713EA30, (uint64_t (*)(uint64_t))sub_24165DBB8, MEMORY[0x24BDF1A30]);
    sub_2415E88A8();
    sub_24159CE88(&qword_25713B4E8, (uint64_t (*)(uint64_t))sub_2415E88A8, MEMORY[0x24BDEB848]);
    v9[0] = v3;
    v9[1] = v5;
    v9[2] = v6;
    v9[3] = swift_getOpaqueTypeConformance2();
    v7 = MEMORY[0x242699480](a1, v9, MEMORY[0x24BDF3858], 0);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_25713E8B8);
  }
}

void sub_24165DBB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E8C0)
  {
    sub_24159D6B0(255, &qword_25713E8C8, (uint64_t (*)(uint64_t))sub_24165DC4C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_24165E8C8();
    v0 = sub_2416BA960();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E8C0);
  }
}

void sub_24165DC4C()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713E8D0)
  {
    sub_24165DCD4();
    sub_24165E2AC(255, &qword_25713E990, (uint64_t (*)(uint64_t))sub_24165E344, sub_24165E8AC);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713E8D0);
  }
}

void sub_24165DCD4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E8D8)
  {
    sub_24165E2AC(255, &qword_25713E8E0, (uint64_t (*)(uint64_t))sub_24165DD40, sub_24165E290);
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E8D8);
  }
}

void sub_24165DD40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E8E8)
  {
    sub_24159D7F0(255, &qword_25713E8F0, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    sub_24165DE38(255);
    sub_24165E928(&qword_25713E920, (uint64_t (*)(void))sub_24165DFF0, MEMORY[0x24BEE4AB0]);
    sub_2415A40A4(&qword_25713E960, (uint64_t (*)(uint64_t))sub_24165DE38, sub_24165E174, sub_2415A4680);
    v0 = sub_2416BADC8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E8E8);
  }
}

void sub_24165DE38(uint64_t a1)
{
  sub_24163B4BC(a1, &qword_25713E8F8, sub_24165DE4C);
}

void sub_24165DE4C(uint64_t a1)
{
  sub_24165DE60(a1, &qword_25713E900, (void (*)(uint64_t))sub_24165DEE4);
}

void sub_24165DE60(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    sub_24159EF1C(255, &qword_25713E938, (uint64_t (*)(uint64_t))sub_24165E050, sub_24165E158, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEFB28]);
    v4 = sub_2416BA150();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_24165DEE4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E908)
  {
    sub_24159EF1C(255, &qword_25713E910, (uint64_t (*)(uint64_t))sub_24165DF60, sub_24165E034, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEFB28]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E908);
  }
}

void sub_24165DF60()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E918)
  {
    sub_24159D7F0(255, &qword_25713E8F0, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    sub_24165E928(&qword_25713E920, (uint64_t (*)(void))sub_24165DFF0, MEMORY[0x24BEE4AB0]);
    v0 = sub_2416BA204();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E918);
  }
}

unint64_t sub_24165DFF0()
{
  unint64_t result;

  result = qword_25713E928;
  if (!qword_25713E928)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDSpokenLanguage, &type metadata for MedicalIDSpokenLanguage);
    atomic_store(result, (unint64_t *)&qword_25713E928);
  }
  return result;
}

uint64_t sub_24165E034()
{
  return sub_24159CE88(&qword_25713E930, (uint64_t (*)(uint64_t))sub_24165DF60, MEMORY[0x24BDEDAB0]);
}

void sub_24165E050(uint64_t a1)
{
  sub_24159EF1C(a1, &qword_25713E940, (uint64_t (*)(uint64_t))sub_24165E074, (uint64_t (*)(void))sub_24165E0E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEDA90]);
}

void sub_24165E074()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E948)
  {
    sub_24159D7F0(255, &qword_25713E8F0, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E948);
  }
}

unint64_t sub_24165E0E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = qword_25713E950;
  if (!qword_25713E950)
  {
    sub_24165E074();
    v2 = v1;
    v3 = MEMORY[0x24BEE4AB0];
    v4 = sub_24165E928(&qword_25713E920, (uint64_t (*)(void))sub_24165DFF0, MEMORY[0x24BEE4AB0]);
    result = MEMORY[0x2426994BC](v3, v2, &v4);
    atomic_store(result, (unint64_t *)&qword_25713E950);
  }
  return result;
}

uint64_t sub_24165E158()
{
  return sub_24159CE88(&qword_25713E958, (uint64_t (*)(uint64_t))sub_24165E050, MEMORY[0x24BDEDAB0]);
}

uint64_t sub_24165E174()
{
  return sub_2415A40A4(&qword_25713E968, (uint64_t (*)(uint64_t))sub_24165DE4C, (uint64_t (*)(void))sub_24165E198, sub_24165E224);
}

unint64_t sub_24165E198()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_25713E970;
  if (!qword_25713E970)
  {
    sub_24165DEE4();
    v2 = v1;
    v3 = sub_24165E200();
    v4[0] = MEMORY[0x24BDF1F80];
    v4[1] = v3;
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713E970);
  }
  return result;
}

uint64_t sub_24165E200()
{
  return sub_24165E248(&qword_25713E978, &qword_25713E910, (uint64_t (*)(uint64_t))sub_24165DF60, sub_24165E034);
}

uint64_t sub_24165E224()
{
  return sub_24165E248(&qword_25713E980, &qword_25713E938, (uint64_t (*)(uint64_t))sub_24165E050, sub_24165E158);
}

uint64_t sub_24165E248(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_24159EF1C(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEFB28]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEFB48], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24165E290()
{
  return sub_24159CE88(&qword_25713E988, (uint64_t (*)(uint64_t))sub_24165DD40, MEMORY[0x24BDF4570]);
}

void sub_24165E2AC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  if (!*a2)
  {
    v9[0] = a3(255);
    v9[1] = sub_2416BA444();
    v9[2] = a4();
    v9[3] = MEMORY[0x24BDEE580];
    v7 = MEMORY[0x242699480](a1, v9, MEMORY[0x24BDF23F8], 0);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_24165E344()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E998)
  {
    sub_24159D7F0(255, &qword_25713E8F0, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    sub_24165E410();
    sub_24165E928(&qword_25713E920, (uint64_t (*)(void))sub_24165DFF0, MEMORY[0x24BEE4AB0]);
    sub_24165E75C();
    v0 = sub_2416BADC8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E998);
  }
}

void sub_24165E410()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E9A0)
  {
    sub_24159D7F0(255, &qword_25713E9A8, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_24165E4BC(255);
    sub_24165E6FC();
    v0 = sub_2416BAE94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E9A0);
  }
}

void sub_24165E4BC(uint64_t a1)
{
  sub_24165DE60(a1, &qword_25713E9B0, (void (*)(uint64_t))sub_24165E4D0);
}

void sub_24165E4D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713E9B8)
  {
    sub_24165E554(255);
    sub_24159EF1C(255, &qword_25713E910, (uint64_t (*)(uint64_t))sub_24165DF60, sub_24165E034, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEFB28]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713E9B8);
  }
}

void sub_24165E554(uint64_t a1)
{
  sub_24163B4BC(a1, &qword_25713E9C0, sub_24165E568);
}

void sub_24165E568(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_25713E9C8)
  {
    sub_24159EF1C(255, &qword_25713E9D0, (uint64_t (*)(uint64_t))sub_24165E5FC, sub_24165E678, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF46E0]);
    v5[0] = v2;
    v5[1] = sub_24165E694();
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF2F10], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713E9C8);
  }
}

void sub_24165E5FC(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713E9D8, (uint64_t (*)(uint64_t))sub_24165E618, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_24165E618()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713E9E0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713E9E0);
  }
}

uint64_t sub_24165E678()
{
  return sub_24159CE88(&qword_25713E9E8, (uint64_t (*)(uint64_t))sub_24165E5FC, MEMORY[0x24BDF5428]);
}

unint64_t sub_24165E694()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713E9F0;
  if (!qword_25713E9F0)
  {
    sub_24159EF1C(255, &qword_25713E9D0, (uint64_t (*)(uint64_t))sub_24165E5FC, sub_24165E678, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF46E0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF4700], v1);
    atomic_store(result, (unint64_t *)&qword_25713E9F0);
  }
  return result;
}

unint64_t sub_24165E6FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713E9F8;
  if (!qword_25713E9F8)
  {
    sub_24159D7F0(255, &qword_25713E9A8, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE12D8], v1);
    atomic_store(result, (unint64_t *)&qword_25713E9F8);
  }
  return result;
}

unint64_t sub_24165E75C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_25713EA00;
  if (!qword_25713EA00)
  {
    sub_24165E410();
    v2 = v1;
    v3 = sub_2415A40A4(&qword_25713EA08, (uint64_t (*)(uint64_t))sub_24165E4BC, sub_24165E7DC, sub_24165E224);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF4A08], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713EA00);
  }
  return result;
}

uint64_t sub_24165E7DC()
{
  return sub_2415A40A4(&qword_25713EA10, (uint64_t (*)(uint64_t))sub_24165E4D0, (uint64_t (*)(void))sub_24165E800, sub_24165E200);
}

unint64_t sub_24165E800()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  result = qword_25713EA18;
  if (!qword_25713EA18)
  {
    sub_24165E554(255);
    v2 = v1;
    sub_24159EF1C(255, &qword_25713E9D0, (uint64_t (*)(uint64_t))sub_24165E5FC, sub_24165E678, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF46E0]);
    v4[2] = v3;
    v4[3] = sub_24165E694();
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = sub_2415A4680();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713EA18);
  }
  return result;
}

uint64_t sub_24165E8AC()
{
  return sub_24159CE88(&qword_25713EA20, (uint64_t (*)(uint64_t))sub_24165E344, MEMORY[0x24BDF4570]);
}

unint64_t sub_24165E8C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713EA28;
  if (!qword_25713EA28)
  {
    sub_24159D6B0(255, &qword_25713E8C8, (uint64_t (*)(uint64_t))sub_24165DC4C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v1);
    atomic_store(result, (unint64_t *)&qword_25713EA28);
  }
  return result;
}

uint64_t sub_24165E928(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_24159D7F0(255, &qword_25713E8F0, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x2426994BC](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24165E9A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;

  v58 = a2;
  v51 = sub_2416BA450();
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24165DBB8();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24165DAC4(0);
  v11 = v10;
  v50 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24165D9AC(0);
  v54 = v14;
  v53 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v48 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24165D854(0);
  v57 = v16;
  v56 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v55 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = a1;
  sub_24159D6B0(0, &qword_25713E8C8, (uint64_t (*)(uint64_t))sub_24165DC4C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
  sub_24165E8C8();
  sub_2416BA954();
  v52 = a1;
  v59 = a1;
  sub_2415E881C(0);
  v19 = v18;
  v20 = sub_24159CE88(&qword_25713EA30, (uint64_t (*)(uint64_t))sub_24165DBB8, MEMORY[0x24BDF1A30]);
  sub_2415E88A8();
  v22 = v21;
  v23 = sub_24159CE88(&qword_25713B4E8, (uint64_t (*)(uint64_t))sub_2415E88A8, MEMORY[0x24BDEB848]);
  *(_QWORD *)&v65 = v22;
  *((_QWORD *)&v65 + 1) = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  sub_2416BABAC();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v25 = v49;
  v26 = v51;
  (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v4, *MEMORY[0x24BDEE5F0], v51);
  *(_QWORD *)&v65 = v6;
  *((_QWORD *)&v65 + 1) = v19;
  v66 = v20;
  v67 = OpaqueTypeConformance2;
  v27 = v48;
  v28 = swift_getOpaqueTypeConformance2();
  sub_2416BAB4C();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v4, v26);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v13, v11);
  v29 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v29);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v30 = (void *)qword_25713A038;
  v31 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v31);
  v32 = v30;
  sub_2416B9C04();
  *(_QWORD *)&v65 = sub_2416BB134();
  *((_QWORD *)&v65 + 1) = v33;
  v63 = v11;
  v64 = v28;
  v34 = swift_getOpaqueTypeConformance2();
  v35 = sub_2415C343C();
  v36 = MEMORY[0x24BEE0D00];
  v37 = v55;
  v38 = v54;
  sub_2416BAABC();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v27, v38);
  v39 = v52;
  v65 = *(_OWORD *)(v52 + 24);
  sub_24159D6B0(0, &qword_25713EA40, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v40 = v63;
  swift_getKeyPath();
  *(_QWORD *)&v65 = v40;
  sub_24159CE88((unint64_t *)&qword_25713BC68, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, (uint64_t)&protocol conformance descriptor for MedicalIDSpokenLanguagePickerViewModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v42 = *(_QWORD *)(v40 + 80);
  v41 = *(_QWORD *)(v40 + 88);
  swift_bridgeObjectRetain();
  swift_release();
  v61 = v42;
  v62 = v41;
  v43 = swift_allocObject();
  v44 = *(_OWORD *)(v39 + 16);
  *(_OWORD *)(v43 + 16) = *(_OWORD *)v39;
  *(_OWORD *)(v43 + 32) = v44;
  *(_OWORD *)(v43 + 48) = *(_OWORD *)(v39 + 32);
  *(_QWORD *)(v43 + 64) = *(_QWORD *)(v39 + 48);
  sub_241661058(v39);
  sub_24159D7F0(0, &qword_25713E8F0, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  *(_QWORD *)&v65 = v38;
  *((_QWORD *)&v65 + 1) = v36;
  v66 = v34;
  v67 = v35;
  swift_getOpaqueTypeConformance2();
  sub_24165E928(&qword_25713EA38, (uint64_t (*)(void))sub_2416025A8, MEMORY[0x24BEE4AB8]);
  v45 = v57;
  sub_2416BABE8();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v37, v45);
}

uint64_t sub_24165EFF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24165E9A4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_24165F000()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24165F010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  _QWORD v83[5];
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;

  v97 = a2;
  sub_24165E344();
  v94 = v3;
  v89 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v93 = (char *)v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24165E2AC(0, &qword_25713E990, v5, sub_24165E8AC);
  v98 = v6;
  v104 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v96 = (char *)v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v95 = (char *)v83 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v105 = (char *)v83 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v103 = (char *)v83 - v13;
  v14 = sub_2416BA444();
  v99 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24165DD40();
  v87 = v17;
  v86 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v85 = (char *)v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24165E2AC(0, &qword_25713E8E0, v19, sub_24165E290);
  v88 = v20;
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v84 = (char *)v83 - v22;
  sub_24165DCD4();
  v24 = MEMORY[0x24BDAC7A8](v23);
  v92 = (uint64_t)v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)v83 - v26;
  v112 = *(_OWORD *)(a1 + 24);
  v108 = *(_OWORD *)(a1 + 24);
  sub_24159D6B0(0, &qword_25713EA40, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v29 = v28;
  sub_2416BAD14();
  v30 = v106;
  swift_getKeyPath();
  *(_QWORD *)&v108 = v30;
  sub_24159CE88((unint64_t *)&qword_25713BC68, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, (uint64_t)&protocol conformance descriptor for MedicalIDSpokenLanguagePickerViewModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v31 = *(_QWORD *)(v30 + 32);
  v32 = *(_QWORD *)(v30 + 40);
  swift_release();
  v33 = HIBYTE(v32) & 0xF;
  if ((v32 & 0x2000000000000000) == 0)
    v33 = v31 & 0xFFFFFFFFFFFFLL;
  v102 = a1;
  v91 = v14;
  v100 = v27;
  v90 = v16;
  v101 = v29;
  if (v33)
  {
    v34 = 1;
    v35 = v88;
  }
  else
  {
    v106 = v112;
    sub_2416BAD2C();
    v36 = v108;
    v37 = v109;
    swift_getKeyPath();
    v106 = v36;
    *(_QWORD *)&v107 = v37;
    sub_24159D6B0(0, &qword_25713EA48, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    sub_2416BAE28();
    swift_release();
    swift_release();
    swift_release();
    v38 = swift_release();
    v106 = v108;
    v107 = v109;
    MEMORY[0x24BDAC7A8](v38);
    sub_24159D7F0(0, &qword_25713E8F0, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    sub_24165DE38(0);
    sub_24165E928(&qword_25713E920, (uint64_t (*)(void))sub_24165DFF0, MEMORY[0x24BEE4AB0]);
    sub_2415A40A4(&qword_25713E960, (uint64_t (*)(uint64_t))sub_24165DE38, sub_24165E174, sub_2415A4680);
    v27 = v100;
    v39 = v85;
    sub_2416BADA4();
    sub_2416BA438();
    sub_24165E290();
    v40 = v84;
    v41 = v87;
    sub_2416BAA44();
    (*(void (**)(char *, uint64_t))(v99 + 8))(v16, v14);
    (*(void (**)(char *, unint64_t))(v86 + 8))(v39, v41);
    v42 = v88;
    (*(void (**)(char *, char *, unint64_t))(v21 + 32))(v27, v40, v88);
    v34 = 0;
    v35 = v42;
  }
  (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v21 + 56))(v27, v34, 1, v35);
  v43 = sub_2416BB0EC();
  v44 = *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64);
  MEMORY[0x24BDAC7A8](v43);
  v88 = (v44 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v45 = (void *)qword_25713A038;
  v46 = sub_2416B9C10();
  v47 = *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64);
  MEMORY[0x24BDAC7A8](v46);
  v87 = (v47 + 15) & 0xFFFFFFFFFFFFFFF0;
  v48 = v45;
  sub_2416B9C04();
  v110 = sub_2416BB134();
  v111 = v49;
  v106 = v112;
  sub_2416BAD2C();
  v50 = v108;
  v51 = v109;
  swift_getKeyPath();
  v106 = v50;
  *(_QWORD *)&v107 = v51;
  sub_24159D6B0(0, &qword_25713EA48, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v86 = v52;
  sub_2416BAE28();
  swift_release();
  swift_release();
  swift_release();
  v53 = swift_release();
  v106 = v108;
  v107 = v109;
  MEMORY[0x24BDAC7A8](v53);
  sub_24159D7F0(0, &qword_25713E8F0, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v85 = v54;
  sub_24165E410();
  v84 = v55;
  v83[4] = sub_24165E928(&qword_25713E920, (uint64_t (*)(void))sub_24165DFF0, MEMORY[0x24BEE4AB0]);
  v83[3] = sub_24165E75C();
  v83[2] = sub_2415C343C();
  v56 = v93;
  sub_2416BADBC();
  v57 = v90;
  sub_2416BA438();
  v83[1] = sub_24165E8AC();
  v58 = v105;
  v59 = v94;
  v60 = v91;
  sub_2416BAA44();
  v99 = *(_QWORD *)(v99 + 8);
  ((void (*)(char *, uint64_t))v99)(v57, v60);
  v89 = *(_QWORD *)(v89 + 8);
  ((void (*)(char *, uint64_t))v89)(v56, v59);
  v83[0] = *(_QWORD *)(v104 + 32);
  v61 = v98;
  v62 = ((uint64_t (*)(char *, char *, uint64_t))v83[0])(v103, v58, v98);
  MEMORY[0x24BDAC7A8](v62);
  v63 = sub_2416BB098();
  v64 = (void *)qword_25713A038;
  MEMORY[0x24BDAC7A8](v63);
  v65 = v64;
  sub_2416B9C04();
  v110 = sub_2416BB134();
  v111 = v66;
  v106 = v112;
  sub_2416BAD2C();
  v67 = v108;
  v68 = v109;
  swift_getKeyPath();
  v106 = v67;
  *(_QWORD *)&v107 = v68;
  sub_2416BAE28();
  swift_release();
  swift_release();
  swift_release();
  v69 = swift_release();
  v106 = v108;
  v107 = v109;
  MEMORY[0x24BDAC7A8](v69);
  sub_2416BADBC();
  sub_2416BA438();
  v70 = v95;
  sub_2416BAA44();
  ((void (*)(char *, uint64_t))v99)(v57, v60);
  ((void (*)(char *, uint64_t))v89)(v56, v59);
  v71 = v105;
  ((void (*)(char *, char *, uint64_t))v83[0])(v105, v70, v61);
  v72 = (uint64_t)v100;
  v73 = v92;
  sub_2415BEF64((uint64_t)v100, v92, (uint64_t (*)(_QWORD))sub_24165DCD4);
  v74 = v103;
  v75 = v104;
  v76 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
  v76(v70, v103, v61);
  v77 = v96;
  v76(v96, v71, v61);
  v78 = v97;
  sub_2415BEF64(v73, v97, (uint64_t (*)(_QWORD))sub_24165DCD4);
  sub_24165DC4C();
  v80 = v79;
  v76((char *)(v78 + *(int *)(v79 + 48)), v70, v61);
  v76((char *)(v78 + *(int *)(v80 + 64)), v77, v61);
  v81 = *(void (**)(char *, uint64_t))(v75 + 8);
  v81(v105, v61);
  v81(v74, v61);
  sub_2415A6154(v72, (uint64_t (*)(_QWORD))sub_24165DCD4);
  v81(v77, v61);
  v81(v70, v61);
  return sub_2415A6154(v73, (uint64_t (*)(_QWORD))sub_24165DCD4);
}

uint64_t sub_24165FC60(__int128 *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v2 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v2);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v3 = (void *)qword_25713A038;
  v4 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v4);
  v5 = v3;
  sub_2416B9C04();
  sub_2416BB134();
  sub_2415C343C();
  v6 = sub_2416BA9D8();
  v8 = v7;
  v19 = v6;
  v20 = v7;
  v10 = v9 & 1;
  v21 = v9 & 1;
  v22 = v11;
  v23 = 0u;
  v24 = 0u;
  v12 = a1[1];
  v15 = *a1;
  v16 = v12;
  v17 = a1[2];
  v18 = *((_QWORD *)a1 + 6);
  v14[0] = 0;
  v14[1] = 0;
  sub_24165FE7C(v14, 1701736270, 0xE400000000000000);
  sub_24165DE4C(0);
  sub_24165E174();
  sub_2416BAB1C();
  swift_bridgeObjectRelease();
  sub_2415A431C(v6, v8, v10);
  swift_bridgeObjectRelease();
  sub_241661150(0, 0);
  return sub_241661140(0, 0);
}

void sub_24165FE7C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;

  v7 = *a1;
  v6 = a1[1];
  v9 = *(_QWORD *)(v3 + 40);
  v8 = *(_QWORD *)(v3 + 48);
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v10 + 32) = v9;
  *(_QWORD *)(v10 + 40) = v8;
  *(_QWORD *)(v10 + 48) = a2;
  *(_QWORD *)(v10 + 56) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = (uint64_t)sub_2415FE3C4((_QWORD *)1, 3, 1, (_QWORD *)v10);
    *(_QWORD *)(v10 + 16) = 3;
    *(_QWORD *)(v10 + 64) = v7;
    *(_QWORD *)(v10 + 72) = v6;
  }
  sub_24159D6B0(0, &qword_25713EA40, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  swift_getKeyPath();
  sub_24159CE88((unint64_t *)&qword_25713BC68, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, (uint64_t)&protocol conformance descriptor for MedicalIDSpokenLanguagePickerViewModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v12 = *(_QWORD *)(v19 + 80);
  v11 = *(_QWORD *)(v19 + 88);
  swift_bridgeObjectRetain();
  swift_release();
  if (!v6)
  {
    if (!v11)
      goto LABEL_13;
LABEL_11:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if (!v11)
  {
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  if (v7 == v12 && v6 == v11)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = sub_2416BB644();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
      goto LABEL_16;
  }
LABEL_13:
  v15 = *(_QWORD *)(v10 + 16);
  v14 = *(_QWORD *)(v10 + 24);
  if (v15 >= v14 >> 1)
    v10 = (uint64_t)sub_2415FE3C4((_QWORD *)(v14 > 1), v15 + 1, 1, (_QWORD *)v10);
  *(_QWORD *)(v10 + 16) = v15 + 1;
  v16 = v10 + 16 * v15;
  *(_QWORD *)(v16 + 32) = 0x64657463656C6553;
  *(_QWORD *)(v16 + 40) = 0xE800000000000000;
LABEL_16:
  swift_bridgeObjectRetain();
  v17 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v18 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v18)
  {
    sub_2416BB128();
    swift_bridgeObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24166013C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;

  sub_24159D6B0(0, &qword_25713EA40, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  swift_getKeyPath();
  sub_24159CE88((unint64_t *)&qword_25713BC68, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, (uint64_t)&protocol conformance descriptor for MedicalIDSpokenLanguagePickerViewModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v2 = *(_QWORD *)(v8 + 40);
  v3 = *(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(v2) & 0xF;
  if (v3)
  {
    swift_beginAccess();
    swift_retain();
    v4 = swift_bridgeObjectRetain();
    sub_2416000AC(v4);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
  }
  swift_release();
  v5 = swift_allocObject();
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(a1 + 48);
  sub_241661058(a1);
  sub_24159D7F0(0, &qword_25713E9A8, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_24165E4BC(0);
  sub_24165E6FC();
  sub_2415A40A4(&qword_25713EA08, (uint64_t (*)(uint64_t))sub_24165E4BC, sub_24165E7DC, sub_24165E224);
  sub_241661198();
  return sub_2416BAE88();
}

uint64_t sub_241660378@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[2];
  __int128 v42;
  char v43;
  _BYTE v44[24];
  uint64_t v45;
  __int128 v46;
  char v47;
  uint64_t v48;

  v37 = a2;
  v38 = a3;
  v40 = a4;
  v6 = sub_2416BA6B4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24165E568(0);
  v36 = v10;
  v39 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  v13 = a1[1];
  v15 = *v4;
  v34 = v4[1];
  v35 = v15;
  v33 = *((unsigned __int8 *)v4 + 16);
  v32 = *(_OWORD *)(v4 + 3);
  v31 = v4[5];
  v30 = v4[6];
  v16 = sub_2416BA51C();
  sub_241660C5C((uint64_t)&v42);
  v17 = v43;
  v18 = *(_QWORD *)v44;
  v19 = v45;
  v20 = v46;
  v21 = v42;
  v22 = *(_OWORD *)&v44[8];
  v42 = (unint64_t)v16;
  v43 = 1;
  *(_OWORD *)v44 = v21;
  v44[16] = v17;
  v45 = v18;
  v46 = v22;
  v47 = v19;
  v48 = v20;
  sub_2416BA6A8();
  sub_24159EF1C(0, &qword_25713E9D0, (uint64_t (*)(uint64_t))sub_24165E5FC, sub_24165E678, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF46E0]);
  v24 = v23;
  v25 = sub_24165E694();
  sub_2416BAB04();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v26 = v46;
  v27 = v47;
  sub_2415A431C(*(uint64_t *)v44, *(uint64_t *)&v44[8], v44[16]);
  swift_bridgeObjectRelease();
  sub_2415A431C(v26, *((uint64_t *)&v26 + 1), v27);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v42 = v35;
  *((_QWORD *)&v42 + 1) = v34;
  v43 = v33;
  *(_OWORD *)v44 = v32;
  *(_QWORD *)&v44[16] = v31;
  v45 = v30;
  v41[0] = v14;
  v41[1] = v13;
  swift_bridgeObjectRetain();
  sub_24165FE7C(v41, v37, v38);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v42 = v24;
  *((_QWORD *)&v42 + 1) = v25;
  swift_getOpaqueTypeConformance2();
  v28 = v36;
  sub_2416BAB1C();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v12, v28);
}

uint64_t sub_24166061C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;

  sub_24159D6B0(0, &qword_25713EA40, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  swift_getKeyPath();
  sub_24159CE88((unint64_t *)&qword_25713BC68, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, (uint64_t)&protocol conformance descriptor for MedicalIDSpokenLanguagePickerViewModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v2 = *(_QWORD *)(v8 + 40);
  if ((v2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(v2) & 0xF;
  else
    v3 = *(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    swift_retain();
    v4 = swift_bridgeObjectRetain();
    sub_2416000AC(v4);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_release();
  v5 = swift_allocObject();
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(a1 + 48);
  sub_241661058(a1);
  sub_24159D7F0(0, &qword_25713E9A8, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_24165E4BC(0);
  sub_24165E6FC();
  sub_2415A40A4(&qword_25713EA08, (uint64_t (*)(uint64_t))sub_24165E4BC, sub_24165E7DC, sub_24165E224);
  sub_241661198();
  return sub_2416BAE88();
}

uint64_t sub_241660830@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v21[2];

  sub_24165E4D0();
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24165E554(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = a1[1];
  v21[0] = v15;
  v21[1] = v16;
  sub_241660378(v21, a2, a3, (uint64_t)v14);
  sub_2415BEF64((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_24165E554);
  v17 = (uint64_t *)&v11[*(int *)(v9 + 36)];
  *v17 = v15;
  v17[1] = v16;
  sub_2415BEF64((uint64_t)v11, a4, (uint64_t (*)(_QWORD))sub_24165E4D0);
  sub_24165E4BC(0);
  v19 = (uint64_t *)(a4 + *(int *)(v18 + 36));
  *v19 = v15;
  v19[1] = v16;
  swift_bridgeObjectRetain_n();
  sub_2415A6154((uint64_t)v11, (uint64_t (*)(_QWORD))sub_24165E4D0);
  return sub_2415A6154((uint64_t)v14, (uint64_t (*)(_QWORD))sub_24165E554);
}

uint64_t sub_241660984(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v10[16];
  uint64_t v11;

  v2 = sub_2416BA5E8();
  MEMORY[0x24BDAC7A8](v2);
  sub_2415E88A8();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2416BA5C4();
  v11 = a1;
  sub_241609510();
  sub_24159CE88((unint64_t *)&qword_25713B4E0, (uint64_t (*)(uint64_t))sub_241609510, MEMORY[0x24BDF43B0]);
  sub_2416B9FE8();
  v8 = sub_24159CE88(&qword_25713B4E8, (uint64_t (*)(uint64_t))sub_2415E88A8, MEMORY[0x24BDEB848]);
  MEMORY[0x242697E0C](v7, v4, v8);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_241660AC8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  __int128 v7;

  v2 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v2);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v3 = (void *)qword_25713A038;
  v4 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v4);
  v5 = v3;
  sub_2416B9C04();
  sub_2416BB134();
  v6 = swift_allocObject();
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v6 + 64) = *(_QWORD *)(a1 + 48);
  sub_241661058(a1);
  sub_2415C343C();
  return sub_2416BAD68();
}

uint64_t sub_241660C5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  MedicalIDSpokenLanguage.languageInLanguageLocale.getter();
  sub_2415C343C();
  v2 = sub_2416BA9D8();
  v20 = v3;
  v21 = v2;
  v22 = v4;
  v6 = v5 & 1;
  MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
  v7 = sub_2416BA9D8();
  v9 = v8;
  v11 = v10 & 1;
  sub_2416BA660();
  v12 = sub_2416BA990();
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  sub_2415A431C(v7, v9, v11);
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v22;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v14;
  *(_BYTE *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v16;
  sub_2415A43C8(v21, v20, v6);
  swift_bridgeObjectRetain();
  sub_2415A43C8(v12, v14, v18);
  swift_bridgeObjectRetain();
  sub_2415A431C(v12, v14, v18);
  swift_bridgeObjectRelease();
  sub_2415A431C(v21, v20, v6);
  return swift_bridgeObjectRelease();
}

uint64_t destroy for MedicalIDSpokenLanguagePickerView()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MedicalIDSpokenLanguagePickerView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MedicalIDSpokenLanguagePickerView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MedicalIDSpokenLanguagePickerView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MedicalIDSpokenLanguagePickerView()
{
  return &type metadata for MedicalIDSpokenLanguagePickerView;
}

uint64_t sub_241660FD8()
{
  sub_24165D494();
  sub_24159CE88(&qword_25713EA50, (uint64_t (*)(uint64_t))sub_24165D494, MEMORY[0x24BDED358]);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_241661038@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24165F010(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_241661040()
{
  uint64_t v0;

  return sub_241660984(*(_QWORD *)(v0 + 16));
}

uint64_t sub_241661058(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_2416610B8()
{
  uint64_t v0;

  return sub_241660AC8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2416610C4()
{
  sub_24159D7F0(0, &qword_25713A568, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF4870]);
  return sub_2416BAE1C();
}

uint64_t sub_241661128()
{
  uint64_t v0;

  return sub_24166013C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_241661130()
{
  uint64_t v0;

  return sub_24166061C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_241661138()
{
  uint64_t v0;

  return sub_24165FC60(*(__int128 **)(v0 + 16));
}

uint64_t sub_241661140(uint64_t a1, uint64_t a2)
{
  if (a2 != 2)
    return sub_241661150(a1, a2);
  return a1;
}

uint64_t sub_241661150(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_241661168@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_241660830(a1, 0xD000000000000012, 0x80000002416C5B10, a2);
}

unint64_t sub_241661198()
{
  unint64_t result;

  result = qword_25713EA58;
  if (!qword_25713EA58)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDSpokenLanguage, &type metadata for MedicalIDSpokenLanguage);
    atomic_store(result, (unint64_t *)&qword_25713EA58);
  }
  return result;
}

uint64_t objectdestroyTm_17()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_241661224@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_241660830(a1, 0xD00000000000001ALL, 0x80000002416C5AF0, a2);
}

uint64_t sub_241661254@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v4);
  if ((a1 & 1) == 0)
  {
    sub_2416BB098();
    if (qword_257139300 == -1)
      goto LABEL_5;
    goto LABEL_6;
  }
  sub_2416BB098();
  if (qword_257139300 != -1)
LABEL_6:
    swift_once();
LABEL_5:
  v5 = (void *)qword_25713A038;
  v6 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v6);
  v7 = v5;
  sub_2416B9C04();
  v8 = sub_2416BB134();
  v21 = v9;
  v22 = v8;
  v20 = (uint64_t)&v20;
  MEMORY[0x24BDAC7A8](v8);
  v10 = sub_2416BB098();
  MEMORY[0x24BDAC7A8](v10);
  v11 = v7;
  sub_2416B9C04();
  v12 = sub_2416BB134();
  v14 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v15 = sub_2416BB098();
  MEMORY[0x24BDAC7A8](v15);
  v16 = v11;
  sub_2416B9C04();
  result = sub_2416BB134();
  v18 = v21;
  *a2 = v22;
  a2[1] = v18;
  a2[2] = v12;
  a2[3] = v14;
  a2[4] = result;
  a2[5] = v19;
  return result;
}

__n128 sub_2416616B8@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  __n128 result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (void *)a1[2];
  sub_241662B68(0, &qword_25713EB10, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  sub_2416BAE34();
  sub_241662B68(0, &qword_25713EB18, &qword_25713EB20, (uint64_t)&type metadata for EmergencyContactPickerError);
  sub_2416BAE34();
  *(_OWORD *)(a2 + 112) = v17;
  *(_OWORD *)(a2 + 128) = v18;
  *(_OWORD *)(a2 + 144) = v19;
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  *(_OWORD *)(a2 + 96) = v16;
  result = v12;
  *(_OWORD *)(a2 + 16) = v11;
  *(__n128 *)(a2 + 32) = v12;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 160) = v8;
  *(_QWORD *)(a2 + 168) = v9;
  *(_BYTE *)(a2 + 176) = v10;
  *(_DWORD *)(a2 + 177) = v11;
  *(_DWORD *)(a2 + 180) = *(_DWORD *)((char *)&v11 + 3);
  *(_QWORD *)(a2 + 184) = v6;
  return result;
}

uint64_t sub_241661838()
{
  sub_241663464();
  return sub_2416BA15C();
}

id sub_2416618C0()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v2 = *v0;
  v1 = v0[1];
  v22 = *((_OWORD *)v0 + 9);
  v23 = *((_OWORD *)v0 + 10);
  v24 = *((_OWORD *)v0 + 11);
  v18 = *((_OWORD *)v0 + 5);
  v19 = *((_OWORD *)v0 + 6);
  v20 = *((_OWORD *)v0 + 7);
  v21 = *((_OWORD *)v0 + 8);
  v14 = *((_OWORD *)v0 + 1);
  v15 = *((_OWORD *)v0 + 2);
  v16 = *((_OWORD *)v0 + 3);
  v17 = *((_OWORD *)v0 + 4);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBAE78]), sel_init);
  sub_241663E18();
  sub_2416BA7E0();
  objc_msgSend(v3, sel_setDelegate_, v13);

  objc_msgSend(v3, sel_setMode_, 1);
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2416BCF30;
  *(_QWORD *)(v4 + 32) = sub_2416BB128();
  *(_QWORD *)(v4 + 40) = v5;
  v6 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setDisplayedPropertyKeys_, v6);

  objc_msgSend(v3, sel_setOnlyRealContacts_, 1);
  v7 = sub_241661BBC();
  objc_msgSend(v3, sel_setPredicateForEnablingContact_, v7, v2, v1, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24);

  if (v1)
  {
    if (v1 >> 62)
    {
      swift_bridgeObjectRetain();
      v12 = sub_2416BB5C0();
      swift_bridgeObjectRelease();
      if (v12 < 1)
        goto LABEL_5;
      goto LABEL_4;
    }
    if (*(uint64_t *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1)
    {
LABEL_4:
      objc_msgSend(v3, sel_setShouldDisplaySuggestionsController_, 1);
      sub_2415C0788(0, &qword_25713EB60);
      v8 = (void *)sub_2416BB1E8();
      objc_msgSend(v3, sel_setContactSuggestions_, v8);

    }
  }
LABEL_5:
  sub_2415C0788(0, &qword_25713EB58);
  v9 = (void *)sub_2416BB350();
  objc_msgSend(v3, sel_setPredicateForSelectionOfContact_, v9);

  v10 = (void *)sub_2416BB350();
  objc_msgSend(v3, sel_setPredicateForSelectionOfProperty_, v10);

  return v3;
}

id sub_241661BBC()
{
  unint64_t *v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  unint64_t v38;
  uint64_t v39;

  v1 = *v0;
  v2 = (void *)v0[23];
  v39 = MEMORY[0x24BEE4AF8];
  sub_2415C0788(0, &qword_25713EB58);
  sub_241663E70();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2416BCF30;
  v4 = sub_2416BB128();
  v6 = v5;
  v7 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v3 + 56) = MEMORY[0x24BEE0D00];
  v38 = sub_241663F18();
  *(_QWORD *)(v3 + 64) = v38;
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = v6;
  sub_2416BB350();
  MEMORY[0x2426989D0]();
  if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_2416BB20C();
  sub_2416BB230();
  sub_2416BB200();
  v8 = sub_241662094();
  if (v9)
  {
    v10 = v8;
    v11 = v9;
    v12 = objc_msgSend(v2, sel_profileIdentifier);
    v13 = objc_msgSend(v12, sel_type);

    if (v13 == (id)3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_2416BCC80;
      v15 = sub_2416BB128();
      *(_QWORD *)(v14 + 56) = v7;
      *(_QWORD *)(v14 + 64) = v38;
      *(_QWORD *)(v14 + 32) = v15;
      *(_QWORD *)(v14 + 40) = v16;
      *(_QWORD *)(v14 + 96) = v7;
      *(_QWORD *)(v14 + 104) = v38;
      *(_QWORD *)(v14 + 72) = v10;
      *(_QWORD *)(v14 + 80) = v11;
      sub_2416BB350();
      MEMORY[0x2426989D0]();
      if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_2416BB20C();
      sub_2416BB230();
      sub_2416BB200();
    }
  }
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v17 = sub_2416BB5C0();
    if (v17)
      goto LABEL_11;
LABEL_25:
    v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_26;
  }
  v17 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v17)
    goto LABEL_25;
LABEL_11:
  if (v17 < 1)
  {
    __break(1u);
LABEL_32:
    sub_2416BB20C();
    goto LABEL_28;
  }
  v18 = 0;
  v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
      v20 = (id)MEMORY[0x242698CF4](v18, v1);
    else
      v20 = *(id *)(v1 + 8 * v18 + 32);
    v21 = v20;
    v22 = objc_msgSend(v20, sel_nameContactIdentifier);
    if (v22)
    {
      v23 = v22;
      v24 = sub_2416BB128();
      v26 = v25;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = sub_2415FE3C4(0, v19[2] + 1, 1, v19);
      v28 = v19[2];
      v27 = v19[3];
      if (v28 >= v27 >> 1)
        v19 = sub_2415FE3C4((_QWORD *)(v27 > 1), v28 + 1, 1, v19);
      v19[2] = v28 + 1;
      v29 = &v19[2 * v28];
      v29[4] = v24;
      v29[5] = v26;
    }
    else
    {

    }
    ++v18;
  }
  while (v17 != v18);
LABEL_26:
  swift_bridgeObjectRelease_n();
  if (!v19[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_2416BCC80;
  v31 = sub_2416BB128();
  v32 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v30 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v30 + 64) = v38;
  *(_QWORD *)(v30 + 32) = v31;
  *(_QWORD *)(v30 + 40) = v33;
  sub_24159D7F0(0, &qword_25713D110, v32, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  *(_QWORD *)(v30 + 96) = v34;
  *(_QWORD *)(v30 + 104) = sub_241663F5C();
  *(_QWORD *)(v30 + 72) = v19;
  sub_2416BB350();
  MEMORY[0x2426989D0]();
  if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    goto LABEL_32;
LABEL_28:
  sub_2416BB230();
  sub_2416BB200();
LABEL_30:
  v35 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v36 = objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v35);

  return v36;
}

uint64_t sub_241662094()
{
  NSObject *v0;
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  id v25[2];

  v25[1] = *(id *)MEMORY[0x24BDAC8D0];
  if (objc_msgSend((id)objc_opt_self(), sel_authorizationStatusForEntityType_, 0) != (id)3)
  {
    if (qword_2571395C0 != -1)
      swift_once();
    v10 = sub_2416B9D6C();
    __swift_project_value_buffer(v10, (uint64_t)qword_257147810);
    v0 = sub_2416B9D54();
    v11 = sub_2416BB374();
    if (os_log_type_enabled(v0, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_241599000, v0, v11, "Medical ID is not authorized for the contact store, cannot fetch me card", v12, 2u);
      MEMORY[0x242699570](v12, -1, -1);
    }
    goto LABEL_12;
  }
  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBAD00]), sel_init);
  -[NSObject setIncludeSharedPhotoContacts:](v0, sel_setIncludeSharedPhotoContacts_, 0);
  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBACF8]), sel_initWithConfiguration_, v0);
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB90, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2416C1A20;
  v3 = (void *)*MEMORY[0x24BDBA2E0];
  *(_QWORD *)(v2 + 32) = *MEMORY[0x24BDBA2E0];
  sub_2416BB200();
  sub_2416285C4();
  v4 = v3;
  v5 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v25[0] = 0;
  v6 = objc_msgSend(v1, sel__crossPlatformUnifiedMeContactWithKeysToFetch_error_, v5, v25);

  if (!v6)
  {
    v13 = v25[0];
    v14 = (void *)sub_2416B9A60();

    swift_willThrow();
    if (qword_2571395C0 != -1)
      swift_once();
    v15 = sub_2416B9D6C();
    __swift_project_value_buffer(v15, (uint64_t)qword_257147810);
    v16 = v14;
    v17 = v14;
    v18 = sub_2416B9D54();
    v19 = sub_2416BB374();
    if (!os_log_type_enabled(v18, v19))
    {

      return 0;
    }
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = (void *)swift_slowAlloc();
    v25[0] = v21;
    *(_DWORD *)v20 = 136315138;
    swift_getErrorValue();
    v22 = sub_2416BB674();
    sub_2415A8600(v22, v23, (uint64_t *)v25);
    sub_2416BB44C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_241599000, v18, v19, "Error fetching me contact: %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242699570](v21, -1, -1);
    MEMORY[0x242699570](v20, -1, -1);

LABEL_12:
    return 0;
  }
  v7 = v25[0];
  v8 = objc_msgSend(v6, sel_identifier);
  v9 = sub_2416BB128();

  return v9;
}

id sub_2416624E0()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  objc_class *v11;
  char *v12;
  char *v13;
  char *v14;
  id v15;
  char *v16;
  id v17;
  id v18;
  objc_super v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v1 = *(_OWORD *)(v0 + 128);
  v42 = *(_OWORD *)(v0 + 112);
  v43 = v1;
  v44 = *(_OWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 64);
  v38 = *(_OWORD *)(v0 + 48);
  v39 = v2;
  v3 = *(_OWORD *)(v0 + 96);
  v40 = *(_OWORD *)(v0 + 80);
  v41 = v3;
  v4 = *(_OWORD *)(v0 + 32);
  v36 = *(_OWORD *)(v0 + 16);
  v37 = v4;
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_BYTE *)(v0 + 176);
  sub_241662B68(0, &qword_25713EB10, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact);
  sub_2416BAE34();
  v42 = v33;
  v43 = v34;
  v44 = v35;
  v38 = v29;
  v39 = v30;
  v40 = v31;
  v41 = v32;
  v36 = v27;
  v37 = v28;
  v21 = v5;
  v22 = v6;
  v23 = v7;
  sub_241662B68(0, &qword_25713EB18, &qword_25713EB20, (uint64_t)&type metadata for EmergencyContactPickerError);
  sub_2416BAE34();
  v8 = v24;
  v9 = v25;
  v10 = v26;
  v11 = (objc_class *)type metadata accessor for EmergencyContactPicker.ContactPickerCoordinator();
  v12 = (char *)objc_allocWithZone(v11);
  v13 = &v12[OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact];
  *((_OWORD *)v13 + 5) = v32;
  *((_OWORD *)v13 + 6) = v42;
  *((_OWORD *)v13 + 7) = v43;
  *((_OWORD *)v13 + 8) = v44;
  *((_OWORD *)v13 + 1) = v37;
  *((_OWORD *)v13 + 2) = v38;
  *((_OWORD *)v13 + 3) = v39;
  *((_OWORD *)v13 + 4) = v40;
  *(_OWORD *)v13 = v36;
  v14 = &v12[OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__error];
  *(_QWORD *)v14 = v8;
  *((_QWORD *)v14 + 1) = v9;
  v14[16] = v10;
  v15 = objc_allocWithZone(MEMORY[0x24BDD3A90]);
  swift_retain();
  swift_retain();
  v16 = v12;
  v17 = objc_msgSend(v15, sel_init);
  *(_QWORD *)&v16[OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator_coreTelephonyClient] = v17;

  v20.receiver = v16;
  v20.super_class = v11;
  v18 = objc_msgSendSuper2(&v20, sel_init);
  swift_release();
  swift_release();
  return v18;
}

void sub_2416627A8(void *a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  id v5;
  void *v6;
  id v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[8];

  v4 = objc_msgSend((id)objc_opt_self(), sel_emergencyContactWithContact_property_, a1, a2);
  v5 = objc_msgSend(v4, sel_phoneNumber);
  if (v5
    && (v6 = v5,
        v7 = objc_retain(*(id *)(v2
                               + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator_coreTelephonyClient)),
        v8 = objc_msgSend(v7, sel_isEmergencyServicePhoneNumber_, v6),
        v7,
        v6,
        v8))
  {
    v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__error + 8);
    v10 = *(_BYTE *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__error + 16);
    *(_QWORD *)&v17 = *(_QWORD *)(v2
                                + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__error);
    *((_QWORD *)&v17 + 1) = v9;
    LOBYTE(v18) = v10;
    LOBYTE(v26[0]) = 1;
    sub_241662B68(0, &qword_25713EB18, &qword_25713EB20, (uint64_t)&type metadata for EmergencyContactPickerError);
  }
  else
  {
    v4 = v4;
    v11 = a1;
    MedicalIDEmergencyContact.init(hkEmergencyContact:contact:)(v4, a1, v26);
    nullsub_1(v26);
    v12 = *(_OWORD *)(v2
                    + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact
                    + 112);
    v23 = *(_OWORD *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact + 96);
    v24 = v12;
    v25 = *(_OWORD *)(v2
                    + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact
                    + 128);
    v13 = *(_OWORD *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact + 48);
    v19 = *(_OWORD *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact + 32);
    v20 = v13;
    v14 = *(_OWORD *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact + 80);
    v21 = *(_OWORD *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact + 64);
    v22 = v14;
    v15 = *(_OWORD *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact + 16);
    v17 = *(_OWORD *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact);
    v18 = v15;
    sub_2416279E0((uint64_t)v26, (uint64_t)&v16);
    sub_241662B68(0, &qword_25713EB10, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact);
  }
  sub_2416BAE1C();

}

id sub_241662978()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EmergencyContactPicker.ContactPickerCoordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for EmergencyContactPicker.ContactPickerCoordinator()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for EmergencyContactPickerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_241662AA0 + 4 * byte_2416C1A35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_241662AD4 + 4 * byte_2416C1A30[v4]))();
}

uint64_t sub_241662AD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_241662ADC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x241662AE4);
  return result;
}

uint64_t sub_241662AF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x241662AF8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_241662AFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_241662B04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EmergencyContactPickerError()
{
  return &type metadata for EmergencyContactPickerError;
}

unint64_t sub_241662B24()
{
  unint64_t result;

  result = qword_25713EB00;
  if (!qword_25713EB00)
  {
    result = MEMORY[0x2426994BC](&unk_2416C1B18, &type metadata for EmergencyContactPickerError);
    atomic_store(result, (unint64_t *)&qword_25713EB00);
  }
  return result;
}

void sub_241662B68(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_24159D7F0(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v5 = sub_2416BAE58();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_241662BC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v10 = *(_OWORD *)(a1 + 96);
  v11 = *(_OWORD *)(a1 + 80);
  v9 = *(_OWORD *)(a1 + 112);
  swift_release();
  swift_release();
  sub_241627AAC(v13, v12, v2, v3, v4, v5, v6, v7, v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), (void *)v9, *((void **)&v9 + 1));
  return a1;
}

uint64_t destroy for EmergencyContactPickerSheetView(uint64_t a1)
{
  void *v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for EmergencyContactPickerSheetView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = *(void **)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(void **)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = v6;
  swift_retain();
  swift_retain();
  if (v7)
  {
    v9 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v9;
    v10 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v10;
    v11 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v11;
    v12 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v12;
    v13 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v13;
    v14 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v14;
    v16 = *(void **)(a2 + 144);
    v15 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 136) = v7;
    *(_QWORD *)(a1 + 144) = v16;
    v17 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = v15;
    *(_QWORD *)(a1 + 160) = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = v7;
    v19 = v16;
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v20;
    v21 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v21;
    v22 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v22;
    v23 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v23;
  }
  v24 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v24;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for EmergencyContactPickerSheetView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  v7 = (_OWORD *)(a1 + 40);
  v8 = (__int128 *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    if (v9)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v10 = *(void **)(a2 + 136);
      v11 = *(void **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v10;
      v12 = v10;

      v13 = *(void **)(a1 + 144);
      v14 = *(void **)(a2 + 144);
      *(_QWORD *)(a1 + 144) = v14;
      v15 = v14;

      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_24166319C(a1 + 40);
      v20 = *(_OWORD *)(a2 + 88);
      v22 = *v8;
      v21 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = v20;
      *v7 = v22;
      *(_OWORD *)(a1 + 56) = v21;
      v23 = *(_OWORD *)(a2 + 152);
      v25 = *(_OWORD *)(a2 + 104);
      v24 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = v23;
      *(_OWORD *)(a1 + 104) = v25;
      *(_OWORD *)(a1 + 120) = v24;
    }
  }
  else if (v9)
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v16 = *(void **)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v16;
    v17 = *(void **)(a2 + 144);
    *(_QWORD *)(a1 + 144) = v17;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = v16;
    v19 = v17;
    swift_bridgeObjectRetain();
  }
  else
  {
    v26 = *v8;
    v27 = *(_OWORD *)(a2 + 56);
    v28 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v28;
    *v7 = v26;
    *(_OWORD *)(a1 + 56) = v27;
    v29 = *(_OWORD *)(a2 + 104);
    v30 = *(_OWORD *)(a2 + 120);
    v31 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v31;
    *(_OWORD *)(a1 + 104) = v29;
    *(_OWORD *)(a1 + 120) = v30;
  }
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  return a1;
}

uint64_t sub_24166319C(uint64_t a1)
{
  destroy for MedicalIDEmergencyContact(a1);
  return a1;
}

__n128 __swift_memcpy185_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_OWORD *)(a1 + 169) = *(__int128 *)((char *)a2 + 169);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for EmergencyContactPickerSheetView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  v5 = *(void **)(a1 + 136);
  if (!v5)
    goto LABEL_5;
  v6 = *(_QWORD *)(a2 + 136);
  if (!v6)
  {
    sub_24166319C(a1 + 40);
LABEL_5:
    v15 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v15;
    v16 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v16;
    v17 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v17;
    v18 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v18;
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v12;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = v6;

  v13 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);

  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v14;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_release();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_release();
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmergencyContactPickerSheetView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 185))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmergencyContactPickerSheetView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 184) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 185) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 185) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EmergencyContactPickerSheetView()
{
  return &type metadata for EmergencyContactPickerSheetView;
}

uint64_t sub_24166344C()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_24166345C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_2416616B8((uint64_t *)*(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

unint64_t sub_241663464()
{
  unint64_t result;

  result = qword_25713EB28;
  if (!qword_25713EB28)
  {
    result = MEMORY[0x2426994BC](&unk_2416C1C28, &type metadata for EmergencyContactPicker);
    atomic_store(result, (unint64_t *)&qword_25713EB28);
  }
  return result;
}

void destroy for EmergencyContactPicker(uint64_t a1)
{
  void *v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v2 = *(void **)(a1 + 128);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

}

uint64_t initializeWithCopy for EmergencyContactPicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  id v24;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(void **)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v7;
    v8 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v8;
    v9 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v9;
    v10 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v10;
    v11 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v11;
    v12 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v12;
    v14 = *(void **)(a2 + 136);
    v13 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 128) = v6;
    *(_QWORD *)(a1 + 136) = v14;
    v15 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 152) = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = v6;
    v17 = v14;
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v18;
    v19 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v19;
    v20 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v20;
    v21 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v21;
  }
  v22 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v22;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  v23 = *(void **)(a2 + 184);
  *(_QWORD *)(a1 + 184) = v23;
  swift_retain();
  swift_retain();
  v24 = v23;
  return a1;
}

uint64_t assignWithCopy for EmergencyContactPicker(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  void *v30;
  id v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  v4 = (_OWORD *)(a1 + 32);
  v5 = (__int128 *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 128);
  if (*(_QWORD *)(a1 + 128))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v7 = *(void **)(a2 + 128);
      v8 = *(void **)(a1 + 128);
      *(_QWORD *)(a1 + 128) = v7;
      v9 = v7;

      v10 = *(void **)(a1 + 136);
      v11 = *(void **)(a2 + 136);
      *(_QWORD *)(a1 + 136) = v11;
      v12 = v11;

      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_24166319C(a1 + 32);
      v17 = *(_OWORD *)(a2 + 80);
      v19 = *v5;
      v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v17;
      *v4 = v19;
      *(_OWORD *)(a1 + 48) = v18;
      v20 = *(_OWORD *)(a2 + 144);
      v22 = *(_OWORD *)(a2 + 96);
      v21 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v20;
      *(_OWORD *)(a1 + 96) = v22;
      *(_OWORD *)(a1 + 112) = v21;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    v13 = *(void **)(a2 + 128);
    *(_QWORD *)(a1 + 128) = v13;
    v14 = *(void **)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v14;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v13;
    v16 = v14;
    swift_bridgeObjectRetain();
  }
  else
  {
    v23 = *v5;
    v24 = *(_OWORD *)(a2 + 48);
    v25 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v25;
    *v4 = v23;
    *(_OWORD *)(a1 + 48) = v24;
    v26 = *(_OWORD *)(a2 + 96);
    v27 = *(_OWORD *)(a2 + 112);
    v28 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v28;
    *(_OWORD *)(a1 + 96) = v26;
    *(_OWORD *)(a1 + 112) = v27;
  }
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  v29 = *(void **)(a2 + 184);
  v30 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v29;
  v31 = v29;

  return a1;
}

__n128 __swift_memcpy192_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for EmergencyContactPicker(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void *v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  v4 = *(void **)(a1 + 128);
  if (!v4)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 128);
  if (!v5)
  {
    sub_24166319C(a1 + 32);
LABEL_5:
    v14 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v14;
    v15 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v15;
    v16 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v16;
    v17 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v17;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = v5;

  v12 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);

  v13 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v13;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_release();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_release();
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  v18 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);

  return a1;
}

uint64_t getEnumTagSinglePayload for EmergencyContactPicker(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmergencyContactPicker(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EmergencyContactPicker()
{
  return &type metadata for EmergencyContactPicker;
}

unint64_t sub_241663C34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713EB30;
  if (!qword_25713EB30)
  {
    sub_241663C7C();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED358], v1);
    atomic_store(result, (unint64_t *)&qword_25713EB30);
  }
  return result;
}

void sub_241663C7C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713EB38)
  {
    sub_2416BA108();
    sub_241663464();
    v0 = sub_2416BA168();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713EB38);
  }
}

id sub_241663CEC@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_2416624E0();
  *a1 = result;
  return result;
}

uint64_t sub_241663D10()
{
  sub_241663DD4();
  return sub_2416BA744();
}

uint64_t sub_241663D60()
{
  sub_241663DD4();
  return sub_2416BA714();
}

void sub_241663DB0()
{
  sub_241663DD4();
  sub_2416BA738();
  __break(1u);
}

unint64_t sub_241663DD4()
{
  unint64_t result;

  result = qword_25713EB40;
  if (!qword_25713EB40)
  {
    result = MEMORY[0x2426994BC](&unk_2416C1BB0, &type metadata for EmergencyContactPicker);
    atomic_store(result, (unint64_t *)&qword_25713EB40);
  }
  return result;
}

void sub_241663E18()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713EB48)
  {
    sub_241663DD4();
    v0 = sub_2416BA7EC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713EB48);
  }
}

void sub_241663E70()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713EB68)
  {
    sub_241663EC4();
    v0 = sub_2416BB638();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713EB68);
  }
}

unint64_t sub_241663EC4()
{
  unint64_t result;

  result = qword_25713EB70;
  if (!qword_25713EB70)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25713EB70);
  }
  return result;
}

unint64_t sub_241663F18()
{
  unint64_t result;

  result = qword_25713EB78;
  if (!qword_25713EB78)
  {
    result = MEMORY[0x2426994BC](MEMORY[0x24BDCFB48], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_25713EB78);
  }
  return result;
}

unint64_t sub_241663F5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713EB88;
  if (!qword_25713EB88)
  {
    sub_24159D7F0(255, &qword_25713D110, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDCFBF0], v1);
    atomic_store(result, (unint64_t *)&qword_25713EB88);
  }
  return result;
}

uint64_t sub_241663FBC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_241663FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_241664044()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_241664050(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MedicalIDEditConditionsModalView()
{
  uint64_t result;

  result = qword_25713EBF0;
  if (!qword_25713EBF0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_241664104()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_241664114(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  id v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v3);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v4 = (void *)qword_25713A038;
  v5 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v5);
  v6 = v4;
  sub_2416B9C04();
  v7 = sub_2416BB134();
  v39 = v8;
  v40 = v7;
  if (qword_257139480 != -1)
    swift_once();
  v9 = 0xD000000000000011;
  v37 = qword_257147710;
  v38 = MEMORY[0x24BDAC7A8](*(_QWORD *)algn_257147718);
  swift_bridgeObjectRetain();
  v10 = sub_2416BB098();
  v11 = (void *)qword_25713A038;
  MEMORY[0x24BDAC7A8](v10);
  v12 = v11;
  sub_2416B9C04();
  v13 = sub_2416BB134();
  v35 = v14;
  v36 = v13;
  v15 = *a1;
  v16 = objc_msgSend(*a1, sel_medicalConditions);
  if (v16)
  {
    v17 = v16;
    v18 = sub_2416BB128();
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v21 = objc_msgSend(v15, sel_conditionsListVersion, a1);
  if (v21)
  {

    MEMORY[0x24BDAC7A8](v22);
    v23 = sub_2416BB098();
    v24 = (void *)qword_25713A038;
    MEMORY[0x24BDAC7A8](v23);
    v25 = v24;
    sub_2416B9C04();
    v26 = sub_2416BB134();
    v28 = v27;
  }
  else
  {
    v26 = 0;
    v28 = 0;
  }
  sub_24159F83C();
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v29 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v29 + 40) = 0xE900000000000044;
  v30 = 0x80000002416C3CB0;
  *(_QWORD *)(v29 + 48) = 0xD000000000000011;
  *(_QWORD *)(v29 + 56) = 0x80000002416C3CB0;
  v31 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v32 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v32)
  {
    v9 = sub_2416BB128();
    v30 = v33;

  }
  *a2 = v40;
  a2[1] = v39;
  a2[2] = v37;
  a2[3] = v38;
  a2[4] = v36;
  a2[5] = v35;
  a2[6] = v18;
  a2[7] = v20;
  a2[8] = v26;
  a2[9] = v28;
  a2[10] = v9;
  a2[11] = v30;
}

uint64_t sub_24166453C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  return result;
}

double sub_241664580@<D0>(uint64_t a1@<X8>)
{
  id *v1;
  _OWORD v4[6];

  sub_241664114(v1, (uint64_t *)v4);
  return sub_2416392BC(v4, (uint64_t)sub_24166453C, 0, a1);
}

ValueMetadata *type metadata accessor for MedicalIDMedicalInfoCell()
{
  return &type metadata for MedicalIDMedicalInfoCell;
}

uint64_t sub_2416645F0()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_241664600@<D0>(_OWORD *a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];
  _BYTE v19[25];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  _OWORD v26[2];

  v3 = v1[1];
  v20 = *v1;
  v21 = v3;
  v4 = v1[3];
  v22 = v1[2];
  v23 = v4;
  v24 = *((_QWORD *)v1 + 8);
  v5 = v20;
  v6 = v22;
  LOBYTE(v25) = v21;
  sub_241664854((uint64_t)&v20);
  swift_bridgeObjectRetain();
  v7 = MedicalIDListProperty.baseIdentifier.getter();
  v9 = v8;
  v10 = swift_allocObject();
  v11 = v23;
  *(_OWORD *)(v10 + 48) = v22;
  *(_OWORD *)(v10 + 64) = v11;
  *(_QWORD *)(v10 + 80) = v24;
  v12 = v21;
  *(_OWORD *)(v10 + 16) = v20;
  *(_OWORD *)(v10 + 32) = v12;
  if (qword_257139500 != -1)
    swift_once();
  LOBYTE(v15) = v6 != 0;
  BYTE1(v15) = 2;
  *((_QWORD *)&v15 + 1) = sub_2416648E4;
  *(_QWORD *)&v16 = v10;
  *((_QWORD *)&v16 + 1) = v7;
  *(_QWORD *)&v17 = v9;
  *((_QWORD *)&v17 + 1) = qword_25713D4D0;
  LOBYTE(v18[0]) = 1;
  sub_241664778((uint64_t)&v20, (uint64_t)v18 + 8);
  *(_OWORD *)((char *)v26 + 9) = *(_OWORD *)&v19[9];
  v13 = v18[1];
  v26[0] = *(_OWORD *)v19;
  a1[4] = v18[0];
  a1[5] = v13;
  a1[6] = v26[0];
  result = *(double *)((char *)v26 + 9);
  *(_OWORD *)((char *)a1 + 105) = *(_OWORD *)((char *)v26 + 9);
  *a1 = v5;
  a1[1] = v15;
  a1[2] = v16;
  a1[3] = v17;
  return result;
}

double sub_241664778@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char v7;

  LOBYTE(v4) = *(_BYTE *)(a1 + 16);
  swift_bridgeObjectRetain();
  MedicalIDListProperty.baseIdentifier.getter();
  sub_241664904();
  sub_2415F1BC8();
  sub_2416BA57C();
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  *(_BYTE *)(a2 + 48) = v7;
  return result;
}

uint64_t sub_241664854(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2416648A8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2416648E4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 72))();
}

unint64_t sub_241664904()
{
  unint64_t result;

  result = qword_25713EC28;
  if (!qword_25713EC28)
  {
    result = MEMORY[0x2426994BC](&unk_2416BF5A8, &type metadata for MedicalIDCellBodyText);
    atomic_store(result, (unint64_t *)&qword_25713EC28);
  }
  return result;
}

uint64_t _s11MedicalIDUI24MedicalIDMedicalInfoCellV9ViewModelVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t _s11MedicalIDUI24MedicalIDMedicalInfoCellV9ViewModelVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t _s11MedicalIDUI24MedicalIDMedicalInfoCellV9ViewModelVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s11MedicalIDUI24MedicalIDMedicalInfoCellV9ViewModelVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v6;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for MedicalIDMedicalInfoCell.ViewModel()
{
  return &type metadata for MedicalIDMedicalInfoCell.ViewModel;
}

unint64_t sub_241664B38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713EC30;
  if (!qword_25713EC30)
  {
    sub_241664B80(255);
    result = MEMORY[0x2426994BC](&unk_2416C01F8, v1);
    atomic_store(result, (unint64_t *)&qword_25713EC30);
  }
  return result;
}

void sub_241664B80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_25713EC38)
  {
    sub_241664BE0();
    v3 = v2;
    v4 = sub_241664C3C();
    v6 = type metadata accessor for MedicalIDCellView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713EC38);
  }
}

void sub_241664BE0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713EC40)
  {
    v0 = sub_2416BA588();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713EC40);
  }
}

unint64_t sub_241664C3C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713EC48;
  if (!qword_25713EC48)
  {
    sub_241664BE0();
    v2 = v1;
    v3[0] = sub_241664904();
    v3[1] = sub_2415F1BC8();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713EC48);
  }
  return result;
}

_QWORD *sub_241664CA4(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  id v32;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    v10 = a3[5];
    v11 = (_QWORD *)(a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v13 = sub_2416BA144();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v15 = a3[6];
    v16 = a3[7];
    v17 = (_QWORD *)((char *)v4 + v15);
    v18 = (uint64_t)a2 + v15;
    v20 = *(void **)v18;
    v19 = *(_QWORD *)(v18 + 8);
    *v17 = v20;
    v17[1] = v19;
    v21 = (_QWORD *)((char *)v4 + v16);
    v22 = (uint64_t)a2 + v16;
    v24 = *(void **)v22;
    v23 = *(_QWORD *)(v22 + 8);
    *v21 = v24;
    v21[1] = v23;
    v25 = a3[8];
    v26 = (_QWORD *)((char *)v4 + v25);
    v27 = (uint64_t)a2 + v25;
    v29 = *(void **)v27;
    v28 = *(_QWORD *)(v27 + 8);
    *v26 = v29;
    v26[1] = v28;
    v30 = v20;
    v31 = v24;
    v32 = v29;
  }
  return v4;
}

void sub_241664E1C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_2416BA144();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }

}

uint64_t sub_241664EE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  id v30;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = a3[5];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = sub_2416BA144();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else
  {
    *v10 = *v11;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v13 = a3[6];
  v14 = a3[7];
  v15 = (_QWORD *)(a1 + v13);
  v16 = a2 + v13;
  v18 = *(void **)v16;
  v17 = *(_QWORD *)(v16 + 8);
  *v15 = v18;
  v15[1] = v17;
  v19 = (_QWORD *)(a1 + v14);
  v20 = a2 + v14;
  v22 = *(void **)v20;
  v21 = *(_QWORD *)(v20 + 8);
  *v19 = v22;
  v19[1] = v21;
  v23 = a3[8];
  v24 = (_QWORD *)(a1 + v23);
  v25 = a2 + v23;
  v27 = *(void **)v25;
  v26 = *(_QWORD *)(v25 + 8);
  *v24 = v27;
  v24[1] = v26;
  v28 = v18;
  v29 = v22;
  v30 = v27;
  return a1;
}

uint64_t sub_24166502C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (_QWORD *)(a1 + v7);
    v9 = (_QWORD *)(a2 + v7);
    sub_2416415E4(a1 + v7);
    sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_2416BA144();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = a2 + v11;
  v14 = *(void **)(a1 + v11);
  v15 = *(void **)(a2 + v11);
  *v12 = v15;
  v16 = v15;

  v12[1] = *(_QWORD *)(v13 + 8);
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = a2 + v17;
  v20 = *(void **)(a1 + v17);
  v21 = *(void **)(a2 + v17);
  *v18 = v21;
  v22 = v21;

  v18[1] = *(_QWORD *)(v19 + 8);
  v23 = a3[8];
  v24 = (_QWORD *)(a1 + v23);
  v25 = a2 + v23;
  v26 = *(void **)(a1 + v23);
  v27 = *(void **)v25;
  *v24 = *(_QWORD *)v25;
  v28 = v27;

  v24[1] = *(_QWORD *)(v25 + 8);
  return a1;
}

uint64_t sub_2416651DC(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v11 = v10;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = sub_2416BA144();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v9, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_2416652D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v8 = a3[5];
    v9 = (void *)(a1 + v8);
    v10 = (const void *)(a2 + v8);
    sub_2416415E4(a1 + v8);
    sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v12 = v11;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v13 = sub_2416BA144();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v9, v10, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  v14 = a3[6];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = *(void **)(a1 + v14);
  *v15 = *v16;

  v15[1] = v16[1];
  v18 = a3[7];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = *(void **)(a1 + v18);
  *v19 = *v20;

  v19[1] = v20[1];
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  v25 = *(void **)(a1 + v22);
  *v23 = *v24;

  v23[1] = v24[1];
  return a1;
}

uint64_t sub_241665458()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_241665464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_24159D6B0(0, qword_25713C260, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], MEMORY[0x24BDEB580]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_2416654F8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_241665504(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_24159D6B0(0, qword_25713C260, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], MEMORY[0x24BDEB580]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDCellHeaderView()
{
  uint64_t result;

  result = qword_25713ECA8;
  if (!qword_25713ECA8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_2416655CC()
{
  unint64_t v0;

  sub_24159D6B0(319, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t destroy for MedicalIDCellHeaderViewModel()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MedicalIDCellHeaderViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MedicalIDCellHeaderViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MedicalIDCellHeaderViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MedicalIDCellHeaderViewModel()
{
  return &type metadata for MedicalIDCellHeaderViewModel;
}

uint64_t sub_2416657F8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_241665808@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)();
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[152];
  _BYTE v33[152];
  _QWORD v34[19];
  _QWORD v35[20];

  v30 = a1;
  sub_24166632C();
  v31 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416664CC(0, &qword_25713ED28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
  v28[0] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v29 = (uint64_t)v28 - v5;
  sub_241666450();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v28 - v10;
  sub_241666534();
  v28[1] = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_2416BA144();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MedicalIDCellHeaderView();
  sub_2415C153C((uint64_t)v18);
  v19 = sub_2416BA12C();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) != 0)
  {
    *(_QWORD *)v14 = sub_2416BA51C();
    *((_QWORD *)v14 + 1) = 0;
    v14[16] = 1;
    sub_241666B98();
    v21 = (uint64_t)&v14[*(int *)(v20 + 44)];
    sub_241665C18((uint64_t)v11);
    sub_241665DF0((uint64_t)v35);
    sub_24166762C((uint64_t)v35, (uint64_t)v33, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
    sub_2415BEF64((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_241666450);
    sub_24166762C((uint64_t)v33, (uint64_t)v32, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
    sub_2415BEF64((uint64_t)v9, v21, (uint64_t (*)(_QWORD))sub_241666450);
    sub_2416665CC();
    v23 = v21 + *(int *)(v22 + 48);
    sub_24166762C((uint64_t)v32, (uint64_t)v34, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
    sub_24166762C((uint64_t)v34, v23, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
    sub_241666CE4(v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241666C14);
    sub_2415A6154((uint64_t)v11, (uint64_t (*)(_QWORD))sub_241666450);
    sub_24166762C((uint64_t)v32, (uint64_t)v35, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
    sub_241666CE4(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241666D48);
    sub_2415A6154((uint64_t)v9, (uint64_t (*)(_QWORD))sub_241666450);
    v24 = sub_241666534;
    sub_2415BEF64((uint64_t)v14, v29, (uint64_t (*)(_QWORD))sub_241666534);
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713ED58, (uint64_t (*)(uint64_t))sub_241666534, MEMORY[0x24BDF4700]);
    sub_24159CE88(&qword_25713ED60, (uint64_t (*)(uint64_t))sub_24166632C, MEMORY[0x24BDF4498]);
    sub_2416BA57C();
    v25 = (uint64_t)v14;
  }
  else
  {
    *(_QWORD *)v3 = sub_2416BA45C();
    *((_QWORD *)v3 + 1) = 0;
    v3[16] = 1;
    sub_241666B1C();
    sub_24166618C((uint64_t)&v3[*(int *)(v26 + 44)]);
    v24 = sub_24166632C;
    sub_2415BEF64((uint64_t)v3, v29, (uint64_t (*)(_QWORD))sub_24166632C);
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713ED58, (uint64_t (*)(uint64_t))sub_241666534, MEMORY[0x24BDF4700]);
    sub_24159CE88(&qword_25713ED60, (uint64_t (*)(uint64_t))sub_24166632C, MEMORY[0x24BDF4498]);
    sub_2416BA57C();
    v25 = (uint64_t)v3;
  }
  return sub_2415A6154(v25, (uint64_t (*)(_QWORD))v24);
}

void sub_241665C18(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  sub_241666450();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1[1];
  v18 = *v1;
  v19 = v6;
  sub_2415C343C();
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x24BEE0D00];
  v8 = sub_2416BA9D8();
  v10 = v9;
  v18 = v8;
  v19 = v9;
  v12 = v11 & 1;
  v20 = v11 & 1;
  v21 = v13;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, v7, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_2416BCC80;
  v15 = v1[6];
  *(_QWORD *)(v14 + 32) = v1[5];
  *(_QWORD *)(v14 + 40) = v15;
  *(_QWORD *)(v14 + 48) = 0x726564616548;
  *(_QWORD *)(v14 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  v16 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v17 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v17)
  {
    sub_2416BB128();

    sub_2416677D8(0, &qword_25713ED10);
    sub_241666E30();
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v8, v10, v12);
    swift_bridgeObjectRelease();
    sub_241666EB0((uint64_t)v5, a1);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_241665DF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  int *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t result;
  id v13;
  id v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  _QWORD v22[2];
  char v23;
  char v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[3];
  uint64_t v41;
  uint64_t v42;

  v3 = (int *)type metadata accessor for MedicalIDCellHeaderView();
  v4 = *(void **)((char *)v1 + v3[6]);
  if (!v4)
  {
    sub_2415C0788(0, (unint64_t *)&qword_25713A430);
    sub_2415E3B38((unint64_t *)&qword_25713A4D8, (unint64_t *)&qword_25713A430, (uint64_t)off_251193198, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
    sub_2416BA264();
    __break(1u);
LABEL_9:
    sub_2415C0788(0, &qword_25713A448);
    sub_2415E3B38(&qword_25713B300, &qword_25713A448, 0x24BDD3C40, (uint64_t)&protocol conformance descriptor for HKHealthStore);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  if ((objc_msgSend(v4, sel_isEditingAvailable) & 1) == 0)
  {
    sub_241666E10((uint64_t)v22);
    sub_24166762C((uint64_t)v22, (uint64_t)v40, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
    return sub_24166762C((uint64_t)v40, a1, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
  }
  v5 = v1[1];
  v6 = v1[4];
  v7 = v1[6];
  v8 = *(void **)((char *)v1 + v3[7]);
  if (!v8)
    goto LABEL_9;
  v9 = *(void **)((char *)v1 + v3[8]);
  if (v9)
  {
    v15 = *v1;
    v16 = *((_BYTE *)v1 + 17);
    v17 = *((_BYTE *)v1 + 16);
    v18 = v1[3];
    v19 = v1[5];
    sub_24159D7F0(0, (unint64_t *)&qword_25713A918, (uint64_t)&type metadata for BasicAlertModel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v14 = v8;
    v10 = v9;
    sub_2416BAD08();
    sub_2415C0788(0, (unint64_t *)&qword_25713A430);
    sub_2415E3B38((unint64_t *)&qword_25713A4D8, (unint64_t *)&qword_25713A430, (uint64_t)off_251193198, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
    v22[0] = v15;
    v22[1] = v5;
    v23 = v17;
    v24 = v16;
    v25 = v20;
    v26 = v21;
    v27 = v18;
    v28 = v6;
    v29 = v19;
    v30 = v7;
    v31 = v40[0];
    v32 = v40[1];
    v33 = v40[2];
    v34 = v41;
    v35 = v42;
    v36 = v14;
    v37 = v10;
    v38 = sub_2416BA270();
    v39 = v11;
    nullsub_1(v22);
    sub_24166762C((uint64_t)v22, (uint64_t)v40, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
    return sub_24166762C((uint64_t)v40, a1, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
  }
  sub_2415C0788(0, (unint64_t *)&qword_25713A460);
  sub_2415E3B38(&qword_25713B308, (unint64_t *)&qword_25713A460, 0x24BDD3E40, (uint64_t)&protocol conformance descriptor for HKProfileStore);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = v8;
LABEL_11:
  result = sub_2416BA264();
  __break(1u);
  return result;
}

uint64_t sub_24166618C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[152];
  _BYTE v13[152];
  _QWORD v14[19];
  _QWORD v15[19];

  sub_241666450();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v12[-v6];
  sub_241665C18((uint64_t)&v12[-v6]);
  sub_241665DF0((uint64_t)v15);
  sub_24166762C((uint64_t)v15, (uint64_t)v13, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
  sub_2415BEF64((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(_QWORD))sub_241666450);
  sub_24166762C((uint64_t)v13, (uint64_t)v12, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
  sub_2415BEF64((uint64_t)v5, a1, (uint64_t (*)(_QWORD))sub_241666450);
  sub_2416663C4();
  v9 = a1 + *(int *)(v8 + 48);
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + *(int *)(v8 + 64);
  sub_24166762C((uint64_t)v12, (uint64_t)v14, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
  sub_24166762C((uint64_t)v14, v10, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
  sub_241666CE4(v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241666C14);
  sub_2415A6154((uint64_t)v7, (uint64_t (*)(_QWORD))sub_241666450);
  sub_24166762C((uint64_t)v12, (uint64_t)v15, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
  sub_241666CE4(v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241666D48);
  return sub_2415A6154((uint64_t)v5, (uint64_t (*)(_QWORD))sub_241666450);
}

void sub_24166632C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713ECF0)
  {
    sub_24159D6B0(255, &qword_25713ECF8, (uint64_t (*)(uint64_t))sub_2416663C4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2415A3F2C(&qword_25713ED20, &qword_25713ECF8, (uint64_t (*)(uint64_t))sub_2416663C4);
    v0 = sub_2416BAD8C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713ECF0);
  }
}

void sub_2416663C4()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713ED00)
  {
    sub_241666450();
    sub_24159D7F0(255, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713ED00);
  }
}

void sub_241666450()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713ED08)
  {
    sub_2416677D8(255, &qword_25713ED10);
    sub_2416BA768();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713ED08);
  }
}

void sub_2416664CC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_241666534();
    v7 = v6;
    sub_24166632C();
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_241666534()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713ED30)
  {
    sub_24159D6B0(255, &qword_25713ED38, (uint64_t (*)(uint64_t))sub_2416665CC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2415A3F2C(&qword_25713ED48, &qword_25713ED38, (uint64_t (*)(uint64_t))sub_2416665CC);
    v0 = sub_2416BADF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713ED30);
  }
}

void sub_2416665CC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713ED40)
  {
    sub_241666450();
    sub_24159D7F0(255, &qword_25713ED18, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713ED40);
  }
}

__n128 sub_241666650@<Q0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __n128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  char v40;

  v3 = v1[7];
  v31 = v1[6];
  v32 = v3;
  v33 = v1[8];
  v4 = v1[3];
  v5 = (__n128)v1[1];
  v27 = v1[2];
  v28 = v4;
  v6 = v1[3];
  v7 = v1[5];
  v29 = v1[4];
  v30 = v7;
  v8 = v1[1];
  v25 = *v1;
  v26 = v8;
  v22 = v27;
  v23 = v6;
  v24 = v29;
  v34 = *((_QWORD *)v1 + 18);
  v20 = v25;
  v21 = v5;
  sub_24166755C(&v25);
  v9 = sub_241666840();
  v35 = v25;
  v36 = v26;
  v37 = v27;
  v38 = v28;
  v10 = MEMORY[0x24BEE1328];
  sub_24166762C((uint64_t)&v36 + 1, (uint64_t)&v39, &qword_25713ED88, MEMORY[0x24BEE1328]);
  sub_24166762C((uint64_t)&v39, (uint64_t)&v40, &qword_25713ED88, v10);
  if (v40 != 2)
    v9 &= v40;
  v11 = v36 & 1;
  v13 = *((_QWORD *)&v37 + 1);
  v12 = v38;
  v14 = swift_allocObject();
  v15 = v32;
  *(_OWORD *)(v14 + 112) = v31;
  *(_OWORD *)(v14 + 128) = v15;
  *(_OWORD *)(v14 + 144) = v33;
  *(_QWORD *)(v14 + 160) = v34;
  v16 = v28;
  *(_OWORD *)(v14 + 48) = v27;
  *(_OWORD *)(v14 + 64) = v16;
  v17 = v30;
  *(_OWORD *)(v14 + 80) = v29;
  *(_OWORD *)(v14 + 96) = v17;
  v18 = v26;
  *(_OWORD *)(v14 + 16) = v25;
  *(_OWORD *)(v14 + 32) = v18;
  sub_2415DE314();
  swift_bridgeObjectRetain();
  sub_2416BAD2C();
  result = v21;
  *(_BYTE *)a1 = v11;
  *(_BYTE *)(a1 + 1) = v9 & 1;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = sub_2416676FC;
  *(_QWORD *)(a1 + 32) = v14;
  *(_OWORD *)(a1 + 40) = v20;
  *(__n128 *)(a1 + 56) = v21;
  *(_OWORD *)(a1 + 72) = v22;
  *(_OWORD *)(a1 + 88) = v23;
  *(_QWORD *)(a1 + 104) = v24;
  return result;
}

uint64_t sub_241666840()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t result;

  v1 = *(void **)(v0 + 136);
  if (v1)
  {
    v2 = *(void **)(v0 + 120);
    v3 = v1;
    v4 = objc_msgSend(v3, sel_isEditingAvailable);
    if ((v4 & 1) != 0)
    {
      v5 = objc_msgSend(v2, sel_profileIdentifier);
      v6 = objc_msgSend(v5, sel_type);

      if (v6 == (id)3)
        objc_msgSend(v3, sel_accessPoint);
    }

    return (uint64_t)v4;
  }
  else
  {
    sub_2415C0788(0, (unint64_t *)&qword_25713A430);
    sub_2415E3B38((unint64_t *)&qword_25713A4D8, (unint64_t *)&qword_25713A430, (uint64_t)off_251193198, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
    result = sub_2416BA264();
    __break(1u);
  }
  return result;
}

uint64_t sub_241666934()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t result;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v10;

  v1 = (void *)v0[17];
  if (v1)
  {
    v9 = (uint64_t (*)(void))v0[3];
    v2 = (void *)v0[15];
    v8 = (void *)v0[16];
    v3 = v1;
    if ((objc_msgSend(v3, sel_isEditingAvailable) & 1) != 0
      && (v4 = objc_msgSend(v2, sel_profileIdentifier),
          v5 = objc_msgSend(v4, sel_type),
          v4,
          v5 == (id)3))
    {
      v6 = objc_msgSend(v3, sel_accessPoint);

      if (v6 != (id)8)
      {
        sub_241690A38(v8, &v10);
        sub_2415DE314();
        return sub_2416BAD20();
      }
    }
    else
    {

    }
    return v9();
  }
  else
  {
    sub_2415C0788(0, (unint64_t *)&qword_25713A430);
    sub_2415E3B38((unint64_t *)&qword_25713A4D8, (unint64_t *)&qword_25713A430, (uint64_t)off_251193198, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
    result = sub_2416BA264();
    __break(1u);
  }
  return result;
}

void sub_241666B1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713ED50)
  {
    sub_24159D6B0(255, &qword_25713ECF8, (uint64_t (*)(uint64_t))sub_2416663C4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713ED50);
  }
}

void sub_241666B98()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713ED68)
  {
    sub_24159D6B0(255, &qword_25713ED38, (uint64_t (*)(uint64_t))sub_2416665CC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713ED68);
  }
}

id sub_241666C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  id v19;
  id v20;
  id result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_24160ADF4(a8, a9);
    v19 = a18;
    swift_retain();
    v20 = a16;
    return a17;
  }
  return result;
}

_QWORD *sub_241666CE4(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18]);
  return a1;
}

void sub_241666D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    sub_24160AD24(a8, a9);

    swift_release();
  }
}

double sub_241666E10(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

unint64_t sub_241666E30()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_25713ED70;
  if (!qword_25713ED70)
  {
    sub_2416677D8(255, &qword_25713ED10);
    v2 = v1;
    v3 = sub_24164AF8C();
    v4[0] = MEMORY[0x24BDF1F80];
    v4[1] = v3;
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713ED70);
  }
  return result;
}

uint64_t sub_241666EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_241666450();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void destroy for MedicalIDHeaderAccessoryButton(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 64))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();

}

uint64_t initializeWithCopy for MedicalIDHeaderAccessoryButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v7;
    v8 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v8;
    v9 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v9;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v10;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  }
  v11 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  v12 = *(void **)(a2 + 128);
  v13 = *(void **)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v12;
  *(_QWORD *)(a1 + 136) = v13;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  v14 = v11;
  v15 = v12;
  v16 = v13;
  return a1;
}

uint64_t assignWithCopy for MedicalIDHeaderAccessoryButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a1 + 56);
  v6 = (__int128 *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2415CCAC8(a1 + 56);
      v9 = *(_OWORD *)(a2 + 72);
      v8 = *(_OWORD *)(a2 + 88);
      v10 = *v6;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 72) = v9;
      *(_OWORD *)(a1 + 88) = v8;
      *v5 = v10;
    }
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *v6;
    v12 = *(_OWORD *)(a2 + 72);
    v13 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v12;
    *(_OWORD *)(a1 + 88) = v13;
    *v5 = v11;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_retain();
  swift_release();
  v14 = *(void **)(a2 + 120);
  v15 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v14;
  v16 = v14;

  v17 = *(void **)(a2 + 128);
  v18 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v17;
  v19 = v17;

  v20 = *(void **)(a1 + 136);
  v21 = *(void **)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v21;
  v22 = v21;

  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for MedicalIDHeaderAccessoryButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  void *v11;
  void *v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_5;
  v6 = *(_QWORD *)(a2 + 64);
  if (!v6)
  {
    sub_2415CCAC8(a1 + 56);
LABEL_5:
    v9 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v9;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release();
  v10 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);

  v11 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

  v12 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);

  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDHeaderAccessoryButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDHeaderAccessoryButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDHeaderAccessoryButton()
{
  return &type metadata for MedicalIDHeaderAccessoryButton;
}

unint64_t sub_2416674A4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713ED78;
  if (!qword_25713ED78)
  {
    sub_2416664CC(255, &qword_25713ED80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713ED58, (uint64_t (*)(uint64_t))sub_241666534, MEMORY[0x24BDF4700]);
    v3[1] = sub_24159CE88(&qword_25713ED60, (uint64_t (*)(uint64_t))sub_24166632C, MEMORY[0x24BDF4498]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713ED78);
  }
  return result;
}

uint64_t sub_24166754C()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *sub_24166755C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v8;
  void *v9;
  void *v10;

  v2 = a1[7];
  v3 = a1[8];
  v9 = (void *)a1[15];
  v10 = (void *)a1[16];
  v8 = (void *)a1[17];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_24160ADF4(v2, v3);
  v4 = v8;
  swift_retain();
  v5 = v9;
  v6 = v10;
  return a1;
}

uint64_t sub_24166762C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;

  sub_24159D7F0(0, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_241667684()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 80))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_2416676FC()
{
  return sub_241666934();
}

unint64_t sub_241667758()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713ED90;
  if (!qword_25713ED90)
  {
    sub_2416677D8(255, &qword_25713ED98);
    v2 = v1;
    v3[0] = sub_241667820();
    v3[1] = sub_24160AA40();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713ED90);
  }
  return result;
}

void sub_2416677D8(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_2416BA150();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t sub_241667820()
{
  unint64_t result;

  result = qword_25713EDA0;
  if (!qword_25713EDA0)
  {
    result = MEMORY[0x2426994BC](&unk_2416BF244, &type metadata for CellAccessoryButton);
    atomic_store(result, (unint64_t *)&qword_25713EDA0);
  }
  return result;
}

void *static _HKMedicalIDData.mockMedicalIDData(listVersion:)(uint64_t a1, int a2)
{
  id v4;
  void *v5;
  id v6;
  UIImage *v7;
  NSData *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  id v67;
  void *v68;
  id v69;
  void *v70;
  uint64_t v71;
  id v72;
  id v73;
  void *v74;
  void *v75;
  uint64_t v77;
  id v78;
  id v79;
  id v80;
  __int128 v81;
  id v82;
  id v83;
  id v84;
  id v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  CGSize v91;
  CGRect v92;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD4218]), sel_init);
  v5 = (void *)sub_2416BB0F8();
  objc_msgSend(v4, sel_setName_, v5);

  v91.width = 1.0;
  v91.height = 1.0;
  UIGraphicsBeginImageContextWithOptions(v91, 0, 0.0);
  v6 = objc_msgSend((id)objc_opt_self(), sel_orangeColor);
  objc_msgSend(v6, sel_setFill);

  v92.origin.x = 0.0;
  v92.origin.y = 0.0;
  v92.size.width = 1.0;
  v92.size.height = 1.0;
  UIRectFill(v92);
  v7 = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  v89 = a1;
  LODWORD(v84) = a2;
  if (v7)
  {
    v8 = UIImagePNGRepresentation(v7);

    if (v8)
    {
      v9 = sub_2416B9ACC();
      v11 = v10;

      v7 = (UIImage *)sub_2416B9AC0();
      sub_2415A0DAC(v9, v11);
    }
    else
    {
      v7 = 0;
    }
  }
  objc_msgSend(v4, sel_setPictureData_, v7);

  v12 = sub_2416B9A18();
  v87 = *(_QWORD *)(v12 - 8);
  v88 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v85 = v4;
  v14 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415A9F94(0, &qword_25713EDA8, (void (*)(uint64_t))MEMORY[0x24BDCF2E0]);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  v18 = sub_2416B9C70();
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19((char *)&v77 - v17, 1, 1, v18);
  sub_2415A9F94(0, &qword_25713EDB0, (void (*)(uint64_t))MEMORY[0x24BDCF508]);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v77 - v21;
  v23 = sub_2416B9C94();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  sub_2416B9A00();
  sub_2416B99F4();
  sub_2416B99B8();
  sub_2416B99DC();
  v24 = sub_2416B99C4();
  MEMORY[0x24BDAC7A8](v24);
  v25 = (char *)&v77 - v17;
  v26 = sub_2416B9C1C();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v77 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v29, *MEMORY[0x24BDCEF78], v26);
  sub_2416B9C28();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  v19(v25, 0, 1, v18);
  sub_2416B9A0C();
  v86 = v14;
  v30 = v85;
  v31 = (void *)sub_2416B9988();
  objc_msgSend(v30, sel_setGregorianBirthday_, v31);

  v32 = (void *)objc_opt_self();
  v33 = objc_msgSend(v32, sel_footUnit);
  v34 = (void *)objc_opt_self();
  v35 = objc_msgSend(v34, sel_quantityWithUnit_doubleValue_, v33, 5.58);

  objc_msgSend(v30, sel_setHeight_, v35);
  v36 = objc_msgSend(v32, sel_poundUnit);
  v37 = objc_msgSend(v34, sel_quantityWithUnit_doubleValue_, v36, 150.0);

  objc_msgSend(v30, sel_setWeight_, v37);
  objc_msgSend(v30, sel_setBloodType_, 1);
  sub_2415C0788(0, (unint64_t *)&qword_257139A90);
  v38 = (void *)sub_2416BB41C();
  objc_msgSend(v30, sel_setIsOrganDonor_, v38);

  v39 = (void *)sub_2416BB0F8();
  objc_msgSend(v30, sel_setPrimaryLanguageCode_, v39);

  v40 = (void *)sub_2416BB0F8();
  objc_msgSend(v30, sel_setMedicalConditions_, v40);

  v41 = (void *)sub_2416BB0F8();
  objc_msgSend(v30, sel_setAllergyInfo_, v41);

  v42 = (void *)sub_2416BB0F8();
  objc_msgSend(v30, sel_setMedicationInfo_, v42);

  v43 = (void *)sub_2416BB0F8();
  objc_msgSend(v30, sel_setMedicalNotes_, v43);

  v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD41D8]), sel_init);
  v45 = (void *)sub_2416BB0F8();
  objc_msgSend(v44, sel_setName_, v45);

  v46 = (void *)sub_2416BB0F8();
  objc_msgSend(v44, sel_setPhoneNumber_, v46);

  v47 = (void *)sub_2416BB0F8();
  objc_msgSend(v44, sel_setRelationship_, v47);

  sub_2416684E4();
  v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_2416C1A20;
  *(_QWORD *)(v48 + 32) = v44;
  v90 = v48;
  sub_2416BB200();
  sub_2415C0788(0, &qword_25713D0C8);
  v49 = v44;
  v50 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  objc_msgSend(v30, sel_setEmergencyContacts_, v50);

  if ((v84 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v88);

  }
  else
  {
    v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD4220]), sel_init);
    v52 = (void *)sub_2416BB0F8();
    objc_msgSend(v51, sel_setTextDescription_, v52);

    v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD4220]), sel_init);
    v54 = (void *)sub_2416BB0F8();
    objc_msgSend(v53, (SEL)&selRef_systemGroupedBackgroundColor + 5, v54);

    v55 = swift_allocObject();
    v81 = xmmword_2416C1EC0;
    *(_OWORD *)(v55 + 16) = xmmword_2416C1EC0;
    *(_QWORD *)(v55 + 32) = v51;
    *(_QWORD *)(v55 + 40) = v53;
    v90 = v55;
    sub_2416BB200();
    sub_2415C0788(0, &qword_25713EDB8);
    v84 = v51;
    v83 = v53;
    v56 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    objc_msgSend(v30, sel_setMedicationsList_, v56);

    v82 = v49;
    v57 = (void *)sub_2416BB41C();
    objc_msgSend(v30, sel_setMedicationsListVersion_, v57);

    v58 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD4208]), sel_init);
    v59 = (void *)sub_2416BB0F8();
    objc_msgSend(v58, (SEL)&selRef_systemGroupedBackgroundColor + 5, v59);

    v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD4208]), sel_init);
    v61 = (void *)sub_2416BB0F8();
    objc_msgSend(v60, (SEL)&selRef_systemGroupedBackgroundColor + 5, v61);

    v62 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD4208]), sel_init);
    v63 = (void *)sub_2416BB0F8();
    objc_msgSend(v62, (SEL)&selRef_systemGroupedBackgroundColor + 5, v63);

    v64 = swift_allocObject();
    *(_OWORD *)(v64 + 16) = xmmword_2416C1ED0;
    *(_QWORD *)(v64 + 32) = v58;
    *(_QWORD *)(v64 + 40) = v60;
    *(_QWORD *)(v64 + 48) = v62;
    v90 = v64;
    sub_2416BB200();
    sub_2415C0788(0, &qword_25713EDC0);
    v80 = v58;
    v79 = v60;
    v78 = v62;
    v65 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    objc_msgSend(v30, sel_setAllergiesList_, v65);

    v66 = (void *)sub_2416BB41C();
    objc_msgSend(v30, sel_setAllergiesListVersion_, v66);

    v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD4210]), sel_init);
    v68 = (void *)sub_2416BB0F8();
    objc_msgSend(v67, sel_setTextDescription_, v68);

    v69 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD4210]), sel_init);
    v70 = (void *)sub_2416BB0F8();
    objc_msgSend(v69, sel_setTextDescription_, v70);

    v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16) = v81;
    *(_QWORD *)(v71 + 32) = v67;
    *(_QWORD *)(v71 + 40) = v69;
    v90 = v71;
    sub_2416BB200();
    sub_2415C0788(0, &qword_25713EDC8);
    v72 = v67;
    v73 = v69;
    v74 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    objc_msgSend(v30, sel_setConditionsList_, v74);

    v75 = (void *)sub_2416BB41C();
    objc_msgSend(v30, sel_setConditionsListVersion_, v75);

    (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v88);
  }
  return v30;
}

void sub_2416684E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713EB90)
  {
    v0 = sub_2416BB638();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713EB90);
  }
}

uint64_t *sub_24166853C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_2416BA06C();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = *(int *)(a3 + 20);
    v10 = *(int *)(a3 + 24);
    v11 = (char *)v4 + v9;
    v12 = (char *)a2 + v9;
    v13 = *(_QWORD *)v12;
    LOBYTE(v12) = v12[8];
    *(_QWORD *)v11 = v13;
    v11[8] = (char)v12;
    v14 = (char *)v4 + v10;
    v15 = (char *)a2 + v10;
    *v14 = *v15;
    *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_241668658(uint64_t a1)
{
  uint64_t v2;

  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_release();
  return swift_release();
}

_QWORD *sub_2416686EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;

  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_2416BA06C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v7;
  v10 = (char *)a2 + v7;
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  v12 = (char *)a1 + v8;
  v13 = (char *)a2 + v8;
  *v12 = *v13;
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_2416687E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  if (a1 != a2)
  {
    v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038];
    v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415C2970((uint64_t)a1, (uint64_t)&qword_25713A4E0, (uint64_t)MEMORY[0x24BDEC038], (uint64_t)MEMORY[0x24BDEB560], (uint64_t (*)(_QWORD))sub_24159D6B0);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, v6, v7);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = sub_2416BA06C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = *(_QWORD *)v11;
  LOBYTE(v11) = v11[8];
  *(_QWORD *)v10 = v12;
  v10[8] = (char)v11;
  swift_retain();
  swift_release();
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *v14 = *v15;
  *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
  swift_retain();
  swift_release();
  return a1;
}

char *sub_241668924(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_2416BA06C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  return a1;
}

char *sub_2416689F8(char *a1, char *a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  if (a1 != a2)
  {
    v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038];
    v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415C2970((uint64_t)a1, (uint64_t)&qword_25713A4E0, (uint64_t)MEMORY[0x24BDEC038], (uint64_t)MEMORY[0x24BDEB560], (uint64_t (*)(_QWORD))sub_24159D6B0);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, v6, v7);
    v9 = v8;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_2416BA06C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
  }
  v11 = *(int *)(a3 + 20);
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *(_QWORD *)v13;
  LOBYTE(v13) = v13[8];
  *(_QWORD *)v12 = v14;
  v12[8] = (char)v13;
  swift_release();
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  *v16 = *v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_release();
  return a1;
}

uint64_t sub_241668B28()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_241668B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_241668BD8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_241668BE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
}

uint64_t type metadata accessor for MedicalIDDeleteView()
{
  uint64_t result;

  result = qword_25713EE40;
  if (!qword_25713EE40)
    return swift_getSingletonMetadata();
  return result;
}

void sub_241668CB4()
{
  unint64_t v0;

  sub_24159D6B0(319, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_241668D48()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_241668D58@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_241668E08(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, sub_2415EBF30, &qword_25713B640).n128_u64[0];
  return result;
}

double sub_241668DB0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_241668E08(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (void (*)(uint64_t))type metadata accessor for PersonInfoView, &qword_25713B628).n128_u64[0];
  return result;
}

__n128 sub_241668E08@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, void (*a16)(uint64_t), unint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _OWORD *v31;
  __n128 result;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __n128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v18 = v17;
  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_2416BB380();
    v28 = a9;
    v29 = (void *)sub_2416BA7F8();
    sub_2416B9D48();

    a9 = v28;
  }
  sub_2416BA240();
  sub_2415BEF64(v18, a9, (uint64_t (*)(_QWORD))a16);
  sub_24166B264(0, a17, a16);
  v31 = (_OWORD *)(a9 + *(int *)(v30 + 36));
  v31[4] = v37;
  v31[5] = v38;
  v31[6] = v39;
  *v31 = v33;
  v31[1] = v34;
  result = v36;
  v31[2] = v35;
  v31[3] = v36;
  return result;
}

uint64_t sub_241668FDC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  _OWORD *v13;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_2416BB380();
    v23 = (void *)sub_2416BA7F8();
    sub_2416B9D48();

  }
  sub_2416BA240();
  v24 = v13[5];
  a9[4] = v13[4];
  a9[5] = v24;
  a9[6] = v13[6];
  *(_OWORD *)((char *)a9 + 105) = *(_OWORD *)((char *)v13 + 105);
  v25 = v13[1];
  *a9 = *v13;
  a9[1] = v25;
  v26 = v13[3];
  a9[2] = v13[2];
  a9[3] = v26;
  a9[8] = v28;
  a9[9] = v29;
  a9[13] = v33;
  a9[14] = v34;
  a9[11] = v31;
  a9[12] = v32;
  a9[10] = v30;
  return sub_24166B15C((uint64_t)v13);
}

uint64_t sub_241669198@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v15[2] = a1;
  sub_2415A39C0(0, &qword_25713EE80, sub_24166A6DC, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
  v15[1] = v2;
  MEMORY[0x24BDAC7A8](v2);
  v16 = (char *)v15 - v3;
  sub_24166947C((uint64_t)v15 - v3);
  v4 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v4);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v5 = (void *)qword_25713A038;
  v6 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v6);
  v7 = v5;
  sub_2416B9C04();
  v19 = sub_2416BB134();
  v20 = v8;
  v9 = (char *)(v1 + *(int *)(type metadata accessor for MedicalIDDeleteView() + 24));
  v10 = *v9;
  v11 = *((_QWORD *)v9 + 1);
  v17 = v10;
  v18 = v11;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  v12 = sub_2416BAD2C();
  MEMORY[0x24BDAC7A8](v12);
  sub_24159D6B0(0, &qword_25713EEB8, (uint64_t (*)(uint64_t))sub_24166A8E8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
  sub_24166A968();
  sub_2415C343C();
  sub_2415A3F2C(&qword_25713EEF8, &qword_25713EEB8, (uint64_t (*)(uint64_t))sub_24166A8E8);
  v13 = (uint64_t)v16;
  sub_2416BAAEC();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_2415C2970(v13, (uint64_t)&qword_25713EE80, (uint64_t)sub_24166A6DC, (uint64_t)MEMORY[0x24BDF1088], (uint64_t (*)(_QWORD))sub_2415A39C0);
}

void sub_24166947C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void);
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v48 = a1;
  v55 = sub_2416BA1D4();
  MEMORY[0x24BDAC7A8](v55);
  v2 = (uint64_t *)((char *)&v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = sub_2416B9FAC();
  v52 = *(_QWORD *)(v3 - 8);
  v53 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MedicalIDDeleteView();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  sub_24166A7F8();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24166A774();
  v50 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24166A6F8();
  v51 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24166A6DC(0);
  v56 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v54 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415A39C0(0, &qword_25713EE80, v22, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
  MEMORY[0x24BDAC7A8](v23);
  v47 = (char *)&v47 - v24;
  sub_2415BEF64(v49, (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDeleteView);
  v25 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26 = swift_allocObject();
  sub_24166AC3C((uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v26 + v25);
  sub_24166B264(0, &qword_25713EEA8, (void (*)(uint64_t))sub_24162FF70);
  sub_24166A868();
  sub_2416BAD50();
  v27 = objc_msgSend((id)objc_opt_self(), sel_tertiarySystemFillColor);
  v28 = MEMORY[0x242698478](v27);
  LOBYTE(v8) = sub_2416BA81C();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v13, v10);
  v29 = &v16[*(int *)(v50 + 36)];
  *(_QWORD *)v29 = v28;
  v29[8] = v8;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v31 = v52;
  v30 = v53;
  (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v5, *MEMORY[0x24BDEB488], v53);
  KeyPath = swift_getKeyPath();
  v33 = (uint64_t *)&v19[*(int *)(v51 + 36)];
  sub_24159D6B0(0, &qword_25713C7A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB4A0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))((char *)v33 + *(int *)(v34 + 28), v5, v30);
  *v33 = KeyPath;
  sub_2415BEF64((uint64_t)v16, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_24166A774);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v30);
  sub_2415A6154((uint64_t)v16, (uint64_t (*)(_QWORD))sub_24166A774);
  if (qword_257139570 != -1)
    swift_once();
  v35 = qword_25713EDD0;
  v36 = (char *)v2 + *(int *)(v55 + 20);
  v37 = *MEMORY[0x24BDEEB68];
  v38 = sub_2416BA4EC();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v36, v37, v38);
  *v2 = v35;
  v2[1] = v35;
  v39 = (uint64_t)v54;
  v40 = (uint64_t)&v54[*(int *)(v56 + 36)];
  v41 = MEMORY[0x24BDED998];
  sub_2415BEF64((uint64_t)v2, v40, (uint64_t (*)(_QWORD))MEMORY[0x24BDED998]);
  sub_24162FFEC();
  *(_WORD *)(v40 + *(int *)(v42 + 36)) = 256;
  sub_2415BEF64((uint64_t)v19, v39, (uint64_t (*)(_QWORD))sub_24166A6F8);
  sub_2415A6154((uint64_t)v2, (uint64_t (*)(_QWORD))v41);
  sub_2415A6154((uint64_t)v19, (uint64_t (*)(_QWORD))sub_24166A6F8);
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v43 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v43 + 40) = 0xE900000000000044;
  strcpy((char *)(v43 + 48), "DeleteButton");
  *(_BYTE *)(v43 + 61) = 0;
  *(_WORD *)(v43 + 62) = -5120;
  v44 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v45 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v45)
  {
    sub_2416BB128();

    sub_24166AA08();
    v46 = (uint64_t)v47;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A6154(v39, (uint64_t (*)(_QWORD))sub_24166A6DC);
    sub_24166B100(v46, v48);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_241669A20@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD, uint64_t, uint64_t);
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;

  v34 = a1;
  v39 = a2;
  v3 = type metadata accessor for MedicalIDDeleteView();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v34 - v8;
  sub_2415A3D28(0, (unint64_t *)&qword_25713B4D8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF4398]);
  v11 = v10;
  v37 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v38 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v36 = (char *)&v34 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v35 = (char *)&v34 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v34 - v18;
  sub_2416B9EB0();
  v20 = sub_2416B9EBC();
  v21 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v9, 0, 1, v20);
  sub_2415BEF64(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDeleteView);
  v22 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v23 = swift_allocObject();
  sub_24166AC3C((uint64_t)v6, v23 + v22);
  sub_2416BAD44();
  sub_2416B9EA4();
  v21(v9, 0, 1, v20);
  sub_2415BEF64(v34, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDeleteView);
  v24 = swift_allocObject();
  sub_24166AC3C((uint64_t)v6, v24 + v22);
  v25 = v35;
  sub_2416BAD44();
  v26 = v36;
  v27 = v37;
  v28 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  v28(v36, v19, v11);
  v29 = v38;
  v28(v38, v25, v11);
  v30 = v39;
  v28(v39, v26, v11);
  sub_24166A8E8();
  v28(&v30[*(int *)(v31 + 48)], v29, v11);
  v32 = *(void (**)(char *, uint64_t))(v27 + 8);
  v32(v25, v11);
  v32(v19, v11);
  v32(v29, v11);
  return ((uint64_t (*)(char *, uint64_t))v32)(v26, v11);
}

uint64_t sub_241669D74@<X0>(uint64_t a1@<X8>)
{
  return sub_241669EF4(a1);
}

uint64_t sub_241669D88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = type metadata accessor for MedicalIDDeleteView();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_25713A560, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - v7;
  v9 = sub_2416BB2A8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  sub_2415BEF64(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDeleteView);
  sub_2416BB290();
  v10 = sub_2416BB284();
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v12 = swift_allocObject();
  v13 = MEMORY[0x24BEE6930];
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v13;
  sub_24166AC3C((uint64_t)v5, v12 + v11);
  sub_24160B674((uint64_t)v8, (uint64_t)&unk_25713EF08, v12);
  return swift_release();
}

uint64_t sub_241669ED8@<X0>(uint64_t a1@<X8>)
{
  return sub_241669EF4(a1);
}

uint64_t sub_241669EF4@<X0>(uint64_t a1@<X8>)
{
  id v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  sub_2416BA4C8();
  if (qword_257139300 != -1)
    swift_once();
  v2 = (id)qword_25713A038;
  result = sub_2416BA9CC();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_241669FB0()
{
  type metadata accessor for MedicalIDDeleteView();
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  return sub_2416BAD20();
}

__n128 sub_24166A02C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __n128 result;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  _OWORD v52[15];
  uint64_t v53;
  uint64_t v54;
  char v55;
  _BYTE v56[7];
  uint64_t v57;
  char v58;
  _BYTE v59[7];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _BYTE v65[7];
  char v66;
  _BYTE v67[7];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  _BYTE v74[7];
  _BYTE v75[7];
  char v76;
  _BYTE v77[7];
  _BYTE v78[7];
  char v79;

  v51 = sub_2416BA8C4();
  v2 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v4 = (char *)v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416BA4C8();
  if (qword_257139300 != -1)
    swift_once();
  v5 = (id)qword_25713A038;
  v6 = sub_2416BA9CC();
  v50 = v7;
  v9 = v8 & 1;
  sub_2416BA87C();
  v10 = v51;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BDF17C8], v51);
  sub_2416BA8DC();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v10);
  v11 = v50;
  v12 = v9;
  v13 = sub_2416BA9C0();
  v49[0] = v14;
  v49[1] = v15;
  v17 = v16;
  swift_release();
  v18 = v17 & 1;
  sub_2415A431C(v6, v11, v12);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v52[0] = sub_2416BAC24();
  v19 = v49[0];
  v20 = sub_2416BA990();
  v51 = v21;
  v23 = v22;
  v25 = v24;
  sub_2415A431C(v13, v19, v18);
  swift_release();
  swift_bridgeObjectRelease();
  v26 = sub_2416BA810();
  if (qword_257139578 != -1)
    swift_once();
  sub_2416B9EF8();
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v35 = sub_2416BA864();
  sub_2416B9EF8();
  v79 = v23 & 1;
  v76 = 0;
  v73 = 0;
  v53 = v20;
  v54 = v51;
  v55 = v23 & 1;
  *(_DWORD *)v56 = *(_DWORD *)v78;
  *(_DWORD *)&v56[3] = *(_DWORD *)&v78[3];
  v57 = v25;
  v58 = v26;
  *(_DWORD *)&v59[3] = *(_DWORD *)&v77[3];
  *(_DWORD *)v59 = *(_DWORD *)v77;
  v60 = v28;
  v61 = v30;
  v62 = v32;
  v63 = v34;
  v64 = 0;
  *(_DWORD *)&v65[3] = *(_DWORD *)&v75[3];
  *(_DWORD *)v65 = *(_DWORD *)v75;
  v66 = v35;
  *(_DWORD *)&v67[3] = *(_DWORD *)&v74[3];
  *(_DWORD *)v67 = *(_DWORD *)v74;
  v68 = v36;
  v69 = v37;
  v70 = v38;
  v71 = v39;
  v72 = 0;
  v40 = v51;
  if (qword_257139580 != -1)
    swift_once();
  v41 = *(double *)&qword_25713EDE0;
  sub_2416BAF48();
  sub_241668FDC(0.0, 1, 0.0, 1, INFINITY, 0, v41, 0, v52, 0.0, 1, 0.0, 1);
  sub_2415A431C(v20, v40, v23 & 1);
  swift_bridgeObjectRelease();
  v42 = v52[13];
  *(_OWORD *)(a1 + 192) = v52[12];
  *(_OWORD *)(a1 + 208) = v42;
  *(_OWORD *)(a1 + 224) = v52[14];
  v43 = v52[9];
  *(_OWORD *)(a1 + 128) = v52[8];
  *(_OWORD *)(a1 + 144) = v43;
  v44 = v52[11];
  *(_OWORD *)(a1 + 160) = v52[10];
  *(_OWORD *)(a1 + 176) = v44;
  v45 = v52[5];
  *(_OWORD *)(a1 + 64) = v52[4];
  *(_OWORD *)(a1 + 80) = v45;
  v46 = v52[7];
  *(_OWORD *)(a1 + 96) = v52[6];
  *(_OWORD *)(a1 + 112) = v46;
  v47 = v52[1];
  *(_OWORD *)a1 = v52[0];
  *(_OWORD *)(a1 + 16) = v47;
  result = (__n128)v52[3];
  *(_OWORD *)(a1 + 32) = v52[2];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_24166A440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[2] = a4;
  v5 = type metadata accessor for MedicalIDDeleteView();
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = *(_QWORD *)(v6 + 64);
  v4[6] = swift_task_alloc();
  sub_24159D6B0(0, &qword_25713A560, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v4[7] = swift_task_alloc();
  v4[8] = sub_2416BB290();
  v4[9] = sub_2416BB284();
  v4[10] = sub_2416BB254();
  v4[11] = v7;
  return swift_task_switch();
}

uint64_t sub_24166A514()
{
  _QWORD *v0;
  char v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_BYTE *)(v0[2] + *(int *)(v0[3] + 20) + 8);
  v2 = swift_retain();
  v0[12] = sub_2415C0C54(v2, v1);
  swift_release();
  v3 = (_QWORD *)swift_task_alloc();
  v0[13] = v3;
  *v3 = v0;
  v3[1] = sub_24166A594;
  return MedicalIDDataManager.delete()();
}

uint64_t sub_24166A594()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_24166A5E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  swift_release();
  v5 = sub_2416BB2A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 1, 1, v5);
  sub_2415BEF64(v4, v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDeleteView);
  v6 = sub_2416BB284();
  v7 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v8 = swift_allocObject();
  v9 = MEMORY[0x24BEE6930];
  *(_QWORD *)(v8 + 16) = v6;
  *(_QWORD *)(v8 + 24) = v9;
  sub_24166AC3C(v1, v8 + v7);
  sub_24160B674(v2, (uint64_t)&unk_25713EF18, v8);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_24166A6DC(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_25713EE88, (void (*)(uint64_t))sub_24166A6F8, (void (*)(uint64_t))sub_24162FFEC);
}

void sub_24166A6F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713EE90)
  {
    sub_24166A774();
    sub_24159D6B0(255, &qword_25713C7A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB4A0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713EE90);
  }
}

void sub_24166A774()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713EE98)
  {
    sub_24166A7F8();
    sub_2415A3D28(255, &qword_25713D3B8, MEMORY[0x24BDF3E48], MEMORY[0x24BDF3E18], MEMORY[0x24BDF06B8]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713EE98);
  }
}

void sub_24166A7F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713EEA0)
  {
    sub_24166B264(255, &qword_25713EEA8, (void (*)(uint64_t))sub_24162FF70);
    sub_24166A868();
    v0 = sub_2416BAD74();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713EEA0);
  }
}

unint64_t sub_24166A868()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713EEB0;
  if (!qword_25713EEB0)
  {
    sub_24166B264(255, &qword_25713EEA8, (void (*)(uint64_t))sub_24162FF70);
    v2 = v1;
    v3[0] = sub_2416301E0();
    v3[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713EEB0);
  }
  return result;
}

uint64_t sub_24166A8E0@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_241669A20(*(_QWORD *)(v1 + 16), a1);
}

void sub_24166A8E8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713EEC0)
  {
    sub_2415A3D28(255, (unint64_t *)&qword_25713B4D8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF4398]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713EEC0);
  }
}

unint64_t sub_24166A968()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_25713EEC8;
  if (!qword_25713EEC8)
  {
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
    sub_2415A39C0(255, &qword_25713EE80, sub_24166A6DC, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
    v3 = v2;
    v4[0] = sub_24166AA08();
    v4[1] = sub_24159CE88(&qword_257139D68, v1, MEMORY[0x24BDF1078]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v3, v4);
    atomic_store(result, (unint64_t *)&qword_25713EEC8);
  }
  return result;
}

unint64_t sub_24166AA08()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713EED0;
  if (!qword_25713EED0)
  {
    sub_24166A6DC(255);
    v2 = v1;
    v3[0] = sub_24166AA88();
    v3[1] = sub_24159CE88(&qword_25713D400, (uint64_t (*)(uint64_t))sub_24162FFEC, MEMORY[0x24BDEB950]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713EED0);
  }
  return result;
}

unint64_t sub_24166AA88()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713EED8;
  if (!qword_25713EED8)
  {
    sub_24166A6F8();
    v2 = v1;
    v3[0] = sub_24166AAF0();
    v3[1] = sub_24166ABD8();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713EED8);
  }
  return result;
}

unint64_t sub_24166AAF0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713EEE0;
  if (!qword_25713EEE0)
  {
    sub_24166A774();
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713EEE8, (uint64_t (*)(uint64_t))sub_24166A7F8, MEMORY[0x24BDF43B0]);
    v3[1] = sub_24166AB70();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713EEE0);
  }
  return result;
}

unint64_t sub_24166AB70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713D3F8;
  if (!qword_25713D3F8)
  {
    sub_2415A3D28(255, &qword_25713D3B8, MEMORY[0x24BDF3E48], MEMORY[0x24BDF3E18], MEMORY[0x24BDF06B8]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF06D0], v1);
    atomic_store(result, (unint64_t *)&qword_25713D3F8);
  }
  return result;
}

unint64_t sub_24166ABD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713EEF0;
  if (!qword_25713EEF0)
  {
    sub_24159D6B0(255, &qword_25713C7A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB4A0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF1028], v1);
    atomic_store(result, (unint64_t *)&qword_25713EEF0);
  }
  return result;
}

uint64_t sub_24166AC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MedicalIDDeleteView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24166AC80()
{
  return sub_24166B0B8();
}

uint64_t objectdestroyTm_18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDDeleteView() - 8) + 80);
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0 + ((v1 + 16) & ~v1), v2);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24166AD64()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDDeleteView() - 8) + 80);
  return sub_241669D88(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_24166AD94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDDeleteView() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_24160D1DC;
  return sub_24166A440(a1, v5, v6, v7);
}

void sub_24166AE18()
{
  qword_25713EDD0 = 0x4028000000000000;
}

void sub_24166AE28()
{
  qword_25713EDD8 = 0x402E000000000000;
}

void sub_24166AE38()
{
  qword_25713EDE0 = 0x4049000000000000;
}

uint64_t sub_24166AE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a4;
  v5 = sub_2416BA06C();
  v4[3] = v5;
  v4[4] = *(_QWORD *)(v5 - 8);
  v4[5] = swift_task_alloc();
  sub_2416BB290();
  v4[6] = sub_2416BB284();
  sub_2416BB254();
  return swift_task_switch();
}

uint64_t sub_24166AEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  swift_release();
  sub_2415C0E10(v1);
  sub_2416BA060();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDDeleteView() - 8) + 80);
  swift_unknownObjectRelease();
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0 + ((v1 + 32) & ~v1), v2);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24166B028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDDeleteView() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_2415C2834;
  return sub_24166AE48(a1, v5, v6, v7);
}

uint64_t sub_24166B0B0()
{
  return sub_24166B0B8();
}

uint64_t sub_24166B0B8()
{
  type metadata accessor for MedicalIDDeleteView();
  return sub_241669FB0();
}

uint64_t sub_24166B100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415A39C0(0, &qword_25713EE80, sub_24166A6DC, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24166B15C(uint64_t a1)
{
  sub_2415A43C8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_24166B198()
{
  sub_2415A39C0(255, &qword_25713EE80, sub_24166A6DC, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
  sub_24159D6B0(255, &qword_25713EEB8, (uint64_t (*)(uint64_t))sub_24166A8E8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
  sub_24166A968();
  sub_2415C343C();
  sub_2415A3F2C(&qword_25713EEF8, &qword_25713EEB8, (uint64_t (*)(uint64_t))sub_24166A8E8);
  return swift_getOpaqueTypeConformance2();
}

void sub_24166B264(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_2416BA150();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t initializeWithCopy for ListInsetGroupedFooterView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ListInsetGroupedFooterView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ListInsetGroupedFooterView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ListInsetGroupedFooterView()
{
  return &type metadata for ListInsetGroupedFooterView;
}

uint64_t getEnumTagSinglePayload for ListCellModifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ListCellModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24166B4B0 + 4 * byte_2416C1FC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24166B4E4 + 4 * byte_2416C1FC0[v4]))();
}

uint64_t sub_24166B4E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24166B4EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24166B4F4);
  return result;
}

uint64_t sub_24166B500(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24166B508);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24166B50C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24166B514(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ListCellModifier()
{
  return &type metadata for ListCellModifier;
}

ValueMetadata *type metadata accessor for ListInsetGroupedTableHeaderView()
{
  return &type metadata for ListInsetGroupedTableHeaderView;
}

uint64_t sub_24166B540()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24166B550@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(void);
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;

  v58 = a3;
  v57 = sub_2416BA1D4();
  MEMORY[0x24BDAC7A8](v57);
  v6 = (uint64_t *)((char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24166BFC0(0);
  v8 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24166C070(0);
  v12 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24166C084(0);
  v16 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_2416BA810();
  if (qword_257139588 != -1)
    swift_once();
  sub_2416B9EF8();
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  sub_24166BFD4();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v10, a1, v28);
  v29 = &v10[*(int *)(v8 + 36)];
  *v29 = v19;
  *((_QWORD *)v29 + 1) = v21;
  *((_QWORD *)v29 + 2) = v23;
  *((_QWORD *)v29 + 3) = v25;
  *((_QWORD *)v29 + 4) = v27;
  v29[40] = 0;
  v30 = sub_2416BA864();
  if (qword_257139590 != -1)
    swift_once();
  sub_2416B9EF8();
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v38 = v37;
  sub_2415BEF64((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(_QWORD))sub_24166BFC0);
  v39 = &v14[*(int *)(v12 + 36)];
  *v39 = v30;
  *((_QWORD *)v39 + 1) = v32;
  *((_QWORD *)v39 + 2) = v34;
  *((_QWORD *)v39 + 3) = v36;
  *((_QWORD *)v39 + 4) = v38;
  v39[40] = 0;
  sub_2415A6154((uint64_t)v10, (uint64_t (*)(_QWORD))sub_24166BFC0);
  v40 = sub_2416BAF48();
  v42 = v41;
  v43 = (void *)objc_opt_self();
  if ((a2 & 1) != 0)
  {
    v59 = MEMORY[0x242698478](objc_msgSend(v43, sel_secondarySystemGroupedBackgroundColor));
    v60 = 0;
  }
  else
  {
    v59 = MEMORY[0x242698478](objc_msgSend(v43, sel_secondarySystemBackgroundColor));
    v60 = 1;
  }
  sub_2416BA57C();
  v44 = v61;
  v45 = v62;
  sub_2415BEF64((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(_QWORD))sub_24166C070);
  v46 = &v18[*(int *)(v16 + 36)];
  *(_QWORD *)v46 = v44;
  v46[8] = v45;
  *((_QWORD *)v46 + 2) = v40;
  *((_QWORD *)v46 + 3) = v42;
  sub_2415A6154((uint64_t)v14, (uint64_t (*)(_QWORD))sub_24166C070);
  if (qword_2571393A0 != -1)
    swift_once();
  v47 = qword_2571476D0;
  v48 = (char *)v6 + *(int *)(v57 + 20);
  v49 = *MEMORY[0x24BDEEB68];
  v50 = sub_2416BA4EC();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v48, v49, v50);
  *v6 = v47;
  v6[1] = v47;
  sub_24166C190(0);
  v52 = v58;
  v53 = v58 + *(int *)(v51 + 36);
  v54 = MEMORY[0x24BDED998];
  sub_2415BEF64((uint64_t)v6, v53, (uint64_t (*)(_QWORD))MEMORY[0x24BDED998]);
  sub_24162FFEC();
  *(_WORD *)(v53 + *(int *)(v55 + 36)) = 256;
  sub_2415BEF64((uint64_t)v18, v52, (uint64_t (*)(_QWORD))sub_24166C084);
  sub_2415A6154((uint64_t)v6, (uint64_t (*)(_QWORD))v54);
  return sub_2415A6154((uint64_t)v18, (uint64_t (*)(_QWORD))sub_24166C084);
}

uint64_t sub_24166B93C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;

  return sub_24166B550(a1, *v2, a2);
}

uint64_t sub_24166B944()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24166B954@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = sub_2416BA9CC();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  KeyPath = swift_getKeyPath();
  v9 = sub_2416BA8F4();
  v10 = swift_getKeyPath();
  v11 = sub_2416BA660();
  v12 = sub_2416BA810();
  v13 = sub_2416BA828();
  if (qword_257139598 != -1)
    swift_once();
  result = sub_2416B9EF8();
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = KeyPath;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v9;
  *(_DWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 112) = 1;
  *(_BYTE *)(a1 + 120) = v13;
  *(_QWORD *)(a1 + 128) = v15;
  *(_QWORD *)(a1 + 136) = v16;
  *(_QWORD *)(a1 + 144) = v17;
  *(_QWORD *)(a1 + 152) = v18;
  *(_BYTE *)(a1 + 160) = 0;
  return result;
}

uint64_t sub_24166BAC0@<X0>(uint64_t a1@<X8>)
{
  return sub_24166B954(a1);
}

uint64_t sub_24166BAD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v42 = a3;
  sub_2415EF990(0);
  v39 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2415EF9AC(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415EF934();
  v38 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24166BE20();
  v41 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v40 = (uint64_t)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = a1;
  v44 = a2;
  sub_2415C343C();
  swift_bridgeObjectRetain();
  v16 = sub_2416BA9D8();
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = *MEMORY[0x24BDF1D90];
  v24 = sub_2416BA9A8();
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 104))(v10, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v10, 0, 1, v24);
  KeyPath = swift_getKeyPath();
  sub_2415BEF64((uint64_t)v10, (uint64_t)v7 + *(int *)(v39 + 28), (uint64_t (*)(_QWORD))sub_2415EF9AC);
  *v7 = KeyPath;
  sub_2415BEF64((uint64_t)v7, (uint64_t)&v13[*(int *)(v38 + 36)], (uint64_t (*)(_QWORD))sub_2415EF990);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v18;
  v13[16] = v22;
  *((_QWORD *)v13 + 3) = v20;
  sub_2415A43C8(v16, v18, v22);
  swift_bridgeObjectRetain();
  sub_2415A6154((uint64_t)v7, (uint64_t (*)(_QWORD))sub_2415EF990);
  sub_2415A6154((uint64_t)v10, (uint64_t (*)(_QWORD))sub_2415EF9AC);
  sub_2415A431C(v16, v18, v22);
  swift_bridgeObjectRelease();
  v27 = sub_2416BAC6C();
  v28 = swift_getKeyPath();
  v29 = v40;
  sub_2415BEF64((uint64_t)v13, v40, (uint64_t (*)(_QWORD))sub_2415EF934);
  v30 = (uint64_t *)(v29 + *(int *)(v41 + 36));
  *v30 = v28;
  v30[1] = v27;
  sub_2415A6154((uint64_t)v13, (uint64_t (*)(_QWORD))sub_2415EF934);
  v31 = sub_2416BA8F4();
  v32 = swift_getKeyPath();
  v33 = v42;
  sub_2415BEF64(v29, v42, (uint64_t (*)(_QWORD))sub_24166BE20);
  sub_24166BFAC(0);
  v35 = (uint64_t *)(v33 + *(int *)(v34 + 36));
  *v35 = v32;
  v35[1] = v31;
  return sub_2415A6154(v29, (uint64_t (*)(_QWORD))sub_24166BE20);
}

uint64_t sub_24166BDC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_24166BAD0(*v1, v1[1], a1);
}

uint64_t sub_24166BDD0()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_24166BDE0()
{
  qword_25713EF20 = 0x4030000000000000;
}

void sub_24166BDF0()
{
  qword_25713EF28 = 0x4020000000000000;
}

void sub_24166BE00()
{
  qword_25713EF30 = 0x4000000000000000;
}

void sub_24166BE20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713EF38)
  {
    sub_2415EF934();
    sub_24164A2F8(255, (unint64_t *)&qword_25713C7B0, &qword_25713C7B8, MEMORY[0x24BDF3E48]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713EF38);
  }
}

uint64_t sub_24166BE9C()
{
  return sub_2416BA3A8();
}

uint64_t sub_24166BEBC()
{
  return sub_2416BA3A8();
}

uint64_t sub_24166BEDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v6;

  sub_2415EF9AC(0);
  MEMORY[0x24BDAC7A8](v2);
  sub_2415BEF64(a1, (uint64_t)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  return sub_2416BA3B4();
}

uint64_t sub_24166BF5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_2416BA2D0();
  *a1 = result;
  return result;
}

uint64_t sub_24166BF84()
{
  swift_retain();
  return sub_2416BA2DC();
}

void sub_24166BFAC(uint64_t a1)
{
  sub_24166C2D4(a1, &qword_25713EF40, (void (*)(uint64_t))sub_24166BE20);
}

void sub_24166BFC0(uint64_t a1)
{
  sub_2415DF998(a1, &qword_25713EF48, (void (*)(uint64_t))sub_24166BFD4);
}

void sub_24166BFD4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713EF50)
  {
    sub_24166C02C();
    v0 = sub_2416BA648();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713EF50);
  }
}

unint64_t sub_24166C02C()
{
  unint64_t result;

  result = qword_25713EF58;
  if (!qword_25713EF58)
  {
    result = MEMORY[0x2426994BC](&unk_2416C2030, &type metadata for ListCellModifier);
    atomic_store(result, (unint64_t *)&qword_25713EF58);
  }
  return result;
}

void sub_24166C070(uint64_t a1)
{
  sub_2415DF998(a1, &qword_25713EF60, sub_24166BFC0);
}

void sub_24166C084(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_25713EF68, sub_24166C070, (void (*)(uint64_t))sub_24166C0A0);
}

void sub_24166C0A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713EF70)
  {
    sub_2415A3D28(255, &qword_25713EF78, MEMORY[0x24BDF3E48], MEMORY[0x24BDF3E48], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    sub_24166C11C();
    v0 = sub_2416BA564();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713EF70);
  }
}

unint64_t sub_24166C11C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25713EF80;
  if (!qword_25713EF80)
  {
    sub_2415A3D28(255, &qword_25713EF78, MEMORY[0x24BDF3E48], MEMORY[0x24BDF3E48], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v2[0] = MEMORY[0x24BDF3E20];
    v2[1] = MEMORY[0x24BDF3E20];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25713EF80);
  }
  return result;
}

void sub_24166C190(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_25713EF88, sub_24166C084, (void (*)(uint64_t))sub_24162FFEC);
}

unint64_t sub_24166C1B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713EF90;
  if (!qword_25713EF90)
  {
    sub_2415DF998(255, &qword_25713EF98, sub_24166C228);
    v2 = v1;
    v3[0] = sub_24166C350();
    v3[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713EF90);
  }
  return result;
}

void sub_24166C228(uint64_t a1)
{
  sub_2415DF998(a1, &qword_25713EFA0, (void (*)(uint64_t))sub_24166C23C);
}

void sub_24166C23C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713EFA8)
  {
    sub_24166C2C0(255);
    sub_2415A3D28(255, (unint64_t *)&qword_25713B7C8, MEMORY[0x24BDEFCF8], MEMORY[0x24BDEFCD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF06F8]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713EFA8);
  }
}

void sub_24166C2C0(uint64_t a1)
{
  sub_24166C2D4(a1, &qword_25713EFB0, (void (*)(uint64_t))sub_2415EF7CC);
}

void sub_24166C2D4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    sub_24164A2F8(255, (unint64_t *)&qword_257139D20, &qword_257139D28, MEMORY[0x24BDF1948]);
    v4 = sub_2416BA150();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_24166C350()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713EFB8;
  if (!qword_25713EFB8)
  {
    sub_24166C228(255);
    v2 = v1;
    v3[0] = sub_2415A40A4(&qword_25713EFC0, (uint64_t (*)(uint64_t))sub_24166C23C, sub_24166C3D8, (uint64_t (*)(void))sub_241649A88);
    v3[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713EFB8);
  }
  return result;
}

uint64_t sub_24166C3D8()
{
  return sub_24166C420(&qword_25713EFC8, (uint64_t (*)(uint64_t))sub_24166C2C0, (uint64_t (*)(void))sub_2415F1DD8);
}

uint64_t sub_24166C3F4()
{
  return sub_24166C420(&qword_25713EFD0, (uint64_t (*)(uint64_t))sub_24166BFAC, (uint64_t (*)(void))sub_24166C4AC);
}

uint64_t sub_24166C420(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = sub_24164A4F4(&qword_257139D40, (unint64_t *)&qword_257139D20, &qword_257139D28, MEMORY[0x24BDF1948]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24166C4AC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713EFD8;
  if (!qword_25713EFD8)
  {
    sub_24166BE20();
    v2 = v1;
    v3[0] = sub_2415EFC24((unint64_t *)&qword_25713B7E8, (uint64_t (*)(uint64_t))sub_2415EF934, sub_2415EFBA8);
    v3[1] = sub_24164A4F4(&qword_25713EFE0, (unint64_t *)&qword_25713C7B0, &qword_25713C7B8, MEMORY[0x24BDF3E48]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713EFD8);
  }
  return result;
}

uint64_t sub_24166C54C()
{
  return sub_2415A40A4(&qword_25713EFE8, (uint64_t (*)(uint64_t))sub_24166C190, sub_24166C580, sub_241630248);
}

uint64_t sub_24166C580()
{
  return sub_2415A40A4(&qword_25713EFF0, (uint64_t (*)(uint64_t))sub_24166C084, (uint64_t (*)(void))sub_24166C5A4, sub_24166C68C);
}

unint64_t sub_24166C5A4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713EFF8;
  if (!qword_25713EFF8)
  {
    sub_24166C070(255);
    v2 = v1;
    v3[0] = sub_24166C60C();
    v3[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713EFF8);
  }
  return result;
}

unint64_t sub_24166C60C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713F000;
  if (!qword_25713F000)
  {
    sub_24166BFC0(255);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713F008, (uint64_t (*)(uint64_t))sub_24166BFD4, MEMORY[0x24BDEFB78]);
    v3[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713F000);
  }
  return result;
}

uint64_t sub_24166C68C()
{
  return sub_24159CE88(&qword_25713F010, (uint64_t (*)(uint64_t))sub_24166C0A0, MEMORY[0x24BDEF370]);
}

uint64_t sub_24166C6A8()
{
  id v0;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_systemRedColor);
  result = MEMORY[0x242698400](v0);
  qword_2571477E0 = result;
  return result;
}

uint64_t sub_24166C6E4()
{
  uint64_t result;

  result = sub_2416BAC54();
  qword_2571477E8 = result;
  return result;
}

uint64_t sub_24166C700(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  _BYTE v24[16];

  v2 = sub_2416B9B50();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24159D6B0(0, &qword_257139BD0, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v24[-v8];
  sub_24160C2C8(a1, (uint64_t)&v24[-v8]);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    sub_2415A3FE0((uint64_t)v9);
    return 0;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 32))(v5, v9, v2);
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
    type metadata accessor for MedicalIDDataViewModel();
    v12 = (void *)sub_2416B9BE0();
    objc_msgSend(v11, sel_setLocale_, v12);

    objc_msgSend(v11, sel_setDateStyle_, 2);
    v13 = (void *)sub_2416B9B08();
    v14 = objc_msgSend(v11, sel_stringFromDate_, v13);

    v15 = sub_2416BB128();
    v17 = v16;

    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    v18 = sub_2416BB0EC();
    MEMORY[0x24BDAC7A8](v18);
    sub_2416BB098();
    if (qword_257139300 != -1)
      swift_once();
    v19 = (void *)qword_25713A038;
    v20 = sub_2416B9C10();
    MEMORY[0x24BDAC7A8](v20);
    v21 = v19;
    sub_2416B9C04();
    sub_2416BB134();
    sub_24159D6B0(0, (unint64_t *)&qword_25713EB68, (uint64_t (*)(uint64_t))sub_241663EC4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_2416BCF30;
    *(_QWORD *)(v22 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v22 + 64) = sub_241663F18();
    *(_QWORD *)(v22 + 32) = v15;
    *(_QWORD *)(v22 + 40) = v17;
    v10 = sub_2416BB104();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t sub_24166CA48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  _BYTE v24[16];

  v2 = sub_2416B9B50();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24159D6B0(0, &qword_257139BD0, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v24[-v8];
  sub_24160C2C8(a1, (uint64_t)&v24[-v8]);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    sub_2415A3FE0((uint64_t)v9);
    return 0;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 32))(v5, v9, v2);
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
    v12 = (void *)sub_2416B9BE0();
    objc_msgSend(v11, sel_setLocale_, v12);

    objc_msgSend(v11, sel_setDateStyle_, 2);
    v13 = (void *)sub_2416B9B08();
    v14 = objc_msgSend(v11, sel_stringFromDate_, v13);

    v15 = sub_2416BB128();
    v17 = v16;

    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    v18 = sub_2416BB0EC();
    MEMORY[0x24BDAC7A8](v18);
    sub_2416BB098();
    if (qword_257139300 != -1)
      swift_once();
    v19 = (void *)qword_25713A038;
    v20 = sub_2416B9C10();
    MEMORY[0x24BDAC7A8](v20);
    v21 = v19;
    sub_2416B9C04();
    sub_2416BB134();
    sub_24159D6B0(0, (unint64_t *)&qword_25713EB68, (uint64_t (*)(uint64_t))sub_241663EC4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_2416BCF30;
    *(_QWORD *)(v22 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v22 + 64) = sub_241663F18();
    *(_QWORD *)(v22 + 32) = v15;
    *(_QWORD *)(v22 + 40) = v17;
    v10 = sub_2416BB104();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v10;
}

unint64_t sub_24166CD90(uint64_t a1)
{
  return sub_24166CEF8(a1, qword_25713F0B8, (unint64_t *)&qword_25713ADA0);
}

unint64_t sub_24166CDAC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_24166EB94();
  v2 = sub_2416BB5E4();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2415BEF64(v6, (uint64_t)&v15, (uint64_t (*)(_QWORD))sub_24166EBFC);
    v7 = v15;
    v8 = v16;
    result = sub_24165AC90(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_24166EAEC(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_24166CEDC(uint64_t a1)
{
  return sub_24166CEF8(a1, (unint64_t *)&qword_25713E890, &qword_25713EB60);
}

unint64_t sub_24166CEF8(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_24166EC64(0, a2, a3);
  v4 = (_QWORD *)sub_2416BB5E4();
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain();
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    v10 = v9;
    result = sub_24165AC90(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_24166D00C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_24166EAFC(0, &qword_25713F0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE30A0]);
  v2 = (_QWORD *)sub_2416BB5E4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    result = sub_24165ACF4();
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_24166D120(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_24166EA68();
  v2 = sub_2416BB5E4();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2415BEF64(v6, (uint64_t)&v13, (uint64_t (*)(_QWORD))sub_24166DC60);
    v7 = v13;
    result = sub_24165ACF4(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_24166EAEC(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id MIUIMedicalIDNavigationBarView.init(healthStore:medicalIDData:showDateUpdated:locale:)(void *a1, void *a2, char a3, uint64_t a4)
{
  id v8;
  void *v9;
  id v10;
  uint64_t v11;

  v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v9 = (void *)sub_2416B9BE0();
  v10 = objc_msgSend(v8, sel_initWithHealthStore_medicalIDData_showDateUpdated_locale_, a1, a2, a3 & 1, v9);

  v11 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a4, v11);
  return v10;
}

id MIUIMedicalIDNavigationBarView.init(healthStore:medicalIDData:showDateUpdated:locale:)(void *a1, void *a2, int a3, uint64_t a4)
{
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  id v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t inited;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  id v67;
  id v68;
  void *v69;
  void *v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v76;
  id v77;
  id v78;
  id v79;
  __int128 v80;
  id v81;
  int v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  objc_super v87;

  v5 = v4;
  v86 = a4;
  v82 = a3;
  if (a2)
  {
    v8 = v4;
    v84 = _HKMedicalIDData.displayName.getter();
    v10 = v9;
  }
  else
  {
    v11 = v4;
    v84 = 0;
    v10 = 0;
  }
  sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v13 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v76 - v13;
  v85 = a2;
  if (a2)
  {
    v15 = objc_msgSend(a2, sel_dateSaved);
    v16 = (char *)&v76 - v13;
    if (MEMORY[0x24BDAC7A8](v15))
    {
      sub_2416B9B2C();

      v17 = sub_2416B9B50();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 0, 1, v17);
    }
    else
    {
      v19 = sub_2416B9B50();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v16, 1, 1, v19);
    }
    sub_2415A852C((uint64_t)v16, (uint64_t)v14);
  }
  else
  {
    v18 = sub_2416B9B50();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))((char *)&v76 - v13, 1, 1, v18);
  }
  v20 = sub_2416B9C10();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v86, v20);
  type metadata accessor for MedicalIDNavigationBarViewModel();
  v24 = (_QWORD *)swift_allocObject();
  v25 = v84;
  v24[2] = a1;
  v24[3] = v25;
  v24[4] = v10;
  sub_2415A852C((uint64_t)v14, (uint64_t)v24 + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_dateSaved);
  v83 = v21;
  v84 = (id)v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))((uint64_t)v24 + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_locale, v23, v20);
  v26 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_viewModel;
  *(_QWORD *)&v5[OBJC_IVAR___MIUIMedicalIDNavigationBarView_viewModel] = v24;
  v27 = objc_allocWithZone(MEMORY[0x24BEBDB00]);
  v81 = a1;
  v28 = objc_msgSend(v27, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v5[OBJC_IVAR___MIUIMedicalIDNavigationBarView_containerView] = v28;
  objc_msgSend(v28, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v29 = objc_msgSend((id)objc_opt_self(), sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x24BEBE220]);
  v30 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
  sub_24159D6B0(0, &qword_25713F030, (uint64_t (*)(uint64_t))sub_24166DC60, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  v80 = xmmword_2416BCF30;
  *(_OWORD *)(inited + 16) = xmmword_2416BCF30;
  v32 = (void *)*MEMORY[0x24BEBB590];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BEBB590];
  sub_24159D6B0(0, &qword_25713F040, (uint64_t (*)(uint64_t))sub_24166DCC8, v30);
  v33 = swift_initStackObject();
  *(_OWORD *)(v33 + 16) = v80;
  v34 = (void *)*MEMORY[0x24BEBB620];
  *(_QWORD *)(v33 + 32) = *MEMORY[0x24BEBB620];
  *(_QWORD *)(v33 + 40) = *MEMORY[0x24BEBB610];
  v35 = v32;
  v36 = v34;
  v37 = sub_24166D00C(v33);
  sub_24166EAFC(0, &qword_25713F050, MEMORY[0x24BEE0460]);
  *(_QWORD *)(inited + 64) = v38;
  *(_QWORD *)(inited + 40) = v37;
  sub_24166D120(inited);
  type metadata accessor for AttributeName(0);
  sub_24159CE88(&qword_2571396F8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_2416BC968);
  v39 = (void *)sub_2416BB038();
  swift_bridgeObjectRelease();
  v40 = objc_msgSend(v29, sel_fontDescriptorByAddingAttributes_, v39);

  v77 = (id)objc_opt_self();
  *(_QWORD *)&v80 = v40;
  v41 = objc_msgSend(v77, sel_fontWithDescriptor_size_, v40, 0.0);
  v76 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_titleFont;
  *(_QWORD *)&v5[OBJC_IVAR___MIUIMedicalIDNavigationBarView_titleFont] = v41;
  v42 = objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_, v41);
  if (qword_2571395B8 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  v43 = v42;
  v44 = (void *)sub_2416BB0F8();
  swift_bridgeObjectRelease();
  v45 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v44, v43);

  v46 = objc_allocWithZone(MEMORY[0x24BEBD668]);
  v78 = v45;
  v47 = objc_msgSend(v46, sel_initWithImage_, v45);
  v48 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_imageView;
  *(_QWORD *)&v5[OBJC_IVAR___MIUIMedicalIDNavigationBarView_imageView] = v47;
  v79 = v43;
  objc_msgSend(v47, sel_setPreferredSymbolConfiguration_, v43);
  v49 = *(void **)&v5[v48];
  sub_2415C0788(0, &qword_25713F068);
  v50 = qword_2571395A0;
  v51 = v49;
  if (v50 != -1)
    swift_once();
  swift_retain();
  v52 = (void *)sub_2416BB410();
  objc_msgSend(v51, sel_setTintColor_, v52);

  objc_msgSend(*(id *)&v5[v48], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v54 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_textLabel;
  *(_QWORD *)&v5[OBJC_IVAR___MIUIMedicalIDNavigationBarView_textLabel] = v53;
  v55 = v53;
  swift_retain();
  sub_241680464();
  swift_release();
  v56 = (void *)sub_2416BB0F8();
  swift_bridgeObjectRelease();
  objc_msgSend(v55, sel_setText_, v56);

  objc_msgSend(*(id *)&v5[v54], sel_setFont_, *(_QWORD *)&v5[v76]);
  v57 = *(id *)&v5[v54];
  swift_retain();
  v58 = (void *)sub_2416BB410();
  objc_msgSend(v57, sel_setTextColor_, v58);

  objc_msgSend(*(id *)&v5[v54], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(*(id *)&v5[v54], sel_setAdjustsFontForContentSizeCategory_, 1);
  v5[OBJC_IVAR___MIUIMedicalIDNavigationBarView_showDateUpdated] = v82 & 1;
  v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v60 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_dateUpdatedLabel;
  *(_QWORD *)&v5[OBJC_IVAR___MIUIMedicalIDNavigationBarView_dateUpdatedLabel] = v59;
  v61 = *(_QWORD *)&v5[v26] + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_dateSaved;
  v62 = v59;
  swift_retain();
  sub_24166CA48(v61);
  v64 = v63;
  swift_release();
  if (v64)
  {
    v65 = (void *)sub_2416BB0F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    v65 = 0;
  }
  objc_msgSend(v62, sel_setText_, v65);

  v66 = *MEMORY[0x24BEBE1F0];
  v67 = *(id *)&v5[v60];
  v68 = objc_msgSend(v77, sel_preferredFontForTextStyle_, v66);
  objc_msgSend(v67, sel_setFont_, v68);

  v69 = *(void **)&v5[v60];
  v70 = (void *)objc_opt_self();
  v71 = v69;
  v72 = objc_msgSend(v70, sel_labelColor);
  objc_msgSend(v71, sel_setTextColor_, v72);

  objc_msgSend(*(id *)&v5[v60], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v73 = *(id *)&v5[v60];
  objc_msgSend(v73, sel_setAdjustsFontForContentSizeCategory_, 1);

  v87.receiver = v5;
  v87.super_class = (Class)MIUIMedicalIDNavigationBarView;
  v74 = objc_msgSendSuper2(&v87, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_24166DD34();

  (*(void (**)(uint64_t, id))(v83 + 8))(v86, v84);
  return v74;
}

void sub_24166DC60()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713F038)
  {
    type metadata accessor for AttributeName(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713F038);
  }
}

void sub_24166DCC8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713F048)
  {
    type metadata accessor for TraitKey(255);
    type metadata accessor for Weight(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713F048);
  }
}

void sub_24166DD34()
{
  char *v0;
  uint64_t v1;

  v1 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_containerView;
  objc_msgSend(v0, sel_addSubview_, *(_QWORD *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_containerView]);
  objc_msgSend(*(id *)&v0[v1], sel_addSubview_, *(_QWORD *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_imageView]);
  objc_msgSend(*(id *)&v0[v1], sel_addSubview_, *(_QWORD *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_textLabel]);
  if (v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_showDateUpdated] == 1)
  {
    objc_msgSend(v0, sel_addSubview_, *(_QWORD *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_dateUpdatedLabel]);
    sub_24166DF74();
  }
  else
  {
    sub_24166E640();
  }
}

void __swiftcall MIUIMedicalIDNavigationBarView.init(coder:)(MIUIMedicalIDNavigationBarView_optional *__return_ptr retstr, NSCoder coder)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithCoder_, coder.super.isa);

}

void MIUIMedicalIDNavigationBarView.init(coder:)()
{
  sub_2416BB5A8();
  __break(1u);
}

void sub_24166DF74()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  id v52;

  sub_2416684E4();
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2416C21E0;
  v2 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_imageView;
  v3 = objc_msgSend(*(id *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_imageView], sel_firstBaselineAnchor);
  v4 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_textLabel;
  v5 = objc_msgSend(*(id *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_textLabel], sel_firstBaselineAnchor);
  v6 = objc_msgSend(v3, sel_constraintEqualToAnchor_, v5);

  *(_QWORD *)(v1 + 32) = v6;
  v7 = objc_msgSend(*(id *)&v0[v2], sel_trailingAnchor);
  v8 = objc_msgSend(*(id *)&v0[v4], sel_leadingAnchor);
  if (qword_2571393B8 != -1)
    swift_once();
  v9 = objc_msgSend(v7, sel_constraintEqualToAnchor_constant_, v8, -*(double *)&qword_2571476E8);

  *(_QWORD *)(v1 + 40) = v9;
  v10 = objc_msgSend(*(id *)&v0[v2], sel_leadingAnchor);
  v11 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_containerView;
  v12 = objc_msgSend(*(id *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_containerView], (SEL)&stru_25119C130.offs + 6);
  v13 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v12);

  *(_QWORD *)(v1 + 48) = v13;
  v14 = objc_msgSend(*(id *)&v0[v4], sel_topAnchor);
  v15 = objc_msgSend(*(id *)&v0[v11], (SEL)&selRef_mutableCopy + 4);
  v16 = objc_msgSend(v14, sel_constraintGreaterThanOrEqualToAnchor_, v15);

  *(_QWORD *)(v1 + 56) = v16;
  v17 = objc_msgSend(*(id *)&v0[v11], sel_trailingAnchor);
  v18 = objc_msgSend(*(id *)&v0[v4], sel_trailingAnchor);
  v19 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v18);

  *(_QWORD *)(v1 + 64) = v19;
  v20 = objc_msgSend(*(id *)&v0[v11], sel_bottomAnchor);
  v21 = objc_msgSend(*(id *)&v0[v4], (SEL)&stru_25119C370.size + 1);
  v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(_QWORD *)(v1 + 72) = v22;
  v23 = objc_msgSend(*(id *)&v0[v11], (SEL)&stru_25119C130.offs + 6);
  v24 = objc_msgSend(v0, (SEL)&stru_25119C130.offs + 6);
  v25 = objc_msgSend(v23, sel_constraintGreaterThanOrEqualToAnchor_, v24);

  *(_QWORD *)(v1 + 80) = v25;
  v26 = objc_msgSend(v0, sel_trailingAnchor);
  v27 = objc_msgSend(*(id *)&v0[v11], sel_trailingAnchor);
  v28 = objc_msgSend(v26, sel_constraintGreaterThanOrEqualToAnchor_, v27);

  *(_QWORD *)(v1 + 88) = v28;
  v29 = objc_msgSend(*(id *)&v0[v11], sel_topAnchor);
  v30 = objc_msgSend(v0, sel_topAnchor);
  v31 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v30);

  *(_QWORD *)(v1 + 96) = v31;
  v32 = objc_msgSend(*(id *)&v0[v11], sel_centerXAnchor);
  v33 = objc_msgSend(v0, sel_centerXAnchor);
  v34 = objc_msgSend(v32, sel_constraintEqualToAnchor_, v33);

  *(_QWORD *)(v1 + 104) = v34;
  v35 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_dateUpdatedLabel;
  v36 = objc_msgSend(*(id *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_dateUpdatedLabel], sel_topAnchor);
  v37 = objc_msgSend(*(id *)&v0[v11], (SEL)&stru_25119C370.size + 1);
  if (qword_2571395B0 != -1)
    swift_once();
  v38 = objc_msgSend(v36, sel_constraintEqualToAnchor_constant_, v37, *(double *)&qword_25713F018);

  *(_QWORD *)(v1 + 112) = v38;
  v39 = objc_msgSend(*(id *)&v0[v35], sel_centerXAnchor);
  v40 = objc_msgSend(v0, sel_centerXAnchor);
  v41 = objc_msgSend(v39, sel_constraintEqualToAnchor_, v40);

  *(_QWORD *)(v1 + 120) = v41;
  v42 = objc_msgSend(v0, (SEL)&stru_25119C370.size + 1);
  v43 = objc_msgSend(*(id *)&v0[v35], (SEL)&stru_25119C370.size + 1);
  v44 = objc_msgSend(v42, sel_constraintEqualToAnchor_, v43);

  *(_QWORD *)(v1 + 128) = v44;
  v45 = objc_msgSend(*(id *)&v0[v35], sel_leadingAnchor);
  v46 = objc_msgSend(v0, sel_leadingAnchor);
  v47 = objc_msgSend(v45, sel_constraintEqualToAnchor_, v46);

  *(_QWORD *)(v1 + 136) = v47;
  v48 = objc_msgSend(v0, sel_trailingAnchor);
  v49 = objc_msgSend(*(id *)&v0[v35], sel_trailingAnchor);
  v50 = objc_msgSend(v48, sel_constraintEqualToAnchor_, v49);

  *(_QWORD *)(v1 + 144) = v50;
  sub_2416BB200();
  v51 = (void *)objc_opt_self();
  sub_2415C0788(0, &qword_25713F090);
  v52 = (id)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  objc_msgSend(v51, sel_activateConstraints_, v52);

}

void sub_24166E640()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;

  sub_2416684E4();
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2416C21F0;
  v2 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_imageView;
  v3 = objc_msgSend(*(id *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_imageView], sel_firstBaselineAnchor);
  v4 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_textLabel;
  v5 = objc_msgSend(*(id *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_textLabel], sel_firstBaselineAnchor);
  v6 = objc_msgSend(v3, sel_constraintEqualToAnchor_, v5);

  *(_QWORD *)(v1 + 32) = v6;
  v7 = objc_msgSend(*(id *)&v0[v2], sel_trailingAnchor);
  v8 = objc_msgSend(*(id *)&v0[v4], sel_leadingAnchor);
  if (qword_2571393B8 != -1)
    swift_once();
  v9 = objc_msgSend(v7, sel_constraintEqualToAnchor_constant_, v8, -*(double *)&qword_2571476E8);

  *(_QWORD *)(v1 + 40) = v9;
  v10 = objc_msgSend(*(id *)&v0[v2], sel_leadingAnchor);
  v11 = objc_msgSend(v0, sel_leadingAnchor);
  v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v11);

  *(_QWORD *)(v1 + 48) = v12;
  v13 = objc_msgSend(*(id *)&v0[v4], sel_trailingAnchor);
  v14 = objc_msgSend(v0, sel_trailingAnchor);
  v15 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v14);

  *(_QWORD *)(v1 + 56) = v15;
  v16 = objc_msgSend(*(id *)&v0[v4], sel_centerYAnchor);
  v17 = objc_msgSend(v0, sel_centerYAnchor);
  v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v17);

  *(_QWORD *)(v1 + 64) = v18;
  sub_2416BB200();
  v19 = (void *)objc_opt_self();
  sub_2415C0788(0, &qword_25713F090);
  v20 = (id)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  objc_msgSend(v19, sel_activateConstraints_, v20);

}

void __swiftcall MIUIMedicalIDNavigationBarView.init(frame:)(MIUIMedicalIDNavigationBarView *__return_ptr retstr, CGRect frame)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithFrame_, frame.origin.x, frame.origin.y, frame.size.width, frame.size.height);
}

void MIUIMedicalIDNavigationBarView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_24166EA44()
{
  qword_25713F018 = 0x4014000000000000;
}

uint64_t type metadata accessor for MIUIMedicalIDNavigationBarView(uint64_t a1)
{
  return sub_2415C0788(a1, &qword_25713F088);
}

void sub_24166EA68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F098)
  {
    type metadata accessor for AttributeName(255);
    sub_24159CE88(&qword_2571396F8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_2416BC968);
    v0 = sub_2416BB5F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F098);
  }
}

_OWORD *sub_24166EAEC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_24166EAFC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    type metadata accessor for TraitKey(255);
    v7 = v6;
    type metadata accessor for Weight(255);
    v9 = v8;
    v10 = sub_24159CE88(&qword_2571396E8, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_2416BC9AC);
    v11 = a3(a1, v7, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

void sub_24166EB94()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F0A8)
  {
    v0 = sub_2416BB5F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F0A8);
  }
}

void sub_24166EBFC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713F0B0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713F0B0);
  }
}

void sub_24166EC64(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_2415C0788(255, a3);
    v4 = sub_2416BB5F0();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void **sub_24166ECC8(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = type metadata accessor for MedicalIDMedicalInfoViewModel();
    v9 = *(int *)(v8 + 20);
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_2416B9C70();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v14 = v4;
    v13(v10, v11, v12);
    v15 = *(int *)(v8 + 24);
    v16 = (char *)v7 + v15;
    v17 = (char *)a2 + v15;
    v18 = sub_2416B9C10();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = *(int *)(a3 + 20);
    v20 = *(int *)(a3 + 24);
    v21 = (void **)((char *)v7 + v19);
    v22 = (void **)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = (void **)((char *)v7 + v20);
    v25 = (void **)((char *)a2 + v20);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_24166EDDC(id *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v3 = (char *)a1 + *(int *)(v2 + 20);
  v4 = sub_2416B9C70();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (char *)a1 + *(int *)(v2 + 24);
  v6 = sub_2416B9C10();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  return swift_bridgeObjectRelease();
}

void **sub_24166EE7C(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v6 = *a2;
  *a1 = *a2;
  v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v8 = *(int *)(v7 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2416B9C70();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v13 = v6;
  v12(v9, v10, v11);
  v14 = *(int *)(v7 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = *(int *)(a3 + 20);
  v19 = *(int *)(a3 + 24);
  v20 = (void **)((char *)a1 + v18);
  v21 = (void **)((char *)a2 + v18);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = (void **)((char *)a1 + v19);
  v24 = (void **)((char *)a2 + v19);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void **sub_24166EF68(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v10 = *(int *)(v9 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = *(int *)(v9 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = *(int *)(a3 + 20);
  v19 = (void **)((char *)a1 + v18);
  v20 = (void **)((char *)a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_retain();
  swift_release();
  v22 = *(int *)(a3 + 24);
  v23 = (void **)((char *)a1 + v22);
  v24 = (void **)((char *)a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_24166F068(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v7 = *(int *)(v6 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(v6 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  return a1;
}

void **sub_24166F120(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a1;
  *a1 = *a2;

  v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v8 = *(int *)(v7 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(v7 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_release();
  v16 = *(int *)(a3 + 24);
  v17 = (void **)((char *)a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_24166F200()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24166F20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_24166F288()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24166F294(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MedicalIDMedicalNotesCellView()
{
  uint64_t result;

  result = qword_25713F118;
  if (!qword_25713F118)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24166F348()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24166F3C8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24166F3D8@<X0>(uint64_t a1@<X8>)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (qword_257139488 != -1)
    swift_once();
  v4 = qword_257147720;
  v3 = *(_QWORD *)algn_257147728;
  v5 = *v1;
  swift_bridgeObjectRetain();
  v6 = objc_msgSend(v5, sel_medicalNotes);
  if (v6)
  {
    v7 = sub_2416BB128();
    v9 = v8;

    swift_bridgeObjectRelease();
    v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0)
      v10 = v7 & 0xFFFFFFFFFFFFLL;
    LOBYTE(v6) = v10 != 0;
  }
  v11 = type metadata accessor for MedicalIDMedicalNotesCellView();
  v12 = *(int *)(v11 + 20);
  v13 = (uint64_t *)((char *)v1 + *(int *)(v11 + 24));
  v15 = *v13;
  v14 = v13[1];
  v16 = (char *)v1 + v12;
  v17 = *(uint64_t *)((char *)v1 + v12);
  v18 = *((_QWORD *)v16 + 1);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = (_BYTE)v6;
  *(_BYTE *)(a1 + 17) = 2;
  *(_QWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v14;
  swift_bridgeObjectRetain();
  return swift_retain();
}

double sub_24166F4DC@<D0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  double result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v3 = *a1;
  v4 = objc_msgSend(*a1, sel_medicalNotes);
  if (!v4)
    goto LABEL_7;
  v5 = v4;
  v6 = sub_2416BB128();
  v8 = v7;

  swift_bridgeObjectRelease();
  v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  if (v9 && (v10 = objc_msgSend(v3, sel_medicalNotes)) != 0)
  {
    v11 = v10;
    sub_2416BB128();

    type metadata accessor for MedicalIDMedicalNotesCellView();
  }
  else
  {
LABEL_7:
    v12 = sub_2416BB0EC();
    MEMORY[0x24BDAC7A8](v12);
    sub_2416BB098();
    if (qword_257139300 != -1)
      swift_once();
    v13 = (void *)qword_25713A038;
    v14 = sub_2416B9C10();
    MEMORY[0x24BDAC7A8](v14);
    v15 = v13;
    sub_2416B9C04();
    sub_2416BB134();
    type metadata accessor for MedicalIDMedicalNotesCellView();
  }
  sub_241664904();
  sub_2415F1BC8();
  swift_bridgeObjectRetain();
  sub_2416BA57C();
  result = *(double *)&v17;
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v18;
  *(_OWORD *)(a2 + 32) = v19;
  *(_BYTE *)(a2 + 48) = v20;
  return result;
}

double sub_24166F73C@<D0>(_OWORD *a1@<X8>)
{
  id *v1;
  __int128 v3;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  _BYTE v10[25];
  _OWORD v11[3];
  uint64_t v12;
  _OWORD v13[2];

  sub_24166F3D8((uint64_t)v11);
  if (qword_257139500 != -1)
    swift_once();
  v5 = v11[0];
  v6 = v11[1];
  v7 = v11[2];
  *(_QWORD *)&v8 = v12;
  *((_QWORD *)&v8 + 1) = qword_25713D4D0;
  LOBYTE(v9[0]) = 1;
  sub_24166F4DC(v1, (uint64_t)v9 + 8);
  *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)&v10[9];
  v3 = v9[1];
  v13[0] = *(_OWORD *)v10;
  a1[4] = v9[0];
  a1[5] = v3;
  a1[6] = v13[0];
  result = *(double *)((char *)v13 + 9);
  *(_OWORD *)((char *)a1 + 105) = *(_OWORD *)((char *)v13 + 9);
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  return result;
}

uint64_t static LoadState.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t State;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  char v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v24[0] = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = v7;
  State = type metadata accessor for LoadState(0, v8, v7, v7);
  v10 = *(_QWORD *)(State - 8);
  MEMORY[0x24BDAC7A8](State);
  v12 = (char *)v24 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v25 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v14 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v16 = (char *)v24 - v15;
  v17 = (char *)v24 + *(int *)(v14 + 48) - v15;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v18((char *)v24 - v15, a1, State);
  v18(v17, v26, State);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v19(v16, 1, a3) == 1)
  {
    v20 = 1;
    if (v19(v17, 1, a3) == 1)
      goto LABEL_8;
  }
  else
  {
    v18(v12, (uint64_t)v16, State);
    if (v19(v17, 1, a3) != 1)
    {
      v21 = (char *)v24[0];
      (*(void (**)(_QWORD, char *, uint64_t))(v5 + 32))(v24[0], v17, a3);
      v20 = sub_2416BB08C();
      v22 = *(void (**)(char *, uint64_t))(v5 + 8);
      v22(v21, a3);
      v22(v12, a3);
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, a3);
  }
  v20 = 0;
  v10 = v25;
  State = TupleTypeMetadata2;
LABEL_8:
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, State);
  return v20 & 1;
}

uint64_t type metadata accessor for LoadState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LoadState);
}

uint64_t sub_24166FA38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static LoadState.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t sub_24166FA44()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_24166FA4C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_24166FAA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_24166FB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_24166FBD8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_24166FC70(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *sub_24166FD50(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_24166FDE8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t sub_24166FEC8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_241670008(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_2416701B0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_2416701B8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_2416701DC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t sub_2416701F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t sub_241670204(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _OWORD *v4;
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  id v10;
  _OWORD v11[8];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_2416BB548();
    v4 = (_OWORD *)(a1 + 32);
    for (i = v2 - 1; ; --i)
    {
      v6 = v4[5];
      v11[4] = v4[4];
      v11[5] = v6;
      v7 = v4[7];
      v11[6] = v4[6];
      v11[7] = v7;
      v8 = v4[1];
      v11[0] = *v4;
      v11[1] = v8;
      v9 = v4[3];
      v11[2] = v4[2];
      v11[3] = v9;
      sub_2415DA4E0((uint64_t)v11);
      v10 = sub_2415DA34C();
      sub_2415DA580((uint64_t)v11);
      sub_2416BB524();
      sub_2416BB554();
      sub_2416BB560();
      sub_2416BB530();
      if (!i)
        break;
      v4 += 8;
    }
    return v12;
  }
  return result;
}

uint64_t MedicalIDDataManager.__allocating_init(medicalIDDataPublisher:medicalIDEmergencyContactProvider:shouldSaveDataToHealthDetails:saveDataToHealthStore:saveDataToMedicalIDStore:deleteDataFromMedicalIDStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = __swift_mutable_project_boxed_opaque_existential_1(a2, v16);
  v19 = sub_241673888(a1, v18, a3, a4, a5, a6, a7, a8, a9, a10, v21, v16, v17);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v19;
}

uint64_t MedicalIDDataManager.medicalIDData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  swift_getKeyPath();
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  v3 = v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  return sub_2415A700C(v3, a1);
}

uint64_t LoadState<>.loadedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v2 = v1;
  sub_2415A6FC4(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415A700C(v2, (uint64_t)v6);
  v7 = type metadata accessor for MedicalIDData();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) != 1)
    return sub_2416739B0((uint64_t)v6, a1);
  sub_2415A6154((uint64_t)v6, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
  v20[1] = v20;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = sub_2416B9B50();
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v13 = v12((char *)v20 - v10, 1, 1, v11);
  v20[0] = v20;
  MEMORY[0x24BDAC7A8](v13);
  v12((char *)v20 - v10, 1, 1, v11);
  sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v20 - v15;
  v17 = sub_2416B9A18();
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  MEMORY[0x24BDAC7A8](v18);
  v12((char *)v20 - v10, 1, 1, v11);
  return MedicalIDData.init(name:emergencyContacts:medicalConditions:allergyInfo:medicalNotes:medicationInfo:bloodType:height:weight:pregnancyStartDate:pregnancyEstimatedDueDate:primaryLanguageCode:pregnancyStartDateTimeZoneID:isDisabled:shareDuringEmergency:pictureData:gregorianBirthday:isOrganDonor:dateSaved:)(0, 0, MEMORY[0x24BEE4AF8], 0, 0, 0, 0, 0, a1, 0, 0, 0, 0, (uint64_t)v20 - v10, (uint64_t)v20 - v10, 0, 0, 0, 0,
           0,
           0,
           0,
           0xF000000000000000,
           (uint64_t)v16,
           0,
           (uint64_t)v20 - v10);
}

uint64_t _s11MedicalIDUI0A13IDDataManagerC6updateyyyAA0aC0VzScMYccYaAC11UpdateErrorOYKF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[9] = v3;
  v4[10] = a3;
  v4[7] = a1;
  v4[8] = a2;
  sub_2415A6FC4(0);
  v4[11] = swift_task_alloc();
  type metadata accessor for MedicalIDData();
  v4[12] = swift_task_alloc();
  sub_2416BB290();
  v4[13] = sub_2416BB284();
  v4[14] = sub_2416BB254();
  v4[15] = v5;
  return swift_task_switch();
}

uint64_t sub_2416707D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[11];
  v1 = v0[12];
  v3 = v0[9];
  v4 = (void (*)(uint64_t))v0[7];
  swift_getKeyPath();
  v0[5] = v3;
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  v5 = v3 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_2415A700C(v5, v2);
  LoadState<>.loadedValue.getter(v1);
  sub_2415A6154(v2, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  v4(v1);
  v6 = (_QWORD *)swift_task_alloc();
  v0[16] = v6;
  *v6 = v0;
  v6[1] = sub_241670910;
  return sub_24167239C(v0[12], (uint64_t)(v0 + 6));
}

uint64_t sub_241670910()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_241670970()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release();
  sub_2415A6154(v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2416709C8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD **)(v0 + 80);
  swift_release();
  sub_2415A6154(v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  *v2 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MedicalIDDataManager.delete()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[7] = v0;
  v1[8] = *v0;
  sub_2416BB290();
  v1[9] = sub_2416BB284();
  v1[10] = sub_2416BB254();
  v1[11] = v2;
  return swift_task_switch();
}

uint64_t sub_241670AA4()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(void);
  uint64_t v11;

  if (qword_2571395C0 != -1)
    swift_once();
  v1 = sub_2416B9D6C();
  v0[12] = __swift_project_value_buffer(v1, (uint64_t)qword_257147810);
  v2 = sub_2416B9D54();
  v3 = sub_2416BB368();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    v6 = sub_2416BB704();
    v0[6] = sub_2415A8600(v6, v7, &v11);
    sub_2416BB44C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_241599000, v2, v3, "[%s]: Removing medical id data", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242699570](v5, -1, -1);
    MEMORY[0x242699570](v4, -1, -1);
  }

  v10 = (uint64_t (*)(void))(**(int **)(v0[7]
                                     + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_deleteDataFromMedicalIDStore)
                          + *(_QWORD *)(v0[7]
                                      + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_deleteDataFromMedicalIDStore));
  v8 = (_QWORD *)swift_task_alloc();
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_241670C68;
  return v10();
}

uint64_t sub_241670C68(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_BYTE *)(v4 + 120) = a1 & 1;
  return swift_task_switch();
}

uint64_t sub_241670CE0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  id v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v1 = *(unsigned __int8 *)(v0 + 120);
  swift_release();
  if ((_DWORD)v1 == 1)
  {
    v2 = sub_2416B9D54();
    v3 = sub_2416BB368();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = swift_slowAlloc();
      v19 = v5;
      *(_DWORD *)v4 = 136315138;
      v6 = sub_2416BB704();
      *(_QWORD *)(v0 + 40) = sub_2415A8600(v6, v7, &v19);
      sub_2416BB44C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_241599000, v2, v3, "[%s]: Removed medical id data", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v5, -1, -1);
      MEMORY[0x242699570](v4, -1, -1);
    }
    goto LABEL_7;
  }
  v8 = 0;
  v9 = 0;
  v2 = sub_2416B9D54();
  v10 = sub_2416BB374();
  if (!os_log_type_enabled(v2, v10))
  {

LABEL_7:
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
  }
  v11 = swift_slowAlloc();
  v12 = swift_slowAlloc();
  v19 = v12;
  *(_DWORD *)v11 = 136315394;
  v13 = sub_2416BB704();
  *(_QWORD *)(v0 + 16) = sub_2415A8600(v13, v14, &v19);
  sub_2416BB44C();
  swift_bridgeObjectRelease();
  *(_WORD *)(v11 + 12) = 2080;
  *(_QWORD *)(v0 + 24) = 0;
  v15 = 0;
  sub_2415A9F94(0, &qword_25713F208, (void (*)(uint64_t))sub_24159F0B8);
  v16 = sub_2416BB140();
  *(_QWORD *)(v0 + 32) = sub_2415A8600(v16, v17, &v19);
  sub_2416BB44C();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_241599000, v2, v10, "[%s]: Failed to remove medical id data: %s", (uint8_t *)v11, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x242699570](v12, -1, -1);
  MEMORY[0x242699570](v11, -1, -1);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_241670FF0()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v1 = *(void **)(v0 + 112);
  swift_release();
  v2 = v1;
  v3 = v1;
  v4 = sub_2416B9D54();
  v5 = sub_2416BB374();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v14 = v7;
    *(_DWORD *)v6 = 136315394;
    v8 = sub_2416BB704();
    *(_QWORD *)(v0 + 16) = sub_2415A8600(v8, v9, &v14);
    sub_2416BB44C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    *(_QWORD *)(v0 + 24) = v1;
    v10 = v1;
    sub_2415A9F94(0, &qword_25713F208, (void (*)(uint64_t))sub_24159F0B8);
    v11 = sub_2416BB140();
    *(_QWORD *)(v0 + 32) = sub_2415A8600(v11, v12, &v14);
    sub_2416BB44C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_241599000, v4, v5, "[%s]: Failed to remove medical id data: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242699570](v7, -1, -1);
    MEMORY[0x242699570](v6, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

id MedicalIDDataManager.hkMedicalIDData.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 16);
}

void sub_241671228(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v2;
  v5 = v2;

  v6 = *(id *)(v3 + 16);
  sub_24167129C(v6);

}

uint64_t sub_24167129C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t KeyPath;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;

  sub_2415A9F94(0, &qword_25713A560, (void (*)(uint64_t))MEMORY[0x24BEE6990]);
  MEMORY[0x24BDAC7A8](v3);
  v96 = (char *)&v72 - v4;
  sub_2415A6FC4(0);
  MEMORY[0x24BDAC7A8](v5);
  v95 = (uint64_t)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = v1;
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_medicalIDEmergencyContactProvider + 24);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_medicalIDEmergencyContactProvider + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_medicalIDEmergencyContactProvider), v7);
  v94 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 8))(a1, v7, v8);
  v9 = objc_msgSend(a1, sel_name);
  if (v9)
  {
    v10 = v9;
    v11 = sub_2416BB128();
    v92 = v12;
    v93 = v11;

  }
  else
  {
    v92 = 0;
    v93 = 0;
  }
  v13 = objc_msgSend(a1, sel_medicalConditions);
  if (v13)
  {
    v14 = v13;
    v15 = sub_2416BB128();
    v90 = v16;
    v91 = v15;

  }
  else
  {
    v90 = 0;
    v91 = 0;
  }
  v17 = objc_msgSend(a1, sel_allergyInfo);
  if (v17)
  {
    v18 = v17;
    v19 = sub_2416BB128();
    v88 = v20;
    v89 = v19;

  }
  else
  {
    v88 = 0;
    v89 = 0;
  }
  v21 = objc_msgSend(a1, sel_medicalNotes);
  if (v21)
  {
    v22 = v21;
    v23 = sub_2416BB128();
    v86 = v24;
    v87 = v23;

  }
  else
  {
    v86 = 0;
    v87 = 0;
  }
  v25 = objc_msgSend(a1, sel_medicationInfo);
  if (v25)
  {
    v26 = v25;
    v27 = sub_2416BB128();
    v84 = v28;
    v85 = v27;

  }
  else
  {
    v84 = 0;
    v85 = 0;
  }
  v83 = objc_msgSend(a1, sel_bloodType);
  v82 = objc_msgSend(a1, sel_height);
  v81 = objc_msgSend(a1, sel_weight);
  v29 = objc_msgSend(a1, sel_pregnancyStartDate);
  sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
  v80 = &v72;
  v31 = *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64);
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v72 - v32;
  if (v29)
  {
    sub_2416B9B2C();

    v34 = sub_2416B9B50();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 0, 1, v34);
  }
  else
  {
    v35 = sub_2416B9B50();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v33, 1, 1, v35);
  }
  v36 = objc_msgSend(a1, sel_pregnancyEstimatedDueDate);
  v79 = &v72;
  if (MEMORY[0x24BDAC7A8](v36))
  {
    sub_2416B9B2C();

    v37 = sub_2416B9B50();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))((char *)&v72 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v37);
  }
  else
  {
    v38 = sub_2416B9B50();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))((char *)&v72 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v38);
  }
  v39 = objc_msgSend(a1, sel_primaryLanguageCode);
  if (v39)
  {
    v40 = v39;
    v78 = sub_2416BB128();
    v77 = v41;

  }
  else
  {
    v78 = 0;
    v77 = 0;
  }
  v42 = objc_msgSend(a1, sel_pregnancyStartDateTimeZoneID);
  if (v42)
  {
    v43 = v42;
    v76 = sub_2416BB128();
    v75 = v44;

  }
  else
  {
    v76 = 0;
    v75 = 0;
  }
  v74 = objc_msgSend(a1, sel_isDisabled);
  v73 = objc_msgSend(a1, sel_shareDuringEmergency);
  v45 = objc_msgSend(a1, sel_pictureData);
  if (v45)
  {
    v46 = v45;
    v72 = sub_2416B9ACC();
    v48 = v47;

  }
  else
  {
    v72 = 0;
    v48 = 0xF000000000000000;
  }
  v49 = objc_msgSend(a1, sel_gregorianBirthday, v72);
  sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
  MEMORY[0x24BDAC7A8](v50);
  v52 = (char *)&v72 - v51;
  if (v49)
  {
    sub_2416B99A0();

    v53 = sub_2416B9A18();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v52, 0, 1, v53);
  }
  else
  {
    v54 = sub_2416B9A18();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v52, 1, 1, v54);
  }
  v55 = objc_msgSend(a1, sel_isOrganDonor);
  v56 = objc_msgSend(a1, sel_dateSaved);
  if (MEMORY[0x24BDAC7A8](v56))
  {
    sub_2416B9B2C();

    v57 = sub_2416B9B50();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))((char *)&v72 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v57);
  }
  else
  {
    v58 = sub_2416B9B50();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))((char *)&v72 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v58);
  }
  v71 = (uint64_t)v33;
  *((_QWORD *)&v70 + 1) = v83;
  *(_QWORD *)&v70 = v84;
  *((_QWORD *)&v69 + 1) = v85;
  *(_QWORD *)&v69 = v86;
  v59 = v95;
  MedicalIDData.init(name:emergencyContacts:medicalConditions:allergyInfo:medicalNotes:medicationInfo:bloodType:height:weight:pregnancyStartDate:pregnancyEstimatedDueDate:primaryLanguageCode:pregnancyStartDateTimeZoneID:isDisabled:shareDuringEmergency:pictureData:gregorianBirthday:isOrganDonor:dateSaved:)(v93, v92, v94, v91, v90, v89, v88, v87, v95, v69, v70, (uint64_t)v82, (uint64_t)v81, v71, (uint64_t)&v72 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), v78, v77, v76, v75,
    v74,
    v73,
    v72,
    v48,
    (uint64_t)v52,
    (uint64_t)v55,
    (uint64_t)&v72 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = type metadata accessor for MedicalIDData();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v59, 0, 1, v60);
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  v62 = v97;
  v98 = v97;
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CA0();
  swift_release();
  sub_2415A6154(v59, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  v63 = sub_2416BB2A8();
  v64 = (uint64_t)v96;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v96, 1, 1, v63);
  sub_2416BB290();
  swift_retain();
  v65 = sub_2416BB284();
  v66 = (_QWORD *)swift_allocObject();
  v67 = MEMORY[0x24BEE6930];
  v66[2] = v65;
  v66[3] = v67;
  v66[4] = v62;
  sub_24160B7C8(v64, (uint64_t)&unk_25713F330, (uint64_t)v66);
  return swift_release();
}

uint64_t sub_241671AD4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_getKeyPath();
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  v4 = v3 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  return sub_2415A700C(v4, a2);
}

uint64_t sub_241671B84(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  sub_2415A6FC4(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2415A700C(a1, (uint64_t)v6);
  v7 = *a2;
  swift_getKeyPath();
  v10 = v7;
  v11 = v6;
  v12 = v7;
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CA0();
  swift_release();
  return sub_2415A6154((uint64_t)v6, (uint64_t (*)(_QWORD))sub_2415A6FC4);
}

uint64_t sub_241671C88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_241673D48(a2, v3);
  return swift_endAccess();
}

uint64_t sub_241671CF0()
{
  swift_getKeyPath();
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_241671D98@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = *a1;
  swift_getKeyPath();
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  v4 = (_QWORD *)(v3 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__subscriptions);
  swift_beginAccess();
  *a2 = *v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_241671E48()
{
  swift_getKeyPath();
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  swift_bridgeObjectRetain();
  sub_2416B9CA0();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_241671F00(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__subscriptions);
  swift_beginAccess();
  *v3 = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t MedicalIDDataManager.init(medicalIDDataPublisher:medicalIDEmergencyContactProvider:shouldSaveDataToHealthDetails:saveDataToHealthStore:saveDataToMedicalIDStore:deleteDataFromMedicalIDStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23[2];
  uint64_t v24;
  uint64_t v25;

  v24 = a5;
  v25 = a7;
  v23[0] = a3;
  v16 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v17 = __swift_mutable_project_boxed_opaque_existential_1(a2, v16);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  v21 = sub_241673704(a1, (uint64_t)v19, v23[0], a4, v24, a6, v25, a8, a9, a10, v23[1], v16, v15);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v21;
}

uint64_t sub_241672090(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  sub_241673D8C();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1;
  sub_241673E04();
  sub_24159CE88(&qword_25713F348, (uint64_t (*)(uint64_t))sub_241673E04, MEMORY[0x24BDB9AF8]);
  v11 = sub_2416B9E5C();
  sub_24159CE88((unint64_t *)&qword_257139940, (uint64_t (*)(uint64_t))sub_241673E68, (uint64_t)&protocol conformance descriptor for LoadState<A>);
  sub_2416B9E80();
  swift_release();
  sub_24159CE88(qword_25713F350, (uint64_t (*)(uint64_t))sub_241673D8C, MEMORY[0x24BDB9658]);
  swift_retain();
  sub_2416B9E98();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_getKeyPath();
  v11 = v2;
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  v11 = v2;
  swift_getKeyPath();
  sub_2416B9CC4();
  swift_release();
  swift_beginAccess();
  sub_2416B9DC0();
  swift_endAccess();
  swift_release();
  v11 = v2;
  swift_getKeyPath();
  sub_2416B9CB8();
  return swift_release();
}

void sub_2416722E4(void **a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;

  v3 = *a1;
  if (*a1)
  {
    if (v3 == (void *)1)
      return;
    v4 = *a1;
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD4218]), sel_init);
  }
  swift_beginAccess();
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v4;
  sub_24159EF0C(v3);
  sub_24159EF0C(v3);
  v6 = v4;

  v7 = *(id *)(a2 + 16);
  sub_24167129C(v7);

  sub_241673F08(v3);
}

uint64_t sub_24167239C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v3[15] = v2;
  v3[16] = a2;
  v3[14] = a1;
  v3[17] = *v2;
  sub_2416BB290();
  v3[18] = sub_2416BB284();
  v3[19] = sub_2416BB254();
  v3[20] = v4;
  return swift_task_switch();
}

uint64_t sub_241672448()
{
  uint64_t v0;
  uint64_t *v1;
  id *v2;
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  int *v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  id v53;
  char v54;
  uint64_t v56;
  int **v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  id *v61;

  v1 = *(uint64_t **)(v0 + 112);
  v2 = (id *)(*(_QWORD *)(v0 + 120) + 16);
  swift_beginAccess();
  v3 = *v2;
  v4 = (void *)_HKMedicalIDData.typedCopy.getter();
  *(_QWORD *)(v0 + 168) = v4;

  v5 = v1[1];
  if (!v5)
    goto LABEL_6;
  v6 = *v1;
  v7 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v7 = v6 & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    swift_bridgeObjectRetain();
    v8 = (void *)sub_2416BB0F8();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_6:
    v8 = 0;
  }
  v9 = *(_QWORD *)(v0 + 112);
  objc_msgSend(v4, sel_setName_, v8);

  v10 = swift_bridgeObjectRetain();
  sub_241670204(v10);
  swift_bridgeObjectRelease();
  sub_2415C0788(0, &qword_25713D0C8);
  v11 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_setEmergencyContacts_, v11);

  if (*(_QWORD *)(v9 + 32))
    v12 = (void *)sub_2416BB0F8();
  else
    v12 = 0;
  v13 = *(_QWORD *)(v0 + 112);
  objc_msgSend(v4, sel_setMedicalConditions_, v12);

  v14 = *(_QWORD *)(v13 + 48);
  if (!v14)
    goto LABEL_15;
  v15 = *(_QWORD *)(v13 + 40);
  v16 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v16 = v15 & 0xFFFFFFFFFFFFLL;
  if (v16)
  {
    swift_bridgeObjectRetain();
    v17 = (void *)sub_2416BB0F8();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_15:
    v17 = 0;
  }
  v18 = *(_QWORD *)(v0 + 112);
  objc_msgSend(v4, sel_setAllergyInfo_, v17);

  v19 = *(_QWORD *)(v18 + 64);
  if (!v19)
    goto LABEL_21;
  v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0)
    v20 = *(_QWORD *)(v18 + 56) & 0xFFFFFFFFFFFFLL;
  if (v20)
  {
    swift_bridgeObjectRetain();
    v21 = (void *)sub_2416BB0F8();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_21:
    v21 = 0;
  }
  v22 = *(_QWORD *)(v0 + 112);
  objc_msgSend(v4, sel_setMedicalNotes_, v21);

  v23 = *(_QWORD *)(v22 + 80);
  if (!v23)
    goto LABEL_27;
  v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0)
    v24 = *(_QWORD *)(v22 + 72) & 0xFFFFFFFFFFFFLL;
  if (v24)
  {
    swift_bridgeObjectRetain();
    v25 = (void *)sub_2416BB0F8();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_27:
    v25 = 0;
  }
  v26 = *(_QWORD **)(v0 + 112);
  objc_msgSend(v4, sel_setMedicationInfo_, v25, v2);

  objc_msgSend(v4, sel_setBloodType_, v26[11]);
  objc_msgSend(v4, sel_setHeight_, v26[12]);
  objc_msgSend(v4, sel_setWeight_, v26[13]);
  v27 = (int *)type metadata accessor for MedicalIDData();
  v28 = (uint64_t)v26 + v27[13];
  v29 = (void (*)(uint64_t))MEMORY[0x24BDCE908];
  sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
  v30 = swift_task_alloc();
  sub_2415F2D90(v28, v30, &qword_257139BD0, v29);
  v31 = sub_2416B9B50();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  v34 = 0;
  if (v33(v30, 1, v31) != 1)
  {
    v34 = (void *)sub_2416B9B08();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
  }
  v35 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc();
  objc_msgSend(v4, sel_setPregnancyStartDate_, v34);

  v36 = v35 + v27[14];
  v37 = swift_task_alloc();
  sub_2415F2D90(v36, v37, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
  if (v33(v37, 1, v31) == 1)
  {
    v38 = 0;
  }
  else
  {
    v38 = (void *)sub_2416B9B08();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v37, v31);
  }
  v39 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc();
  objc_msgSend(v4, sel_setPregnancyEstimatedDueDate_, v38);

  if (*(_QWORD *)(v39 + v27[15] + 8))
    v40 = (void *)sub_2416BB0F8();
  else
    v40 = 0;
  v41 = *(_QWORD *)(v0 + 112);
  objc_msgSend(v4, sel_setPrimaryLanguageCode_, v40);

  if (*(_QWORD *)(v41 + v27[16] + 8))
    v42 = (void *)sub_2416BB0F8();
  else
    v42 = 0;
  v43 = *(_QWORD *)(v0 + 112);
  objc_msgSend(v4, sel_setPregnancyStartDateTimeZoneID_, v42);

  objc_msgSend(v4, sel_setIsDisabled_, *(unsigned __int8 *)(v43 + v27[17]));
  objc_msgSend(v4, sel_setShareDuringEmergency_, *(unsigned __int8 *)(v43 + v27[18]));
  if (*(_QWORD *)(v43 + v27[19] + 8) >> 60 == 15)
    v44 = 0;
  else
    v44 = (void *)sub_2416B9AC0();
  v45 = *(_QWORD *)(v0 + 112);
  objc_msgSend(v4, sel_setPictureData_, v44);

  v46 = v45 + v27[20];
  v47 = (void (*)(uint64_t))MEMORY[0x24BDCBDE8];
  sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
  v48 = swift_task_alloc();
  sub_2415F2D90(v46, v48, &qword_257139BD8, v47);
  v49 = sub_2416B9A18();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49) != 1)
  {
    v51 = (void *)sub_2416B9988();
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
  }
  v52 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc();
  objc_msgSend(v4, sel_setGregorianBirthday_, v51);

  objc_msgSend(v4, sel_setIsOrganDonor_, *(_QWORD *)(v52 + v27[21]));
  sub_2415C0788(0, (unint64_t *)&qword_25713ADA0);
  v53 = *v61;
  v54 = sub_2416BB428();

  if ((v54 & 1) != 0)
  {

    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v56 = *(_QWORD *)(v0 + 120);
    *(_QWORD *)(v0 + 64) = 0;
    v57 = (int **)(v56 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_saveDataToMedicalIDStore);
    v58 = (uint64_t)*v57;
    v59 = **v57;
    v60 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v60;
    *v60 = v0;
    v60[1] = sub_241672B6C;
    return ((uint64_t (*)(void *))(v59 + v58))(v4);
  }
}

uint64_t sub_241672B6C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 184) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_BYTE *)(v4 + 192) = a1 & 1;
  return swift_task_switch();
}

uint64_t sub_241672C28()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t (*v25)(void);
  uint64_t v27;
  uint64_t v28[2];

  v28[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(unsigned __int8 *)(v0 + 192);
  v2 = swift_release();
  if (v1 == 1)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 120)
                                             + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_shouldSaveDataToHealthDetails))(v2) & 1) != 0)
      (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 120)
                                     + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_saveDataToHealthStore))(*(_QWORD *)(v0 + 168));
    v3 = *(void **)(v0 + 168);
    v4 = *(_QWORD *)(v0 + 120);
    v5 = *(void **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v3;
    v6 = v3;

    v7 = *(id *)(v4 + 16);
    sub_24167129C(v7);

    goto LABEL_16;
  }
  v8 = (id *)(v0 + 64);
  if (qword_2571395C0 != -1)
    swift_once();
  v9 = sub_2416B9D6C();
  __swift_project_value_buffer(v9, (uint64_t)qword_257147810);
  v10 = *v8;
  v11 = *v8;
  v12 = v10;
  v13 = sub_2416B9D54();
  v14 = sub_2416BB374();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v16 = (_QWORD *)swift_slowAlloc();
    v27 = swift_slowAlloc();
    v28[0] = v27;
    *(_DWORD *)v15 = 136315394;
    v17 = sub_2416BB704();
    *(_QWORD *)(v0 + 88) = sub_2415A8600(v17, v18, v28);
    sub_2416BB44C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2112;
    if (v10)
    {
      v19 = v10;
      v20 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 104) = v20;
      sub_2416BB44C();
    }
    else
    {
      *(_QWORD *)(v0 + 96) = 0;
      sub_2416BB44C();
      v20 = 0;
    }
    *v16 = v20;

    _os_log_impl(&dword_241599000, v13, v14, "[%s]: failed to save medical id data due to: %@", (uint8_t *)v15, 0x16u);
    sub_2415BE9F4(0, (unint64_t *)&qword_25713BEC0, (unint64_t *)&qword_25713ADA0);
    swift_arrayDestroy();
    MEMORY[0x242699570](v16, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x242699570](v27, -1, -1);
    MEMORY[0x242699570](v15, -1, -1);
  }
  else
  {

  }
  swift_beginAccess();
  v21 = *v8;
  if (!*v8)
  {

LABEL_16:
    v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  v22 = *(void **)(v0 + 168);
  **(_QWORD **)(v0 + 128) = v21;
  *(_QWORD *)(v0 + 80) = v21;
  v23 = v21;
  v24 = v21;
  sub_2415CF224();
  swift_willThrowTypedImpl();

  v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t sub_241672FFC()
{
  uint64_t v0;
  uint64_t v1;
  id *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v20;
  uint64_t v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 184);
  swift_release();

  *(_QWORD *)(v0 + 64) = v1;
  v2 = (id *)(v0 + 64);
  if (qword_2571395C0 != -1)
    swift_once();
  v3 = sub_2416B9D6C();
  __swift_project_value_buffer(v3, (uint64_t)qword_257147810);
  v4 = *v2;
  v5 = *v2;
  v6 = v4;
  v7 = sub_2416B9D54();
  v8 = sub_2416BB374();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v21[0] = v20;
    *(_DWORD *)v9 = 136315394;
    v11 = sub_2416BB704();
    *(_QWORD *)(v0 + 88) = sub_2415A8600(v11, v12, v21);
    sub_2416BB44C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2112;
    if (v4)
    {
      v13 = v4;
      v14 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 104) = v14;
      sub_2416BB44C();
    }
    else
    {
      *(_QWORD *)(v0 + 96) = 0;
      sub_2416BB44C();
      v14 = 0;
    }
    *v10 = v14;

    _os_log_impl(&dword_241599000, v7, v8, "[%s]: failed to save medical id data due to: %@", (uint8_t *)v9, 0x16u);
    sub_2415BE9F4(0, (unint64_t *)&qword_25713BEC0, (unint64_t *)&qword_25713ADA0);
    swift_arrayDestroy();
    MEMORY[0x242699570](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x242699570](v20, -1, -1);
    MEMORY[0x242699570](v9, -1, -1);
  }
  else
  {

  }
  swift_beginAccess();
  v15 = *v2;
  if (*v2)
  {
    v16 = *(void **)(v0 + 168);
    **(_QWORD **)(v0 + 128) = v15;
    *(_QWORD *)(v0 + 80) = v15;
    v17 = v15;
    v18 = v15;
    sub_2415CF224();
    swift_willThrowTypedImpl();

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MedicalIDDataManager.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_2415A6154(v0 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_medicalIDEmergencyContactProvider);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MedicalIDDataManager.__deallocating_deinit()
{
  MedicalIDDataManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_241673454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[7] = a1;
  v4[8] = a4;
  type metadata accessor for MedicalIDData();
  v4[9] = swift_task_alloc();
  sub_2415A6FC4(0);
  v4[10] = swift_task_alloc();
  sub_2416BB290();
  v4[11] = sub_2416BB284();
  v4[12] = sub_2416BB254();
  v4[13] = v5;
  return swift_task_switch();
}

uint64_t sub_241673500()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[8];
  swift_getKeyPath();
  v0[5] = v3;
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  v4 = v3 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_2415A700C(v4, v1);
  LoadState<>.loadedValue.getter(v2);
  sub_2415A6154(v1, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  v5 = (_QWORD *)swift_task_alloc();
  v0[14] = v5;
  *v5 = v0;
  v5[1] = sub_241673618;
  return sub_24167239C(v0[9], (uint64_t)(v0 + 6));
}

uint64_t sub_241673618()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc();
  v3 = *(_QWORD *)(v2 + 72);
  if (v0)
  {

    sub_2415A6154(v3, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  }
  else
  {
    sub_2415A6154(*(_QWORD *)(v2 + 72), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  }
  return swift_task_switch();
}

uint64_t sub_2416736B0()
{
  uint64_t v0;

  swift_release();
  **(_BYTE **)(v0 + 56) = *(_QWORD *)(v0 + 120) != 0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_241673704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v29[5];

  v29[3] = a12;
  v29[4] = a13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a12 - 8) + 32))(boxed_opaque_existential_1, a2, a12);
  *(_QWORD *)(a11 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD4218]), sel_init);
  *(_QWORD *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__subscriptions) = MEMORY[0x24BEE4B08];
  sub_2416B9CD0();
  sub_2415A7348((uint64_t)v29, a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_medicalIDEmergencyContactProvider);
  v20 = (_QWORD *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_shouldSaveDataToHealthDetails);
  *v20 = a3;
  v20[1] = a4;
  v21 = (_QWORD *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_saveDataToHealthStore);
  *v21 = a5;
  v21[1] = a6;
  v22 = (_QWORD *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_saveDataToMedicalIDStore);
  *v22 = a7;
  v22[1] = a8;
  v23 = (_QWORD *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_deleteDataFromMedicalIDStore);
  *v23 = a9;
  v23[1] = a10;
  v24 = a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  v25 = type metadata accessor for MedicalIDData();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_241672090(a1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return a11;
}

uint64_t sub_241673888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a7;
  v26 = a8;
  v23 = a5;
  v24 = a6;
  v22 = a4;
  v16 = *(_QWORD *)(a12 - 8);
  MEMORY[0x24BDAC7A8](a11);
  v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, a12);
  return sub_241673704(a1, (uint64_t)v18, a3, v22, v23, v24, v25, v26, a9, a10, v19, a12, a13);
}

uint64_t type metadata accessor for MedicalIDDataManager()
{
  uint64_t result;

  result = qword_25713F260;
  if (!qword_25713F260)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2416739B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MedicalIDData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_2416739F4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(void **)(v3 + 16);
  *a2 = v4;
  return v4;
}

uint64_t sub_241673A3C()
{
  return type metadata accessor for MedicalIDDataManager();
}

void sub_241673A44()
{
  unint64_t v0;
  unint64_t v1;

  sub_2415A6FC4(319);
  if (v0 <= 0x3F)
  {
    sub_2416B9CDC();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for MedicalIDDataManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicalIDDataManager.__allocating_init(medicalIDDataPublisher:medicalIDEmergencyContactProvider:shouldSaveDataToHealthDetails:saveDataToHealthStore:saveDataToMedicalIDStore:deleteDataFromMedicalIDStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

_QWORD *initializeBufferWithCopyOfBuffer for MedicalIDDataManager.UpdateError(_QWORD *a1, id *a2)
{
  id v3;
  id v4;

  v3 = *a2;
  v4 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for MedicalIDDataManager.UpdateError(id *a1)
{

}

void **assignWithCopy for MedicalIDDataManager.UpdateError(void **a1, id *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  v5 = *a2;
  *a1 = v4;

  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **assignWithTake for MedicalIDDataManager.UpdateError(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDDataManager.UpdateError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDDataManager.UpdateError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDDataManager.UpdateError()
{
  return &type metadata for MedicalIDDataManager.UpdateError;
}

uint64_t sub_241673C98()
{
  uint64_t v0;

  return sub_241671C88(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_241673CB0()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_241673CDC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_2415C2834;
  return sub_241673454(a1, v4, v5, v6);
}

uint64_t sub_241673D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415A6FC4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_241673D8C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F338)
  {
    sub_241673E04();
    sub_24159CE88(&qword_25713F348, (uint64_t (*)(uint64_t))sub_241673E04, MEMORY[0x24BDB9AF8]);
    v0 = sub_2416B9D84();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F338);
  }
}

void sub_241673E04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F340)
  {
    sub_241673E68(255);
    v0 = sub_2416B9DB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F340);
  }
}

void sub_241673E68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t State;
  uint64_t v7;

  if (!qword_257139910)
  {
    sub_2415BE9F4(255, &qword_257139918, (unint64_t *)&qword_257139920);
    v3 = v2;
    v4 = sub_24159DAD4();
    State = type metadata accessor for LoadState(a1, v3, v4, v5);
    if (!v7)
      atomic_store(State, (unint64_t *)&qword_257139910);
  }
}

void sub_241673EE0(void **a1)
{
  uint64_t v1;

  sub_2416722E4(a1, v1);
}

uint64_t sub_241673EF0()
{
  uint64_t v0;

  return sub_241671F00(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_241673F08(id a1)
{
  if (a1 != (id)1)

}

uint64_t sub_241673F1C()
{
  return sub_241673C98();
}

uint64_t sub_241673F30()
{
  return swift_allocateGenericValueMetadata();
}

void sub_241673F38()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_2416BAE58();
  if (v0 <= 0x3F)
  {
    sub_2416BB434();
    if (v1 <= 0x3F)
    {
      sub_24159D6B0(319, &qword_25713F3D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

_QWORD *sub_241674044(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  unint64_t v32;
  void *v33;
  unint64_t v34;
  unsigned int (*v35)(unint64_t, uint64_t, uint64_t);
  const void *v36;
  size_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  unint64_t v69;
  uint64_t v70;
  size_t __n;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = v9 + 1;
  v11 = sub_2416B9B80();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = v13 & 0xF8;
  v15 = v14 | 7;
  v16 = (v13 | v7) & 0x100000;
  v17 = (v14 | 7 | v7) == 7 && v16 == 0;
  if (v17
    && (v18 = v7 | 7,
        v19 = ((v7 + 16) & ~(unint64_t)v7) + v9 + v7,
        v20 = *(_QWORD *)(v12 + 64) + 7,
        (((v20 & 0xFFFFFFFFFFFFFFF8)
        + ((v14
          + 23
          + ((v10
            + ((v10
              + v7
              + ((v19 + ((v7 + 40) & ~v18)) & ~(unint64_t)v7)) & ~(unint64_t)v7)
            + 31) & 0xFFFFFFFFFFFFFFF8)) & ~v15)
        + 31) & 0xFFFFFFFFFFFFFFF8)
      + 17 <= 0x18))
  {
    v68 = v10 + v7;
    v69 = v20 & 0xFFFFFFFFFFFFFFF8;
    v70 = v14 | 7;
    __n = v10;
    v61 = v14 + 23;
    v62 = *(_QWORD *)(v12 + 64) + 7;
    v63 = *(_QWORD *)(v11 - 8);
    v64 = v11;
    v21 = ~(unint64_t)v7;
    v22 = a2[1];
    *a1 = *a2;
    a1[1] = v22;
    v65 = a1;
    v23 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v23 = *v24;
    v23[1] = v24[1];
    v25 = (_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
    v26 = (_QWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v25 = *v26;
    v27 = (_QWORD *)(((unint64_t)v25 + v18 + 8) & ~v18);
    v28 = (_QWORD *)(((unint64_t)v26 + v18 + 8) & ~v18);
    *v27 = *v28;
    v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v29 = *v30;
    v66 = ((unint64_t)v30 + v8 + 8) & ~v8;
    v67 = ((unint64_t)v29 + v8 + 8) & ~v8;
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v32 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v31(v67, v66, v5);
    v33 = (void *)(((unint64_t)v27 + v32) & v21);
    v34 = ((unint64_t)v28 + v32) & v21;
    v35 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    if (v35(v34, 1, v5))
    {
      v36 = (const void *)(((unint64_t)v28 + v32) & v21);
      v37 = __n;
      memcpy(v33, v36, __n);
    }
    else
    {
      v31((uint64_t)v33, ((unint64_t)v28 + v32) & v21, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v33, 0, 1, v5);
      v37 = __n;
    }
    v40 = (char *)(((unint64_t)v33 + v68) & v21);
    v41 = (char *)((v68 + v34) & v21);
    if (v35((unint64_t)v41, 1, v5))
    {
      memcpy(v40, v41, v37);
    }
    else
    {
      v31((uint64_t)v40, (uint64_t)v41, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v40, 0, 1, v5);
    }
    v42 = ~v70;
    v43 = v69 + 8;
    v44 = &v40[v37];
    v45 = &v41[v37];
    v46 = (unint64_t)&v40[v37 + 7] & 0xFFFFFFFFFFFFFFF8;
    v47 = (unint64_t)(v45 + 7) & 0xFFFFFFFFFFFFFFF8;
    v48 = *(_QWORD *)v47;
    v49 = *(_QWORD *)(v47 + 8);
    v50 = *(_BYTE *)(v47 + 16);
    sub_241674430(*(_QWORD *)v47, v49, v50);
    *(_QWORD *)v46 = v48;
    *(_QWORD *)(v46 + 8) = v49;
    *(_BYTE *)(v46 + 16) = v50;
    v51 = (unint64_t)(v44 + 31) & 0xFFFFFFFFFFFFFFF8;
    v52 = (unint64_t)(v45 + 31) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v52 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v51 = *(_OWORD *)v52;
    }
    else
    {
      v53 = *(_QWORD *)(v52 + 8);
      *(_QWORD *)v51 = *(_QWORD *)v52;
      *(_QWORD *)(v51 + 8) = v53;
      swift_retain();
    }
    v39 = v65;
    v54 = (v61 + v51) & v42;
    v55 = (v61 + v52) & v42;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v63 + 16))(v54, v55, v64);
    *(_QWORD *)((v62 + v54) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v62 + v55) & 0xFFFFFFFFFFFFF8);
    v56 = v54 + v43;
    *(_BYTE *)v56 = *(_BYTE *)(v55 + v43);
    *(_QWORD *)(v56 + 8) = *(_QWORD *)(v55 + v43 + 8);
    v57 = (v54 + v43 + 23) & 0xFFFFFFFFFFFFFFF8;
    v58 = (v55 + v43 + 23) & 0xFFFFFFFFFFFFFFF8;
    v59 = *(_QWORD *)(v58 + 8);
    *(_QWORD *)v57 = *(_QWORD *)v58;
    *(_QWORD *)(v57 + 8) = v59;
    *(_BYTE *)(v57 + 16) = *(_BYTE *)(v58 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    v38 = *a2;
    *a1 = *a2;
    v39 = (_QWORD *)(v38 + (((v15 | v7) + 16) & ~(v15 | v7)));
  }
  swift_retain();
  return v39;
}

uint64_t sub_241674430(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return sub_2415A4818(result);
  else
    return swift_retain();
}

uint64_t sub_24167443C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(unint64_t, uint64_t);
  uint64_t v9;
  unint64_t v10;
  unsigned int (*v11)(unint64_t, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + (v6 | 7) + 8) & ~(v6 | 7);
  swift_release();
  swift_release();
  v8 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v8((v6 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6, v4);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = ((v6 + 16) | v6) + v9 + v7;
  v11 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v11(v10 & ~v6, 1, v4))
    v8(v10 & ~v6, v4);
  if (*(_DWORD *)(v5 + 84))
    v12 = v9;
  else
    v12 = v9 + 1;
  v13 = ((v10 | v6) + v12) & ~v6;
  if (!v11(v13, 1, v4))
    v8(v13, v4);
  sub_2415C38D4(*(_QWORD *)((v13 + v12 + 7) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v13 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v13 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 16));
  v14 = (_QWORD *)((v13 + v12 + 31) & 0xFFFFFFFFFFFFFFF8);
  if (*v14 >= 0xFFFFFFFFuLL)
    swift_release();
  v15 = sub_2416B9B80();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_DWORD *)(v16 + 80) & 0xF8 | 7;
  (*(void (**)(unint64_t, uint64_t))(v16 + 8))(((unint64_t)v14 + v17 + 16) & ~v17, v15);
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *sub_241674608(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  size_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  const void *v23;
  int v24;
  size_t v25;
  size_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  unsigned int (*v56)(const void *, uint64_t, uint64_t);
  uint64_t v57;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v53 = a1;
  v5 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v5[1] = v6[1];
  v7 = (_QWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_DWORD *)(v10 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v13 = (_QWORD *)(((unint64_t)v7 + v11 + 8) & v12);
  v55 = (_QWORD *)(((unint64_t)v8 + v11 + 8) & v12);
  *v13 = *v55;
  v14 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  v57 = ~v11;
  v54 = ((unint64_t)v14 + v11 + 8) & ~v11;
  v16 = ((unint64_t)v15 + v11 + 8) & ~v11;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v17(v54, v16, v9);
  v18 = *(_QWORD *)(v10 + 64);
  v19 = v18 + v11 + ((v11 + 16) & ~v11);
  v20 = (unint64_t)v13 + v19;
  v21 = (void *)(((unint64_t)v13 + v19) & ~v11);
  v22 = (unint64_t)v55 + v19;
  v23 = (const void *)(((unint64_t)v55 + v19) & ~v11);
  v56 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v56(v23, 1, v9))
  {
    v24 = *(_DWORD *)(v10 + 84);
    if (v24)
      v25 = v18;
    else
      v25 = v18 + 1;
    memcpy(v21, v23, v25);
  }
  else
  {
    v17((uint64_t)v21, (uint64_t)v23, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v21, 0, 1, v9);
    v24 = *(_DWORD *)(v10 + 84);
  }
  if (v24)
    v26 = v18;
  else
    v26 = v18 + 1;
  v27 = (char *)(((v20 | v11) + v26) & v57);
  v28 = (char *)(((v22 | v11) + v26) & v57);
  if (v56(v28, 1, v9))
  {
    memcpy(v27, v28, v26);
  }
  else
  {
    v17((uint64_t)v27, (uint64_t)v28, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v27, 0, 1, v9);
  }
  v29 = &v27[v26];
  v30 = &v28[v26];
  v31 = (unint64_t)&v27[v26 + 7] & 0xFFFFFFFFFFFFFFF8;
  v32 = (unint64_t)(v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v33 = *(_QWORD *)v32;
  v34 = *(_QWORD *)(v32 + 8);
  v35 = *(_BYTE *)(v32 + 16);
  sub_241674430(*(_QWORD *)v32, v34, v35);
  *(_QWORD *)v31 = v33;
  *(_QWORD *)(v31 + 8) = v34;
  *(_BYTE *)(v31 + 16) = v35;
  v36 = (unint64_t)(v29 + 31) & 0xFFFFFFFFFFFFFFF8;
  v37 = (unint64_t)(v30 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v37 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v36 = *(_OWORD *)v37;
  }
  else
  {
    v38 = *(_QWORD *)(v37 + 8);
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *(_QWORD *)(v36 + 8) = v38;
    swift_retain();
  }
  v39 = sub_2416B9B80();
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(_DWORD *)(v40 + 80) & 0xF8 | 7;
  v42 = v37 + v41;
  v43 = (v36 + v41 + 16) & ~v41;
  v44 = (v42 + 16) & ~v41;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v43, v44, v39);
  v45 = *(_QWORD *)(v40 + 64) + 7;
  *(_QWORD *)((v45 + v43) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v45 + v44) & 0xFFFFFFFFFFFFF8);
  v46 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
  v47 = v46 + v43;
  v48 = v46 + v44;
  *(_BYTE *)v47 = *(_BYTE *)v48;
  *(_QWORD *)(v47 + 8) = *(_QWORD *)(v48 + 8);
  v49 = (v47 + 23) & 0xFFFFFFFFFFFFFFF8;
  v50 = (v48 + 23) & 0xFFFFFFFFFFFFFFF8;
  v51 = *(_QWORD *)(v50 + 8);
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *(_QWORD *)(v49 + 8) = v51;
  *(_BYTE *)(v49 + 16) = *(_BYTE *)(v50 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  return v53;
}

_QWORD *sub_24167496C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  void *v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  size_t v27;
  size_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v61)(unint64_t, unint64_t, uint64_t);
  uint64_t v62;
  _QWORD *v63;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63 = a1;
  v6 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v6[1] = v7[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_DWORD *)(v11 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v14 = (_QWORD *)(((unint64_t)v8 + v12 + 8) & v13);
  v15 = (_QWORD *)(((unint64_t)v9 + v12 + 8) & v13);
  *v14 = *v15;
  swift_retain();
  swift_release();
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  swift_retain();
  swift_release();
  v61 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 24);
  v62 = ~v12;
  v61(((unint64_t)v16 + v12 + 8) & ~v12, ((unint64_t)v17 + v12 + 8) & ~v12, v10);
  v18 = *(_QWORD *)(v11 + 64);
  v19 = v18 + v12 + ((v12 + 16) & ~v12);
  v20 = (unint64_t)v14 + v19;
  v21 = (void *)(((unint64_t)v14 + v19) & ~v12);
  v22 = (unint64_t)v15 + v19;
  v23 = (void *)(((unint64_t)v15 + v19) & ~v12);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v25 = v24(v21, 1, v10);
  v26 = v24(v23, 1, v10);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v21, v23, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v26)
    {
      v61((unint64_t)v21, (unint64_t)v23, v10);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v21, v10);
  }
  if (*(_DWORD *)(v11 + 84))
    v27 = v18;
  else
    v27 = v18 + 1;
  memcpy(v21, v23, v27);
LABEL_10:
  if (*(_DWORD *)(v11 + 84))
    v28 = v18;
  else
    v28 = v18 + 1;
  v29 = (char *)(((v20 | v12) + v28) & v62);
  v30 = (char *)(((v22 | v12) + v28) & v62);
  v31 = v24(v29, 1, v10);
  v32 = v24(v30, 1, v10);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v29, v30, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v29, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v29, v10);
LABEL_18:
    memcpy(v29, v30, v28);
    goto LABEL_19;
  }
  v61((unint64_t)v29, (unint64_t)v30, v10);
LABEL_19:
  v33 = &v29[v28];
  v34 = &v30[v28];
  v35 = (unint64_t)&v29[v28 + 7] & 0xFFFFFFFFFFFFFFF8;
  v36 = (unint64_t)(v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = *(_QWORD *)v36;
  v38 = *(_QWORD *)(v36 + 8);
  v39 = *(_BYTE *)(v36 + 16);
  sub_241674430(*(_QWORD *)v36, v38, v39);
  v40 = *(_QWORD *)v35;
  v41 = *(_QWORD *)(v35 + 8);
  v42 = *(_BYTE *)(v35 + 16);
  *(_QWORD *)v35 = v37;
  *(_QWORD *)(v35 + 8) = v38;
  *(_BYTE *)(v35 + 16) = v39;
  sub_2415C38D4(v40, v41, v42);
  v43 = (_QWORD *)((unint64_t)(v33 + 31) & 0xFFFFFFFFFFFFFFF8);
  v44 = (unint64_t *)((unint64_t)(v34 + 31) & 0xFFFFFFFFFFFFFFF8);
  v45 = *v44;
  if (*v43 < 0xFFFFFFFFuLL)
  {
    if (v45 >= 0xFFFFFFFF)
    {
      v47 = v44[1];
      *v43 = v45;
      v43[1] = v47;
      swift_retain();
      goto LABEL_26;
    }
LABEL_25:
    *(_OWORD *)v43 = *(_OWORD *)v44;
    goto LABEL_26;
  }
  if (v45 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_25;
  }
  v46 = v44[1];
  *v43 = v45;
  v43[1] = v46;
  swift_retain();
  swift_release();
LABEL_26:
  v48 = sub_2416B9B80();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(_DWORD *)(v49 + 80) & 0xF8 | 7;
  v51 = ((unint64_t)v43 + v50 + 16) & ~v50;
  v52 = ((unint64_t)v44 + v50 + 16) & ~v50;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 24))(v51, v52, v48);
  v53 = *(_QWORD *)(v49 + 64) + 7;
  *(_QWORD *)((v53 + v51) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v53 + v52) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v54 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
  v55 = v54 + v51;
  v56 = v54 + v52;
  *(_BYTE *)v55 = *(_BYTE *)v56;
  *(_QWORD *)(v55 + 8) = *(_QWORD *)(v56 + 8);
  swift_retain();
  swift_release();
  v57 = (v55 + 23) & 0xFFFFFFFFFFFFFFF8;
  v58 = (v56 + 23) & 0xFFFFFFFFFFFFFFF8;
  v59 = *(_QWORD *)(v58 + 8);
  *(_QWORD *)v57 = *(_QWORD *)v58;
  *(_QWORD *)(v57 + 8) = v59;
  swift_retain();
  swift_release();
  *(_BYTE *)(v57 + 16) = *(_BYTE *)(v58 + 16);
  return v63;
}

_OWORD *sub_241674DE0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v3;
  _OWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void (*v15)(unint64_t, unint64_t, uint64_t);
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  const void *v21;
  unsigned int (*v22)(const void *, uint64_t, uint64_t);
  int v23;
  size_t v24;
  size_t v25;
  void *v26;
  const void *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  unint64_t v44;
  unint64_t v45;
  void (*v47)(void *, const void *, uint64_t);
  uint64_t v49;

  *a1 = *a2;
  v3 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  v5 = (_QWORD *)(((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_DWORD *)(v8 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v11 = (_QWORD *)(((unint64_t)v5 + v9 + 8) & v10);
  v12 = (_QWORD *)(((unint64_t)v6 + v9 + 8) & v10);
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v49 = ~v9;
  v15 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32);
  v15(((unint64_t)v13 + v9 + 8) & ~v9, ((unint64_t)v14 + v9 + 8) & ~v9, v7);
  v16 = *(_QWORD *)(v8 + 64);
  v17 = v16 + v9 + ((v9 + 16) & ~v9);
  v18 = (unint64_t)v11 + v17;
  v19 = (void *)(((unint64_t)v11 + v17) & ~v9);
  v20 = (unint64_t)v12 + v17;
  v21 = (const void *)(((unint64_t)v12 + v17) & ~v9);
  v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  v47 = (void (*)(void *, const void *, uint64_t))v15;
  if (v22(v21, 1, v7))
  {
    v23 = *(_DWORD *)(v8 + 84);
    if (v23)
      v24 = v16;
    else
      v24 = v16 + 1;
    memcpy(v19, v21, v24);
  }
  else
  {
    v15((unint64_t)v19, (unint64_t)v21, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v19, 0, 1, v7);
    v23 = *(_DWORD *)(v8 + 84);
  }
  if (v23)
    v25 = v16;
  else
    v25 = v16 + 1;
  v26 = (void *)(((v18 | v9) + v25) & v49);
  v27 = (const void *)(((v20 | v9) + v25) & v49);
  if (v22(v27, 1, v7))
  {
    memcpy(v26, v27, v25);
  }
  else
  {
    v47(v26, v27, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v26, 0, 1, v7);
  }
  v28 = ((unint64_t)v26 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = ((unint64_t)v27 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = *(_OWORD *)v29;
  *(_BYTE *)(v28 + 16) = *(_BYTE *)(v29 + 16);
  *(_OWORD *)v28 = v30;
  v31 = ((unint64_t)v26 + v25 + 31) & 0xFFFFFFFFFFFFFFF8;
  v32 = ((unint64_t)v27 + v25 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v32 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v31 = *(_OWORD *)v32;
  }
  else
  {
    v33 = *(_QWORD *)(v32 + 8);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *(_QWORD *)(v31 + 8) = v33;
  }
  v34 = sub_2416B9B80();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(_DWORD *)(v35 + 80) & 0xF8 | 7;
  v37 = v32 + v36;
  v38 = (v31 + v36 + 16) & ~v36;
  v39 = (v37 + 16) & ~v36;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v38, v39, v34);
  v40 = *(_QWORD *)(v35 + 64) + 7;
  *(_QWORD *)((v40 + v38) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v40 + v39) & 0xFFFFFFFFFFFFF8);
  v41 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
  v42 = (_OWORD *)(v41 + v38);
  v43 = (_OWORD *)(v41 + v39);
  *v42 = *v43;
  v44 = ((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8;
  v45 = ((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v44 = *(_OWORD *)v45;
  *(_BYTE *)(v44 + 16) = *(_BYTE *)(v45 + 16);
  return a1;
}

_QWORD *sub_2416750BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  unint64_t v23;
  void *v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  size_t v27;
  size_t v28;
  void *v29;
  void *v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void (*v57)(unint64_t, unint64_t, uint64_t);
  uint64_t v58;
  _QWORD *v59;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v59 = a1;
  v7 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = *(_DWORD *)(v12 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v15 = (_QWORD *)(((unint64_t)v9 + v13 + 8) & v14);
  v16 = (_QWORD *)(((unint64_t)v10 + v13 + 8) & v14);
  *v15 = *v16;
  swift_release();
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  swift_release();
  v57 = *(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 40);
  v58 = ~v13;
  v57(((unint64_t)v17 + v13 + 8) & ~v13, ((unint64_t)v18 + v13 + 8) & ~v13, v11);
  v19 = *(_QWORD *)(v12 + 64);
  v20 = v19 + v13 + ((v13 + 16) & ~v13);
  v21 = (unint64_t)v15 + v20;
  v22 = (void *)(((unint64_t)v15 + v20) & ~v13);
  v23 = (unint64_t)v16 + v20;
  v24 = (void *)(((unint64_t)v16 + v20) & ~v13);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v16) = v25(v22, 1, v11);
  v26 = v25(v24, 1, v11);
  if ((_DWORD)v16)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v22, v24, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v22, 0, 1, v11);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v26)
    {
      v57((unint64_t)v22, (unint64_t)v24, v11);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v22, v11);
  }
  if (*(_DWORD *)(v12 + 84))
    v27 = v19;
  else
    v27 = v19 + 1;
  memcpy(v22, v24, v27);
LABEL_10:
  if (*(_DWORD *)(v12 + 84))
    v28 = v19;
  else
    v28 = v19 + 1;
  v29 = (void *)(((v21 | v13) + v28) & v58);
  v30 = (void *)(((v23 | v13) + v28) & v58);
  v31 = v25(v29, 1, v11);
  v32 = v25(v30, 1, v11);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v29, v30, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v29, 0, 1, v11);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v29, v11);
LABEL_18:
    memcpy(v29, v30, v28);
    goto LABEL_19;
  }
  v57((unint64_t)v29, (unint64_t)v30, v11);
LABEL_19:
  v33 = ((unint64_t)v29 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = ((unint64_t)v30 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v35 = *(_BYTE *)(v34 + 16);
  v36 = *(_QWORD *)v33;
  v37 = *(_QWORD *)(v33 + 8);
  v38 = *(_BYTE *)(v33 + 16);
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *(_BYTE *)(v33 + 16) = v35;
  sub_2415C38D4(v36, v37, v38);
  v39 = (_QWORD *)(((unint64_t)v29 + v28 + 31) & 0xFFFFFFFFFFFFFFF8);
  v40 = (unint64_t *)(((unint64_t)v30 + v28 + 31) & 0xFFFFFFFFFFFFFFF8);
  v41 = *v40;
  if (*v39 < 0xFFFFFFFFuLL)
  {
    if (v41 >= 0xFFFFFFFF)
    {
      v43 = v40[1];
      *v39 = v41;
      v39[1] = v43;
      goto LABEL_26;
    }
LABEL_25:
    *(_OWORD *)v39 = *(_OWORD *)v40;
    goto LABEL_26;
  }
  if (v41 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_25;
  }
  v42 = v40[1];
  *v39 = v41;
  v39[1] = v42;
  swift_release();
LABEL_26:
  v44 = sub_2416B9B80();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(_DWORD *)(v45 + 80) & 0xF8 | 7;
  v47 = (char *)v40 + v46;
  v48 = ((unint64_t)v39 + v46 + 16) & ~v46;
  v49 = (unint64_t)(v47 + 16) & ~v46;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 40))(v48, v49, v44);
  v50 = *(_QWORD *)(v45 + 64) + 7;
  *(_QWORD *)((v50 + v48) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v50 + v49) & 0xFFFFFFFFFFFFF8);
  swift_release();
  v51 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
  v52 = v51 + v48;
  v53 = v51 + v49;
  *(_BYTE *)v52 = *(_BYTE *)(v51 + v49);
  *(_QWORD *)(v52 + 8) = *(_QWORD *)(v51 + v49 + 8);
  swift_release();
  v54 = (v52 + 23) & 0xFFFFFFFFFFFFFFF8;
  v55 = (v53 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v54 = *(_OWORD *)v55;
  swift_release();
  *(_BYTE *)(v54 + 16) = *(_BYTE *)(v55 + 16);
  return v59;
}

uint64_t sub_2416754CC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t (*v33)(unint64_t, uint64_t, uint64_t);
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  if ((_DWORD)v7)
    v9 = v7 - 1;
  else
    v9 = 0;
  v10 = sub_2416B9B80();
  if ((int)v7 >= 0)
    v11 = 0x7FFFFFFF;
  else
    v11 = v8;
  v12 = *(_QWORD *)(v6 + 64);
  if ((_DWORD)v7)
    v13 = *(_QWORD *)(v6 + 64);
  else
    v13 = v12 + 1;
  v14 = *(_QWORD *)(v10 - 8);
  v15 = *(unsigned int *)(v14 + 84);
  if (v9 > v11)
    v11 = v9;
  if (v15 <= 0x7FFFFFFE)
    v16 = 2147483646;
  else
    v16 = *(_DWORD *)(v14 + 84);
  if (v11 <= v16)
    v11 = v16;
  if (!a2)
    return 0;
  v17 = v10;
  v18 = *(unsigned __int8 *)(v6 + 80);
  v19 = v18 | 7;
  v20 = ((v18 + 16) & ~v18) + v12 + v18;
  v21 = v13 + v18;
  v22 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  v23 = *(_QWORD *)(v14 + 64) + 7;
  if (v11 < a2)
  {
    v24 = (((v23 & 0xFFFFFFF8)
          + ((v22
            + ((v13 + ((v21 + ((v20 + ((v18 + 40) & ~(_DWORD)v19)) & ~(_DWORD)v18)) & ~(_DWORD)v18) + 31) & 0xFFFFFFF8)
            + 16) & ~(_DWORD)v22)
          + 31) & 0xFFFFFFF8)
        + 17;
    if (v24 < 4)
      v25 = ((a2 - v11 + 255) >> (8 * v24)) + 1;
    else
      v25 = 2;
    if (v25 >= 0x10000)
      v26 = 4;
    else
      v26 = 2;
    if (v25 < 0x100)
      v26 = 1;
    if (v25 >= 2)
      v27 = v26;
    else
      v27 = 0;
    __asm { BR              X5 }
  }
  if ((v11 & 0x80000000) == 0)
  {
    v28 = *(_QWORD *)(a1 + 8);
    if (v28 >= 0xFFFFFFFF)
      LODWORD(v28) = -1;
    return (v28 + 1);
  }
  v30 = ~v18;
  v31 = (((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v19 + 8) & ~v19;
  if (v8 == v11)
  {
    v32 = (v18 + ((v31 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v30;
    v33 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    v15 = v7;
    v17 = v5;
    return v33(v32, v15, v17);
  }
  v34 = (v20 + v31) & v30;
  if (v9 == v11)
  {
    if (v7 >= 2)
    {
      v35 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v34, v7, v5);
      if (v35 >= 2)
        return v35 - 1;
      else
        return 0;
    }
    return 0;
  }
  v32 = (v22 + ((v13 + ((v21 + v34) & v30) + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & ~v22;
  if (v15 >= 0x7FFFFFFE)
  {
    v33 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v14 + 48);
    return v33(v32, v15, v17);
  }
  v36 = *(_QWORD *)((v23 + v32) & 0xFFFFFFFFFFFFF8);
  if (v36 >= 0xFFFFFFFF)
    LODWORD(v36) = -1;
  if ((v36 + 1) >= 2)
    return v36;
  else
    return 0;
}

void sub_2416757A4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  size_t v21;
  unsigned int v22;
  int v23;
  int v24;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v8)
    v10 = v8 - 1;
  else
    v10 = 0;
  v11 = sub_2416B9B80();
  v12 = 0;
  if (v8 >= 0)
    v13 = 0x7FFFFFFF;
  else
    v13 = v9;
  v14 = *(_QWORD *)(v7 + 64);
  if (v8)
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = v14 + 1;
  v16 = *(_QWORD *)(v11 - 8);
  if (v10 <= v13)
    v17 = v13;
  else
    v17 = v10;
  if (*(_DWORD *)(v16 + 84) <= 0x7FFFFFFEu)
    v18 = 2147483646;
  else
    v18 = *(_DWORD *)(v16 + 84);
  if (v17 <= v18)
    v19 = v18;
  else
    v19 = v17;
  v20 = *(unsigned __int8 *)(v7 + 80);
  v21 = ((((*(_QWORD *)(v16 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)
        + (((*(_DWORD *)(v16 + 80) & 0xF8 | 7)
          + ((v15 + ((v15 + v20 + ((((v20 + 16) & ~v20) + v14 + v20 + ((v20 + 40) & ~(v20 | 7))) & ~v20)) & ~v20) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 16) & ~(*(_DWORD *)(v16 + 80) & 0xF8 | 7))
        + 31) & 0xFFFFFFFFFFFFFFF8)
      + 17;
  if (v19 < a3)
  {
    if (v21 <= 3)
      v22 = ((a3 - v19 + 255) >> (8 * v21)) + 1;
    else
      v22 = 2;
    if (v22 >= 0x10000)
      v23 = 4;
    else
      v23 = 2;
    if (v22 < 0x100)
      v23 = 1;
    if (v22 >= 2)
      v12 = v23;
    else
      v12 = 0;
  }
  if (v19 < a2)
  {
    if (v21 >= 4)
      v24 = ~v19 + a2;
    else
      v24 = (~(_BYTE)v19 + a2);
    bzero(a1, v21);
    if ((_DWORD)v21 == 1)
      *a1 = v24;
    else
      *(_DWORD *)a1 = v24;
    __asm { BR              X10 }
  }
  __asm { BR              X24 }
}

void sub_241675978()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
  JUMPOUT(0x241675A24);
}

void sub_241675980()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x241675988);
  JUMPOUT(0x241675A24);
}

void sub_24167599C()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
  JUMPOUT(0x241675A24);
}

void sub_2416759A4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = v0;
  JUMPOUT(0x241675A24);
}

void sub_2416759AC()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + v3) = 0;
  if (v1)
  {
    if (v0 < 0)
      JUMPOUT(0x2416759B8);
    if (v1 < 0)
      JUMPOUT(0x241675A1CLL);
    *(_QWORD *)(v2 + 8) = (v1 - 1);
  }
  JUMPOUT(0x241675A24);
}

void type metadata accessor for ExpandableWheelPickerView()
{
  JUMPOUT(0x242699438);
}

uint64_t sub_241675B08()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_241675B3C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t v41;

  v30 = a4;
  v31 = a2;
  v38 = a6;
  v39 = a1;
  v8 = sub_2416BB434();
  v41 = a5;
  v33 = MEMORY[0x2426994BC](MEMORY[0x24BEE4AB0], v8, &v41);
  v34 = v8;
  v9 = sub_2416BA1F8();
  v36 = *(_QWORD *)(v9 - 8);
  v37 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v35 = (char *)&v28 - v10;
  v28 = sub_2416BA1F8();
  v11 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v13 = (char *)&v28 - v12;
  v14 = sub_2416BA204();
  MEMORY[0x2426994BC](MEMORY[0x24BDEDAB0], v14);
  v29 = sub_2416BA63C();
  v15 = sub_2416BA150();
  v32 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v28 - v16;
  v18 = *(_QWORD *)(a3 - 8);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v19(v13, v39, a3);
  v20 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56);
  v20(v13, 0, 1, a3);
  v21 = v30;
  sub_2416BAB88();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v28);
  if ((v31 & 1) != 0)
  {
    v22 = v35;
    v19(v35, v39, a3);
    v20(v22, 0, 1, a3);
    v23 = swift_checkMetadataState();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 0, 1, v23);
  }
  else
  {
    v24 = swift_checkMetadataState();
    v22 = v35;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v35, 1, 1, v24);
  }
  v25 = sub_2416BA204();
  v26 = MEMORY[0x2426994BC](MEMORY[0x24BDEFB48], v29);
  v40[0] = v21;
  v40[1] = v26;
  MEMORY[0x2426994BC](MEMORY[0x24BDED308], v15, v40);
  MEMORY[0x2426994BC](MEMORY[0x24BDEDAB0], v25);
  sub_2416BAB88();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v17, v15);
}

uint64_t (*sub_241675E44(uint64_t a1))(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1 + *(int *)(a1 + 72);
  v3 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_BYTE *)(v2 + 16);
  sub_241674430(*(_QWORD *)v2, v4, v5);
  v6 = sub_2415C1A00(v3, v4, v5);
  v8 = v7;
  sub_2415C38D4(v3, v4, v5);
  if (!v6)
    return 0;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v8;
  return sub_24159D5F8;
}

uint64_t sub_241675EE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t OpaqueTypeConformance2;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  _QWORD v70[2];
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[2];
  uint64_t v93;
  _QWORD v94[2];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[2];
  _QWORD v103[2];
  _QWORD v104[2];
  uint64_t v105;

  v84 = a2;
  v82 = *(_QWORD *)(a1 - 8);
  v83 = *(_QWORD *)(v82 + 64);
  v2 = MEMORY[0x24BDAC7A8](a1);
  v81 = (char *)v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v2 + 16);
  v78 = *(_QWORD *)(v2 + 24);
  v5 = v2;
  v79 = v2;
  v6 = sub_2416BB23C();
  v86 = *(_QWORD *)(v5 + 32);
  v7 = *(_QWORD *)(v86 + 8);
  v8 = sub_2416BA204();
  v9 = MEMORY[0x24BDEDAB0];
  MEMORY[0x2426994BC](MEMORY[0x24BDEDAB0], v8);
  v10 = sub_2416BA63C();
  v11 = sub_2416BA150();
  v12 = v4;
  v13 = sub_2416BB434();
  v105 = v7;
  MEMORY[0x2426994BC](MEMORY[0x24BEE4AB0], v13, &v105);
  v14 = sub_2416BA204();
  MEMORY[0x2426994BC](v9, v14);
  v15 = sub_2416BA63C();
  v16 = sub_2416BA150();
  sub_2416BA768();
  v17 = sub_2416BA150();
  v18 = MEMORY[0x2426994BC](MEMORY[0x24BEE12D8], v6);
  v95 = v6;
  v96 = v12;
  v19 = v12;
  v85 = v12;
  v97 = v17;
  v98 = v18;
  v99 = v7;
  v20 = sub_2416BAE94();
  v21 = MEMORY[0x24BDEFB48];
  v22 = MEMORY[0x2426994BC](MEMORY[0x24BDEFB48], v10);
  v104[0] = MEMORY[0x24BDF1F80];
  v104[1] = v22;
  v23 = MEMORY[0x24BDED308];
  v24 = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v11, v104);
  v25 = MEMORY[0x2426994BC](v21, v15);
  v103[0] = v24;
  v103[1] = v25;
  v26 = v23;
  v27 = MEMORY[0x2426994BC](v23, v16, v103);
  v28 = sub_24159CE88(&qword_257139D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
  v102[0] = v27;
  v102[1] = v28;
  v101 = MEMORY[0x2426994BC](v23, v17, v102);
  v29 = MEMORY[0x2426994BC](MEMORY[0x24BDF4A08], v20, &v101);
  v95 = MEMORY[0x24BDF1FA8];
  v96 = v19;
  v97 = v20;
  v98 = MEMORY[0x24BDF1F80];
  v99 = v7;
  v100 = v29;
  v30 = sub_2416BADC8();
  v31 = sub_2416BA150();
  v32 = sub_2416BA234();
  v94[0] = MEMORY[0x2426994BC](MEMORY[0x24BDF4570], v30);
  v94[1] = v28;
  v33 = v26;
  v34 = MEMORY[0x2426994BC](v26, v31, v94);
  v95 = v31;
  v96 = v32;
  v35 = MEMORY[0x24BDEDB38];
  v97 = v34;
  v98 = MEMORY[0x24BDEDB38];
  v36 = MEMORY[0x242699480](255, &v95, MEMORY[0x24BDF23F8], 0);
  v37 = sub_2416B9B80();
  v95 = v31;
  v96 = v32;
  v97 = v34;
  v98 = v35;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v39 = sub_2415A5300();
  v95 = v36;
  v96 = v37;
  v97 = OpaqueTypeConformance2;
  v98 = v39;
  sub_2416BAD98();
  sub_2416BB434();
  v40 = v78;
  swift_getTupleTypeMetadata2();
  v41 = sub_2416BAFA8();
  v42 = sub_2416BACA8();
  sub_24161B9F8();
  v43 = sub_2416BA150();
  v71 = MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v41);
  v93 = v71;
  v44 = MEMORY[0x2426994BC](MEMORY[0x24BDF3F50], v42, &v93);
  v70[1] = v44;
  v45 = sub_24159CE88(qword_25713CDD0, (uint64_t (*)(uint64_t))sub_24161B9F8, MEMORY[0x24BDEFAD8]);
  v92[0] = v44;
  v92[1] = v45;
  v74 = MEMORY[0x2426994BC](v33, v43, v92);
  v95 = v43;
  v96 = v74;
  v76 = MEMORY[0x242699480](0, &v95, MEMORY[0x24BDF2550], 0);
  v77 = *(_QWORD *)(v76 - 8);
  v46 = MEMORY[0x24BDAC7A8](v76);
  v75 = (uint64_t)v70 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v46);
  v72 = (char *)v70 - v48;
  v49 = swift_checkMetadataState();
  v73 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v51 = (char *)v70 - v50;
  v52 = swift_checkMetadataState();
  v53 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v55 = (char *)v70 - v54;
  v87 = v85;
  v88 = v40;
  v56 = v79;
  v57 = *(_QWORD *)(v79 + 40);
  v89 = v86;
  v90 = v57;
  v58 = v80;
  v91 = v80;
  swift_checkMetadataState();
  sub_2416BAC9C();
  sub_2415BE1DC();
  sub_2416BAA68();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v52);
  v59 = v82;
  v60 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v81, v58, v56);
  v61 = v59;
  v62 = (*(unsigned __int8 *)(v59 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  v63 = (char *)swift_allocObject();
  *((_QWORD *)v63 + 2) = v85;
  *((_QWORD *)v63 + 3) = v40;
  *((_QWORD *)v63 + 4) = v86;
  *((_QWORD *)v63 + 5) = v57;
  (*(void (**)(char *, char *, uint64_t))(v61 + 32))(&v63[v62], v60, v56);
  v64 = (uint64_t)v72;
  v65 = v74;
  sub_2416BAA80();
  swift_release();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v51, v49);
  v95 = v49;
  v96 = v65;
  swift_getOpaqueTypeConformance2();
  v66 = v75;
  v67 = v76;
  sub_2415E3D20(v64, v76, v75);
  v68 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
  v68(v64, v67);
  sub_2415E07B8(v66, v67, v84);
  return ((uint64_t (*)(uint64_t, uint64_t))v68)(v66, v67);
}

void sub_241676648(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[48];
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[2];
  _QWORD v73[2];
  _QWORD v74[2];
  uint64_t v75;

  v60 = a5;
  v58 = a4;
  v63 = a3;
  v62 = a1;
  v54 = a6;
  v59 = sub_2416BA234();
  v48 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v47 = &v39[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_2416BAE58();
  MEMORY[0x24BDAC7A8](v9);
  v53 = &v39[-v10];
  v11 = sub_2416BB23C();
  v12 = *(_QWORD *)(a4 + 8);
  v13 = a2;
  v14 = sub_2416BA204();
  v15 = MEMORY[0x24BDEDAB0];
  MEMORY[0x2426994BC](MEMORY[0x24BDEDAB0], v14);
  v16 = sub_2416BA63C();
  v17 = sub_2416BA150();
  v18 = sub_2416BB434();
  v75 = v12;
  MEMORY[0x2426994BC](MEMORY[0x24BEE4AB0], v18, &v75);
  v19 = sub_2416BA204();
  MEMORY[0x2426994BC](v15, v19);
  v20 = sub_2416BA63C();
  v21 = sub_2416BA150();
  sub_2416BA768();
  v22 = sub_2416BA150();
  v23 = MEMORY[0x2426994BC](MEMORY[0x24BEE12D8], v11);
  v65 = v11;
  v66 = v13;
  v24 = v13;
  v67 = v22;
  v68 = v23;
  v69 = v12;
  v25 = sub_2416BAE94();
  v26 = MEMORY[0x24BDEFB48];
  v27 = MEMORY[0x2426994BC](MEMORY[0x24BDEFB48], v16);
  v74[0] = MEMORY[0x24BDF1F80];
  v74[1] = v27;
  v28 = MEMORY[0x24BDED308];
  v29 = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v17, v74);
  v30 = MEMORY[0x2426994BC](v26, v20);
  v73[0] = v29;
  v73[1] = v30;
  v31 = MEMORY[0x2426994BC](v28, v21, v73);
  v32 = sub_24159CE88(&qword_257139D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
  v72[0] = v31;
  v72[1] = v32;
  v71 = MEMORY[0x2426994BC](v28, v22, v72);
  v33 = MEMORY[0x2426994BC](MEMORY[0x24BDF4A08], v25, &v71);
  v65 = MEMORY[0x24BDF1FA8];
  v66 = v24;
  v61 = v24;
  v50 = v25;
  v67 = v25;
  v68 = MEMORY[0x24BDF1F80];
  v69 = v12;
  v52 = v12;
  v49 = v33;
  v70 = v33;
  v34 = sub_2416BADC8();
  v41 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v51 = &v39[-v35];
  v36 = sub_2416BA150();
  v44 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v42 = &v39[-v37];
  v43 = v34;
  v40 = MEMORY[0x2426994BC](MEMORY[0x24BDF4570], v34);
  v64[0] = v40;
  v64[1] = v32;
  v56 = v36;
  v55 = MEMORY[0x2426994BC](v28, v36, v64);
  v65 = v36;
  v66 = v59;
  v67 = v55;
  v68 = MEMORY[0x24BDEDB38];
  v57 = MEMORY[0x242699480](0, &v65, MEMORY[0x24BDF23F8], 0);
  v46 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v45 = &v39[-v38];
  v65 = v24;
  v66 = v63;
  v67 = v58;
  v68 = v60;
  type metadata accessor for ExpandableWheelPickerView();
}

void sub_241676AAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  void (*v22)();
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t *v33;
  int *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (**v39)();
  void (**v40)();
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t OpaqueTypeConformance2;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  char *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(_BYTE *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(_BYTE *, _BYTE *, uint64_t);
  void (*v94)(_BYTE *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE v106[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = &v106[-v7];
  *(_QWORD *)(v4 - 368) = &v106[-v7];
  v9 = sub_24167A550();
  *(_QWORD *)(v4 - 448) = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  *(_QWORD *)(v4 - 456) = &v106[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x24BDAC7A8](v10);
  *(_QWORD *)(v4 - 440) = &v106[-v13];
  *(_QWORD *)(v4 - 384) = *(_QWORD *)(v2 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  *(_QWORD *)(v4 - 480) = &v106[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x24BDAC7A8](v14);
  *(_QWORD *)(v4 - 432) = &v106[-v17];
  MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v4 - 376) = &v106[-v18];
  v19 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v4 - 464) = v19;
  v20 = *(_QWORD *)(v4 - 336);
  v19(v8, v20, a1);
  v21 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v22 = (void (*)())swift_allocObject();
  *((_QWORD *)v22 + 2) = *(_QWORD *)(v4 - 344);
  *((_QWORD *)v22 + 3) = v2;
  *((_QWORD *)v22 + 4) = v1;
  *((_QWORD *)v22 + 5) = v3;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  v24 = *(_QWORD *)(v4 - 368);
  v23((char *)v22 + v21, v24, a1);
  v25 = v24;
  v26 = a1;
  *(_QWORD *)(v4 - 392) = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 - 464))(v25, v20, a1);
  v27 = (void (*)())swift_allocObject();
  v28 = *(_QWORD *)(v4 - 344);
  v29 = *(_QWORD *)(v4 - 328);
  *((_QWORD *)v27 + 2) = v28;
  *((_QWORD *)v27 + 3) = v29;
  v30 = v1;
  *((_QWORD *)v27 + 4) = v1;
  *((_QWORD *)v27 + 5) = v3;
  v23((char *)v27 + v21, *(_QWORD *)(v4 - 368), v26);
  v31 = v29;
  KeyPath = swift_getKeyPath();
  v33 = *(uint64_t **)(v4 - 456);
  *v33 = KeyPath;
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v34 = *(int **)(v4 - 448);
  v35 = (char *)v33 + v34[13];
  v36 = (uint64_t)v33;
  v37 = *MEMORY[0x24BDECEA0];
  v38 = sub_2416BA144();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v35, v37, v38);
  v39 = (void (**)())(v36 + v34[14]);
  *v39 = sub_24167AA54;
  v39[1] = v22;
  v40 = (void (**)())(v36 + v34[15]);
  *v40 = sub_24167AA64;
  v40[1] = v27;
  v41 = *(_QWORD *)(v4 - 440);
  sub_2415A85BC(v36, v41, (uint64_t (*)(_QWORD))sub_24167A550);
  *(_QWORD *)(v4 - 304) = v28;
  *(_QWORD *)(v4 - 296) = v31;
  *(_QWORD *)(v4 - 288) = v30;
  *(_QWORD *)(v4 - 280) = v3;
  v42 = *(_QWORD *)(v4 - 336);
  *(_QWORD *)(v4 - 272) = v42;
  sub_24159CE88(&qword_25713F458, (uint64_t (*)(uint64_t))sub_24167A550, (uint64_t)&unk_2416C0968);
  v43 = *(_QWORD *)(v4 - 432);
  sub_241682254((uint64_t (*)(uint64_t))sub_24167AAF8);
  sub_2415A6154(v41, (uint64_t (*)(_QWORD))sub_24167A550);
  sub_2415E3D20(v43, v31, *(_QWORD *)(v4 - 376));
  v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 384) + 8);
  *(_QWORD *)(v4 - 432) = v44;
  v44(v43, v31);
  v45 = sub_2416B9B80();
  v46 = *(_QWORD *)(v4 - 360);
  *(_QWORD *)(v4 - 200) = *(_QWORD *)(v4 - 416);
  *(_QWORD *)(v4 - 192) = v46;
  *(_QWORD *)(v4 - 184) = *(_QWORD *)(v4 - 424);
  *(_QWORD *)(v4 - 176) = MEMORY[0x24BDEDB38];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v48 = sub_2415A5300();
  *(_QWORD *)(v4 - 200) = *(_QWORD *)(v4 - 408);
  *(_QWORD *)(v4 - 192) = v45;
  *(_QWORD *)(v4 - 440) = v45;
  *(_QWORD *)(v4 - 184) = OpaqueTypeConformance2;
  *(_QWORD *)(v4 - 176) = v48;
  v49 = sub_2416BAD98();
  v50 = sub_2416BB434();
  v51 = *(_QWORD **)(v50 - 8);
  v52 = v51[8];
  v53 = (v52 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v50);
  v54 = &v106[-v53];
  v55 = (char *)(v42 + *(int *)(*(_QWORD *)(v4 - 392) + 84));
  v56 = *v55;
  v57 = *((_QWORD *)v55 + 1);
  *(_BYTE *)(v4 - 200) = v56;
  *(_QWORD *)(v4 - 192) = v57;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  v58 = sub_2416BAD14();
  v59 = *(_BYTE *)(v4 - 232);
  *(_QWORD *)(v4 - 368) = v49;
  if ((v59 & 1) == 0)
  {
    MEMORY[0x24BDAC7A8](v58);
    v97 = &v106[-v53];
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v97, 1, 1, v49);
    MEMORY[0x2426994BC](MEMORY[0x24BDF44C8], v49);
    v93 = (void (*)(_BYTE *, _BYTE *, uint64_t))v51[2];
    v93(v54, v97, v50);
    v94 = (void (*)(_BYTE *, uint64_t))v51[1];
    v94(v97, v50);
    v95 = *(_QWORD *)(v4 - 480);
    v96 = *(_QWORD *)(v4 - 384);
    v91 = v52;
    goto LABEL_5;
  }
  *(_QWORD *)(v4 - 608) = v48;
  *(_QWORD *)(v4 - 600) = OpaqueTypeConformance2;
  *(_QWORD *)(v4 - 456) = v51;
  *(_QWORD *)(v4 - 448) = v50;
  *(_QWORD *)(v4 - 616) = v52;
  *(_QWORD *)(v4 - 624) = v54;
  *(_QWORD *)(v4 - 464) = v106;
  *(_QWORD *)(v4 - 640) = *(_QWORD *)(v49 - 8);
  v60 = MEMORY[0x24BDAC7A8](v58);
  v62 = &v106[-((v61 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v4 - 632) = v106;
  MEMORY[0x24BDAC7A8](v60);
  v64 = &v106[-v63];
  sub_2416BA4C8();
  v65 = *(_QWORD *)(v4 - 336);
  v66 = sub_241678898(*(_QWORD **)(v4 - 392), *(_QWORD *)(v4 - 488));
  MEMORY[0x24BDAC7A8](v66);
  v67 = *(_QWORD *)(v4 - 328);
  *(_QWORD *)&v106[-48] = *(_QWORD *)(v4 - 344);
  *(_QWORD *)&v106[-40] = v67;
  v68 = *(_QWORD *)(v4 - 352);
  v103 = *(_QWORD *)(v4 - 400);
  v104 = v68;
  v105 = v65;
  v105 = *(_QWORD *)(v4 - 520);
  v104 = *(_QWORD *)(v4 - 496);
  v103 = *(_QWORD *)(v4 - 512);
  v69 = *(_QWORD *)(v4 - 504);
  sub_2416BADB0();
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v70 = swift_allocObject();
  *(_OWORD *)(v70 + 16) = xmmword_2416BCC80;
  v71 = *(_QWORD *)(v65 + 24);
  *(_QWORD *)(v70 + 32) = *(_QWORD *)(v65 + 16);
  *(_QWORD *)(v70 + 40) = v71;
  *(_QWORD *)(v70 + 48) = 0x72656B636950;
  *(_QWORD *)(v70 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  v72 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v73 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v73)
  {
    sub_2416BB128();

    v74 = *(_QWORD *)(v4 - 576);
    v75 = *(_QWORD *)(v4 - 568);
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 584) + 8))(v69, v75);
    v76 = *(_QWORD *)(v4 - 536);
    sub_2416BA228();
    v77 = *(_QWORD *)(v4 - 552);
    v78 = *(_QWORD *)(v4 - 416);
    v79 = *(_QWORD *)(v4 - 360);
    sub_2416BAA44();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 528) + 8))(v76, v79);
    v80 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 560) + 8))(v74, v78);
    v81 = *(_QWORD *)(v4 - 440);
    v82 = *(_QWORD *)(v81 - 8);
    MEMORY[0x24BDAC7A8](v80);
    v84 = &v106[-((v83 + 15) & 0xFFFFFFFFFFFFFFF0)];
    sub_24159D6B0(0, &qword_25713F3D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    sub_2416BAD14();
    v85 = *(_QWORD *)(v4 - 408);
    sub_2416BAB58();
    (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v84, v81);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 544) + 8))(v77, v85);
    v86 = *(_QWORD *)(v4 - 368);
    MEMORY[0x2426994BC](MEMORY[0x24BDF44C8], v86);
    v87 = (uint64_t)v62;
    sub_2415E3D20((uint64_t)v64, v86, (uint64_t)v62);
    v88 = *(_QWORD *)(v4 - 640);
    v89 = *(uint64_t (**)(_BYTE *, uint64_t))(v88 + 8);
    v90 = v89(v64, v86);
    v91 = *(_QWORD *)(v4 - 616);
    MEMORY[0x24BDAC7A8](v90);
    sub_2415E07B8(v87, v86, (uint64_t)&v106[-((v91 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    v89((_BYTE *)v87, v86);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v88 + 56))(&v106[-((v91 + 15) & 0xFFFFFFFFFFFFFFF0)], 0, 1, v86);
    v92 = *(_QWORD *)(v4 - 456);
    v93 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 16);
    v54 = *(_BYTE **)(v4 - 624);
    v50 = *(_QWORD *)(v4 - 448);
    v93(v54, &v106[-((v91 + 15) & 0xFFFFFFFFFFFFFFF0)], v50);
    v94 = *(void (**)(_BYTE *, uint64_t))(v92 + 8);
    v94(&v106[-((v91 + 15) & 0xFFFFFFFFFFFFFFF0)], v50);
    v95 = *(_QWORD *)(v4 - 480);
    v96 = *(_QWORD *)(v4 - 384);
LABEL_5:
    v98 = *(_QWORD *)(v4 - 376);
    v99 = *(_QWORD *)(v4 - 328);
    v100 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 16))(v95, v98, v99);
    *(_QWORD *)(v4 - 336) = v106;
    *(_QWORD *)(v4 - 200) = v95;
    MEMORY[0x24BDAC7A8](v100);
    v93(&v106[-((v91 + 15) & 0xFFFFFFFFFFFFFFF0)], v54, v50);
    *(_QWORD *)(v4 - 192) = &v106[-((v91 + 15) & 0xFFFFFFFFFFFFFFF0)];
    *(_QWORD *)(v4 - 232) = v99;
    *(_QWORD *)(v4 - 224) = v50;
    *(_QWORD *)(v4 - 248) = *(_QWORD *)(v4 - 352);
    *(_QWORD *)(v4 - 256) = MEMORY[0x2426994BC](MEMORY[0x24BDF44C8], *(_QWORD *)(v4 - 368));
    *(_QWORD *)(v4 - 240) = MEMORY[0x2426994BC](MEMORY[0x24BDF5578], v50, v4 - 256);
    sub_2416310F0((uint64_t *)(v4 - 200), 2uLL, v4 - 232);
    v94(v54, v50);
    v101 = v98;
    v102 = *(void (**)(uint64_t, uint64_t))(v4 - 432);
    v102(v101, v99);
    v94(&v106[-((v91 + 15) & 0xFFFFFFFFFFFFFFF0)], v50);
    v102(v95, v99);
    return;
  }
  __break(1u);
}

void sub_24167761C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;

  *(_QWORD *)a6 = sub_2416BA468();
  *(_QWORD *)(a6 + 8) = 0;
  *(_BYTE *)(a6 + 16) = 1;
  sub_24167B0A4(0, &qword_25713F470, &qword_25713F3F0, (uint64_t (*)(uint64_t))sub_24167A61C);
  sub_2416776AC(a1, a2, a3, a4, a5, a6 + *(int *)(v12 + 44));
}

void sub_2416776AC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  _QWORD v34[6];
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v37 = a3;
  v38 = a5;
  v40 = a4;
  v41 = a2;
  v34[3] = a6;
  v39 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  sub_241646BE0();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v34[4] = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v34[0] = (char *)v34 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v34[1] = (char *)v34 - v12;
  sub_2415E40F8();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v34[2] = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v34 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v42 = (uint64_t)v34 - v19;
  v20 = a1[1];
  v43 = *a1;
  v44 = v20;
  v21 = sub_2415C343C();
  swift_bridgeObjectRetain();
  v22 = MEMORY[0x24BEE0D00];
  v34[5] = v21;
  v23 = sub_2416BA9D8();
  v25 = v24;
  v43 = v23;
  v44 = v24;
  v27 = v26 & 1;
  LOBYTE(v45) = v26 & 1;
  v46 = v28;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, v22, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v36 = v29;
  v30 = swift_allocObject();
  v35 = xmmword_2416BCC80;
  *(_OWORD *)(v30 + 16) = xmmword_2416BCC80;
  v31 = a1[3];
  *(_QWORD *)(v30 + 32) = a1[2];
  *(_QWORD *)(v30 + 40) = v31;
  *(_QWORD *)(v30 + 48) = 0x656C746954;
  *(_QWORD *)(v30 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  v32 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v33 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v33)
  {
    sub_2416BB128();

    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v23, v25, v27);
    swift_bridgeObjectRelease();
    sub_2415A85BC((uint64_t)v18, v42, (uint64_t (*)(_QWORD))sub_2415E40F8);
    v43 = v41;
    v44 = v37;
    v45 = v40;
    v46 = v38;
    type metadata accessor for ExpandableWheelPickerView();
  }
  __break(1u);
  JUMPOUT(0x241677CBCLL);
}

uint64_t sub_241677CC0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)();
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD v34[2];
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v38 = a2;
  v36 = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v34[1] = v5;
  v35 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = sub_2416BB434();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v34 - v10;
  v12 = *(_QWORD *)(v6 - 8);
  v13 = MEMORY[0x24BDAC7A8](v9);
  result = MEMORY[0x24BDAC7A8](v13);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = *(int *)(a1 + 92);
  v37 = v2;
  if (*(_BYTE *)(v2 + v21) == 1)
  {
    v22 = (char *)v34 - v15;
    v23 = v16;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v37 + *(int *)(a1 + 68), v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v6) == 1)
    {
      result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v22, v11, v6);
      v24 = sub_2416BAE58();
      MEMORY[0x242698604](v24);
      v25 = *(_QWORD *)(a1 + 32);
      v26 = sub_2416BB08C();
      v27 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v27(v23, v6);
      result = ((uint64_t (*)(char *, uint64_t))v27)(v22, v6);
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      if ((v26 & 1) == 0)
      {
        v28 = v36;
        v17 = *(_QWORD *)(v37 + 16);
        v18 = *(_QWORD *)(v37 + 24);
        v29 = v35;
        (*(void (**)(char *))(v36 + 16))(v35);
        v30 = (*(unsigned __int8 *)(v28 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
        v20 = (char *)swift_allocObject();
        v31 = *(_QWORD *)(a1 + 24);
        *((_QWORD *)v20 + 2) = v6;
        *((_QWORD *)v20 + 3) = v31;
        v32 = *(_QWORD *)(a1 + 40);
        *((_QWORD *)v20 + 4) = v25;
        *((_QWORD *)v20 + 5) = v32;
        (*(void (**)(char *, char *, uint64_t))(v28 + 32))(&v20[v30], v29, a1);
        result = swift_bridgeObjectRetain();
        v19 = sub_24167AFE0;
      }
    }
  }
  v33 = v38;
  *v38 = v17;
  v33[1] = v18;
  v33[2] = v19;
  v33[3] = v20;
  return result;
}

void sub_241677F54(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;

  *(_QWORD *)a6 = sub_2416BA51C();
  *(_QWORD *)(a6 + 8) = 0;
  *(_BYTE *)(a6 + 16) = 1;
  sub_24167AE98();
  sub_241677FCC(a1, a2, a3, a4, a5, a6 + *(int *)(v12 + 44));
}

void sub_241677FCC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v36 = a4;
  v37 = a5;
  v35 = a3;
  v33 = a2;
  v39 = a6;
  sub_24167A824(0, &qword_25713F420, &qword_25713F428, (uint64_t (*)(uint64_t))sub_24167A89C, (void (*)(void))sub_24167A928);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v38 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v32 - v10;
  sub_2415E40F8();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v34 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v32 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v32 = (uint64_t)&v32 - v18;
  v19 = a1[1];
  v40 = *a1;
  v41 = v19;
  sub_2415C343C();
  swift_bridgeObjectRetain();
  v20 = MEMORY[0x24BEE0D00];
  v21 = sub_2416BA9D8();
  v23 = v22;
  v40 = v21;
  v41 = v22;
  v25 = v24 & 1;
  v42 = v24 & 1;
  v43 = v26;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, v20, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_2416BCC80;
  v28 = a1[3];
  *(_QWORD *)(v27 + 32) = a1[2];
  *(_QWORD *)(v27 + 40) = v28;
  *(_QWORD *)(v27 + 48) = 0x656C746954;
  *(_QWORD *)(v27 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  v29 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v30 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v30)
  {
    sub_2416BB128();

    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v21, v23, v25);
    swift_bridgeObjectRelease();
    sub_2415A85BC((uint64_t)v17, v32, (uint64_t (*)(_QWORD))sub_2415E40F8);
    *(_QWORD *)v11 = sub_2416BA468();
    *((_QWORD *)v11 + 1) = 0;
    v11[16] = 1;
    sub_24167B0A4(0, &qword_25713F468, &qword_25713F428, (uint64_t (*)(uint64_t))sub_24167A89C);
    sub_24167831C((uint64_t)a1, v33, v35, v36, v37, (uint64_t)&v11[*(int *)(v31 + 44)]);
  }
  __break(1u);
}

void sub_24167831C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[14];

  v16[6] = a6;
  MEMORY[0x24BDAC7A8](a1);
  sub_241646BE0();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v16[5] = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v16[3] = (char *)v16 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v16[4] = (char *)v16 - v15;
  v16[7] = a2;
  v16[8] = a3;
  v16[9] = a4;
  v16[10] = a5;
  type metadata accessor for ExpandableWheelPickerView();
}

void sub_24167840C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;

  *(_QWORD *)(v6 - 184) = a1;
  v7 = sub_2416BAE58();
  MEMORY[0x242698604](v7);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
  v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v1);
  *(_QWORD *)(v6 - 136) = v8;
  *(_QWORD *)(v6 - 128) = v10;
  sub_2415C343C();
  v11 = sub_2416BA9D8();
  v13 = v12;
  v15 = v14 & 1;
  *(_QWORD *)(v6 - 136) = sub_2416BAC18();
  v16 = sub_2416BA990();
  v18 = v17;
  LOBYTE(v8) = v19;
  v21 = v20;
  sub_2415A431C(v11, v13, v15);
  swift_release();
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v6 - 136) = v16;
  *(_QWORD *)(v6 - 128) = v18;
  v23 = v8 & 1;
  *(_BYTE *)(v6 - 120) = v8 & 1;
  *(_QWORD *)(v6 - 112) = v21;
  *(_QWORD *)(v6 - 104) = KeyPath;
  *(_BYTE *)(v6 - 96) = 2;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_2416BCC80;
  v26 = *(_QWORD *)(v4 + 16);
  v25 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v6 - 176) = v4;
  *(_QWORD *)(v24 + 32) = v26;
  *(_QWORD *)(v24 + 40) = v25;
  *(_QWORD *)(v24 + 48) = 0x7470697263736544;
  *(_QWORD *)(v24 + 56) = 0xEB000000006E6F69;
  swift_bridgeObjectRetain();
  v27 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v28 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v28)
  {
    sub_2416BB128();

    sub_2415EF7CC();
    sub_2415F1DD8();
    v29 = *(_QWORD *)(v6 - 168);
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v16, v18, v23);
    swift_release();
    swift_bridgeObjectRelease();
    v30 = *(_QWORD *)(v6 - 160);
    sub_2415A85BC(v29, v30, (uint64_t (*)(_QWORD))sub_241646BE0);
    sub_241677CC0(*(_QWORD *)(v6 - 184), (_QWORD *)(v6 - 136));
    v31 = *(_QWORD *)(v6 - 136);
    v32 = *(_QWORD *)(v6 - 128);
    v33 = *(_QWORD *)(v6 - 120);
    v34 = *(_QWORD *)(v6 - 112);
    v35 = *(_QWORD *)(v6 - 152);
    sub_2415BEF64(v30, v35, (uint64_t (*)(_QWORD))sub_241646BE0);
    v36 = *(_QWORD *)(v6 - 144);
    sub_2415BEF64(v35, v36, (uint64_t (*)(_QWORD))sub_241646BE0);
    sub_24167A89C();
    v38 = v36 + *(int *)(v37 + 48);
    *(_QWORD *)v38 = 0;
    *(_BYTE *)(v38 + 8) = 1;
    v39 = (uint64_t *)(v36 + *(int *)(v37 + 64));
    *v39 = v31;
    v39[1] = v32;
    v39[2] = v33;
    v39[3] = v34;
    sub_241630990(v31, v32);
    sub_2415A6154(v30, (uint64_t (*)(_QWORD))sub_241646BE0);
    sub_2416309C0(v31, v32);
    sub_2415A6154(v35, (uint64_t (*)(_QWORD))sub_241646BE0);
  }
  else
  {
    __break(1u);
  }
}

void sub_241678708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_24167A550();
  v1 = MEMORY[0x24BDAC7A8](v0);
  v2 = MEMORY[0x24BDAC7A8](v1);
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for ExpandableWheelPickerView();
}

uint64_t sub_2416787D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  void (*v9)(uint64_t, uint64_t);

  v8 = *(void (**)(void))(v2 + *(int *)(a1 + 88));
  sub_2415BEF64(*(_QWORD *)(v7 - 128), v3, (uint64_t (*)(_QWORD))sub_24167A550);
  sub_24159CE88(&qword_25713F458, (uint64_t (*)(uint64_t))sub_24167A550, (uint64_t)&unk_2416C0968);
  sub_2416BAE04();
  v8();
  swift_release();
  sub_2415E3D20(v5, v1, v4);
  v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v5, v1);
  sub_2415E07B8(v4, v1, *(_QWORD *)(v7 - 120));
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v4, v1);
}

uint64_t sub_241678898@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, _QWORD *);
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD v21[2];
  void (*v22)(char *);
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v25 = a2;
  v3 = *(a1 - 1);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v24 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v21 - v6;
  v22 = *(void (**)(char *))(v3 + 16);
  v22((char *)v21 - v6);
  sub_2416BB290();
  v8 = sub_2416BB284();
  v9 = *(unsigned __int8 *)(v3 + 80);
  v10 = (v9 + 64) & ~v9;
  v21[1] = v9 | 7;
  v11 = (char *)swift_allocObject();
  v12 = MEMORY[0x24BEE6930];
  *((_QWORD *)v11 + 2) = v8;
  *((_QWORD *)v11 + 3) = v12;
  v14 = a1[2];
  v13 = a1[3];
  *((_QWORD *)v11 + 4) = v14;
  *((_QWORD *)v11 + 5) = v13;
  v15 = a1[5];
  v21[0] = a1[4];
  *((_QWORD *)v11 + 6) = v21[0];
  *((_QWORD *)v11 + 7) = v15;
  v16 = *(void (**)(char *, char *, _QWORD *))(v3 + 32);
  v16(&v11[v10], v7, a1);
  v17 = v24;
  ((void (*)(char *, uint64_t, _QWORD *))v22)(v24, v23, a1);
  v18 = sub_2416BB284();
  v19 = (char *)swift_allocObject();
  *((_QWORD *)v19 + 2) = v18;
  *((_QWORD *)v19 + 3) = MEMORY[0x24BEE6930];
  *((_QWORD *)v19 + 4) = v14;
  *((_QWORD *)v19 + 5) = v13;
  *((_QWORD *)v19 + 6) = v21[0];
  *((_QWORD *)v19 + 7) = v15;
  v16(&v19[v10], v17, a1);
  return sub_2416BAE40();
}

void sub_241678A40()
{
  type metadata accessor for ExpandableWheelPickerView();
}

uint64_t sub_241678A90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v42;
  _BYTE v43[80];

  *(_QWORD *)(v3 - 240) = a1;
  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v3 - 288) = &v43[-v5];
  v6 = sub_2416BB23C();
  v7 = *(_QWORD *)(v2 + 8);
  v8 = sub_2416BA204();
  v9 = MEMORY[0x24BDEDAB0];
  MEMORY[0x2426994BC](MEMORY[0x24BDEDAB0], v8);
  *(_QWORD *)(v3 - 280) = sub_2416BA63C();
  *(_QWORD *)(v3 - 360) = sub_2416BA150();
  v10 = sub_2416BB434();
  *(_QWORD *)(v3 - 96) = v7;
  *(_QWORD *)(v3 - 312) = v7;
  MEMORY[0x2426994BC](MEMORY[0x24BEE4AB0], v10, v3 - 96);
  v11 = sub_2416BA204();
  MEMORY[0x2426994BC](v9, v11);
  *(_QWORD *)(v3 - 344) = sub_2416BA63C();
  *(_QWORD *)(v3 - 352) = sub_2416BA150();
  sub_2416BA768();
  v12 = sub_2416BA150();
  *(_QWORD *)(v3 - 336) = v12;
  v13 = MEMORY[0x24BEE12D8];
  *(_QWORD *)(v3 - 304) = v6;
  v14 = MEMORY[0x2426994BC](v13, v6);
  *(_QWORD *)(v3 - 320) = v14;
  *(_QWORD *)(v3 - 136) = v6;
  *(_QWORD *)(v3 - 128) = v1;
  *(_QWORD *)(v3 - 120) = v12;
  *(_QWORD *)(v3 - 112) = v14;
  *(_QWORD *)(v3 - 104) = v7;
  v15 = sub_2416BAE94();
  *(_QWORD *)(v3 - 296) = v15;
  *(_QWORD *)(v3 - 272) = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  *(_QWORD *)(v3 - 368) = &v43[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v3 - 328) = &v43[-v18];
  v19 = *(_QWORD *)(v3 - 256);
  v20 = *(_QWORD *)(v3 - 248);
  *(_QWORD *)(v3 - 136) = *(_QWORD *)(v20 + 32);
  v21 = *(_QWORD *)(v3 - 264);
  *(_QWORD *)(v3 - 224) = v1;
  *(_QWORD *)(v3 - 216) = v21;
  v22 = v2;
  *(_QWORD *)(v3 - 208) = v2;
  *(_QWORD *)(v3 - 200) = v19;
  *(_QWORD *)(v3 - 376) = swift_getKeyPath();
  v23 = v4;
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v25 = *(_QWORD *)(v3 - 288);
  v26 = *(_QWORD *)(v3 - 240);
  v24(v25, v20, v26);
  v27 = v23;
  v28 = (*(unsigned __int8 *)(v23 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v29 = (char *)swift_allocObject();
  *((_QWORD *)v29 + 2) = v1;
  *((_QWORD *)v29 + 3) = v21;
  *((_QWORD *)v29 + 4) = v22;
  *((_QWORD *)v29 + 5) = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(&v29[v28], v25, v26);
  swift_bridgeObjectRetain();
  v30 = MEMORY[0x24BDEFB48];
  v31 = MEMORY[0x2426994BC](MEMORY[0x24BDEFB48], *(_QWORD *)(v3 - 280));
  *(_QWORD *)(v3 - 152) = MEMORY[0x24BDF1F80];
  *(_QWORD *)(v3 - 144) = v31;
  v32 = MEMORY[0x24BDED308];
  v33 = MEMORY[0x2426994BC](MEMORY[0x24BDED308], *(_QWORD *)(v3 - 360), v3 - 152);
  v34 = MEMORY[0x2426994BC](v30, *(_QWORD *)(v3 - 344));
  *(_QWORD *)(v3 - 168) = v33;
  *(_QWORD *)(v3 - 160) = v34;
  v35 = MEMORY[0x2426994BC](v32, *(_QWORD *)(v3 - 352), v3 - 168);
  v36 = sub_24159CE88(&qword_257139D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
  *(_QWORD *)(v3 - 184) = v35;
  *(_QWORD *)(v3 - 176) = v36;
  v42 = MEMORY[0x2426994BC](v32, *(_QWORD *)(v3 - 336), v3 - 184);
  v37 = *(_QWORD *)(v3 - 368);
  sub_2416BAE7C();
  *(_QWORD *)(v3 - 192) = v42;
  v38 = *(_QWORD *)(v3 - 296);
  MEMORY[0x2426994BC](MEMORY[0x24BDF4A08], v38, v3 - 192);
  v39 = *(_QWORD *)(v3 - 328);
  sub_2415E3D20(v37, v38, v39);
  v40 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 272) + 8);
  v40(v37, v38);
  sub_2415E07B8(v39, v38, *(_QWORD *)(v3 - 232));
  return ((uint64_t (*)(uint64_t, uint64_t))v40)(v39, v38);
}

void sub_241678EBC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  _QWORD v62[2];
  _QWORD v63[2];
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;

  v60 = a2;
  v57 = a5;
  v59 = *(_QWORD *)(a4 + 8);
  v8 = sub_2416BA204();
  v9 = MEMORY[0x24BDEDAB0];
  MEMORY[0x2426994BC](MEMORY[0x24BDEDAB0], v8);
  v54 = sub_2416BA63C();
  v10 = sub_2416BA150();
  v11 = sub_2416BB434();
  v68 = v59;
  MEMORY[0x2426994BC](MEMORY[0x24BEE4AB0], v11, &v68);
  v12 = sub_2416BA204();
  MEMORY[0x2426994BC](v9, v12);
  v56 = v10;
  v49 = sub_2416BA63C();
  v13 = sub_2416BA150();
  v51 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v47 - v14;
  sub_2416BA768();
  v48 = v13;
  v16 = sub_2416BA150();
  v55 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v52 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v53 = (uint64_t)&v47 - v19;
  v58 = a4;
  v20 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
  v64 = v20(a3, a4);
  v65 = v21;
  sub_2415C343C();
  v22 = sub_2416BA9D8();
  v24 = v23;
  v64 = v22;
  v65 = v23;
  v26 = v25 & 1;
  v66 = v25 & 1;
  v67 = v27;
  v50 = v15;
  v28 = (uint64_t)v15;
  v29 = MEMORY[0x24BDF1F80];
  sub_241675B3C(a1, 1, a3, MEMORY[0x24BDF1F80], v59, v28);
  sub_2415A431C(v22, v24, v26);
  swift_bridgeObjectRelease();
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_2416C14C0;
  v31 = *(_QWORD *)(v60 + 24);
  *(_QWORD *)(v30 + 32) = *(_QWORD *)(v60 + 16);
  *(_QWORD *)(v30 + 40) = v31;
  *(_QWORD *)(v30 + 48) = 0x72656B636950;
  *(_QWORD *)(v30 + 56) = 0xE600000000000000;
  *(_QWORD *)(v30 + 64) = 0x6E6F6974704FLL;
  *(_QWORD *)(v30 + 72) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v30 + 80) = v20(a3, v58);
  *(_QWORD *)(v30 + 88) = v32;
  v33 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v34 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v34)
  {
    sub_2416BB128();

    v35 = MEMORY[0x24BDEFB48];
    v36 = MEMORY[0x2426994BC](MEMORY[0x24BDEFB48], v54);
    v63[0] = v29;
    v63[1] = v36;
    v37 = MEMORY[0x24BDED308];
    v38 = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v56, v63);
    v39 = MEMORY[0x2426994BC](v35, v49);
    v62[0] = v38;
    v62[1] = v39;
    v40 = v48;
    v41 = MEMORY[0x2426994BC](v37, v48, v62);
    v42 = (uint64_t)v52;
    v43 = v50;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v43, v40);
    v44 = sub_24159CE88(&qword_257139D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
    v61[0] = v41;
    v61[1] = v44;
    MEMORY[0x2426994BC](v37, v16, v61);
    v45 = v53;
    sub_2415E3D20(v42, v16, v53);
    v46 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
    v46(v42, v16);
    sub_2415E07B8(v45, v16, v57);
    v46(v45, v16);
  }
  else
  {
    __break(1u);
  }
}

void sub_241679324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[10];

  v9 = sub_2416BA6CC();
  v11[3] = *(_QWORD *)(v9 - 8);
  v11[4] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11[1] = (char *)v11 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[2] = a5;
  v11[6] = a2;
  v11[7] = a3;
  v11[8] = a4;
  v11[9] = a5;
  type metadata accessor for ExpandableWheelPickerView();
}

uint64_t sub_2416793A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t (**v11)(void);
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v17[96];

  v7 = *(_QWORD *)(a1 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = &v17[-v9];
  v11 = (uint64_t (**)(void))(v4 + *(int *)(v8 + 76));
  if (*v11)
    v8 = (*v11)();
  *(_QWORD *)(v5 - 160) = v17;
  MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)&v17[-48] = v3;
  *(_QWORD *)&v17[-40] = v2;
  v12 = *(_QWORD *)(v5 - 144);
  *(_QWORD *)&v17[-32] = v1;
  *(_QWORD *)&v17[-24] = v12;
  *(_QWORD *)&v17[-16] = v4;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v10, v4, a1);
  v13 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v14 = (char *)swift_allocObject();
  *((_QWORD *)v14 + 2) = v3;
  *((_QWORD *)v14 + 3) = v2;
  *((_QWORD *)v14 + 4) = v1;
  *((_QWORD *)v14 + 5) = v12;
  (*(void (**)(char *, _BYTE *, uint64_t))(v7 + 32))(&v14[v13], v10, a1);
  sub_2416BAF60();
  v15 = *(_QWORD *)(v5 - 152);
  sub_2416BA6C0();
  sub_2416BA0CC();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 136) + 8))(v15, *(_QWORD *)(v5 - 128));
}

void sub_241679508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[11];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v12[7] = a4;
  v12[8] = a5;
  v12[5] = a2;
  v12[6] = a3;
  v12[0] = a1;
  v13 = sub_2416BAFE4();
  v16 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v12[10] = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2416BB008();
  v14 = *(_QWORD *)(v10 - 8);
  v15 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12[9] = (char *)v12 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a2;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  type metadata accessor for ExpandableWheelPickerView();
}

uint64_t sub_2416795E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  char v14;
  void *v15;
  void (*v16)(_BYTE *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v30[96];

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v2 - 256) = &v30[-v5];
  v6 = sub_2416BB020();
  *(_QWORD *)(v2 - 264) = v6;
  *(_QWORD *)(v2 - 240) = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = &v30[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  *(_QWORD *)(v2 - 248) = &v30[-v10];
  v11 = (char *)(v1 + *(int *)(a1 + 84));
  v12 = *v11;
  v13 = *((_QWORD *)v11 + 1);
  *(_BYTE *)(v2 - 136) = *v11;
  *(_QWORD *)(v2 - 128) = v13;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  swift_retain();
  sub_2416BAD14();
  v14 = *(_BYTE *)(v2 - 144);
  *(_BYTE *)(v2 - 136) = v12;
  *(_QWORD *)(v2 - 128) = v13;
  *(_BYTE *)(v2 - 65) = (v14 & 1) == 0;
  sub_2416BAD20();
  swift_release();
  sub_24167A3C8();
  v15 = (void *)sub_2416BB3BC();
  sub_2416BB014();
  MEMORY[0x242698820](v9, 0.05);
  v16 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v2 - 240) + 8);
  *(_QWORD *)(v2 - 240) = v16;
  v17 = *(_QWORD *)(v2 - 264);
  v16(v9, v17);
  v18 = *(_QWORD *)(v2 - 256);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v18, *(_QWORD *)(v2 - 272), a1);
  v19 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v20 = (char *)swift_allocObject();
  v21 = *(_QWORD *)(v2 - 224);
  *((_QWORD *)v20 + 2) = *(_QWORD *)(v2 - 232);
  *((_QWORD *)v20 + 3) = v21;
  v22 = *(_QWORD *)(v2 - 208);
  *((_QWORD *)v20 + 4) = *(_QWORD *)(v2 - 216);
  *((_QWORD *)v20 + 5) = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(&v20[v19], v18, a1);
  *(_QWORD *)(v2 - 104) = sub_24167A408;
  *(_QWORD *)(v2 - 96) = v20;
  *(_QWORD *)(v2 - 136) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v2 - 128) = 1107296256;
  *(_QWORD *)(v2 - 120) = sub_2416817C4;
  *(_QWORD *)(v2 - 112) = &block_descriptor_5;
  v23 = _Block_copy((const void *)(v2 - 136));
  v24 = *(_QWORD *)(v2 - 200);
  sub_2416BAFF0();
  *(_QWORD *)(v2 - 144) = MEMORY[0x24BEE4AF8];
  v25 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  sub_24159CE88(&qword_25713A538, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  sub_24159D6B0(0, &qword_25713A540, v25, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_24167A4A8();
  v27 = *(_QWORD *)(v2 - 192);
  v26 = *(_QWORD *)(v2 - 184);
  sub_2416BB4A0();
  v28 = *(_QWORD *)(v2 - 248);
  MEMORY[0x242698B98](v28, v24, v27, v23);
  _Block_release(v23);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 160) + 8))(v27, v26);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 176) + 8))(v24, *(_QWORD *)(v2 - 168));
  (*(void (**)(uint64_t, uint64_t))(v2 - 240))(v28, v17);
  return swift_release();
}

uint64_t (*sub_241679900(uint64_t a1))(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t (*result)(uint64_t, uint64_t, uint64_t, char);
  uint64_t v2;

  result = sub_241675E44(a1);
  if (result)
  {
    v2 = (uint64_t)result;
    MEMORY[0x24BDAC7A8](result);
    sub_2416BAF60();
    sub_2416BA0D8();
    swift_release();
    return (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))sub_2415A6144(v2);
  }
  return result;
}

void sub_2416799B4()
{
  type metadata accessor for ExpandableWheelPickerView();
}

uint64_t sub_2416799E4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t result;
  char v4;

  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  result = sub_2416BAD14();
  if (v4 == 1)
    return v1(a1);
  return result;
}

uint64_t sub_241679A58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = sub_2416BB434();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v34 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v31 - v9;
  v11 = *(_QWORD *)(v3 - 8);
  v12 = MEMORY[0x24BDAC7A8](v8);
  v31 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v32 = (char *)&v31 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v31 - v16;
  v33 = a1;
  v18 = *(int *)(a1 + 64);
  v19 = v1;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v20(v10, v1 + v18, v4);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v21(v10, 1, v3) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  v23 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v23(v17, v10, v3);
  v24 = v19 + *(int *)(v33 + 68);
  v25 = v34;
  v20(v34, v24, v4);
  if (v21(v25, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v34, v4);
  }
  else
  {
    v26 = v32;
    v23(v32, v34, v3);
    v27 = sub_2416BAE58();
    v28 = v31;
    MEMORY[0x242698604](v27);
    v29 = sub_2416BB08C();
    v30 = *(void (**)(char *, uint64_t))(v11 + 8);
    v30(v28, v3);
    if ((v29 & 1) != 0)
      sub_24167A33C((uint64_t)v17, v33);
    v30(v26, v3);
    return ((uint64_t (*)(char *, uint64_t))v30)(v17, v3);
  }
}

void sub_241679CB8()
{
  type metadata accessor for ExpandableWheelPickerView();
}

uint64_t sub_241679CE4(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(void);

  v3 = *(void (**)(void))(v1 + *(int *)(a1 + 76));
  if (v3)
    v3();
  return sub_241679D20(a1);
}

uint64_t sub_241679D20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = sub_2416BB434();
  v18 = *(_QWORD *)(v5 - 8);
  v19 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - v7;
  v9 = *(_QWORD *)(v4 - 8);
  v10 = MEMORY[0x24BDAC7A8](v6);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(uint64_t (**)(uint64_t))(v1 + *(int *)(a1 + 76));
  if (v13)
    v10 = v13(v10);
  MEMORY[0x24BDAC7A8](v10);
  *(&v17 - 6) = v4;
  *(_OWORD *)(&v17 - 5) = *(_OWORD *)(a1 + 24);
  *(&v17 - 3) = *(_QWORD *)(a1 + 40);
  *(&v17 - 2) = v1;
  sub_2416BAF60();
  sub_2416BA0D8();
  swift_release();
  v15 = v18;
  v14 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v8, v2 + *(int *)(a1 + 68), v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v8, v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, v4);
  sub_24167A33C((uint64_t)v12, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v4);
}

void sub_241679ECC()
{
  uint64_t v0[5];

  v0[3] = sub_2416B9B80();
  v0[4] = sub_2415A5300();
  __swift_allocate_boxed_opaque_existential_1(v0);
  type metadata accessor for ExpandableWheelPickerView();
}

uint64_t sub_241679F40()
{
  void (*v0)(_BYTE *, uint64_t, uint64_t, _QWORD);
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[136];

  sub_24159D6B0(0, &qword_25713F3D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  sub_2416BAFC0();
  v0(v4, v1, v2, 0);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

void sub_241679FB8()
{
  type metadata accessor for ExpandableWheelPickerView();
}

uint64_t sub_241679FE8()
{
  uint64_t v0;

  v0 = sub_2416BAE58();
  return MEMORY[0x242698604](v0);
}

void sub_24167A018()
{
  type metadata accessor for ExpandableWheelPickerView();
}

uint64_t sub_24167A048(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v4)(void);

  v4 = *(void (**)(void))(v1 + *(int *)(a1 + 76));
  if (v4)
    v4();
  return sub_24167A33C(v2, a1);
}

void sub_24167A088()
{
  type metadata accessor for ExpandableWheelPickerView();
}

uint64_t sub_24167A0B4()
{
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  return sub_2416BAD20();
}

uint64_t sub_24167A118()
{
  return sub_24167AB14((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241676648);
}

void sub_24167A128()
{
  sub_24167AFEC();
}

uint64_t sub_24167A134()
{
  return sub_24167B080((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241679508);
}

void objectdestroyTm_19()
{
  type metadata accessor for ExpandableWheelPickerView();
}

uint64_t sub_24167A18C(int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;

  v3 = v1
     + ((*(unsigned __int8 *)(*((_QWORD *)a1 - 1) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)a1 - 1) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v3 + a1[15];
  swift_release();
  swift_release();
  v5 = sub_2416BAE58();
  v6 = *(_QWORD *)(v15 - 8);
  v7 = *(void (**)(uint64_t))(v6 + 8);
  v7(v4 + *(int *)(v5 + 32));
  v8 = v3 + a1[16];
  v9 = *(unsigned int (**)(uint64_t, uint64_t))(v6 + 48);
  if (!v9(v8, 1))
    v7(v8);
  v10 = v3 + a1[17];
  if (!v9(v10, 1))
    v7(v10);
  sub_2415C38D4(*(_QWORD *)(v3 + a1[18]), *(_QWORD *)(v3 + a1[18] + 8), *(_BYTE *)(v3 + a1[18] + 16));
  if (*(_QWORD *)(v3 + a1[19]))
    swift_release();
  v11 = v3 + a1[20];
  v12 = sub_2416B9B80();
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA50];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  sub_24159D6B0(0, &qword_25713F3D8, v13, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_24167A330()
{
  sub_24167A414();
}

uint64_t sub_24167A33C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 16);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v2);
  sub_2416BAE58();
  return sub_2416BAE1C();
}

unint64_t sub_24167A3C8()
{
  unint64_t result;

  result = qword_25713A530;
  if (!qword_25713A530)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25713A530);
  }
  return result;
}

void sub_24167A408()
{
  sub_24167A414();
}

void sub_24167A414()
{
  type metadata accessor for ExpandableWheelPickerView();
}

void sub_24167A44C()
{
  sub_2416799B4();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

unint64_t sub_24167A4A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713A548;
  if (!qword_25713A548)
  {
    sub_24159D6B0(255, &qword_25713A540, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25713A548);
  }
  return result;
}

void sub_24167A508()
{
  sub_241679ECC();
}

uint64_t sub_24167A52C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24167A550()
{
  uint64_t result;

  result = qword_25713F3E0;
  if (!qword_25713F3E0)
  {
    sub_24167A824(255, &qword_25713F3E8, &qword_25713F3F0, (uint64_t (*)(uint64_t))sub_24167A61C, (void (*)(void))sub_24167A6C0);
    sub_24167A720();
    sub_24167A9E8();
    sub_24159CE88(&qword_25713F450, (uint64_t (*)(uint64_t))sub_24167A720, MEMORY[0x24BDF4700]);
    type metadata accessor for MedicalIDAXLayoutView();
  }
  return result;
}

void sub_24167A61C()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!qword_25713F3F8)
  {
    sub_2415E40F8();
    sub_241646BE0();
    sub_24159D7F0(255, &qword_25713D408, (uint64_t)&type metadata for ClearButtonView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_25713F3F8);
  }
}

unint64_t sub_24167A6C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713F400;
  if (!qword_25713F400)
  {
    sub_24159D6B0(255, &qword_25713F3F0, (uint64_t (*)(uint64_t))sub_24167A61C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v1);
    atomic_store(result, (unint64_t *)&qword_25713F400);
  }
  return result;
}

void sub_24167A720()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F408)
  {
    sub_24159D6B0(255, &qword_25713F410, (uint64_t (*)(uint64_t))sub_24167A798, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_24167A988();
    v0 = sub_2416BADF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F408);
  }
}

void sub_24167A798()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713F418)
  {
    sub_2415E40F8();
    sub_24167A824(255, &qword_25713F420, &qword_25713F428, (uint64_t (*)(uint64_t))sub_24167A89C, (void (*)(void))sub_24167A928);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713F418);
  }
}

void sub_24167A824(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), void (*a5)(void))
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_24159D6B0(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    a5();
    v7 = sub_2416BAD8C();
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_24167A89C()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713F430)
  {
    sub_241646BE0();
    sub_24159D7F0(255, &qword_25713D408, (uint64_t)&type metadata for ClearButtonView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713F430);
  }
}

unint64_t sub_24167A928()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713F438;
  if (!qword_25713F438)
  {
    sub_24159D6B0(255, &qword_25713F428, (uint64_t (*)(uint64_t))sub_24167A89C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v1);
    atomic_store(result, (unint64_t *)&qword_25713F438);
  }
  return result;
}

unint64_t sub_24167A988()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713F440;
  if (!qword_25713F440)
  {
    sub_24159D6B0(255, &qword_25713F410, (uint64_t (*)(uint64_t))sub_24167A798, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v1);
    atomic_store(result, (unint64_t *)&qword_25713F440);
  }
  return result;
}

unint64_t sub_24167A9E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713F448;
  if (!qword_25713F448)
  {
    sub_24167A824(255, &qword_25713F3E8, &qword_25713F3F0, (uint64_t (*)(uint64_t))sub_24167A61C, (void (*)(void))sub_24167A6C0);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF4498], v1);
    atomic_store(result, (unint64_t *)&qword_25713F448);
  }
  return result;
}

void sub_24167AA54()
{
  sub_24167AA70();
}

void sub_24167AA64()
{
  sub_24167AA70();
}

void sub_24167AA70()
{
  type metadata accessor for ExpandableWheelPickerView();
}

uint64_t sub_24167AAAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v8(v1 + ((v6 + 48) & ~v6), v2, v3, v4, v5);
}

void sub_24167AAF8()
{
  sub_241678708();
}

uint64_t sub_24167AB08()
{
  return sub_24167AB14((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241678A40);
}

uint64_t sub_24167AB14(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

void sub_24167AB2C()
{
  type metadata accessor for ExpandableWheelPickerView();
}

void sub_24167AB6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  sub_241678EBC(v1, v2 + ((v6 + 48) & ~v6), v4, v5, v3);
}

void sub_24167ABB8()
{
  type metadata accessor for ExpandableWheelPickerView();
}

void sub_24167ABF0()
{
  sub_241679FB8();
}

void objectdestroy_21Tm()
{
  type metadata accessor for ExpandableWheelPickerView();
}

uint64_t sub_24167AC70(int *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t);
  unint64_t v9;
  unsigned int (*v10)(unint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v16;

  v3 = (*(unsigned __int8 *)(*((_QWORD *)a1 - 1) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)a1 - 1) + 80);
  swift_unknownObjectRelease();
  v4 = v1 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v1 + v3 + a1[15];
  swift_release();
  swift_release();
  v6 = sub_2416BAE58();
  v7 = *(_QWORD *)(v16 - 8);
  v8 = *(void (**)(unint64_t))(v7 + 8);
  v8(v5 + *(int *)(v6 + 32));
  v9 = v1 + v3 + a1[16];
  v10 = *(unsigned int (**)(unint64_t, uint64_t))(v7 + 48);
  if (!v10(v9, 1))
    v8(v9);
  v11 = v4 + a1[17];
  if (!v10(v11, 1))
    v8(v11);
  sub_2415C38D4(*(_QWORD *)(v4 + a1[18]), *(_QWORD *)(v4 + a1[18] + 8), *(_BYTE *)(v4 + a1[18] + 16));
  if (*(_QWORD *)(v4 + a1[19]))
    swift_release();
  v12 = v4 + a1[20];
  v13 = sub_2416B9B80();
  v14 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA50];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  sub_24159D6B0(0, &qword_25713F3D8, v14, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_24167AE1C()
{
  type metadata accessor for ExpandableWheelPickerView();
}

void sub_24167AE54()
{
  sub_24167A018();
}

void sub_24167AE98()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F460)
  {
    sub_24159D6B0(255, &qword_25713F410, (uint64_t (*)(uint64_t))sub_24167A798, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F460);
  }
}

uint64_t sub_24167AF14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24167A824(0, &qword_25713F420, &qword_25713F428, (uint64_t (*)(uint64_t))sub_24167A89C, (void (*)(void))sub_24167A928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24167AF78(uint64_t a1)
{
  uint64_t v2;

  sub_24167A824(0, &qword_25713F420, &qword_25713F428, (uint64_t (*)(uint64_t))sub_24167A89C, (void (*)(void))sub_24167A928);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_24167AFE0()
{
  sub_24167AFEC();
}

void sub_24167AFEC()
{
  type metadata accessor for ExpandableWheelPickerView();
}

uint64_t sub_24167B024(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v8(v2 + ((v6 + 48) & ~v6), v1, v3, v4, v5);
}

uint64_t sub_24167B064()
{
  return sub_24167B080((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24167A088);
}

uint64_t sub_24167B080(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

void sub_24167B0A4(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_24159D6B0(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v5 = sub_2416BA0C0();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_24167B114(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t OpaqueTypeConformance2;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[2];
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[2];
  uint64_t v48;

  v1 = *a1;
  v2 = a1[2];
  v3 = sub_2416BB23C();
  v4 = *(_QWORD *)(v2 + 8);
  v5 = sub_2416BA204();
  v6 = MEMORY[0x24BDEDAB0];
  MEMORY[0x2426994BC](MEMORY[0x24BDEDAB0], v5);
  v7 = sub_2416BA63C();
  v8 = sub_2416BA150();
  v9 = sub_2416BB434();
  v48 = v4;
  MEMORY[0x2426994BC](MEMORY[0x24BEE4AB0], v9, &v48);
  v10 = sub_2416BA204();
  MEMORY[0x2426994BC](v6, v10);
  v11 = sub_2416BA63C();
  v12 = sub_2416BA150();
  sub_2416BA768();
  v13 = sub_2416BA150();
  MEMORY[0x2426994BC](MEMORY[0x24BEE12D8], v3);
  v14 = sub_2416BAE94();
  v15 = MEMORY[0x24BDEFB48];
  v16 = MEMORY[0x2426994BC](MEMORY[0x24BDEFB48], v7);
  v47[0] = MEMORY[0x24BDF1F80];
  v47[1] = v16;
  v17 = MEMORY[0x24BDED308];
  v46[0] = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v8, v47);
  v46[1] = MEMORY[0x2426994BC](v15, v11);
  v18 = MEMORY[0x2426994BC](v17, v12, v46);
  v19 = sub_24159CE88(&qword_257139D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
  v45[0] = v18;
  v45[1] = v19;
  v44 = MEMORY[0x2426994BC](v17, v13, v45);
  v20 = MEMORY[0x2426994BC](MEMORY[0x24BDF4A08], v14, &v44);
  v38 = MEMORY[0x24BDF1FA8];
  v39 = v1;
  v40 = v14;
  v41 = MEMORY[0x24BDF1F80];
  v42 = v4;
  v43 = v20;
  v21 = sub_2416BADC8();
  v22 = sub_2416BA150();
  v23 = sub_2416BA234();
  v37[0] = MEMORY[0x2426994BC](MEMORY[0x24BDF4570], v21);
  v37[1] = v19;
  v24 = MEMORY[0x2426994BC](v17, v22, v37);
  v38 = v22;
  v39 = v23;
  v25 = MEMORY[0x24BDEDB38];
  v40 = v24;
  v41 = MEMORY[0x24BDEDB38];
  v26 = MEMORY[0x242699480](255, &v38, MEMORY[0x24BDF23F8], 0);
  v27 = sub_2416B9B80();
  v38 = v22;
  v39 = v23;
  v40 = v24;
  v41 = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v29 = sub_2415A5300();
  v38 = v26;
  v39 = v27;
  v40 = OpaqueTypeConformance2;
  v41 = v29;
  sub_2416BAD98();
  sub_2416BB434();
  swift_getTupleTypeMetadata2();
  v30 = sub_2416BAFA8();
  v31 = sub_2416BACA8();
  sub_24161B9F8();
  v32 = sub_2416BA150();
  v36 = MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v30);
  v35[0] = MEMORY[0x2426994BC](MEMORY[0x24BDF3F50], v31, &v36);
  v35[1] = sub_24159CE88(qword_25713CDD0, (uint64_t (*)(uint64_t))sub_24161B9F8, MEMORY[0x24BDEFAD8]);
  v33 = MEMORY[0x2426994BC](v17, v32, v35);
  v38 = v32;
  v39 = v33;
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for EditNameCellView()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for EditNameCellView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EditNameCellView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EditNameCellView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EditNameCellView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EditNameCellView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EditNameCellView()
{
  return &type metadata for EditNameCellView;
}

uint64_t sub_24167B720()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24167B730@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[7];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[16];
  _QWORD v55[3];

  v2 = v1;
  v41 = a1;
  sub_24159D6B0(0, &qword_25713F478, (uint64_t (*)(uint64_t))MEMORY[0x24BDF0D18], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v36 - v4;
  sub_24167BC68(0);
  v39 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v38 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v8);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v9 = (void *)qword_25713A038;
  v10 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v10);
  v11 = v9;
  sub_2416B9C04();
  v12 = sub_2416BB134();
  v14 = v13;
  v15 = *((_QWORD *)v1 + 5);
  v36 = *((_QWORD *)v1 + 4);
  v37 = v12;
  v16 = v1[1];
  v52 = *v1;
  v53 = v16;
  v55[0] = v52;
  sub_24160E760((uint64_t)&v53, (uint64_t)v54);
  sub_2416BB290();
  swift_bridgeObjectRetain_n();
  sub_2415D0314((uint64_t)v55);
  swift_retain();
  sub_241609624((uint64_t)v54);
  v17 = sub_2416BB284();
  v18 = swift_allocObject();
  v19 = MEMORY[0x24BEE6930];
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = v19;
  v20 = v1[1];
  *(_OWORD *)(v18 + 32) = *v1;
  *(_OWORD *)(v18 + 48) = v20;
  *(_OWORD *)(v18 + 64) = v1[2];
  swift_bridgeObjectRetain();
  sub_2415D0314((uint64_t)v55);
  swift_retain();
  sub_241609624((uint64_t)v54);
  v21 = sub_2416BB284();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v21;
  *(_QWORD *)(v22 + 24) = v19;
  v23 = v2[1];
  *(_OWORD *)(v22 + 32) = *v2;
  *(_OWORD *)(v22 + 48) = v23;
  *(_OWORD *)(v22 + 64) = v2[2];
  sub_2416BAE40();
  sub_241619D28(v37, v14, v36, v15, v42, *((uint64_t *)&v42 + 1), v43, *((uint64_t *)&v43 + 1), (uint64_t)v50, 0, 0);
  swift_bridgeObjectRelease();
  v46 = v50[4];
  v47 = v50[5];
  v48 = v50[6];
  v49 = v51;
  v42 = v50[0];
  v43 = v50[1];
  v44 = v50[2];
  v45 = v50[3];
  sub_2416BA6D8();
  v24 = sub_2416BA6E4();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v5, 0, 1, v24);
  sub_241622880();
  v25 = v38;
  sub_2416BAB40();
  sub_24167BD90((uint64_t)v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  v27 = sub_2416BB128();
  v29 = v28;
  v31 = v39;
  v30 = v40;
  v32 = v41;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v41, v25, v40);
  sub_24167BE48();
  v34 = (uint64_t *)(v32 + *(int *)(v33 + 36));
  *v34 = KeyPath;
  v34[1] = v27;
  v34[2] = v29;
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v25, v30);
}

_QWORD *sub_24167BB80@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  sub_24159D6B0(0, (unint64_t *)&qword_25713BC70, (uint64_t (*)(uint64_t))sub_24167BCD8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  result = MEMORY[0x242698604](&v5);
  v3 = v5;
  v4 = v6;
  if (!v6)
  {
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_24167BBF0()
{
  sub_24159D6B0(0, (unint64_t *)&qword_25713BC70, (uint64_t (*)(uint64_t))sub_24167BCD8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  swift_bridgeObjectRetain();
  return sub_2416BAE1C();
}

void sub_24167BC68(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_25713F480)
  {
    v4[0] = &type metadata for ClearableAddableTextField;
    v4[1] = sub_241622880();
    v2 = MEMORY[0x242699480](a1, v4, MEMORY[0x24BDF3328], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_25713F480);
  }
}

void sub_24167BCD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A910)
  {
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A910);
  }
}

_QWORD *sub_24167BD30@<X0>(_QWORD *a1@<X8>)
{
  return sub_24167BB80(a1);
}

uint64_t objectdestroyTm_20()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24167BD84()
{
  return sub_24167BBF0();
}

uint64_t sub_24167BD90(uint64_t a1)
{
  uint64_t v2;

  sub_24159D6B0(0, &qword_25713F478, (uint64_t (*)(uint64_t))MEMORY[0x24BDF0D18], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24167BDE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2416BA2E8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_24167BE0C()
{
  swift_bridgeObjectRetain();
  return sub_2416BA2F4();
}

void sub_24167BE48()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F488)
  {
    sub_24167BC68(255);
    sub_24159D6B0(255, &qword_25713F490, (uint64_t (*)(uint64_t))sub_24167BCD8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F488);
  }
}

unint64_t sub_24167BEC8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];

  result = qword_25713F498;
  if (!qword_25713F498)
  {
    sub_24167BE48();
    v2 = v1;
    v3[2] = &type metadata for ClearableAddableTextField;
    v3[3] = sub_241622880();
    v3[0] = swift_getOpaqueTypeConformance2();
    v3[1] = sub_24167BF50();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713F498);
  }
  return result;
}

unint64_t sub_24167BF50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713F4A0;
  if (!qword_25713F4A0)
  {
    sub_24159D6B0(255, &qword_25713F490, (uint64_t (*)(uint64_t))sub_24167BCD8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF1028], v1);
    atomic_store(result, (unint64_t *)&qword_25713F4A0);
  }
  return result;
}

id MedicalIDBiometricsViewModel.init(medicalIDData:locale:heightFormatter:weightFormatter:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  id v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  id result;
  uint64_t v52;
  _QWORD v53[2];
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;

  v59 = a4;
  v63 = a3;
  v64 = a1;
  v65 = a2;
  v6 = 0x697274656D6F6942;
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_24159D6B0(0, &qword_257139F50, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDWeightFormatter, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v60 = (uint64_t)v53 - v9;
  v10 = type metadata accessor for MedicalIDWeightFormatter();
  v57 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_257139F58, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDHeightFormatter, v7);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v53 - v14;
  v55 = type metadata accessor for MedicalIDHeightFormatter();
  v16 = *(_QWORD *)(v55 - 8);
  v17 = MEMORY[0x24BDAC7A8](v55);
  v19 = (char *)v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v56 = (_QWORD *)((char *)v53 - v20);
  sub_24159F83C();
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v21 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v21 + 40) = 0xE900000000000044;
  v22 = 0xEA00000000007363;
  *(_QWORD *)(v21 + 48) = 0x697274656D6F6942;
  *(_QWORD *)(v21 + 56) = 0xEA00000000007363;
  v23 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v24 = (id)HKUIJoinStringsForAutomationIdentifier();

  v54 = v12;
  v58 = v10;
  if (v24)
  {
    v6 = sub_2416BB128();
    v22 = v25;

  }
  *a5 = v6;
  a5[1] = v22;
  v26 = type metadata accessor for MedicalIDBiometricsViewModel();
  sub_2415BEF64(v64, (uint64_t)a5 + *(int *)(v26 + 20), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  v61 = a5;
  v62 = v26;
  v27 = (char *)a5 + *(int *)(v26 + 24);
  v28 = sub_2416B9C10();
  v29 = *(_QWORD **)(v28 - 8);
  v30 = (void (*)(char *, uint64_t, uint64_t))v29[2];
  v31 = v65;
  v30(v27, (uint64_t)v65, v28);
  v32 = sub_2415CF0B0(v63, (uint64_t)v15, &qword_257139F58, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDHeightFormatter);
  v53[1] = v53;
  v33 = v29[8];
  MEMORY[0x24BDAC7A8](v32);
  v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0;
  v35 = (char *)v53 - v34;
  v30((char *)v53 - v34, (uint64_t)v31, v28);
  v36 = v55;
  v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v55);
  if ((_DWORD)v37 == 1)
  {
    v53[0] = v53;
    MEMORY[0x24BDAC7A8](v37);
    v38 = (char *)v53 - v34;
    v30(v38, (uint64_t)v35, v28);
    v30(v19, (uint64_t)v38, v28);
    v39 = sub_2416017BC((uint64_t)v38, 2);
    v40 = (void (*)(char *, uint64_t))v29[1];
    v40(v38, v28);
    *(_QWORD *)&v19[*(int *)(v36 + 20)] = v39;
    v41 = (uint64_t)v19;
    v42 = (uint64_t)v56;
    sub_2415A85BC(v41, (uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDHeightFormatter);
    v40(v35, v28);
    sub_241616634((uint64_t)v15, &qword_257139F58, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDHeightFormatter);
  }
  else
  {
    v40 = (void (*)(char *, uint64_t))v29[1];
    v40((char *)v53 - v34, v28);
    v42 = (uint64_t)v56;
    sub_2415A85BC((uint64_t)v15, (uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDHeightFormatter);
  }
  v43 = v59;
  v44 = v61;
  sub_2415A85BC(v42, (uint64_t)v61 + *(int *)(v62 + 28), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDHeightFormatter);
  v45 = v60;
  v46 = sub_2415CF0B0(v43, v60, &qword_257139F50, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDWeightFormatter);
  v56 = v53;
  MEMORY[0x24BDAC7A8](v46);
  v47 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0;
  v48 = (char *)v53 - v47;
  v49 = v65;
  v30((char *)v53 - v47, (uint64_t)v65, v28);
  v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v45, 1, v58);
  if ((_DWORD)v50 != 1)
  {
    sub_241616634(v43, &qword_257139F50, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDWeightFormatter);
    sub_241616634(v63, &qword_257139F58, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDHeightFormatter);
    v40(v49, v28);
    sub_2415A6154(v64, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
    v40(v48, v28);
    v52 = (uint64_t)v54;
    sub_2415A85BC(v45, (uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDWeightFormatter);
    return (id)sub_2415A85BC(v52, (uint64_t)v44 + *(int *)(v62 + 32), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDWeightFormatter);
  }
  MEMORY[0x24BDAC7A8](v50);
  v30((char *)v53 - v47, (uint64_t)v53 - v47, v28);
  result = objc_msgSend((id)objc_opt_self(), sel_sharedFormatter);
  if (result)
  {
    v52 = (uint64_t)v54;
    MedicalIDWeightFormatter.init(locale:personWeightFormatter:)((uint64_t)v53 - v47, result, (uint64_t)v54);
    sub_241616634(v59, &qword_257139F50, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDWeightFormatter);
    sub_241616634(v63, &qword_257139F58, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDHeightFormatter);
    v40(v65, v28);
    sub_2415A6154(v64, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
    v40(v48, v28);
    sub_241616634(v60, &qword_257139F50, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDWeightFormatter);
    v44 = v61;
    return (id)sub_2415A85BC(v52, (uint64_t)v44 + *(int *)(v62 + 32), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDWeightFormatter);
  }
  __break(1u);
  return result;
}

id MedicalIDBiometricsViewModel.formattedWeightText(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  id v13;
  id result;
  void *v15;
  id v16;
  uint64_t v17;
  _QWORD v18[2];

  v2 = *(int *)(type metadata accessor for MedicalIDBiometricsViewModel() + 32);
  sub_241601CC8(0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v18 - v6;
  sub_24167E444(0, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v18 - v9;
  sub_24167E348(a1, (uint64_t)v18 - v9, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    sub_24167E39C((uint64_t)v10, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930);
    return 0;
  }
  v11 = v18[1] + v2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  sub_2416B98EC();
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v12);
  result = objc_msgSend(*(id *)(v11 + *(int *)(type metadata accessor for MedicalIDWeightFormatter() + 24)), sel_numberFormatter);
  if (result)
  {
    v15 = result;
    v16 = objc_msgSend(result, sel_stringFromNumber_, v13);

    if (v16)
    {
      v17 = sub_2416BB128();

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return (id)v17;
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0;
  }
  __break(1u);
  return result;
}

Swift::String __swiftcall MedicalIDBiometricsViewModel.localizedWeightUnitDescription()()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String result;

  type metadata accessor for MedicalIDBiometricsViewModel();
  sub_2416389E4(1);
  v1 = v0;
  v2 = sub_241638B50();
  v3 = objc_msgSend(v1, sel_stringFromUnit_, v2);

  v4 = sub_2416BB128();
  v6 = v5;

  v7 = v4;
  v8 = v6;
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

id sub_24167C888(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  _QWORD v23[4];

  v3 = v2;
  v6 = type metadata accessor for HealthDemographicData();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, qword_257139AE8, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v23 - v12;
  v14 = objc_msgSend(a1, sel_suggestHealthData);
  v15 = 0;
  if (v14)
  {
    v15 = 0;
    if (!*(_QWORD *)(v3 + *(int *)(type metadata accessor for MedicalIDBiometricsViewModel() + 20) + 104))
    {
      swift_getKeyPath();
      v23[1] = a2;
      sub_2415A023C();
      sub_2416B9CAC();
      swift_release();
      v16 = a2 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data;
      swift_beginAccess();
      sub_2415CF0B0(v16, (uint64_t)v13, qword_257139AE8, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6))
      {
        sub_241616634((uint64_t)v13, qword_257139AE8, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData);
        return 0;
      }
      else
      {
        sub_2415BEF64((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for HealthDemographicData);
        sub_241616634((uint64_t)v13, qword_257139AE8, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData);
        v17 = *(id *)&v9[*(int *)(v6 + 32)];
        sub_2415A6154((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for HealthDemographicData);
        sub_24167E444(0, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930);
        MEMORY[0x24BDAC7A8](v18);
        v20 = (char *)v23 - v19;
        v21 = v17;
        sub_24163863C(v17, (uint64_t)v20);

        v15 = MedicalIDBiometricsViewModel.formattedWeightText(for:)((uint64_t)v20);
        sub_24167E39C((uint64_t)v20, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930);
      }
    }
  }
  return v15;
}

uint64_t MedicalIDBiometricsViewModel.weightMeasurement(for:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  _QWORD v16[3];
  char v17;
  uint64_t v18;

  v6 = type metadata accessor for MedicalIDBiometricsViewModel();
  if (!a2)
    goto LABEL_17;
  v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v7)
    goto LABEL_17;
  v18 = 0;
  MEMORY[0x24BDAC7A8](v6);
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    swift_bridgeObjectRetain();
    sub_2416BB4DC();
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
      goto LABEL_12;
    goto LABEL_17;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v16[0] = a1;
    v16[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a1 <= 0x20u && ((1 << a1) & 0x100003E01) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      v14 = (unsigned __int8 *)_swift_stdlib_strtod_clocale();
      if (v14)
      {
        v15 = *v14;
        swift_bridgeObjectRelease();
        if (!v15)
          goto LABEL_12;
        goto LABEL_17;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    swift_bridgeObjectRetain();
LABEL_10:
    v9 = (_BYTE *)v8;
    goto LABEL_11;
  }
  v8 = sub_2416BB518();
  swift_bridgeObjectRetain();
  if (v8)
    goto LABEL_10;
  v9 = 0;
LABEL_11:
  sub_24167E3D8(v9, (BOOL *)v16);
  v10 = v16[0];
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
LABEL_12:
    sub_241638B50();
    sub_2415C0788(0, &qword_25713BEE8);
    sub_2416B98E0();
    sub_241601CC8(0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a3, 0, 1, v11);
  }
LABEL_17:
  sub_241601CC8(0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a3, 1, 1, v13);
}

BOOL MedicalIDBiometricsViewModel.hasBiometricData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for MedicalIDBiometricsViewModel();
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = (char *)&v13 - v6;
  v8 = *(_QWORD *)(v0 + *(int *)(v5 + 20) + 96);
  sub_2415BEF64(v0, (uint64_t)&v13 - v6, v9);
  if (v8)
  {
    sub_2415A6154((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
    sub_2415BEF64(v0, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
    v10 = 1;
  }
  else
  {
    v11 = *(_QWORD *)&v7[*(int *)(v1 + 20) + 104];
    sub_2415A6154((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
    sub_2415BEF64(v0, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
    if (v11)
      v10 = 1;
    else
      v10 = *(_QWORD *)&v4[*(int *)(v1 + 20) + 88] != 0;
  }
  sub_2415A6154((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
  return v10;
}

BOOL MedicalIDBiometricsViewModel.hasHeightData.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for MedicalIDBiometricsViewModel() + 20) + 96) != 0;
}

BOOL MedicalIDBiometricsViewModel.hasWeightData.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for MedicalIDBiometricsViewModel() + 20) + 104) != 0;
}

BOOL MedicalIDBiometricsViewModel.hasBloodType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for MedicalIDBiometricsViewModel() + 20) + 88) != 0;
}

Swift::Bool __swiftcall MedicalIDBiometricsViewModel.suggestHealthData(with:)(MIUIDisplayConfiguration *with)
{
  return -[MIUIDisplayConfiguration suggestHealthData](with, sel_suggestHealthData);
}

Swift::String __swiftcall MedicalIDBiometricsViewModel.localizedBloodTypeDescription()()
{
  id v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  Swift::String result;

  type metadata accessor for MedicalIDBiometricsViewModel();
  v0 = (id)HKStringForBloodType();
  v1 = sub_2416BB128();
  v3 = v2;

  v4 = v1;
  v5 = v3;
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

Swift::String_optional __swiftcall MedicalIDBiometricsViewModel.localizedHeightDescription()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  Swift::String_optional result;
  uint64_t v16;

  sub_241601CC8(0, &qword_25713A180, (unint64_t *)&qword_25713A188, 0x24BDD1928, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v16 - v4;
  sub_24167E444(0, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188, 0x24BDD1928);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - v7;
  v9 = type metadata accessor for MedicalIDBiometricsViewModel();
  sub_241600A2C(*(void **)(v0 + *(int *)(v9 + 20) + 96), (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_24167E39C((uint64_t)v8, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188, 0x24BDD1928);
    v10 = 0;
    v11 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    v10 = sub_2416011E8((uint64_t)v5);
    v11 = v12;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v13 = v10;
  v14 = v11;
  result.value._object = v14;
  result.value._countAndFlagsBits = v13;
  return result;
}

void MedicalIDBiometricsViewModel.heightMeasurement()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MedicalIDBiometricsViewModel();
  sub_241600A2C(*(void **)(v1 + *(int *)(v3 + 20) + 96), a1);
}

Swift::String __swiftcall MedicalIDBiometricsViewModel.localizedHeightUnitDescription()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Swift::String result;
  uint64_t v15;

  v1 = v0 + *(int *)(type metadata accessor for MedicalIDBiometricsViewModel() + 28);
  v2 = sub_2416017BC(v1, 1);
  sub_2415C0788(0, (unint64_t *)&qword_25713A188);
  v3 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  sub_241601CC8(0, &qword_25713BE28, (unint64_t *)&qword_25713A188, 0x24BDD1928, MEMORY[0x24BDCD578]);
  MEMORY[0x24BDAC7A8](v6);
  sub_2416B9A84();
  v7 = (void *)sub_2416BB35C();
  v8 = objc_msgSend(v2, sel_stringFromUnit_, v7);

  v9 = sub_2416BB128();
  v11 = v10;

  v12 = v9;
  v13 = v11;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

void MedicalIDBiometricsViewModel.heightMeasurement(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for MedicalIDBiometricsViewModel();
  sub_241600A2C(a1, a2);
}

uint64_t MedicalIDBiometricsViewModel.formattedHeight(with:)(uint64_t a1)
{
  type metadata accessor for MedicalIDBiometricsViewModel();
  return sub_2416011E8(a1);
}

uint64_t MedicalIDBiometricsViewModel.formattedHeightForPickers(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD v20[3];

  v20[1] = a1;
  sub_241601CC8(0, &qword_25713F4A8, (unint64_t *)&qword_25713A188, 0x24BDD1928, MEMORY[0x24BDCB500]);
  v2 = v1;
  v20[0] = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v20 - v3;
  sub_241601CC8(0, &qword_25713F4B0, (unint64_t *)&qword_25713A188, 0x24BDD1928, MEMORY[0x24BDCB4E8]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v20 - v8;
  sub_2415C0788(0, (unint64_t *)&qword_25713A188);
  sub_2416B98F8();
  sub_24159D6B0(0, (unint64_t *)&qword_25713F4B8, (uint64_t (*)(uint64_t))sub_24167E4A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v20 - v11;
  sub_24167E4A8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  sub_241601CC8(0, &qword_25713BE28, (unint64_t *)&qword_25713A188, 0x24BDD1928, MEMORY[0x24BDCD578]);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v20 - v17;
  sub_2416B9A78();
  sub_2416B98BC();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  sub_241616634((uint64_t)v12, (unint64_t *)&qword_25713F4B8, (uint64_t (*)(uint64_t))sub_24167E4A8);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_241601CC8(0, &qword_25713A180, (unint64_t *)&qword_25713A188, 0x24BDD1928, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  sub_24167E544();
  sub_2416B991C();
  (*(void (**)(char *, uint64_t))(v20[0] + 8))(v4, v2);
  return v20[2];
}

Swift::String_optional __swiftcall MedicalIDBiometricsViewModel.localizedWeightDescription()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  Swift::String_optional result;
  uint64_t v16;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for MedicalIDBiometricsViewModel() + 20) + 104);
  sub_241601CC8(0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v16 - v5;
  sub_24167E444(0, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - v8;
  sub_24163863C(v1, (uint64_t)&v16 - v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_24167E39C((uint64_t)v9, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930);
    v10 = 0;
    v11 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    type metadata accessor for MedicalIDWeightFormatter();
    sub_2415C0788(0, &qword_25713BEE8);
    v10 = sub_2416BB3E0();
    v11 = v12;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  v13 = v10;
  v14 = v11;
  result.value._object = v14;
  result.value._countAndFlagsBits = v13;
  return result;
}

void MedicalIDBiometricsViewModel.weightMeasurement()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MedicalIDBiometricsViewModel();
  sub_24163863C(*(void **)(v1 + *(int *)(v3 + 20) + 104), a1);
}

void MedicalIDBiometricsViewModel.weightMeasurement(for:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for MedicalIDBiometricsViewModel();
  sub_24163863C(a1, a2);
}

void MedicalIDBiometricsViewModel.validationResult(for:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38[2];
  id v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;

  v4 = type metadata accessor for BasicAlertModel.Action();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(a1 + 104);
  if (!v8)
    goto LABEL_7;
  v9 = (void *)objc_opt_self();
  v10 = v8;
  v11 = objc_msgSend(v9, sel_gramUnitWithMetricPrefix_, 9);
  objc_msgSend(v10, sel_doubleValueForUnit_, v11);
  v13 = v12;

  objc_msgSend((id)objc_opt_self(), sel_maximumWeightInKilograms);
  if (v13 <= v14)
  {

LABEL_7:
    *(_QWORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return;
  }
  v40 = v4;
  v44 = v5;
  v45 = v10;
  v15 = sub_2416BB0EC();
  v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
  MEMORY[0x24BDAC7A8](v15);
  v41 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v17 = (void *)qword_25713A038;
  v18 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v18);
  v39 = v17;
  sub_2416B9C04();
  v19 = sub_2416BB134();
  v42 = v20;
  v43 = v19;
  v38[1] = v38;
  MEMORY[0x24BDAC7A8](v19);
  v21 = sub_2416BB098();
  MEMORY[0x24BDAC7A8](v21);
  v38[0] = v39;
  sub_2416B9C04();
  v22 = sub_2416BB134();
  v39 = v23;
  MEMORY[0x24BDAC7A8](v22);
  v24 = sub_2416BB098();
  MEMORY[0x24BDAC7A8](v24);
  v25 = v38[0];
  sub_2416B9C04();
  v26 = sub_2416BB134();
  v28 = v27;
  v29 = v40;
  v30 = &v7[*(int *)(v40 + 24)];
  sub_2416B9EB0();
  v31 = sub_2416B9EBC();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
  sub_2416B9B74();
  v32 = (uint64_t *)&v7[*(int *)(v29 + 20)];
  *v32 = v26;
  v32[1] = v28;
  v33 = &v7[*(int *)(v29 + 28)];
  sub_24159D6B0(0, &qword_257139D78, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = 0;
  v34 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_2416BCF30;
  sub_2415A85BC((uint64_t)v7, v35 + v34, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);

  v36 = v42;
  *(_QWORD *)a2 = v43;
  *(_QWORD *)(a2 + 8) = v36;
  v37 = v39;
  *(_QWORD *)(a2 + 16) = v22;
  *(_QWORD *)(a2 + 24) = v37;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = v35;
}

void MedicalIDBiometricsViewModel.update(medicalIDData:heightMeasurement:weightMeasurement:bloodType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  id v7;

  *(_QWORD *)(a1 + 88) = a4;
  v6 = sub_24167DD58(a2);

  *(_QWORD *)(a1 + 96) = v6;
  v7 = sub_24167DFB4(a3);

  *(_QWORD *)(a1 + 104) = v7;
}

id sub_24167DD58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  double v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;
  char *v19;

  sub_241601CC8(0, &qword_25713A180, (unint64_t *)&qword_25713A188, 0x24BDD1928, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v19 = (char *)&v18 - v5;
  sub_24167E444(0, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188, 0x24BDD1928);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - v7;
  sub_24167E348(a1, (uint64_t)&v18 - v7, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188, 0x24BDD1928);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3) == 1)
  {
    sub_24167E39C((uint64_t)v8, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188, 0x24BDD1928);
    return 0;
  }
  else
  {
    v10 = v19;
    v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v19, v8, v3);
    MEMORY[0x24BDAC7A8](v11);
    v12 = (char *)&v18 - v5;
    v13 = objc_msgSend((id)objc_opt_self(), sel_meters);
    sub_2416B9910();

    v14 = objc_msgSend((id)objc_opt_self(), sel_meterUnit);
    sub_2416B98EC();
    v9 = objc_msgSend((id)objc_opt_self(), sel_quantityWithUnit_doubleValue_, v14, v15);

    v16 = *(void (**)(char *, uint64_t))(v4 + 8);
    v16(v12, v3);
    v16(v10, v3);
  }
  return v9;
}

id sub_24167DFB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  double v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;
  char *v19;

  sub_241601CC8(0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v19 = (char *)&v18 - v5;
  sub_24167E444(0, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - v7;
  sub_24167E348(a1, (uint64_t)&v18 - v7, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3) == 1)
  {
    sub_24167E39C((uint64_t)v8, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930);
    return 0;
  }
  else
  {
    v10 = v19;
    v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v19, v8, v3);
    MEMORY[0x24BDAC7A8](v11);
    v12 = (char *)&v18 - v5;
    v13 = objc_msgSend((id)objc_opt_self(), sel_kilograms);
    sub_2416B9910();

    v14 = objc_msgSend((id)objc_opt_self(), sel_gramUnitWithMetricPrefix_, 9);
    sub_2416B98EC();
    v9 = objc_msgSend((id)objc_opt_self(), sel_quantityWithUnit_doubleValue_, v14, v15);

    v16 = *(void (**)(char *, uint64_t))(v4 + 8);
    v16(v12, v3);
    v16(v10, v3);
  }
  return v9;
}

uint64_t type metadata accessor for MedicalIDBiometricsViewModel()
{
  uint64_t result;

  result = qword_25713F530;
  if (!qword_25713F530)
    return swift_getSingletonMetadata();
  return result;
}

_BYTE *sub_24167E250@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_24167E2B8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

_QWORD *sub_24167E30C@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_24167E348(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t v8;

  sub_24167E444(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_24167E39C(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v6;

  sub_24167E444(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

_BYTE *sub_24167E3D8@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void sub_24167E444(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_241601CC8(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
    v6 = sub_2416BB434();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_24167E4A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F4C0)
  {
    sub_24167E500();
    v0 = sub_2416B9A6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F4C0);
  }
}

unint64_t sub_24167E500()
{
  unint64_t result;

  result = qword_25713F4C8;
  if (!qword_25713F4C8)
  {
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE13D0], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&qword_25713F4C8);
  }
  return result;
}

unint64_t sub_24167E544()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713F4D0;
  if (!qword_25713F4D0)
  {
    sub_241601CC8(255, &qword_25713F4A8, (unint64_t *)&qword_25713A188, 0x24BDD1928, MEMORY[0x24BDCB500]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDCB520], v1);
    atomic_store(result, (unint64_t *)&qword_25713F4D0);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MedicalIDBiometricsViewModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  id v76;
  id v77;
  void *v79;
  void *v80;
  uint64_t v81;
  char *__dst;
  int *v86;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    v25 = (uint64_t *)(v24 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a3[5];
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (char *)a2 + v6;
    v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    *v7 = *(uint64_t *)((char *)a2 + v6);
    v7[1] = v9;
    v11 = *(uint64_t *)((char *)a2 + v6 + 16);
    v10 = *(uint64_t *)((char *)a2 + v6 + 24);
    v7[2] = v11;
    v7[3] = v10;
    v12 = *((_QWORD *)v8 + 5);
    v7[4] = *((_QWORD *)v8 + 4);
    v7[5] = v12;
    v13 = *((_QWORD *)v8 + 7);
    v7[6] = *((_QWORD *)v8 + 6);
    v7[7] = v13;
    v14 = *((_QWORD *)v8 + 9);
    v7[8] = *((_QWORD *)v8 + 8);
    v7[9] = v14;
    v15 = *((_QWORD *)v8 + 11);
    v7[10] = *((_QWORD *)v8 + 10);
    v7[11] = v15;
    v79 = (void *)*((_QWORD *)v8 + 12);
    v80 = (void *)*((_QWORD *)v8 + 13);
    v7[12] = v79;
    v7[13] = v80;
    v86 = (int *)type metadata accessor for MedicalIDData();
    v16 = v86[13];
    __dst = (char *)v7 + v16;
    v17 = &v8[v16];
    v18 = sub_2416B9B50();
    v81 = *(_QWORD *)(v18 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = v79;
    v21 = v80;
    if (v19(v17, 1, v18))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      v23 = v81;
    }
    else
    {
      v23 = v81;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(__dst, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(__dst, 0, 1, v18);
    }
    v26 = v86[14];
    v27 = (char *)v7 + v26;
    v28 = &v8[v26];
    if (v19(&v8[v26], 1, v18))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v27, v28, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v27, 0, 1, v18);
    }
    v30 = v86[15];
    v31 = (_QWORD *)((char *)v7 + v30);
    v32 = &v8[v30];
    v33 = *((_QWORD *)v32 + 1);
    *v31 = *(_QWORD *)v32;
    v31[1] = v33;
    v34 = v86[16];
    v35 = (_QWORD *)((char *)v7 + v34);
    v36 = &v8[v34];
    v37 = *((_QWORD *)v36 + 1);
    *v35 = *(_QWORD *)v36;
    v35[1] = v37;
    *((_BYTE *)v7 + v86[17]) = v8[v86[17]];
    *((_BYTE *)v7 + v86[18]) = v8[v86[18]];
    v38 = v86[19];
    v39 = (char *)v7 + v38;
    v40 = (uint64_t *)&v8[v38];
    v41 = *(_QWORD *)&v8[v38 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v41 >> 60 == 15)
    {
      *(_OWORD *)v39 = *(_OWORD *)v40;
    }
    else
    {
      v42 = *v40;
      sub_2415A0A90(*v40, v41);
      *(_QWORD *)v39 = v42;
      *((_QWORD *)v39 + 1) = v41;
    }
    v43 = v19;
    v44 = v86[20];
    v45 = (char *)v7 + v44;
    v46 = &v8[v44];
    v47 = sub_2416B9A18();
    v48 = *(_QWORD *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    v50 = v86[21];
    v51 = *(void **)&v8[v50];
    *(_QWORD *)((char *)v7 + v50) = v51;
    v52 = v86[22];
    v53 = (char *)v7 + v52;
    v54 = &v8[v52];
    v55 = v51;
    if (v43(v54, 1, v18))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v53, v54, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v53, 0, 1, v18);
    }
    v57 = a3[6];
    v25 = a1;
    v58 = (char *)a1 + v57;
    v59 = (char *)a2 + v57;
    v60 = sub_2416B9C10();
    v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
    v61(v58, v59, v60);
    v62 = a3[7];
    v63 = (char *)a1 + v62;
    v64 = (char *)a2 + v62;
    v61((char *)a1 + v62, (char *)a2 + v62, v60);
    v65 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    v66 = *(void **)&v64[v65];
    *(_QWORD *)&v63[v65] = v66;
    v67 = a3[8];
    v68 = (char *)a1 + v67;
    v69 = (char *)a2 + v67;
    v70 = v66;
    v61(v68, v69, v60);
    v71 = type metadata accessor for MedicalIDWeightFormatter();
    v72 = *(int *)(v71 + 20);
    v73 = *(void **)&v69[v72];
    *(_QWORD *)&v68[v72] = v73;
    v74 = *(int *)(v71 + 24);
    v75 = *(void **)&v69[v74];
    *(_QWORD *)&v68[v74] = v75;
    v76 = v73;
    v77 = v75;
  }
  return v25;
}

void destroy for MedicalIDBiometricsViewModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = v4 + v5[13];
  v7 = sub_2416B9B50();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v10 = v4 + v5[14];
  if (!v9(v10, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)(v4 + v5[19]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_2415A0DAC(*v11, v12);
  v13 = v4 + v5[20];
  v14 = sub_2416B9A18();
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);

  v16 = v4 + v5[22];
  if (!v9(v16, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v16, v7);
  v17 = a1 + a2[6];
  v18 = sub_2416B9C10();
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(v17, v18);
  v20 = a1 + a2[7];
  v19(v20, v18);

  v21 = a1 + a2[8];
  v19(v21, v18);
  v22 = type metadata accessor for MedicalIDWeightFormatter();

}

char *initializeWithCopy for MedicalIDBiometricsViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  id v72;
  id v73;
  char *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  char *__dst;
  int *v83;

  v3 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v3;
  v4 = a3[5];
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = *(_QWORD *)&a2[v4 + 8];
  *(_QWORD *)v5 = *(_QWORD *)&a2[v4];
  *((_QWORD *)v5 + 1) = v7;
  v9 = *(_QWORD *)&a2[v4 + 16];
  v8 = *(_QWORD *)&a2[v4 + 24];
  *((_QWORD *)v5 + 2) = v9;
  *((_QWORD *)v5 + 3) = v8;
  v10 = *((_QWORD *)v6 + 5);
  *((_QWORD *)v5 + 4) = *((_QWORD *)v6 + 4);
  *((_QWORD *)v5 + 5) = v10;
  v11 = *((_QWORD *)v6 + 7);
  *((_QWORD *)v5 + 6) = *((_QWORD *)v6 + 6);
  *((_QWORD *)v5 + 7) = v11;
  v12 = *((_QWORD *)v6 + 9);
  *((_QWORD *)v5 + 8) = *((_QWORD *)v6 + 8);
  *((_QWORD *)v5 + 9) = v12;
  v13 = *((_QWORD *)v6 + 11);
  *((_QWORD *)v5 + 10) = *((_QWORD *)v6 + 10);
  *((_QWORD *)v5 + 11) = v13;
  v76 = (void *)*((_QWORD *)v6 + 12);
  v77 = (void *)*((_QWORD *)v6 + 13);
  *((_QWORD *)v5 + 12) = v76;
  *((_QWORD *)v5 + 13) = v77;
  v83 = (int *)type metadata accessor for MedicalIDData();
  v14 = v83[13];
  __dst = &v5[v14];
  v75 = &v6[v14];
  v15 = sub_2416B9B50();
  v78 = *(_QWORD *)(v15 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = v76;
  v18 = v77;
  if (v16(v75, 1, v15))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v75, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    v20 = v78;
  }
  else
  {
    v20 = v78;
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(__dst, v75, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(__dst, 0, 1, v15);
  }
  v21 = v83[14];
  v22 = &v5[v21];
  v23 = &v6[v21];
  v24 = v16;
  if (v16(&v6[v21], 1, v15))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v22, v23, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, v15);
  }
  v26 = v83[15];
  v27 = &v5[v26];
  v28 = &v6[v26];
  v29 = *((_QWORD *)v28 + 1);
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *((_QWORD *)v27 + 1) = v29;
  v30 = v83[16];
  v31 = &v5[v30];
  v32 = &v6[v30];
  v33 = *((_QWORD *)v32 + 1);
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = v33;
  v5[v83[17]] = v6[v83[17]];
  v5[v83[18]] = v6[v83[18]];
  v34 = v83[19];
  v35 = &v5[v34];
  v36 = (uint64_t *)&v6[v34];
  v37 = *(_QWORD *)&v6[v34 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v37 >> 60 == 15)
  {
    *(_OWORD *)v35 = *(_OWORD *)v36;
  }
  else
  {
    v38 = *v36;
    sub_2415A0A90(*v36, v37);
    *(_QWORD *)v35 = v38;
    *((_QWORD *)v35 + 1) = v37;
  }
  v39 = v24;
  v40 = v83[20];
  v41 = &v5[v40];
  v42 = &v6[v40];
  v43 = sub_2416B9A18();
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  v46 = v83[21];
  v47 = *(void **)&v6[v46];
  *(_QWORD *)&v5[v46] = v47;
  v48 = v83[22];
  v49 = &v5[v48];
  v50 = &v6[v48];
  v51 = v47;
  if (v39(v50, 1, v15))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v49, v50, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v49, 0, 1, v15);
  }
  v53 = a3[6];
  v54 = &a1[v53];
  v55 = &a2[v53];
  v56 = sub_2416B9C10();
  v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
  v57(v54, v55, v56);
  v58 = a3[7];
  v59 = &a1[v58];
  v60 = &a2[v58];
  v57(&a1[v58], &a2[v58], v56);
  v61 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v62 = *(void **)&v60[v61];
  *(_QWORD *)&v59[v61] = v62;
  v63 = a3[8];
  v64 = &a1[v63];
  v65 = &a2[v63];
  v66 = v62;
  v57(v64, v65, v56);
  v67 = type metadata accessor for MedicalIDWeightFormatter();
  v68 = *(int *)(v67 + 20);
  v69 = *(void **)&v65[v68];
  *(_QWORD *)&v64[v68] = v69;
  v70 = *(int *)(v67 + 24);
  v71 = *(void **)&v65[v70];
  *(_QWORD *)&v64[v70] = v71;
  v72 = v69;
  v73 = v71;
  return a1;
}

char *assignWithCopy for MedicalIDBiometricsViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  id v84;
  uint64_t v85;
  void *v86;
  void *v87;
  id v88;
  uint64_t (*v90)(char *, uint64_t, uint64_t);
  uint64_t v91;
  int *v92;
  char *v93;
  char *v94;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v92 = a3;
  v93 = a2;
  v6 = a3[5];
  v94 = a1;
  v7 = &a1[v6];
  v8 = &a2[v6];
  *(_QWORD *)v7 = *(_QWORD *)&a2[v6];
  *((_QWORD *)v7 + 1) = *(_QWORD *)&a2[v6 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
  *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 5) = *((_QWORD *)v8 + 5);
  *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
  *((_QWORD *)v7 + 8) = *((_QWORD *)v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 9) = *((_QWORD *)v8 + 9);
  *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
  v9 = (void *)*((_QWORD *)v7 + 12);
  v10 = (void *)*((_QWORD *)v8 + 12);
  *((_QWORD *)v7 + 12) = v10;
  v11 = v10;

  v12 = (void *)*((_QWORD *)v7 + 13);
  v13 = (void *)*((_QWORD *)v8 + 13);
  *((_QWORD *)v7 + 13) = v13;
  v14 = v13;

  v15 = (int *)type metadata accessor for MedicalIDData();
  v16 = v15[13];
  v17 = &v7[v16];
  v18 = &v8[v16];
  v19 = sub_2416B9B50();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
LABEL_7:
  v25 = v15[14];
  v26 = &v7[v25];
  v27 = &v8[v25];
  v28 = v21(&v7[v25], 1, v19);
  v29 = v21(v27, 1, v19);
  v91 = v20;
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v26, v27, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v19);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v26, v27, v19);
LABEL_13:
  v31 = v15[15];
  v32 = &v7[v31];
  v33 = &v8[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = v15[16];
  v35 = &v7[v34];
  v36 = &v8[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v15[17]] = v8[v15[17]];
  v7[v15[18]] = v8[v15[18]];
  v37 = v15[19];
  v38 = (uint64_t *)&v7[v37];
  v39 = (uint64_t *)&v8[v37];
  v40 = *(_QWORD *)&v8[v37 + 8];
  v90 = v21;
  if (*(_QWORD *)&v7[v37 + 8] >> 60 == 15)
  {
    if (v40 >> 60 != 15)
    {
      v41 = *v39;
      sub_2415A0A90(*v39, v40);
      *v38 = v41;
      v38[1] = v40;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v40 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v38);
LABEL_18:
    *(_OWORD *)v38 = *(_OWORD *)v39;
    goto LABEL_20;
  }
  v42 = *v39;
  sub_2415A0A90(*v39, v40);
  v43 = *v38;
  v44 = v38[1];
  *v38 = v42;
  v38[1] = v40;
  sub_2415A0DAC(v43, v44);
LABEL_20:
  v45 = v15[20];
  v46 = &v7[v45];
  v47 = &v8[v45];
  v48 = sub_2416B9A18();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v46, 1, v48);
  v52 = v50(v47, 1, v48);
  if (v51)
  {
    v53 = v90;
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v53 = v90;
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 24))(v46, v47, v48);
LABEL_26:
  v55 = v15[21];
  v56 = *(void **)&v7[v55];
  v57 = *(void **)&v8[v55];
  *(_QWORD *)&v7[v55] = v57;
  v58 = v57;

  v59 = v15[22];
  v60 = &v7[v59];
  v61 = &v8[v59];
  v62 = v53(&v7[v59], 1, v19);
  v63 = v53(v61, 1, v19);
  if (!v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v91 + 24))(v60, v61, v19);
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v91 + 8))(v60, v19);
    goto LABEL_31;
  }
  if (v63)
  {
LABEL_31:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v60, v61, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v60, 0, 1, v19);
LABEL_32:
  v65 = v92[6];
  v66 = &v94[v65];
  v67 = &v93[v65];
  v68 = sub_2416B9C10();
  v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 24);
  v69(v66, v67, v68);
  v70 = v92[7];
  v71 = &v94[v70];
  v72 = &v93[v70];
  v69(&v94[v70], &v93[v70], v68);
  v73 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v74 = *(void **)&v72[v73];
  v75 = *(void **)&v71[v73];
  *(_QWORD *)&v71[v73] = v74;
  v76 = v74;

  v77 = v92[8];
  v78 = &v94[v77];
  v79 = &v93[v77];
  v69(&v94[v77], &v93[v77], v68);
  v80 = type metadata accessor for MedicalIDWeightFormatter();
  v81 = *(int *)(v80 + 20);
  v82 = *(void **)&v79[v81];
  v83 = *(void **)&v78[v81];
  *(_QWORD *)&v78[v81] = v82;
  v84 = v82;

  v85 = *(int *)(v80 + 24);
  v86 = *(void **)&v79[v85];
  v87 = *(void **)&v78[v85];
  *(_QWORD *)&v78[v85] = v86;
  v88 = v86;

  return v94;
}

char *initializeWithTake for MedicalIDBiometricsViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unsigned int (*v43)(char *, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = a3[5];
  v5 = &a1[v4];
  v6 = &a2[v4];
  *(_OWORD *)v5 = *(_OWORD *)&a2[v4];
  *((_QWORD *)v5 + 2) = *(_QWORD *)&a2[v4 + 16];
  *(_OWORD *)(v5 + 24) = *(_OWORD *)&a2[v4 + 24];
  *(_OWORD *)(v5 + 40) = *(_OWORD *)&a2[v4 + 40];
  *(_OWORD *)(v5 + 56) = *(_OWORD *)&a2[v4 + 56];
  *(_OWORD *)(v5 + 72) = *(_OWORD *)&a2[v4 + 72];
  *((_QWORD *)v5 + 11) = *(_QWORD *)&a2[v4 + 88];
  *((_OWORD *)v5 + 6) = *(_OWORD *)&a2[v4 + 96];
  v7 = (int *)type metadata accessor for MedicalIDData();
  v8 = v7[13];
  v9 = &v5[v8];
  v10 = &v6[v8];
  v11 = sub_2416B9B50();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = v7[14];
  v16 = &v5[v15];
  v17 = &v6[v15];
  v43 = v13;
  if (v13(&v6[v15], 1, v11))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v17, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  *(_OWORD *)&v5[v7[15]] = *(_OWORD *)&v6[v7[15]];
  *(_OWORD *)&v5[v7[16]] = *(_OWORD *)&v6[v7[16]];
  v5[v7[17]] = v6[v7[17]];
  v5[v7[18]] = v6[v7[18]];
  *(_OWORD *)&v5[v7[19]] = *(_OWORD *)&v6[v7[19]];
  v19 = v7[20];
  v20 = &v5[v19];
  v21 = &v6[v19];
  v22 = sub_2416B9A18();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *(_QWORD *)&v5[v7[21]] = *(_QWORD *)&v6[v7[21]];
  v25 = v7[22];
  v26 = &v5[v25];
  v27 = &v6[v25];
  if (v43(&v6[v25], 1, v11))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v26, v27, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v26, 0, 1, v11);
  }
  v29 = a3[6];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = sub_2416B9C10();
  v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
  v33(v30, v31, v32);
  v34 = a3[7];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v33(&a1[v34], &a2[v34], v32);
  v37 = type metadata accessor for MedicalIDHeightFormatter();
  *(_QWORD *)&v35[*(int *)(v37 + 20)] = *(_QWORD *)&v36[*(int *)(v37 + 20)];
  v38 = a3[8];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v33(&a1[v38], &a2[v38], v32);
  v41 = type metadata accessor for MedicalIDWeightFormatter();
  *(_QWORD *)&v39[*(int *)(v41 + 20)] = *(_QWORD *)&v40[*(int *)(v41 + 20)];
  *(_QWORD *)&v39[*(int *)(v41 + 24)] = *(_QWORD *)&v40[*(int *)(v41 + 24)];
  return a1;
}

char *assignWithTake for MedicalIDBiometricsViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, uint64_t, uint64_t);
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  void *v85;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  char *v90;
  char *v91;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v89 = a3;
  v90 = a2;
  v7 = a3[5];
  v91 = a1;
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = *(_QWORD *)&a2[v7 + 8];
  *(_QWORD *)v8 = *(_QWORD *)&a2[v7];
  *((_QWORD *)v8 + 1) = v10;
  swift_bridgeObjectRelease();
  *((_QWORD *)v8 + 2) = *((_QWORD *)v9 + 2);
  swift_bridgeObjectRelease();
  v11 = *((_QWORD *)v9 + 4);
  *((_QWORD *)v8 + 3) = *((_QWORD *)v9 + 3);
  *((_QWORD *)v8 + 4) = v11;
  swift_bridgeObjectRelease();
  v12 = *((_QWORD *)v9 + 6);
  *((_QWORD *)v8 + 5) = *((_QWORD *)v9 + 5);
  *((_QWORD *)v8 + 6) = v12;
  swift_bridgeObjectRelease();
  v13 = *((_QWORD *)v9 + 8);
  *((_QWORD *)v8 + 7) = *((_QWORD *)v9 + 7);
  *((_QWORD *)v8 + 8) = v13;
  swift_bridgeObjectRelease();
  v14 = *((_QWORD *)v9 + 10);
  *((_QWORD *)v8 + 9) = *((_QWORD *)v9 + 9);
  *((_QWORD *)v8 + 10) = v14;
  swift_bridgeObjectRelease();
  v15 = (void *)*((_QWORD *)v8 + 12);
  v16 = *((_QWORD *)v9 + 12);
  *((_QWORD *)v8 + 11) = *((_QWORD *)v9 + 11);
  *((_QWORD *)v8 + 12) = v16;

  v17 = (void *)*((_QWORD *)v8 + 13);
  *((_QWORD *)v8 + 13) = *((_QWORD *)v9 + 13);

  v18 = (int *)type metadata accessor for MedicalIDData();
  v19 = v18[13];
  v20 = &v8[v19];
  v21 = &v9[v19];
  v22 = sub_2416B9B50();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v20, v21, v22);
LABEL_7:
  v28 = v18[14];
  v29 = &v8[v28];
  v30 = &v9[v28];
  v31 = v24(&v8[v28], 1, v22);
  v32 = v24(v30, 1, v22);
  v88 = v23;
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v29, v30, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v29, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v22);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v29, v30, v22);
LABEL_13:
  v34 = v18[15];
  v35 = &v8[v34];
  v36 = (uint64_t *)&v9[v34];
  v38 = *v36;
  v37 = v36[1];
  *(_QWORD *)v35 = v38;
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  v39 = v18[16];
  v40 = &v8[v39];
  v41 = (uint64_t *)&v9[v39];
  v43 = *v41;
  v42 = v41[1];
  *(_QWORD *)v40 = v43;
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  v8[v18[17]] = v9[v18[17]];
  v8[v18[18]] = v9[v18[18]];
  v44 = v18[19];
  v45 = (uint64_t)&v8[v44];
  v46 = &v9[v44];
  v47 = *(_QWORD *)&v8[v44 + 8];
  v87 = v22;
  if (v47 >> 60 == 15)
  {
    v48 = v24;
LABEL_17:
    *(_OWORD *)v45 = *(_OWORD *)v46;
    goto LABEL_19;
  }
  v49 = *((_QWORD *)v46 + 1);
  v48 = v24;
  if (v49 >> 60 == 15)
  {
    sub_2415A1B38(v45);
    goto LABEL_17;
  }
  v50 = *(_QWORD *)v45;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *(_QWORD *)(v45 + 8) = v49;
  sub_2415A0DAC(v50, v47);
LABEL_19:
  v51 = v18[20];
  v52 = &v8[v51];
  v53 = &v9[v51];
  v54 = sub_2416B9A18();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
  v57 = v56(v52, 1, v54);
  v58 = v56(v53, 1, v54);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v52, v53, v54);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v55 + 8))(v52, v54);
LABEL_24:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v55 + 40))(v52, v53, v54);
LABEL_25:
  v60 = v18[21];
  v61 = *(void **)&v8[v60];
  *(_QWORD *)&v8[v60] = *(_QWORD *)&v9[v60];

  v62 = v18[22];
  v63 = &v8[v62];
  v64 = &v9[v62];
  v65 = v48(&v8[v62], 1, v87);
  v66 = v48(v64, 1, v87);
  if (!v65)
  {
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(v88 + 40))(v63, v64, v87);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v88 + 8))(v63, v87);
    goto LABEL_30;
  }
  if (v66)
  {
LABEL_30:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v63, v64, v87);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v63, 0, 1, v87);
LABEL_31:
  v68 = v89[6];
  v69 = &v91[v68];
  v70 = &v90[v68];
  v71 = sub_2416B9C10();
  v72 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 40);
  v72(v69, v70, v71);
  v73 = v89[7];
  v74 = &v91[v73];
  v75 = &v90[v73];
  v72(&v91[v73], &v90[v73], v71);
  v76 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v77 = *(void **)&v74[v76];
  *(_QWORD *)&v74[v76] = *(_QWORD *)&v75[v76];

  v78 = v89[8];
  v79 = &v91[v78];
  v80 = &v90[v78];
  v72(&v91[v78], &v90[v78], v71);
  v81 = type metadata accessor for MedicalIDWeightFormatter();
  v82 = *(int *)(v81 + 20);
  v83 = *(void **)&v79[v82];
  *(_QWORD *)&v79[v82] = *(_QWORD *)&v80[v82];

  v84 = *(int *)(v81 + 24);
  v85 = *(void **)&v79[v84];
  *(_QWORD *)&v79[v84] = *(_QWORD *)&v80[v84];

  return v91;
}

uint64_t getEnumTagSinglePayload for MedicalIDBiometricsViewModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416801BC(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for MedicalIDData();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = sub_2416B9C10();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v13 = type metadata accessor for MedicalIDHeightFormatter();
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[7];
        }
        else
        {
          v10 = type metadata accessor for MedicalIDWeightFormatter();
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[8];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MedicalIDBiometricsViewModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416802B0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for MedicalIDData();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = sub_2416B9C10();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v13 = type metadata accessor for MedicalIDHeightFormatter();
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[7];
        }
        else
        {
          v10 = type metadata accessor for MedicalIDWeightFormatter();
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[8];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_241680394()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = type metadata accessor for MedicalIDData();
  if (v1 <= 0x3F)
  {
    result = sub_2416B9C10();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for MedicalIDHeightFormatter();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for MedicalIDWeightFormatter();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_241680464()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_profileIdentifier);
  v2 = objc_msgSend(v1, sel_type);

  if (v2 == (id)3 && *(_QWORD *)(v0 + 32))
  {
    v3 = sub_2416BB0D4();
    MEMORY[0x24BDAC7A8](v3);
    sub_2416BB0C8();
    sub_2416BB0BC();
    sub_2416BB0B0();
    sub_2416BB0BC();
    v4 = sub_2416BB0EC();
    MEMORY[0x24BDAC7A8](v4);
    sub_2416BB0E0();
    if (qword_257139300 != -1)
      swift_once();
  }
  else
  {
    v5 = sub_2416BB0EC();
    MEMORY[0x24BDAC7A8](v5);
    sub_2416BB098();
    if (qword_257139300 != -1)
      swift_once();
  }
  v6 = (void *)qword_25713A038;
  v7 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v7);
  v8 = v6;
  sub_2416B9C04();
  return sub_2416BB134();
}

uint64_t MedicalIDNavigationBarViewModel.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_2415A3FE0(v0 + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_dateSaved);
  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_locale;
  v2 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MedicalIDNavigationBarViewModel.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_2415A3FE0(v0 + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_dateSaved);
  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_locale;
  v2 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_2416807F8()
{
  return type metadata accessor for MedicalIDNavigationBarViewModel();
}

uint64_t type metadata accessor for MedicalIDNavigationBarViewModel()
{
  uint64_t result;

  result = qword_25713F5A0;
  if (!qword_25713F5A0)
    return swift_getSingletonMetadata();
  return result;
}

void sub_24168083C()
{
  unint64_t v0;
  unint64_t v1;

  sub_2415A0A74(319);
  if (v0 <= 0x3F)
  {
    sub_2416B9C10();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for MedicalIDNavigationBarViewModel()
{
  return swift_lookUpClassMethod();
}

void sub_2416808E8(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  void *v15;
  unsigned int v16;
  void (*v17)(char *, uint64_t);
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  NSObject *v37;
  os_log_t *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  id v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  unint64_t v55;
  os_log_t v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  id v67;
  NSObject *v68;
  os_log_type_t v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  NSObject *v76;
  os_log_t *v77;
  id v78;
  id v79;
  id v80;
  void *v81;
  uint64_t v82;
  id v83;
  id v84;
  id v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  void (*v92)(char *, uint64_t);
  os_log_t v93;
  int v94;
  void *v95;
  os_log_t *v96;
  NSObject *v97;
  id v98;
  id v99[3];

  v2 = v1;
  v99[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = sub_2416B9A18();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v93 - v7;
  v9 = objc_msgSend(a1, sel_gregorianBirthday);
  sub_2415B2870(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v13, 1, 1, v4);
    goto LABEL_6;
  }
  MEMORY[0x24BDAC7A8](v11);
  sub_2416B99A0();

  v14 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v14(v13, (char *)&v93 - v7, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
  {
LABEL_6:
    sub_2416815E0((uint64_t)v13);
    goto LABEL_7;
  }
  v14(v8, v13, v4);
  v15 = (void *)sub_2416B9988();
  v99[0] = 0;
  v16 = -[NSObject _setDateOfBirthComponents:error:](v2, sel__setDateOfBirthComponents_error_, v15, v99);

  if (v16)
  {
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18 = v99[0];
    v17(v8, v4);
  }
  else
  {
    v39 = v99[0];
    v40 = (void *)sub_2416B9A60();

    swift_willThrow();
    if (qword_2571395C0 != -1)
      swift_once();
    v41 = sub_2416B9D6C();
    v42 = __swift_project_value_buffer(v41, (uint64_t)qword_257147810);
    MEMORY[0x24BDAC7A8](v42);
    v43 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v43, v8, v4);
    v44 = v40;
    v45 = v40;
    v46 = sub_2416B9D54();
    v47 = sub_2416BB374();
    v48 = v47;
    if (os_log_type_enabled(v46, v47))
    {
      v49 = swift_slowAlloc();
      v94 = v48;
      v50 = v49;
      v95 = (void *)swift_slowAlloc();
      v99[0] = v95;
      *(_DWORD *)v50 = 136315394;
      v96 = &v93;
      sub_241681680();
      v93 = v46;
      v51 = sub_2416BB62C();
      v98 = (id)sub_2415A8600(v51, v52, (uint64_t *)v99);
      v97 = v2;
      sub_2416BB44C();
      swift_bridgeObjectRelease();
      v53 = *(void (**)(char *, uint64_t))(v5 + 8);
      v53(v43, v4);
      *(_WORD *)(v50 + 12) = 2080;
      swift_getErrorValue();
      v54 = sub_2416BB674();
      v98 = (id)sub_2415A8600(v54, v55, (uint64_t *)v99);
      v2 = v97;
      sub_2416BB44C();
      swift_bridgeObjectRelease();

      v56 = v93;
      _os_log_impl(&dword_241599000, v93, (os_log_type_t)v94, "Failed to persist Medical ID birthday %s to Health profile, Error: %s", (uint8_t *)v50, 0x16u);
      v57 = v95;
      swift_arrayDestroy();
      MEMORY[0x242699570](v57, -1, -1);
      MEMORY[0x242699570](v50, -1, -1);

      v53(v8, v4);
    }
    else
    {

      v92 = *(void (**)(char *, uint64_t))(v5 + 8);
      v92(v43, v4);

      v92(v8, v4);
    }
  }
LABEL_7:
  v19 = objc_msgSend(a1, sel_weight);
  if (v19)
  {
    v20 = v19;
    v99[0] = 0;
    if (-[NSObject _setBodyMassCharacteristicQuantity:error:](v2, sel__setBodyMassCharacteristicQuantity_error_, v19, v99))
    {
      v21 = v99[0];

    }
    else
    {
      v22 = v99[0];
      v23 = (void *)sub_2416B9A60();

      swift_willThrow();
      if (qword_2571395C0 != -1)
        swift_once();
      v24 = sub_2416B9D6C();
      __swift_project_value_buffer(v24, (uint64_t)qword_257147810);
      v25 = v20;
      v26 = v23;
      v27 = v25;
      v28 = v23;
      v29 = sub_2416B9D54();
      v30 = sub_2416BB374();
      v31 = v30;
      v97 = v29;
      if (os_log_type_enabled(v29, v30))
      {
        v32 = swift_slowAlloc();
        v33 = (_QWORD *)swift_slowAlloc();
        v96 = (os_log_t *)swift_slowAlloc();
        v99[0] = v96;
        *(_DWORD *)v32 = 138412546;
        LODWORD(v95) = v31;
        v98 = v27;
        v34 = v27;
        sub_2416BB44C();
        *v33 = v20;

        *(_WORD *)(v32 + 12) = 2080;
        swift_getErrorValue();
        v35 = sub_2416BB674();
        v98 = (id)sub_2415A8600(v35, v36, (uint64_t *)v99);
        sub_2416BB44C();
        swift_bridgeObjectRelease();

        v37 = v97;
        _os_log_impl(&dword_241599000, v97, (os_log_type_t)v95, "Failed to persist Medical ID weight %@ to Health profile, Error: %s", (uint8_t *)v32, 0x16u);
        sub_24168161C();
        swift_arrayDestroy();
        MEMORY[0x242699570](v33, -1, -1);
        v38 = v96;
        swift_arrayDestroy();
        MEMORY[0x242699570](v38, -1, -1);
        MEMORY[0x242699570](v32, -1, -1);

      }
      else
      {

      }
    }
  }
  v58 = objc_msgSend(a1, sel_height);
  if (v58)
  {
    v59 = v58;
    v99[0] = 0;
    if (-[NSObject _setHeightCharacteristicQuantity:error:](v2, sel__setHeightCharacteristicQuantity_error_, v58, v99))
    {
      v60 = v99[0];

    }
    else
    {
      v61 = v99[0];
      v62 = (void *)sub_2416B9A60();

      swift_willThrow();
      if (qword_2571395C0 != -1)
        swift_once();
      v63 = sub_2416B9D6C();
      __swift_project_value_buffer(v63, (uint64_t)qword_257147810);
      v64 = v59;
      v65 = v62;
      v66 = v64;
      v67 = v62;
      v68 = sub_2416B9D54();
      v69 = sub_2416BB374();
      v70 = v69;
      v97 = v68;
      if (os_log_type_enabled(v68, v69))
      {
        v71 = swift_slowAlloc();
        v72 = (_QWORD *)swift_slowAlloc();
        v96 = (os_log_t *)swift_slowAlloc();
        v99[0] = v96;
        *(_DWORD *)v71 = 138412546;
        LODWORD(v95) = v70;
        v98 = v66;
        v73 = v66;
        sub_2416BB44C();
        *v72 = v59;

        *(_WORD *)(v71 + 12) = 2080;
        swift_getErrorValue();
        v74 = sub_2416BB674();
        v98 = (id)sub_2415A8600(v74, v75, (uint64_t *)v99);
        sub_2416BB44C();
        swift_bridgeObjectRelease();

        v76 = v97;
        _os_log_impl(&dword_241599000, v97, (os_log_type_t)v95, "Failed to persist Medical ID height %@ to Health profile, Error: %s", (uint8_t *)v71, 0x16u);
        sub_24168161C();
        swift_arrayDestroy();
        MEMORY[0x242699570](v72, -1, -1);
        v77 = v96;
        swift_arrayDestroy();
        MEMORY[0x242699570](v77, -1, -1);
        MEMORY[0x242699570](v71, -1, -1);

      }
      else
      {

      }
    }
  }
  if (objc_msgSend(a1, sel_bloodType))
  {
    v78 = objc_msgSend(a1, sel_bloodType);
    v99[0] = 0;
    if (-[NSObject _setBloodType:error:](v2, sel__setBloodType_error_, v78, v99))
    {
      v79 = v99[0];
    }
    else
    {
      v97 = v99[0];
      v80 = v99[0];
      v81 = (void *)sub_2416B9A60();

      swift_willThrow();
      if (qword_2571395C0 != -1)
        swift_once();
      v82 = sub_2416B9D6C();
      __swift_project_value_buffer(v82, (uint64_t)qword_257147810);
      v83 = v81;
      v84 = v81;
      v85 = a1;
      v86 = sub_2416B9D54();
      v87 = sub_2416BB374();
      if (os_log_type_enabled(v86, v87))
      {
        v88 = swift_slowAlloc();
        v89 = (void *)swift_slowAlloc();
        v99[0] = v89;
        *(_DWORD *)v88 = 134218242;
        v98 = objc_msgSend(v85, sel_bloodType);
        sub_2416BB44C();

        *(_WORD *)(v88 + 12) = 2080;
        swift_getErrorValue();
        v90 = sub_2416BB674();
        v98 = (id)sub_2415A8600(v90, v91, (uint64_t *)v99);
        sub_2416BB44C();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_241599000, v86, v87, "Failed to persist Medical ID blood type %ld to Health profile, Error: %s", (uint8_t *)v88, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242699570](v89, -1, -1);
        MEMORY[0x242699570](v88, -1, -1);

      }
      else
      {

      }
    }
  }
}

uint64_t sub_241681594@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  sub_2415C0788(0, &qword_25713A448);
  result = sub_2416B9DD8();
  *a1 = result;
  return result;
}

uint64_t sub_2416815E0(uint64_t a1)
{
  uint64_t v2;

  sub_2415B2870(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_24168161C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713BEC0)
  {
    sub_2415C0788(255, (unint64_t *)&qword_25713ADA0);
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713BEC0);
  }
}

unint64_t sub_241681680()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713F650;
  if (!qword_25713F650)
  {
    v1 = sub_2416B9A18();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDCBE30], v1);
    atomic_store(result, (unint64_t *)&qword_25713F650);
  }
  return result;
}

uint64_t MedicalIDSettingsProvider.medicalIDSettingsViewModel(data:healthStore:profileFirstName:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  void *v16;
  uint64_t v18;

  v11 = type metadata accessor for MedicalIDData();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v5 + 24);
  v15 = (os_unfair_lock_s *)(v14 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 20));
  LOBYTE(v14) = *(_BYTE *)(v14 + 16);
  os_unfair_lock_unlock(v15);
  sub_2415A84E8(a1, (uint64_t)v13);
  v16 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  return MedicalIDSettingsViewModel.init(medicalIDData:healthStore:profileFirstName:hasPairedWatch:isEEDAvailable:)((uint64_t)v13, (uint64_t)a2, a3, a4, (char)objc_msgSend(v16, sel_hasPairedWatch), v14 & 1, a5);
}

uint64_t sub_2416817C4(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

_QWORD *sub_2416817F0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(uint64_t);
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = v0;
  v2 = sub_2416BB3B0();
  v16 = *(_QWORD *)(v2 - 8);
  v17 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v15 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_2416BB398();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_2416BB008();
  MEMORY[0x24BDAC7A8](v5);
  sub_2416821E0();
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 20) = 0;
  *(_BYTE *)(v6 + 16) = 2;
  v0[3] = v6;
  v0[4] = 0xD000000000000021;
  v0[5] = 0x80000002416C6290;
  sub_2416B9CD0();
  v18 = sub_2416BB704();
  v19 = v7;
  v14 = sub_24167A3C8();
  sub_2416BB17C();
  v8 = sub_2416B9B80();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416B9B74();
  sub_2416B9B5C();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_2416BB17C();
  swift_bridgeObjectRelease();
  sub_2416BAFFC();
  v18 = MEMORY[0x24BEE4AF8];
  v12 = (void (*)(uint64_t))MEMORY[0x24BEE5688];
  sub_24159CE88(&qword_25713F730, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  sub_2416493BC(0, &qword_25713F738, v12);
  sub_241681F50(&qword_25713F740, &qword_25713F738, v12);
  sub_2416BB4A0();
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v15, *MEMORY[0x24BEE5750], v17);
  v1[2] = sub_2416BB3D4();
  MedicalIDSettingsProvider.fetchAvailabilityStatus()();
  return v1;
}

Swift::Void __swiftcall MedicalIDSettingsProvider.fetchAvailabilityStatus()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD aBlock[6];

  v1 = sub_2416BAFE4();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v12 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2416BB008();
  v5 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v0 + 16);
  v8 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_241681F30;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2416817C4;
  aBlock[3] = &block_descriptor_6;
  v9 = _Block_copy(aBlock);
  swift_retain();
  sub_2416BAFF0();
  v13 = MEMORY[0x24BEE4AF8];
  sub_24159CE88(&qword_25713A538, v2, MEMORY[0x24BEE5468]);
  sub_2416493BC(0, &qword_25713A540, (void (*)(uint64_t))v2);
  sub_241681F50((unint64_t *)&qword_25713A548, &qword_25713A540, (void (*)(uint64_t))v2);
  sub_2416BB4A0();
  MEMORY[0x242698BBC](0, v7, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v11);
  swift_release();
  swift_release();
}

_QWORD *sub_241681CC0()
{
  char v0;
  _QWORD *result;
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;

  swift_beginAccess();
  if (swift_weakLoadStrong() && (v0 = sub_241681DD4(), swift_release(), v0 != 2))
  {
    v3 = v0 & 1;
  }
  else
  {
    result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
    if (!result)
    {
      __break(1u);
      return result;
    }
    v2 = result;
    v3 = objc_msgSend(result, sel_supportsEED);

  }
  swift_beginAccess();
  result = (_QWORD *)swift_weakLoadStrong();
  if (result)
  {
    v4 = result[3];
    swift_retain();
    swift_release();
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 20));
    *(_BYTE *)(v4 + 16) = v3;
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 20));
    return (_QWORD *)swift_release();
  }
  return result;
}

uint64_t sub_241681DD4()
{
  id v0;
  void *v1;
  id v2;
  unsigned __int8 v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  if (objc_msgSend((id)objc_opt_self(), sel_isAppleInternalInstall))
  {
    v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    v1 = (void *)sub_2416BB0F8();
    v2 = objc_msgSend(v0, sel_objectForKey_, v1);

    if (v2)
    {
      sub_2416BB494();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v5, 0, sizeof(v5));
    }
    sub_241682138((uint64_t)v5, (uint64_t)v6);
    if (v7)
    {
      if (swift_dynamicCast())
        return v4;
    }
    else
    {
      sub_241682190((uint64_t)v6);
    }
  }
  return 2;
}

id MedicalIDSettingsProvider.hasPairedWatch.getter()
{
  return objc_msgSend((id)objc_opt_self(), sel_hasPairedWatch);
}

uint64_t sub_241681F0C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

_QWORD *sub_241681F30()
{
  return sub_241681CC0();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_241681F50(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_2416493BC(255, a2, a3);
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE12C8], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t MedicalIDSettingsProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI25MedicalIDSettingsProvider___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MedicalIDSettingsProvider.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI25MedicalIDSettingsProvider___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_241682054()
{
  return type metadata accessor for MedicalIDSettingsProvider();
}

uint64_t type metadata accessor for MedicalIDSettingsProvider()
{
  uint64_t result;

  result = qword_25713F688;
  if (!qword_25713F688)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_241682098()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2416B9CDC();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for MedicalIDSettingsProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_241682138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24160ACE0(0, (unint64_t *)&qword_25713E680);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_241682190(uint64_t a1)
{
  uint64_t v2;

  sub_24160ACE0(0, (unint64_t *)&qword_25713E680);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_2416821E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F728)
  {
    sub_24160ACE0(255, &qword_25713ED88);
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_2416BB50C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F728);
  }
}

uint64_t sub_241682254(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  return a1(v1);
}

uint64_t sub_24168227C()
{
  sub_2416BB6BC();
  sub_2416BB164();
  swift_bridgeObjectRelease();
  return sub_2416BB6EC();
}

void sub_2416822E4(char a1)
{
  sub_2416BB6BC();
  __asm { BR              X10 }
}

uint64_t sub_24168233C()
{
  sub_2416BB164();
  swift_bridgeObjectRelease();
  return sub_2416BB6EC();
}

uint64_t sub_2416823A8()
{
  sub_2416BB6BC();
  sub_2416BB164();
  swift_bridgeObjectRelease();
  return sub_2416BB6EC();
}

void sub_24168242C(char a1)
{
  sub_2416BB6BC();
  __asm { BR              X10 }
}

uint64_t sub_241682480()
{
  sub_2416BB164();
  swift_bridgeObjectRelease();
  return sub_2416BB6EC();
}

uint64_t sub_2416824F0()
{
  sub_2416BB164();
  return swift_bridgeObjectRelease();
}

void sub_241682530(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_241682574()
{
  sub_2416BB164();
  return swift_bridgeObjectRelease();
}

void sub_2416825D0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_241682614()
{
  sub_2416BB164();
  return swift_bridgeObjectRelease();
}

void sub_2416826F4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_241682738()
{
  sub_2416BB164();
  return swift_bridgeObjectRelease();
}

void sub_241682788(uint64_t a1, char a2)
{
  sub_2416BB6BC();
  __asm { BR              X10 }
}

uint64_t sub_2416827DC()
{
  sub_2416BB164();
  swift_bridgeObjectRelease();
  return sub_2416BB6EC();
}

void sub_241682848(uint64_t a1, char a2)
{
  sub_2416BB6BC();
  __asm { BR              X10 }
}

uint64_t sub_24168289C()
{
  sub_2416BB164();
  swift_bridgeObjectRelease();
  return sub_2416BB6EC();
}

uint64_t sub_241682998()
{
  sub_2416BB6BC();
  sub_2416BB164();
  swift_bridgeObjectRelease();
  return sub_2416BB6EC();
}

void sub_241682A18(uint64_t a1, char a2)
{
  sub_2416BB6BC();
  __asm { BR              X10 }
}

uint64_t sub_241682A68()
{
  sub_2416BB164();
  swift_bridgeObjectRelease();
  return sub_2416BB6EC();
}

uint64_t sub_241682AD8()
{
  sub_2416BB6BC();
  sub_2416BB164();
  swift_bridgeObjectRelease();
  return sub_2416BB6EC();
}

MedicalIDUI::OrganDonationStatus_optional __swiftcall OrganDonationStatus.init(medicalIDValue:)(NSNumber_optional medicalIDValue)
{
  _BYTE *v1;
  _BYTE *v2;
  Class isa;
  unint64_t v4;
  unsigned int v5;

  v2 = v1;
  if (medicalIDValue.value.super.super.isa)
  {
    isa = medicalIDValue.value.super.super.isa;
    v4 = (unint64_t)-[objc_class integerValue](medicalIDValue.value.super.super.isa, sel_integerValue);

    if (v4 > 2)
      LOBYTE(v5) = 4;
    else
      v5 = 0x30102u >> (8 * v4);
  }
  else
  {
    LOBYTE(v5) = 0;
  }
  *v2 = v5;
  return (MedicalIDUI::OrganDonationStatus_optional)medicalIDValue.value.super.super.isa;
}

void *static OrganDonationStatus.allCases.getter()
{
  return &unk_251193A30;
}

uint64_t static Int.medicalIDOrganDonationStatusNotDonorValue.getter()
{
  return 0;
}

uint64_t static Int.medicalIDOrganDonationStatusSelfReportedDonorValue.getter()
{
  return 1;
}

uint64_t static Int.medicalIDOrganDonationStatusRegisteredValue.getter()
{
  return 2;
}

void OrganDonationStatus.id.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void OrganDonationStatus.medicalIDValue.getter()
{
  __asm { BR              X9 }
}

uint64_t sub_241682C04()
{
  sub_24159F618();
  return sub_2416BB41C();
}

MedicalIDUI::OrganDonationStatus_optional __swiftcall OrganDonationStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  MedicalIDUI::OrganDonationStatus_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2416BB614();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t OrganDonationStatus.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_241682CBC + 4 * byte_2416C284C[*v0]))(0xD000000000000011, 0x80000002416C3B90);
}

uint64_t sub_241682CBC()
{
  return 0x746553746F6ELL;
}

uint64_t sub_241682CD0()
{
  return 0x726F6E6F44746F6ELL;
}

uint64_t sub_241682CE8()
{
  return 0x694C6574616E6F64;
}

void sub_241682D04(char *a1)
{
  sub_241602680(*a1);
}

unint64_t sub_241682D14()
{
  unint64_t result;

  result = qword_25713F748;
  if (!qword_25713F748)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for OrganDonationStatus, &type metadata for OrganDonationStatus);
    atomic_store(result, (unint64_t *)&qword_25713F748);
  }
  return result;
}

void sub_241682D58()
{
  char *v0;

  sub_24168242C(*v0);
}

void sub_241682D60(uint64_t a1)
{
  char *v1;

  sub_241682530(a1, *v1);
}

void sub_241682D68(uint64_t a1)
{
  char *v1;

  sub_241682A18(a1, *v1);
}

MedicalIDUI::OrganDonationStatus_optional sub_241682D70(Swift::String *a1)
{
  return OrganDonationStatus.init(rawValue:)(*a1);
}

uint64_t sub_241682D7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = OrganDonationStatus.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_241682DA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713F750;
  if (!qword_25713F750)
  {
    sub_241682DEC();
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_25713F750);
  }
  return result;
}

void sub_241682DEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F758)
  {
    v0 = sub_2416BB23C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F758);
  }
}

void sub_241682E40(_QWORD *a1@<X8>)
{
  *a1 = &unk_251193C90;
}

uint64_t storeEnumTagSinglePayload for OrganDonationStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_241682EA0 + 4 * byte_2416C2855[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_241682ED4 + 4 * byte_2416C2850[v4]))();
}

uint64_t sub_241682ED4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_241682EDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x241682EE4);
  return result;
}

uint64_t sub_241682EF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x241682EF8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_241682EFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_241682F04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OrganDonationStatus()
{
  return &type metadata for OrganDonationStatus;
}

uint64_t sub_241682F20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t (*v37)(void);
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  unsigned int v71;
  uint64_t v72;
  double v73;
  long double v74;
  id v75;
  uint64_t v76;
  uint64_t (*v77)(void);
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t *v85;
  _QWORD *v86;
  uint64_t (*v87)(void);
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t result;
  uint64_t *v101;
  _QWORD v102[2];
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t (*v117)(int64_t, uint64_t, uint64_t, uint64_t);
  int *v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;

  v106 = a4;
  v107 = a5;
  v108 = a3;
  v119 = a2;
  v111 = (_QWORD *)a1;
  v116 = a6;
  v7 = type metadata accessor for MedicalIDBiometricsViewModel();
  MEMORY[0x24BDAC7A8](v7);
  v109 = (_QWORD *)((char *)v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for EditHeightCellView();
  v10 = *(int *)(v9 + 40);
  v11 = v9;
  v118 = (int *)v9;
  v12 = (uint64_t)a6 + v10;
  v122 = 0;
  sub_2416BAD08();
  v13 = v121;
  *(_BYTE *)v12 = v120;
  *(_QWORD *)(v12 + 8) = v13;
  v104 = (_QWORD *)((char *)a6 + *(int *)(v11 + 44));
  v14 = MEMORY[0x24BEE1C68];
  sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v16 = *(_QWORD *)(v15 - 8);
  v115 = v15;
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v112 = v19;
  v110 = *(_QWORD *)(v19 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56);
  v21 = v20(v18, 1, 1, v19);
  v117 = (uint64_t (*)(int64_t, uint64_t, uint64_t, uint64_t))v20;
  MEMORY[0x24BDAC7A8](v21);
  v22 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_241683C88((uint64_t)v18, (uint64_t)v18, (uint64_t)&qword_25713A190, (uint64_t)v14, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
  sub_2416BAD08();
  v23 = sub_24168AA98((uint64_t)v18, (uint64_t)&qword_25713A190, (uint64_t)v14, (uint64_t (*)(_QWORD))sub_24168F020);
  v24 = v118;
  v25 = v116;
  v26 = (_QWORD *)((char *)v116 + v118[12]);
  MEMORY[0x24BDAC7A8](v23);
  v113 = (char *)v22;
  v27 = v112;
  v28 = v20((char *)v102 - v22, 1, 1, v112);
  MEMORY[0x24BDAC7A8](v28);
  v29 = MEMORY[0x24BEE1C68];
  sub_241683C88((uint64_t)v102 - v22, (uint64_t)v102 - v22, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
  v103 = v26;
  sub_2416BAD08();
  v30 = sub_24168AA98((uint64_t)v102 - v22, (uint64_t)&qword_25713A190, (uint64_t)v29, (uint64_t (*)(_QWORD))sub_24168F020);
  v31 = (uint64_t)v25 + v24[13];
  MEMORY[0x24BDAC7A8](v30);
  v32 = v113;
  v33 = (char *)((char *)v102 - v113);
  v34 = v117((char *)v102 - v113, 1, 1, v27);
  MEMORY[0x24BDAC7A8](v34);
  v35 = (char *)((char *)v102 - v32);
  v36 = (char *)((char *)v102 - v32);
  v37 = MEMORY[0x24BEE1C68];
  sub_241683C88((uint64_t)v35, (uint64_t)v36, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
  v105 = v31;
  sub_2416BAD08();
  sub_24168AA98((uint64_t)v33, (uint64_t)&qword_25713A190, (uint64_t)v37, (uint64_t (*)(_QWORD))sub_24168F020);
  v38 = (_QWORD *)((char *)v25 + v24[14]);
  *v38 = swift_getKeyPath();
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v39 = (_QWORD *)((char *)v25 + v24[15]);
  sub_2415C0788(0, (unint64_t *)&qword_25713A430);
  sub_2415BEF08();
  *v39 = sub_2416BA270();
  v39[1] = v40;
  sub_2415BEF64((uint64_t)v111, (uint64_t)v25 + v24[5], (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
  v41 = sub_2416B9C10();
  v42 = *(_QWORD **)(v41 - 8);
  v43 = v42[8];
  MEMORY[0x24BDAC7A8](v41);
  sub_2416B9C04();
  type metadata accessor for HeightDataProvider();
  v44 = swift_allocObject();
  MEMORY[0x24BDAC7A8](v44);
  v45 = (char *)v102 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = (void (*)(char *, char *, uint64_t))v42[2];
  v46(v45, v45, v41);
  v47 = swift_beginAccess();
  MEMORY[0x24BDAC7A8](v47);
  v46(v45, v45, v41);
  sub_2416B9E38();
  v48 = (void (*)(char *, uint64_t))v42[1];
  v48(v45, v41);
  swift_endAccess();
  v49 = ((uint64_t (*)(char *, uint64_t))v48)(v45, v41);
  v50 = (_QWORD *)((char *)v116 + v118[9]);
  *v50 = v44;
  v50[1] = 0;
  v51 = MEMORY[0x24BDAC7A8](v49);
  v52 = v113;
  MEMORY[0x24BDAC7A8](v51);
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v54 = v53;
  swift_retain();
  MEMORY[0x242698604](v54);
  sub_2415B0374((char *)v102 - v52, 1, (char *)v102 - v52);
  sub_24168AA98((char *)v102 - v52, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
  v55 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0];
  v56 = (uint64_t)v104;
  sub_24168AA98((uint64_t)v104, (uint64_t)&qword_25713F768, (uint64_t)MEMORY[0x24BDF42C0], (uint64_t (*)(_QWORD))sub_241683C20);
  sub_241683C20(0, &qword_25713F768, v55);
  v114 = v57;
  *(_QWORD *)(v56 + *(int *)(v57 + 28)) = 0;
  v58 = v110;
  v59 = sub_2415B12F8((char *)v102 - v52, v56);
  v60 = MEMORY[0x24BDAC7A8](v59);
  v61 = (char *)((char *)v102 - v52);
  MEMORY[0x24BDAC7A8](v60);
  v62 = (char *)((char *)v102 - v52);
  v63 = v54;
  v64 = v54;
  v65 = v112;
  v66 = MEMORY[0x242698604](v64);
  MEMORY[0x24BDAC7A8](v66);
  v67 = (char *)((char *)v102 - v52);
  v115 = v44;
  v68 = sub_2415B0374((char *)v102 - v52, 1, (char *)v102 - v52);
  MEMORY[0x24BDAC7A8](v68);
  v69 = (char *)((char *)v102 - v52);
  sub_241683C88((char *)v102 - v52, (char *)v102 - v52, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
  v70 = *(char **)(v58 + 48);
  v71 = ((uint64_t (*)(char *, uint64_t, uint64_t))v70)(v69, 1, v65);
  v113 = v70;
  if (v71 == 1)
  {
    sub_24168AA98((uint64_t)v69, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
    v72 = 1;
  }
  else
  {
    sub_2416B98EC();
    v74 = v73;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v69, v65);
    fmod(v74, 12.0);
    v75 = objc_msgSend((id)objc_opt_self(), sel_inches);
    sub_2415C0788(0, (unint64_t *)&qword_25713A188);
    sub_2416B98E0();
    v72 = 0;
  }
  v76 = (uint64_t)v103;
  v77 = MEMORY[0x24BEE1C68];
  sub_24168AA98((uint64_t)v67, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
  v117((int64_t)v61, v72, 1, v65);
  sub_24168AA98((uint64_t)v62, (uint64_t)&qword_25713A190, (uint64_t)v77, (uint64_t (*)(_QWORD))sub_24168F020);
  sub_24168AA98(v76, (uint64_t)&qword_25713F768, (uint64_t)MEMORY[0x24BDF42C0], (uint64_t (*)(_QWORD))sub_241683C20);
  *(_QWORD *)(v76 + *(int *)(v114 + 28)) = 0;
  v78 = sub_2415B12F8((uint64_t)v61, v76);
  v104 = v102;
  v79 = MEMORY[0x24BDAC7A8](v78);
  v80 = (char *)v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = v102;
  MEMORY[0x24BDAC7A8](v79);
  v81 = MEMORY[0x242698604](v63);
  v102[1] = v102;
  MEMORY[0x24BDAC7A8](v81);
  v82 = sub_2415B0374((uint64_t)v80, 1, (uint64_t)v80);
  MEMORY[0x24BDAC7A8](v82);
  sub_241683C88((uint64_t)v80, (uint64_t)v80, (uint64_t)&qword_25713A190, (uint64_t)v77, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v113)(v80, 1, v65) == 1)
  {
    sub_24168AA98((uint64_t)v80, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
    v83 = 1;
  }
  else
  {
    sub_2416B98EC();
    (*(void (**)(char *, uint64_t))(v110 + 8))(v80, v65);
    v84 = objc_msgSend((id)objc_opt_self(), sel_feet);
    sub_2415C0788(0, (unint64_t *)&qword_25713A188);
    sub_2416B98E0();
    v83 = 0;
  }
  v85 = v116;
  v86 = v111;
  v87 = MEMORY[0x24BEE1C68];
  sub_24168AA98((uint64_t)v80, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
  v117((int64_t)v80, v83, 1, v65);
  sub_24168AA98((uint64_t)v80, (uint64_t)&qword_25713A190, (uint64_t)v87, (uint64_t (*)(_QWORD))sub_24168F020);
  v88 = v105;
  sub_24168AA98(v105, (uint64_t)&qword_25713F768, (uint64_t)MEMORY[0x24BDF42C0], (uint64_t (*)(_QWORD))sub_241683C20);
  *(_QWORD *)(v88 + *(int *)(v114 + 28)) = 0;
  sub_2415B12F8((uint64_t)v80, v88);
  v89 = v118;
  sub_241683C88(v119, (uint64_t)v85 + v118[6], (uint64_t)&qword_25713F760, (uint64_t)MEMORY[0x24BDF4870], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_241683C20);
  v90 = v107;
  *(uint64_t *)((char *)v85 + v89[7]) = v108;
  v91 = v106;
  *v85 = v106;
  v85[1] = v90;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v92 = swift_allocObject();
  *(_OWORD *)(v92 + 16) = xmmword_2416BCC80;
  v93 = v86[1];
  *(_QWORD *)(v92 + 32) = *v86;
  *(_QWORD *)(v92 + 40) = v93;
  *(_QWORD *)(v92 + 48) = 0x746867696548;
  *(_QWORD *)(v92 + 56) = 0xE600000000000000;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_2415A4818(v91);
  v94 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v95 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v95)
  {
    v96 = sub_2416BB128();
    v98 = v97;
    sub_2415A6144(v91);
    swift_release();

    swift_release();
  }
  else
  {
    sub_2415A6144(v91);
    swift_release();
    swift_release();
    v96 = 0;
    v98 = 0;
  }
  sub_24168AA98(v119, (uint64_t)&qword_25713F760, (uint64_t)MEMORY[0x24BDF4870], (uint64_t (*)(_QWORD))sub_241683C20);
  v99 = v109;
  sub_2415A85BC((uint64_t)v86, (uint64_t)v109, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
  if (!v98)
  {
    v96 = *v99;
    v98 = v99[1];
    swift_bridgeObjectRetain();
  }
  result = sub_2415A6154((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
  v101 = (uint64_t *)((char *)v85 + v89[8]);
  *v101 = v96;
  v101[1] = v98;
  return result;
}

uint64_t type metadata accessor for EditHeightCellView()
{
  uint64_t result;

  result = qword_25713F7C8;
  if (!qword_25713F7C8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_241683BB0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_2415C0788(255, (unint64_t *)&qword_25713A188);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_241683C20(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_24168F020(255, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_241683C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_241683CD4@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)@<X0>(uint64_t@<X8>);
  void (**v30)(uint64_t@<X8>);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  char *v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  _QWORD v115[2];
  unint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  char *v123;
  _QWORD *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  char *v131;
  _QWORD *v132;
  char *v133;
  unsigned __int8 v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;

  v118 = a1;
  v133 = (char *)type metadata accessor for EditHeightCellView();
  v2 = *((_QWORD *)v133 - 1);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = MEMORY[0x24BDAC7A8](v133);
  v5 = (char *)v115 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v115 - v6;
  v8 = (int *)sub_24168E3D4();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (_QWORD *)((char *)v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9);
  v120 = (uint64_t)v115 - v12;
  sub_24168E82C();
  v132 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v128 = (uint64_t)v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24168E8B0(0);
  v126 = *(_QWORD *)(v15 - 8);
  v127 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v125 = (char *)v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = v17;
  MEMORY[0x24BDAC7A8](v16);
  v122 = (char *)v115 - v18;
  sub_24168E9B0(0);
  v121 = v19;
  v123 = (char *)*(v19 - 1);
  MEMORY[0x24BDAC7A8](v19);
  v131 = (char *)v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEF64(v1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  v21 = *(unsigned __int8 *)(v2 + 80);
  v22 = ((v21 + 16) & ~v21) + v3;
  v23 = (v21 + 16) & ~v21;
  v129 = (_QWORD *)(v21 | 7);
  v130 = v22;
  v24 = swift_allocObject();
  v119 = v23;
  sub_2415A85BC((uint64_t)v7, v24 + v23, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  sub_2415BEF64(v1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  v25 = swift_allocObject();
  sub_2415A85BC((uint64_t)v5, v25 + v23, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  *v11 = swift_getKeyPath();
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v26 = (char *)v11 + v8[13];
  v27 = *MEMORY[0x24BDECEA0];
  v28 = sub_2416BA144();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v26, v27, v28);
  v29 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v11 + v8[14]);
  *v29 = sub_24168EB14;
  v29[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v24;
  v30 = (void (**)(uint64_t@<X8>))((char *)v11 + v8[15]);
  *v30 = sub_24168EB54;
  v30[1] = (void (*)(uint64_t@<X8>))v25;
  v31 = v120;
  sub_2415A85BC((uint64_t)v11, v120, (uint64_t (*)(_QWORD))sub_24168E3D4);
  v32 = v128;
  sub_2415BEF64(v31, v128, (uint64_t (*)(_QWORD))sub_24168E3D4);
  *(_BYTE *)(v32 + *((int *)v132 + 9)) = 0;
  sub_2415A6154(v31, (uint64_t (*)(_QWORD))sub_24168E3D4);
  v33 = sub_2416B9C10();
  v34 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
  v35 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v120 = v36;
  v116 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  v37 = (char *)v115 - v116;
  v38 = *((int *)v133 + 14);
  v124 = (_QWORD *)v1;
  v115[1] = v1 + v38;
  sub_2415C12E0((uint64_t)v115 - v116);
  sub_2415BEF64(v1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  v39 = swift_allocObject();
  v40 = v119;
  v41 = (uint64_t)v7;
  sub_2415A85BC((uint64_t)v7, v39 + v119, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  v42 = sub_2415A40A4(&qword_25713F8F8, (uint64_t (*)(uint64_t))sub_24168E82C, sub_24168EA8C, (uint64_t (*)(void))sub_24168EAA8);
  v43 = sub_24159CE88((unint64_t *)&qword_25713CF80, v34, MEMORY[0x24BDCEED8]);
  v44 = v132;
  v45 = v128;
  sub_2416BABE8();
  swift_release();
  v115[0] = *(_QWORD *)(v35 + 8);
  ((void (*)(char *, uint64_t))v115[0])(v37, v33);
  v46 = v45;
  v47 = v126;
  sub_2415A6154(v46, (uint64_t (*)(_QWORD))sub_24168E82C);
  v48 = (uint64_t)v124;
  sub_2415BEF64((uint64_t)v124, v41, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  v49 = swift_allocObject() + v40;
  v50 = v41;
  v51 = v125;
  sub_2415A85BC(v50, v49, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  v135 = v44;
  v136 = v33;
  v52 = v47;
  v132 = (_QWORD *)v33;
  v137 = v42;
  v138 = v43;
  swift_getOpaqueTypeConformance2();
  v54 = v121;
  v53 = v122;
  v55 = v131;
  sub_2416BAA80();
  swift_release();
  (*((void (**)(char *, _QWORD *))v123 + 1))(v55, v54);
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v53, v127);
  sub_24168EBBC();
  v57 = *(char **)(*(_QWORD *)(v56 - 8) + 64);
  MEMORY[0x24BDAC7A8](v56);
  v58 = (char *)v115 - ((unint64_t)(v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = v48 + *((int *)v133 + 10);
  v60 = *(_BYTE *)v59;
  v61 = *(_QWORD *)(v59 + 8);
  LOBYTE(v135) = v60;
  v136 = v61;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  LODWORD(v37) = v134;
  sub_2415D8800(0, &qword_25713F910, (uint64_t (*)(uint64_t))sub_24168EC30, (uint64_t (*)(uint64_t))sub_24168ECD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
  v63 = *(_QWORD *)(v62 - 8);
  if ((_DWORD)v37 == 1)
  {
    v130 = v62;
    v131 = v57;
    v133 = (char *)v115 - ((unint64_t)(v57 + 15) & 0xFFFFFFFFFFFFFFF0);
    v128 = v63;
    v129 = v115;
    v64 = MEMORY[0x24BDAC7A8](v62);
    v123 = (char *)v115 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
    v122 = (char *)v115;
    MEMORY[0x24BDAC7A8](v64);
    v66 = (char *)v115 - v116;
    sub_2415C12E0((uint64_t)v115 - v116);
    v67 = sub_2416B9BBC();
    v121 = v115;
    v68 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEC40];
    v69 = *(_QWORD *)(v67 - 8);
    v70 = *(_QWORD *)(v69 + 64);
    MEMORY[0x24BDAC7A8](v67);
    v71 = (v70 + 15) & 0xFFFFFFFFFFFFFFF0;
    sub_2416B9BC8();
    v72 = ((uint64_t (*)(char *, _QWORD *))v115[0])(v66, v132);
    MEMORY[0x24BDAC7A8](v72);
    sub_2416B9BA4();
    sub_24159CE88((unint64_t *)&qword_25713A178, v68, MEMORY[0x24BDCEC48]);
    v73 = sub_2416BB08C();
    v74 = *(uint64_t (**)(char *, uint64_t))(v69 + 8);
    v75 = v74((char *)v115 - v71, v67);
    if ((v73 & 1) != 0)
    {
      v74((char *)v115 - v71, v67);
      v76 = (uint64_t)v124;
    }
    else
    {
      MEMORY[0x24BDAC7A8](v75);
      sub_2416B9B98();
      v80 = sub_2416BB08C();
      v74((char *)v115 - v71, v67);
      v74((char *)v115 - v71, v67);
      v76 = (uint64_t)v124;
      if ((v80 & 1) == 0)
      {
        sub_24168ECD8(0);
        v95 = v94;
        v132 = v115;
        v96 = *(_QWORD *)(v94 - 8);
        MEMORY[0x24BDAC7A8](v94);
        v98 = (char *)v115 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_241686434((uint64_t)v98);
        sub_2415D8800(0, &qword_25713FA20, (uint64_t (*)(uint64_t))sub_24168EC30, (uint64_t (*)(uint64_t))sub_24168ECD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
        v124 = v115;
        MEMORY[0x24BDAC7A8](v99);
        (*(void (**)(char *, char *, uint64_t))(v96 + 16))((char *)v115 - v100, v98, v95);
        swift_storeEnumTagMultiPayload();
        sub_24168EC30(0);
        sub_24159CE88(&qword_25713FA28, (uint64_t (*)(uint64_t))sub_24168EC30, MEMORY[0x24BDF4498]);
        sub_2415D8800(255, &qword_25713F938, (uint64_t (*)(uint64_t))sub_24168EDBC, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
        v102 = v101;
        sub_24168F020(255, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v104 = v103;
        v105 = sub_24168F548();
        v106 = sub_24168F630(&qword_25713FA00, &qword_25713FA08, MEMORY[0x24BDCB5D0], MEMORY[0x24BEE4AB8]);
        v135 = v102;
        v136 = v104;
        v137 = v105;
        v138 = v106;
        swift_getOpaqueTypeConformance2();
        v93 = (uint64_t)v123;
        sub_2416BA57C();
        (*(void (**)(char *, uint64_t))(v96 + 8))(v98, v95);
        goto LABEL_8;
      }
    }
    sub_24168EC30(0);
    MEMORY[0x24BDAC7A8](v81);
    v83 = (char *)v115 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)v83 = sub_2416BA468();
    *((_QWORD *)v83 + 1) = 0;
    v83[16] = 1;
    sub_2415ED870(0, &qword_25713FA30, sub_24168EC54);
    sub_241686A50(v76, &v83[*(int *)(v84 + 44)]);
    sub_2415D8800(0, &qword_25713FA20, (uint64_t (*)(uint64_t))sub_24168EC30, (uint64_t (*)(uint64_t))sub_24168ECD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
    MEMORY[0x24BDAC7A8](v85);
    sub_2415BEF64((uint64_t)v83, (uint64_t)v115 - v86, (uint64_t (*)(_QWORD))sub_24168EC30);
    swift_storeEnumTagMultiPayload();
    sub_24168ECD8(0);
    sub_24159CE88(&qword_25713FA28, (uint64_t (*)(uint64_t))sub_24168EC30, MEMORY[0x24BDF4498]);
    sub_2415D8800(255, &qword_25713F938, (uint64_t (*)(uint64_t))sub_24168EDBC, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v88 = v87;
    sub_24168F020(255, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v90 = v89;
    v91 = sub_24168F548();
    v92 = sub_24168F630(&qword_25713FA00, &qword_25713FA08, MEMORY[0x24BDCB5D0], MEMORY[0x24BEE4AB8]);
    v135 = v88;
    v136 = v90;
    v137 = v91;
    v138 = v92;
    swift_getOpaqueTypeConformance2();
    v93 = (uint64_t)v123;
    sub_2416BA57C();
    sub_2415A6154((uint64_t)v83, (uint64_t (*)(_QWORD))sub_24168EC30);
LABEL_8:
    v58 = v133;
    sub_24168F734(v93, (uint64_t)v133);
    v77 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v58, 0, 1, v130);
    v52 = v126;
    v79 = v127;
    v51 = v125;
    v57 = v131;
    v78 = v118;
    goto LABEL_9;
  }
  v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56))((char *)v115 - ((unint64_t)(v57 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v62);
  v78 = v118;
  v79 = v127;
LABEL_9:
  v133 = (char *)v115;
  MEMORY[0x24BDAC7A8](v77);
  v108 = (char *)v115 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = *(uint64_t (**)(char *, char *, uint64_t))(v52 + 16);
  v110 = v109(v108, v51, v79);
  MEMORY[0x24BDAC7A8](v110);
  v111 = (char *)v115 - ((unint64_t)(v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEF64((uint64_t)v58, (uint64_t)v111, (uint64_t (*)(_QWORD))sub_24168EBBC);
  v109(v78, v108, v79);
  sub_24168F6C8();
  sub_2415BEF64((uint64_t)v111, (uint64_t)&v78[*(int *)(v112 + 48)], (uint64_t (*)(_QWORD))sub_24168EBBC);
  sub_2415A6154((uint64_t)v58, (uint64_t (*)(_QWORD))sub_24168EBBC);
  v113 = *(void (**)(char *, uint64_t))(v52 + 8);
  v113(v51, v79);
  sub_2415A6154((uint64_t)v111, (uint64_t (*)(_QWORD))sub_24168EBBC);
  return ((uint64_t (*)(char *, uint64_t))v113)(v108, v79);
}

uint64_t sub_241684A08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = sub_2416BA468();
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  sub_2415ED870(0, &qword_25713FA70, sub_24168E4C8);
  return sub_241689248(a1, a2 + *(int *)(v4 + 44));
}

void sub_241684A70(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;

  v2 = v1;
  sub_24168E680(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24168E65C(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = sub_2416BA51C();
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  sub_2415ED870(0, &qword_25713FA50, sub_24168E6A4);
  sub_24168A1C4(v2, (uint64_t)&v6[*(int *)(v10 + 44)]);
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_2416BCC80;
  v12 = (_QWORD *)(v2 + *(int *)(type metadata accessor for EditHeightCellView() + 32));
  v13 = v12[1];
  *(_QWORD *)(v11 + 32) = *v12;
  *(_QWORD *)(v11 + 40) = v13;
  *(_QWORD *)(v11 + 48) = 0x56746E65746E6F43;
  *(_QWORD *)(v11 + 56) = 0xEB00000000776569;
  swift_bridgeObjectRetain();
  v14 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v15 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v15)
  {
    sub_2416BB128();

    sub_24168E810();
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A6154((uint64_t)v6, (uint64_t (*)(_QWORD))sub_24168E680);
    sub_2415A85BC((uint64_t)v9, a1, (uint64_t (*)(_QWORD))sub_24168E65C);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_241684C70(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t KeyPath;
  _QWORD v10[3];

  v1 = (uint64_t *)(a1 + *(int *)(type metadata accessor for EditHeightCellView() + 36));
  v3 = *v1;
  v2 = v1[1];
  v10[1] = v3;
  v10[2] = v2;
  sub_24159D6B0(0, &qword_25713FA38, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v4 = sub_2416B9C10();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2415C12E0((uint64_t)v10 - v7);
  swift_getKeyPath();
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)v10 - v7, (char *)v10 - v7, v4);
  swift_retain();
  sub_2416B9E50();
  (*(void (**)(char *, uint64_t))(v5 + 8))((char *)v10 - v7, v4);
  return swift_release();
}

uint64_t sub_241684DCC(uint64_t (**a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v2 = sub_2416BA6CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for EditHeightCellView();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x24BDAC7A8](v6);
  if (*a1)
    v9 = (*a1)(v9);
  MEMORY[0x24BDAC7A8](v9);
  *(_QWORD *)&v13[-16] = a1;
  sub_2415BEF64((uint64_t)a1, (uint64_t)&v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  sub_2415A85BC((uint64_t)&v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v11 + v10, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  sub_2416BAF60();
  sub_2416BA6C0();
  sub_2416BA0CC();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_241684F64()
{
  type metadata accessor for EditHeightCellView();
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  swift_retain();
  sub_2416BAD14();
  sub_2416BAD20();
  return swift_release();
}

uint64_t sub_24168502C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  _BYTE v17[16];
  uint64_t v18;
  unsigned __int8 v19;

  v2 = type metadata accessor for EditHeightCellView();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = a1 + *(int *)(v3 + 40);
  v7 = *(_BYTE *)v6;
  v8 = *(_QWORD *)(v6 + 8);
  v17[8] = v7;
  v18 = v8;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v9 = v19;
  sub_2415BEF64(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  if (v9 != 1)
    return sub_2415A6154((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  v10 = MEMORY[0x24BEE1C68];
  sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v17[-v12];
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604]();
  sub_2415A6154((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v15 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14);
  result = sub_24168AA98((uint64_t)v13, (uint64_t)&qword_25713A190, (uint64_t)v10, (uint64_t (*)(_QWORD))sub_24168F020);
  if (v15 == 1)
    return sub_24168520C();
  return result;
}

uint64_t sub_24168520C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  char *v37;
  uint64_t (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  long double v43;
  id v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t (*v48)(void);
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t (*v58)(void);
  uint64_t (*v59)(uint64_t, uint64_t);
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t (*v93)(void);
  uint64_t *v94;
  char *v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t (*v100)(void);
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  long double v109;
  id v110;
  uint64_t (*v111)(void);
  uint64_t v112;
  char *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(void);
  uint64_t result;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t (*v126)(char *, uint64_t, uint64_t);
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;

  v1 = type metadata accessor for HealthDemographicData();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v122 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, qword_257139AE8, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v122 - v7;
  v9 = type metadata accessor for EditHeightCellView();
  v10 = *(void **)(v0 + *(int *)(v9 + 60));
  if (v10)
  {
    v11 = objc_msgSend(v10, sel_suggestHealthData);
    v133 = v9;
    v134 = v0;
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(v0 + *(int *)(v9 + 28));
      swift_getKeyPath();
      v135 = v12;
      sub_24159CE88((unint64_t *)&qword_257139BC0, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicDataProvider, (uint64_t)&unk_2416BCD70);
      sub_2416B9CAC();
      swift_release();
      v13 = v12 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data;
      swift_beginAccess();
      sub_2415CF0B0(v13, (uint64_t)v8, qword_257139AE8, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1))
      {
        sub_2415BEF64((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for HealthDemographicData);
        v59 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        sub_2415CCAFC((uint64_t)v8, qword_257139AE8, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v60 = *(id *)&v4[*(int *)(v1 + 28)];
        sub_2415A6154((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for HealthDemographicData);
        sub_24168F020(0, &qword_25713A190, v59);
        v132 = (char *)&v122;
        v62 = *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64);
        MEMORY[0x24BDAC7A8](v61);
        v64 = (char *)&v122 - v63;
        type metadata accessor for MedicalIDBiometricsViewModel();
        v65 = (uint64_t *)v60;
        v131 = (uint64_t *)v64;
        sub_241600A2C(v60, (uint64_t)v64);
        v130 = v65;

        v66 = sub_2416B9C10();
        v129 = &v122;
        v67 = *(_QWORD *)(v66 - 8);
        MEMORY[0x24BDAC7A8](v66);
        v69 = (char *)&v122 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_2415C12E0((uint64_t)v69);
        v70 = sub_2416B9BBC();
        v128 = &v122;
        v71 = *(_QWORD *)(v70 - 8);
        v72 = *(_QWORD *)(v71 + 64);
        MEMORY[0x24BDAC7A8](v70);
        v73 = (v72 + 15) & 0xFFFFFFFFFFFFFFF0;
        sub_2416B9BC8();
        v74 = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v69, v66);
        MEMORY[0x24BDAC7A8](v74);
        sub_2416B9BA4();
        sub_24159CE88((unint64_t *)&qword_25713A178, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEC40], MEMORY[0x24BDCEC48]);
        v75 = sub_2416BB08C();
        v76 = *(uint64_t (**)(char *, uint64_t))(v71 + 8);
        v77 = v76((char *)&v122 - v73, v70);
        if ((v75 & 1) != 0)
        {
          v78 = v76((char *)&v122 - v73, v70);
        }
        else
        {
          MEMORY[0x24BDAC7A8](v77);
          sub_2416B9B98();
          v79 = sub_2416BB08C();
          v76((char *)&v122 - v73, v70);
          v78 = v76((char *)&v122 - v73, v70);
          if ((v79 & 1) == 0)
          {
            v127 = &v122;
            MEMORY[0x24BDAC7A8](v78);
            v113 = (char *)&v122 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
            v114 = (uint64_t *)(v134 + *(int *)(v133 + 36));
            v116 = *v114;
            v115 = v114[1];
            v136 = v116;
            v137 = v115;
            v117 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0];
            sub_24159D6B0(0, &qword_25713FA38, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
            sub_2416BAD14();
            v118 = (uint64_t)v131;
            sub_2415B0374((uint64_t)v131, 1, (uint64_t)v113);
            v119 = swift_release();
            MEMORY[0x24BDAC7A8](v119);
            v120 = MEMORY[0x24BEE1C68];
            sub_241683C88((uint64_t)v113, (uint64_t)v113, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
            sub_241683C20(0, &qword_25713F768, v117);
            sub_2416BAD20();

            sub_24168AA98((uint64_t)v113, (uint64_t)&qword_25713A190, (uint64_t)v120, (uint64_t (*)(_QWORD))sub_24168F020);
            sub_24168AA98(v118, (uint64_t)&qword_25713A190, (uint64_t)v120, (uint64_t (*)(_QWORD))sub_24168F020);
            return sub_241687A44();
          }
        }
        v129 = &v122;
        MEMORY[0x24BDAC7A8](v78);
        v80 = (v62 + 15) & 0xFFFFFFFFFFFFFFF0;
        v81 = (char *)&v122 - v80;
        v82 = (uint64_t *)(v134 + *(int *)(v133 + 36));
        v83 = v82[1];
        v136 = *v82;
        v137 = v83;
        sub_24159D6B0(0, &qword_25713FA38, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
        v128 = v84;
        v85 = sub_2416BAD14();
        v86 = v138;
        MEMORY[0x24BDAC7A8](v85);
        v87 = (char *)&v122 - v80;
        v125 = v86;
        v88 = sub_2415B0374((uint64_t)v131, 1, (uint64_t)&v122 - v80);
        MEMORY[0x24BDAC7A8](v88);
        sub_241683C88((uint64_t)&v122 - v80, (uint64_t)&v122 - v80, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
        sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
        v90 = v89;
        v91 = *(_QWORD *)(v89 - 8);
        v126 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 48);
        v92 = v126((char *)&v122 - v80, 1, v89);
        v123 = v91;
        v124 = v90;
        if (v92 == 1)
        {
          v93 = MEMORY[0x24BEE1C68];
          sub_24168AA98((uint64_t)&v122 - v80, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
          sub_24168AA98((uint64_t)v87, (uint64_t)&qword_25713A190, (uint64_t)v93, (uint64_t (*)(_QWORD))sub_24168F020);
          v94 = *(uint64_t **)(v91 + 56);
          v95 = (char *)&v122 - v80;
          v96 = 1;
        }
        else
        {
          sub_2416B98EC();
          (*(void (**)(char *, uint64_t))(v91 + 8))((char *)&v122 - v80, v90);
          v97 = objc_msgSend((id)objc_opt_self(), sel_feet);
          sub_2415C0788(0, (unint64_t *)&qword_25713A188);
          sub_2416B98E0();
          sub_24168AA98((uint64_t)v87, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
          v94 = *(uint64_t **)(v91 + 56);
          v95 = (char *)&v122 - v80;
          v96 = 0;
        }
        v127 = v94;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v94)(v95, v96, 1, v90);
        v98 = swift_release();
        MEMORY[0x24BDAC7A8](v98);
        v99 = (v62 + 15) & 0xFFFFFFFFFFFFFFF0;
        v100 = MEMORY[0x24BEE1C68];
        sub_241683C88((uint64_t)v81, (uint64_t)&v122 - v99, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
        sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
        v125 = v101;
        sub_2416BAD20();
        v102 = sub_24168AA98((uint64_t)v81, (uint64_t)&qword_25713A190, (uint64_t)v100, (uint64_t (*)(_QWORD))sub_24168F020);
        v129 = &v122;
        MEMORY[0x24BDAC7A8](v102);
        v103 = v82[1];
        v136 = *v82;
        v137 = v103;
        v104 = sub_2416BAD14();
        v128 = &v122;
        MEMORY[0x24BDAC7A8](v104);
        v105 = sub_2415B0374((uint64_t)v131, 1, (uint64_t)&v122 - v99);
        MEMORY[0x24BDAC7A8](v105);
        sub_241683C88((uint64_t)&v122 - v99, (uint64_t)&v122 - v99, (uint64_t)&qword_25713A190, (uint64_t)v100, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
        v106 = v124;
        if (v126((char *)&v122 - v99, 1, v124) == 1)
        {
          sub_24168AA98((uint64_t)&v122 - v99, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
          v107 = 1;
        }
        else
        {
          sub_2416B98EC();
          v109 = v108;
          (*(void (**)(char *, uint64_t))(v123 + 8))((char *)&v122 - v99, v106);
          fmod(v109, 12.0);
          v110 = objc_msgSend((id)objc_opt_self(), sel_inches);
          sub_2415C0788(0, (unint64_t *)&qword_25713A188);
          sub_2416B98E0();
          v107 = 0;
        }
        v111 = MEMORY[0x24BEE1C68];
        sub_24168AA98((uint64_t)&v122 - v99, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v127)((char *)&v122 - v99, v107, 1, v106);
        v112 = swift_release();
        MEMORY[0x24BDAC7A8](v112);
        sub_241683C88((uint64_t)&v122 - v99, (uint64_t)&v122 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&qword_25713A190, (uint64_t)v111, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
        sub_2416BAD20();

        sub_24168AA98((uint64_t)&v122 - v99, (uint64_t)&qword_25713A190, (uint64_t)v111, (uint64_t (*)(_QWORD))sub_24168F020);
        sub_24168AA98((uint64_t)v131, (uint64_t)&qword_25713A190, (uint64_t)v111, (uint64_t (*)(_QWORD))sub_24168F020);
        return sub_241687A44();
      }
      sub_2415CCAFC((uint64_t)v8, qword_257139AE8, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    }
    v14 = sub_2416B9C10();
    v132 = (char *)&v122;
    v15 = *(_QWORD *)(v14 - 8);
    MEMORY[0x24BDAC7A8](v14);
    v17 = (char *)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2415C12E0((uint64_t)v17);
    v18 = sub_2416B9BBC();
    v131 = &v122;
    v19 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEC40];
    v20 = *(_QWORD *)(v18 - 8);
    v21 = *(_QWORD *)(v20 + 64);
    MEMORY[0x24BDAC7A8](v18);
    v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
    sub_2416B9BC8();
    v23 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    MEMORY[0x24BDAC7A8](v23);
    sub_2416B9BA4();
    sub_24159CE88((unint64_t *)&qword_25713A178, v19, MEMORY[0x24BDCEC48]);
    v24 = sub_2416BB08C();
    v25 = *(uint64_t (**)(char *, uint64_t))(v20 + 8);
    v26 = v25((char *)&v122 - v22, v18);
    if ((v24 & 1) != 0)
    {
      v25((char *)&v122 - v22, v18);
    }
    else
    {
      MEMORY[0x24BDAC7A8](v26);
      sub_2416B9B98();
      v27 = sub_2416BB08C();
      v25((char *)&v122 - v22, v18);
      v25((char *)&v122 - v22, v18);
      if ((v27 & 1) == 0)
      {
        sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v130 = &v122;
        v50 = (*(_QWORD *)(*(_QWORD *)(v49 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
        MEMORY[0x24BDAC7A8](v49);
        v51 = (uint64_t *)(v134 + *(int *)(v133 + 36));
        v53 = *v51;
        v52 = v51[1];
        v136 = v53;
        v137 = v52;
        sub_24159D6B0(0, &qword_25713FA38, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
        sub_2416BAD14();
        if (qword_257139338 != -1)
          swift_once();
        sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
        v55 = v54;
        __swift_project_value_buffer(v54, (uint64_t)qword_257147640);
        v56 = objc_msgSend((id)objc_opt_self(), sel_centimeters);
        sub_2416B9910();

        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))((char *)&v122 - v50, 0, 1, v55);
        v57 = swift_release();
        MEMORY[0x24BDAC7A8](v57);
        v58 = MEMORY[0x24BEE1C68];
        sub_241683C88((uint64_t)&v122 - v50, (uint64_t)&v122 - v50, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
        sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
        sub_2416BAD20();
        sub_24168AA98((uint64_t)&v122 - v50, (uint64_t)&qword_25713A190, (uint64_t)v58, (uint64_t (*)(_QWORD))sub_24168F020);
        return sub_241687A44();
      }
    }
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v131 = &v122;
    MEMORY[0x24BDAC7A8](v28);
    v132 = v29;
    v30 = (char *)((char *)&v122 - v29);
    v125 = (uint64_t *)(v134 + *(int *)(v133 + 36));
    v31 = v125[1];
    v136 = *v125;
    v137 = v31;
    sub_24159D6B0(0, &qword_25713FA38, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    v130 = v32;
    sub_2416BAD14();
    if (qword_257139320 != -1)
      swift_once();
    sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
    v34 = v33;
    v129 = (uint64_t *)__swift_project_value_buffer(v33, (uint64_t)qword_2571475F8);
    sub_2416B98EC();
    v128 = (uint64_t *)objc_opt_self();
    v35 = objc_msgSend(v128, sel_feet);
    v127 = (uint64_t *)sub_2415C0788(0, (unint64_t *)&qword_25713A188);
    sub_2416B98E0();
    v126 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v126)(v30, 0, 1, v34);
    v36 = swift_release();
    MEMORY[0x24BDAC7A8](v36);
    v37 = v132;
    v38 = MEMORY[0x24BEE1C68];
    sub_241683C88((uint64_t)v30, (char *)&v122 - v132, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
    sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    v124 = v39;
    sub_2416BAD20();
    v40 = sub_24168AA98((uint64_t)v30, (uint64_t)&qword_25713A190, (uint64_t)v38, (uint64_t (*)(_QWORD))sub_24168F020);
    MEMORY[0x24BDAC7A8](v40);
    v41 = (char *)((char *)&v122 - v37);
    v42 = v125[1];
    v136 = *v125;
    v137 = v42;
    sub_2416BAD14();
    sub_2416B98EC();
    fmod(v43, 12.0);
    v44 = objc_msgSend(v128, sel_inches);
    sub_2416B98E0();
    ((void (*)(int64_t, _QWORD, uint64_t, uint64_t))v126)((char *)&v122 - v37, 0, 1, v34);
    v45 = swift_release();
    MEMORY[0x24BDAC7A8](v45);
    v46 = (char *)((char *)&v122 - v37);
    v47 = (char *)((char *)&v122 - v37);
    v48 = MEMORY[0x24BEE1C68];
    sub_241683C88((uint64_t)v46, (uint64_t)v47, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
    sub_2416BAD20();
    sub_24168AA98((uint64_t)v41, (uint64_t)&qword_25713A190, (uint64_t)v48, (uint64_t (*)(_QWORD))sub_24168F020);
    return sub_241687A44();
  }
  sub_2415C0788(0, (unint64_t *)&qword_25713A430);
  sub_2415BEF08();
  result = sub_2416BA264();
  __break(1u);
  return result;
}

void sub_241686434(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v58 = a1;
  v2 = type metadata accessor for EditHeightCellView();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = v2;
  v62 = v2;
  v51 = v3;
  MEMORY[0x24BDAC7A8](v2);
  v52 = v5;
  v54 = (uint64_t)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2416BA234();
  v7 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  v65 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24168ECD8(0);
  v56 = *(_QWORD *)(v10 - 8);
  v57 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v55 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415D8800(0, &qword_25713F938, (uint64_t (*)(uint64_t))sub_24168EDBC, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  v50 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v53 = (char *)v47 - v13;
  sub_24168EDBC(0);
  v49 = v14;
  v48 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24168EE6C();
  v18 = v17;
  v63 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_2416BA4C8();
  v60 = v22;
  v61 = v21;
  v59 = v23;
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x24BDAC7A8](v24);
  v25 = *(int *)(v4 + 44);
  v26 = v1;
  v27 = v1 + v25;
  sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v47[0] = v28;
  v47[1] = v27;
  sub_2416BAD2C();
  v66 = v26;
  sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  sub_24168EF38();
  sub_24168F630(&qword_25713F980, &qword_25713F988, MEMORY[0x24BDCB5B0], MEMORY[0x24BEE4AB0]);
  sub_24168F3DC();
  v29 = v64;
  sub_2416BADB0();
  sub_2416BA228();
  v30 = sub_24159CE88(&qword_25713F9F0, (uint64_t (*)(uint64_t))sub_24168EE6C, MEMORY[0x24BDF4570]);
  sub_2416BAA44();
  v31 = v9;
  v32 = v26;
  (*(void (**)(char *, uint64_t))(v65 + 8))(v31, v29);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v20, v18);
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_2416BCC80;
  v34 = (_QWORD *)(v26 + *(int *)(v62 + 32));
  v35 = v34[1];
  *(_QWORD *)(v33 + 32) = *v34;
  *(_QWORD *)(v33 + 40) = v35;
  *(_QWORD *)(v33 + 48) = 0x72656B636950;
  *(_QWORD *)(v33 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  v36 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v37 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v37)
  {
    sub_2416BB128();

    v67 = v18;
    v68 = v29;
    v69 = v30;
    v70 = MEMORY[0x24BDEDB38];
    swift_getOpaqueTypeConformance2();
    v38 = (uint64_t)v53;
    v39 = v49;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    v40 = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v16, v39);
    MEMORY[0x24BDAC7A8](v40);
    v42 = (char *)v47 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_2416BAD14();
    v43 = v54;
    sub_2415BEF64(v32, v54, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
    v44 = (*(unsigned __int8 *)(v51 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    v45 = swift_allocObject();
    sub_2415A85BC(v43, v45 + v44, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
    sub_24168F548();
    sub_24168F630(&qword_25713FA00, &qword_25713FA08, MEMORY[0x24BDCB5D0], MEMORY[0x24BEE4AB8]);
    v46 = v55;
    sub_2416BABE8();
    swift_release();
    sub_24168AA98((uint64_t)v42, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
    sub_24161B5C0(v38, &qword_25713F938, (uint64_t (*)(uint64_t))sub_24168EDBC, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v58, v46, v57);
  }
  else
  {
    __break(1u);
  }
}

void sub_241686A50(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t OpaqueTypeConformance2;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char v94;
  void (*v95)(char *, uint64_t);
  _QWORD v96[5];
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  _QWORD *v117;
  char *v118;
  _QWORD *v119;
  char *v120;
  char *v121;
  __int128 v122;
  uint64_t v123;
  void (*v124)(char *, uint64_t);
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;

  v102 = a2;
  v3 = type metadata accessor for EditHeightCellView();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = v3;
  v134 = v3;
  v110 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v111 = v6;
  v129 = (uint64_t)v96 - ((unint64_t)(v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2416BA234();
  v126 = *(char **)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24168ECD8(0);
  v132 = *(_QWORD *)(v10 - 8);
  v133 = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v130 = v12;
  v131 = (char *)v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v121 = v13;
  v118 = (char *)((char *)v96 - v13);
  sub_2415D8800(0, &qword_25713F938, (uint64_t (*)(uint64_t))sub_24168EDBC, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  v128 = v14;
  v119 = *(_QWORD **)(*(_QWORD *)(v14 - 8) + 64);
  MEMORY[0x24BDAC7A8](v14);
  v120 = v15;
  v109 = (uint64_t (*)(char *, char *, uint64_t))((char *)v96 - v15);
  sub_24168EDBC(0);
  v127 = v16;
  v104 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v117 = v17;
  v116 = (char *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (char *)((char *)v96 - v116);
  sub_24168EE6C();
  v20 = v19;
  v125 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v115 = v21;
  v114 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v22 = (char *)v96 - v114;
  v124 = (void (*)(char *, uint64_t))sub_2416BA4C8();
  v123 = v23;
  *(_QWORD *)&v122 = v24;
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v112 = *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64);
  MEMORY[0x24BDAC7A8](v25);
  v113 = v26;
  v27 = *(int *)(v5 + 52);
  v137 = a1;
  v28 = a1 + v27;
  sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v135 = v29;
  v103 = v28;
  sub_2416BAD2C();
  v138 = a1;
  sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v31 = v30;
  sub_24168EF38();
  v33 = v32;
  v34 = sub_24168F630(&qword_25713F980, &qword_25713F988, MEMORY[0x24BDCB5B0], MEMORY[0x24BEE4AB0]);
  v106 = sub_24168F3DC();
  v107 = v34;
  v108 = v33;
  v136 = v31;
  sub_2416BADB0();
  sub_2416BA228();
  v35 = sub_24159CE88(&qword_25713F9F0, (uint64_t (*)(uint64_t))sub_24168EE6C, MEMORY[0x24BDF4570]);
  sub_2416BAA44();
  v36 = (void (*)(char *, uint64_t))*((_QWORD *)v126 + 1);
  v126 = v9;
  v124 = v36;
  v36(v9, v7);
  v125 = *(_QWORD *)(v125 + 8);
  ((void (*)(char *, uint64_t))v125)(v22, v20);
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v123 = v37;
  v38 = swift_allocObject();
  v122 = xmmword_2416BCC80;
  *(_OWORD *)(v38 + 16) = xmmword_2416BCC80;
  v39 = (_QWORD *)(v137 + *(int *)(v134 + 32));
  v41 = *v39;
  v40 = v39[1];
  v105 = v39;
  *(_QWORD *)(v38 + 32) = v41;
  *(_QWORD *)(v38 + 40) = v40;
  *(_QWORD *)(v38 + 48) = 0x6B63695074656546;
  *(_QWORD *)(v38 + 56) = 0xEA00000000007265;
  swift_bridgeObjectRetain();
  v42 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v43 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v43)
  {
    sub_2416BB128();

    v101 = v20;
    v139 = v20;
    v140 = v7;
    v100 = v7;
    v141 = v35;
    v142 = MEMORY[0x24BDEDB38];
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v45 = (uint64_t)v109;
    v46 = v127;
    v99 = OpaqueTypeConformance2;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    v104 = *(_QWORD *)(v104 + 8);
    v47 = ((uint64_t (*)(char *, uint64_t))v104)(v18, v46);
    MEMORY[0x24BDAC7A8](v47);
    v98 = v48;
    v97 = (v48 + 15) & 0xFFFFFFFFFFFFFFF0;
    v49 = (char *)v96 - v97;
    sub_2416BAD14();
    v50 = v137;
    v51 = v129;
    sub_2415BEF64(v137, v129, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
    v52 = *(unsigned __int8 *)(v110 + 80);
    v53 = (v52 + 16) & ~v52;
    v96[4] = &v111[v53];
    v96[3] = v52 | 7;
    v54 = swift_allocObject();
    v110 = v53;
    sub_2415A85BC(v51, v54 + v53, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
    v55 = sub_24168F548();
    v56 = sub_24168F630(&qword_25713FA00, &qword_25713FA08, MEMORY[0x24BDCB5D0], MEMORY[0x24BEE4AB8]);
    v57 = v118;
    v103 = v55;
    v96[2] = v56;
    sub_2416BABE8();
    swift_release();
    sub_24168AA98((uint64_t)v49, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
    sub_24161B5C0(v45, &qword_25713F938, (uint64_t (*)(uint64_t))sub_24168EDBC, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v109 = *(uint64_t (**)(char *, char *, uint64_t))(v132 + 32);
    v58 = v109(v131, v57, v133);
    v118 = (char *)v96;
    v59 = MEMORY[0x24BDAC7A8](v58);
    v111 = (char *)((char *)v96 - v121);
    v96[1] = v96;
    v60 = MEMORY[0x24BDAC7A8](v59);
    v121 = (char *)v96 - v61;
    v96[0] = v96;
    v62 = MEMORY[0x24BDAC7A8](v60);
    v120 = (char *)((char *)v96 - v120);
    v119 = v96;
    v63 = MEMORY[0x24BDAC7A8](v62);
    v64 = (char *)((char *)v96 - v116);
    v117 = v96;
    MEMORY[0x24BDAC7A8](v63);
    v65 = (char *)v96 - v114;
    v66 = sub_2416BA4C8();
    v116 = (char *)v96;
    MEMORY[0x24BDAC7A8](v66);
    v134 = v50 + *(int *)(v134 + 48);
    v67 = sub_2416BAD2C();
    MEMORY[0x24BDAC7A8](v67);
    sub_2416BADB0();
    v68 = v126;
    sub_2416BA228();
    v69 = v101;
    v70 = v100;
    sub_2416BAA44();
    v124(v68, v70);
    ((void (*)(char *, uint64_t))v125)(v65, v69);
    v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16) = v122;
    v72 = v105[1];
    *(_QWORD *)(v71 + 32) = *v105;
    *(_QWORD *)(v71 + 40) = v72;
    strcpy((char *)(v71 + 48), "InchesPicker");
    *(_BYTE *)(v71 + 61) = 0;
    *(_WORD *)(v71 + 62) = -5120;
    swift_bridgeObjectRetain();
    v73 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    v74 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v74)
    {
      sub_2416BB128();

      v75 = (uint64_t)v120;
      v76 = v127;
      sub_2416BAB1C();
      swift_bridgeObjectRelease();
      v77 = ((uint64_t (*)(char *, uint64_t))v104)(v64, v76);
      MEMORY[0x24BDAC7A8](v77);
      v78 = (char *)v96 - v97;
      sub_2416BAD14();
      v79 = v129;
      sub_2415BEF64(v137, v129, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
      v80 = swift_allocObject();
      sub_2415A85BC(v79, v80 + v110, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
      v81 = v121;
      sub_2416BABE8();
      swift_release();
      sub_24168AA98((uint64_t)v78, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
      sub_24161B5C0(v75, &qword_25713F938, (uint64_t (*)(uint64_t))sub_24168EDBC, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
      v82 = v111;
      v83 = v133;
      v84 = v109(v111, v81, v133);
      v85 = v130;
      MEMORY[0x24BDAC7A8](v84);
      v86 = (char *)v96 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
      v88 = v131;
      v87 = v132;
      v89 = *(uint64_t (**)(char *, char *, uint64_t))(v132 + 16);
      v90 = v89(v86, v131, v83);
      LOBYTE(v139) = 1;
      MEMORY[0x24BDAC7A8](v90);
      v89(v86, v82, v83);
      v91 = v102;
      v89(v102, v86, v83);
      sub_24168EC70();
      v93 = &v91[*(int *)(v92 + 48)];
      v94 = v139;
      *(_QWORD *)v93 = 0;
      v93[8] = v94;
      v89(&v91[*(int *)(v92 + 64)], v86, v83);
      v95 = *(void (**)(char *, uint64_t))(v87 + 8);
      v95(v82, v83);
      v95(v88, v83);
      v95(v86, v83);
      v95(v86, v83);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_241687784(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  void *v20;

  v2 = type metadata accessor for EditHeightCellView();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = (void **)(a1 + *(int *)(MEMORY[0x24BDAC7A8](v2) + 36));
  v7 = *v5;
  v6 = v5[1];
  v19 = v7;
  v20 = v6;
  sub_24159D6B0(0, &qword_25713FA38, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v8 = objc_msgSend((id)objc_opt_self(), sel_feet);
  if (qword_257139358 != -1)
    swift_once();
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v10 = v9;
  __swift_project_value_buffer(v9, (uint64_t)qword_2571476A0);
  sub_2416B98EC();
  v12 = v11;
  if (qword_257139360 != -1)
    swift_once();
  __swift_project_value_buffer(v10, (uint64_t)qword_2571476B8);
  sub_2416B98EC();
  v14 = sub_2415B1354(v8, v12, v13);
  swift_release();

  v19 = v14;
  swift_getKeyPath();
  sub_2415BEF64(a1, (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  v15 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v16 = swift_allocObject();
  sub_2415A85BC((uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  sub_24168F020(0, &qword_25713F958, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_24168F088();
  sub_24168F384();
  sub_24168F88C(&qword_25713F988, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590], MEMORY[0x24BDCB5B0]);
  sub_2415A40A4(&qword_25713F9D0, (uint64_t (*)(uint64_t))sub_24168F088, sub_24168F45C, (uint64_t (*)(void))sub_24168F4E0);
  return sub_2416BAE7C();
}

uint64_t sub_241687A44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t *v27;
  id v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  id v49;
  uint64_t v50;
  char *v51;
  uint64_t (*v52)(void);
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  char *v55;
  id v56;
  uint64_t v57;
  char *v58;
  uint64_t (*v59)(void);
  uint64_t v60;
  id v61;
  void (*v62)(char *, uint64_t);
  uint64_t *v63;
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;

  v1 = sub_2416B9C10();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for EditHeightCellView();
  v70 = v0;
  v71 = v5;
  sub_2415C12E0((uint64_t)v4);
  v6 = sub_2416B9BBC();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEC40];
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2416B9BC8();
  v11 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  MEMORY[0x24BDAC7A8](v11);
  sub_2416B9BA4();
  sub_24159CE88((unint64_t *)&qword_25713A178, v7, MEMORY[0x24BDCEC48]);
  v12 = sub_2416BB08C();
  v13 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  v14 = v13((char *)&v60 - v10, v6);
  if ((v12 & 1) != 0)
  {
    v13((char *)&v60 - v10, v6);
    goto LABEL_4;
  }
  MEMORY[0x24BDAC7A8](v14);
  sub_2416B9B98();
  v15 = sub_2416BB08C();
  v13((char *)&v60 - v10, v6);
  v13((char *)&v60 - v10, v6);
  if ((v15 & 1) != 0)
  {
LABEL_4:
    sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
    v17 = v16;
    v18 = *(uint64_t **)(v16 - 8);
    v19 = v18[8];
    v20 = MEMORY[0x24BDAC7A8](v16);
    v21 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    v65 = (char *)&v60 - v21;
    v69 = &v60;
    MEMORY[0x24BDAC7A8](v20);
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v68 = &v60;
    v23 = (*(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
    v66 = *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64);
    MEMORY[0x24BDAC7A8](v22);
    sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    sub_2416BAD14();
    v67 = v18;
    v24 = (uint64_t (*)(char *, uint64_t, uint64_t))v18[6];
    v25 = v24((char *)&v60 - v23, 1, v17);
    if ((_DWORD)v25)
      return sub_24168AA98((uint64_t)&v60 - v23, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
    v63 = &v60;
    v64 = &v60;
    MEMORY[0x24BDAC7A8](v25);
    v27 = v67;
    ((void (*)(char *, char *, uint64_t))v67[2])((char *)&v60 - v21, (char *)&v60 - v23, v17);
    sub_24168AA98((uint64_t)&v60 - v23, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
    v61 = (id)objc_opt_self();
    v28 = objc_msgSend(v61, sel_inches);
    sub_2416B9910();

    v62 = (void (*)(char *, uint64_t))v27[1];
    v62((char *)&v60 - v21, v17);
    v29 = (uint64_t *)v27[4];
    v30 = v65;
    v68 = v29;
    v31 = ((uint64_t (*)(char *, char *, uint64_t))v29)(v65, (char *)&v60 - v21, v17);
    v69 = &v60;
    v32 = MEMORY[0x24BDAC7A8](v31);
    v33 = (char *)&v60 - v21;
    MEMORY[0x24BDAC7A8](v32);
    sub_2416BAD14();
    if (v24((char *)&v60 - v23, 1, v17) == 1)
    {
      v62(v30, v17);
      return sub_24168AA98((uint64_t)&v60 - v23, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
    }
    else
    {
      v45 = ((uint64_t (*)(char *, char *, uint64_t))v68)(v33, (char *)&v60 - v23, v17);
      v68 = &v60;
      MEMORY[0x24BDAC7A8](v45);
      sub_2415C0788(0, (unint64_t *)&qword_25713A188);
      v46 = sub_2416B9904();
      v64 = &v60;
      v47 = v66;
      MEMORY[0x24BDAC7A8](v46);
      v48 = (char *)&v60 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
      v49 = objc_msgSend(v61, sel_inches);
      sub_2416B9910();

      v50 = ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v67[7])(v48, 0, 1, v17);
      v67 = &v60;
      MEMORY[0x24BDAC7A8](v50);
      v51 = v30;
      v52 = MEMORY[0x24BEE1C68];
      sub_241683C88((uint64_t)v48, (uint64_t)v48, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
      sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
      sub_2416BAE1C();
      sub_24168AA98((uint64_t)v48, (uint64_t)&qword_25713A190, (uint64_t)v52, (uint64_t (*)(_QWORD))sub_24168F020);
      v53 = v62;
      v62((char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
      v53(v33, v17);
      return ((uint64_t (*)(char *, uint64_t))v53)(v51, v17);
    }
  }
  sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v35 = *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64);
  v36 = MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)&v60 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)&v60 - v38;
  sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v41 = v40;
  v42 = *(_QWORD *)(v40 - 8);
  v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48))(v39, 1, v40);
  if ((_DWORD)v43)
  {
    sub_24168AA98((uint64_t)v39, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
    v44 = 1;
  }
  else
  {
    MEMORY[0x24BDAC7A8](v43);
    v55 = (char *)&v60 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v55, v39, v41);
    sub_24168AA98((uint64_t)v39, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
    v56 = objc_msgSend((id)objc_opt_self(), sel_centimeters);
    sub_2416B9910();

    (*(void (**)(char *, uint64_t))(v42 + 8))(v55, v41);
    v44 = 0;
  }
  v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v37, v44, 1, v41);
  MEMORY[0x24BDAC7A8](v57);
  v58 = (char *)&v60 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = MEMORY[0x24BEE1C68];
  sub_241683C88((uint64_t)v37, (uint64_t)v58, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  sub_2416BAE1C();
  return sub_24168AA98((uint64_t)v37, (uint64_t)&qword_25713A190, (uint64_t)v59, (uint64_t (*)(_QWORD))sub_24168F020);
}

uint64_t sub_241688320(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  void *v20;

  v2 = type metadata accessor for EditHeightCellView();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = (void **)(a1 + *(int *)(MEMORY[0x24BDAC7A8](v2) + 36));
  v7 = *v5;
  v6 = v5[1];
  v19 = v7;
  v20 = v6;
  sub_24159D6B0(0, &qword_25713FA38, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v8 = objc_msgSend((id)objc_opt_self(), sel_inches);
  if (qword_257139348 != -1)
    swift_once();
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v10 = v9;
  __swift_project_value_buffer(v9, (uint64_t)qword_257147670);
  sub_2416B98EC();
  v12 = v11;
  if (qword_257139350 != -1)
    swift_once();
  __swift_project_value_buffer(v10, (uint64_t)qword_257147688);
  sub_2416B98EC();
  v14 = sub_2415B1354(v8, v12, v13);
  swift_release();

  v19 = v14;
  swift_getKeyPath();
  sub_2415BEF64(a1, (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  v15 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v16 = swift_allocObject();
  sub_2415A85BC((uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  sub_24168F020(0, &qword_25713F958, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_24168F088();
  sub_24168F384();
  sub_24168F88C(&qword_25713F988, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590], MEMORY[0x24BDCB5B0]);
  sub_2415A40A4(&qword_25713F9D0, (uint64_t (*)(uint64_t))sub_24168F088, sub_24168F45C, (uint64_t (*)(void))sub_24168F4E0);
  return sub_2416BAE7C();
}

uint64_t sub_2416885E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v55 = a1;
  v56 = a2;
  sub_241683BB0(0, &qword_25713F4A8, MEMORY[0x24BDCB500]);
  v3 = v2;
  v60 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v55 - v4;
  sub_241683BB0(0, &qword_25713F4B0, MEMORY[0x24BDCB4E8]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v55 - v9;
  sub_2415C0788(0, (unint64_t *)&qword_25713A188);
  sub_2416B98F8();
  sub_24168F7BC();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24168F830(0, (unint64_t *)&qword_25713F4C0, (uint64_t (*)(void))sub_24167E500, MEMORY[0x24BEE13C8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDCD4B0]);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  sub_241683BB0(0, &qword_25713BE28, MEMORY[0x24BDCD578]);
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v55 - v18;
  sub_2416B9A78();
  sub_2416B98BC();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  sub_2415A6154((uint64_t)v13, (uint64_t (*)(_QWORD))sub_24168F7BC);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v21 = v20;
  sub_24168F88C((unint64_t *)&qword_25713F4D0, &qword_25713F4A8, MEMORY[0x24BDCB500], MEMORY[0x24BDCB520]);
  v22 = v55;
  sub_2416B991C();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v5, v3);
  sub_2415C343C();
  v23 = sub_2416BA9D8();
  v58 = v24;
  v59 = v23;
  v60 = v25;
  v57 = v26 & 1;
  sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v28 = v27;
  v29 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v55 - v30;
  v32 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))((char *)&v55 - v30, v22, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v31, 0, 1, v21);
  sub_24168F10C();
  v34 = v33;
  MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)&v55 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24168F214(0, &qword_25713FA40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEDA70]);
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)&v55 - v38;
  sub_241683C88((uint64_t)v31, (uint64_t)&v55 - v38, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
  v40 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
  v40(v39, 0, 1, v28);
  sub_24168F188(0, &qword_25713F970, (uint64_t)&unk_25713F978, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_24168F214, &qword_25713F990);
  MEMORY[0x24BDAC7A8](v41);
  v43 = (char *)&v55 - v42;
  sub_24168F8CC((uint64_t)v39, (uint64_t)&v55 - v42, (uint64_t)&qword_25713FA40, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_24168F214);
  sub_24168F920((uint64_t)v43, (uint64_t)&v36[*(int *)(v34 + 36)]);
  v45 = v58;
  v44 = v59;
  *(_QWORD *)v36 = v59;
  *((_QWORD *)v36 + 1) = v45;
  v46 = v57;
  v36[16] = v57;
  *((_QWORD *)v36 + 3) = v60;
  sub_2415A43C8(v44, v45, v46);
  swift_bridgeObjectRetain();
  sub_24168F984((uint64_t)v43);
  sub_24168F9E0((uint64_t)v39, (uint64_t)&qword_25713FA40, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_24168F214);
  sub_24168FA28(0, &qword_25713FA48, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BDEDA70]);
  MEMORY[0x24BDAC7A8](v47);
  v49 = (char *)&v55 - v48;
  v50 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_241683C88((uint64_t)v31, (uint64_t)&v55 - v48, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
  v40(v49, 0, 1, v28);
  sub_241683C20(0, &qword_25713F9A8, v50);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v49, 0, 1, v51);
  sub_24168F088();
  v53 = v56;
  sub_24168F8CC((uint64_t)v49, v56 + *(int *)(v52 + 36), (uint64_t)&qword_25713FA48, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_24168FA28);
  sub_2415BEF64((uint64_t)v36, v53, (uint64_t (*)(_QWORD))sub_24168F10C);
  sub_24168F9E0((uint64_t)v49, (uint64_t)&qword_25713FA48, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_24168FA28);
  sub_2415A6154((uint64_t)v36, (uint64_t (*)(_QWORD))sub_24168F10C);
  sub_24168AA98((uint64_t)v31, (uint64_t)&qword_25713A190, (uint64_t)v50, (uint64_t (*)(_QWORD))sub_24168F020);
  sub_2415A431C(v59, v58, v57);
  return swift_bridgeObjectRelease();
}

uint64_t sub_241688BA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  void *v20;

  v2 = type metadata accessor for EditHeightCellView();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = (void **)(a1 + *(int *)(MEMORY[0x24BDAC7A8](v2) + 36));
  v7 = *v5;
  v6 = v5[1];
  v19 = v7;
  v20 = v6;
  sub_24159D6B0(0, &qword_25713FA38, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  if (qword_257139308 != -1)
    swift_once();
  v8 = (void *)qword_2571475D0;
  if (qword_257139330 != -1)
    swift_once();
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v10 = v9;
  __swift_project_value_buffer(v9, (uint64_t)qword_257147628);
  sub_2416B98EC();
  v12 = v11;
  if (qword_257139340 != -1)
    swift_once();
  __swift_project_value_buffer(v10, (uint64_t)qword_257147658);
  sub_2416B98EC();
  v14 = sub_2415B1354(v8, v12, v13);
  swift_release();
  v19 = v14;
  swift_getKeyPath();
  sub_2415BEF64(a1, (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  v15 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v16 = swift_allocObject();
  sub_2415A85BC((uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  sub_24168F020(0, &qword_25713F958, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_24168F088();
  sub_24168F384();
  sub_24168F88C(&qword_25713F988, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590], MEMORY[0x24BDCB5B0]);
  sub_2415A40A4(&qword_25713F9D0, (uint64_t (*)(uint64_t))sub_24168F088, sub_24168F45C, (uint64_t (*)(void))sub_24168F4E0);
  return sub_2416BAE7C();
}

uint64_t sub_241688E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v39 = a2;
  type metadata accessor for EditHeightCellView();
  type metadata accessor for MedicalIDBiometricsViewModel();
  v44 = sub_2416011E8(a1);
  v45 = v3;
  sub_2415C343C();
  v4 = sub_2416BA9D8();
  v41 = v5;
  v42 = v4;
  v43 = v6;
  v40 = v7 & 1;
  sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v38 - v11;
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v12, a1, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  sub_24168F10C();
  v17 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24168F214(0, &qword_25713FA40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEDA70]);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v38 - v21;
  sub_241683C88((uint64_t)v12, (uint64_t)&v38 - v21, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
  v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56);
  v23(v22, 0, 1, v9);
  sub_24168F188(0, &qword_25713F970, (uint64_t)&unk_25713F978, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_24168F214, &qword_25713F990);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v38 - v25;
  sub_24168F8CC((uint64_t)v22, (uint64_t)&v38 - v25, (uint64_t)&qword_25713FA40, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_24168F214);
  sub_24168F920((uint64_t)v26, (uint64_t)&v19[*(int *)(v17 + 36)]);
  v28 = v41;
  v27 = v42;
  *(_QWORD *)v19 = v42;
  *((_QWORD *)v19 + 1) = v28;
  v29 = v40;
  v19[16] = v40;
  *((_QWORD *)v19 + 3) = v43;
  sub_2415A43C8(v27, v28, v29);
  swift_bridgeObjectRetain();
  sub_24168F984((uint64_t)v26);
  sub_24168F9E0((uint64_t)v22, (uint64_t)&qword_25713FA40, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_24168F214);
  sub_24168FA28(0, &qword_25713FA48, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BDEDA70]);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v38 - v31;
  v33 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_241683C88((uint64_t)v12, (uint64_t)&v38 - v31, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
  v23(v32, 0, 1, v9);
  sub_241683C20(0, &qword_25713F9A8, v33);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v32, 0, 1, v34);
  sub_24168F088();
  v36 = v39;
  sub_24168F8CC((uint64_t)v32, v39 + *(int *)(v35 + 36), (uint64_t)&qword_25713FA48, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_24168FA28);
  sub_2415BEF64((uint64_t)v19, v36, (uint64_t (*)(_QWORD))sub_24168F10C);
  sub_24168F9E0((uint64_t)v32, (uint64_t)&qword_25713FA48, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_24168FA28);
  sub_2415A6154((uint64_t)v19, (uint64_t (*)(_QWORD))sub_24168F10C);
  sub_24168AA98((uint64_t)v12, (uint64_t)&qword_25713A190, (uint64_t)v33, (uint64_t (*)(_QWORD))sub_24168F020);
  sub_2415A431C(v42, v41, v40);
  return swift_bridgeObjectRelease();
}

uint64_t sub_241689248@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t (*v26)(_QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  _QWORD v35[4];
  uint64_t v36;
  uint64_t v37;

  v37 = a2;
  sub_2415D8800(0, &qword_25713FA78, (uint64_t (*)(uint64_t))sub_24168E578, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
  v35[2] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v35 - v4;
  sub_24168E578(0);
  v35[3] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415D8800(0, &qword_25713F848, (uint64_t (*)(uint64_t))sub_24168E578, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v36 = (uint64_t)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v35 - v12;
  sub_2415E40F8();
  v35[1] = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v35 - v18;
  sub_2416896F4((uint64_t)v35 - v18);
  v20 = MEMORY[0x24BEE1C68];
  sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v35 - v22;
  type metadata accessor for EditHeightCellView();
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604]();
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 1, v24);
  sub_24168AA98((uint64_t)v23, (uint64_t)&qword_25713A190, (uint64_t)v20, (uint64_t (*)(_QWORD))sub_24168F020);
  if (v25 == 1)
  {
    sub_241689F20((uint64_t)v17);
    v26 = (uint64_t (*)(_QWORD))sub_2415E40F8;
    sub_2415BEF64((uint64_t)v17, (uint64_t)v5, (uint64_t (*)(_QWORD))sub_2415E40F8);
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713FA80, (uint64_t (*)(uint64_t))sub_24168E578, MEMORY[0x24BDF4498]);
    sub_2415EFC24((unint64_t *)&qword_25713B328, (uint64_t (*)(uint64_t))sub_2415E40F8, sub_2415A4680);
    sub_2416BA57C();
    v27 = (uint64_t)v17;
  }
  else
  {
    *(_QWORD *)v8 = sub_2416BA468();
    *((_QWORD *)v8 + 1) = 0;
    v8[16] = 1;
    sub_2415ED870(0, &qword_25713FA88, sub_24168E59C);
    sub_2416898B4(a1, (uint64_t)&v8[*(int *)(v28 + 44)]);
    v26 = (uint64_t (*)(_QWORD))sub_24168E578;
    sub_2415BEF64((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(_QWORD))sub_24168E578);
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713FA80, (uint64_t (*)(uint64_t))sub_24168E578, MEMORY[0x24BDF4498]);
    sub_2415EFC24((unint64_t *)&qword_25713B328, (uint64_t (*)(uint64_t))sub_2415E40F8, sub_2415A4680);
    sub_2416BA57C();
    v27 = (uint64_t)v8;
  }
  sub_2415A6154(v27, v26);
  sub_2415BEF64((uint64_t)v19, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_2415E40F8);
  v29 = v36;
  sub_24168FBF8((uint64_t)v13, v36, &qword_25713F848, (uint64_t (*)(uint64_t))sub_24168E578);
  v30 = v37;
  sub_2415BEF64((uint64_t)v17, v37, (uint64_t (*)(_QWORD))sub_2415E40F8);
  sub_24168E4E4();
  v32 = v30 + *(int *)(v31 + 48);
  *(_QWORD *)v32 = 0;
  *(_BYTE *)(v32 + 8) = 1;
  sub_24168FBF8(v29, v30 + *(int *)(v31 + 64), &qword_25713F848, (uint64_t (*)(uint64_t))sub_24168E578);
  v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8];
  sub_24161B5C0((uint64_t)v13, &qword_25713F848, (uint64_t (*)(uint64_t))sub_24168E578, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
  sub_2415A6154((uint64_t)v19, (uint64_t (*)(_QWORD))sub_2415E40F8);
  sub_24161B5C0(v29, &qword_25713F848, (uint64_t (*)(uint64_t))sub_24168E578, (uint64_t (*)(uint64_t))sub_2415E40F8, v33);
  return sub_2415A6154((uint64_t)v17, (uint64_t (*)(_QWORD))sub_2415E40F8);
}

void sub_2416896F4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  sub_2415E40F8();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2571394A0 != -1)
    swift_once();
  v11[0] = qword_257147750;
  v11[1] = *(_QWORD *)algn_257147758;
  v12 = 0;
  v13 = MEMORY[0x24BEE4AF8];
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2416BCC80;
  v7 = (_QWORD *)(v1 + *(int *)(type metadata accessor for EditHeightCellView() + 32));
  v8 = v7[1];
  *(_QWORD *)(v6 + 32) = *v7;
  *(_QWORD *)(v6 + 40) = v8;
  *(_QWORD *)(v6 + 48) = 0x656C746954;
  *(_QWORD *)(v6 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v10 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v10)
  {
    sub_2416BB128();

    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2415A85BC((uint64_t)v5, a1, (uint64_t (*)(_QWORD))sub_2415E40F8);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_2416898B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;

  v27 = a2;
  v3 = type metadata accessor for EditHeightCellView();
  v26 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v26 + 64);
  MEMORY[0x24BDAC7A8](v3);
  sub_24159D6B0(0, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v25 - v9;
  sub_241689B24((uint64_t)&v25 - v9);
  v11 = a1 + *(int *)(v3 + 40);
  v12 = *(_BYTE *)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v28 = v12;
  v29 = v13;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  if (v30 == 1)
  {
    v18 = (uint64_t *)(a1 + *(int *)(v3 + 20));
    v14 = *v18;
    v15 = v18[1];
    sub_2415BEF64(a1, (uint64_t)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
    v19 = (*(unsigned __int8 *)(v26 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    v17 = swift_allocObject();
    sub_2415A85BC((uint64_t)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v19, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
    swift_bridgeObjectRetain();
    v16 = sub_24168FBD4;
  }
  sub_2415CF0B0((uint64_t)v10, (uint64_t)v8, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8);
  v20 = v27;
  sub_2415CF0B0((uint64_t)v8, v27, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8);
  sub_24168E5B8();
  v22 = (uint64_t *)(v20 + *(int *)(v21 + 48));
  *v22 = v14;
  v22[1] = v15;
  v22[2] = (uint64_t)v16;
  v22[3] = v17;
  sub_241630990(v14, v15);
  v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_2415CCAFC((uint64_t)v10, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  sub_2416309C0(v14, v15);
  return sub_2415CCAFC((uint64_t)v8, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8, v23);
}

void sub_241689B24(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;

  v2 = v1;
  sub_2415E40F8();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v52 = (uint64_t)&v45 - v10;
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v53 = (char *)&v45 - v14;
  sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v45 - v16;
  v18 = type metadata accessor for EditHeightCellView();
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604]();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v17, 1, v12) == 1)
  {
    sub_24168AA98((uint64_t)v17, (uint64_t)&qword_25713A190, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24168F020);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a1, 1, 1, v5);
  }
  else
  {
    v47 = v9;
    v48 = v6;
    v49 = a1;
    v50 = v5;
    v19 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v20 = (uint64_t)v53;
    v45 = v12;
    v19(v53, v17, v12);
    type metadata accessor for MedicalIDBiometricsViewModel();
    v54 = sub_2416011E8(v20);
    v55 = v21;
    sub_2415C343C();
    v22 = sub_2416BA9D8();
    v24 = v23;
    v51 = v2;
    v26 = v25 & 1;
    v54 = sub_2416BAC18();
    v27 = sub_2416BA990();
    v29 = v28;
    LOBYTE(v20) = v30;
    v32 = v31;
    v33 = v26;
    v34 = v27;
    sub_2415A431C(v22, v24, v33);
    swift_release();
    swift_bridgeObjectRelease();
    v54 = v34;
    v55 = v29;
    v46 = v29;
    v35 = v20 & 1;
    v56 = v20 & 1;
    v57 = v32;
    sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_2416BCC80;
    v37 = (_QWORD *)(v51 + *(int *)(v18 + 32));
    v38 = v37[1];
    *(_QWORD *)(v36 + 32) = *v37;
    *(_QWORD *)(v36 + 40) = v38;
    *(_QWORD *)(v36 + 48) = 0x65756C6156;
    *(_QWORD *)(v36 + 56) = 0xE500000000000000;
    swift_bridgeObjectRetain();
    v39 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    v40 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v40)
    {
      sub_2416BB128();

      v41 = (uint64_t)v47;
      sub_2416BAB1C();
      swift_bridgeObjectRelease();
      sub_2415A431C(v34, v46, v35);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v53, v45);
      v42 = v52;
      sub_2415A85BC(v41, v52, (uint64_t (*)(_QWORD))sub_2415E40F8);
      v43 = v42;
      v44 = v49;
      sub_2415A85BC(v43, v49, (uint64_t (*)(_QWORD))sub_2415E40F8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 56))(v44, 0, 1, v50);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_241689F20(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v26 = a1;
  sub_2415E40F8();
  MEMORY[0x24BDAC7A8](v2);
  v25 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416BA4C8();
  if (qword_257139300 != -1)
    swift_once();
  v4 = (id)qword_25713A038;
  v5 = sub_2416BA9CC();
  v7 = v6;
  v9 = v8 & 1;
  v27 = sub_2416BAC18();
  v10 = sub_2416BA990();
  v12 = v11;
  v14 = v13;
  v16 = v15;
  sub_2415A431C(v5, v7, v9);
  swift_release();
  swift_bridgeObjectRelease();
  v27 = v10;
  v28 = v12;
  v17 = v14 & 1;
  v29 = v14 & 1;
  v30 = v16;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2416BCC80;
  v19 = (_QWORD *)(v1 + *(int *)(type metadata accessor for EditHeightCellView() + 32));
  v20 = v19[1];
  *(_QWORD *)(v18 + 32) = *v19;
  *(_QWORD *)(v18 + 40) = v20;
  *(_QWORD *)(v18 + 48) = 6579265;
  *(_QWORD *)(v18 + 56) = 0xE300000000000000;
  swift_bridgeObjectRetain();
  v21 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v22 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v22)
  {
    sub_2416BB128();

    v23 = (uint64_t)v25;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v10, v12, v17);
    swift_bridgeObjectRelease();
    sub_2415A85BC(v23, v26, (uint64_t (*)(_QWORD))sub_2415E40F8);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24168A1C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  _QWORD v34[4];
  uint64_t v35;
  uint64_t v36;

  v36 = a2;
  sub_2415D8800(0, &qword_25713FA58, (uint64_t (*)(uint64_t))sub_24168E74C, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
  v34[2] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v34 - v4;
  sub_24168E74C(0);
  v34[3] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415D8800(0, &qword_25713F898, (uint64_t (*)(uint64_t))sub_24168E74C, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v35 = (uint64_t)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v34 - v12;
  sub_2415E40F8();
  v34[1] = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v34 - v18;
  sub_2416896F4((uint64_t)v34 - v18);
  v20 = MEMORY[0x24BEE1C68];
  sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v34 - v22;
  type metadata accessor for EditHeightCellView();
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604]();
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 1, v24);
  sub_24168AA98((uint64_t)v23, (uint64_t)&qword_25713A190, (uint64_t)v20, (uint64_t (*)(_QWORD))sub_24168F020);
  if (v25 == 1)
  {
    sub_241689F20((uint64_t)v17);
    sub_2415BEF64((uint64_t)v17, (uint64_t)v5, (uint64_t (*)(_QWORD))sub_2415E40F8);
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713FA60, (uint64_t (*)(uint64_t))sub_24168E74C, MEMORY[0x24BDF4498]);
    sub_2415EFC24((unint64_t *)&qword_25713B328, (uint64_t (*)(uint64_t))sub_2415E40F8, sub_2415A4680);
    sub_2416BA57C();
    v26 = (uint64_t)v17;
    v27 = (uint64_t (*)(_QWORD))sub_2415E40F8;
  }
  else
  {
    *(_QWORD *)v8 = sub_2416BA468();
    *((_QWORD *)v8 + 1) = 0;
    v8[16] = 1;
    sub_2415ED870(0, &qword_25713FA68, sub_24168E770);
    sub_24168A660(a1, (uint64_t)&v8[*(int *)(v28 + 44)]);
    sub_2415BEF64((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(_QWORD))sub_24168E74C);
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713FA60, (uint64_t (*)(uint64_t))sub_24168E74C, MEMORY[0x24BDF4498]);
    sub_2415EFC24((unint64_t *)&qword_25713B328, (uint64_t (*)(uint64_t))sub_2415E40F8, sub_2415A4680);
    sub_2416BA57C();
    v26 = (uint64_t)v8;
    v27 = (uint64_t (*)(_QWORD))sub_24168E74C;
  }
  sub_2415A6154(v26, v27);
  sub_2415BEF64((uint64_t)v19, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_2415E40F8);
  v29 = v35;
  sub_24168FBF8((uint64_t)v13, v35, &qword_25713F898, (uint64_t (*)(uint64_t))sub_24168E74C);
  v30 = v36;
  sub_2415BEF64((uint64_t)v17, v36, (uint64_t (*)(_QWORD))sub_2415E40F8);
  sub_24168E6C0();
  sub_24168FBF8(v29, v30 + *(int *)(v31 + 48), &qword_25713F898, (uint64_t (*)(uint64_t))sub_24168E74C);
  v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8];
  sub_24161B5C0((uint64_t)v13, &qword_25713F898, (uint64_t (*)(uint64_t))sub_24168E74C, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
  sub_2415A6154((uint64_t)v19, (uint64_t (*)(_QWORD))sub_2415E40F8);
  sub_24161B5C0(v29, &qword_25713F898, (uint64_t (*)(uint64_t))sub_24168E74C, (uint64_t (*)(uint64_t))sub_2415E40F8, v32);
  return sub_2415A6154((uint64_t)v17, (uint64_t (*)(_QWORD))sub_2415E40F8);
}

uint64_t sub_24168A660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v23;

  v4 = type metadata accessor for EditHeightCellView();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  sub_24159D6B0(0, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - v11;
  sub_241689B24((uint64_t)&v23 - v11);
  v13 = (uint64_t *)(a1 + *(int *)(v4 + 20));
  v15 = *v13;
  v14 = v13[1];
  sub_2415BEF64(a1, (uint64_t)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  v16 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v17 = swift_allocObject();
  sub_2415A85BC((uint64_t)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  sub_2415CF0B0((uint64_t)v12, (uint64_t)v10, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8);
  sub_2415CF0B0((uint64_t)v10, a2, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8);
  sub_24168E78C();
  v19 = a2 + *(int *)(v18 + 48);
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = (_QWORD *)(a2 + *(int *)(v18 + 64));
  *v20 = v15;
  v20[1] = v14;
  v20[2] = sub_24168FBD4;
  v20[3] = v17;
  swift_bridgeObjectRetain_n();
  swift_retain();
  v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_2415CCAFC((uint64_t)v12, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  swift_release();
  swift_bridgeObjectRelease();
  return sub_2415CCAFC((uint64_t)v10, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8, v21);
}

uint64_t sub_24168A868(uint64_t (**a1)(void))
{
  if (*a1)
    a1 = (uint64_t (**)(void))(*a1)();
  MEMORY[0x24BDAC7A8](a1);
  sub_2416BAF60();
  sub_2416BA0D8();
  return swift_release();
}

uint64_t sub_24168A8F4(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];
  uint64_t v12;
  char v13;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for EditHeightCellView() + 40));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v11[16] = v2;
  v12 = v3;
  v13 = 0;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD20();
  v4 = MEMORY[0x24BEE1C68];
  sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v9 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(&v11[-v7], 1, 1, v8);
  MEMORY[0x24BDAC7A8](v9);
  sub_241683C88((uint64_t)&v11[-v7], (uint64_t)&v11[-v7], (uint64_t)&qword_25713A190, (uint64_t)v4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_24168F020);
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  sub_2416BAE1C();
  return sub_24168AA98((uint64_t)&v11[-v7], (uint64_t)&qword_25713A190, (uint64_t)v4, (uint64_t (*)(_QWORD))sub_24168F020);
}

uint64_t sub_24168AA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v5;

  v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

_QWORD *sub_24168AAD4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int (*v90)(char *, uint64_t, uint64_t);
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  _QWORD *v123;
  char *v124;
  uint64_t v125;
  void *v126;
  id v127;
  char *v129;
  char *v130;
  unsigned int (*v131)(char *, uint64_t, uint64_t);
  void *v132;
  char *__dst;
  int *v134;
  char *v135;
  uint64_t v136;
  int *v137;
  void (*v138)(char *, char *, uint64_t);
  _QWORD *v139;
  _QWORD *v140;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    v8 = (_QWORD *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (*a2)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_retain();
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    v9 = a3[5];
    v139 = a2;
    v140 = a1;
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = *((_QWORD *)v11 + 1);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *((_QWORD *)v10 + 1) = v12;
    v134 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    v135 = v11;
    v13 = v134[5];
    v129 = v10;
    v14 = &v10[v13];
    v15 = &v11[v13];
    v16 = *(_QWORD *)&v11[v13 + 8];
    *(_QWORD *)v14 = *(_QWORD *)&v11[v13];
    *((_QWORD *)v14 + 1) = v16;
    v18 = *(_QWORD *)&v11[v13 + 16];
    v17 = *(_QWORD *)&v11[v13 + 24];
    *((_QWORD *)v14 + 2) = v18;
    *((_QWORD *)v14 + 3) = v17;
    v19 = *((_QWORD *)v15 + 5);
    *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
    *((_QWORD *)v14 + 5) = v19;
    v20 = *((_QWORD *)v15 + 7);
    *((_QWORD *)v14 + 6) = *((_QWORD *)v15 + 6);
    *((_QWORD *)v14 + 7) = v20;
    v21 = *((_QWORD *)v15 + 9);
    *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);
    *((_QWORD *)v14 + 9) = v21;
    v22 = *((_QWORD *)v15 + 11);
    *((_QWORD *)v14 + 10) = *((_QWORD *)v15 + 10);
    *((_QWORD *)v14 + 11) = v22;
    v23 = (void *)*((_QWORD *)v15 + 12);
    v132 = (void *)*((_QWORD *)v15 + 13);
    *((_QWORD *)v14 + 12) = v23;
    *((_QWORD *)v14 + 13) = v132;
    v137 = (int *)type metadata accessor for MedicalIDData();
    v24 = v137[13];
    __dst = &v14[v24];
    v130 = &v15[v24];
    v25 = sub_2416B9B50();
    v136 = *(_QWORD *)(v25 - 8);
    v131 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26 = v23;
    v27 = v132;
    if (v131(v130, 1, v25))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v130, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      v29 = v136;
    }
    else
    {
      v29 = v136;
      (*(void (**)(char *, char *, uint64_t))(v136 + 16))(__dst, v130, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(__dst, 0, 1, v25);
    }
    v30 = v137[14];
    v31 = &v14[v30];
    v32 = &v15[v30];
    if (v131(&v15[v30], 1, v25))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v31, v32, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v25);
    }
    v34 = v137[15];
    v35 = &v14[v34];
    v36 = &v15[v34];
    v37 = *((_QWORD *)v36 + 1);
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *((_QWORD *)v35 + 1) = v37;
    v38 = v137[16];
    v39 = &v14[v38];
    v40 = &v15[v38];
    v41 = *((_QWORD *)v40 + 1);
    *(_QWORD *)v39 = *(_QWORD *)v40;
    *((_QWORD *)v39 + 1) = v41;
    v14[v137[17]] = v15[v137[17]];
    v14[v137[18]] = v15[v137[18]];
    v42 = v137[19];
    v43 = &v14[v42];
    v44 = (uint64_t *)&v15[v42];
    v45 = *(_QWORD *)&v15[v42 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v45 >> 60 == 15)
    {
      *(_OWORD *)v43 = *(_OWORD *)v44;
    }
    else
    {
      v46 = *v44;
      sub_2415A0A90(*v44, v45);
      *(_QWORD *)v43 = v46;
      *((_QWORD *)v43 + 1) = v45;
    }
    v47 = v137[20];
    v48 = &v14[v47];
    v49 = &v15[v47];
    v50 = sub_2416B9A18();
    v51 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v48, v49, v50);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    v53 = v137[21];
    v54 = *(void **)&v15[v53];
    *(_QWORD *)&v14[v53] = v54;
    v55 = v137[22];
    v56 = &v14[v55];
    v57 = &v15[v55];
    v58 = v54;
    if (v131(v57, 1, v25))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v56, v57, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v56, 0, 1, v25);
    }
    v60 = v134[6];
    v61 = &v129[v60];
    v62 = &v135[v60];
    v63 = sub_2416B9C10();
    v64 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16);
    v64(v61, v62, v63);
    v65 = v134[7];
    v66 = &v129[v65];
    v67 = &v135[v65];
    v64(&v129[v65], &v135[v65], v63);
    v68 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    v69 = *(void **)&v67[v68];
    *(_QWORD *)&v66[v68] = v69;
    v70 = v134[8];
    v71 = &v129[v70];
    v72 = &v135[v70];
    v73 = v69;
    v138 = v64;
    v64(v71, v72, v63);
    v74 = type metadata accessor for MedicalIDWeightFormatter();
    v75 = *(int *)(v74 + 20);
    v76 = *(void **)&v72[v75];
    *(_QWORD *)&v71[v75] = v76;
    v77 = *(int *)(v74 + 24);
    v78 = *(void **)&v72[v77];
    *(_QWORD *)&v71[v77] = v78;
    v79 = a3[6];
    v80 = (_QWORD *)((char *)v140 + v79);
    v81 = (char *)v139 + v79;
    v82 = *(_QWORD *)((char *)v139 + v79 + 8);
    *v80 = *(_QWORD *)((char *)v139 + v79);
    v80[1] = v82;
    sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    v84 = *(int *)(v83 + 32);
    v85 = (char *)v80 + v84;
    v86 = &v81[v84];
    sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
    v88 = v87;
    v89 = *(_QWORD *)(v87 - 8);
    v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48);
    v91 = v76;
    v92 = v78;
    swift_retain();
    swift_retain();
    if (v90(v86, 1, v88))
    {
      sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v85, v86, v88);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v85, 0, 1, v88);
    }
    v94 = a3[8];
    *(_QWORD *)((char *)v140 + a3[7]) = *(_QWORD *)((char *)v139 + a3[7]);
    v95 = (_QWORD *)((char *)v140 + v94);
    v96 = (_QWORD *)((char *)v139 + v94);
    v97 = v96[1];
    *v95 = *v96;
    v95[1] = v97;
    v98 = a3[9];
    v99 = a3[10];
    v100 = (_QWORD *)((char *)v140 + v98);
    v101 = (_QWORD *)((char *)v139 + v98);
    v102 = v101[1];
    *v100 = *v101;
    v100[1] = v102;
    v103 = (char *)v140 + v99;
    v104 = (char *)v139 + v99;
    *v103 = *v104;
    *((_QWORD *)v103 + 1) = *((_QWORD *)v104 + 1);
    v105 = a3[11];
    v106 = (char *)v140 + v105;
    v107 = (char *)v139 + v105;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v90(v107, 1, v88))
    {
      sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v106, v107, v88);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v106, 0, 1, v88);
    }
    sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    v110 = v109;
    *(_QWORD *)&v106[*(int *)(v109 + 28)] = *(_QWORD *)&v107[*(int *)(v109 + 28)];
    v111 = a3[12];
    v8 = v140;
    v112 = (char *)v140 + v111;
    v113 = (char *)v139 + v111;
    swift_retain();
    if (v90(v113, 1, v88))
    {
      sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v112, v113, v88);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v112, 0, 1, v88);
    }
    *(_QWORD *)&v112[*(int *)(v110 + 28)] = *(_QWORD *)&v113[*(int *)(v110 + 28)];
    v115 = a3[13];
    v116 = (char *)v140 + v115;
    v117 = (char *)v139 + v115;
    swift_retain();
    if (v90(v117, 1, v88))
    {
      sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v116, v117, v88);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v116, 0, 1, v88);
    }
    *(_QWORD *)&v116[*(int *)(v110 + 28)] = *(_QWORD *)&v117[*(int *)(v110 + 28)];
    v119 = a3[14];
    v120 = (char *)v140 + v119;
    v121 = (char *)v139 + v119;
    sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v138(v120, v121, v63);
    }
    else
    {
      *(_QWORD *)v120 = *(_QWORD *)v121;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v122 = a3[15];
    v123 = (_QWORD *)((char *)v140 + v122);
    v124 = (char *)v139 + v122;
    v126 = *(void **)v124;
    v125 = *((_QWORD *)v124 + 1);
    *v123 = v126;
    v123[1] = v125;
    v127 = v126;
  }
  return v8;
}

void sub_24168B3B4(_QWORD *a1, int *a2)
{
  char *v4;
  char *v5;
  int *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int *v36;

  if (*a1)
    swift_release();
  v4 = (char *)a1 + a2[5];
  swift_bridgeObjectRelease();
  v36 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v5 = &v4[v36[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v6 = (int *)type metadata accessor for MedicalIDData();
  v7 = &v5[v6[13]];
  v8 = sub_2416B9B50();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  v11 = &v5[v6[14]];
  if (!v10(v11, 1, v8))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v35 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = (uint64_t *)&v5[v6[19]];
  v13 = v12[1];
  if (v13 >> 60 != 15)
    sub_2415A0DAC(*v12, v13);
  v14 = &v5[v6[20]];
  v15 = sub_2416B9A18();
  v16 = *(_QWORD *)(v15 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);

  v17 = &v5[v6[22]];
  if (!v10(v17, 1, v8))
    (*(void (**)(char *, uint64_t))(v35 + 8))(v17, v8);
  v18 = &v4[v36[6]];
  v19 = sub_2416B9C10();
  v20 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(v18, v19);
  v21 = &v4[v36[7]];
  v20(v21, v19);

  v22 = &v4[v36[8]];
  v20(v22, v19);
  v23 = type metadata accessor for MedicalIDWeightFormatter();

  v24 = (char *)a1 + a2[6];
  swift_release();
  swift_release();
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v26 = &v24[*(int *)(v25 + 32)];
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v28 = v27;
  v29 = *(_QWORD *)(v27 - 8);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (!v30(v26, 1, v27))
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v31 = (char *)a1 + a2[11];
  if (!v30(v31, 1, v28))
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  swift_release();
  v32 = (char *)a1 + a2[12];
  if (!v30(v32, 1, v28))
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v28);
  swift_release();
  v33 = (char *)a1 + a2[13];
  if (!v30(v33, 1, v28))
    (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v28);
  swift_release();
  v34 = (char *)a1 + a2[14];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v20(v34, v19);
  else
    swift_release();

}

_QWORD *sub_24168B818(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(char *, uint64_t, uint64_t);
  id v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  void *v123;
  id v124;
  char *v126;
  char *v127;
  unsigned int (*v128)(char *, uint64_t, uint64_t);
  void *v129;
  char *__dst;
  int *v131;
  char *v132;
  uint64_t v133;
  int *v134;
  void (*v135)(char *, char *, uint64_t);
  _QWORD *v136;
  _QWORD *v137;

  if (*a2)
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v6 = a3[5];
  v136 = a2;
  v137 = a1;
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = *((_QWORD *)v8 + 1);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *((_QWORD *)v7 + 1) = v9;
  v131 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v132 = v8;
  v10 = v131[5];
  v126 = v7;
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = *(_QWORD *)&v8[v10 + 8];
  *(_QWORD *)v11 = *(_QWORD *)&v8[v10];
  *((_QWORD *)v11 + 1) = v13;
  v15 = *(_QWORD *)&v8[v10 + 16];
  v14 = *(_QWORD *)&v8[v10 + 24];
  *((_QWORD *)v11 + 2) = v15;
  *((_QWORD *)v11 + 3) = v14;
  v16 = *((_QWORD *)v12 + 5);
  *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
  *((_QWORD *)v11 + 5) = v16;
  v17 = *((_QWORD *)v12 + 7);
  *((_QWORD *)v11 + 6) = *((_QWORD *)v12 + 6);
  *((_QWORD *)v11 + 7) = v17;
  v18 = *((_QWORD *)v12 + 9);
  *((_QWORD *)v11 + 8) = *((_QWORD *)v12 + 8);
  *((_QWORD *)v11 + 9) = v18;
  v19 = *((_QWORD *)v12 + 11);
  *((_QWORD *)v11 + 10) = *((_QWORD *)v12 + 10);
  *((_QWORD *)v11 + 11) = v19;
  v20 = (void *)*((_QWORD *)v12 + 12);
  v129 = (void *)*((_QWORD *)v12 + 13);
  *((_QWORD *)v11 + 12) = v20;
  *((_QWORD *)v11 + 13) = v129;
  v134 = (int *)type metadata accessor for MedicalIDData();
  v21 = v134[13];
  __dst = &v11[v21];
  v127 = &v12[v21];
  v22 = sub_2416B9B50();
  v133 = *(_QWORD *)(v22 - 8);
  v128 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = v20;
  v24 = v129;
  if (v128(v127, 1, v22))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v127, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    v26 = v133;
  }
  else
  {
    v26 = v133;
    (*(void (**)(char *, char *, uint64_t))(v133 + 16))(__dst, v127, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56))(__dst, 0, 1, v22);
  }
  v27 = v134[14];
  v28 = &v11[v27];
  v29 = &v12[v27];
  if (v128(&v12[v27], 1, v22))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v28, v29, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v22);
  }
  v31 = v134[15];
  v32 = &v11[v31];
  v33 = &v12[v31];
  v34 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = v34;
  v35 = v134[16];
  v36 = &v11[v35];
  v37 = &v12[v35];
  v38 = *((_QWORD *)v37 + 1);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_QWORD *)v36 + 1) = v38;
  v11[v134[17]] = v12[v134[17]];
  v11[v134[18]] = v12[v134[18]];
  v39 = v134[19];
  v40 = &v11[v39];
  v41 = (uint64_t *)&v12[v39];
  v42 = *(_QWORD *)&v12[v39 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v42 >> 60 == 15)
  {
    *(_OWORD *)v40 = *(_OWORD *)v41;
  }
  else
  {
    v43 = *v41;
    sub_2415A0A90(*v41, v42);
    *(_QWORD *)v40 = v43;
    *((_QWORD *)v40 + 1) = v42;
  }
  v44 = v134[20];
  v45 = &v11[v44];
  v46 = &v12[v44];
  v47 = sub_2416B9A18();
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  v50 = v134[21];
  v51 = *(void **)&v12[v50];
  *(_QWORD *)&v11[v50] = v51;
  v52 = v134[22];
  v53 = &v11[v52];
  v54 = &v12[v52];
  v55 = v51;
  if (v128(v54, 1, v22))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v53, v54, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v53, 0, 1, v22);
  }
  v57 = v131[6];
  v58 = &v126[v57];
  v59 = &v132[v57];
  v60 = sub_2416B9C10();
  v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
  v61(v58, v59, v60);
  v62 = v131[7];
  v63 = &v126[v62];
  v64 = &v132[v62];
  v61(&v126[v62], &v132[v62], v60);
  v65 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v66 = *(void **)&v64[v65];
  *(_QWORD *)&v63[v65] = v66;
  v67 = v131[8];
  v68 = &v126[v67];
  v69 = &v132[v67];
  v70 = v66;
  v135 = v61;
  v61(v68, v69, v60);
  v71 = type metadata accessor for MedicalIDWeightFormatter();
  v72 = *(int *)(v71 + 20);
  v73 = *(void **)&v69[v72];
  *(_QWORD *)&v68[v72] = v73;
  v74 = *(int *)(v71 + 24);
  v75 = *(void **)&v69[v74];
  *(_QWORD *)&v68[v74] = v75;
  v76 = a3[6];
  v77 = (_QWORD *)((char *)v137 + v76);
  v78 = (char *)v136 + v76;
  v79 = *(_QWORD *)((char *)v136 + v76 + 8);
  *v77 = *(_QWORD *)((char *)v136 + v76);
  v77[1] = v79;
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v81 = *(int *)(v80 + 32);
  v82 = (char *)v77 + v81;
  v83 = &v78[v81];
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v85 = v84;
  v86 = *(_QWORD *)(v84 - 8);
  v87 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48);
  v88 = v73;
  v89 = v75;
  swift_retain();
  swift_retain();
  if (v87(v83, 1, v85))
  {
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v82, v83, v85);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v82, 0, 1, v85);
  }
  v91 = a3[8];
  *(_QWORD *)((char *)v137 + a3[7]) = *(_QWORD *)((char *)v136 + a3[7]);
  v92 = (_QWORD *)((char *)v137 + v91);
  v93 = (_QWORD *)((char *)v136 + v91);
  v94 = v93[1];
  *v92 = *v93;
  v92[1] = v94;
  v95 = a3[9];
  v96 = a3[10];
  v97 = (_QWORD *)((char *)v137 + v95);
  v98 = (_QWORD *)((char *)v136 + v95);
  v99 = v98[1];
  *v97 = *v98;
  v97[1] = v99;
  v100 = (char *)v137 + v96;
  v101 = (char *)v136 + v96;
  *v100 = *v101;
  *((_QWORD *)v100 + 1) = *((_QWORD *)v101 + 1);
  v102 = a3[11];
  v103 = (char *)v137 + v102;
  v104 = (char *)v136 + v102;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v87(v104, 1, v85))
  {
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v103, v104, v85);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v103, 0, 1, v85);
  }
  sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v107 = v106;
  *(_QWORD *)&v103[*(int *)(v106 + 28)] = *(_QWORD *)&v104[*(int *)(v106 + 28)];
  v108 = a3[12];
  v109 = (char *)v137 + v108;
  v110 = (char *)v136 + v108;
  swift_retain();
  if (v87(v110, 1, v85))
  {
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v109, v110, v85);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v109, 0, 1, v85);
  }
  *(_QWORD *)&v109[*(int *)(v107 + 28)] = *(_QWORD *)&v110[*(int *)(v107 + 28)];
  v112 = a3[13];
  v113 = (char *)v137 + v112;
  v114 = (char *)v136 + v112;
  swift_retain();
  if (v87(v114, 1, v85))
  {
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v113, v114, v85);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v113, 0, 1, v85);
  }
  *(_QWORD *)&v113[*(int *)(v107 + 28)] = *(_QWORD *)&v114[*(int *)(v107 + 28)];
  v116 = a3[14];
  v117 = (char *)v137 + v116;
  v118 = (char *)v136 + v116;
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v135(v117, v118, v60);
  }
  else
  {
    *(_QWORD *)v117 = *(_QWORD *)v118;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v119 = a3[15];
  v120 = (_QWORD *)((char *)v137 + v119);
  v121 = (char *)v136 + v119;
  v123 = *(void **)v121;
  v122 = *((_QWORD *)v121 + 1);
  *v120 = v123;
  v120[1] = v122;
  v124 = v123;
  return v137;
}

char *sub_24168C0CC(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  id v63;
  uint64_t v64;
  char *v65;
  char *v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  id v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  id v90;
  uint64_t v91;
  void *v92;
  void *v93;
  id v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(char *, uint64_t, uint64_t);
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  int v135;
  int v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t (*v142)(uint64_t);
  uint64_t (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  char *v145;
  char *v146;
  void *v147;
  void *v148;
  id v149;
  uint64_t (*v151)(char *, uint64_t, uint64_t);
  uint64_t v152;
  int *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;

  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a1)
  {
    if (v5)
    {
      v6 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = v5;
      *((_QWORD *)a1 + 1) = v6;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v7 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = v5;
    *((_QWORD *)a1 + 1) = v7;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v8 = a3[5];
  v156 = a1;
  v157 = a2;
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
  *((_QWORD *)v9 + 1) = *(_QWORD *)&a2[v8 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v153 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v154 = v10;
  v11 = v153[5];
  v155 = v9;
  v12 = &v9[v11];
  v13 = &v10[v11];
  *(_QWORD *)v12 = *(_QWORD *)&v10[v11];
  *((_QWORD *)v12 + 1) = *(_QWORD *)&v10[v11 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
  *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v12 + 5) = *((_QWORD *)v13 + 5);
  *((_QWORD *)v12 + 6) = *((_QWORD *)v13 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
  *((_QWORD *)v12 + 8) = *((_QWORD *)v13 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v12 + 9) = *((_QWORD *)v13 + 9);
  *((_QWORD *)v12 + 10) = *((_QWORD *)v13 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v12 + 11) = *((_QWORD *)v13 + 11);
  v14 = (void *)*((_QWORD *)v12 + 12);
  v15 = (void *)*((_QWORD *)v13 + 12);
  *((_QWORD *)v12 + 12) = v15;
  v16 = v15;

  v17 = (void *)*((_QWORD *)v12 + 13);
  v18 = (void *)*((_QWORD *)v13 + 13);
  *((_QWORD *)v12 + 13) = v18;
  v19 = v18;

  v20 = (int *)type metadata accessor for MedicalIDData();
  v21 = v20[13];
  v22 = &v12[v21];
  v23 = &v13[v21];
  v24 = sub_2416B9B50();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
LABEL_13:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v22, v23, v24);
LABEL_14:
  v30 = v20[14];
  v31 = &v12[v30];
  v32 = &v13[v30];
  v33 = v26(&v12[v30], 1, v24);
  v34 = v26(v32, 1, v24);
  v152 = v25;
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v31, v32, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v31, 0, 1, v24);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v31, v24);
LABEL_19:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v31, v32, v24);
LABEL_20:
  v36 = v20[15];
  v37 = &v12[v36];
  v38 = &v13[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v39 = v20[16];
  v40 = &v12[v39];
  v41 = &v13[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12[v20[17]] = v13[v20[17]];
  v12[v20[18]] = v13[v20[18]];
  v42 = v20[19];
  v43 = (uint64_t *)&v12[v42];
  v44 = (uint64_t *)&v13[v42];
  v45 = *(_QWORD *)&v13[v42 + 8];
  v151 = v26;
  if (*(_QWORD *)&v12[v42 + 8] >> 60 == 15)
  {
    if (v45 >> 60 != 15)
    {
      v46 = *v44;
      sub_2415A0A90(*v44, v45);
      *v43 = v46;
      v43[1] = v45;
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (v45 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v43);
LABEL_25:
    *(_OWORD *)v43 = *(_OWORD *)v44;
    goto LABEL_27;
  }
  v47 = *v44;
  sub_2415A0A90(*v44, v45);
  v48 = *v43;
  v49 = v43[1];
  *v43 = v47;
  v43[1] = v45;
  sub_2415A0DAC(v48, v49);
LABEL_27:
  v50 = v20[20];
  v51 = &v12[v50];
  v52 = &v13[v50];
  v53 = sub_2416B9A18();
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  v56 = v55(v51, 1, v53);
  v57 = v55(v52, 1, v53);
  if (v56)
  {
    v58 = v151;
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v51, v52, v53);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  v58 = v151;
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v51, v53);
LABEL_32:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_33;
  }
  (*(void (**)(char *, char *, uint64_t))(v54 + 24))(v51, v52, v53);
LABEL_33:
  v60 = v20[21];
  v61 = *(void **)&v12[v60];
  v62 = *(void **)&v13[v60];
  *(_QWORD *)&v12[v60] = v62;
  v63 = v62;

  v64 = v20[22];
  v65 = &v12[v64];
  v66 = &v13[v64];
  v67 = v58(&v12[v64], 1, v24);
  v68 = v58(v66, 1, v24);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v65, v66, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v65, 0, 1, v24);
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v152 + 8))(v65, v24);
LABEL_38:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    goto LABEL_39;
  }
  (*(void (**)(char *, char *, uint64_t))(v152 + 24))(v65, v66, v24);
LABEL_39:
  v70 = v153[6];
  v71 = &v155[v70];
  v72 = &v154[v70];
  v73 = sub_2416B9C10();
  v74 = *(_QWORD *)(v73 - 8);
  v75 = *(void (**)(char *, char *, uint64_t))(v74 + 24);
  v75(v71, v72, v73);
  v76 = v153[7];
  v77 = &v155[v76];
  v78 = &v154[v76];
  v75(&v155[v76], &v154[v76], v73);
  v79 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v80 = *(void **)&v78[v79];
  v81 = *(void **)&v77[v79];
  *(_QWORD *)&v77[v79] = v80;
  v82 = v80;

  v83 = v153[8];
  v84 = &v155[v83];
  v85 = &v154[v83];
  v75(&v155[v83], &v154[v83], v73);
  v86 = type metadata accessor for MedicalIDWeightFormatter();
  v87 = *(int *)(v86 + 20);
  v88 = *(void **)&v85[v87];
  v89 = *(void **)&v84[v87];
  *(_QWORD *)&v84[v87] = v88;
  v90 = v88;

  v91 = *(int *)(v86 + 24);
  v92 = *(void **)&v85[v91];
  v93 = *(void **)&v84[v91];
  *(_QWORD *)&v84[v91] = v92;
  v94 = v92;

  v95 = a3[6];
  v96 = &v156[v95];
  v97 = &v157[v95];
  *(_QWORD *)&v156[v95] = *(_QWORD *)&v157[v95];
  swift_retain();
  swift_release();
  *((_QWORD *)v96 + 1) = *((_QWORD *)v97 + 1);
  swift_retain();
  swift_release();
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v99 = *(int *)(v98 + 32);
  v100 = &v96[v99];
  v101 = &v97[v99];
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v103 = v102;
  v104 = *(_QWORD *)(v102 - 8);
  v105 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v104 + 48);
  v106 = v105(v100, 1, v102);
  v107 = v105(v101, 1, v103);
  if (v106)
  {
    if (!v107)
    {
      (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v100, v101, v103);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v100, 0, 1, v103);
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (v107)
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v100, v103);
LABEL_44:
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    goto LABEL_45;
  }
  (*(void (**)(char *, char *, uint64_t))(v104 + 24))(v100, v101, v103);
LABEL_45:
  *(_QWORD *)&v156[a3[7]] = *(_QWORD *)&v157[a3[7]];
  swift_retain();
  swift_release();
  v109 = a3[8];
  v110 = &v156[v109];
  v111 = &v157[v109];
  *(_QWORD *)v110 = *(_QWORD *)v111;
  *((_QWORD *)v110 + 1) = *((_QWORD *)v111 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v112 = a3[9];
  v113 = &v156[v112];
  v114 = &v157[v112];
  *(_QWORD *)&v156[v112] = *(_QWORD *)&v157[v112];
  swift_retain();
  swift_release();
  *((_QWORD *)v113 + 1) = *((_QWORD *)v114 + 1);
  swift_retain();
  swift_release();
  v115 = a3[10];
  v116 = &v156[v115];
  v117 = &v157[v115];
  *v116 = *v117;
  *((_QWORD *)v116 + 1) = *((_QWORD *)v117 + 1);
  swift_retain();
  swift_release();
  v118 = a3[11];
  v119 = &v156[v118];
  v120 = &v157[v118];
  v121 = v105(&v156[v118], 1, v103);
  v122 = v105(v120, 1, v103);
  if (v121)
  {
    if (!v122)
    {
      (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v119, v120, v103);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v119, 0, 1, v103);
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (v122)
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v119, v103);
LABEL_50:
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    goto LABEL_51;
  }
  (*(void (**)(char *, char *, uint64_t))(v104 + 24))(v119, v120, v103);
LABEL_51:
  sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v125 = v124;
  *(_QWORD *)&v119[*(int *)(v124 + 28)] = *(_QWORD *)&v120[*(int *)(v124 + 28)];
  swift_retain();
  swift_release();
  v126 = a3[12];
  v127 = &v156[v126];
  v128 = &v157[v126];
  v129 = v105(&v156[v126], 1, v103);
  v130 = v105(v128, 1, v103);
  if (v129)
  {
    if (!v130)
    {
      (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v127, v128, v103);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v127, 0, 1, v103);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  if (v130)
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v127, v103);
LABEL_56:
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(char *, char *, uint64_t))(v104 + 24))(v127, v128, v103);
LABEL_57:
  *(_QWORD *)&v127[*(int *)(v125 + 28)] = *(_QWORD *)&v128[*(int *)(v125 + 28)];
  swift_retain();
  swift_release();
  v132 = a3[13];
  v133 = &v156[v132];
  v134 = &v157[v132];
  v135 = v105(&v156[v132], 1, v103);
  v136 = v105(v134, 1, v103);
  if (v135)
  {
    if (!v136)
    {
      (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v133, v134, v103);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v133, 0, 1, v103);
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (v136)
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v133, v103);
LABEL_62:
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v104 + 24))(v133, v134, v103);
LABEL_63:
  v138 = v157;
  *(_QWORD *)&v133[*(int *)(v125 + 28)] = *(_QWORD *)&v134[*(int *)(v125 + 28)];
  swift_retain();
  swift_release();
  if (v156 != v157)
  {
    v139 = a3[14];
    v140 = &v156[v139];
    v141 = &v157[v139];
    v142 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    v143 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&v156[v139], &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, &qword_25713A1C8, v142, v143);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v140, v141, v73);
    }
    else
    {
      *(_QWORD *)v140 = *(_QWORD *)v141;
      swift_retain();
    }
    v138 = v157;
    swift_storeEnumTagMultiPayload();
  }
  v144 = a3[15];
  v145 = &v156[v144];
  v146 = &v138[v144];
  v147 = *(void **)&v156[v144];
  v148 = *(void **)v146;
  *(_QWORD *)v145 = *(_QWORD *)v146;
  v149 = v148;

  *((_QWORD *)v145 + 1) = *((_QWORD *)v146 + 1);
  return v156;
}

_QWORD *sub_24168CD7C(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  int *v84;
  char *v85;
  char *v86;

  if (*(_QWORD *)a2)
  {
    v5 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v5;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  *(_OWORD *)((char *)a1 + v6) = *(_OWORD *)&a2[v6];
  v84 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v85 = v8;
  v9 = v84[5];
  v86 = v7;
  v10 = &v7[v9];
  v11 = &v8[v9];
  *(_OWORD *)v10 = *(_OWORD *)&v8[v9];
  *((_QWORD *)v10 + 2) = *(_QWORD *)&v8[v9 + 16];
  *(_OWORD *)(v10 + 24) = *(_OWORD *)&v8[v9 + 24];
  *(_OWORD *)(v10 + 40) = *(_OWORD *)&v8[v9 + 40];
  *(_OWORD *)(v10 + 56) = *(_OWORD *)&v8[v9 + 56];
  *(_OWORD *)(v10 + 72) = *(_OWORD *)&v8[v9 + 72];
  *((_QWORD *)v10 + 11) = *(_QWORD *)&v8[v9 + 88];
  *((_OWORD *)v10 + 6) = *(_OWORD *)&v8[v9 + 96];
  v12 = (int *)type metadata accessor for MedicalIDData();
  v13 = v12[13];
  v14 = &v10[v13];
  v15 = &v11[v13];
  v16 = sub_2416B9B50();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v18(v15, 1, v16))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v20 = v12[14];
  v21 = &v10[v20];
  v22 = &v11[v20];
  v82 = v18;
  v83 = v17;
  if (v18(&v11[v20], 1, v16))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v22, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v21, 0, 1, v16);
  }
  *(_OWORD *)&v10[v12[15]] = *(_OWORD *)&v11[v12[15]];
  *(_OWORD *)&v10[v12[16]] = *(_OWORD *)&v11[v12[16]];
  v10[v12[17]] = v11[v12[17]];
  v10[v12[18]] = v11[v12[18]];
  *(_OWORD *)&v10[v12[19]] = *(_OWORD *)&v11[v12[19]];
  v24 = v12[20];
  v25 = &v10[v24];
  v26 = &v11[v24];
  v27 = sub_2416B9A18();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  *(_QWORD *)&v10[v12[21]] = *(_QWORD *)&v11[v12[21]];
  v30 = v12[22];
  v31 = &v10[v30];
  v32 = &v11[v30];
  if (v82(&v11[v30], 1, v16))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v31, v32, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v31, 0, 1, v16);
  }
  v34 = v84[6];
  v35 = &v86[v34];
  v36 = &v85[v34];
  v37 = sub_2416B9C10();
  v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32);
  v38(v35, v36, v37);
  v39 = v84[7];
  v40 = &v86[v39];
  v41 = &v85[v39];
  v38(&v86[v39], &v85[v39], v37);
  v42 = type metadata accessor for MedicalIDHeightFormatter();
  *(_QWORD *)&v40[*(int *)(v42 + 20)] = *(_QWORD *)&v41[*(int *)(v42 + 20)];
  v43 = v84[8];
  v44 = &v86[v43];
  v45 = &v85[v43];
  v38(&v86[v43], &v85[v43], v37);
  v46 = type metadata accessor for MedicalIDWeightFormatter();
  *(_QWORD *)&v44[*(int *)(v46 + 20)] = *(_QWORD *)&v45[*(int *)(v46 + 20)];
  *(_QWORD *)&v44[*(int *)(v46 + 24)] = *(_QWORD *)&v45[*(int *)(v46 + 24)];
  v47 = a3[6];
  v48 = (_QWORD *)((char *)a1 + v47);
  v49 = &a2[v47];
  v50 = *(_QWORD *)&a2[v47 + 8];
  *v48 = *(_QWORD *)&a2[v47];
  v48[1] = v50;
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v52 = *(int *)(v51 + 32);
  v53 = (char *)v48 + v52;
  v54 = &v49[v52];
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v56 = v55;
  v57 = *(_QWORD *)(v55 - 8);
  v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
  if (v58(v54, 1, v55))
  {
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v53, v54, v56);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v53, 0, 1, v56);
  }
  v60 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)&a2[a3[7]];
  *(_OWORD *)((char *)a1 + v60) = *(_OWORD *)&a2[v60];
  v61 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)((char *)a1 + v61) = *(_OWORD *)&a2[v61];
  v62 = a3[11];
  v63 = (char *)a1 + v62;
  v64 = &a2[v62];
  if (v58(&a2[v62], 1, v56))
  {
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v63, v64, v56);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v63, 0, 1, v56);
  }
  sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v67 = v66;
  *(_QWORD *)&v63[*(int *)(v66 + 28)] = *(_QWORD *)&v64[*(int *)(v66 + 28)];
  v68 = a3[12];
  v69 = (char *)a1 + v68;
  v70 = &a2[v68];
  if (v58(&a2[v68], 1, v56))
  {
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v69, v70, v56);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v69, 0, 1, v56);
  }
  *(_QWORD *)&v69[*(int *)(v67 + 28)] = *(_QWORD *)&v70[*(int *)(v67 + 28)];
  v72 = a3[13];
  v73 = (char *)a1 + v72;
  v74 = &a2[v72];
  if (v58(&a2[v72], 1, v56))
  {
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v73, v74, v56);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v73, 0, 1, v56);
  }
  *(_QWORD *)&v73[*(int *)(v67 + 28)] = *(_QWORD *)&v74[*(int *)(v67 + 28)];
  v76 = a3[14];
  v77 = (char *)a1 + v76;
  v78 = &a2[v76];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v80 = v79;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v38(v77, v78, v37);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  *(_OWORD *)((char *)a1 + a3[15]) = *(_OWORD *)&a2[a3[15]];
  return a1;
}

char *sub_24168D4E0(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(char *, uint64_t, uint64_t);
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  int v132;
  int v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t (*v139)(uint64_t);
  uint64_t (*v140)(uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  _QWORD *v145;
  void *v146;
  uint64_t (*v148)(char *, uint64_t, uint64_t);
  uint64_t v149;
  int *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;

  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a1)
  {
    if (v5)
    {
      v6 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = v5;
      *((_QWORD *)a1 + 1) = v6;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v7 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = v5;
    *((_QWORD *)a1 + 1) = v7;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v8 = a3[5];
  v9 = &a1[v8];
  v153 = a2;
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a2[v8 + 8];
  *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  v150 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v151 = v10;
  v12 = v150[5];
  v152 = v9;
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = *(_QWORD *)&v10[v12 + 8];
  *(_QWORD *)v13 = *(_QWORD *)&v10[v12];
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  swift_bridgeObjectRelease();
  v16 = *((_QWORD *)v14 + 4);
  *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
  *((_QWORD *)v13 + 4) = v16;
  swift_bridgeObjectRelease();
  v17 = *((_QWORD *)v14 + 6);
  *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
  *((_QWORD *)v13 + 6) = v17;
  swift_bridgeObjectRelease();
  v18 = *((_QWORD *)v14 + 8);
  *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
  *((_QWORD *)v13 + 8) = v18;
  swift_bridgeObjectRelease();
  v19 = *((_QWORD *)v14 + 10);
  *((_QWORD *)v13 + 9) = *((_QWORD *)v14 + 9);
  *((_QWORD *)v13 + 10) = v19;
  swift_bridgeObjectRelease();
  v20 = (void *)*((_QWORD *)v13 + 12);
  v21 = *((_QWORD *)v14 + 12);
  *((_QWORD *)v13 + 11) = *((_QWORD *)v14 + 11);
  *((_QWORD *)v13 + 12) = v21;

  v22 = (void *)*((_QWORD *)v13 + 13);
  *((_QWORD *)v13 + 13) = *((_QWORD *)v14 + 13);

  v23 = (int *)type metadata accessor for MedicalIDData();
  v24 = v23[13];
  v25 = &v13[v24];
  v26 = &v14[v24];
  v27 = sub_2416B9B50();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_13:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v25, v26, v27);
LABEL_14:
  v33 = v23[14];
  v34 = &v13[v33];
  v35 = &v14[v33];
  v36 = v29(&v13[v33], 1, v27);
  v37 = v29(v35, 1, v27);
  v154 = a1;
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v34, v35, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v34, 0, 1, v27);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v34, v27);
LABEL_19:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v34, v35, v27);
LABEL_20:
  v39 = v23[15];
  v40 = &v13[v39];
  v41 = &v14[v39];
  v43 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = v43;
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  v44 = v23[16];
  v45 = &v13[v44];
  v46 = &v14[v44];
  v48 = *(_QWORD *)v46;
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = v48;
  *((_QWORD *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  v13[v23[17]] = v14[v23[17]];
  v13[v23[18]] = v14[v23[18]];
  v49 = v23[19];
  v50 = (uint64_t)&v13[v49];
  v51 = &v14[v49];
  v52 = *(_QWORD *)&v13[v49 + 8];
  v148 = v29;
  v149 = v28;
  if (v52 >> 60 == 15)
  {
LABEL_23:
    *(_OWORD *)v50 = *(_OWORD *)v51;
    goto LABEL_25;
  }
  v53 = *((_QWORD *)v51 + 1);
  if (v53 >> 60 == 15)
  {
    sub_2415A1B38(v50);
    goto LABEL_23;
  }
  v54 = *(_QWORD *)v50;
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *(_QWORD *)(v50 + 8) = v53;
  sub_2415A0DAC(v54, v52);
LABEL_25:
  v55 = v23[20];
  v56 = &v13[v55];
  v57 = &v14[v55];
  v58 = sub_2416B9A18();
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  v61 = v60(v56, 1, v58);
  v62 = v60(v57, 1, v58);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v56, v57, v58);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v56, v58);
LABEL_30:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v59 + 40))(v56, v57, v58);
LABEL_31:
  v64 = v23[21];
  v65 = *(void **)&v13[v64];
  *(_QWORD *)&v13[v64] = *(_QWORD *)&v14[v64];

  v66 = v23[22];
  v67 = &v13[v66];
  v68 = &v14[v66];
  v69 = v148(&v13[v66], 1, v27);
  v70 = v148(v68, 1, v27);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v67, v68, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v149 + 56))(v67, 0, 1, v27);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v149 + 8))(v67, v27);
LABEL_36:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v149 + 40))(v67, v68, v27);
LABEL_37:
  v72 = v150[6];
  v73 = &v152[v72];
  v74 = &v151[v72];
  v75 = sub_2416B9C10();
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(void (**)(char *, char *, uint64_t))(v76 + 40);
  v77(v73, v74, v75);
  v78 = v150[7];
  v79 = &v152[v78];
  v80 = &v151[v78];
  v77(&v152[v78], &v151[v78], v75);
  v81 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v82 = *(void **)&v79[v81];
  *(_QWORD *)&v79[v81] = *(_QWORD *)&v80[v81];

  v83 = v150[8];
  v84 = &v152[v83];
  v85 = &v151[v83];
  v77(&v152[v83], &v151[v83], v75);
  v86 = type metadata accessor for MedicalIDWeightFormatter();
  v87 = *(int *)(v86 + 20);
  v88 = *(void **)&v84[v87];
  *(_QWORD *)&v84[v87] = *(_QWORD *)&v85[v87];

  v89 = *(int *)(v86 + 24);
  v90 = *(void **)&v84[v89];
  *(_QWORD *)&v84[v89] = *(_QWORD *)&v85[v89];

  v91 = a3[6];
  v92 = &v154[v91];
  v93 = &v153[v91];
  *(_QWORD *)&v154[v91] = *(_QWORD *)&v153[v91];
  swift_release();
  *((_QWORD *)v92 + 1) = *((_QWORD *)v93 + 1);
  swift_release();
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v95 = *(int *)(v94 + 32);
  v96 = &v92[v95];
  v97 = &v93[v95];
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v99 = v98;
  v100 = *(_QWORD *)(v98 - 8);
  v101 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v100 + 48);
  v102 = v101(v96, 1, v98);
  v103 = v101(v97, 1, v99);
  if (v102)
  {
    if (!v103)
    {
      (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v96, v97, v99);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v96, 0, 1, v99);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v103)
  {
    (*(void (**)(char *, uint64_t))(v100 + 8))(v96, v99);
LABEL_42:
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v100 + 40))(v96, v97, v99);
LABEL_43:
  *(_QWORD *)&v154[a3[7]] = *(_QWORD *)&v153[a3[7]];
  swift_release();
  v105 = a3[8];
  v106 = &v154[v105];
  v107 = (uint64_t *)&v153[v105];
  v109 = *v107;
  v108 = v107[1];
  *(_QWORD *)v106 = v109;
  *((_QWORD *)v106 + 1) = v108;
  swift_bridgeObjectRelease();
  v110 = a3[9];
  v111 = &v154[v110];
  v112 = &v153[v110];
  *(_QWORD *)&v154[v110] = *(_QWORD *)&v153[v110];
  swift_release();
  *((_QWORD *)v111 + 1) = *((_QWORD *)v112 + 1);
  swift_release();
  v113 = a3[10];
  v114 = &v154[v113];
  v115 = &v153[v113];
  *v114 = *v115;
  *((_QWORD *)v114 + 1) = *((_QWORD *)v115 + 1);
  swift_release();
  v116 = a3[11];
  v117 = &v154[v116];
  v118 = &v153[v116];
  LODWORD(v112) = v101(&v154[v116], 1, v99);
  v119 = v101(v118, 1, v99);
  if ((_DWORD)v112)
  {
    if (!v119)
    {
      (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v117, v118, v99);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v117, 0, 1, v99);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v119)
  {
    (*(void (**)(char *, uint64_t))(v100 + 8))(v117, v99);
LABEL_48:
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v100 + 40))(v117, v118, v99);
LABEL_49:
  sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v122 = v121;
  *(_QWORD *)&v117[*(int *)(v121 + 28)] = *(_QWORD *)&v118[*(int *)(v121 + 28)];
  swift_release();
  v123 = a3[12];
  v124 = &v154[v123];
  v125 = &v153[v123];
  v126 = v101(&v154[v123], 1, v99);
  v127 = v101(v125, 1, v99);
  if (v126)
  {
    if (!v127)
    {
      (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v124, v125, v99);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v124, 0, 1, v99);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v127)
  {
    (*(void (**)(char *, uint64_t))(v100 + 8))(v124, v99);
LABEL_54:
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v100 + 40))(v124, v125, v99);
LABEL_55:
  *(_QWORD *)&v124[*(int *)(v122 + 28)] = *(_QWORD *)&v125[*(int *)(v122 + 28)];
  swift_release();
  v129 = a3[13];
  v130 = &v154[v129];
  v131 = &v153[v129];
  v132 = v101(&v154[v129], 1, v99);
  v133 = v101(v131, 1, v99);
  if (v132)
  {
    if (!v133)
    {
      (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v130, v131, v99);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v130, 0, 1, v99);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v133)
  {
    (*(void (**)(char *, uint64_t))(v100 + 8))(v130, v99);
LABEL_60:
    sub_24168F020(0, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v100 + 40))(v130, v131, v99);
LABEL_61:
  v135 = v153;
  *(_QWORD *)&v130[*(int *)(v122 + 28)] = *(_QWORD *)&v131[*(int *)(v122 + 28)];
  swift_release();
  if (v154 != v153)
  {
    v136 = a3[14];
    v137 = &v154[v136];
    v138 = &v153[v136];
    v139 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    v140 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&v154[v136], &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, &qword_25713A1C8, v139, v140);
    v142 = v141;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v137, v138, v75);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
    }
    v135 = v153;
  }
  v143 = a3[15];
  v144 = &v154[v143];
  v145 = (_QWORD *)((char *)v135 + v143);
  v146 = *(void **)&v154[v143];
  *(_QWORD *)v144 = *v145;

  *((_QWORD *)v144 + 1) = v145[1];
  return v154;
}

uint64_t sub_24168E048()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24168E054(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for MedicalIDBiometricsViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    v7 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v9 = a3[11];
    }
    else
    {
      sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
      v8 = v14;
      v7 = *(_QWORD *)(v14 - 8);
      v9 = a3[14];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[7]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_24168E178()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_24168E184(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = type metadata accessor for MedicalIDBiometricsViewModel();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[6];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[7]) = (a2 - 1);
        return;
      }
      sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
      v9 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v13;
        v11 = a4[11];
      }
      else
      {
        sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
        v10 = v14;
        v9 = *(_QWORD *)(v14 - 8);
        v11 = a4[14];
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_24168E2A4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for MedicalIDBiometricsViewModel();
  if (v0 <= 0x3F)
  {
    sub_241683C20(319, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    if (v1 <= 0x3F)
    {
      sub_241683C20(319, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
      if (v2 <= 0x3F)
      {
        sub_24159D6B0(319, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_24168E3C4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24168E3D4()
{
  uint64_t result;

  result = qword_25713F828;
  if (!qword_25713F828)
  {
    sub_24168E4A4(255);
    sub_24168E65C(255);
    sub_24159CE88(&qword_25713F8C8, (uint64_t (*)(uint64_t))sub_24168E4A4, MEMORY[0x24BDF4498]);
    sub_2415A40A4(&qword_25713F8D0, (uint64_t (*)(uint64_t))sub_24168E65C, sub_24168E810, sub_2415A4680);
    type metadata accessor for MedicalIDAXLayoutView();
  }
  return result;
}

void sub_24168E4A4(uint64_t a1)
{
  sub_2415EBDB0(a1, &qword_25713F830, (uint64_t (*)(uint64_t))sub_24168E4C8, &qword_25713F870, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF4480]);
}

void sub_24168E4C8(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713F838, (uint64_t (*)(uint64_t))sub_24168E4E4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_24168E4E4()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713F840)
  {
    sub_2415E40F8();
    sub_2415D8800(255, &qword_25713F848, (uint64_t (*)(uint64_t))sub_24168E578, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713F840);
  }
}

void sub_24168E578(uint64_t a1)
{
  sub_2415EBDB0(a1, &qword_25713F850, (uint64_t (*)(uint64_t))sub_24168E59C, &qword_25713F868, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF4480]);
}

void sub_24168E59C(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713F858, (uint64_t (*)(uint64_t))sub_24168E5B8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_24168E5B8()
{
  uint64_t (*v0)(void);
  unint64_t TupleTypeMetadata2;
  uint64_t v2;

  if (!qword_25713F860)
  {
    v0 = MEMORY[0x24BEE1C68];
    sub_24159D6B0(255, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_24159D7F0(255, &qword_25713D408, (uint64_t)&type metadata for ClearButtonView, (uint64_t (*)(_QWORD, uint64_t))v0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v2)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713F860);
  }
}

void sub_24168E65C(uint64_t a1)
{
  sub_2415D8800(a1, &qword_25713F878, (uint64_t (*)(uint64_t))sub_24168E680, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
}

void sub_24168E680(uint64_t a1)
{
  sub_2415EBDB0(a1, &qword_25713F880, (uint64_t (*)(uint64_t))sub_24168E6A4, &qword_25713F8C0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF46E0]);
}

void sub_24168E6A4(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713F888, (uint64_t (*)(uint64_t))sub_24168E6C0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_24168E6C0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713F890)
  {
    sub_2415E40F8();
    sub_2415D8800(255, &qword_25713F898, (uint64_t (*)(uint64_t))sub_24168E74C, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713F890);
  }
}

void sub_24168E74C(uint64_t a1)
{
  sub_2415EBDB0(a1, &qword_25713F8A0, (uint64_t (*)(uint64_t))sub_24168E770, &qword_25713F8B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF4480]);
}

void sub_24168E770(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713F8A8, (uint64_t (*)(uint64_t))sub_24168E78C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_24168E78C()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713F8B0)
  {
    sub_24159D6B0(255, (unint64_t *)&qword_25713C348, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713F8B0);
  }
}

uint64_t sub_24168E810()
{
  return sub_24159CE88(&qword_25713F8D8, (uint64_t (*)(uint64_t))sub_24168E680, MEMORY[0x24BDF4700]);
}

void sub_24168E82C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F8E0)
  {
    sub_24168E3D4();
    sub_24168F830(255, (unint64_t *)&qword_25713CDB8, (uint64_t (*)(void))sub_2415BE1DC, MEMORY[0x24BDF52F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEFAB8]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F8E0);
  }
}

void sub_24168E8B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_25713F8E8)
  {
    sub_24168E9B0(255);
    v3 = v2;
    sub_24168E82C();
    sub_2416B9C10();
    v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    v7[2] = sub_2415A40A4(&qword_25713F8F8, (uint64_t (*)(uint64_t))sub_24168E82C, sub_24168EA8C, (uint64_t (*)(void))sub_24168EAA8);
    v7[3] = sub_24159CE88((unint64_t *)&qword_25713CF80, v4, MEMORY[0x24BDCEED8]);
    v7[0] = v3;
    v7[1] = swift_getOpaqueTypeConformance2();
    v5 = MEMORY[0x242699480](a1, v7, MEMORY[0x24BDF2550], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25713F8E8);
  }
}

void sub_24168E9B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_25713F8F0)
  {
    sub_24168E82C();
    v3 = v2;
    v4 = sub_2416B9C10();
    v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    v8[0] = v3;
    v8[1] = v4;
    v8[2] = sub_2415A40A4(&qword_25713F8F8, (uint64_t (*)(uint64_t))sub_24168E82C, sub_24168EA8C, (uint64_t (*)(void))sub_24168EAA8);
    v8[3] = sub_24159CE88((unint64_t *)&qword_25713CF80, v5, MEMORY[0x24BDCEED8]);
    v6 = MEMORY[0x242699480](a1, v8, MEMORY[0x24BDF3908], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713F8F0);
  }
}

uint64_t sub_24168EA8C()
{
  return sub_24159CE88(&qword_25713F900, (uint64_t (*)(uint64_t))sub_24168E3D4, (uint64_t)&unk_2416C0968);
}

unint64_t sub_24168EAA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713CDD0[0];
  if (!qword_25713CDD0[0])
  {
    sub_24168F830(255, (unint64_t *)&qword_25713CDB8, (uint64_t (*)(void))sub_2415BE1DC, MEMORY[0x24BDF52F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEFAB8]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEFAD8], v1);
    atomic_store(result, qword_25713CDD0);
  }
  return result;
}

uint64_t sub_24168EB14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EditHeightCellView() - 8) + 80);
  return sub_241684A08(v1 + ((v3 + 16) & ~v3), a1);
}

void sub_24168EB54(uint64_t a1@<X8>)
{
  type metadata accessor for EditHeightCellView();
  sub_241684A70(a1);
}

uint64_t sub_24168EBA0()
{
  return sub_241690104(sub_241684C70);
}

uint64_t sub_24168EBB0()
{
  return sub_241690104((uint64_t (*)(uint64_t))sub_241684DCC);
}

void sub_24168EBBC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F908)
  {
    sub_2415D8800(255, &qword_25713F910, (uint64_t (*)(uint64_t))sub_24168EC30, (uint64_t (*)(uint64_t))sub_24168ECD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F908);
  }
}

void sub_24168EC30(uint64_t a1)
{
  sub_2415EBDB0(a1, &qword_25713F918, (uint64_t (*)(uint64_t))sub_24168EC54, &qword_25713FA10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF4480]);
}

void sub_24168EC54(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713F920, (uint64_t (*)(uint64_t))sub_24168EC70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_24168EC70()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713F928)
  {
    sub_24168ECD8(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713F928);
  }
}

void sub_24168ECD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_25713F930)
  {
    sub_2415D8800(255, &qword_25713F938, (uint64_t (*)(uint64_t))sub_24168EDBC, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v3 = v2;
    sub_24168F020(255, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_24168F548();
    v7[3] = sub_24168F630(&qword_25713FA00, &qword_25713FA08, MEMORY[0x24BDCB5D0], MEMORY[0x24BEE4AB8]);
    v5 = MEMORY[0x242699480](a1, v7, MEMORY[0x24BDF3908], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25713F930);
  }
}

void sub_24168EDBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_25713F940)
  {
    sub_24168EE6C();
    v5[0] = v2;
    v5[1] = sub_2416BA234();
    v5[2] = sub_24159CE88(&qword_25713F9F0, (uint64_t (*)(uint64_t))sub_24168EE6C, MEMORY[0x24BDF4570]);
    v5[3] = MEMORY[0x24BDEDB38];
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF23F8], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713F940);
  }
}

void sub_24168EE6C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F948)
  {
    sub_24168F020(255, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_24168EF38();
    sub_24168F630(&qword_25713F980, &qword_25713F988, MEMORY[0x24BDCB5B0], MEMORY[0x24BEE4AB0]);
    sub_24168F3DC();
    v0 = sub_2416BADC8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F948);
  }
}

void sub_24168EF38()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_25713F950)
  {
    sub_24168F020(255, &qword_25713F958, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590];
    sub_241683BB0(255, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
    sub_24168F088();
    sub_24168F384();
    sub_24168F88C(&qword_25713F988, &qword_25713A180, v0, MEMORY[0x24BDCB5B0]);
    v1 = sub_2416BAE94();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_25713F950);
  }
}

void sub_24168F020(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_241683BB0(255, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_24168F088()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F960)
  {
    sub_24168F10C();
    sub_24168F188(255, &qword_25713F998, (uint64_t)&unk_25713F9A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_24168FA28, &qword_25713F9B8);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F960);
  }
}

void sub_24168F10C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F968)
  {
    sub_24168F188(255, &qword_25713F970, (uint64_t)&unk_25713F978, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_24168F214, &qword_25713F990);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F968);
  }
}

void sub_24168F188(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t (*)(void)), unint64_t *a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a4(255, a3, MEMORY[0x24BDEDA90]);
    sub_24168F2A8(a5, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD))a4);
    v9 = sub_2416BA63C();
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_24168F214(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_24168F020(255, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v7 = v6;
    v8 = sub_24168F630(&qword_25713F980, &qword_25713F988, MEMORY[0x24BDCB5B0], MEMORY[0x24BEE4AB0]);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_24168F2A8(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = a3(255, a2, MEMORY[0x24BDEDA90]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEDAB0], v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24168F2F4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = qword_25713F9B0;
  if (!qword_25713F9B0)
  {
    sub_241683C20(255, &qword_25713F9A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v2 = v1;
    v3 = MEMORY[0x24BEE4AB0];
    v4 = sub_24168F630(&qword_25713F980, &qword_25713F988, MEMORY[0x24BDCB5B0], MEMORY[0x24BEE4AB0]);
    result = MEMORY[0x2426994BC](v3, v2, &v4);
    atomic_store(result, (unint64_t *)&qword_25713F9B0);
  }
  return result;
}

unint64_t sub_24168F384()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713F9C0;
  if (!qword_25713F9C0)
  {
    sub_24168F020(255, &qword_25713F958, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE12D8], v1);
    atomic_store(result, (unint64_t *)&qword_25713F9C0);
  }
  return result;
}

unint64_t sub_24168F3DC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_25713F9C8;
  if (!qword_25713F9C8)
  {
    sub_24168EF38();
    v2 = v1;
    v3 = sub_2415A40A4(&qword_25713F9D0, (uint64_t (*)(uint64_t))sub_24168F088, sub_24168F45C, (uint64_t (*)(void))sub_24168F4E0);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF4A08], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713F9C8);
  }
  return result;
}

uint64_t sub_24168F45C()
{
  return sub_2415EFC24(&qword_25713F9D8, (uint64_t (*)(uint64_t))sub_24168F10C, (uint64_t (*)(void))sub_24168F478);
}

unint64_t sub_24168F478()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713F9E0;
  if (!qword_25713F9E0)
  {
    sub_24168F188(255, &qword_25713F970, (uint64_t)&unk_25713F978, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_24168F214, &qword_25713F990);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEFB48], v1);
    atomic_store(result, (unint64_t *)&qword_25713F9E0);
  }
  return result;
}

unint64_t sub_24168F4E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713F9E8;
  if (!qword_25713F9E8)
  {
    sub_24168F188(255, &qword_25713F998, (uint64_t)&unk_25713F9A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_24168FA28, &qword_25713F9B8);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEFB48], v1);
    atomic_store(result, (unint64_t *)&qword_25713F9E8);
  }
  return result;
}

unint64_t sub_24168F548()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  result = qword_25713F9F8;
  if (!qword_25713F9F8)
  {
    sub_2415D8800(255, &qword_25713F938, (uint64_t (*)(uint64_t))sub_24168EDBC, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v2 = v1;
    sub_24168EE6C();
    v4[2] = v3;
    v4[3] = sub_2416BA234();
    v4[4] = sub_24159CE88(&qword_25713F9F0, (uint64_t (*)(uint64_t))sub_24168EE6C, MEMORY[0x24BDF4570]);
    v4[5] = MEMORY[0x24BDEDB38];
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = sub_2415A4680();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713F9F8);
  }
  return result;
}

uint64_t sub_24168F630(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_24168F020(255, &qword_25713A190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v10 = v9;
    v11 = sub_24168F88C(a2, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590], a3);
    result = MEMORY[0x2426994BC](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

void sub_24168F6C8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713FA18)
  {
    sub_24168E8B0(255);
    sub_24168EBBC();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713FA18);
  }
}

uint64_t sub_24168F734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415D8800(0, &qword_25713F910, (uint64_t (*)(uint64_t))sub_24168EC30, (uint64_t (*)(uint64_t))sub_24168ECD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24168F798()
{
  uint64_t v0;

  return sub_241687784(*(_QWORD *)(v0 + 16));
}

uint64_t sub_24168F7A8()
{
  uint64_t v0;

  return sub_241688320(*(_QWORD *)(v0 + 16));
}

void sub_24168F7BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713F4B8)
  {
    sub_24168F830(255, (unint64_t *)&qword_25713F4C0, (uint64_t (*)(void))sub_24167E500, MEMORY[0x24BEE13C8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDCD4B0]);
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713F4B8);
  }
}

void sub_24168F830(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t sub_24168F88C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_241683BB0(255, a2, a3);
    result = MEMORY[0x2426994BC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24168F8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, _QWORD))
{
  uint64_t v6;

  v6 = a4(0, a3, MEMORY[0x24BDEDA70]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_24168F920(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24168F188(0, &qword_25713F970, (uint64_t)&unk_25713F978, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_24168F214, &qword_25713F990);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24168F984(uint64_t a1)
{
  uint64_t v2;

  sub_24168F188(0, &qword_25713F970, (uint64_t)&unk_25713F978, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_24168F214, &qword_25713F990);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24168F9E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, _QWORD))
{
  uint64_t v4;

  v4 = a3(0, a2, MEMORY[0x24BDEDA70]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_24168FA28(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_241683C20(255, &qword_25713F9A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v7 = v6;
    v8 = sub_24168F2F4();
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_24168FAA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for EditHeightCellView();
  return sub_2416885E0(a1, a2);
}

uint64_t sub_24168FAF0()
{
  uint64_t v0;

  return sub_241688BA0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_24168FAFC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EditHeightCellView() - 8) + 80);
  v2 = *(void (**)(void))(v0 + ((v1 + 16) & ~v1));
  if (v2)
    v2();
  return sub_241687A44();
}

uint64_t sub_24168FB4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for EditHeightCellView();
  return sub_241688E68(a1, a2);
}

uint64_t sub_24168FB98()
{
  return sub_241684F64();
}

uint64_t sub_24168FBB4()
{
  return sub_241690104(sub_24168502C);
}

uint64_t sub_24168FBD4()
{
  return sub_241690104((uint64_t (*)(uint64_t))sub_24168A868);
}

uint64_t sub_24168FBE0()
{
  uint64_t v0;

  return sub_24168A8F4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_24168FBF8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_2415D8800(0, a3, a4, (uint64_t (*)(uint64_t))sub_2415E40F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t objectdestroyTm_21()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  char *v3;
  char *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v35;
  int *v36;

  v1 = (int *)type metadata accessor for EditHeightCellView();
  v2 = (_QWORD *)(v0
                + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80)));
  if (*v2)
    swift_release();
  v3 = (char *)v2 + v1[5];
  swift_bridgeObjectRelease();
  v36 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v4 = &v3[v36[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = &v4[v5[13]];
  v7 = sub_2416B9B50();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  v10 = &v4[v5[14]];
  if (!v9(v10, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v35 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)&v4[v5[19]];
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_2415A0DAC(*v11, v12);
  v13 = &v4[v5[20]];
  v14 = sub_2416B9A18();
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);

  v16 = &v4[v5[22]];
  if (!v9(v16, 1, v7))
    (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v7);
  v17 = &v3[v36[6]];
  v18 = sub_2416B9C10();
  v19 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(v17, v18);
  v20 = &v3[v36[7]];
  v19(v20, v18);

  v21 = &v3[v36[8]];
  v19(v21, v18);
  v22 = type metadata accessor for MedicalIDWeightFormatter();

  v23 = (char *)v2 + v1[6];
  swift_release();
  swift_release();
  sub_241683C20(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v25 = &v23[*(int *)(v24 + 32)];
  sub_241683BB0(0, &qword_25713A180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v27 = v26;
  v28 = *(_QWORD *)(v26 - 8);
  v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  if (!v29(v25, 1, v26))
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v30 = (char *)v2 + v1[11];
  if (!v29(v30, 1, v27))
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  sub_241683C20(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  swift_release();
  v31 = (char *)v2 + v1[12];
  if (!v29(v31, 1, v27))
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
  swift_release();
  v32 = (char *)v2 + v1[13];
  if (!v29(v32, 1, v27))
    (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v27);
  swift_release();
  v33 = (char *)v2 + v1[14];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v19(v33, v18);
  else
    swift_release();

  return swift_deallocObject();
}

uint64_t sub_241690104(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EditHeightCellView() - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_241690140()
{
  return sub_24159CE88(&qword_25713FA90, (uint64_t (*)(uint64_t))sub_24169016C, MEMORY[0x24BDF5428]);
}

void sub_24169016C(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713FA98, (uint64_t (*)(uint64_t))sub_24168F6C8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

ValueMetadata *type metadata accessor for HorizontalTitleDetailLabelView()
{
  return &type metadata for HorizontalTitleDetailLabelView;
}

uint64_t sub_241690198()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2416901A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_2415C343C();
  swift_bridgeObjectRetain();
  v2 = sub_2416BA9D8();
  v4 = v3;
  v6 = v5 & 1;
  sub_2416BA87C();
  v7 = sub_2416BA9C0();
  v30 = v8;
  v31 = v7;
  v10 = v9;
  v32 = v11;
  swift_release();
  v29 = v10 & 1;
  sub_2415A431C(v2, v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v12 = sub_2416BA9D8();
  v14 = v13;
  v16 = v15 & 1;
  sub_2416BA870();
  v17 = sub_2416BA9C0();
  v19 = v18;
  LOBYTE(v2) = v20;
  swift_release();
  sub_2415A431C(v12, v14, v16);
  swift_bridgeObjectRelease();
  sub_2416BA660();
  v21 = sub_2416BA990();
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  sub_2415A431C(v17, v19, v2 & 1);
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v31;
  *(_QWORD *)(a1 + 8) = v30;
  *(_BYTE *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v32;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = v21;
  *(_QWORD *)(a1 + 56) = v23;
  *(_BYTE *)(a1 + 64) = v27;
  *(_QWORD *)(a1 + 72) = v25;
  sub_2415A43C8(v31, v30, v29);
  swift_bridgeObjectRetain();
  sub_2415A43C8(v21, v23, v27);
  swift_bridgeObjectRetain();
  sub_2415A431C(v21, v23, v27);
  swift_bridgeObjectRelease();
  sub_2415A431C(v31, v30, v29);
  return swift_bridgeObjectRelease();
}

__n128 sub_2416903E4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  char v17;
  uint64_t v18;

  v2 = sub_2416BA468();
  sub_2416901A8((uint64_t)&v11);
  v3 = v12;
  v4 = v13;
  v5 = v14;
  v6 = v15;
  v7 = v17;
  v8 = v18;
  result = v11;
  v10 = v16;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(__n128 *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = v8;
  return result;
}

uint64_t sub_241690480()
{
  return sub_24159CE88(&qword_25713FAA0, (uint64_t (*)(uint64_t))sub_2416904AC, MEMORY[0x24BDF4498]);
}

void sub_2416904AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713FAA8)
  {
    sub_241690524();
    sub_24159CE88(&qword_25713FAC0, (uint64_t (*)(uint64_t))sub_241690524, MEMORY[0x24BDF5428]);
    v0 = sub_2416BAD8C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713FAA8);
  }
}

void sub_241690524()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713FAB0)
  {
    sub_241690578();
    v0 = sub_2416BAFA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713FAB0);
  }
}

void sub_241690578()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713FAB8)
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713FAB8);
  }
}

uint64_t sub_2416905E0()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MedicalIDHealthStoreDataProvider()
{
  return objc_opt_self();
}

void sub_24169062C()
{
  qword_257147800 = 0x696C666F72617473;
  *(_QWORD *)algn_257147808 = 0xEF6C6C69662E6566;
}

uint64_t sub_24169065C@<X0>(uint64_t a1@<X8>)
{
  return sub_241691048(a1);
}

uint64_t sub_241690678@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;

  v4 = type metadata accessor for BasicAlertModel.Action();
  v5 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  v36 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v8);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v9 = (void *)qword_25713A038;
  v10 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v10);
  v11 = v9;
  sub_2416B9C04();
  v12 = sub_2416BB134();
  v33 = v13;
  v34 = v12;
  if (!a1)
    goto LABEL_7;
  v14 = (void *)objc_opt_self();
  v15 = a1;
  if (!objc_msgSend(v14, sel_isAppleInternalInstall))
  {

LABEL_7:
    v32 = 0;
    v16 = 0;
    goto LABEL_8;
  }
  v37 = 0;
  v38 = 0xE000000000000000;
  sub_2416BB4E8();
  swift_bridgeObjectRelease();
  v37 = 0xD000000000000017;
  v38 = 0x80000002416C6340;
  swift_getErrorValue();
  sub_2416BB674();
  sub_2416BB17C();
  swift_bridgeObjectRelease();

  v16 = v38;
  v32 = v37;
LABEL_8:
  MEMORY[0x24BDAC7A8](v12);
  v17 = sub_2416BB098();
  v18 = (void *)qword_25713A038;
  MEMORY[0x24BDAC7A8](v17);
  v19 = v18;
  sub_2416B9C04();
  v20 = sub_2416BB134();
  v22 = v21;
  v23 = v35;
  v24 = &v7[*(int *)(v35 + 24)];
  sub_2416B9EB0();
  v25 = sub_2416B9EBC();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 0, 1, v25);
  sub_2416B9B74();
  v26 = (uint64_t *)&v7[*(int *)(v23 + 20)];
  *v26 = v20;
  v26[1] = v22;
  v27 = &v7[*(int *)(v23 + 28)];
  sub_24159D6B0(0, &qword_257139D78, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  v28 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_2416BCF30;
  result = sub_2415A519C((uint64_t)v7, v29 + v28);
  v31 = v33;
  *a2 = v34;
  a2[1] = v31;
  a2[2] = v32;
  a2[3] = v16;
  a2[5] = 0;
  a2[6] = 0;
  a2[4] = v29;
  return result;
}

uint64_t sub_241690A38@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54[2];

  v52 = a2;
  v3 = type metadata accessor for BasicAlertModel.Action();
  v4 = *(_QWORD *)(v3 - 8);
  v50 = v3;
  v51 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v7);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v8 = (void *)qword_25713A038;
  v9 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v9);
  v10 = v8;
  sub_2416B9C04();
  v11 = sub_2416BB134();
  v48 = v12;
  v49 = v11;
  v13 = objc_msgSend(a1, sel_synchronouslyFetchFirstName);
  if (v13)
  {
    v14 = v13;
    sub_2416BB128();

    v15 = sub_2416BB0D4();
    v47 = (uint64_t)&v47;
    MEMORY[0x24BDAC7A8](v15);
    sub_2416BB0C8();
    sub_2416BB0BC();
    sub_2416BB0B0();
    swift_bridgeObjectRelease();
    v16 = sub_2416BB0BC();
    MEMORY[0x24BDAC7A8](v16);
    v17 = sub_2416BB0E0();
    v18 = (void *)qword_25713A038;
    MEMORY[0x24BDAC7A8](v17);
    v19 = v18;
    sub_2416B9C04();
    v20 = sub_2416BB134();
    v21 = v20;
    v23 = v22;
  }
  else
  {
    if (qword_2571395C0 != -1)
      swift_once();
    v24 = sub_2416B9D6C();
    __swift_project_value_buffer(v24, (uint64_t)qword_257147810);
    v25 = sub_2416B9D54();
    v26 = sub_2416BB374();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc();
      v28 = swift_slowAlloc();
      v54[0] = v28;
      *(_DWORD *)v27 = 136315394;
      v53 = sub_2415A8600(0x656C416369736142, 0xEF6C65646F4D7472, v54);
      sub_2416BB44C();
      *(_WORD *)(v27 + 12) = 2080;
      v53 = sub_2415A8600(0xD000000000000024, 0x80000002416C63A0, v54);
      sub_2416BB44C();
      _os_log_impl(&dword_241599000, v25, v26, "%s %s first name not available", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242699570](v28, -1, -1);
      MEMORY[0x242699570](v27, -1, -1);
    }

    v21 = 0;
    v23 = 0;
  }
  MEMORY[0x24BDAC7A8](v20);
  v29 = sub_2416BB098();
  v30 = (void *)qword_25713A038;
  MEMORY[0x24BDAC7A8](v29);
  v31 = v30;
  sub_2416B9C04();
  v32 = sub_2416BB134();
  v34 = v33;
  v35 = v50;
  v36 = &v6[*(int *)(v50 + 24)];
  v37 = sub_2416B9EBC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
  sub_2416B9B74();
  v38 = (uint64_t *)&v6[*(int *)(v35 + 20)];
  *v38 = v32;
  v38[1] = v34;
  v39 = (uint64_t (**)())&v6[*(int *)(v35 + 28)];
  *v39 = sub_2416911CC;
  v39[1] = 0;
  sub_24159D6B0(0, &qword_257139D78, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v40 = *(_QWORD *)(v51 + 72);
  v41 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_2416BCC80;
  v43 = v42 + v41;
  sub_241691048(v43);
  sub_2415A6100((uint64_t)v6, v43 + v40);
  v44 = v52;
  v45 = v48;
  *v52 = v49;
  v44[1] = v45;
  v44[2] = v21;
  v44[3] = v23;
  v44[5] = 0;
  v44[6] = 0;
  v44[4] = v42;
  return sub_2415F61D4((uint64_t)v6);
}

uint64_t sub_241691048@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *v13;
  _QWORD *v14;

  v2 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v2);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v3 = (void *)qword_25713A038;
  v4 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v4);
  v5 = v3;
  sub_2416B9C04();
  v6 = sub_2416BB134();
  v8 = v7;
  v9 = (int *)type metadata accessor for BasicAlertModel.Action();
  v10 = a1 + v9[6];
  sub_2416B9EB0();
  v11 = sub_2416B9EBC();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 0, 1, v11);
  result = sub_2416B9B74();
  v13 = (uint64_t *)(a1 + v9[5]);
  *v13 = v6;
  v13[1] = v8;
  v14 = (_QWORD *)(a1 + v9[7]);
  *v14 = 0;
  v14[1] = 0;
  return result;
}

uint64_t sub_2416911CC()
{
  uint64_t v0;
  unint64_t v1;
  char *v2;
  id v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v11;

  sub_24159D6B0(0, (unint64_t *)&qword_25713ADA8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAB8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v1 = (*(_QWORD *)(*(_QWORD *)(v0 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v11 - v1;
  sub_2416B9AA8();
  v3 = objc_msgSend((id)objc_opt_self(), sel_defaultWorkspace);
  if (v3)
  {
    v4 = v3;
    MEMORY[0x24BDAC7A8](v3);
    v5 = (char *)&v11 - v1;
    sub_2416913CC((uint64_t)v2, (uint64_t)v5);
    v6 = sub_2416B9AB4();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      v8 = (void *)sub_2416B9A90();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    }
    sub_24166CDAC(MEMORY[0x24BEE4AF8]);
    v9 = (void *)sub_2416BB038();
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_openSensitiveURL_withOptions_, v8, v9);

  }
  return sub_241691378((uint64_t)v2);
}

uint64_t sub_241691378(uint64_t a1)
{
  uint64_t v2;

  sub_24159D6B0(0, (unint64_t *)&qword_25713ADA8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAB8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2416913CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, (unint64_t *)&qword_25713ADA8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAB8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_241691428()
{
  uint64_t v0;

  v0 = sub_2416B9D6C();
  __swift_allocate_value_buffer(v0, qword_257147810);
  __swift_project_value_buffer(v0, (uint64_t)qword_257147810);
  return sub_2416B9D60();
}

uint64_t destroy for ClearButtonView()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for ClearButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ClearButtonView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ClearButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ClearButtonView()
{
  return &type metadata for ClearButtonView;
}

uint64_t sub_2416915D0()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2416915E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  id v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v58 = a5;
  v59 = a4;
  sub_241691B9C();
  v61 = *(_QWORD *)(v8 - 8);
  v62 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415DF998(0, &qword_25713FBA0, (void (*)(uint64_t))sub_241691B9C);
  v60 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v57 - v12;
  sub_241691DBC(0, &qword_25713FBA8, &qword_25713FBA0, (void (*)(uint64_t))sub_241691B9C, (void (*)(uint64_t))sub_24161B9F8);
  v63 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v57 - v15;
  sub_241691E2C(0);
  v64 = *(_QWORD *)(v17 - 8);
  v65 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415DF998(0, &qword_25713FBD0, sub_241691E2C);
  v67 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v57 - v21;
  sub_241691DBC(0, &qword_25713FBD8, &qword_25713FBD0, sub_241691E2C, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
  MEMORY[0x24BDAC7A8](v23);
  v57 = (char *)&v57 - v24;
  v25 = (_QWORD *)swift_allocObject();
  v68 = a1;
  v25[2] = a1;
  v25[3] = a2;
  v66 = a3;
  v25[4] = a3;
  v26 = v59;
  v25[5] = v59;
  sub_241691BFC();
  sub_241691CBC();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_2416BAD50();
  if (qword_2571395C8 != -1)
    swift_once();
  v27 = sub_2416BA81C();
  sub_2416B9EF8();
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v61;
  v36 = v62;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v13, v10, v62);
  v38 = &v13[*(int *)(v60 + 36)];
  *v38 = v27;
  *((_QWORD *)v38 + 1) = v29;
  *((_QWORD *)v38 + 2) = v31;
  *((_QWORD *)v38 + 3) = v33;
  *((_QWORD *)v38 + 4) = v35;
  v38[40] = 0;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v36);
  sub_24169200C((uint64_t)v13, (uint64_t)v16);
  v16[*(int *)(v63 + 36)] = 0;
  sub_241692240((uint64_t)v13, &qword_25713FBA0, (void (*)(uint64_t))sub_241691B9C);
  v39 = (_QWORD *)swift_allocObject();
  v40 = v68;
  v39[2] = v68;
  v39[3] = a2;
  v39[4] = v66;
  v39[5] = v26;
  sub_241691EC0();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_2416BAA80();
  swift_release();
  sub_241692090((uint64_t)v16);
  v41 = sub_2416BA81C();
  sub_2416B9EF8();
  v43 = v42;
  v45 = v44;
  v47 = v46;
  v49 = v48;
  v51 = v64;
  v50 = v65;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v22, v19, v65);
  v52 = &v22[*(int *)(v67 + 36)];
  *v52 = v41;
  *((_QWORD *)v52 + 1) = v43;
  *((_QWORD *)v52 + 2) = v45;
  *((_QWORD *)v52 + 3) = v47;
  *((_QWORD *)v52 + 4) = v49;
  v52[40] = 0;
  (*(void (**)(char *, uint64_t))(v51 + 8))(v19, v50);
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v53 + 32) = v40;
  *(_QWORD *)(v53 + 40) = a2;
  *(_QWORD *)(v53 + 48) = 0x7475427261656C43;
  *(_QWORD *)(v53 + 56) = 0xEB000000006E6F74;
  swift_bridgeObjectRetain();
  v54 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v55 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v55)
  {
    sub_2416BB128();

    sub_241692184();
    v56 = (uint64_t)v57;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_241692240((uint64_t)v22, &qword_25713FBD0, sub_241691E2C);
    sub_24169227C(v56, v58);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_241691B08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = sub_2416BACC0();
  v3 = objc_msgSend((id)objc_opt_self(), sel_systemGray3Color);
  v4 = MEMORY[0x242698478](v3);
  v5 = sub_2416BA87C();
  result = swift_getKeyPath();
  *a1 = v2;
  a1[1] = v4;
  a1[2] = result;
  a1[3] = v5;
  return result;
}

void sub_241691B90(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_2416915E0(*v1, v1[1], v1[2], v1[3], a1);
}

void sub_241691B9C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713FB78)
  {
    sub_241691BFC();
    sub_241691CBC();
    v0 = sub_2416BAD74();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713FB78);
  }
}

void sub_241691BFC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713FB80)
  {
    sub_241691C60();
    sub_2415A3F74();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713FB80);
  }
}

void sub_241691C60()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713FB88)
  {
    sub_241648BD0();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713FB88);
  }
}

unint64_t sub_241691CBC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713FB90;
  if (!qword_25713FB90)
  {
    sub_241691BFC();
    v2 = v1;
    v3[0] = sub_241691D3C();
    v3[1] = sub_24159CE88(&qword_257139D40, (uint64_t (*)(uint64_t))sub_2415A3F74, MEMORY[0x24BDF1028]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713FB90);
  }
  return result;
}

unint64_t sub_241691D3C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_25713FB98;
  if (!qword_25713FB98)
  {
    sub_241691C60();
    v2 = v1;
    v3 = sub_24159CE88((unint64_t *)&qword_25713CCB8, (uint64_t (*)(uint64_t))sub_241648BD0, MEMORY[0x24BDF0710]);
    v4[0] = MEMORY[0x24BDF40E8];
    v4[1] = v3;
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713FB98);
  }
  return result;
}

void sub_241691DBC(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_2415DF998(255, a3, a4);
    a5(255);
    v7 = sub_2416BA150();
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_241691E2C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_25713FBB0)
  {
    sub_241691DBC(255, &qword_25713FBA8, &qword_25713FBA0, (void (*)(uint64_t))sub_241691B9C, (void (*)(uint64_t))sub_24161B9F8);
    v5[0] = v2;
    v5[1] = sub_241691EC0();
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF2550], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713FBB0);
  }
}

unint64_t sub_241691EC0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713FBB8;
  if (!qword_25713FBB8)
  {
    sub_241691DBC(255, &qword_25713FBA8, &qword_25713FBA0, (void (*)(uint64_t))sub_241691B9C, (void (*)(uint64_t))sub_24161B9F8);
    v2 = v1;
    v3[0] = sub_241691F68();
    v3[1] = sub_24159CE88(qword_25713CDD0, (uint64_t (*)(uint64_t))sub_24161B9F8, MEMORY[0x24BDEFAD8]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713FBB8);
  }
  return result;
}

unint64_t sub_241691F68()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713FBC0;
  if (!qword_25713FBC0)
  {
    sub_2415DF998(255, &qword_25713FBA0, (void (*)(uint64_t))sub_241691B9C);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713FBC8, (uint64_t (*)(uint64_t))sub_241691B9C, MEMORY[0x24BDF43B0]);
    v3[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713FBC0);
  }
  return result;
}

void sub_241691FFC()
{
  qword_25713FB70 = 0x4020000000000000;
}

uint64_t sub_24169200C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415DF998(0, &qword_25713FBA0, (void (*)(uint64_t))sub_241691B9C);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t objectdestroyTm_22()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_241692090(uint64_t a1)
{
  uint64_t v2;

  sub_241691DBC(0, &qword_25713FBA8, &qword_25713FBA0, (void (*)(uint64_t))sub_241691B9C, (void (*)(uint64_t))sub_24161B9F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_2416920EC(_QWORD *a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  if ((*(_BYTE *)v1 & 1) == 0 && (*(_BYTE *)(v1 + 1) & 1) != 0)
  {
    v8 = sub_2416BA0B4();
    v4 = *(_QWORD *)(v1 + 8);
    v5 = *(_QWORD *)(v1 + 16);
    v6 = *(_QWORD *)(v1 + 24);
    v7 = *(_QWORD *)(v1 + 32);
    if ((v8 & 1) != 0)
      v9 = 0;
    else
      v9 = 256;
    v3 = v9 & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  *a1 = 0;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
}

unint64_t sub_241692184()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  result = qword_25713FBE0;
  if (!qword_25713FBE0)
  {
    sub_2415DF998(255, &qword_25713FBD0, sub_241691E2C);
    v2 = v1;
    sub_241691DBC(255, &qword_25713FBA8, &qword_25713FBA0, (void (*)(uint64_t))sub_241691B9C, (void (*)(uint64_t))sub_24161B9F8);
    v4[2] = v3;
    v4[3] = sub_241691EC0();
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713FBE0);
  }
  return result;
}

uint64_t sub_241692240(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_2415DF998(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_24169227C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_241691DBC(0, &qword_25713FBD8, &qword_25713FBD0, sub_241691E2C, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for TextFieldClearButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TextFieldClearButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TextFieldClearButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TextFieldClearButtonView()
{
  return &type metadata for TextFieldClearButtonView;
}

unint64_t sub_241692434()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_25713FBE8;
  if (!qword_25713FBE8)
  {
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
    sub_241691DBC(255, &qword_25713FBD8, &qword_25713FBD0, sub_241691E2C, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
    v3 = v2;
    v4[0] = sub_241692184();
    v4[1] = sub_24159CE88(&qword_257139D68, v1, MEMORY[0x24BDF1078]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v3, v4);
    atomic_store(result, (unint64_t *)&qword_25713FBE8);
  }
  return result;
}

uint64_t sub_2416924DC()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_2416924F0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_25713FBF0;
  if (!qword_25713FBF0)
  {
    sub_24159D6B0(255, &qword_25713FBF8, (uint64_t (*)(uint64_t))sub_241692580, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v2 = v1;
    v3 = sub_24159CE88(qword_25713FC18, (uint64_t (*)(uint64_t))sub_241692580, MEMORY[0x24BDF5428]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5578], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713FBF0);
  }
  return result;
}

void sub_241692580(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713FC00, (uint64_t (*)(uint64_t))sub_24169259C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_24169259C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713FC08)
  {
    sub_24159D7F0(255, &qword_25713FC10, MEMORY[0x24BDF4638], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713FC08);
  }
}

uint64_t sub_24169261C()
{
  void *v0;
  uint64_t result;
  uint64_t v2;

  swift_getObjectType();
  objc_msgSend(v0, sel_copy);
  sub_2416BB494();
  swift_unknownObjectRelease();
  if (swift_dynamicCast())
    return v2;
  sub_2416BB4E8();
  sub_2416BB704();
  swift_bridgeObjectRelease();
  sub_2416BB17C();
  result = sub_2416BB5A8();
  __break(1u);
  return result;
}

void **sub_24169272C(void **a1, void **a2, int *a3)
{
  int v3;
  char *v4;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  id v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  char *v84;
  id v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  _QWORD *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  id v143;
  id v144;
  id v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  id v174;
  uint64_t v175;
  int *v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  _QWORD *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  id v193;
  id v194;
  id v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  char *v212;
  id v213;
  id v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  char *v241;
  char *v242;
  id v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  char *v253;
  char *v254;
  uint64_t v255;
  id v256;
  void *v258;
  void *v259;
  char *v260;
  int *v261;
  char *v262;
  char *v263;
  char *v264;
  void *v265;
  int *v266;
  char *v267;
  char *v268;
  char *v269;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  void (*v274)(char *, char *);
  char *v275;
  uint64_t v276;
  unsigned int (*v277)(char *, uint64_t, uint64_t);
  void *v278;
  void (*v279)(char *, char *, uint64_t);
  char *__dst;
  void *__dsta;
  int *v282;
  char *v283;
  void **v284;
  uint64_t v285;
  void **v286;
  int *v287;
  void *v288;
  unsigned int (*v289)(char *, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v25 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    v282 = (int *)type metadata accessor for MedicalIDDataViewModel();
    v284 = a1;
    v7 = v282[5];
    v8 = (void **)((char *)a1 + v7);
    v286 = a2;
    v9 = (char *)a2 + v7;
    v10 = *(uint64_t *)((char *)a2 + v7 + 8);
    *v8 = *(void **)((char *)a2 + v7);
    v8[1] = v10;
    v12 = *(uint64_t *)((char *)a2 + v7 + 16);
    v11 = *(uint64_t *)((char *)a2 + v7 + 24);
    v8[2] = v12;
    v8[3] = v11;
    v13 = *((_QWORD *)v9 + 5);
    v8[4] = *((_QWORD *)v9 + 4);
    v8[5] = v13;
    v14 = *((_QWORD *)v9 + 7);
    v8[6] = *((_QWORD *)v9 + 6);
    v8[7] = v14;
    v15 = *((_QWORD *)v9 + 9);
    v8[8] = *((_QWORD *)v9 + 8);
    v8[9] = v15;
    v16 = *((_QWORD *)v9 + 11);
    v8[10] = *((_QWORD *)v9 + 10);
    v8[11] = v16;
    v278 = (void *)*((_QWORD *)v9 + 12);
    v288 = (void *)*((_QWORD *)v9 + 13);
    v8[12] = v278;
    v8[13] = v288;
    v287 = (int *)type metadata accessor for MedicalIDData();
    v17 = v287[13];
    __dst = (char *)v8 + v17;
    v275 = &v9[v17];
    v18 = sub_2416B9B50();
    v285 = *(_QWORD *)(v18 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v285 + 48);
    v20 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = v278;
    v22 = v288;
    v289 = v19;
    if (v19(v275, 1, v18))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v275, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v24 = v285;
    }
    else
    {
      v24 = v285;
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(__dst, v275, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v285 + 56))(__dst, 0, 1, v18);
    }
    v26 = v287[14];
    v27 = (char *)v8 + v26;
    v28 = &v9[v26];
    if (v19(&v9[v26], 1, v18))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v27, v28, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v27, 0, 1, v18);
    }
    v30 = v287[15];
    v31 = (_QWORD *)((char *)v8 + v30);
    v32 = &v9[v30];
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = v287[16];
    v35 = (_QWORD *)((char *)v8 + v34);
    v36 = &v9[v34];
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    *((_BYTE *)v8 + v287[17]) = v9[v287[17]];
    *((_BYTE *)v8 + v287[18]) = v9[v287[18]];
    v38 = v287[19];
    v39 = (char *)v8 + v38;
    v40 = (uint64_t *)&v9[v38];
    v41 = *(_QWORD *)&v9[v38 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v41 >> 60 == 15)
    {
      *(_OWORD *)v39 = *(_OWORD *)v40;
    }
    else
    {
      v42 = *v40;
      sub_2415A0A90(*v40, v41);
      *(_QWORD *)v39 = v42;
      *((_QWORD *)v39 + 1) = v41;
    }
    v43 = v287[20];
    v44 = (char *)v8 + v43;
    v45 = &v9[v43];
    v46 = sub_2416B9A18();
    v47 = *(_QWORD *)(v46 - 8);
    v277 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
    if (v277(v45, 1, v46))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    v49 = v287[21];
    v50 = *(void **)&v9[v49];
    *(_QWORD *)((char *)v8 + v49) = v50;
    v51 = v287[22];
    v52 = (char *)v8 + v51;
    v53 = &v9[v51];
    v54 = v50;
    v271 = v47;
    v272 = v46;
    v273 = v18;
    if (v289(v53, 1, v18))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v52, v53, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v52, 0, 1, v18);
    }
    v56 = v282[6];
    v57 = (char *)v284 + v56;
    v58 = (char *)v286 + v56;
    v59 = sub_2416B9C70();
    v274 = *(void (**)(char *, char *))(*(_QWORD *)(v59 - 8) + 16);
    v276 = v59;
    v274(v57, v58);
    v60 = v282[7];
    v61 = *(void **)((char *)v286 + v60);
    *(void **)((char *)v284 + v60) = v61;
    v62 = v282[8];
    v63 = (char *)v284 + v62;
    v64 = (char *)v286 + v62;
    v65 = sub_2416B9C10();
    v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16);
    v67 = v61;
    v279 = v66;
    __dsta = (void *)v65;
    v66(v63, v64, v65);
    v68 = v282[9];
    v69 = (char *)v284 + v68;
    v70 = (char *)v286 + v68;
    v71 = *(uint64_t *)((char *)v286 + v68 + 8);
    *(_QWORD *)v69 = *(void **)((char *)v286 + v68);
    *((_QWORD *)v69 + 1) = v71;
    v261 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    v264 = v70;
    v72 = v261[5];
    v267 = v69;
    v73 = &v69[v72];
    v74 = &v70[v72];
    v75 = *(_QWORD *)&v70[v72 + 8];
    *(_QWORD *)v73 = *(_QWORD *)&v70[v72];
    *((_QWORD *)v73 + 1) = v75;
    v77 = *(_QWORD *)&v70[v72 + 16];
    v76 = *(_QWORD *)&v70[v72 + 24];
    *((_QWORD *)v73 + 2) = v77;
    *((_QWORD *)v73 + 3) = v76;
    v78 = *((_QWORD *)v74 + 5);
    *((_QWORD *)v73 + 4) = *((_QWORD *)v74 + 4);
    *((_QWORD *)v73 + 5) = v78;
    v79 = *((_QWORD *)v74 + 7);
    *((_QWORD *)v73 + 6) = *((_QWORD *)v74 + 6);
    *((_QWORD *)v73 + 7) = v79;
    v80 = *((_QWORD *)v74 + 9);
    *((_QWORD *)v73 + 8) = *((_QWORD *)v74 + 8);
    *((_QWORD *)v73 + 9) = v80;
    v81 = *((_QWORD *)v74 + 11);
    *((_QWORD *)v73 + 10) = *((_QWORD *)v74 + 10);
    *((_QWORD *)v73 + 11) = v81;
    v82 = (void *)*((_QWORD *)v74 + 12);
    v258 = (void *)*((_QWORD *)v74 + 13);
    *((_QWORD *)v73 + 12) = v82;
    *((_QWORD *)v73 + 13) = v258;
    v83 = v287[13];
    v260 = &v73[v83];
    v84 = &v74[v83];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v85 = v82;
    v86 = v258;
    if (v289(v84, 1, v273))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v260, v84, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
      v88 = v285;
    }
    else
    {
      v88 = v285;
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v260, v84, v273);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v285 + 56))(v260, 0, 1, v273);
    }
    v89 = v287[14];
    v90 = &v73[v89];
    v91 = &v74[v89];
    if (v289(&v74[v89], 1, v273))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v90, v91, v273);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v90, 0, 1, v273);
    }
    v93 = v287[15];
    v94 = &v73[v93];
    v95 = &v74[v93];
    v96 = *((_QWORD *)v95 + 1);
    *(_QWORD *)v94 = *(_QWORD *)v95;
    *((_QWORD *)v94 + 1) = v96;
    v97 = v287[16];
    v98 = &v73[v97];
    v99 = &v74[v97];
    v100 = *((_QWORD *)v99 + 1);
    *(_QWORD *)v98 = *(_QWORD *)v99;
    *((_QWORD *)v98 + 1) = v100;
    v73[v287[17]] = v74[v287[17]];
    v73[v287[18]] = v74[v287[18]];
    v101 = v287[19];
    v102 = &v73[v101];
    v103 = (uint64_t *)&v74[v101];
    v104 = *(_QWORD *)&v74[v101 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v104 >> 60 == 15)
    {
      *(_OWORD *)v102 = *(_OWORD *)v103;
    }
    else
    {
      v105 = *v103;
      sub_2415A0A90(*v103, v104);
      *(_QWORD *)v102 = v105;
      *((_QWORD *)v102 + 1) = v104;
    }
    v106 = v287[20];
    v107 = &v73[v106];
    v108 = &v74[v106];
    if (v277(&v74[v106], 1, v272))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v271 + 16))(v107, v108, v272);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v271 + 56))(v107, 0, 1, v272);
    }
    v110 = v287[21];
    v111 = *(void **)&v74[v110];
    *(_QWORD *)&v73[v110] = v111;
    v112 = v287[22];
    v113 = &v73[v112];
    v114 = &v74[v112];
    v115 = v111;
    if (v289(v114, 1, v273))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v113, v114, v273);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v113, 0, 1, v273);
    }
    v279(&v267[v261[6]], &v264[v261[6]], v65);
    v117 = v261[7];
    v118 = &v267[v117];
    v119 = &v264[v117];
    v279(&v267[v117], &v264[v117], v65);
    v120 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    v121 = *(void **)&v119[v120];
    *(_QWORD *)&v118[v120] = v121;
    v122 = v261[8];
    v123 = &v267[v122];
    v124 = &v264[v122];
    v125 = v121;
    v279(v123, v124, v65);
    v126 = type metadata accessor for MedicalIDWeightFormatter();
    v127 = *(int *)(v126 + 20);
    v128 = *(void **)&v124[v127];
    *(_QWORD *)&v123[v127] = v128;
    v129 = *(int *)(v126 + 24);
    v130 = *(void **)&v124[v129];
    *(_QWORD *)&v123[v129] = v130;
    v131 = v282[10];
    v132 = (void **)((char *)v284 + v131);
    v133 = (char *)v286 + v131;
    v134 = *(uint64_t *)((char *)v286 + v131 + 8);
    *v132 = *(void **)((char *)v286 + v131);
    v132[1] = v134;
    v136 = *(uint64_t *)((char *)v286 + v131 + 16);
    v135 = *(uint64_t *)((char *)v286 + v131 + 24);
    v132[2] = v136;
    v132[3] = v135;
    v137 = *((_QWORD *)v133 + 5);
    v132[4] = *((_QWORD *)v133 + 4);
    v132[5] = v137;
    v138 = *((_QWORD *)v133 + 7);
    v132[6] = *((_QWORD *)v133 + 6);
    v132[7] = v138;
    v139 = *((_QWORD *)v133 + 9);
    v132[8] = *((_QWORD *)v133 + 8);
    v132[9] = v139;
    v140 = *((_QWORD *)v133 + 11);
    v132[10] = *((_QWORD *)v133 + 10);
    v132[11] = v140;
    v141 = (void *)*((_QWORD *)v133 + 12);
    v265 = (void *)*((_QWORD *)v133 + 13);
    v132[12] = v141;
    v132[13] = v265;
    v142 = v287[13];
    v268 = (char *)v132 + v142;
    v262 = &v133[v142];
    v143 = v128;
    v144 = v130;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v145 = v141;
    v146 = v265;
    if (v289(v262, 1, v273))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v268, v262, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v268, v262, v273);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v285 + 56))(v268, 0, 1, v273);
    }
    v148 = v287[14];
    v149 = (char *)v132 + v148;
    v150 = &v133[v148];
    if (v289(&v133[v148], 1, v273))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v149, v150, v273);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v285 + 56))(v149, 0, 1, v273);
    }
    v152 = v287[15];
    v153 = (_QWORD *)((char *)v132 + v152);
    v154 = &v133[v152];
    v155 = *((_QWORD *)v154 + 1);
    *v153 = *(_QWORD *)v154;
    v153[1] = v155;
    v156 = v287[16];
    v157 = (_QWORD *)((char *)v132 + v156);
    v158 = &v133[v156];
    v159 = *((_QWORD *)v158 + 1);
    *v157 = *(_QWORD *)v158;
    v157[1] = v159;
    *((_BYTE *)v132 + v287[17]) = v133[v287[17]];
    *((_BYTE *)v132 + v287[18]) = v133[v287[18]];
    v160 = v287[19];
    v161 = (char *)v132 + v160;
    v162 = (uint64_t *)&v133[v160];
    v163 = *(_QWORD *)&v133[v160 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v163 >> 60 == 15)
    {
      *(_OWORD *)v161 = *(_OWORD *)v162;
    }
    else
    {
      v164 = *v162;
      sub_2415A0A90(*v162, v163);
      *(_QWORD *)v161 = v164;
      *((_QWORD *)v161 + 1) = v163;
    }
    v165 = v287[20];
    v166 = (char *)v132 + v165;
    v167 = &v133[v165];
    if (v277(&v133[v165], 1, v272))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v271 + 16))(v166, v167, v272);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v271 + 56))(v166, 0, 1, v272);
    }
    v169 = v287[21];
    v170 = *(void **)&v133[v169];
    *(_QWORD *)((char *)v132 + v169) = v170;
    v171 = v287[22];
    v172 = (char *)v132 + v171;
    v173 = &v133[v171];
    v174 = v170;
    if (v289(v173, 1, v273))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v172, v173, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v172, v173, v273);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v285 + 56))(v172, 0, 1, v273);
    }
    v176 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    ((void (*)(char *, char *, uint64_t))v274)((char *)v132 + v176[5], &v133[v176[5]], v276);
    v279((char *)v132 + v176[6], &v133[v176[6]], v65);
    v177 = v176[7];
    v178 = *(void **)&v133[v177];
    *(_QWORD *)((char *)v132 + v177) = v178;
    v179 = v176[8];
    v180 = *(void **)&v133[v179];
    *(_QWORD *)((char *)v132 + v179) = v180;
    v181 = v176[9];
    v182 = (_QWORD *)((char *)v132 + v181);
    v183 = &v133[v181];
    v184 = *((_QWORD *)v183 + 1);
    *v182 = *(_QWORD *)v183;
    v182[1] = v184;
    v185 = v282[11];
    v186 = (char *)v284 + v185;
    v187 = (char *)v286 + v185;
    v188 = *(void **)((char *)v286 + v185);
    *(void **)((char *)v284 + v185) = v188;
    v189 = type metadata accessor for MedicalIDMedicalInfoViewModel();
    v190 = *(int *)(v189 + 20);
    v191 = &v186[v190];
    v192 = &v187[v190];
    v193 = v178;
    v194 = v180;
    swift_bridgeObjectRetain();
    v195 = v188;
    ((void (*)(char *, char *, uint64_t))v274)(v191, v192, v276);
    v279(&v186[*(int *)(v189 + 24)], &v187[*(int *)(v189 + 24)], (uint64_t)__dsta);
    v196 = v282[12];
    v197 = (char *)v284 + v196;
    v198 = (char *)v286 + v196;
    v199 = *(uint64_t *)((char *)v286 + v196 + 8);
    *(_QWORD *)v197 = *(void **)((char *)v286 + v196);
    *((_QWORD *)v197 + 1) = v199;
    v266 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
    v269 = v197;
    v200 = v266[5];
    v201 = &v197[v200];
    v283 = v198;
    v202 = &v198[v200];
    v203 = *(_QWORD *)&v198[v200];
    v204 = *((_QWORD *)v202 + 1);
    *(_QWORD *)v201 = v203;
    *((_QWORD *)v201 + 1) = v204;
    v205 = *((_QWORD *)v202 + 3);
    *((_QWORD *)v201 + 2) = *((_QWORD *)v202 + 2);
    *((_QWORD *)v201 + 3) = v205;
    v206 = *((_QWORD *)v202 + 5);
    *((_QWORD *)v201 + 4) = *((_QWORD *)v202 + 4);
    *((_QWORD *)v201 + 5) = v206;
    v207 = *((_QWORD *)v202 + 7);
    *((_QWORD *)v201 + 6) = *((_QWORD *)v202 + 6);
    *((_QWORD *)v201 + 7) = v207;
    v208 = *((_QWORD *)v202 + 9);
    *((_QWORD *)v201 + 8) = *((_QWORD *)v202 + 8);
    *((_QWORD *)v201 + 9) = v208;
    v209 = *((_QWORD *)v202 + 11);
    *((_QWORD *)v201 + 10) = *((_QWORD *)v202 + 10);
    *((_QWORD *)v201 + 11) = v209;
    v210 = (void *)*((_QWORD *)v202 + 12);
    v259 = (void *)*((_QWORD *)v202 + 13);
    *((_QWORD *)v201 + 12) = v210;
    *((_QWORD *)v201 + 13) = v259;
    v211 = v287[13];
    v263 = &v201[v211];
    v212 = &v202[v211];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v213 = v210;
    v214 = v259;
    if (v289(v212, 1, v273))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v263, v212, *(_QWORD *)(*(_QWORD *)(v215 - 8) + 64));
      v216 = v285;
    }
    else
    {
      v216 = v285;
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v263, v212, v273);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v285 + 56))(v263, 0, 1, v273);
    }
    v217 = v287[14];
    v218 = &v201[v217];
    v219 = &v202[v217];
    if (v289(&v202[v217], 1, v273))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v218, v219, *(_QWORD *)(*(_QWORD *)(v220 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v216 + 16))(v218, v219, v273);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v218, 0, 1, v273);
    }
    v221 = v287[15];
    v222 = &v201[v221];
    v223 = &v202[v221];
    v224 = *((_QWORD *)v223 + 1);
    *(_QWORD *)v222 = *(_QWORD *)v223;
    *((_QWORD *)v222 + 1) = v224;
    v225 = v287[16];
    v226 = &v201[v225];
    v227 = &v202[v225];
    v228 = *((_QWORD *)v227 + 1);
    *(_QWORD *)v226 = *(_QWORD *)v227;
    *((_QWORD *)v226 + 1) = v228;
    v201[v287[17]] = v202[v287[17]];
    v201[v287[18]] = v202[v287[18]];
    v229 = v287[19];
    v230 = &v201[v229];
    v231 = (uint64_t *)&v202[v229];
    v232 = *(_QWORD *)&v202[v229 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v232 >> 60 == 15)
    {
      *(_OWORD *)v230 = *(_OWORD *)v231;
    }
    else
    {
      v233 = *v231;
      sub_2415A0A90(*v231, v232);
      *(_QWORD *)v230 = v233;
      *((_QWORD *)v230 + 1) = v232;
    }
    v234 = v287[20];
    v235 = &v201[v234];
    v236 = &v202[v234];
    if (v277(&v202[v234], 1, v272))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v235, v236, *(_QWORD *)(*(_QWORD *)(v237 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v271 + 16))(v235, v236, v272);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v271 + 56))(v235, 0, 1, v272);
    }
    v238 = v287[21];
    v239 = *(void **)&v202[v238];
    *(_QWORD *)&v201[v238] = v239;
    v240 = v287[22];
    v241 = &v201[v240];
    v242 = &v202[v240];
    v243 = v239;
    if (v289(v242, 1, v273))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v241, v242, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v216 + 16))(v241, v242, v273);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v241, 0, 1, v273);
    }
    ((void (*)(char *, char *, uint64_t))v274)(&v269[v266[6]], &v283[v266[6]], v276);
    v279(&v269[v266[7]], &v283[v266[7]], (uint64_t)__dsta);
    *(_QWORD *)&v269[v266[8]] = *(_QWORD *)&v283[v266[8]];
    v245 = v266[9];
    v246 = &v269[v245];
    v247 = &v283[v245];
    swift_retain();
    if (v289(v247, 1, v273))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v246, v247, *(_QWORD *)(*(_QWORD *)(v248 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v216 + 16))(v246, v247, v273);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v246, 0, 1, v273);
    }
    v249 = a3[6];
    v25 = v284;
    *(void **)((char *)v284 + a3[5]) = *(void **)((char *)v286 + a3[5]);
    *((_BYTE *)v284 + v249) = *((_BYTE *)v286 + v249);
    v250 = a3[7];
    v251 = a3[8];
    v252 = *(void **)((char *)v286 + v250);
    *(void **)((char *)v284 + v250) = v252;
    v253 = (char *)v284 + v251;
    v254 = (char *)v286 + v251;
    v255 = *((_QWORD *)v254 + 1);
    *(_QWORD *)v253 = *(_QWORD *)v254;
    *((_QWORD *)v253 + 1) = v255;
    v253[16] = v254[16];
    swift_retain();
    v256 = v252;
    swift_retain();
  }
  swift_retain();
  return v25;
}

uint64_t sub_241693900(id *a1, uint64_t a2)
{
  int *v3;
  id *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  id *v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  id *v39;
  uint64_t v40;
  char *v41;
  int *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v53;
  void (*v54)(char *);
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *);
  unsigned int (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;

  v3 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v4 = (id *)((char *)a1 + v3[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = (char *)v4 + v5[13];
  v7 = sub_2416B9B50();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  v10 = (char *)v4 + v5[14];
  if (!v9(v10, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)((char *)v4 + v5[19]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_2415A0DAC(*v11, v12);
  v13 = (char *)v4 + v5[20];
  v14 = sub_2416B9A18();
  v53 = *(_QWORD *)(v14 - 8);
  v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
  if (!v58(v13, 1, v14))
    (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v14);
  v60 = v14;

  v15 = (char *)v4 + v5[22];
  if (!v9(v15, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
  v59 = v8;
  v16 = (char *)a1 + v3[6];
  v17 = sub_2416B9C70();
  v54 = *(void (**)(char *))(*(_QWORD *)(v17 - 8) + 8);
  v55 = v17;
  v54(v16);

  v18 = (char *)a1 + v3[8];
  v56 = sub_2416B9C10();
  v57 = *(void (**)(char *))(*(_QWORD *)(v56 - 8) + 8);
  v57(v18);
  v19 = (char *)a1 + v3[9];
  swift_bridgeObjectRelease();
  v20 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v21 = &v19[v20[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v22 = &v21[v5[13]];
  if (!v9(v22, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v22, v7);
  v23 = &v21[v5[14]];
  if (!v9(v23, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v23, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = (uint64_t *)&v21[v5[19]];
  v25 = v24[1];
  if (v25 >> 60 != 15)
    sub_2415A0DAC(*v24, v25);
  v26 = &v21[v5[20]];
  if (!v58(v26, 1, v60))
    (*(void (**)(char *, uint64_t))(v53 + 8))(v26, v60);

  v27 = &v21[v5[22]];
  if (!v9(v27, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v27, v7);
  ((void (*)(char *, uint64_t))v57)(&v19[v20[6]], v56);
  v28 = &v19[v20[7]];
  ((void (*)(char *, uint64_t))v57)(v28, v56);

  v29 = &v19[v20[8]];
  ((void (*)(char *, uint64_t))v57)(v29, v56);
  v30 = type metadata accessor for MedicalIDWeightFormatter();

  v31 = (id *)((char *)a1 + v3[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v32 = (char *)v31 + v5[13];
  if (!v9(v32, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v32, v7);
  v33 = (char *)v31 + v5[14];
  if (!v9(v33, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v33, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = (uint64_t *)((char *)v31 + v5[19]);
  v35 = v34[1];
  if (v35 >> 60 != 15)
    sub_2415A0DAC(*v34, v35);
  v36 = (char *)v31 + v5[20];
  if (!v58(v36, 1, v60))
    (*(void (**)(char *, uint64_t))(v53 + 8))(v36, v60);

  v37 = (char *)v31 + v5[22];
  if (!v9(v37, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v7);
  v38 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v54)((char *)v31 + v38[5], v55);
  ((void (*)(char *, uint64_t))v57)((char *)v31 + v38[6], v56);

  swift_bridgeObjectRelease();
  v39 = (id *)((char *)a1 + v3[11]);

  v40 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v54)((char *)v39 + *(int *)(v40 + 20), v55);
  ((void (*)(char *, uint64_t))v57)((char *)v39 + *(int *)(v40 + 24), v56);
  v41 = (char *)a1 + v3[12];
  swift_bridgeObjectRelease();
  v42 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v43 = &v41[v42[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v44 = &v43[v5[13]];
  if (!v9(v44, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v7);
  v45 = &v43[v5[14]];
  if (!v9(v45, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v45, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v46 = (uint64_t *)&v43[v5[19]];
  v47 = v46[1];
  if (v47 >> 60 != 15)
    sub_2415A0DAC(*v46, v47);
  v48 = &v43[v5[20]];
  if (!v58(v48, 1, v60))
    (*(void (**)(char *, uint64_t))(v53 + 8))(v48, v60);

  v49 = &v43[v5[22]];
  if (!v9(v49, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v49, v7);
  ((void (*)(char *, uint64_t))v54)(&v41[v42[6]], v55);
  ((void (*)(char *, uint64_t))v57)(&v41[v42[7]], v56);
  swift_release();
  v50 = &v41[v42[9]];
  if (!v9(v50, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v50, v7);
  swift_release();

  swift_release();
  return swift_release();
}

void **sub_241694138(void **a1, void **a2, int *a3)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  id v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  char *v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  id v140;
  id v141;
  id v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  id v171;
  uint64_t v172;
  int *v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  _QWORD *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  id v190;
  id v191;
  id v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  char *v209;
  id v210;
  id v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  char *v238;
  char *v239;
  id v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  char *v250;
  char *v251;
  uint64_t v252;
  id v253;
  char *v255;
  void *v257;
  void *v258;
  char *__dst;
  char *__dsta;
  char *__dstb;
  int *v262;
  void *v263;
  int *v264;
  char *v265;
  char *v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void (*v271)(char *, char *);
  char *v272;
  uint64_t v273;
  void *v274;
  unsigned int (*v275)(char *, uint64_t, uint64_t);
  void *v276;
  void (*v277)(char *, char *, uint64_t);
  void *v278;
  uint64_t v279;
  int *v280;
  char *v281;
  void **v282;
  uint64_t v283;
  char *v284;
  unsigned int (*v285)(char *, uint64_t, uint64_t);
  void **v286;
  int *v287;

  v278 = *a2;
  *a1 = *a2;
  v280 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v282 = a1;
  v5 = v280[5];
  v6 = (void **)((char *)a1 + v5);
  v286 = a2;
  v7 = (char *)a2 + v5;
  v8 = *(uint64_t *)((char *)a2 + v5 + 8);
  *v6 = *(void **)((char *)a2 + v5);
  v6[1] = v8;
  v10 = *(uint64_t *)((char *)a2 + v5 + 16);
  v9 = *(uint64_t *)((char *)a2 + v5 + 24);
  v6[2] = v10;
  v6[3] = v9;
  v11 = *((_QWORD *)v7 + 5);
  v6[4] = *((_QWORD *)v7 + 4);
  v6[5] = v11;
  v12 = *((_QWORD *)v7 + 7);
  v6[6] = *((_QWORD *)v7 + 6);
  v6[7] = v12;
  v13 = *((_QWORD *)v7 + 9);
  v6[8] = *((_QWORD *)v7 + 8);
  v6[9] = v13;
  v14 = *((_QWORD *)v7 + 11);
  v6[10] = *((_QWORD *)v7 + 10);
  v6[11] = v14;
  v274 = (void *)*((_QWORD *)v7 + 12);
  v276 = (void *)*((_QWORD *)v7 + 13);
  v6[12] = v274;
  v6[13] = v276;
  v287 = (int *)type metadata accessor for MedicalIDData();
  v15 = v287[13];
  v284 = (char *)v6 + v15;
  v272 = &v7[v15];
  v16 = sub_2416B9B50();
  v283 = *(_QWORD *)(v16 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v283 + 48);
  v18 = v278;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = v274;
  v20 = v276;
  if (v17(v272, 1, v16))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v284, v272, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    v22 = v283;
  }
  else
  {
    v22 = v283;
    (*(void (**)(char *, char *, uint64_t))(v283 + 16))(v284, v272, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v283 + 56))(v284, 0, 1, v16);
  }
  v23 = v287[14];
  v24 = (char *)v6 + v23;
  v25 = &v7[v23];
  if (v17(&v7[v23], 1, v16))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v25, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v16);
  }
  v27 = v287[15];
  v28 = (_QWORD *)((char *)v6 + v27);
  v29 = &v7[v27];
  v30 = *((_QWORD *)v29 + 1);
  *v28 = *(_QWORD *)v29;
  v28[1] = v30;
  v31 = v287[16];
  v32 = (_QWORD *)((char *)v6 + v31);
  v33 = &v7[v31];
  v34 = *((_QWORD *)v33 + 1);
  *v32 = *(_QWORD *)v33;
  v32[1] = v34;
  *((_BYTE *)v6 + v287[17]) = v7[v287[17]];
  *((_BYTE *)v6 + v287[18]) = v7[v287[18]];
  v35 = v287[19];
  v36 = (char *)v6 + v35;
  v37 = (uint64_t *)&v7[v35];
  v38 = *(_QWORD *)&v7[v35 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v38 >> 60 == 15)
  {
    *(_OWORD *)v36 = *(_OWORD *)v37;
  }
  else
  {
    v39 = *v37;
    sub_2415A0A90(*v37, v38);
    *(_QWORD *)v36 = v39;
    *((_QWORD *)v36 + 1) = v38;
  }
  v40 = v287[20];
  v41 = (char *)v6 + v40;
  v42 = &v7[v40];
  v43 = sub_2416B9A18();
  v44 = *(_QWORD *)(v43 - 8);
  v275 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
  v268 = v44;
  if (v275(v42, 1, v43))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  v46 = v287[21];
  v47 = *(void **)&v7[v46];
  *(_QWORD *)((char *)v6 + v46) = v47;
  v48 = v287[22];
  v49 = (char *)v6 + v48;
  v50 = &v7[v48];
  v51 = v47;
  v285 = v17;
  v269 = v43;
  v270 = v16;
  if (v17(v50, 1, v16))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v49, v50, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v49, 0, 1, v16);
  }
  v53 = v280[6];
  v54 = (char *)v282 + v53;
  v55 = (char *)v286 + v53;
  v56 = sub_2416B9C70();
  v271 = *(void (**)(char *, char *))(*(_QWORD *)(v56 - 8) + 16);
  v273 = v56;
  v271(v54, v55);
  v57 = v280[7];
  v58 = *(void **)((char *)v286 + v57);
  *(void **)((char *)v282 + v57) = v58;
  v59 = v280[8];
  v60 = (char *)v282 + v59;
  v61 = (char *)v286 + v59;
  v62 = sub_2416B9C10();
  v63 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16);
  v64 = v58;
  v277 = v63;
  v279 = v62;
  v63(v60, v61, v62);
  v65 = v280[9];
  v66 = (char *)v282 + v65;
  v67 = (char *)v286 + v65;
  v68 = *(uint64_t *)((char *)v286 + v65 + 8);
  *(_QWORD *)v66 = *(void **)((char *)v286 + v65);
  *((_QWORD *)v66 + 1) = v68;
  v262 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v265 = v67;
  v69 = v262[5];
  v255 = v66;
  v70 = &v66[v69];
  v71 = &v67[v69];
  v72 = *(_QWORD *)&v67[v69 + 8];
  *v70 = *(_QWORD *)&v67[v69];
  v70[1] = v72;
  v74 = *(_QWORD *)&v67[v69 + 16];
  v73 = *(_QWORD *)&v67[v69 + 24];
  v70[2] = v74;
  v70[3] = v73;
  v75 = *((_QWORD *)v71 + 5);
  v70[4] = *((_QWORD *)v71 + 4);
  v70[5] = v75;
  v76 = *((_QWORD *)v71 + 7);
  v70[6] = *((_QWORD *)v71 + 6);
  v70[7] = v76;
  v77 = *((_QWORD *)v71 + 9);
  v70[8] = *((_QWORD *)v71 + 8);
  v70[9] = v77;
  v78 = *((_QWORD *)v71 + 11);
  v70[10] = *((_QWORD *)v71 + 10);
  v70[11] = v78;
  v79 = (void *)*((_QWORD *)v71 + 12);
  v257 = (void *)*((_QWORD *)v71 + 13);
  v70[12] = v79;
  v70[13] = v257;
  v80 = v287[13];
  __dst = (char *)v70 + v80;
  v81 = &v71[v80];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v82 = v79;
  v83 = v257;
  if (v17(v81, 1, v270))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    v85 = v283;
  }
  else
  {
    v85 = v283;
    (*(void (**)(char *, char *, uint64_t))(v283 + 16))(__dst, v81, v270);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v283 + 56))(__dst, 0, 1, v270);
  }
  v86 = v287[14];
  v87 = (char *)v70 + v86;
  v88 = &v71[v86];
  if (v17(&v71[v86], 1, v270))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v87, v88, v270);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v87, 0, 1, v270);
  }
  v90 = v287[15];
  v91 = (_QWORD *)((char *)v70 + v90);
  v92 = &v71[v90];
  v93 = *((_QWORD *)v92 + 1);
  *v91 = *(_QWORD *)v92;
  v91[1] = v93;
  v94 = v287[16];
  v95 = (_QWORD *)((char *)v70 + v94);
  v96 = &v71[v94];
  v97 = *((_QWORD *)v96 + 1);
  *v95 = *(_QWORD *)v96;
  v95[1] = v97;
  *((_BYTE *)v70 + v287[17]) = v71[v287[17]];
  *((_BYTE *)v70 + v287[18]) = v71[v287[18]];
  v98 = v287[19];
  v99 = (char *)v70 + v98;
  v100 = (uint64_t *)&v71[v98];
  v101 = *(_QWORD *)&v71[v98 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v101 >> 60 == 15)
  {
    *(_OWORD *)v99 = *(_OWORD *)v100;
  }
  else
  {
    v102 = *v100;
    sub_2415A0A90(*v100, v101);
    *(_QWORD *)v99 = v102;
    *((_QWORD *)v99 + 1) = v101;
  }
  v103 = v287[20];
  v104 = (char *)v70 + v103;
  v105 = &v71[v103];
  if (v275(&v71[v103], 1, v269))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v268 + 16))(v104, v105, v269);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v268 + 56))(v104, 0, 1, v269);
  }
  v107 = v287[21];
  v108 = *(void **)&v71[v107];
  *(_QWORD *)((char *)v70 + v107) = v108;
  v109 = v287[22];
  v110 = (char *)v70 + v109;
  v111 = &v71[v109];
  v112 = v108;
  if (v17(v111, 1, v270))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v110, v111, v270);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v110, 0, 1, v270);
  }
  v277(&v255[v262[6]], &v265[v262[6]], v279);
  v114 = v262[7];
  v115 = &v255[v114];
  v116 = &v265[v114];
  v277(&v255[v114], &v265[v114], v279);
  v117 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v118 = *(void **)&v116[v117];
  *(_QWORD *)&v115[v117] = v118;
  v119 = v262[8];
  v120 = &v255[v119];
  v121 = &v265[v119];
  v122 = v118;
  v277(v120, v121, v279);
  v123 = type metadata accessor for MedicalIDWeightFormatter();
  v124 = *(int *)(v123 + 20);
  v125 = *(void **)&v121[v124];
  *(_QWORD *)&v120[v124] = v125;
  v126 = *(int *)(v123 + 24);
  v127 = *(void **)&v121[v126];
  *(_QWORD *)&v120[v126] = v127;
  v128 = v280[10];
  v129 = (void **)((char *)v282 + v128);
  v130 = (char *)v286 + v128;
  v131 = *(uint64_t *)((char *)v286 + v128 + 8);
  *v129 = *(void **)((char *)v286 + v128);
  v129[1] = v131;
  v133 = *(uint64_t *)((char *)v286 + v128 + 16);
  v132 = *(uint64_t *)((char *)v286 + v128 + 24);
  v129[2] = v133;
  v129[3] = v132;
  v134 = *((_QWORD *)v130 + 5);
  v129[4] = *((_QWORD *)v130 + 4);
  v129[5] = v134;
  v135 = *((_QWORD *)v130 + 7);
  v129[6] = *((_QWORD *)v130 + 6);
  v129[7] = v135;
  v136 = *((_QWORD *)v130 + 9);
  v129[8] = *((_QWORD *)v130 + 8);
  v129[9] = v136;
  v137 = *((_QWORD *)v130 + 11);
  v129[10] = *((_QWORD *)v130 + 10);
  v129[11] = v137;
  v138 = (void *)*((_QWORD *)v130 + 12);
  v263 = (void *)*((_QWORD *)v130 + 13);
  v129[12] = v138;
  v129[13] = v263;
  v139 = v287[13];
  v266 = (char *)v129 + v139;
  __dsta = &v130[v139];
  v140 = v125;
  v141 = v127;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v142 = v138;
  v143 = v263;
  if (v285(__dsta, 1, v270))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v266, __dsta, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v283 + 16))(v266, __dsta, v270);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v283 + 56))(v266, 0, 1, v270);
  }
  v145 = v287[14];
  v146 = (char *)v129 + v145;
  v147 = &v130[v145];
  if (v285(&v130[v145], 1, v270))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v283 + 16))(v146, v147, v270);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v283 + 56))(v146, 0, 1, v270);
  }
  v149 = v287[15];
  v150 = (_QWORD *)((char *)v129 + v149);
  v151 = &v130[v149];
  v152 = *((_QWORD *)v151 + 1);
  *v150 = *(_QWORD *)v151;
  v150[1] = v152;
  v153 = v287[16];
  v154 = (_QWORD *)((char *)v129 + v153);
  v155 = &v130[v153];
  v156 = *((_QWORD *)v155 + 1);
  *v154 = *(_QWORD *)v155;
  v154[1] = v156;
  *((_BYTE *)v129 + v287[17]) = v130[v287[17]];
  *((_BYTE *)v129 + v287[18]) = v130[v287[18]];
  v157 = v287[19];
  v158 = (char *)v129 + v157;
  v159 = (uint64_t *)&v130[v157];
  v160 = *(_QWORD *)&v130[v157 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v160 >> 60 == 15)
  {
    *(_OWORD *)v158 = *(_OWORD *)v159;
  }
  else
  {
    v161 = *v159;
    sub_2415A0A90(*v159, v160);
    *(_QWORD *)v158 = v161;
    *((_QWORD *)v158 + 1) = v160;
  }
  v162 = v287[20];
  v163 = (char *)v129 + v162;
  v164 = &v130[v162];
  if (v275(&v130[v162], 1, v269))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v268 + 16))(v163, v164, v269);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v268 + 56))(v163, 0, 1, v269);
  }
  v166 = v287[21];
  v167 = *(void **)&v130[v166];
  *(_QWORD *)((char *)v129 + v166) = v167;
  v168 = v287[22];
  v169 = (char *)v129 + v168;
  v170 = &v130[v168];
  v171 = v167;
  if (v285(v170, 1, v270))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v283 + 16))(v169, v170, v270);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v283 + 56))(v169, 0, 1, v270);
  }
  v173 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v271)((char *)v129 + v173[5], &v130[v173[5]], v273);
  v277((char *)v129 + v173[6], &v130[v173[6]], v279);
  v174 = v173[7];
  v175 = *(void **)&v130[v174];
  *(_QWORD *)((char *)v129 + v174) = v175;
  v176 = v173[8];
  v177 = *(void **)&v130[v176];
  *(_QWORD *)((char *)v129 + v176) = v177;
  v178 = v173[9];
  v179 = (_QWORD *)((char *)v129 + v178);
  v180 = &v130[v178];
  v181 = *((_QWORD *)v180 + 1);
  *v179 = *(_QWORD *)v180;
  v179[1] = v181;
  v182 = v280[11];
  v183 = (char *)v282 + v182;
  v184 = (char *)v286 + v182;
  v185 = *(void **)((char *)v286 + v182);
  *(void **)((char *)v282 + v182) = v185;
  v186 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v187 = *(int *)(v186 + 20);
  v188 = &v183[v187];
  v189 = &v184[v187];
  v190 = v175;
  v191 = v177;
  swift_bridgeObjectRetain();
  v192 = v185;
  ((void (*)(char *, char *, uint64_t))v271)(v188, v189, v273);
  v277(&v183[*(int *)(v186 + 24)], &v184[*(int *)(v186 + 24)], v279);
  v193 = v280[12];
  v194 = (char *)v282 + v193;
  v195 = (char *)v286 + v193;
  v196 = *(uint64_t *)((char *)v286 + v193 + 8);
  *(_QWORD *)v194 = *(void **)((char *)v286 + v193);
  *((_QWORD *)v194 + 1) = v196;
  v264 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v267 = v194;
  v197 = v264[5];
  v198 = &v194[v197];
  v281 = v195;
  v199 = &v195[v197];
  v200 = *(_QWORD *)&v195[v197];
  v201 = *((_QWORD *)v199 + 1);
  *(_QWORD *)v198 = v200;
  *((_QWORD *)v198 + 1) = v201;
  v202 = *((_QWORD *)v199 + 3);
  *((_QWORD *)v198 + 2) = *((_QWORD *)v199 + 2);
  *((_QWORD *)v198 + 3) = v202;
  v203 = *((_QWORD *)v199 + 5);
  *((_QWORD *)v198 + 4) = *((_QWORD *)v199 + 4);
  *((_QWORD *)v198 + 5) = v203;
  v204 = *((_QWORD *)v199 + 7);
  *((_QWORD *)v198 + 6) = *((_QWORD *)v199 + 6);
  *((_QWORD *)v198 + 7) = v204;
  v205 = *((_QWORD *)v199 + 9);
  *((_QWORD *)v198 + 8) = *((_QWORD *)v199 + 8);
  *((_QWORD *)v198 + 9) = v205;
  v206 = *((_QWORD *)v199 + 11);
  *((_QWORD *)v198 + 10) = *((_QWORD *)v199 + 10);
  *((_QWORD *)v198 + 11) = v206;
  v207 = (void *)*((_QWORD *)v199 + 12);
  v258 = (void *)*((_QWORD *)v199 + 13);
  *((_QWORD *)v198 + 12) = v207;
  *((_QWORD *)v198 + 13) = v258;
  v208 = v287[13];
  __dstb = &v198[v208];
  v209 = &v199[v208];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v210 = v207;
  v211 = v258;
  if (v285(v209, 1, v270))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dstb, v209, *(_QWORD *)(*(_QWORD *)(v212 - 8) + 64));
    v213 = v283;
  }
  else
  {
    v213 = v283;
    (*(void (**)(char *, char *, uint64_t))(v283 + 16))(__dstb, v209, v270);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v283 + 56))(__dstb, 0, 1, v270);
  }
  v214 = v287[14];
  v215 = &v198[v214];
  v216 = &v199[v214];
  if (v285(&v199[v214], 1, v270))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v213 + 16))(v215, v216, v270);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v213 + 56))(v215, 0, 1, v270);
  }
  v218 = v287[15];
  v219 = &v198[v218];
  v220 = &v199[v218];
  v221 = *((_QWORD *)v220 + 1);
  *(_QWORD *)v219 = *(_QWORD *)v220;
  *((_QWORD *)v219 + 1) = v221;
  v222 = v287[16];
  v223 = &v198[v222];
  v224 = &v199[v222];
  v225 = *((_QWORD *)v224 + 1);
  *(_QWORD *)v223 = *(_QWORD *)v224;
  *((_QWORD *)v223 + 1) = v225;
  v198[v287[17]] = v199[v287[17]];
  v198[v287[18]] = v199[v287[18]];
  v226 = v287[19];
  v227 = &v198[v226];
  v228 = (uint64_t *)&v199[v226];
  v229 = *(_QWORD *)&v199[v226 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v229 >> 60 == 15)
  {
    *(_OWORD *)v227 = *(_OWORD *)v228;
  }
  else
  {
    v230 = *v228;
    sub_2415A0A90(*v228, v229);
    *(_QWORD *)v227 = v230;
    *((_QWORD *)v227 + 1) = v229;
  }
  v231 = v287[20];
  v232 = &v198[v231];
  v233 = &v199[v231];
  if (v275(&v199[v231], 1, v269))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v232, v233, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v268 + 16))(v232, v233, v269);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v268 + 56))(v232, 0, 1, v269);
  }
  v235 = v287[21];
  v236 = *(void **)&v199[v235];
  *(_QWORD *)&v198[v235] = v236;
  v237 = v287[22];
  v238 = &v198[v237];
  v239 = &v199[v237];
  v240 = v236;
  if (v285(v239, 1, v270))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v238, v239, *(_QWORD *)(*(_QWORD *)(v241 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v213 + 16))(v238, v239, v270);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v213 + 56))(v238, 0, 1, v270);
  }
  ((void (*)(char *, char *, uint64_t))v271)(&v267[v264[6]], &v281[v264[6]], v273);
  v277(&v267[v264[7]], &v281[v264[7]], v279);
  *(_QWORD *)&v267[v264[8]] = *(_QWORD *)&v281[v264[8]];
  v242 = v264[9];
  v243 = &v267[v242];
  v244 = &v281[v242];
  swift_retain();
  if (v285(v244, 1, v270))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v243, v244, *(_QWORD *)(*(_QWORD *)(v245 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v213 + 16))(v243, v244, v270);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v213 + 56))(v243, 0, 1, v270);
  }
  v246 = a3[6];
  *(void **)((char *)v282 + a3[5]) = *(void **)((char *)v286 + a3[5]);
  *((_BYTE *)v282 + v246) = *((_BYTE *)v286 + v246);
  v247 = a3[7];
  v248 = a3[8];
  v249 = *(void **)((char *)v286 + v247);
  *(void **)((char *)v282 + v247) = v249;
  v250 = (char *)v282 + v248;
  v251 = (char *)v286 + v248;
  v252 = *((_QWORD *)v251 + 1);
  *(_QWORD *)v250 = *(_QWORD *)v251;
  *((_QWORD *)v250 + 1) = v252;
  v250[16] = v251[16];
  swift_retain();
  v253 = v249;
  swift_retain();
  swift_retain();
  return v282;
}

void **sub_2416952F0(void **a1, void **a2, int *a3)
{
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void *v83;
  void *v84;
  id v85;
  void *v86;
  void *v87;
  id v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  int v118;
  int v119;
  uint64_t (*v120)(char *, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  void *v123;
  void *v124;
  id v125;
  uint64_t v126;
  char *v127;
  char *v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  void *v136;
  void *v137;
  id v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  id v146;
  uint64_t v147;
  void *v148;
  void *v149;
  id v150;
  uint64_t v151;
  char *v152;
  _QWORD *v153;
  void *v154;
  void *v155;
  id v156;
  void *v157;
  void *v158;
  id v159;
  uint64_t v160;
  char *v161;
  char *v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  _QWORD *v173;
  uint64_t v174;
  char *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  int v188;
  int v189;
  uint64_t (*v190)(char *, uint64_t, uint64_t);
  uint64_t v191;
  uint64_t v192;
  void *v193;
  void *v194;
  id v195;
  uint64_t v196;
  char *v197;
  char *v198;
  int v199;
  int v200;
  uint64_t v201;
  int *v202;
  uint64_t v203;
  void *v204;
  void *v205;
  id v206;
  uint64_t v207;
  void *v208;
  void *v209;
  id v210;
  uint64_t v211;
  char *v212;
  _QWORD *v213;
  uint64_t v214;
  void **v215;
  char *v216;
  void *v217;
  void *v218;
  id v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  char *v225;
  char *v226;
  void *v227;
  void *v228;
  id v229;
  void *v230;
  void *v231;
  id v232;
  uint64_t v233;
  char *v234;
  char *v235;
  int v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  char *v260;
  char *v261;
  int v262;
  int v263;
  uint64_t (*v264)(char *, uint64_t, uint64_t);
  uint64_t v265;
  uint64_t v266;
  void *v267;
  void *v268;
  id v269;
  uint64_t v270;
  char *v271;
  char *v272;
  int v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  char *v278;
  int v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  void *v284;
  id v285;
  uint64_t v286;
  char *v287;
  char *v288;
  _QWORD *v290;
  int *v291;
  char *v292;
  int *v293;
  void (*v295)(char *, char *);
  uint64_t v296;
  uint64_t v297;
  void (*v298)(char *, char *);
  uint64_t v299;
  int *v300;
  char *v301;
  uint64_t (*v302)(char *, uint64_t, uint64_t);
  void **v303;
  void **v304;
  uint64_t v305;
  uint64_t (*v306)(char *, uint64_t, uint64_t);
  uint64_t v307;

  v5 = *a2;
  v6 = *a1;
  *a1 = *a2;
  v7 = v5;

  v300 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v8 = v300[5];
  v9 = (char *)a1 + v8;
  v304 = a2;
  v10 = (void **)((char *)a2 + v8);
  *(_QWORD *)v9 = *(void **)((char *)a2 + v8);
  *((_QWORD *)v9 + 1) = *(void **)((char *)a2 + v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v9 + 2) = v10[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v9 + 3) = v10[3];
  *((_QWORD *)v9 + 4) = v10[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v9 + 5) = v10[5];
  *((_QWORD *)v9 + 6) = v10[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v9 + 7) = v10[7];
  *((_QWORD *)v9 + 8) = v10[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v9 + 9) = v10[9];
  *((_QWORD *)v9 + 10) = v10[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v9 + 11) = v10[11];
  v11 = (void *)*((_QWORD *)v9 + 12);
  v12 = (void *)v10[12];
  *((_QWORD *)v9 + 12) = v12;
  v13 = v12;

  v14 = (void *)*((_QWORD *)v9 + 13);
  v15 = (void *)v10[13];
  *((_QWORD *)v9 + 13) = v15;
  v16 = v15;

  v17 = (int *)type metadata accessor for MedicalIDData();
  v18 = v17[13];
  v19 = &v9[v18];
  v20 = (char *)v10 + v18;
  v21 = sub_2416B9B50();
  v307 = *(_QWORD *)(v21 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v307 + 48);
  v23 = v22(v19, 1, v21);
  v24 = v22(v20, 1, v21);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v307 + 8))(v19, v21);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v307 + 24))(v19, v20, v21);
LABEL_7:
  v26 = v17[14];
  v27 = &v9[v26];
  v28 = (char *)v10 + v26;
  v29 = v22(&v9[v26], 1, v21);
  v30 = v22(v28, 1, v21);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v27, v28, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v27, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v307 + 8))(v27, v21);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v307 + 24))(v27, v28, v21);
LABEL_13:
  v32 = v17[15];
  v33 = &v9[v32];
  v34 = (_QWORD *)((char *)v10 + v32);
  *(_QWORD *)v33 = *v34;
  *((_QWORD *)v33 + 1) = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 = v17[16];
  v36 = &v9[v35];
  v37 = (_QWORD *)((char *)v10 + v35);
  *(_QWORD *)v36 = *v37;
  *((_QWORD *)v36 + 1) = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[v17[17]] = *((_BYTE *)v10 + v17[17]);
  v9[v17[18]] = *((_BYTE *)v10 + v17[18]);
  v38 = v17[19];
  v39 = (uint64_t *)&v9[v38];
  v40 = (_QWORD *)((char *)v10 + v38);
  v41 = *(_QWORD *)((char *)v10 + v38 + 8);
  v306 = v22;
  if (*(_QWORD *)&v9[v38 + 8] >> 60 == 15)
  {
    if (v41 >> 60 != 15)
    {
      v42 = *v40;
      sub_2415A0A90(v42, v41);
      *v39 = v42;
      v39[1] = v41;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v41 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v39);
LABEL_18:
    *(_OWORD *)v39 = *(_OWORD *)v40;
    goto LABEL_20;
  }
  v43 = *v40;
  sub_2415A0A90(v43, v41);
  v44 = *v39;
  v45 = v39[1];
  *v39 = v43;
  v39[1] = v41;
  sub_2415A0DAC(v44, v45);
LABEL_20:
  v46 = v17[20];
  v47 = &v9[v46];
  v48 = (char *)v10 + v46;
  v49 = sub_2416B9A18();
  v297 = *(_QWORD *)(v49 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v297 + 48);
  v51 = v50(v47, 1, v49);
  v305 = v49;
  v302 = v50;
  v52 = v50(v48, 1, v49);
  if (v51)
  {
    v53 = v306;
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v47, v48, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v297 + 56))(v47, 0, 1, v49);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v53 = v306;
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v47, v49);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v47, v48, v49);
LABEL_26:
  v55 = v17[21];
  v56 = *(void **)&v9[v55];
  v57 = *(void **)((char *)v10 + v55);
  *(_QWORD *)&v9[v55] = v57;
  v58 = v57;

  v59 = v17[22];
  v60 = &v9[v59];
  v61 = (char *)v10 + v59;
  v62 = v53(&v9[v59], 1, v21);
  v63 = v53(v61, 1, v21);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v60, v61, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v60, 0, 1, v21);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v307 + 8))(v60, v21);
LABEL_31:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v307 + 24))(v60, v61, v21);
LABEL_32:
  v65 = v300[6];
  v66 = (char *)a1 + v65;
  v67 = (char *)v304 + v65;
  v68 = sub_2416B9C70();
  v295 = *(void (**)(char *, char *))(*(_QWORD *)(v68 - 8) + 24);
  v296 = v68;
  v295(v66, v67);
  v69 = v300[7];
  v70 = *(void **)((char *)v304 + v69);
  v71 = *(void **)((char *)a1 + v69);
  *(void **)((char *)a1 + v69) = v70;
  v72 = v70;

  v73 = v300[8];
  v74 = (char *)a1 + v73;
  v75 = (char *)v304 + v73;
  v76 = sub_2416B9C10();
  v298 = *(void (**)(char *, char *))(*(_QWORD *)(v76 - 8) + 24);
  v299 = v76;
  v298(v74, v75);
  v77 = v300[9];
  v303 = a1;
  v78 = (void **)((char *)a1 + v77);
  v79 = (char *)v304 + v77;
  *v78 = *(void **)((char *)v304 + v77);
  v78[1] = *(void **)((char *)v304 + v77 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v290 = v78;
  v291 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v80 = v291[5];
  v81 = (char *)v78 + v80;
  v292 = v79;
  v82 = &v79[v80];
  *(_QWORD *)v81 = *(_QWORD *)v82;
  *((_QWORD *)v81 + 1) = *((_QWORD *)v82 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v81 + 2) = *((_QWORD *)v82 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v81 + 3) = *((_QWORD *)v82 + 3);
  *((_QWORD *)v81 + 4) = *((_QWORD *)v82 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v81 + 5) = *((_QWORD *)v82 + 5);
  *((_QWORD *)v81 + 6) = *((_QWORD *)v82 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v81 + 7) = *((_QWORD *)v82 + 7);
  *((_QWORD *)v81 + 8) = *((_QWORD *)v82 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v81 + 9) = *((_QWORD *)v82 + 9);
  *((_QWORD *)v81 + 10) = *((_QWORD *)v82 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v81 + 11) = *((_QWORD *)v82 + 11);
  v83 = (void *)*((_QWORD *)v81 + 12);
  v84 = (void *)*((_QWORD *)v82 + 12);
  *((_QWORD *)v81 + 12) = v84;
  v85 = v84;

  v86 = (void *)*((_QWORD *)v81 + 13);
  v87 = (void *)*((_QWORD *)v82 + 13);
  *((_QWORD *)v81 + 13) = v87;
  v88 = v87;

  v89 = v17[13];
  v90 = &v81[v89];
  v91 = &v82[v89];
  v92 = v306(&v81[v89], 1, v21);
  v93 = v306(v91, 1, v21);
  if (v92)
  {
    if (!v93)
    {
      (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v90, v91, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v90, 0, 1, v21);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v93)
  {
    (*(void (**)(char *, uint64_t))(v307 + 8))(v90, v21);
LABEL_37:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v307 + 24))(v90, v91, v21);
LABEL_38:
  v95 = v17[14];
  v96 = &v81[v95];
  v97 = &v82[v95];
  v98 = v306(&v81[v95], 1, v21);
  v99 = v306(v97, 1, v21);
  if (v98)
  {
    if (!v99)
    {
      (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v96, v97, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v96, 0, 1, v21);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v99)
  {
    (*(void (**)(char *, uint64_t))(v307 + 8))(v96, v21);
LABEL_43:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v307 + 24))(v96, v97, v21);
LABEL_44:
  v101 = v17[15];
  v102 = &v81[v101];
  v103 = &v82[v101];
  *(_QWORD *)v102 = *(_QWORD *)v103;
  *((_QWORD *)v102 + 1) = *((_QWORD *)v103 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v104 = v17[16];
  v105 = &v81[v104];
  v106 = &v82[v104];
  *(_QWORD *)v105 = *(_QWORD *)v106;
  *((_QWORD *)v105 + 1) = *((_QWORD *)v106 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v81[v17[17]] = v82[v17[17]];
  v81[v17[18]] = v82[v17[18]];
  v107 = v17[19];
  v108 = (uint64_t *)&v81[v107];
  v109 = (uint64_t *)&v82[v107];
  v110 = *(_QWORD *)&v82[v107 + 8];
  if (*(_QWORD *)&v81[v107 + 8] >> 60 == 15)
  {
    if (v110 >> 60 != 15)
    {
      v111 = *v109;
      sub_2415A0A90(v111, v110);
      *v108 = v111;
      v108[1] = v110;
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  if (v110 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v108);
LABEL_49:
    *(_OWORD *)v108 = *(_OWORD *)v109;
    goto LABEL_51;
  }
  v112 = *v109;
  sub_2415A0A90(v112, v110);
  v113 = *v108;
  v114 = v108[1];
  *v108 = v112;
  v108[1] = v110;
  sub_2415A0DAC(v113, v114);
LABEL_51:
  v115 = v17[20];
  v116 = &v81[v115];
  v117 = &v82[v115];
  v118 = v302(&v81[v115], 1, v49);
  v119 = v302(v117, 1, v49);
  if (v118)
  {
    v120 = v306;
    if (!v119)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v116, v117, v49);
      v120 = v306;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v297 + 56))(v116, 0, 1, v49);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  v120 = v306;
  if (v119)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v116, v49);
LABEL_56:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v116, v117, v49);
LABEL_57:
  v122 = v17[21];
  v123 = *(void **)&v81[v122];
  v124 = *(void **)&v82[v122];
  *(_QWORD *)&v81[v122] = v124;
  v125 = v124;

  v126 = v17[22];
  v127 = &v81[v126];
  v128 = &v82[v126];
  v129 = v120(&v81[v126], 1, v21);
  v130 = v120(v128, 1, v21);
  if (v129)
  {
    if (!v130)
    {
      (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v127, v128, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v127, 0, 1, v21);
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (v130)
  {
    (*(void (**)(char *, uint64_t))(v307 + 8))(v127, v21);
LABEL_62:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v307 + 24))(v127, v128, v21);
LABEL_63:
  ((void (*)(char *, char *, uint64_t))v298)((char *)v290 + v291[6], &v292[v291[6]], v299);
  v132 = v291[7];
  v133 = (char *)v290 + v132;
  v134 = &v292[v132];
  ((void (*)(char *, char *, uint64_t))v298)((char *)v290 + v132, &v292[v132], v299);
  v135 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v136 = *(void **)&v134[v135];
  v137 = *(void **)&v133[v135];
  *(_QWORD *)&v133[v135] = v136;
  v138 = v136;

  v139 = v291[8];
  v140 = (char *)v290 + v139;
  v141 = &v292[v139];
  ((void (*)(char *, char *, uint64_t))v298)((char *)v290 + v139, &v292[v139], v299);
  v142 = type metadata accessor for MedicalIDWeightFormatter();
  v143 = *(int *)(v142 + 20);
  v144 = *(void **)&v141[v143];
  v145 = *(void **)&v140[v143];
  *(_QWORD *)&v140[v143] = v144;
  v146 = v144;

  v147 = *(int *)(v142 + 24);
  v148 = *(void **)&v141[v147];
  v149 = *(void **)&v140[v147];
  *(_QWORD *)&v140[v147] = v148;
  v150 = v148;

  v151 = v300[10];
  v152 = (char *)v303 + v151;
  v153 = (void **)((char *)v304 + v151);
  *(_QWORD *)v152 = *(void **)((char *)v304 + v151);
  *((_QWORD *)v152 + 1) = *(void **)((char *)v304 + v151 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v152 + 2) = v153[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v152 + 3) = v153[3];
  *((_QWORD *)v152 + 4) = v153[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v152 + 5) = v153[5];
  *((_QWORD *)v152 + 6) = v153[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v152 + 7) = v153[7];
  *((_QWORD *)v152 + 8) = v153[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v152 + 9) = v153[9];
  *((_QWORD *)v152 + 10) = v153[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v152 + 11) = v153[11];
  v154 = (void *)*((_QWORD *)v152 + 12);
  v155 = (void *)v153[12];
  *((_QWORD *)v152 + 12) = v155;
  v156 = v155;

  v157 = (void *)*((_QWORD *)v152 + 13);
  v158 = (void *)v153[13];
  *((_QWORD *)v152 + 13) = v158;
  v159 = v158;

  v160 = v17[13];
  v161 = &v152[v160];
  v162 = (char *)v153 + v160;
  LODWORD(v141) = v306(&v152[v160], 1, v21);
  v163 = v306(v162, 1, v21);
  if ((_DWORD)v141)
  {
    if (!v163)
    {
      (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v161, v162, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v161, 0, 1, v21);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v163)
  {
    (*(void (**)(char *, uint64_t))(v307 + 8))(v161, v21);
LABEL_68:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
    goto LABEL_69;
  }
  (*(void (**)(char *, char *, uint64_t))(v307 + 24))(v161, v162, v21);
LABEL_69:
  v165 = v17[14];
  v166 = &v152[v165];
  v167 = (char *)v153 + v165;
  v168 = v306(&v152[v165], 1, v21);
  v169 = v306(v167, 1, v21);
  if (v168)
  {
    if (!v169)
    {
      (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v166, v167, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v166, 0, 1, v21);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v169)
  {
    (*(void (**)(char *, uint64_t))(v307 + 8))(v166, v21);
LABEL_74:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(char *, char *, uint64_t))(v307 + 24))(v166, v167, v21);
LABEL_75:
  v171 = v17[15];
  v172 = &v152[v171];
  v173 = (_QWORD *)((char *)v153 + v171);
  *(_QWORD *)v172 = *v173;
  *((_QWORD *)v172 + 1) = v173[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v174 = v17[16];
  v175 = &v152[v174];
  v176 = (_QWORD *)((char *)v153 + v174);
  *(_QWORD *)v175 = *v176;
  *((_QWORD *)v175 + 1) = v176[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v152[v17[17]] = *((_BYTE *)v153 + v17[17]);
  v152[v17[18]] = *((_BYTE *)v153 + v17[18]);
  v177 = v17[19];
  v178 = (uint64_t *)&v152[v177];
  v179 = (_QWORD *)((char *)v153 + v177);
  v180 = *(_QWORD *)((char *)v153 + v177 + 8);
  if (*(_QWORD *)&v152[v177 + 8] >> 60 == 15)
  {
    if (v180 >> 60 != 15)
    {
      v181 = *v179;
      sub_2415A0A90(v181, v180);
      *v178 = v181;
      v178[1] = v180;
      goto LABEL_82;
    }
    goto LABEL_80;
  }
  if (v180 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v178);
LABEL_80:
    *(_OWORD *)v178 = *(_OWORD *)v179;
    goto LABEL_82;
  }
  v182 = *v179;
  sub_2415A0A90(v182, v180);
  v183 = *v178;
  v184 = v178[1];
  *v178 = v182;
  v178[1] = v180;
  sub_2415A0DAC(v183, v184);
LABEL_82:
  v185 = v17[20];
  v186 = &v152[v185];
  v187 = (char *)v153 + v185;
  v188 = v302(&v152[v185], 1, v305);
  v189 = v302(v187, 1, v305);
  if (v188)
  {
    v190 = v306;
    if (!v189)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v186, v187, v305);
      v190 = v306;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v297 + 56))(v186, 0, 1, v305);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  v190 = v306;
  if (v189)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v186, v305);
LABEL_87:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v186, v187, v305);
LABEL_88:
  v192 = v17[21];
  v193 = *(void **)&v152[v192];
  v194 = *(void **)((char *)v153 + v192);
  *(_QWORD *)&v152[v192] = v194;
  v195 = v194;

  v196 = v17[22];
  v197 = &v152[v196];
  v198 = (char *)v153 + v196;
  v199 = v190(&v152[v196], 1, v21);
  v200 = v190(v198, 1, v21);
  if (v199)
  {
    if (!v200)
    {
      (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v197, v198, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v197, 0, 1, v21);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v200)
  {
    (*(void (**)(char *, uint64_t))(v307 + 8))(v197, v21);
LABEL_93:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v307 + 24))(v197, v198, v21);
LABEL_94:
  v202 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v295)(&v152[v202[5]], (char *)v153 + v202[5], v296);
  ((void (*)(char *, char *, uint64_t))v298)(&v152[v202[6]], (char *)v153 + v202[6], v299);
  v203 = v202[7];
  v204 = *(void **)&v152[v203];
  v205 = *(void **)((char *)v153 + v203);
  *(_QWORD *)&v152[v203] = v205;
  v206 = v205;

  v207 = v202[8];
  v208 = *(void **)((char *)v153 + v207);
  v209 = *(void **)&v152[v207];
  *(_QWORD *)&v152[v207] = v208;
  v210 = v208;

  v211 = v202[9];
  v212 = &v152[v211];
  v213 = (_QWORD *)((char *)v153 + v211);
  *(_QWORD *)v212 = *v213;
  *((_QWORD *)v212 + 1) = v213[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v214 = v300[11];
  v215 = (void **)((char *)v303 + v214);
  v216 = (char *)v304 + v214;
  v217 = *(void **)((char *)v304 + v214);
  v218 = *v215;
  *v215 = v217;
  v219 = v217;

  v220 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v295)((char *)v215 + *(int *)(v220 + 20), &v216[*(int *)(v220 + 20)], v296);
  ((void (*)(char *, char *, uint64_t))v298)((char *)v215 + *(int *)(v220 + 24), &v216[*(int *)(v220 + 24)], v299);
  v221 = v300[12];
  v222 = (char *)v303 + v221;
  v223 = (char *)v304 + v221;
  *(_QWORD *)v222 = *(void **)((char *)v304 + v221);
  *((_QWORD *)v222 + 1) = *(void **)((char *)v304 + v221 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v293 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v224 = v293[5];
  v225 = &v222[v224];
  v301 = v223;
  v226 = &v223[v224];
  *(_QWORD *)v225 = *(_QWORD *)&v223[v224];
  *((_QWORD *)v225 + 1) = *(_QWORD *)&v223[v224 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v225 + 2) = *((_QWORD *)v226 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v225 + 3) = *((_QWORD *)v226 + 3);
  *((_QWORD *)v225 + 4) = *((_QWORD *)v226 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v225 + 5) = *((_QWORD *)v226 + 5);
  *((_QWORD *)v225 + 6) = *((_QWORD *)v226 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v225 + 7) = *((_QWORD *)v226 + 7);
  *((_QWORD *)v225 + 8) = *((_QWORD *)v226 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v225 + 9) = *((_QWORD *)v226 + 9);
  *((_QWORD *)v225 + 10) = *((_QWORD *)v226 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v225 + 11) = *((_QWORD *)v226 + 11);
  v227 = (void *)*((_QWORD *)v225 + 12);
  v228 = (void *)*((_QWORD *)v226 + 12);
  *((_QWORD *)v225 + 12) = v228;
  v229 = v228;

  v230 = (void *)*((_QWORD *)v225 + 13);
  v231 = (void *)*((_QWORD *)v226 + 13);
  *((_QWORD *)v225 + 13) = v231;
  v232 = v231;

  v233 = v17[13];
  v234 = &v225[v233];
  v235 = &v226[v233];
  v236 = v306(&v225[v233], 1, v21);
  v237 = v306(v235, 1, v21);
  if (v236)
  {
    if (!v237)
    {
      (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v234, v235, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v234, 0, 1, v21);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v237)
  {
    (*(void (**)(char *, uint64_t))(v307 + 8))(v234, v21);
LABEL_99:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v234, v235, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v307 + 24))(v234, v235, v21);
LABEL_100:
  v239 = v17[14];
  v240 = &v225[v239];
  v241 = &v226[v239];
  v242 = v306(&v225[v239], 1, v21);
  v243 = v306(v241, 1, v21);
  if (v242)
  {
    if (!v243)
    {
      (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v240, v241, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v240, 0, 1, v21);
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  if (v243)
  {
    (*(void (**)(char *, uint64_t))(v307 + 8))(v240, v21);
LABEL_105:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
    goto LABEL_106;
  }
  (*(void (**)(char *, char *, uint64_t))(v307 + 24))(v240, v241, v21);
LABEL_106:
  v245 = v17[15];
  v246 = &v225[v245];
  v247 = &v226[v245];
  *(_QWORD *)v246 = *(_QWORD *)v247;
  *((_QWORD *)v246 + 1) = *((_QWORD *)v247 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v248 = v17[16];
  v249 = &v225[v248];
  v250 = &v226[v248];
  *(_QWORD *)v249 = *(_QWORD *)v250;
  *((_QWORD *)v249 + 1) = *((_QWORD *)v250 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v225[v17[17]] = v226[v17[17]];
  v225[v17[18]] = v226[v17[18]];
  v251 = v17[19];
  v252 = (uint64_t *)&v225[v251];
  v253 = (uint64_t *)&v226[v251];
  v254 = *(_QWORD *)&v226[v251 + 8];
  if (*(_QWORD *)&v225[v251 + 8] >> 60 == 15)
  {
    if (v254 >> 60 != 15)
    {
      v255 = *v253;
      sub_2415A0A90(v255, v254);
      *v252 = v255;
      v252[1] = v254;
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  if (v254 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v252);
LABEL_111:
    *(_OWORD *)v252 = *(_OWORD *)v253;
    goto LABEL_113;
  }
  v256 = *v253;
  sub_2415A0A90(v256, v254);
  v257 = *v252;
  v258 = v252[1];
  *v252 = v256;
  v252[1] = v254;
  sub_2415A0DAC(v257, v258);
LABEL_113:
  v259 = v17[20];
  v260 = &v225[v259];
  v261 = &v226[v259];
  v262 = v302(&v225[v259], 1, v305);
  v263 = v302(v261, 1, v305);
  if (v262)
  {
    v264 = v306;
    if (!v263)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v260, v261, v305);
      v264 = v306;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v297 + 56))(v260, 0, 1, v305);
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  v264 = v306;
  if (v263)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v260, v305);
LABEL_118:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v260, v261, *(_QWORD *)(*(_QWORD *)(v265 - 8) + 64));
    goto LABEL_119;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v260, v261, v305);
LABEL_119:
  v266 = v17[21];
  v267 = *(void **)&v225[v266];
  v268 = *(void **)&v226[v266];
  *(_QWORD *)&v225[v266] = v268;
  v269 = v268;

  v270 = v17[22];
  v271 = &v225[v270];
  v272 = &v226[v270];
  v273 = v264(&v225[v270], 1, v21);
  v274 = v264(v272, 1, v21);
  if (v273)
  {
    if (!v274)
    {
      (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v271, v272, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v271, 0, 1, v21);
      goto LABEL_125;
    }
    goto LABEL_124;
  }
  if (v274)
  {
    (*(void (**)(char *, uint64_t))(v307 + 8))(v271, v21);
LABEL_124:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v271, v272, *(_QWORD *)(*(_QWORD *)(v275 - 8) + 64));
    goto LABEL_125;
  }
  (*(void (**)(char *, char *, uint64_t))(v307 + 24))(v271, v272, v21);
LABEL_125:
  ((void (*)(char *, char *, uint64_t))v295)(&v222[v293[6]], &v301[v293[6]], v296);
  ((void (*)(char *, char *, uint64_t))v298)(&v222[v293[7]], &v301[v293[7]], v299);
  *(_QWORD *)&v222[v293[8]] = *(_QWORD *)&v301[v293[8]];
  swift_retain();
  swift_release();
  v276 = v293[9];
  v277 = &v222[v276];
  v278 = &v301[v276];
  v279 = v264(&v222[v276], 1, v21);
  v280 = v264(v278, 1, v21);
  if (!v279)
  {
    if (!v280)
    {
      (*(void (**)(char *, char *, uint64_t))(v307 + 24))(v277, v278, v21);
      goto LABEL_131;
    }
    (*(void (**)(char *, uint64_t))(v307 + 8))(v277, v21);
    goto LABEL_130;
  }
  if (v280)
  {
LABEL_130:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v277, v278, *(_QWORD *)(*(_QWORD *)(v281 - 8) + 64));
    goto LABEL_131;
  }
  (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v277, v278, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v277, 0, 1, v21);
LABEL_131:
  *(void **)((char *)v303 + a3[5]) = *(void **)((char *)v304 + a3[5]);
  swift_retain();
  swift_release();
  *((_BYTE *)v303 + a3[6]) = *((_BYTE *)v304 + a3[6]);
  v282 = a3[7];
  v283 = *(void **)((char *)v304 + v282);
  v284 = *(void **)((char *)v303 + v282);
  *(void **)((char *)v303 + v282) = v283;
  v285 = v283;

  v286 = a3[8];
  v287 = (char *)v303 + v286;
  v288 = (char *)v304 + v286;
  *(void **)((char *)v303 + v286) = *(void **)((char *)v304 + v286);
  swift_retain();
  swift_release();
  *((_QWORD *)v287 + 1) = *((_QWORD *)v288 + 1);
  swift_retain();
  swift_release();
  v287[16] = v288[16];
  return v303;
}

__n128 sub_241696DA4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int *v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  int *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __n128 *v124;
  __n128 *v125;
  __n128 result;
  int *v127;
  int *v128;
  void (*v130)(char *, char *);
  uint64_t v131;
  int *v132;
  void (*v133)(char *, char *);
  uint64_t v134;
  unsigned int (*v135)(char *, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  unsigned int (*v140)(char *, uint64_t, uint64_t);

  *a1 = *a2;
  v132 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v5 = v132[5];
  v139 = a1;
  v6 = (char *)a1 + v5;
  v138 = a2;
  v7 = (char *)a2 + v5;
  *(_OWORD *)v6 = *(_OWORD *)((char *)a2 + v5);
  *((_QWORD *)v6 + 2) = *(_QWORD *)((char *)a2 + v5 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)((char *)a2 + v5 + 24);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)((char *)a2 + v5 + 40);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)((char *)a2 + v5 + 56);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)((char *)a2 + v5 + 72);
  *((_QWORD *)v6 + 11) = *(_QWORD *)((char *)a2 + v5 + 88);
  *((_OWORD *)v6 + 6) = *(_OWORD *)((char *)a2 + v5 + 96);
  v8 = (int *)type metadata accessor for MedicalIDData();
  v9 = v8[13];
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = sub_2416B9B50();
  v13 = *(_QWORD *)(v12 - 8);
  v140 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v140(v11, 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = v8[14];
  v16 = &v6[v15];
  v17 = &v7[v15];
  if (v140(&v7[v15], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v17, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  *(_OWORD *)&v6[v8[15]] = *(_OWORD *)&v7[v8[15]];
  *(_OWORD *)&v6[v8[16]] = *(_OWORD *)&v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  v6[v8[18]] = v7[v8[18]];
  *(_OWORD *)&v6[v8[19]] = *(_OWORD *)&v7[v8[19]];
  v19 = v8[20];
  v20 = &v6[v19];
  v21 = &v7[v19];
  v22 = sub_2416B9A18();
  v23 = *(_QWORD *)(v22 - 8);
  v135 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v135(v21, 1, v22))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *(_QWORD *)&v6[v8[21]] = *(_QWORD *)&v7[v8[21]];
  v25 = v8[22];
  v26 = &v6[v25];
  v27 = &v7[v25];
  v136 = v22;
  v137 = v13;
  if (v140(&v7[v25], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v26, v27, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v26, 0, 1, v12);
  }
  v29 = v132[6];
  v30 = (char *)v139 + v29;
  v31 = (char *)v138 + v29;
  v32 = sub_2416B9C70();
  v130 = *(void (**)(char *, char *))(*(_QWORD *)(v32 - 8) + 32);
  v131 = v32;
  v130(v30, v31);
  *(_QWORD *)((char *)v139 + v132[7]) = *(_QWORD *)((char *)v138 + v132[7]);
  v33 = v132[8];
  v34 = (char *)v139 + v33;
  v35 = (char *)v138 + v33;
  v36 = sub_2416B9C10();
  v133 = *(void (**)(char *, char *))(*(_QWORD *)(v36 - 8) + 32);
  v134 = v36;
  v133(v34, v35);
  v37 = v132[9];
  v38 = (_OWORD *)((char *)v139 + v37);
  v39 = (char *)v138 + v37;
  *v38 = *(_OWORD *)((char *)v138 + v37);
  v127 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v40 = v127[5];
  v41 = (char *)v38 + v40;
  v42 = &v39[v40];
  *(_OWORD *)v41 = *(_OWORD *)&v39[v40];
  *((_QWORD *)v41 + 2) = *(_QWORD *)&v39[v40 + 16];
  *(_OWORD *)(v41 + 24) = *(_OWORD *)&v39[v40 + 24];
  *(_OWORD *)(v41 + 40) = *(_OWORD *)&v39[v40 + 40];
  *(_OWORD *)(v41 + 56) = *(_OWORD *)&v39[v40 + 56];
  *(_OWORD *)(v41 + 72) = *(_OWORD *)&v39[v40 + 72];
  *((_QWORD *)v41 + 11) = *(_QWORD *)&v39[v40 + 88];
  *((_OWORD *)v41 + 6) = *(_OWORD *)&v39[v40 + 96];
  v43 = v8[13];
  v44 = &v41[v43];
  v45 = &v42[v43];
  if (v140(&v42[v43], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v44, v45, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v44, 0, 1, v12);
  }
  v47 = v8[14];
  v48 = &v41[v47];
  v49 = &v42[v47];
  if (v140(&v42[v47], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v48, v49, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v48, 0, 1, v12);
  }
  *(_OWORD *)&v41[v8[15]] = *(_OWORD *)&v42[v8[15]];
  *(_OWORD *)&v41[v8[16]] = *(_OWORD *)&v42[v8[16]];
  v41[v8[17]] = v42[v8[17]];
  v41[v8[18]] = v42[v8[18]];
  *(_OWORD *)&v41[v8[19]] = *(_OWORD *)&v42[v8[19]];
  v51 = v8[20];
  v52 = &v41[v51];
  v53 = &v42[v51];
  if (v135(&v42[v51], 1, v136))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v52, v53, v136);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v52, 0, 1, v136);
  }
  *(_QWORD *)&v41[v8[21]] = *(_QWORD *)&v42[v8[21]];
  v55 = v8[22];
  v56 = &v41[v55];
  v57 = &v42[v55];
  if (v140(&v42[v55], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    v59 = v137;
  }
  else
  {
    v59 = v137;
    (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v56, v57, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v56, 0, 1, v12);
  }
  ((void (*)(char *, char *, uint64_t))v133)((char *)v38 + v127[6], &v39[v127[6]], v134);
  v60 = v127[7];
  v61 = (char *)v38 + v60;
  v62 = &v39[v60];
  ((void (*)(char *, char *, uint64_t))v133)((char *)v38 + v60, &v39[v60], v134);
  v63 = type metadata accessor for MedicalIDHeightFormatter();
  *(_QWORD *)&v61[*(int *)(v63 + 20)] = *(_QWORD *)&v62[*(int *)(v63 + 20)];
  v64 = v127[8];
  v65 = (char *)v38 + v64;
  v66 = &v39[v64];
  ((void (*)(char *, char *, uint64_t))v133)((char *)v38 + v64, &v39[v64], v134);
  v67 = type metadata accessor for MedicalIDWeightFormatter();
  *(_QWORD *)&v65[*(int *)(v67 + 20)] = *(_QWORD *)&v66[*(int *)(v67 + 20)];
  *(_QWORD *)&v65[*(int *)(v67 + 24)] = *(_QWORD *)&v66[*(int *)(v67 + 24)];
  v68 = v132;
  v69 = v132[10];
  v70 = (char *)v139 + v69;
  v71 = (char *)v138 + v69;
  *(_OWORD *)v70 = *(_OWORD *)((char *)v138 + v69);
  *((_QWORD *)v70 + 2) = *(_QWORD *)((char *)v138 + v69 + 16);
  *(_OWORD *)(v70 + 24) = *(_OWORD *)((char *)v138 + v69 + 24);
  *(_OWORD *)(v70 + 40) = *(_OWORD *)((char *)v138 + v69 + 40);
  *(_OWORD *)(v70 + 56) = *(_OWORD *)((char *)v138 + v69 + 56);
  *(_OWORD *)(v70 + 72) = *(_OWORD *)((char *)v138 + v69 + 72);
  *((_QWORD *)v70 + 11) = *(_QWORD *)((char *)v138 + v69 + 88);
  *((_OWORD *)v70 + 6) = *(_OWORD *)((char *)v138 + v69 + 96);
  v72 = v8[13];
  v73 = &v70[v72];
  v74 = &v71[v72];
  if (v140(&v71[v72], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v73, v74, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v73, 0, 1, v12);
  }
  v76 = v8[14];
  v77 = &v70[v76];
  v78 = &v71[v76];
  if (v140(&v71[v76], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v77, v78, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v77, 0, 1, v12);
  }
  *(_OWORD *)&v70[v8[15]] = *(_OWORD *)&v71[v8[15]];
  *(_OWORD *)&v70[v8[16]] = *(_OWORD *)&v71[v8[16]];
  v70[v8[17]] = v71[v8[17]];
  v70[v8[18]] = v71[v8[18]];
  *(_OWORD *)&v70[v8[19]] = *(_OWORD *)&v71[v8[19]];
  v80 = v8[20];
  v81 = &v70[v80];
  v82 = &v71[v80];
  if (v135(&v71[v80], 1, v136))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v81, v82, v136);
    v68 = v132;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v81, 0, 1, v136);
  }
  *(_QWORD *)&v70[v8[21]] = *(_QWORD *)&v71[v8[21]];
  v84 = v8[22];
  v85 = &v70[v84];
  v86 = &v71[v84];
  v128 = v8;
  v87 = v68;
  if (v140(&v71[v84], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v85, v86, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v85, 0, 1, v12);
  }
  v89 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v130)(&v70[v89[5]], &v71[v89[5]], v131);
  ((void (*)(char *, char *, uint64_t))v133)(&v70[v89[6]], &v71[v89[6]], v134);
  *(_QWORD *)&v70[v89[7]] = *(_QWORD *)&v71[v89[7]];
  *(_QWORD *)&v70[v89[8]] = *(_QWORD *)&v71[v89[8]];
  *(_OWORD *)&v70[v89[9]] = *(_OWORD *)&v71[v89[9]];
  v90 = v68[11];
  v91 = (char *)v139 + v90;
  v92 = (char *)v138 + v90;
  *(_QWORD *)((char *)v139 + v90) = *(_QWORD *)((char *)v138 + v90);
  v93 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v130)(&v91[*(int *)(v93 + 20)], &v92[*(int *)(v93 + 20)], v131);
  ((void (*)(char *, char *, uint64_t))v133)(&v91[*(int *)(v93 + 24)], &v92[*(int *)(v93 + 24)], v134);
  v94 = v87[12];
  v95 = (char *)v139 + v94;
  v96 = (char *)v138 + v94;
  *(_OWORD *)((char *)v139 + v94) = *(_OWORD *)((char *)v138 + v94);
  v97 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v98 = v97[5];
  v99 = &v95[v98];
  v100 = &v96[v98];
  *(_OWORD *)v99 = *(_OWORD *)&v96[v98];
  *((_QWORD *)v99 + 2) = *(_QWORD *)&v96[v98 + 16];
  *(_OWORD *)(v99 + 24) = *(_OWORD *)&v96[v98 + 24];
  *(_OWORD *)(v99 + 40) = *(_OWORD *)&v96[v98 + 40];
  *(_OWORD *)(v99 + 56) = *(_OWORD *)&v96[v98 + 56];
  *(_OWORD *)(v99 + 72) = *(_OWORD *)&v96[v98 + 72];
  *((_QWORD *)v99 + 11) = *(_QWORD *)&v96[v98 + 88];
  *((_OWORD *)v99 + 6) = *(_OWORD *)&v96[v98 + 96];
  v101 = v128[13];
  v102 = &v99[v101];
  v103 = &v100[v101];
  if (v140(&v100[v101], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v102, v103, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v102, 0, 1, v12);
  }
  v105 = v128[14];
  v106 = &v99[v105];
  v107 = &v100[v105];
  if (v140(&v100[v105], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v106, v107, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v106, 0, 1, v12);
  }
  *(_OWORD *)&v99[v128[15]] = *(_OWORD *)&v100[v128[15]];
  *(_OWORD *)&v99[v128[16]] = *(_OWORD *)&v100[v128[16]];
  v99[v128[17]] = v100[v128[17]];
  v99[v128[18]] = v100[v128[18]];
  *(_OWORD *)&v99[v128[19]] = *(_OWORD *)&v100[v128[19]];
  v109 = v128[20];
  v110 = &v99[v109];
  v111 = &v100[v109];
  if (v135(&v100[v109], 1, v136))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v110, v111, v136);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v110, 0, 1, v136);
  }
  *(_QWORD *)&v99[v128[21]] = *(_QWORD *)&v100[v128[21]];
  v113 = v128[22];
  v114 = &v99[v113];
  v115 = &v100[v113];
  if (v140(&v100[v113], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
    v117 = v137;
  }
  else
  {
    v117 = v137;
    (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v114, v115, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v114, 0, 1, v12);
  }
  ((void (*)(char *, char *, uint64_t))v130)(&v95[v97[6]], &v96[v97[6]], v131);
  ((void (*)(char *, char *, uint64_t))v133)(&v95[v97[7]], &v96[v97[7]], v134);
  *(_QWORD *)&v95[v97[8]] = *(_QWORD *)&v96[v97[8]];
  v118 = v97[9];
  v119 = &v95[v118];
  v120 = &v96[v118];
  if (v140(&v96[v118], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v119, v120, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v119, 0, 1, v12);
  }
  v122 = a3[6];
  *(_QWORD *)((char *)v139 + a3[5]) = *(_QWORD *)((char *)v138 + a3[5]);
  *((_BYTE *)v139 + v122) = *((_BYTE *)v138 + v122);
  v123 = a3[8];
  *(_QWORD *)((char *)v139 + a3[7]) = *(_QWORD *)((char *)v138 + a3[7]);
  v124 = (__n128 *)((char *)v139 + v123);
  v125 = (__n128 *)((char *)v138 + v123);
  result = *v125;
  *v124 = *v125;
  v124[1].n128_u8[0] = v125[1].n128_u8[0];
  return result;
}

void **sub_241697C70(void **a1, void **a2, int *a3)
{
  void *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t (*v52)(char *, uint64_t, uint64_t);
  int v53;
  int v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int v121;
  int v122;
  uint64_t (*v123)(char *, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  int v130;
  int v131;
  void **v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  char *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  int v188;
  int v189;
  uint64_t (*v190)(char *, uint64_t, uint64_t);
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  int v197;
  int v198;
  uint64_t v199;
  int *v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  char *v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  char *v231;
  char *v232;
  int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  int v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  int v261;
  int v262;
  uint64_t (*v263)(char *, uint64_t, uint64_t);
  uint64_t v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  char *v268;
  char *v269;
  int v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  int v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  uint64_t v281;
  char *v282;
  char *v283;
  int *v285;
  char *v286;
  int *v287;
  void (*v289)(char *, char *);
  uint64_t v290;
  uint64_t v291;
  void (*v292)(char *, char *);
  uint64_t v293;
  int *v294;
  char *v295;
  uint64_t (*v296)(char *, uint64_t, uint64_t);
  void **v297;
  void **v298;
  uint64_t v299;
  uint64_t (*v300)(char *, uint64_t, uint64_t);
  uint64_t v301;

  v5 = *a1;
  *a1 = *a2;

  v294 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v6 = v294[5];
  v7 = (char *)a1 + v6;
  v298 = a2;
  v8 = (void **)((char *)a2 + v6);
  v9 = v8[1];
  *(_QWORD *)v7 = *v8;
  *((_QWORD *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 2) = v8[2];
  swift_bridgeObjectRelease();
  v10 = v8[4];
  *((_QWORD *)v7 + 3) = v8[3];
  *((_QWORD *)v7 + 4) = v10;
  swift_bridgeObjectRelease();
  v11 = v8[6];
  *((_QWORD *)v7 + 5) = v8[5];
  *((_QWORD *)v7 + 6) = v11;
  swift_bridgeObjectRelease();
  v12 = v8[8];
  *((_QWORD *)v7 + 7) = v8[7];
  *((_QWORD *)v7 + 8) = v12;
  swift_bridgeObjectRelease();
  v13 = v8[10];
  *((_QWORD *)v7 + 9) = v8[9];
  *((_QWORD *)v7 + 10) = v13;
  swift_bridgeObjectRelease();
  v14 = (void *)*((_QWORD *)v7 + 12);
  v15 = v8[12];
  *((_QWORD *)v7 + 11) = v8[11];
  *((_QWORD *)v7 + 12) = v15;

  v16 = (void *)*((_QWORD *)v7 + 13);
  *((_QWORD *)v7 + 13) = v8[13];

  v17 = (int *)type metadata accessor for MedicalIDData();
  v18 = v17[13];
  v19 = &v7[v18];
  v20 = (char *)v8 + v18;
  v21 = sub_2416B9B50();
  v301 = *(_QWORD *)(v21 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v301 + 48);
  v23 = v22(v19, 1, v21);
  v24 = v22(v20, 1, v21);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v301 + 8))(v19, v21);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v301 + 40))(v19, v20, v21);
LABEL_7:
  v26 = v17[14];
  v27 = &v7[v26];
  v28 = (char *)v8 + v26;
  v29 = v22(&v7[v26], 1, v21);
  v30 = v22(v28, 1, v21);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 32))(v27, v28, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v27, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v301 + 8))(v27, v21);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v301 + 40))(v27, v28, v21);
LABEL_13:
  v32 = v17[15];
  v33 = &v7[v32];
  v34 = (_QWORD *)((char *)v8 + v32);
  v36 = *v34;
  v35 = v34[1];
  *(_QWORD *)v33 = v36;
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  v37 = v17[16];
  v38 = &v7[v37];
  v39 = (_QWORD *)((char *)v8 + v37);
  v41 = *v39;
  v40 = v39[1];
  *(_QWORD *)v38 = v41;
  *((_QWORD *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  v7[v17[17]] = *((_BYTE *)v8 + v17[17]);
  v7[v17[18]] = *((_BYTE *)v8 + v17[18]);
  v42 = v17[19];
  v43 = (uint64_t)&v7[v42];
  v44 = (char *)v8 + v42;
  v45 = *(_QWORD *)&v7[v42 + 8];
  v300 = v22;
  if (v45 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v43 = *(_OWORD *)v44;
    goto LABEL_18;
  }
  v46 = *((_QWORD *)v44 + 1);
  if (v46 >> 60 == 15)
  {
    sub_2415A1B38(v43);
    goto LABEL_16;
  }
  v47 = *(_QWORD *)v43;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_QWORD *)(v43 + 8) = v46;
  sub_2415A0DAC(v47, v45);
LABEL_18:
  v48 = v17[20];
  v49 = &v7[v48];
  v50 = (char *)v8 + v48;
  v51 = sub_2416B9A18();
  v291 = *(_QWORD *)(v51 - 8);
  v52 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v291 + 48);
  v53 = v52(v49, 1, v51);
  v299 = v51;
  v296 = v52;
  v54 = v52(v50, 1, v51);
  if (v53)
  {
    v55 = v300;
    if (!v54)
    {
      (*(void (**)(char *, char *, uint64_t))(v291 + 32))(v49, v50, v51);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v291 + 56))(v49, 0, 1, v51);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  v55 = v300;
  if (v54)
  {
    (*(void (**)(char *, uint64_t))(v291 + 8))(v49, v51);
LABEL_23:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v291 + 40))(v49, v50, v51);
LABEL_24:
  v57 = v17[21];
  v58 = *(void **)&v7[v57];
  *(_QWORD *)&v7[v57] = *(_QWORD *)((char *)v8 + v57);

  v59 = v17[22];
  v60 = &v7[v59];
  v61 = (char *)v8 + v59;
  v62 = v55(&v7[v59], 1, v21);
  v63 = v55(v61, 1, v21);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 32))(v60, v61, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v60, 0, 1, v21);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v301 + 8))(v60, v21);
LABEL_29:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v301 + 40))(v60, v61, v21);
LABEL_30:
  v65 = v294[6];
  v66 = (char *)a1 + v65;
  v67 = (char *)v298 + v65;
  v68 = sub_2416B9C70();
  v289 = *(void (**)(char *, char *))(*(_QWORD *)(v68 - 8) + 40);
  v290 = v68;
  v289(v66, v67);
  v69 = v294[7];
  v70 = *(void **)((char *)a1 + v69);
  *(void **)((char *)a1 + v69) = *(void **)((char *)v298 + v69);

  v71 = v294[8];
  v72 = (char *)a1 + v71;
  v73 = (char *)v298 + v71;
  v74 = sub_2416B9C10();
  v292 = *(void (**)(char *, char *))(*(_QWORD *)(v74 - 8) + 40);
  v293 = v74;
  v292(v72, v73);
  v75 = v294[9];
  v297 = a1;
  v76 = (void **)((char *)a1 + v75);
  v77 = (char *)v298 + v75;
  v78 = *(uint64_t *)((char *)v298 + v75 + 8);
  *v76 = *(void **)((char *)v298 + v75);
  v76[1] = v78;
  swift_bridgeObjectRelease();
  v285 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v286 = v77;
  v79 = v285[5];
  v80 = (char *)v76 + v79;
  v81 = &v77[v79];
  v82 = *((_QWORD *)v81 + 1);
  *(_QWORD *)v80 = *(_QWORD *)v81;
  *((_QWORD *)v80 + 1) = v82;
  swift_bridgeObjectRelease();
  *((_QWORD *)v80 + 2) = *((_QWORD *)v81 + 2);
  swift_bridgeObjectRelease();
  v83 = *((_QWORD *)v81 + 4);
  *((_QWORD *)v80 + 3) = *((_QWORD *)v81 + 3);
  *((_QWORD *)v80 + 4) = v83;
  swift_bridgeObjectRelease();
  v84 = *((_QWORD *)v81 + 6);
  *((_QWORD *)v80 + 5) = *((_QWORD *)v81 + 5);
  *((_QWORD *)v80 + 6) = v84;
  swift_bridgeObjectRelease();
  v85 = *((_QWORD *)v81 + 8);
  *((_QWORD *)v80 + 7) = *((_QWORD *)v81 + 7);
  *((_QWORD *)v80 + 8) = v85;
  swift_bridgeObjectRelease();
  v86 = *((_QWORD *)v81 + 10);
  *((_QWORD *)v80 + 9) = *((_QWORD *)v81 + 9);
  *((_QWORD *)v80 + 10) = v86;
  swift_bridgeObjectRelease();
  v87 = (void *)*((_QWORD *)v80 + 12);
  v88 = *((_QWORD *)v81 + 12);
  *((_QWORD *)v80 + 11) = *((_QWORD *)v81 + 11);
  *((_QWORD *)v80 + 12) = v88;

  v89 = (void *)*((_QWORD *)v80 + 13);
  *((_QWORD *)v80 + 13) = *((_QWORD *)v81 + 13);

  v90 = v17[13];
  v91 = &v80[v90];
  v92 = &v81[v90];
  v93 = v300(&v80[v90], 1, v21);
  v94 = v300(v92, 1, v21);
  if (v93)
  {
    if (!v94)
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 32))(v91, v92, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v91, 0, 1, v21);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v94)
  {
    (*(void (**)(char *, uint64_t))(v301 + 8))(v91, v21);
LABEL_35:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v301 + 40))(v91, v92, v21);
LABEL_36:
  v96 = v17[14];
  v97 = &v80[v96];
  v98 = &v81[v96];
  v99 = v300(&v80[v96], 1, v21);
  v100 = v300(v98, 1, v21);
  if (v99)
  {
    if (!v100)
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 32))(v97, v98, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v97, 0, 1, v21);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v100)
  {
    (*(void (**)(char *, uint64_t))(v301 + 8))(v97, v21);
LABEL_41:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v301 + 40))(v97, v98, v21);
LABEL_42:
  v102 = v17[15];
  v103 = &v80[v102];
  v104 = (uint64_t *)&v81[v102];
  v106 = *v104;
  v105 = v104[1];
  *(_QWORD *)v103 = v106;
  *((_QWORD *)v103 + 1) = v105;
  swift_bridgeObjectRelease();
  v107 = v17[16];
  v108 = &v80[v107];
  v109 = (uint64_t *)&v81[v107];
  v111 = *v109;
  v110 = v109[1];
  *(_QWORD *)v108 = v111;
  *((_QWORD *)v108 + 1) = v110;
  swift_bridgeObjectRelease();
  v80[v17[17]] = v81[v17[17]];
  v80[v17[18]] = v81[v17[18]];
  v112 = v17[19];
  v113 = (uint64_t)&v80[v112];
  v114 = &v81[v112];
  v115 = *(_QWORD *)&v80[v112 + 8];
  if (v115 >> 60 == 15)
  {
LABEL_45:
    *(_OWORD *)v113 = *(_OWORD *)v114;
    goto LABEL_47;
  }
  v116 = *((_QWORD *)v114 + 1);
  if (v116 >> 60 == 15)
  {
    sub_2415A1B38(v113);
    goto LABEL_45;
  }
  v117 = *(_QWORD *)v113;
  *(_QWORD *)v113 = *(_QWORD *)v114;
  *(_QWORD *)(v113 + 8) = v116;
  sub_2415A0DAC(v117, v115);
LABEL_47:
  v118 = v17[20];
  v119 = &v80[v118];
  v120 = &v81[v118];
  v121 = v296(&v80[v118], 1, v51);
  v122 = v296(v120, 1, v51);
  if (v121)
  {
    v123 = v300;
    if (!v122)
    {
      (*(void (**)(char *, char *, uint64_t))(v291 + 32))(v119, v120, v51);
      v123 = v300;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v291 + 56))(v119, 0, 1, v51);
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  v123 = v300;
  if (v122)
  {
    (*(void (**)(char *, uint64_t))(v291 + 8))(v119, v51);
LABEL_52:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    goto LABEL_53;
  }
  (*(void (**)(char *, char *, uint64_t))(v291 + 40))(v119, v120, v51);
LABEL_53:
  v125 = v17[21];
  v126 = *(void **)&v80[v125];
  *(_QWORD *)&v80[v125] = *(_QWORD *)&v81[v125];

  v127 = v17[22];
  v128 = &v80[v127];
  v129 = &v81[v127];
  v130 = v123(&v80[v127], 1, v21);
  v131 = v123(v129, 1, v21);
  if (v130)
  {
    v132 = v297;
    if (!v131)
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 32))(v128, v129, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v128, 0, 1, v21);
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  v132 = v297;
  if (v131)
  {
    (*(void (**)(char *, uint64_t))(v301 + 8))(v128, v21);
LABEL_58:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
    goto LABEL_59;
  }
  (*(void (**)(char *, char *, uint64_t))(v301 + 40))(v128, v129, v21);
LABEL_59:
  ((void (*)(char *, char *, uint64_t))v292)((char *)v76 + v285[6], &v286[v285[6]], v293);
  v134 = v285[7];
  v135 = (char *)v76 + v134;
  v136 = &v286[v134];
  ((void (*)(char *, char *, uint64_t))v292)((char *)v76 + v134, &v286[v134], v293);
  v137 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v138 = *(void **)&v135[v137];
  *(_QWORD *)&v135[v137] = *(_QWORD *)&v136[v137];

  v139 = v285[8];
  v140 = (char *)v76 + v139;
  v141 = &v286[v139];
  ((void (*)(char *, char *, uint64_t))v292)((char *)v76 + v139, &v286[v139], v293);
  v142 = type metadata accessor for MedicalIDWeightFormatter();
  v143 = *(int *)(v142 + 20);
  v144 = *(void **)&v140[v143];
  *(_QWORD *)&v140[v143] = *(_QWORD *)&v141[v143];

  v145 = *(int *)(v142 + 24);
  v146 = *(void **)&v140[v145];
  *(_QWORD *)&v140[v145] = *(_QWORD *)&v141[v145];

  v147 = v294[10];
  v148 = (char *)v132 + v147;
  v149 = (void **)((char *)v298 + v147);
  v150 = *(uint64_t *)((char *)v298 + v147 + 8);
  *(_QWORD *)v148 = *(void **)((char *)v298 + v147);
  *((_QWORD *)v148 + 1) = v150;
  swift_bridgeObjectRelease();
  *((_QWORD *)v148 + 2) = v149[2];
  swift_bridgeObjectRelease();
  v151 = v149[4];
  *((_QWORD *)v148 + 3) = v149[3];
  *((_QWORD *)v148 + 4) = v151;
  swift_bridgeObjectRelease();
  v152 = v149[6];
  *((_QWORD *)v148 + 5) = v149[5];
  *((_QWORD *)v148 + 6) = v152;
  swift_bridgeObjectRelease();
  v153 = v149[8];
  *((_QWORD *)v148 + 7) = v149[7];
  *((_QWORD *)v148 + 8) = v153;
  swift_bridgeObjectRelease();
  v154 = v149[10];
  *((_QWORD *)v148 + 9) = v149[9];
  *((_QWORD *)v148 + 10) = v154;
  swift_bridgeObjectRelease();
  v155 = (void *)*((_QWORD *)v148 + 12);
  v156 = v149[12];
  *((_QWORD *)v148 + 11) = v149[11];
  *((_QWORD *)v148 + 12) = v156;

  v157 = (void *)*((_QWORD *)v148 + 13);
  *((_QWORD *)v148 + 13) = v149[13];

  v158 = v17[13];
  v159 = &v148[v158];
  v160 = (char *)v149 + v158;
  LODWORD(v141) = v123(&v148[v158], 1, v21);
  v161 = v123(v160, 1, v21);
  if ((_DWORD)v141)
  {
    if (!v161)
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 32))(v159, v160, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v159, 0, 1, v21);
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if (v161)
  {
    (*(void (**)(char *, uint64_t))(v301 + 8))(v159, v21);
LABEL_64:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_65;
  }
  (*(void (**)(char *, char *, uint64_t))(v301 + 40))(v159, v160, v21);
LABEL_65:
  v163 = v17[14];
  v164 = &v148[v163];
  v165 = (char *)v149 + v163;
  v166 = v123(&v148[v163], 1, v21);
  v167 = v123(v165, 1, v21);
  if (v166)
  {
    if (!v167)
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 32))(v164, v165, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v164, 0, 1, v21);
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v167)
  {
    (*(void (**)(char *, uint64_t))(v301 + 8))(v164, v21);
LABEL_70:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
    goto LABEL_71;
  }
  (*(void (**)(char *, char *, uint64_t))(v301 + 40))(v164, v165, v21);
LABEL_71:
  v169 = v17[15];
  v170 = &v148[v169];
  v171 = (_QWORD *)((char *)v149 + v169);
  v173 = *v171;
  v172 = v171[1];
  *(_QWORD *)v170 = v173;
  *((_QWORD *)v170 + 1) = v172;
  swift_bridgeObjectRelease();
  v174 = v17[16];
  v175 = &v148[v174];
  v176 = (_QWORD *)((char *)v149 + v174);
  v178 = *v176;
  v177 = v176[1];
  *(_QWORD *)v175 = v178;
  *((_QWORD *)v175 + 1) = v177;
  swift_bridgeObjectRelease();
  v148[v17[17]] = *((_BYTE *)v149 + v17[17]);
  v148[v17[18]] = *((_BYTE *)v149 + v17[18]);
  v179 = v17[19];
  v180 = (uint64_t)&v148[v179];
  v181 = (char *)v149 + v179;
  v182 = *(_QWORD *)&v148[v179 + 8];
  if (v182 >> 60 == 15)
  {
LABEL_74:
    *(_OWORD *)v180 = *(_OWORD *)v181;
    goto LABEL_76;
  }
  v183 = *((_QWORD *)v181 + 1);
  if (v183 >> 60 == 15)
  {
    sub_2415A1B38(v180);
    goto LABEL_74;
  }
  v184 = *(_QWORD *)v180;
  *(_QWORD *)v180 = *(_QWORD *)v181;
  *(_QWORD *)(v180 + 8) = v183;
  sub_2415A0DAC(v184, v182);
LABEL_76:
  v185 = v17[20];
  v186 = &v148[v185];
  v187 = (char *)v149 + v185;
  v188 = v296(&v148[v185], 1, v299);
  v189 = v296(v187, 1, v299);
  if (v188)
  {
    v190 = v300;
    if (!v189)
    {
      (*(void (**)(char *, char *, uint64_t))(v291 + 32))(v186, v187, v299);
      v190 = v300;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v291 + 56))(v186, 0, 1, v299);
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  v190 = v300;
  if (v189)
  {
    (*(void (**)(char *, uint64_t))(v291 + 8))(v186, v299);
LABEL_81:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
    goto LABEL_82;
  }
  (*(void (**)(char *, char *, uint64_t))(v291 + 40))(v186, v187, v299);
LABEL_82:
  v192 = v17[21];
  v193 = *(void **)&v148[v192];
  *(_QWORD *)&v148[v192] = *(_QWORD *)((char *)v149 + v192);

  v194 = v17[22];
  v195 = &v148[v194];
  v196 = (char *)v149 + v194;
  v197 = v190(&v148[v194], 1, v21);
  v198 = v190(v196, 1, v21);
  if (v197)
  {
    if (!v198)
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 32))(v195, v196, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v195, 0, 1, v21);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v198)
  {
    (*(void (**)(char *, uint64_t))(v301 + 8))(v195, v21);
LABEL_87:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v195, v196, *(_QWORD *)(*(_QWORD *)(v199 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v301 + 40))(v195, v196, v21);
LABEL_88:
  v200 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v289)(&v148[v200[5]], (char *)v149 + v200[5], v290);
  ((void (*)(char *, char *, uint64_t))v292)(&v148[v200[6]], (char *)v149 + v200[6], v293);
  v201 = v200[7];
  v202 = *(void **)&v148[v201];
  *(_QWORD *)&v148[v201] = *(_QWORD *)((char *)v149 + v201);

  v203 = v200[8];
  v204 = *(void **)&v148[v203];
  *(_QWORD *)&v148[v203] = *(_QWORD *)((char *)v149 + v203);

  v205 = v200[9];
  v206 = &v148[v205];
  v207 = (_QWORD *)((char *)v149 + v205);
  v209 = *v207;
  v208 = v207[1];
  *(_QWORD *)v206 = v209;
  *((_QWORD *)v206 + 1) = v208;
  swift_bridgeObjectRelease();
  v210 = v294[11];
  v211 = (char *)v297 + v210;
  v212 = (char *)v298 + v210;
  v213 = *(void **)((char *)v297 + v210);
  *(void **)((char *)v297 + v210) = *(void **)((char *)v298 + v210);

  v214 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v289)(&v211[*(int *)(v214 + 20)], &v212[*(int *)(v214 + 20)], v290);
  ((void (*)(char *, char *, uint64_t))v292)(&v211[*(int *)(v214 + 24)], &v212[*(int *)(v214 + 24)], v293);
  v215 = v294[12];
  v216 = (char *)v297 + v215;
  v217 = (char *)v298 + v215;
  v218 = *(uint64_t *)((char *)v298 + v215 + 8);
  *(_QWORD *)v216 = *(void **)((char *)v298 + v215);
  *((_QWORD *)v216 + 1) = v218;
  swift_bridgeObjectRelease();
  v287 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v219 = v287[5];
  v220 = &v216[v219];
  v295 = v217;
  v221 = &v217[v219];
  v222 = *(_QWORD *)&v217[v219 + 8];
  *(_QWORD *)v220 = *(_QWORD *)&v217[v219];
  *((_QWORD *)v220 + 1) = v222;
  swift_bridgeObjectRelease();
  *((_QWORD *)v220 + 2) = *((_QWORD *)v221 + 2);
  swift_bridgeObjectRelease();
  v223 = *((_QWORD *)v221 + 4);
  *((_QWORD *)v220 + 3) = *((_QWORD *)v221 + 3);
  *((_QWORD *)v220 + 4) = v223;
  swift_bridgeObjectRelease();
  v224 = *((_QWORD *)v221 + 6);
  *((_QWORD *)v220 + 5) = *((_QWORD *)v221 + 5);
  *((_QWORD *)v220 + 6) = v224;
  swift_bridgeObjectRelease();
  v225 = *((_QWORD *)v221 + 8);
  *((_QWORD *)v220 + 7) = *((_QWORD *)v221 + 7);
  *((_QWORD *)v220 + 8) = v225;
  swift_bridgeObjectRelease();
  v226 = *((_QWORD *)v221 + 10);
  *((_QWORD *)v220 + 9) = *((_QWORD *)v221 + 9);
  *((_QWORD *)v220 + 10) = v226;
  swift_bridgeObjectRelease();
  v227 = (void *)*((_QWORD *)v220 + 12);
  v228 = *((_QWORD *)v221 + 12);
  *((_QWORD *)v220 + 11) = *((_QWORD *)v221 + 11);
  *((_QWORD *)v220 + 12) = v228;

  v229 = (void *)*((_QWORD *)v220 + 13);
  *((_QWORD *)v220 + 13) = *((_QWORD *)v221 + 13);

  v230 = v17[13];
  v231 = &v220[v230];
  v232 = &v221[v230];
  v233 = v300(&v220[v230], 1, v21);
  v234 = v300(v232, 1, v21);
  if (v233)
  {
    if (!v234)
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 32))(v231, v232, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v231, 0, 1, v21);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v234)
  {
    (*(void (**)(char *, uint64_t))(v301 + 8))(v231, v21);
LABEL_93:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v231, v232, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v301 + 40))(v231, v232, v21);
LABEL_94:
  v236 = v17[14];
  v237 = &v220[v236];
  v238 = &v221[v236];
  v239 = v300(&v220[v236], 1, v21);
  v240 = v300(v238, 1, v21);
  if (v239)
  {
    if (!v240)
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 32))(v237, v238, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v237, 0, 1, v21);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v240)
  {
    (*(void (**)(char *, uint64_t))(v301 + 8))(v237, v21);
LABEL_99:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v237, v238, *(_QWORD *)(*(_QWORD *)(v241 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v301 + 40))(v237, v238, v21);
LABEL_100:
  v242 = v17[15];
  v243 = &v220[v242];
  v244 = (uint64_t *)&v221[v242];
  v246 = *v244;
  v245 = v244[1];
  *(_QWORD *)v243 = v246;
  *((_QWORD *)v243 + 1) = v245;
  swift_bridgeObjectRelease();
  v247 = v17[16];
  v248 = &v220[v247];
  v249 = (uint64_t *)&v221[v247];
  v251 = *v249;
  v250 = v249[1];
  *(_QWORD *)v248 = v251;
  *((_QWORD *)v248 + 1) = v250;
  swift_bridgeObjectRelease();
  v220[v17[17]] = v221[v17[17]];
  v220[v17[18]] = v221[v17[18]];
  v252 = v17[19];
  v253 = (uint64_t)&v220[v252];
  v254 = &v221[v252];
  v255 = *(_QWORD *)&v220[v252 + 8];
  if (v255 >> 60 == 15)
  {
LABEL_103:
    *(_OWORD *)v253 = *(_OWORD *)v254;
    goto LABEL_105;
  }
  v256 = *((_QWORD *)v254 + 1);
  if (v256 >> 60 == 15)
  {
    sub_2415A1B38(v253);
    goto LABEL_103;
  }
  v257 = *(_QWORD *)v253;
  *(_QWORD *)v253 = *(_QWORD *)v254;
  *(_QWORD *)(v253 + 8) = v256;
  sub_2415A0DAC(v257, v255);
LABEL_105:
  v258 = v17[20];
  v259 = &v220[v258];
  v260 = &v221[v258];
  v261 = v296(&v220[v258], 1, v299);
  v262 = v296(v260, 1, v299);
  if (v261)
  {
    v263 = v300;
    if (!v262)
    {
      (*(void (**)(char *, char *, uint64_t))(v291 + 32))(v259, v260, v299);
      v263 = v300;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v291 + 56))(v259, 0, 1, v299);
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  v263 = v300;
  if (v262)
  {
    (*(void (**)(char *, uint64_t))(v291 + 8))(v259, v299);
LABEL_110:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v264 - 8) + 64));
    goto LABEL_111;
  }
  (*(void (**)(char *, char *, uint64_t))(v291 + 40))(v259, v260, v299);
LABEL_111:
  v265 = v17[21];
  v266 = *(void **)&v220[v265];
  *(_QWORD *)&v220[v265] = *(_QWORD *)&v221[v265];

  v267 = v17[22];
  v268 = &v220[v267];
  v269 = &v221[v267];
  v270 = v263(&v220[v267], 1, v21);
  v271 = v263(v269, 1, v21);
  if (v270)
  {
    if (!v271)
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 32))(v268, v269, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v268, 0, 1, v21);
      goto LABEL_117;
    }
    goto LABEL_116;
  }
  if (v271)
  {
    (*(void (**)(char *, uint64_t))(v301 + 8))(v268, v21);
LABEL_116:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v268, v269, *(_QWORD *)(*(_QWORD *)(v272 - 8) + 64));
    goto LABEL_117;
  }
  (*(void (**)(char *, char *, uint64_t))(v301 + 40))(v268, v269, v21);
LABEL_117:
  ((void (*)(char *, char *, uint64_t))v289)(&v216[v287[6]], &v295[v287[6]], v290);
  ((void (*)(char *, char *, uint64_t))v292)(&v216[v287[7]], &v295[v287[7]], v293);
  *(_QWORD *)&v216[v287[8]] = *(_QWORD *)&v295[v287[8]];
  swift_release();
  v273 = v287[9];
  v274 = &v216[v273];
  v275 = &v295[v273];
  v276 = v263(&v216[v273], 1, v21);
  v277 = v263(v275, 1, v21);
  if (!v276)
  {
    if (!v277)
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 40))(v274, v275, v21);
      goto LABEL_123;
    }
    (*(void (**)(char *, uint64_t))(v301 + 8))(v274, v21);
    goto LABEL_122;
  }
  if (v277)
  {
LABEL_122:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v274, v275, *(_QWORD *)(*(_QWORD *)(v278 - 8) + 64));
    goto LABEL_123;
  }
  (*(void (**)(char *, char *, uint64_t))(v301 + 32))(v274, v275, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v274, 0, 1, v21);
LABEL_123:
  *(void **)((char *)v297 + a3[5]) = *(void **)((char *)v298 + a3[5]);
  swift_release();
  v279 = a3[7];
  *((_BYTE *)v297 + a3[6]) = *((_BYTE *)v298 + a3[6]);
  v280 = *(void **)((char *)v297 + v279);
  *(void **)((char *)v297 + v279) = *(void **)((char *)v298 + v279);

  v281 = a3[8];
  v282 = (char *)v297 + v281;
  v283 = (char *)v298 + v281;
  *(void **)((char *)v297 + v281) = *(void **)((char *)v298 + v281);
  swift_release();
  *((_QWORD *)v282 + 1) = *((_QWORD *)v283 + 1);
  swift_release();
  v282[16] = v283[16];
  return v297;
}

uint64_t sub_2416993D4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416993E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MedicalIDDataViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_24169945C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_241699468(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDDataViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t _s15SectionGridItemVMa()
{
  uint64_t result;

  result = qword_25713FC78;
  if (!qword_25713FC78)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24169951C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MedicalIDDataViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2416995B4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2416995C4(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

void sub_241699624(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[16];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v85 = a1;
  v70 = type metadata accessor for MedicalIDMedicalNotesCellView();
  v1 = MEMORY[0x24BDAC7A8](v70);
  v54[10] = (char *)v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v54[11] = (char *)v54 - v3;
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380];
  sub_2415D8800(0, &qword_25713FCC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDMedicalConditionsCellView, v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
  v54[12] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v67 = (char *)v54 - v7;
  sub_24169B8F0(0);
  v72 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v68 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for MedicalIDMedicalConditionsCellView();
  MEMORY[0x24BDAC7A8](v66);
  v54[9] = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MedicalIDBiometricsViewModel();
  MEMORY[0x24BDAC7A8](v11);
  v54[6] = (char *)v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for MedicalIDBiometricsCell();
  MEMORY[0x24BDAC7A8](v65);
  v54[8] = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415D8800(0, &qword_25713FCD0, (uint64_t (*)(uint64_t))sub_24169B914, (uint64_t (*)(uint64_t))sub_24169B8F0, v4);
  v71 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v80 = (char *)v54 - v15;
  sub_2415D8800(0, &qword_25713FCE0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEmergencyContactsCellView, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDBiometricsCell, v4);
  v62 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v63 = (char *)v54 - v17;
  sub_24169B914(0);
  v79 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v64 = (char *)v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24169B938(0);
  v84 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v73 = (char *)v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for MedicalIDData();
  MEMORY[0x24BDAC7A8](v22);
  v54[4] = (char *)v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415A6FC4(0);
  MEMORY[0x24BDAC7A8](v24);
  v54[3] = (char *)v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for MedicalIDEmergencyContactsCellView();
  MEMORY[0x24BDAC7A8](v61);
  v54[7] = (char *)v54 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for MedicalIDAllergiesCellView();
  MEMORY[0x24BDAC7A8](v59);
  v54[5] = (char *)v54 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415D8800(0, &qword_25713FCF0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDMedicationsCellView, v28, v4);
  v56 = v29;
  MEMORY[0x24BDAC7A8](v29);
  v58 = (char *)v54 - v30;
  sub_24169B95C(0);
  v78 = v31;
  MEMORY[0x24BDAC7A8](v31);
  v60 = (char *)v54 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v34 = MEMORY[0x24BDAC7A8](v33);
  v54[0] = (char *)v54 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v69 = (char *)v54 - v36;
  v55 = type metadata accessor for MedicalIDMedicationsCellView();
  MEMORY[0x24BDAC7A8](v55);
  v54[2] = (char *)v54 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x24BDAC7A8](v38);
  v57 = type metadata accessor for MedicalIDPregnancyCellView();
  MEMORY[0x24BDAC7A8](v57);
  v54[1] = (char *)v54 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415D8800(0, &qword_25713FD00, (uint64_t (*)(uint64_t))sub_24169B980, (uint64_t (*)(uint64_t))sub_24169B938, v4);
  v82 = v40;
  MEMORY[0x24BDAC7A8](v40);
  v81 = (char *)v54 - v41;
  sub_2415D8800(0, &qword_25713FD18, (uint64_t (*)(uint64_t))sub_24169B9A4, (uint64_t (*)(uint64_t))sub_24169B95C, v4);
  v74 = v42;
  MEMORY[0x24BDAC7A8](v42);
  v76 = (char *)v54 - v43;
  sub_2415D8800(0, &qword_25713FD20, type metadata accessor for MedicalIDPersonalInformationCellView, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDPregnancyCellView, v4);
  v54[13] = v44;
  MEMORY[0x24BDAC7A8](v44);
  v54[14] = (char *)v54 - v45;
  sub_24169B9A4(0);
  v75 = v46;
  MEMORY[0x24BDAC7A8](v46);
  v54[15] = (char *)v54 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24169B980(0);
  v83 = v48;
  MEMORY[0x24BDAC7A8](v48);
  v77 = (char *)v54 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = _s15SectionGridItemVMa();
  v51 = MEMORY[0x24BDAC7A8](v50);
  MEMORY[0x24BDAC7A8](v51);
  v52 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  MEMORY[0x24BDAC7A8](v52);
  v53 = type metadata accessor for MedicalIDPersonalInformationCellView(0);
  MEMORY[0x24BDAC7A8](v53);
  __asm { BR              X10 }
}

uint64_t sub_241699E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;

  v7 = type metadata accessor for MedicalIDDataViewModel();
  sub_2415BEF64(v3 + *(int *)(v7 + 40), v0, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
  sub_2415BEF64(v3, v5, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  v8 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v9 = swift_allocObject();
  sub_2415A85BC(v5, v9 + v8, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  v10 = (uint64_t *)(v4 + *(int *)(v1 + 24));
  sub_2415C0788(0, (unint64_t *)&qword_25713A430);
  sub_2415BEF08();
  *v10 = sub_2416BA270();
  v10[1] = v11;
  sub_2415A85BC(v0, v4, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
  v12 = (uint64_t (**)())(v4 + *(int *)(v1 + 20));
  *v12 = sub_24169C624;
  v12[1] = (uint64_t (*)())v9;
  sub_2415BEF64(v4, *(_QWORD *)(v6 - 384), type metadata accessor for MedicalIDPersonalInformationCellView);
  swift_storeEnumTagMultiPayload();
  sub_24159CE88(&qword_25713FD68, type metadata accessor for MedicalIDPersonalInformationCellView, (uint64_t)&unk_2416BE520);
  sub_24159CE88(&qword_25713FD70, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDPregnancyCellView, (uint64_t)&unk_2416C08E8);
  v13 = *(_QWORD *)(v6 - 376);
  sub_2416BA57C();
  sub_2415BEF64(v13, *(_QWORD *)(v6 - 200), (uint64_t (*)(_QWORD))sub_24169B9A4);
  swift_storeEnumTagMultiPayload();
  sub_24169BBC8();
  sub_24169BC60();
  v14 = *(_QWORD *)(v6 - 192);
  sub_2416BA57C();
  sub_2415A6154(v13, (uint64_t (*)(_QWORD))sub_24169B9A4);
  sub_2415BEF64(v14, *(_QWORD *)(v6 - 160), (uint64_t (*)(_QWORD))sub_24169B980);
  swift_storeEnumTagMultiPayload();
  sub_24169BBA4();
  sub_24169BCF8();
  sub_2416BA57C();
  sub_2415A6154(v14, (uint64_t (*)(_QWORD))sub_24169B980);
  return sub_2415A6154(v4, type metadata accessor for MedicalIDPersonalInformationCellView);
}

void sub_24169AAF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  uint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = 0x4E6C61636964654DLL;
  v5 = type metadata accessor for MedicalIDDataViewModel();
  v6 = *(_QWORD *)(v3 - 496);
  sub_2415BEF64(v2 + *(int *)(v5 + 44), v6, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDMedicalInfoViewModel);
  sub_2415BEF64(v2, v0, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  v7 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v8 = swift_allocObject();
  sub_2415A85BC(v0, v8 + v7, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  v9 = *(_QWORD *)(v3 - 416);
  sub_2415A85BC(v6, v9, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDMedicalInfoViewModel);
  v10 = (uint64_t (**)())(v9 + *(int *)(*(_QWORD *)(v3 - 248) + 20));
  *v10 = sub_24169B9CC;
  v10[1] = (uint64_t (*)())v8;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v11 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v11 + 40) = 0xE900000000000044;
  v12 = 0xEC0000007365746FLL;
  strcpy((char *)(v11 + 48), "MedicalNotes");
  *(_BYTE *)(v11 + 61) = 0;
  *(_WORD *)(v11 + 62) = -5120;
  v13 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v14 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v14)
  {
    v4 = sub_2416BB128();
    v12 = v15;

  }
  v16 = *(_QWORD *)(v3 - 160);
  v17 = *(_QWORD *)(v3 - 224);
  v18 = (uint64_t *)(v9 + *(int *)(*(_QWORD *)(v3 - 248) + 24));
  *v18 = v4;
  v18[1] = v12;
  v19 = v9;
  v20 = *(_QWORD *)(v3 - 408);
  sub_2415A85BC(v19, v20, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDMedicalNotesCellView);
  sub_2415BEF64(v20, *(_QWORD *)(v3 - 272), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDMedicalNotesCellView);
  swift_storeEnumTagMultiPayload();
  sub_24159CE88(&qword_25713FD28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDMedicalConditionsCellView, (uint64_t)&unk_2416C14F4);
  sub_24159CE88(&qword_25713FD30, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDMedicalNotesCellView, (uint64_t)&unk_2416C2238);
  v21 = *(_QWORD *)(v3 - 264);
  sub_2416BA57C();
  sub_2415BEF64(v21, *(_QWORD *)(v3 - 168), (uint64_t (*)(_QWORD))sub_24169B8F0);
  swift_storeEnumTagMultiPayload();
  sub_24169BA74();
  sub_24169BB0C();
  sub_2416BA57C();
  sub_2415A6154(v21, (uint64_t (*)(_QWORD))sub_24169B8F0);
  sub_2415BEF64(v17, v16, (uint64_t (*)(_QWORD))sub_24169B938);
  swift_storeEnumTagMultiPayload();
  sub_24169BBA4();
  sub_24169BCF8();
  sub_2416BA57C();
  JUMPOUT(0x24169AABCLL);
}

uint64_t sub_24169ADF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = _s15SectionGridItemVMa();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEF64(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = v6 + v4;
  v8 = swift_allocObject();
  sub_2415A85BC((uint64_t)v5, v8 + v6, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  *(_BYTE *)(v8 + v7) = 0;
  sub_24169B7C8((uint64_t)sub_24169C670, v8);
  return swift_release();
}

uint64_t sub_24169AEC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = _s15SectionGridItemVMa();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEF64(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = v6 + v4;
  v8 = swift_allocObject();
  sub_2415A85BC((uint64_t)v5, v8 + v6, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  *(_BYTE *)(v8 + v7) = 1;
  sub_24169B7C8((uint64_t)sub_24169C670, v8);
  return swift_release();
}

uint64_t sub_24169AF98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = _s15SectionGridItemVMa();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEF64(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = v6 + v4;
  v8 = swift_allocObject();
  sub_2415A85BC((uint64_t)v5, v8 + v6, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  *(_BYTE *)(v8 + v7) = 2;
  sub_24169B7C8((uint64_t)sub_24169C670, v8);
  return swift_release();
}

uint64_t sub_24169B06C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = _s15SectionGridItemVMa();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEF64(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = v6 + v4;
  v8 = swift_allocObject();
  sub_2415A85BC((uint64_t)v5, v8 + v6, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  *(_BYTE *)(v8 + v7) = 3;
  sub_24169B7C8((uint64_t)sub_24169C670, v8);
  return swift_release();
}

uint64_t sub_24169B140(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = _s15SectionGridItemVMa();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEF64(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = v6 + v4;
  v8 = swift_allocObject();
  sub_2415A85BC((uint64_t)v5, v8 + v6, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  *(_BYTE *)(v8 + v7) = 4;
  sub_24169B7C8((uint64_t)sub_24169C670, v8);
  return swift_release();
}

uint64_t sub_24169B214(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = _s15SectionGridItemVMa();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEF64(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = v6 + v4;
  v8 = swift_allocObject();
  sub_2415A85BC((uint64_t)v5, v8 + v6, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  *(_BYTE *)(v8 + v7) = 5;
  sub_24169B7C8((uint64_t)sub_24169C670, v8);
  return swift_release();
}

uint64_t sub_24169B2E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = _s15SectionGridItemVMa();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEF64(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = v6 + v4;
  v8 = swift_allocObject();
  sub_2415A85BC((uint64_t)v5, v8 + v6, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  *(_BYTE *)(v8 + v7) = 6;
  sub_24169B7C8((uint64_t)sub_24169C670, v8);
  return swift_release();
}

uint64_t sub_24169B3BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = _s15SectionGridItemVMa();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEF64(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = v6 + v4;
  v8 = swift_allocObject();
  sub_2415A85BC((uint64_t)v5, v8 + v6, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  *(_BYTE *)(v8 + v7) = 7;
  sub_24169B7C8((uint64_t)sub_24169C670, v8);
  return swift_release();
}

uint64_t sub_24169B490(char a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29[2];
  char v30;
  uint64_t v31;

  v8 = sub_2416B9D6C();
  v9 = *(_QWORD *)(v8 - 8);
  result = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v13 = a3 + *(int *)(_s15SectionGridItemVMa() + 32);
    v14 = *(_QWORD *)v13;
    v15 = *(_QWORD *)(v13 + 8);
    LOBYTE(v13) = *(_BYTE *)(v13 + 16);
    v29[0] = v14;
    v29[1] = v15;
    v30 = v13;
    LOBYTE(v31) = a4;
    sub_24169C6B0();
    return sub_2416BAE1C();
  }
  else if (a2)
  {
    v16 = a2;
    if (qword_2571395C0 != -1)
      swift_once();
    v17 = __swift_project_value_buffer(v8, (uint64_t)qword_257147810);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v17, v8);
    v18 = a2;
    v19 = a2;
    v20 = sub_2416B9D54();
    v21 = sub_2416BB38C();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v27 = (_QWORD *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v29[0] = v28;
      *(_DWORD *)v22 = 136315650;
      v31 = sub_2415A8600(0x476E6F6974636553, 0xEF6D657449646972, v29);
      sub_2416BB44C();
      *(_WORD *)(v22 + 12) = 2080;
      v31 = sub_2415A8600(0xD000000000000014, 0x80000002416C6500, v29);
      sub_2416BB44C();
      *(_WORD *)(v22 + 22) = 2112;
      v23 = a2;
      v24 = _swift_stdlib_bridgeErrorToNSError();
      v31 = v24;
      sub_2416BB44C();
      v25 = v27;
      *v27 = v24;

      _os_log_impl(&dword_241599000, v20, v21, "[%s.%s] Authentication failed: %@", (uint8_t *)v22, 0x20u);
      sub_24168161C();
      swift_arrayDestroy();
      MEMORY[0x242699570](v25, -1, -1);
      v26 = v28;
      swift_arrayDestroy();
      MEMORY[0x242699570](v26, -1, -1);
      MEMORY[0x242699570](v22, -1, -1);

    }
    else
    {

    }
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  return result;
}

void sub_24169B7C8(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[6];

  v4 = objc_msgSend((id)objc_opt_self(), sel_applicationWithBundleIdentifier_, *MEMORY[0x24BDD4608]);
  v5 = objc_msgSend((id)objc_opt_self(), sel_sharedGuard);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v8[4] = sub_2415DFDC8;
  v8[5] = v6;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1107296256;
  v8[2] = sub_2416995C4;
  v8[3] = &block_descriptor_7;
  v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_authenticateForSubject_completion_, v4, v7);
  _Block_release(v7);

}

void sub_24169B8F0(uint64_t a1)
{
  sub_2415D8800(a1, &qword_25713FCC8, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDMedicalConditionsCellView, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDMedicalNotesCellView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
}

void sub_24169B914(uint64_t a1)
{
  sub_2415D8800(a1, &qword_25713FCD8, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEmergencyContactsCellView, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDBiometricsCell, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
}

void sub_24169B938(uint64_t a1)
{
  sub_2415D8800(a1, &qword_25713FCE8, (uint64_t (*)(uint64_t))sub_24169B914, (uint64_t (*)(uint64_t))sub_24169B8F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
}

void sub_24169B95C(uint64_t a1)
{
  sub_2415D8800(a1, &qword_25713FCF8, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDMedicationsCellView, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDAllergiesCellView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
}

void sub_24169B980(uint64_t a1)
{
  sub_2415D8800(a1, &qword_25713FD08, (uint64_t (*)(uint64_t))sub_24169B9A4, (uint64_t (*)(uint64_t))sub_24169B95C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
}

void sub_24169B9A4(uint64_t a1)
{
  sub_2415D8800(a1, &qword_25713FD10, type metadata accessor for MedicalIDPersonalInformationCellView, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDPregnancyCellView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
}

uint64_t sub_24169B9CC()
{
  return sub_24169C630(sub_24169B3BC);
}

uint64_t sub_24169B9D8()
{
  return sub_2416BA2B8();
}

uint64_t sub_24169B9F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_2416BA144();
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_2416BA2C4();
}

unint64_t sub_24169BA74()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713FD38;
  if (!qword_25713FD38)
  {
    sub_24169B914(255);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713FD40, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEmergencyContactsCellView, (uint64_t)&unk_2416BE6E8);
    v3[1] = sub_24159CE88(&qword_25713FD48, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDBiometricsCell, (uint64_t)&unk_2416C3828);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713FD38);
  }
  return result;
}

unint64_t sub_24169BB0C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713FD50;
  if (!qword_25713FD50)
  {
    sub_24169B8F0(255);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713FD28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDMedicalConditionsCellView, (uint64_t)&unk_2416C14F4);
    v3[1] = sub_24159CE88(&qword_25713FD30, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDMedicalNotesCellView, (uint64_t)&unk_2416C2238);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713FD50);
  }
  return result;
}

uint64_t sub_24169BBA4()
{
  return sub_2415D8BC0(&qword_25713FD58, (uint64_t (*)(uint64_t))sub_24169B980, (uint64_t (*)(void))sub_24169BBC8, (uint64_t (*)(void))sub_24169BC60);
}

unint64_t sub_24169BBC8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713FD60;
  if (!qword_25713FD60)
  {
    sub_24169B9A4(255);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713FD68, type metadata accessor for MedicalIDPersonalInformationCellView, (uint64_t)&unk_2416BE520);
    v3[1] = sub_24159CE88(&qword_25713FD70, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDPregnancyCellView, (uint64_t)&unk_2416C08E8);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713FD60);
  }
  return result;
}

unint64_t sub_24169BC60()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713FD78;
  if (!qword_25713FD78)
  {
    sub_24169B95C(255);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713FD80, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDMedicationsCellView, (uint64_t)&unk_2416BF8F0);
    v3[1] = sub_24159CE88(&qword_25713FD88, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDAllergiesCellView, (uint64_t)&unk_2416C369C);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713FD78);
  }
  return result;
}

uint64_t sub_24169BCF8()
{
  return sub_2415D8BC0(&qword_25713FD90, (uint64_t (*)(uint64_t))sub_24169B938, (uint64_t (*)(void))sub_24169BA74, (uint64_t (*)(void))sub_24169BB0C);
}

uint64_t sub_24169BD20()
{
  return sub_24169C630(sub_24169B2E8);
}

uint64_t sub_24169BD30()
{
  return sub_24169C630(sub_24169B214);
}

uint64_t sub_24169BD3C()
{
  return sub_2416BA2B8();
}

uint64_t sub_24169BD6C()
{
  return sub_24169C630(sub_24169B140);
}

uint64_t sub_24169BD7C()
{
  return sub_24169C630(sub_24169B06C);
}

uint64_t sub_24169BD8C()
{
  return sub_24169C630(sub_24169AF98);
}

uint64_t sub_24169BD9C()
{
  return sub_24169C630(sub_24169AEC4);
}

uint64_t objectdestroyTm_23()
{
  uint64_t v0;
  id *v1;
  int *v2;
  id *v3;
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  id *v30;
  char *v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int *v37;
  id *v38;
  uint64_t v39;
  char *v40;
  int *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *);
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;

  v51 = _s15SectionGridItemVMa();
  v1 = (id *)(v0
            + ((*(unsigned __int8 *)(*(_QWORD *)(v51 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v51 - 8) + 80)));

  v2 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v3 = (id *)((char *)v1 + v2[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = (int *)type metadata accessor for MedicalIDData();
  v5 = (char *)v3 + v4[13];
  v6 = sub_2416B9B50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v9 = (char *)v3 + v4[14];
  if (!v8(v9, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)((char *)v3 + v4[19]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_2415A0DAC(*v10, v11);
  v12 = (char *)v3 + v4[20];
  v13 = sub_2416B9A18();
  v52 = *(_QWORD *)(v13 - 8);
  v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
  if (!v57(v12, 1, v13))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v13);
  v59 = v13;

  v14 = (char *)v3 + v4[22];
  if (!v8(v14, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  v58 = v7;
  v15 = (char *)v1 + v2[6];
  v16 = sub_2416B9C70();
  v53 = *(void (**)(char *))(*(_QWORD *)(v16 - 8) + 8);
  v54 = v16;
  v53(v15);

  v17 = (char *)v1 + v2[8];
  v55 = sub_2416B9C10();
  v56 = *(void (**)(char *))(*(_QWORD *)(v55 - 8) + 8);
  v56(v17);
  v18 = (char *)v1 + v2[9];
  swift_bridgeObjectRelease();
  v19 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v20 = &v18[v19[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v21 = &v20[v4[13]];
  if (!v8(v21, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v21, v6);
  v22 = &v20[v4[14]];
  if (!v8(v22, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v22, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = (uint64_t *)&v20[v4[19]];
  v24 = v23[1];
  if (v24 >> 60 != 15)
    sub_2415A0DAC(*v23, v24);
  v25 = &v20[v4[20]];
  if (!v57(v25, 1, v59))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v25, v59);

  v26 = &v20[v4[22]];
  if (!v8(v26, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v26, v6);
  ((void (*)(char *, uint64_t))v56)(&v18[v19[6]], v55);
  v27 = &v18[v19[7]];
  ((void (*)(char *, uint64_t))v56)(v27, v55);

  v28 = &v18[v19[8]];
  ((void (*)(char *, uint64_t))v56)(v28, v55);
  v29 = type metadata accessor for MedicalIDWeightFormatter();

  v30 = (id *)((char *)v1 + v2[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v31 = (char *)v30 + v4[13];
  if (!v8(v31, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v31, v6);
  v32 = (char *)v30 + v4[14];
  if (!v8(v32, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v32, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = (uint64_t *)((char *)v30 + v4[19]);
  v34 = v33[1];
  if (v34 >> 60 != 15)
    sub_2415A0DAC(*v33, v34);
  v35 = (char *)v30 + v4[20];
  if (!v57(v35, 1, v59))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v35, v59);

  v36 = (char *)v30 + v4[22];
  if (!v8(v36, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v36, v6);
  v37 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v53)((char *)v30 + v37[5], v54);
  ((void (*)(char *, uint64_t))v56)((char *)v30 + v37[6], v55);

  swift_bridgeObjectRelease();
  v38 = (id *)((char *)v1 + v2[11]);

  v39 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v53)((char *)v38 + *(int *)(v39 + 20), v54);
  ((void (*)(char *, uint64_t))v56)((char *)v38 + *(int *)(v39 + 24), v55);
  v40 = (char *)v1 + v2[12];
  swift_bridgeObjectRelease();
  v41 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v42 = &v40[v41[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v43 = &v42[v4[13]];
  if (!v8(v43, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v43, v6);
  v44 = &v42[v4[14]];
  if (!v8(v44, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v44, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v45 = (uint64_t *)&v42[v4[19]];
  v46 = v45[1];
  if (v46 >> 60 != 15)
    sub_2415A0DAC(*v45, v46);
  v47 = &v42[v4[20]];
  if (!v57(v47, 1, v59))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v47, v59);

  v48 = &v42[v4[22]];
  if (!v8(v48, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v48, v6);
  ((void (*)(char *, uint64_t))v53)(&v40[v41[6]], v54);
  ((void (*)(char *, uint64_t))v56)(&v40[v41[7]], v55);
  swift_release();
  v49 = &v40[v41[9]];
  if (!v8(v49, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v49, v6);
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24169C624()
{
  return sub_24169C630(sub_24169ADF4);
}

uint64_t sub_24169C630(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(_s15SectionGridItemVMa() - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_24169C674()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

void sub_24169C6B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713FD98)
  {
    sub_24159D7F0(255, &qword_25713A4F0, (uint64_t)&type metadata for MedicalIDDisplaySection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v0 = sub_2416BAE58();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713FD98);
  }
}

uint64_t objectdestroy_27Tm()
{
  uint64_t v0;
  id *v1;
  int *v2;
  id *v3;
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  id *v30;
  char *v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int *v37;
  id *v38;
  uint64_t v39;
  char *v40;
  int *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *);
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;

  v51 = _s15SectionGridItemVMa();
  v1 = (id *)(v0
            + ((*(unsigned __int8 *)(*(_QWORD *)(v51 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v51 - 8) + 80)));

  v2 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v3 = (id *)((char *)v1 + v2[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = (int *)type metadata accessor for MedicalIDData();
  v5 = (char *)v3 + v4[13];
  v6 = sub_2416B9B50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v9 = (char *)v3 + v4[14];
  if (!v8(v9, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)((char *)v3 + v4[19]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_2415A0DAC(*v10, v11);
  v12 = (char *)v3 + v4[20];
  v13 = sub_2416B9A18();
  v52 = *(_QWORD *)(v13 - 8);
  v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
  if (!v57(v12, 1, v13))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v13);
  v59 = v13;

  v14 = (char *)v3 + v4[22];
  if (!v8(v14, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  v58 = v7;
  v15 = (char *)v1 + v2[6];
  v16 = sub_2416B9C70();
  v53 = *(void (**)(char *))(*(_QWORD *)(v16 - 8) + 8);
  v54 = v16;
  v53(v15);

  v17 = (char *)v1 + v2[8];
  v55 = sub_2416B9C10();
  v56 = *(void (**)(char *))(*(_QWORD *)(v55 - 8) + 8);
  v56(v17);
  v18 = (char *)v1 + v2[9];
  swift_bridgeObjectRelease();
  v19 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v20 = &v18[v19[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v21 = &v20[v4[13]];
  if (!v8(v21, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v21, v6);
  v22 = &v20[v4[14]];
  if (!v8(v22, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v22, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = (uint64_t *)&v20[v4[19]];
  v24 = v23[1];
  if (v24 >> 60 != 15)
    sub_2415A0DAC(*v23, v24);
  v25 = &v20[v4[20]];
  if (!v57(v25, 1, v59))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v25, v59);

  v26 = &v20[v4[22]];
  if (!v8(v26, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v26, v6);
  ((void (*)(char *, uint64_t))v56)(&v18[v19[6]], v55);
  v27 = &v18[v19[7]];
  ((void (*)(char *, uint64_t))v56)(v27, v55);

  v28 = &v18[v19[8]];
  ((void (*)(char *, uint64_t))v56)(v28, v55);
  v29 = type metadata accessor for MedicalIDWeightFormatter();

  v30 = (id *)((char *)v1 + v2[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v31 = (char *)v30 + v4[13];
  if (!v8(v31, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v31, v6);
  v32 = (char *)v30 + v4[14];
  if (!v8(v32, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v32, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = (uint64_t *)((char *)v30 + v4[19]);
  v34 = v33[1];
  if (v34 >> 60 != 15)
    sub_2415A0DAC(*v33, v34);
  v35 = (char *)v30 + v4[20];
  if (!v57(v35, 1, v59))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v35, v59);

  v36 = (char *)v30 + v4[22];
  if (!v8(v36, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v36, v6);
  v37 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v53)((char *)v30 + v37[5], v54);
  ((void (*)(char *, uint64_t))v56)((char *)v30 + v37[6], v55);

  swift_bridgeObjectRelease();
  v38 = (id *)((char *)v1 + v2[11]);

  v39 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v53)((char *)v38 + *(int *)(v39 + 20), v54);
  ((void (*)(char *, uint64_t))v56)((char *)v38 + *(int *)(v39 + 24), v55);
  v40 = (char *)v1 + v2[12];
  swift_bridgeObjectRelease();
  v41 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v42 = &v40[v41[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v43 = &v42[v4[13]];
  if (!v8(v43, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v43, v6);
  v44 = &v42[v4[14]];
  if (!v8(v44, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v44, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v45 = (uint64_t *)&v42[v4[19]];
  v46 = v45[1];
  if (v46 >> 60 != 15)
    sub_2415A0DAC(*v45, v46);
  v47 = &v42[v4[20]];
  if (!v57(v47, 1, v59))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v47, v59);

  v48 = &v42[v4[22]];
  if (!v8(v48, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v48, v6);
  ((void (*)(char *, uint64_t))v53)(&v40[v41[6]], v54);
  ((void (*)(char *, uint64_t))v56)(&v40[v41[7]], v55);
  swift_release();
  v49 = &v40[v41[9]];
  if (!v8(v49, 1, v6))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v49, v6);
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24169CFB4(char a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(_s15SectionGridItemVMa() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_24169B490(a1, a2, v2 + v6, *(_BYTE *)(v2 + v6 + *(_QWORD *)(v5 + 64)));
}

uint64_t sub_24169D00C()
{
  return sub_2415D8BC0(&qword_25713FDA0, (uint64_t (*)(uint64_t))sub_24169D040, sub_24169BBA4, sub_24169BCF8);
}

void sub_24169D040(uint64_t a1)
{
  sub_2415D8800(a1, &qword_25713FDA8, (uint64_t (*)(uint64_t))sub_24169B980, (uint64_t (*)(uint64_t))sub_24169B938, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
}

uint64_t sub_24169D064@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  id v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  void *v45;
  id v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  v60 = a2;
  v61 = a3;
  v62 = a1;
  v5 = (int *)type metadata accessor for MedicalIDEditBiometricsModalView();
  v6 = (_OWORD *)(a4 + v5[5]);
  sub_24159D7F0(0, (unint64_t *)&qword_25713A918, (uint64_t)&type metadata for BasicAlertModel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0;
  sub_2416BAD08();
  v7 = v68;
  *v6 = v67;
  v6[1] = v7;
  v8 = v70;
  v6[2] = v69;
  v6[3] = v8;
  v9 = (uint64_t *)(a4 + v5[6]);
  *v9 = swift_getKeyPath();
  v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v11 = (uint64_t *)(a4 + v5[7]);
  *v11 = swift_getKeyPath();
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], v10);
  swift_storeEnumTagMultiPayload();
  v12 = a4 + v5[8];
  type metadata accessor for MedicalIDDataManager();
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  *(_QWORD *)v12 = sub_2416B9FC4();
  *(_BYTE *)(v12 + 8) = v13 & 1;
  v14 = (uint64_t *)(a4 + v5[9]);
  sub_2415C0788(0, (unint64_t *)&qword_25713A430);
  sub_2415BEF08();
  *v14 = sub_2416BA270();
  v14[1] = v15;
  v16 = a4 + v5[12];
  sub_24169D774(0, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
  v18 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_24169D7CC(0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))((char *)&v55 - v19, 1, 1, v20);
  v58 = v18;
  MEMORY[0x24BDAC7A8](v21);
  v57 = v19;
  sub_24169D820((uint64_t)&v55 - v19, (uint64_t)&v55 - v19, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
  v59 = v16;
  sub_2416BAD08();
  sub_24169D874((uint64_t)&v55 - v19, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
  v22 = a4 + v5[13];
  sub_24169D774(0, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188);
  v24 = *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_24169D7CC(0, &qword_25713A180, (unint64_t *)&qword_25713A188);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))((char *)&v55 - v25, 1, 1, v26);
  MEMORY[0x24BDAC7A8](v27);
  v55 = v25;
  sub_24169D820((uint64_t)&v55 - v25, (uint64_t)&v55 - v25, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188);
  v56 = v22;
  sub_2416BAD08();
  v28 = 0x697274656D6F6942;
  sub_24169D874((uint64_t)&v55 - v25, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188);
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v29 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v29 + 40) = 0xE900000000000044;
  v30 = 0xEA00000000007363;
  *(_QWORD *)(v29 + 48) = 0x697274656D6F6942;
  *(_QWORD *)(v29 + 56) = 0xEA00000000007363;
  v31 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v32 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v32)
  {
    v28 = sub_2416BB128();
    v30 = v33;

  }
  v34 = (uint64_t *)(a4 + v5[15]);
  *v34 = v28;
  v34[1] = v30;
  v35 = a4 + v5[16];
  sub_24169EF9C();
  sub_2416B9F34();
  v36 = *((_QWORD *)&v67 + 1);
  v37 = v68;
  *(_BYTE *)v35 = v67;
  *(_QWORD *)(v35 + 8) = v36;
  *(_BYTE *)(v35 + 16) = v37;
  v38 = v62;
  sub_2415BEF64(v62, a4, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
  v39 = v60;
  v40 = v61;
  *(_QWORD *)(a4 + v5[10]) = v60;
  *(_QWORD *)(a4 + v5[11]) = v40;
  v41 = type metadata accessor for MedicalIDBiometricsViewModel();
  v42 = v38 + *(int *)(v41 + 20);
  v43 = (_QWORD *)(a4 + v5[14]);
  *v43 = *(_QWORD *)(v42 + 88);
  v43[1] = 0;
  MEMORY[0x24BDAC7A8](v41);
  v44 = (char *)&v55 - v55;
  v45 = *(void **)(v42 + 96);
  v46 = v39;
  swift_retain();
  sub_241600A2C(v45, (uint64_t)v44);
  v47 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0];
  v48 = v56;
  sub_24168AA98(v56, (uint64_t)&qword_25713F768, (uint64_t)MEMORY[0x24BDF42C0], (uint64_t (*)(_QWORD))sub_2416A2F58);
  sub_2416A2F58(0, &qword_25713F768, v47);
  *(_QWORD *)(v48 + *(int *)(v49 + 28)) = 0;
  v50 = sub_24169F058((uint64_t)v44, v48, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188);
  MEMORY[0x24BDAC7A8](v50);
  v51 = (char *)&v55 - v57;
  sub_24163863C(*(void **)(v42 + 104), (uint64_t)&v55 - v57);

  swift_release();
  sub_2415A6154(v38, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
  v52 = v59;
  sub_24168AA98(v59, (uint64_t)&qword_25713FDC8, (uint64_t)v47, (uint64_t (*)(_QWORD))sub_24169EFE0);
  sub_24169EFE0(0, &qword_25713FDC8, v47);
  *(_QWORD *)(v52 + *(int *)(v53 + 28)) = 0;
  return sub_24169F058((uint64_t)v51, v52, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
}

uint64_t type metadata accessor for MedicalIDEditBiometricsModalView()
{
  uint64_t result;

  result = qword_25713FE28;
  if (!qword_25713FE28)
    return swift_getSingletonMetadata();
  return result;
}

void sub_24169D774(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_24169D7CC(255, a3, a4);
    v5 = sub_2416BB434();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_24169D7CC(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_2415C0788(255, a3);
    v4 = sub_2416B9928();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_24169D820(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v7;

  sub_24169D774(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_24169D874(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v5;

  sub_24169D774(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_24169D8B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  int *v16;
  uint64_t *v17;
  _QWORD *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t (**v22)@<X0>(uint64_t@<X8>);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v2 = v1;
  v4 = type metadata accessor for MedicalIDEditBiometricsModalView();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2571395D0 != -1)
    swift_once();
  v8 = *(_QWORD *)algn_25713FDB8;
  v32 = qword_25713FDB0;
  sub_2415BEF64(v2, (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditBiometricsModalView);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  sub_2415A85BC((uint64_t)v7, v10 + v9, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditBiometricsModalView);
  v11 = (__int128 *)(v2 + *(int *)(v4 + 20));
  v12 = v11[1];
  v34 = *v11;
  v35 = v12;
  v13 = v11[3];
  v36 = v11[2];
  v37 = v13;
  sub_2415DE314();
  swift_bridgeObjectRetain();
  sub_2416BAD2C();
  v31 = v38;
  v30 = v39;
  v29 = v40;
  v28 = v41;
  v14 = v42;
  *a1 = swift_getKeyPath();
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  sub_2416A2B8C(0);
  v16 = v15;
  v17 = (uint64_t *)((char *)a1 + v15[9]);
  *v17 = v32;
  v17[1] = v8;
  v18 = (uint64_t *)((char *)a1 + v15[10]);
  *v18 = &unk_25713FEA0;
  v18[1] = v10;
  v19 = (char *)a1 + v15[11];
  v20 = v30;
  *(_OWORD *)v19 = v31;
  *((_OWORD *)v19 + 1) = v20;
  v21 = v28;
  *((_OWORD *)v19 + 2) = v29;
  *((_OWORD *)v19 + 3) = v21;
  *((_QWORD *)v19 + 8) = v14;
  v22 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)a1 + v15[12]);
  sub_2415BEF64(v2, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditBiometricsModalView);
  v23 = swift_allocObject();
  sub_2415A85BC((uint64_t)v7, v23 + v9, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditBiometricsModalView);
  sub_2415BEF64(v2, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditBiometricsModalView);
  v24 = swift_allocObject();
  sub_2415A85BC((uint64_t)v7, v24 + v9, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditBiometricsModalView);
  *v22 = sub_2416A2EDC;
  v22[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v23;
  v22[2] = (uint64_t (*)@<X0>(uint64_t@<X8>))sub_2416A2F1C;
  v22[3] = (uint64_t (*)@<X0>(uint64_t@<X8>))v24;
  v22[4] = (uint64_t (*)@<X0>(uint64_t@<X8>))nullsub_1;
  v22[5] = 0;
  v25 = (char *)a1 + v16[13];
  v33 = 0;
  result = sub_2416BAD08();
  v27 = *((_QWORD *)&v34 + 1);
  *v25 = v34;
  *((_QWORD *)v25 + 1) = v27;
  return result;
}

uint64_t sub_24169DB9C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2415C2834;
  return sub_24169DBE4();
}

uint64_t sub_24169DBE4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[17] = v0;
  v2 = sub_2416BA06C();
  v1[18] = v2;
  v1[19] = *(_QWORD *)(v2 - 8);
  v1[20] = swift_task_alloc();
  sub_2415A6FC4(0);
  v1[21] = swift_task_alloc();
  type metadata accessor for MedicalIDData();
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  v1[24] = sub_2416BB290();
  v1[25] = sub_2416BB284();
  v1[26] = sub_2416BB254();
  v1[27] = v3;
  return swift_task_switch();
}

uint64_t sub_24169DCCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = type metadata accessor for MedicalIDEditBiometricsModalView();
  *(_QWORD *)(v0 + 224) = v4;
  v23 = v3 + *(int *)(v4 + 32);
  v5 = *(_BYTE *)(v23 + 8);
  v6 = swift_retain();
  v7 = sub_2415C0C54(v6, v5);
  swift_release();
  swift_getKeyPath();
  *(_QWORD *)(v0 + 120) = v7;
  *(_QWORD *)(v0 + 232) = sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  v8 = v7 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_2415BEF64(v8, v2, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  swift_release();
  LoadState<>.loadedValue.getter(v1);
  sub_2415A6154(v2, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  sub_24169D774(0, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188);
  v9 = swift_task_alloc();
  v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0];
  sub_2416A2F58(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  sub_24169D774(0, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
  v11 = swift_task_alloc();
  sub_24169EFE0(0, &qword_25713FDC8, v10);
  sub_2416BAD14();
  *(_OWORD *)(v0 + 88) = *(_OWORD *)(v3 + *(int *)(v4 + 56));
  sub_24159D6B0(0, &qword_25713FF00, (uint64_t (*)(uint64_t))type metadata accessor for HKBloodType, v10);
  sub_2416BAD14();
  *(_QWORD *)(v1 + 88) = *(_QWORD *)(v0 + 112);
  v12 = sub_24167DD58(v9);

  *(_QWORD *)(v1 + 96) = v12;
  v13 = sub_24167DFB4(v11);

  *(_QWORD *)(v1 + 104) = v13;
  sub_24169D874(v11, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
  sub_24169D874(v9, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188);
  swift_task_dealloc();
  swift_task_dealloc();
  MedicalIDBiometricsViewModel.validationResult(for:)(v1, (uint64_t)&v25);
  v14 = v26;
  if (v26)
  {
    v15 = v29;
    v22 = v27;
    v24 = v28;
    v16 = v25;
    swift_release();
    sub_2415A534C();
    swift_allocError();
    *(_QWORD *)v17 = v16;
    *(_QWORD *)(v17 + 8) = v14;
    *(_OWORD *)(v17 + 16) = v22;
    *(_OWORD *)(v17 + 32) = v24;
    *(_QWORD *)(v17 + 48) = v15;
    swift_willThrow();
    sub_2415A6154(*(_QWORD *)(v0 + 184), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_BYTE *)(v23 + 8);
    v20 = swift_retain();
    *(_QWORD *)(v0 + 240) = sub_2415C0C54(v20, v19);
    swift_release();
    *(_QWORD *)(v0 + 248) = sub_2416BB284();
    *(_QWORD *)(v0 + 256) = sub_2416BB254();
    *(_QWORD *)(v0 + 264) = v21;
    return swift_task_switch();
  }
}

uint64_t sub_24169E0EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[30];
  v3 = v0[22];
  v2 = v0[23];
  v4 = v0[21];
  swift_getKeyPath();
  v0[13] = v1;
  sub_2416B9CAC();
  swift_release();
  v5 = v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_2415BEF64(v5, v4, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  LoadState<>.loadedValue.getter(v3);
  sub_2415A6154(v4, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  sub_2415A6154(v3, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  swift_beginAccess();
  sub_2415BEF64(v2, v3, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  v6 = (_QWORD *)swift_task_alloc();
  v0[34] = v6;
  *v6 = v0;
  v6[1] = sub_24169E23C;
  return sub_24167239C(v0[22], (uint64_t)(v0 + 16));
}

uint64_t sub_24169E23C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24169E29C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 176);
  swift_release();
  sub_2415A6154(v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  swift_release();
  return swift_task_switch();
}

uint64_t sub_24169E2F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  swift_release();
  sub_2415C0E10(v2);
  sub_2416BA060();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_2415A6154(v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24169E3A8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[22];
  swift_release();
  sub_2415A6154(v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  swift_release();
  v0[35] = v0[16];
  return swift_task_switch();
}

uint64_t sub_24169E404()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 280);
  swift_release();
  sub_2415CF224();
  swift_allocError();
  *v2 = v1;
  sub_2415A6154(*(_QWORD *)(v0 + 184), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24169E4A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  char v110;

  v101 = a2;
  v99 = type metadata accessor for EditBloodTypeCellView();
  v3 = MEMORY[0x24BDAC7A8](v99);
  v100 = (uint64_t)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v98 = (uint64_t)&v82 - v5;
  v88 = type metadata accessor for EditWeightCellView();
  MEMORY[0x24BDAC7A8](v88);
  v87 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416A2D38(0);
  v104 = v7;
  v97 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v103 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v106 = (char *)&v82 - v10;
  v11 = type metadata accessor for MedicalIDEditBiometricsModalView();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = v11;
  v14 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for MedicalIDBiometricsViewModel();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for EditHeightCellView();
  v20 = MEMORY[0x24BDAC7A8](v19);
  v105 = (uint64_t)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (uint64_t *)((char *)&v82 - v22);
  v96 = (uint64_t)&v82 - v22;
  sub_2415BEF64(a1, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
  sub_2416A2F58(0, &qword_25713F760, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v82 - v25;
  *(_QWORD *)&v102 = v13;
  sub_2416A2F58(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  v27 = a1;
  v28 = *(_QWORD *)(a1 + *(int *)(v13 + 44));
  v29 = *(int *)(v13 + 44);
  v91 = v29;
  v92 = v15;
  sub_2415BEF64(v27, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditBiometricsModalView);
  v30 = *(unsigned __int8 *)(v12 + 80);
  v94 = ((v30 + 16) & ~v30) + v14;
  v95 = (v30 + 16) & ~v30;
  v31 = v95;
  v93 = v30 | 7;
  v32 = swift_allocObject();
  sub_2415A85BC((uint64_t)v15, v32 + v31, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditBiometricsModalView);
  swift_retain();
  sub_241682F20((uint64_t)v18, (uint64_t)v26, v28, (uint64_t)sub_2416A2FD4, v32, v23);
  sub_2415BEF64(v27, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
  sub_24169EFE0(0, &qword_25713CE98, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v85 = v33;
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)&v82 - v34;
  v36 = v102;
  v86 = v27;
  sub_24169EFE0(0, &qword_25713FDC8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  v83 = *(_QWORD *)(v27 + v29);
  v37 = (int *)v88;
  v38 = (uint64_t)v87;
  *(_QWORD *)&v87[*(int *)(v88 + 28)] = 6;
  v39 = (uint64_t *)(v38 + v37[9]);
  *v39 = swift_getKeyPath();
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v40 = (uint64_t *)(v38 + v37[10]);
  v90 = sub_2415C0788(0, (unint64_t *)&qword_25713A430);
  v89 = sub_2415BEF08();
  swift_retain();
  *v40 = sub_2416BA270();
  v40[1] = v41;
  v84 = v18;
  sub_2415BEF64((uint64_t)v18, v38, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
  sub_2416A2FD8((uint64_t)v35, v38 + v37[5]);
  sub_24169D774(0, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
  MEMORY[0x24BDAC7A8](v42);
  v44 = (char *)&v82 - v43;
  MEMORY[0x242698604](v85);
  v45 = MedicalIDBiometricsViewModel.formattedWeightText(for:)((uint64_t)v44);
  v47 = v46;
  sub_24168AA98((uint64_t)v35, (uint64_t)&qword_25713CE98, (uint64_t)MEMORY[0x24BDF4870], (uint64_t (*)(_QWORD))sub_24169EFE0);
  sub_2415A6154((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
  sub_24169D874((uint64_t)v44, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
  v48 = (_QWORD *)(v38 + v37[8]);
  *v48 = v45;
  v48[1] = v47;
  v48[2] = 0;
  *(_QWORD *)(v38 + v37[6]) = v83;
  v49 = v86;
  v50 = v86 + *(int *)(v36 + 64);
  v51 = *(_BYTE *)v50;
  v52 = *(_QWORD *)(v50 + 8);
  LOBYTE(v50) = *(_BYTE *)(v50 + 16);
  LOBYTE(v109) = v51;
  *((_QWORD *)&v109 + 1) = v52;
  v110 = v50;
  sub_2416A302C();
  sub_2416B9F1C();
  LOBYTE(v109) = 0;
  sub_24159D7F0(0, &qword_25713FED0, (uint64_t)&type metadata for MedicalIDEditBiometricsModalView.TextFieldFocus, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  sub_24159CE88(&qword_25713FED8, (uint64_t (*)(uint64_t))type metadata accessor for EditWeightCellView, (uint64_t)&unk_2416BFE98);
  sub_2416A2E00();
  v53 = v103;
  sub_2416BAB94();
  swift_release();
  swift_release();
  sub_2415A6154(v38, (uint64_t (*)(_QWORD))type metadata accessor for EditWeightCellView);
  v54 = v97;
  v55 = v53;
  (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v106, v53, v104);
  v56 = (uint64_t)v84;
  sub_2415BEF64(v49, (uint64_t)v84, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
  v109 = *(_OWORD *)(v49 + *(int *)(v102 + 56));
  sub_24159D6B0(0, &qword_25713FF00, (uint64_t (*)(uint64_t))type metadata accessor for HKBloodType, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  v102 = v107;
  v57 = v108;
  v58 = *(_QWORD *)(v49 + v91);
  v59 = (uint64_t)v92;
  sub_2415BEF64(v49, (uint64_t)v92, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditBiometricsModalView);
  v60 = swift_allocObject();
  sub_2415A85BC(v59, v60 + v95, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditBiometricsModalView);
  swift_retain();
  v61 = sub_2416BA270();
  v63 = v62;
  v64 = v56;
  v65 = v98;
  sub_2415A85BC(v64, v98, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDBiometricsViewModel);
  v66 = (int *)v99;
  v67 = v65 + *(int *)(v99 + 20);
  *(_OWORD *)v67 = v102;
  *(_QWORD *)(v67 + 16) = v57;
  *(_QWORD *)(v65 + v66[6]) = v58;
  v68 = (_QWORD *)(v65 + v66[7]);
  *v68 = sub_2416A2FD4;
  v68[1] = v60;
  v69 = (uint64_t *)(v65 + v66[8]);
  *v69 = v61;
  v69[1] = v63;
  v70 = v96;
  v71 = v105;
  sub_2415BEF64(v96, v105, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  v72 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  v73 = v106;
  v74 = v104;
  v72(v55, v106, v104);
  v75 = v100;
  sub_2415BEF64(v65, v100, (uint64_t (*)(_QWORD))type metadata accessor for EditBloodTypeCellView);
  v76 = v71;
  v77 = v101;
  sub_2415BEF64(v76, v101, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  sub_2416A2CB4();
  v79 = v78;
  v72((char *)(v77 + *(int *)(v78 + 48)), v55, v74);
  sub_2415BEF64(v75, v77 + *(int *)(v79 + 64), (uint64_t (*)(_QWORD))type metadata accessor for EditBloodTypeCellView);
  sub_2415A6154(v65, (uint64_t (*)(_QWORD))type metadata accessor for EditBloodTypeCellView);
  v80 = *(void (**)(char *, uint64_t))(v54 + 8);
  v80(v73, v74);
  sub_2415A6154(v70, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
  sub_2415A6154(v75, (uint64_t (*)(_QWORD))type metadata accessor for EditBloodTypeCellView);
  v80(v103, v74);
  return sub_2415A6154(v105, (uint64_t (*)(_QWORD))type metadata accessor for EditHeightCellView);
}

uint64_t sub_24169ED80()
{
  type metadata accessor for MedicalIDEditBiometricsModalView();
  sub_2416A302C();
  return sub_2416B9F10();
}

uint64_t sub_24169EDEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (qword_257139498 != -1)
    swift_once();
  v5 = qword_257147740;
  v4 = *(_QWORD *)algn_257147748;
  v6 = (uint64_t *)(a1 + *(int *)(type metadata accessor for MedicalIDEditBiometricsModalView() + 60));
  v7 = *v6;
  v8 = v6[1];
  *a2 = v5;
  a2[1] = v4;
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = v7;
  a2[5] = v8;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24169EE78()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t result;
  uint64_t v5;

  v0 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v0);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v1 = (void *)qword_25713A038;
  v2 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v2);
  v3 = v1;
  sub_2416B9C04();
  result = sub_2416BB134();
  qword_25713FDB0 = result;
  *(_QWORD *)algn_25713FDB8 = v5;
  return result;
}

unint64_t sub_24169EF9C()
{
  unint64_t result;

  result = qword_25713FDC0;
  if (!qword_25713FDC0)
  {
    result = MEMORY[0x2426994BC](&unk_2416C2F58, &type metadata for MedicalIDEditBiometricsModalView.TextFieldFocus);
    atomic_store(result, (unint64_t *)&qword_25713FDC0);
  }
  return result;
}

void sub_24169EFE0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_24169D774(255, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_24169F058(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v7;

  sub_24169D774(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t storeEnumTagSinglePayload for MedicalIDEditBiometricsModalView.TextFieldFocus(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24169F0EC + 4 * byte_2416C2E00[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24169F10C + 4 * byte_2416C2E05[v4]))();
}

_BYTE *sub_24169F0EC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24169F10C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24169F114(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24169F11C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24169F124(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24169F12C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDEditBiometricsModalView.TextFieldFocus()
{
  return &type metadata for MedicalIDEditBiometricsModalView.TextFieldFocus;
}

_QWORD *sub_24169F148(_QWORD *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  _QWORD *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  char *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int (*v110)(char *, uint64_t, uint64_t);
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int (*v121)(char *, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  char *v127;
  uint64_t v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  unsigned int (*v136)(char *, uint64_t, uint64_t);
  void *v137;
  void *v138;
  char *__dst;
  int *v140;
  _QWORD *v141;
  uint64_t v142;
  int *v143;
  char *v144;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v26 = (_QWORD *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    v140 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    v141 = a1;
    v7 = v140[5];
    v8 = (_QWORD *)((char *)a1 + v7);
    v144 = a2;
    v9 = &a2[v7];
    v10 = *(_QWORD *)&a2[v7 + 8];
    *v8 = *(_QWORD *)&a2[v7];
    v8[1] = v10;
    v12 = *(_QWORD *)&a2[v7 + 16];
    v11 = *(_QWORD *)&a2[v7 + 24];
    v8[2] = v12;
    v8[3] = v11;
    v13 = *((_QWORD *)v9 + 5);
    v8[4] = *((_QWORD *)v9 + 4);
    v8[5] = v13;
    v14 = *((_QWORD *)v9 + 7);
    v8[6] = *((_QWORD *)v9 + 6);
    v8[7] = v14;
    v15 = *((_QWORD *)v9 + 9);
    v8[8] = *((_QWORD *)v9 + 8);
    v8[9] = v15;
    v16 = *((_QWORD *)v9 + 11);
    v8[10] = *((_QWORD *)v9 + 10);
    v8[11] = v16;
    v137 = (void *)*((_QWORD *)v9 + 12);
    v138 = (void *)*((_QWORD *)v9 + 13);
    v8[12] = v137;
    v8[13] = v138;
    v143 = (int *)type metadata accessor for MedicalIDData();
    v17 = v143[13];
    __dst = (char *)v8 + v17;
    v18 = &v9[v17];
    v19 = sub_2416B9B50();
    v142 = *(_QWORD *)(v19 - 8);
    v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = v137;
    v22 = v138;
    if (v20(v18, 1, v19))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v24 = v142;
    }
    else
    {
      v24 = v142;
      (*(void (**)(char *, char *, uint64_t))(v142 + 16))(__dst, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v142 + 56))(__dst, 0, 1, v19);
    }
    v27 = v143[14];
    v28 = (char *)v8 + v27;
    v29 = &v9[v27];
    v26 = v141;
    v136 = v20;
    if (v20(&v9[v27], 1, v19))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v29, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v19);
    }
    v31 = v143[15];
    v32 = (_QWORD *)((char *)v8 + v31);
    v33 = &v9[v31];
    v34 = *((_QWORD *)v33 + 1);
    *v32 = *(_QWORD *)v33;
    v32[1] = v34;
    v35 = v143[16];
    v36 = (_QWORD *)((char *)v8 + v35);
    v37 = &v9[v35];
    v38 = *((_QWORD *)v37 + 1);
    *v36 = *(_QWORD *)v37;
    v36[1] = v38;
    *((_BYTE *)v8 + v143[17]) = v9[v143[17]];
    *((_BYTE *)v8 + v143[18]) = v9[v143[18]];
    v39 = v143[19];
    v40 = (char *)v8 + v39;
    v41 = (uint64_t *)&v9[v39];
    v42 = *(_QWORD *)&v9[v39 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v42 >> 60 == 15)
    {
      *(_OWORD *)v40 = *(_OWORD *)v41;
    }
    else
    {
      v43 = *v41;
      sub_2415A0A90(*v41, v42);
      *(_QWORD *)v40 = v43;
      *((_QWORD *)v40 + 1) = v42;
    }
    v44 = v143[20];
    v45 = (char *)v8 + v44;
    v46 = &v9[v44];
    v47 = sub_2416B9A18();
    v48 = *(_QWORD *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    v50 = v143[21];
    v51 = *(void **)&v9[v50];
    *(_QWORD *)((char *)v8 + v50) = v51;
    v52 = v143[22];
    v53 = (char *)v8 + v52;
    v54 = &v9[v52];
    v55 = v51;
    if (v136(v54, 1, v19))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v142 + 16))(v53, v54, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v142 + 56))(v53, 0, 1, v19);
    }
    v57 = v140[6];
    v58 = (char *)v141 + v57;
    v59 = &v144[v57];
    v60 = sub_2416B9C10();
    v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
    v61(v58, v59, v60);
    v62 = v140[7];
    v63 = (char *)v141 + v62;
    v64 = &v144[v62];
    v61((char *)v141 + v62, &v144[v62], v60);
    v65 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    v66 = *(void **)&v64[v65];
    *(_QWORD *)&v63[v65] = v66;
    v67 = v140[8];
    v68 = (char *)v141 + v67;
    v69 = &v144[v67];
    v70 = v66;
    v61(v68, v69, v60);
    v71 = type metadata accessor for MedicalIDWeightFormatter();
    v72 = *(int *)(v71 + 20);
    v73 = *(void **)&v69[v72];
    *(_QWORD *)&v68[v72] = v73;
    v74 = *(int *)(v71 + 24);
    v75 = *(void **)&v69[v74];
    *(_QWORD *)&v68[v74] = v75;
    v76 = a3[5];
    v77 = (_QWORD *)((char *)v141 + v76);
    v78 = &v144[v76];
    v79 = *(_QWORD *)&v144[v76 + 8];
    v80 = v73;
    v81 = v75;
    if (v79)
    {
      *v77 = *(_QWORD *)v78;
      v77[1] = v79;
      v82 = *((_QWORD *)v78 + 3);
      v77[2] = *((_QWORD *)v78 + 2);
      v77[3] = v82;
      v83 = *((_QWORD *)v78 + 5);
      v77[4] = *((_QWORD *)v78 + 4);
      v77[5] = v83;
      v77[6] = *((_QWORD *)v78 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v84 = *((_OWORD *)v78 + 1);
      *(_OWORD *)v77 = *(_OWORD *)v78;
      *((_OWORD *)v77 + 1) = v84;
      *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
      v77[6] = *((_QWORD *)v78 + 6);
    }
    v77[7] = *((_QWORD *)v78 + 7);
    v85 = a3[6];
    v86 = (char *)v141 + v85;
    v87 = &v144[v85];
    sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v61(v86, v87, v60);
    }
    else
    {
      *(_QWORD *)v86 = *(_QWORD *)v87;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v88 = a3[7];
    v89 = (_QWORD *)((char *)v141 + v88);
    v90 = &v144[v88];
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v91 = sub_2416BA06C();
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 16))(v89, v90, v91);
    }
    else
    {
      *v89 = *(_QWORD *)v90;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v92 = a3[8];
    v93 = a3[9];
    v94 = (char *)v141 + v92;
    v95 = &v144[v92];
    v96 = *(_QWORD *)v95;
    LOBYTE(v95) = v95[8];
    *(_QWORD *)v94 = v96;
    v94[8] = (char)v95;
    v97 = (_QWORD *)((char *)v141 + v93);
    v98 = &v144[v93];
    v100 = *(void **)v98;
    v99 = *((_QWORD *)v98 + 1);
    *v97 = v100;
    v97[1] = v99;
    v101 = a3[10];
    v102 = a3[11];
    v103 = *(void **)&v144[v101];
    *(_QWORD *)((char *)v141 + v101) = v103;
    *(_QWORD *)((char *)v141 + v102) = *(_QWORD *)&v144[v102];
    v104 = a3[12];
    v105 = (char *)v141 + v104;
    v106 = &v144[v104];
    sub_24169D7CC(0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
    v108 = v107;
    v109 = *(_QWORD *)(v107 - 8);
    v110 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48);
    swift_retain();
    v111 = v100;
    v112 = v103;
    swift_retain();
    if (v110(v106, 1, v108))
    {
      sub_24169D774(0, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v105, v106, v108);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v105, 0, 1, v108);
    }
    sub_24169EFE0(0, &qword_25713FDC8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    *(_QWORD *)&v105[*(int *)(v114 + 28)] = *(_QWORD *)&v106[*(int *)(v114 + 28)];
    v115 = a3[13];
    v116 = (char *)v141 + v115;
    v117 = &v144[v115];
    sub_24169D7CC(0, &qword_25713A180, (unint64_t *)&qword_25713A188);
    v119 = v118;
    v120 = *(_QWORD *)(v118 - 8);
    v121 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v120 + 48);
    swift_retain();
    if (v121(v117, 1, v119))
    {
      sub_24169D774(0, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188);
      memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v116, v117, v119);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v120 + 56))(v116, 0, 1, v119);
    }
    sub_2416A2F58(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    *(_QWORD *)&v116[*(int *)(v123 + 28)] = *(_QWORD *)&v117[*(int *)(v123 + 28)];
    v124 = a3[14];
    v125 = a3[15];
    v126 = (_QWORD *)((char *)v141 + v124);
    v127 = &v144[v124];
    v128 = *((_QWORD *)v127 + 1);
    *v126 = *(_QWORD *)v127;
    v126[1] = v128;
    v129 = (_QWORD *)((char *)v141 + v125);
    v130 = &v144[v125];
    v131 = *((_QWORD *)v130 + 1);
    *v129 = *(_QWORD *)v130;
    v129[1] = v131;
    v132 = a3[16];
    v133 = (char *)v141 + v132;
    v134 = &v144[v132];
    *v133 = *v134;
    *((_QWORD *)v133 + 1) = *((_QWORD *)v134 + 1);
    v133[16] = v134[16];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v26;
}

uint64_t sub_24169FA34(uint64_t a1, int *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v35;

  swift_bridgeObjectRelease();
  v35 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v4 = a1 + v35[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = v4 + v5[13];
  v7 = sub_2416B9B50();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v10 = v4 + v5[14];
  if (!v9(v10, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)(v4 + v5[19]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_2415A0DAC(*v11, v12);
  v13 = v4 + v5[20];
  v14 = sub_2416B9A18();
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);

  v16 = v4 + v5[22];
  if (!v9(v16, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v16, v7);
  v17 = a1 + v35[6];
  v18 = sub_2416B9C10();
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(v17, v18);
  v20 = a1 + v35[7];
  v19(v20, v18);

  v21 = a1 + v35[8];
  v19(v21, v18);
  v22 = type metadata accessor for MedicalIDWeightFormatter();

  if (*(_QWORD *)(a1 + a2[5] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  v23 = a1 + a2[6];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v19(v23, v18);
  else
    swift_release();
  v24 = a1 + a2[7];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v25 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  }
  else
  {
    swift_release();
  }
  swift_release();

  swift_release();
  v26 = a1 + a2[12];
  sub_24169D7CC(0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
  v28 = v27;
  v29 = *(_QWORD *)(v27 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v26, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v26, v28);
  sub_24169EFE0(0, &qword_25713FDC8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  swift_release();
  v30 = a1 + a2[13];
  sub_24169D7CC(0, &qword_25713A180, (unint64_t *)&qword_25713A188);
  v32 = v31;
  v33 = *(_QWORD *)(v31 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v30, 1, v31))
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v30, v32);
  sub_2416A2F58(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

char *sub_24169FED4(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(char *, uint64_t, uint64_t);
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int (*v119)(char *, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  int *v134;
  void *v135;
  void *v136;
  char *__dst;
  char *v138;
  uint64_t v139;
  int *v140;
  unsigned int (*v141)(char *, uint64_t, uint64_t);
  char *v142;

  v5 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v5;
  v6 = type metadata accessor for MedicalIDBiometricsViewModel();
  v7 = *(int *)(v6 + 20);
  v138 = a1;
  v8 = &a1[v7];
  v142 = a2;
  v9 = &a2[v7];
  v10 = *(_QWORD *)&a2[v7 + 8];
  *(_QWORD *)v8 = *(_QWORD *)&a2[v7];
  *((_QWORD *)v8 + 1) = v10;
  v12 = *(_QWORD *)&a2[v7 + 16];
  v11 = *(_QWORD *)&a2[v7 + 24];
  *((_QWORD *)v8 + 2) = v12;
  *((_QWORD *)v8 + 3) = v11;
  v13 = *((_QWORD *)v9 + 5);
  v134 = (int *)v6;
  *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
  *((_QWORD *)v8 + 5) = v13;
  v14 = *((_QWORD *)v9 + 7);
  *((_QWORD *)v8 + 6) = *((_QWORD *)v9 + 6);
  *((_QWORD *)v8 + 7) = v14;
  v15 = *((_QWORD *)v9 + 9);
  *((_QWORD *)v8 + 8) = *((_QWORD *)v9 + 8);
  *((_QWORD *)v8 + 9) = v15;
  v16 = *((_QWORD *)v9 + 11);
  *((_QWORD *)v8 + 10) = *((_QWORD *)v9 + 10);
  *((_QWORD *)v8 + 11) = v16;
  v135 = (void *)*((_QWORD *)v9 + 12);
  v136 = (void *)*((_QWORD *)v9 + 13);
  *((_QWORD *)v8 + 12) = v135;
  *((_QWORD *)v8 + 13) = v136;
  v140 = (int *)type metadata accessor for MedicalIDData();
  v17 = v140[13];
  __dst = &v8[v17];
  v18 = &v9[v17];
  v19 = sub_2416B9B50();
  v139 = *(_QWORD *)(v19 - 8);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v135;
  v22 = v136;
  v141 = v20;
  if (v20(v18, 1, v19))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    v24 = v139;
  }
  else
  {
    v24 = v139;
    (*(void (**)(char *, char *, uint64_t))(v139 + 16))(__dst, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56))(__dst, 0, 1, v19);
  }
  v25 = v140[14];
  v26 = &v8[v25];
  v27 = &v9[v25];
  if (v141(&v9[v25], 1, v19))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v26, v27, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v19);
  }
  v29 = v140[15];
  v30 = &v8[v29];
  v31 = &v9[v29];
  v32 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = v32;
  v33 = v140[16];
  v34 = &v8[v33];
  v35 = &v9[v33];
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = v36;
  v8[v140[17]] = v9[v140[17]];
  v8[v140[18]] = v9[v140[18]];
  v37 = v140[19];
  v38 = &v8[v37];
  v39 = (uint64_t *)&v9[v37];
  v40 = *(_QWORD *)&v9[v37 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v40 >> 60 == 15)
  {
    *(_OWORD *)v38 = *(_OWORD *)v39;
  }
  else
  {
    v41 = *v39;
    sub_2415A0A90(*v39, v40);
    *(_QWORD *)v38 = v41;
    *((_QWORD *)v38 + 1) = v40;
  }
  v42 = v140[20];
  v43 = &v8[v42];
  v44 = &v9[v42];
  v45 = sub_2416B9A18();
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  v48 = v140[21];
  v49 = *(void **)&v9[v48];
  *(_QWORD *)&v8[v48] = v49;
  v50 = v140[22];
  v51 = &v8[v50];
  v52 = &v9[v50];
  v53 = v49;
  if (v141(v52, 1, v19))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v51, v52, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v51, 0, 1, v19);
  }
  v55 = v134[6];
  v56 = &v138[v55];
  v57 = &v142[v55];
  v58 = sub_2416B9C10();
  v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
  v59(v56, v57, v58);
  v60 = v134[7];
  v61 = &v138[v60];
  v62 = &v142[v60];
  v59(&v138[v60], &v142[v60], v58);
  v63 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v64 = *(void **)&v62[v63];
  *(_QWORD *)&v61[v63] = v64;
  v65 = v134[8];
  v66 = &v138[v65];
  v67 = &v142[v65];
  v68 = v64;
  v59(v66, v67, v58);
  v69 = type metadata accessor for MedicalIDWeightFormatter();
  v70 = *(int *)(v69 + 20);
  v71 = *(void **)&v67[v70];
  *(_QWORD *)&v66[v70] = v71;
  v72 = *(int *)(v69 + 24);
  v73 = *(void **)&v67[v72];
  *(_QWORD *)&v66[v72] = v73;
  v74 = a3[5];
  v75 = &v138[v74];
  v76 = &v142[v74];
  v77 = *(_QWORD *)&v142[v74 + 8];
  v78 = v71;
  v79 = v73;
  if (v77)
  {
    *(_QWORD *)v75 = *(_QWORD *)v76;
    *((_QWORD *)v75 + 1) = v77;
    v80 = *((_QWORD *)v76 + 3);
    *((_QWORD *)v75 + 2) = *((_QWORD *)v76 + 2);
    *((_QWORD *)v75 + 3) = v80;
    v81 = *((_QWORD *)v76 + 5);
    *((_QWORD *)v75 + 4) = *((_QWORD *)v76 + 4);
    *((_QWORD *)v75 + 5) = v81;
    *((_QWORD *)v75 + 6) = *((_QWORD *)v76 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v82 = *((_OWORD *)v76 + 1);
    *(_OWORD *)v75 = *(_OWORD *)v76;
    *((_OWORD *)v75 + 1) = v82;
    *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
    *((_QWORD *)v75 + 6) = *((_QWORD *)v76 + 6);
  }
  *((_QWORD *)v75 + 7) = *((_QWORD *)v76 + 7);
  v83 = a3[6];
  v84 = &v138[v83];
  v85 = &v142[v83];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v59(v84, v85, v58);
  }
  else
  {
    *(_QWORD *)v84 = *(_QWORD *)v85;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v86 = a3[7];
  v87 = &v138[v86];
  v88 = &v142[v86];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v89 = sub_2416BA06C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v87, v88, v89);
  }
  else
  {
    *(_QWORD *)v87 = *(_QWORD *)v88;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v90 = a3[8];
  v91 = a3[9];
  v92 = &v138[v90];
  v93 = &v142[v90];
  v94 = *(_QWORD *)v93;
  LOBYTE(v93) = v93[8];
  *(_QWORD *)v92 = v94;
  v92[8] = (char)v93;
  v95 = &v138[v91];
  v96 = &v142[v91];
  v98 = *(void **)v96;
  v97 = *((_QWORD *)v96 + 1);
  *(_QWORD *)v95 = v98;
  *((_QWORD *)v95 + 1) = v97;
  v99 = a3[10];
  v100 = a3[11];
  v101 = *(void **)&v142[v99];
  *(_QWORD *)&v138[v99] = v101;
  *(_QWORD *)&v138[v100] = *(_QWORD *)&v142[v100];
  v102 = a3[12];
  v103 = &v138[v102];
  v104 = &v142[v102];
  sub_24169D7CC(0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
  v106 = v105;
  v107 = *(_QWORD *)(v105 - 8);
  v108 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48);
  swift_retain();
  v109 = v98;
  v110 = v101;
  swift_retain();
  if (v108(v104, 1, v106))
  {
    sub_24169D774(0, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
    memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v103, v104, v106);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v103, 0, 1, v106);
  }
  sub_24169EFE0(0, &qword_25713FDC8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v103[*(int *)(v112 + 28)] = *(_QWORD *)&v104[*(int *)(v112 + 28)];
  v113 = a3[13];
  v114 = &v138[v113];
  v115 = &v142[v113];
  sub_24169D7CC(0, &qword_25713A180, (unint64_t *)&qword_25713A188);
  v117 = v116;
  v118 = *(_QWORD *)(v116 - 8);
  v119 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48);
  swift_retain();
  if (v119(v115, 1, v117))
  {
    sub_24169D774(0, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188);
    memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v114, v115, v117);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v114, 0, 1, v117);
  }
  sub_2416A2F58(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v114[*(int *)(v121 + 28)] = *(_QWORD *)&v115[*(int *)(v121 + 28)];
  v122 = a3[14];
  v123 = a3[15];
  v124 = &v138[v122];
  v125 = &v142[v122];
  v126 = *((_QWORD *)v125 + 1);
  *(_QWORD *)v124 = *(_QWORD *)v125;
  *((_QWORD *)v124 + 1) = v126;
  v127 = &v138[v123];
  v128 = &v142[v123];
  v129 = *((_QWORD *)v128 + 1);
  *(_QWORD *)v127 = *(_QWORD *)v128;
  *((_QWORD *)v127 + 1) = v129;
  v130 = a3[16];
  v131 = &v138[v130];
  v132 = &v142[v130];
  *v131 = *v132;
  *((_QWORD *)v131 + 1) = *((_QWORD *)v132 + 1);
  v131[16] = v132[16];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return v138;
}

char *sub_2416A07A4(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  int v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  id v84;
  uint64_t v85;
  void *v86;
  void *v87;
  id v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t (*v103)(uint64_t);
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t (*v107)(uint64_t);
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  void *v116;
  void *v117;
  id v118;
  uint64_t v119;
  void *v120;
  void *v121;
  id v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t (*v129)(char *, uint64_t, uint64_t);
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t (*v140)(char *, uint64_t, uint64_t);
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t (*v155)(char *, uint64_t, uint64_t);
  uint64_t v156;
  int *v157;
  char *v158;
  char *v159;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v157 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v5 = v157[5];
  v159 = a1;
  v6 = &a1[v5];
  v7 = &a2[v5];
  *(_QWORD *)v6 = *(_QWORD *)&a2[v5];
  *((_QWORD *)v6 + 1) = *(_QWORD *)&a2[v5 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 2) = *((_QWORD *)v7 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 3) = *((_QWORD *)v7 + 3);
  *((_QWORD *)v6 + 4) = *((_QWORD *)v7 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 5) = *((_QWORD *)v7 + 5);
  *((_QWORD *)v6 + 6) = *((_QWORD *)v7 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 7) = *((_QWORD *)v7 + 7);
  *((_QWORD *)v6 + 8) = *((_QWORD *)v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 9) = *((_QWORD *)v7 + 9);
  *((_QWORD *)v6 + 10) = *((_QWORD *)v7 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 11) = *((_QWORD *)v7 + 11);
  v8 = (void *)*((_QWORD *)v6 + 12);
  v9 = (void *)*((_QWORD *)v7 + 12);
  *((_QWORD *)v6 + 12) = v9;
  v10 = v9;

  v11 = (void *)*((_QWORD *)v6 + 13);
  v12 = (void *)*((_QWORD *)v7 + 13);
  *((_QWORD *)v6 + 13) = v12;
  v13 = v12;

  v14 = (int *)type metadata accessor for MedicalIDData();
  v15 = v14[13];
  v16 = &v6[v15];
  v17 = &v7[v15];
  v18 = sub_2416B9B50();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  v24 = v14[14];
  v25 = &v6[v24];
  v26 = &v7[v24];
  v27 = v20(&v6[v24], 1, v18);
  v28 = v20(v26, 1, v18);
  v155 = v20;
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v25, v26, v18);
LABEL_13:
  v30 = v14[15];
  v31 = &v6[v30];
  v32 = &v7[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = v14[16];
  v34 = &v6[v33];
  v35 = &v7[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6[v14[17]] = v7[v14[17]];
  v6[v14[18]] = v7[v14[18]];
  v36 = v14[19];
  v37 = (uint64_t *)&v6[v36];
  v38 = (uint64_t *)&v7[v36];
  v39 = *(_QWORD *)&v7[v36 + 8];
  v158 = a2;
  v156 = v19;
  if (*(_QWORD *)&v6[v36 + 8] >> 60 == 15)
  {
    if (v39 >> 60 != 15)
    {
      v40 = *v38;
      sub_2415A0A90(*v38, v39);
      *v37 = v40;
      v37[1] = v39;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v39 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v37);
LABEL_18:
    *(_OWORD *)v37 = *(_OWORD *)v38;
    goto LABEL_20;
  }
  v41 = *v38;
  sub_2415A0A90(*v38, v39);
  v42 = *v37;
  v43 = v37[1];
  *v37 = v41;
  v37[1] = v39;
  sub_2415A0DAC(v42, v43);
LABEL_20:
  v44 = v14[20];
  v45 = &v6[v44];
  v46 = &v7[v44];
  v47 = sub_2416B9A18();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v47);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 24))(v45, v46, v47);
LABEL_26:
  v53 = v14[21];
  v54 = *(void **)&v6[v53];
  v55 = *(void **)&v7[v53];
  *(_QWORD *)&v6[v53] = v55;
  v56 = v55;

  v57 = v14[22];
  v58 = &v6[v57];
  v59 = &v7[v57];
  v60 = v155(&v6[v57], 1, v18);
  v61 = v155(v59, 1, v18);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v58, v59, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v156 + 56))(v58, 0, 1, v18);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v156 + 8))(v58, v18);
LABEL_31:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v156 + 24))(v58, v59, v18);
LABEL_32:
  v63 = a3;
  v64 = v157[6];
  v65 = &v159[v64];
  v66 = &v158[v64];
  v67 = sub_2416B9C10();
  v68 = *(_QWORD *)(v67 - 8);
  v69 = *(void (**)(char *, char *, uint64_t))(v68 + 24);
  v69(v65, v66, v67);
  v70 = v157[7];
  v71 = &v159[v70];
  v72 = &v158[v70];
  v69(&v159[v70], &v158[v70], v67);
  v73 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v74 = *(void **)&v72[v73];
  v75 = *(void **)&v71[v73];
  *(_QWORD *)&v71[v73] = v74;
  v76 = v74;

  v77 = v157[8];
  v78 = &v159[v77];
  v79 = &v158[v77];
  v69(&v159[v77], &v158[v77], v67);
  v80 = type metadata accessor for MedicalIDWeightFormatter();
  v81 = *(int *)(v80 + 20);
  v82 = *(void **)&v79[v81];
  v83 = *(void **)&v78[v81];
  *(_QWORD *)&v78[v81] = v82;
  v84 = v82;

  v85 = *(int *)(v80 + 24);
  v86 = *(void **)&v79[v85];
  v87 = *(void **)&v78[v85];
  *(_QWORD *)&v78[v85] = v86;
  v88 = v86;

  v89 = a3[5];
  v90 = &v159[v89];
  v91 = &v158[v89];
  v92 = *(_QWORD *)&v159[v89 + 8];
  v93 = *(_QWORD *)&v158[v89 + 8];
  if (v92)
  {
    if (v93)
    {
      *(_QWORD *)v90 = *(_QWORD *)v91;
      *((_QWORD *)v90 + 1) = *((_QWORD *)v91 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v90 + 2) = *((_QWORD *)v91 + 2);
      *((_QWORD *)v90 + 3) = *((_QWORD *)v91 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v90 + 4) = *((_QWORD *)v91 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v90 + 5) = *((_QWORD *)v91 + 5);
      *((_QWORD *)v90 + 6) = *((_QWORD *)v91 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2415CCAC8((uint64_t)v90);
      v95 = *((_OWORD *)v91 + 1);
      v94 = *((_OWORD *)v91 + 2);
      v96 = *(_OWORD *)v91;
      *((_QWORD *)v90 + 6) = *((_QWORD *)v91 + 6);
      *((_OWORD *)v90 + 1) = v95;
      *((_OWORD *)v90 + 2) = v94;
      *(_OWORD *)v90 = v96;
    }
  }
  else if (v93)
  {
    *(_QWORD *)v90 = *(_QWORD *)v91;
    *((_QWORD *)v90 + 1) = *((_QWORD *)v91 + 1);
    *((_QWORD *)v90 + 2) = *((_QWORD *)v91 + 2);
    *((_QWORD *)v90 + 3) = *((_QWORD *)v91 + 3);
    *((_QWORD *)v90 + 4) = *((_QWORD *)v91 + 4);
    *((_QWORD *)v90 + 5) = *((_QWORD *)v91 + 5);
    *((_QWORD *)v90 + 6) = *((_QWORD *)v91 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v63 = a3;
    swift_bridgeObjectRetain();
  }
  else
  {
    v97 = *(_OWORD *)v91;
    v98 = *((_OWORD *)v91 + 1);
    v99 = *((_OWORD *)v91 + 2);
    *((_QWORD *)v90 + 6) = *((_QWORD *)v91 + 6);
    *((_OWORD *)v90 + 1) = v98;
    *((_OWORD *)v90 + 2) = v99;
    *(_OWORD *)v90 = v97;
  }
  *((_QWORD *)v90 + 7) = *((_QWORD *)v91 + 7);
  swift_retain();
  swift_release();
  if (v159 != v158)
  {
    v100 = v63[6];
    v101 = &v159[v100];
    v102 = &v158[v100];
    v103 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    sub_2415DB7F4((uint64_t)&v159[v100], &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0]);
    sub_24159D6B0(0, &qword_25713A1C8, v103, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v101, v102, v67);
    }
    else
    {
      *(_QWORD *)v101 = *(_QWORD *)v102;
      swift_retain();
    }
    v63 = a3;
    swift_storeEnumTagMultiPayload();
    v104 = a3[7];
    v105 = &v159[v104];
    v106 = &v158[v104];
    v107 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038];
    sub_2415DB7F4((uint64_t)&v159[v104], (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038]);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, v107, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v108 = sub_2416BA06C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 16))(v105, v106, v108);
    }
    else
    {
      *(_QWORD *)v105 = *(_QWORD *)v106;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v109 = v63[8];
  v110 = &v159[v109];
  v111 = &v158[v109];
  v112 = *(_QWORD *)v111;
  LOBYTE(v111) = v111[8];
  *(_QWORD *)v110 = v112;
  v110[8] = (char)v111;
  swift_retain();
  swift_release();
  v113 = v63[9];
  v114 = &v159[v113];
  v115 = &v158[v113];
  v116 = *(void **)&v159[v113];
  v117 = *(void **)&v158[v113];
  *(_QWORD *)v114 = v117;
  v118 = v117;

  *((_QWORD *)v114 + 1) = *((_QWORD *)v115 + 1);
  v119 = v63[10];
  v120 = *(void **)&v158[v119];
  v121 = *(void **)&v159[v119];
  *(_QWORD *)&v159[v119] = v120;
  v122 = v120;

  *(_QWORD *)&v159[v63[11]] = *(_QWORD *)&v158[v63[11]];
  swift_retain();
  swift_release();
  v123 = v63[12];
  v124 = &v159[v123];
  v125 = &v158[v123];
  sub_24169D7CC(0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
  v127 = v126;
  v128 = *(_QWORD *)(v126 - 8);
  v129 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v128 + 48);
  v130 = v129(v124, 1, v126);
  v131 = v129(v125, 1, v127);
  if (v130)
  {
    if (!v131)
    {
      (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v124, v125, v127);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v124, 0, 1, v127);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  if (v131)
  {
    (*(void (**)(char *, uint64_t))(v128 + 8))(v124, v127);
LABEL_56:
    sub_24169D774(0, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
    memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(char *, char *, uint64_t))(v128 + 24))(v124, v125, v127);
LABEL_57:
  sub_24169EFE0(0, &qword_25713FDC8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v124[*(int *)(v133 + 28)] = *(_QWORD *)&v125[*(int *)(v133 + 28)];
  swift_retain();
  swift_release();
  v134 = v63[13];
  v135 = &v159[v134];
  v136 = &v158[v134];
  sub_24169D7CC(0, &qword_25713A180, (unint64_t *)&qword_25713A188);
  v138 = v137;
  v139 = *(_QWORD *)(v137 - 8);
  v140 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v139 + 48);
  v141 = v140(v135, 1, v137);
  v142 = v140(v136, 1, v138);
  if (!v141)
  {
    if (!v142)
    {
      (*(void (**)(char *, char *, uint64_t))(v139 + 24))(v135, v136, v138);
      goto LABEL_63;
    }
    (*(void (**)(char *, uint64_t))(v139 + 8))(v135, v138);
    goto LABEL_62;
  }
  if (v142)
  {
LABEL_62:
    sub_24169D774(0, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188);
    memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v135, v136, v138);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v135, 0, 1, v138);
LABEL_63:
  sub_2416A2F58(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v135[*(int *)(v144 + 28)] = *(_QWORD *)&v136[*(int *)(v144 + 28)];
  swift_retain();
  swift_release();
  v145 = v63[14];
  v146 = &v159[v145];
  v147 = &v158[v145];
  *(_QWORD *)v146 = *(_QWORD *)v147;
  *((_QWORD *)v146 + 1) = *((_QWORD *)v147 + 1);
  swift_retain();
  swift_release();
  v148 = v63[15];
  v149 = &v159[v148];
  v150 = &v158[v148];
  *(_QWORD *)v149 = *(_QWORD *)v150;
  *((_QWORD *)v149 + 1) = *((_QWORD *)v150 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v151 = v63[16];
  v152 = &v159[v151];
  v153 = &v158[v151];
  *v152 = v158[v151];
  *((_QWORD *)v152 + 1) = *(_QWORD *)&v158[v151 + 8];
  swift_retain();
  swift_release();
  v152[16] = v153[16];
  return v159;
}

char *sub_2416A1458(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  unsigned int (*v86)(char *, uint64_t, uint64_t);
  uint64_t v87;
  int *v88;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v88 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v5 = v88[5];
  v6 = &a1[v5];
  v7 = &a2[v5];
  *(_OWORD *)v6 = *(_OWORD *)&a2[v5];
  *((_QWORD *)v6 + 2) = *(_QWORD *)&a2[v5 + 16];
  *(_OWORD *)(v6 + 24) = *(_OWORD *)&a2[v5 + 24];
  *(_OWORD *)(v6 + 40) = *(_OWORD *)&a2[v5 + 40];
  *(_OWORD *)(v6 + 56) = *(_OWORD *)&a2[v5 + 56];
  *(_OWORD *)(v6 + 72) = *(_OWORD *)&a2[v5 + 72];
  *((_QWORD *)v6 + 11) = *(_QWORD *)&a2[v5 + 88];
  *((_OWORD *)v6 + 6) = *(_OWORD *)&a2[v5 + 96];
  v8 = (int *)type metadata accessor for MedicalIDData();
  v9 = v8[13];
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = sub_2416B9B50();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = v8[14];
  v17 = &v6[v16];
  v18 = &v7[v16];
  v86 = v14;
  v87 = v13;
  if (v14(&v7[v16], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v18, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  *(_OWORD *)&v6[v8[15]] = *(_OWORD *)&v7[v8[15]];
  *(_OWORD *)&v6[v8[16]] = *(_OWORD *)&v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  v6[v8[18]] = v7[v8[18]];
  *(_OWORD *)&v6[v8[19]] = *(_OWORD *)&v7[v8[19]];
  v20 = v8[20];
  v21 = &v6[v20];
  v22 = &v7[v20];
  v23 = sub_2416B9A18();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(_QWORD *)&v6[v8[21]] = *(_QWORD *)&v7[v8[21]];
  v26 = v8[22];
  v27 = &v6[v26];
  v28 = &v7[v26];
  if (v86(&v7[v26], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v27, v28, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v27, 0, 1, v12);
  }
  v30 = v88[6];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = sub_2416B9C10();
  v34 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
  v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
  v35(v31, v32, v33);
  v36 = v88[7];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v35(&a1[v36], &a2[v36], v33);
  v39 = type metadata accessor for MedicalIDHeightFormatter();
  *(_QWORD *)&v37[*(int *)(v39 + 20)] = *(_QWORD *)&v38[*(int *)(v39 + 20)];
  v40 = v88[8];
  v41 = &a1[v40];
  v42 = &a2[v40];
  v35(&a1[v40], &a2[v40], v33);
  v43 = type metadata accessor for MedicalIDWeightFormatter();
  *(_QWORD *)&v41[*(int *)(v43 + 20)] = *(_QWORD *)&v42[*(int *)(v43 + 20)];
  *(_QWORD *)&v41[*(int *)(v43 + 24)] = *(_QWORD *)&v42[*(int *)(v43 + 24)];
  v44 = a3[5];
  v45 = a3[6];
  v46 = &a1[v44];
  v47 = &a2[v44];
  v48 = *((_OWORD *)v47 + 3);
  *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
  *((_OWORD *)v46 + 3) = v48;
  v49 = *((_OWORD *)v47 + 1);
  *(_OWORD *)v46 = *(_OWORD *)v47;
  *((_OWORD *)v46 + 1) = v49;
  v50 = &a1[v45];
  v51 = &a2[v45];
  sub_24159D6B0(0, &qword_25713A1C8, v34, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v53 = v52;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v35(v50, v51, v33);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  v54 = a3[7];
  v55 = &a1[v54];
  v56 = &a2[v54];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v58 = v57;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v59 = sub_2416BA06C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v55, v56, v59);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  v60 = a3[8];
  v61 = a3[9];
  v62 = &a1[v60];
  v63 = &a2[v60];
  *(_QWORD *)v62 = *(_QWORD *)v63;
  v62[8] = v63[8];
  *(_OWORD *)&a1[v61] = *(_OWORD *)&a2[v61];
  v64 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v64] = *(_QWORD *)&a2[v64];
  v65 = a3[12];
  v66 = &a1[v65];
  v67 = &a2[v65];
  sub_24169D7CC(0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
  v69 = v68;
  v70 = *(_QWORD *)(v68 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v67, 1, v68))
  {
    sub_24169D774(0, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v66, v67, v69);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v66, 0, 1, v69);
  }
  sub_24169EFE0(0, &qword_25713FDC8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v66[*(int *)(v72 + 28)] = *(_QWORD *)&v67[*(int *)(v72 + 28)];
  v73 = a3[13];
  v74 = &a1[v73];
  v75 = &a2[v73];
  sub_24169D7CC(0, &qword_25713A180, (unint64_t *)&qword_25713A188);
  v77 = v76;
  v78 = *(_QWORD *)(v76 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v75, 1, v76))
  {
    sub_24169D774(0, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v74, v75, v77);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v74, 0, 1, v77);
  }
  sub_2416A2F58(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v74[*(int *)(v80 + 28)] = *(_QWORD *)&v75[*(int *)(v80 + 28)];
  v81 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  *(_OWORD *)&a1[v81] = *(_OWORD *)&a2[v81];
  v82 = a3[16];
  v83 = &a1[v82];
  v84 = &a2[v82];
  *(_OWORD *)v83 = *(_OWORD *)v84;
  v83[16] = v84[16];
  return a1;
}

char *sub_2416A1B88(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int v63;
  int v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t (*v96)(uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t (*v102)(uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  void *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(char *, uint64_t, uint64_t);
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t (*v133)(char *, uint64_t, uint64_t);
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t (*v152)(char *, uint64_t, uint64_t);
  uint64_t v153;
  int *v154;
  char *v155;
  char *v156;

  v5 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  v154 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v6 = v154[5];
  v156 = a1;
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  *(_QWORD *)v7 = *(_QWORD *)&a2[v6];
  *((_QWORD *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
  swift_bridgeObjectRelease();
  v10 = *((_QWORD *)v8 + 4);
  *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
  *((_QWORD *)v7 + 4) = v10;
  swift_bridgeObjectRelease();
  v11 = *((_QWORD *)v8 + 6);
  *((_QWORD *)v7 + 5) = *((_QWORD *)v8 + 5);
  *((_QWORD *)v7 + 6) = v11;
  swift_bridgeObjectRelease();
  v12 = *((_QWORD *)v8 + 8);
  *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
  *((_QWORD *)v7 + 8) = v12;
  swift_bridgeObjectRelease();
  v13 = *((_QWORD *)v8 + 10);
  *((_QWORD *)v7 + 9) = *((_QWORD *)v8 + 9);
  *((_QWORD *)v7 + 10) = v13;
  swift_bridgeObjectRelease();
  v14 = (void *)*((_QWORD *)v7 + 12);
  v15 = *((_QWORD *)v8 + 12);
  *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
  *((_QWORD *)v7 + 12) = v15;

  v16 = (void *)*((_QWORD *)v7 + 13);
  *((_QWORD *)v7 + 13) = *((_QWORD *)v8 + 13);

  v17 = (int *)type metadata accessor for MedicalIDData();
  v18 = v17[13];
  v19 = &v7[v18];
  v20 = &v8[v18];
  v21 = sub_2416B9B50();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  v27 = v17[14];
  v28 = &v7[v27];
  v29 = &v8[v27];
  v30 = v23(&v7[v27], 1, v21);
  v31 = v23(v29, 1, v21);
  v152 = v23;
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v28, v29, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v28, v21);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v28, v29, v21);
LABEL_13:
  v33 = v17[15];
  v34 = &v7[v33];
  v35 = (uint64_t *)&v8[v33];
  v37 = *v35;
  v36 = v35[1];
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v38 = v17[16];
  v39 = &v7[v38];
  v40 = (uint64_t *)&v8[v38];
  v42 = *v40;
  v41 = v40[1];
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v7[v17[17]] = v8[v17[17]];
  v7[v17[18]] = v8[v17[18]];
  v43 = v17[19];
  v44 = (uint64_t)&v7[v43];
  v45 = &v8[v43];
  v46 = *(_QWORD *)&v7[v43 + 8];
  v155 = a2;
  v153 = v22;
  if (v46 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v44 = *(_OWORD *)v45;
    goto LABEL_18;
  }
  v47 = *((_QWORD *)v45 + 1);
  if (v47 >> 60 == 15)
  {
    sub_2415A1B38(v44);
    goto LABEL_16;
  }
  v48 = *(_QWORD *)v44;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_QWORD *)(v44 + 8) = v47;
  sub_2415A0DAC(v48, v46);
LABEL_18:
  v49 = v17[20];
  v50 = &v7[v49];
  v51 = &v8[v49];
  v52 = sub_2416B9A18();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v50, 1, v52);
  v56 = v54(v51, 1, v52);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v50, v51, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
LABEL_23:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v50, v51, v52);
LABEL_24:
  v58 = v17[21];
  v59 = *(void **)&v7[v58];
  *(_QWORD *)&v7[v58] = *(_QWORD *)&v8[v58];

  v60 = v17[22];
  v61 = &v7[v60];
  v62 = &v8[v60];
  v63 = v152(&v7[v60], 1, v21);
  v64 = v152(v62, 1, v21);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v153 + 32))(v61, v62, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v153 + 56))(v61, 0, 1, v21);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v153 + 8))(v61, v21);
LABEL_29:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v153 + 40))(v61, v62, v21);
LABEL_30:
  v66 = a3;
  v67 = v154[6];
  v68 = &v156[v67];
  v69 = &v155[v67];
  v70 = sub_2416B9C10();
  v71 = *(_QWORD *)(v70 - 8);
  v72 = *(void (**)(char *, char *, uint64_t))(v71 + 40);
  v72(v68, v69, v70);
  v73 = v154[7];
  v74 = &v156[v73];
  v75 = &v155[v73];
  v72(&v156[v73], &v155[v73], v70);
  v76 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v77 = *(void **)&v74[v76];
  *(_QWORD *)&v74[v76] = *(_QWORD *)&v75[v76];

  v78 = v154[8];
  v79 = &v156[v78];
  v80 = &v155[v78];
  v72(&v156[v78], &v155[v78], v70);
  v81 = type metadata accessor for MedicalIDWeightFormatter();
  v82 = *(int *)(v81 + 20);
  v83 = *(void **)&v79[v82];
  *(_QWORD *)&v79[v82] = *(_QWORD *)&v80[v82];

  v84 = *(int *)(v81 + 24);
  v85 = *(void **)&v79[v84];
  *(_QWORD *)&v79[v84] = *(_QWORD *)&v80[v84];

  v86 = a3[5];
  v87 = &v156[v86];
  v88 = &v155[v86];
  if (*(_QWORD *)&v156[v86 + 8])
  {
    v89 = *((_QWORD *)v88 + 1);
    if (v89)
    {
      *(_QWORD *)v87 = *(_QWORD *)v88;
      *((_QWORD *)v87 + 1) = v89;
      swift_bridgeObjectRelease();
      v90 = *((_QWORD *)v88 + 3);
      *((_QWORD *)v87 + 2) = *((_QWORD *)v88 + 2);
      *((_QWORD *)v87 + 3) = v90;
      swift_bridgeObjectRelease();
      *((_QWORD *)v87 + 4) = *((_QWORD *)v88 + 4);
      swift_bridgeObjectRelease();
      v91 = *((_QWORD *)v88 + 6);
      *((_QWORD *)v87 + 5) = *((_QWORD *)v88 + 5);
      *((_QWORD *)v87 + 6) = v91;
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    sub_2415CCAC8((uint64_t)v87);
  }
  v92 = *((_OWORD *)v88 + 1);
  *(_OWORD *)v87 = *(_OWORD *)v88;
  *((_OWORD *)v87 + 1) = v92;
  *((_OWORD *)v87 + 2) = *((_OWORD *)v88 + 2);
  *((_QWORD *)v87 + 6) = *((_QWORD *)v88 + 6);
LABEL_35:
  *((_QWORD *)v87 + 7) = *((_QWORD *)v88 + 7);
  swift_release();
  if (v156 != v155)
  {
    v93 = a3[6];
    v94 = &v156[v93];
    v95 = &v155[v93];
    v96 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    sub_2415DB7F4((uint64_t)&v156[v93], &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0]);
    sub_24159D6B0(0, &qword_25713A1C8, v96, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v98 = v97;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v94, v95, v70);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    }
    v66 = a3;
    v99 = a3[7];
    v100 = &v156[v99];
    v101 = &v155[v99];
    v102 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038];
    sub_2415DB7F4((uint64_t)&v156[v99], (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038]);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, v102, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v104 = v103;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v105 = sub_2416BA06C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 32))(v100, v101, v105);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
    }
  }
  v106 = v66[8];
  v107 = &v156[v106];
  v108 = &v155[v106];
  v109 = *(_QWORD *)v108;
  LOBYTE(v108) = v108[8];
  *(_QWORD *)v107 = v109;
  v107[8] = (char)v108;
  swift_release();
  v110 = v66[9];
  v111 = &v156[v110];
  v112 = &v155[v110];
  v113 = *(void **)&v156[v110];
  *(_QWORD *)v111 = *(_QWORD *)v112;

  *((_QWORD *)v111 + 1) = *((_QWORD *)v112 + 1);
  v114 = v66[10];
  v115 = *(void **)&v156[v114];
  *(_QWORD *)&v156[v114] = *(_QWORD *)&v155[v114];

  *(_QWORD *)&v156[v66[11]] = *(_QWORD *)&v155[v66[11]];
  swift_release();
  v116 = v66[12];
  v117 = &v156[v116];
  v118 = &v155[v116];
  sub_24169D7CC(0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
  v120 = v119;
  v121 = *(_QWORD *)(v119 - 8);
  v122 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v121 + 48);
  v123 = v122(v117, 1, v119);
  v124 = v122(v118, 1, v120);
  if (v123)
  {
    if (!v124)
    {
      (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v117, v118, v120);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v117, 0, 1, v120);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v124)
  {
    (*(void (**)(char *, uint64_t))(v121 + 8))(v117, v120);
LABEL_47:
    sub_24169D774(0, qword_25713CEA0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
    memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(char *, char *, uint64_t))(v121 + 40))(v117, v118, v120);
LABEL_48:
  sub_24169EFE0(0, &qword_25713FDC8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v117[*(int *)(v126 + 28)] = *(_QWORD *)&v118[*(int *)(v126 + 28)];
  swift_release();
  v127 = v66[13];
  v128 = &v156[v127];
  v129 = &v155[v127];
  sub_24169D7CC(0, &qword_25713A180, (unint64_t *)&qword_25713A188);
  v131 = v130;
  v132 = *(_QWORD *)(v130 - 8);
  v133 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v132 + 48);
  v134 = v133(v128, 1, v130);
  v135 = v133(v129, 1, v131);
  if (!v134)
  {
    if (!v135)
    {
      (*(void (**)(char *, char *, uint64_t))(v132 + 40))(v128, v129, v131);
      goto LABEL_54;
    }
    (*(void (**)(char *, uint64_t))(v132 + 8))(v128, v131);
    goto LABEL_53;
  }
  if (v135)
  {
LABEL_53:
    sub_24169D774(0, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188);
    memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v128, v129, v131);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v128, 0, 1, v131);
LABEL_54:
  sub_2416A2F58(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v128[*(int *)(v137 + 28)] = *(_QWORD *)&v129[*(int *)(v137 + 28)];
  swift_release();
  v138 = v66[14];
  v139 = &v156[v138];
  v140 = (uint64_t *)&v155[v138];
  v142 = *v140;
  v141 = v140[1];
  *(_QWORD *)v139 = v142;
  *((_QWORD *)v139 + 1) = v141;
  swift_release();
  v143 = v66[15];
  v144 = &v156[v143];
  v145 = (uint64_t *)&v155[v143];
  v147 = *v145;
  v146 = v145[1];
  *(_QWORD *)v144 = v147;
  *((_QWORD *)v144 + 1) = v146;
  swift_bridgeObjectRelease();
  v148 = v66[16];
  v149 = &v156[v148];
  v150 = &v155[v148];
  *v149 = v155[v148];
  *((_QWORD *)v149 + 1) = *(_QWORD *)&v155[v148 + 8];
  swift_release();
  v149[16] = v150[16];
  return v156;
}

uint64_t sub_2416A2660()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416A266C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for MedicalIDBiometricsViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[6];
LABEL_14:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_14;
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_24169EFE0(0, &qword_25713FDC8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    v12 = *(_QWORD *)(v17 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v17;
      v13 = a3[12];
    }
    else
    {
      sub_2416A2F58(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
      v8 = v18;
      v12 = *(_QWORD *)(v18 - 8);
      v13 = a3[13];
    }
    goto LABEL_14;
  }
  v15 = *(_QWORD *)(a1 + a3[10]);
  if (v15 >= 0xFFFFFFFF)
    LODWORD(v15) = -1;
  return (v15 + 1);
}

uint64_t sub_2416A27D0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_2416A27DC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = type metadata accessor for MedicalIDBiometricsViewModel();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[7];
      }
      else
      {
        if (a3 == 0x7FFFFFFF)
        {
          *(_QWORD *)(a1 + a4[10]) = (a2 - 1);
          return;
        }
        sub_24169EFE0(0, &qword_25713FDC8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[12];
        }
        else
        {
          sub_2416A2F58(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
          v10 = v18;
          v14 = *(_QWORD *)(v18 - 8);
          v15 = a4[13];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, v10);
}

void sub_2416A293C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for MedicalIDBiometricsViewModel();
  if (v0 <= 0x3F)
  {
    sub_24159D6B0(319, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (v1 <= 0x3F)
    {
      sub_24159D6B0(319, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
      if (v2 <= 0x3F)
      {
        sub_24169EFE0(319, &qword_25713FDC8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
        if (v3 <= 0x3F)
        {
          sub_2416A2F58(319, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
          if (v4 <= 0x3F)
            swift_initStructMetadata();
        }
      }
    }
  }
}

unint64_t sub_2416A2AB4()
{
  unint64_t result;

  result = qword_25713FE90;
  if (!qword_25713FE90)
  {
    result = MEMORY[0x2426994BC](&unk_2416C2F30, &type metadata for MedicalIDEditBiometricsModalView.TextFieldFocus);
    atomic_store(result, &qword_25713FE90);
  }
  return result;
}

uint64_t sub_2416A2AF8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2416A2B0C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  type metadata accessor for MedicalIDEditBiometricsModalView();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2415C2834;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_2415C2834;
  return sub_24169DBE4();
}

void sub_2416A2B8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_25713FEA8)
  {
    v2 = sub_2416A2C04();
    v3 = sub_24159CE88(&qword_25713FEF0, (uint64_t (*)(uint64_t))sub_2416A2C04, (uint64_t)&unk_2416BFFF0);
    v5 = type metadata accessor for MedicalIDEditModal(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25713FEA8);
  }
}

uint64_t sub_2416A2C04()
{
  uint64_t result;

  result = qword_25713FEB0;
  if (!qword_25713FEB0)
  {
    sub_24159D6B0(255, &qword_25713FEB8, (uint64_t (*)(uint64_t))sub_2416A2CB4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2416A2E78();
    sub_2415DFB54();
    type metadata accessor for EditingScrollView();
  }
  return result;
}

void sub_2416A2CB4()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713FEC0)
  {
    type metadata accessor for EditHeightCellView();
    sub_2416A2D38(255);
    type metadata accessor for EditBloodTypeCellView();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713FEC0);
  }
}

void sub_2416A2D38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_25713FEC8)
  {
    v2 = type metadata accessor for EditWeightCellView();
    sub_24159D7F0(255, &qword_25713FED0, (uint64_t)&type metadata for MedicalIDEditBiometricsModalView.TextFieldFocus, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v6[0] = v2;
    v6[1] = v3;
    v6[2] = sub_24159CE88(&qword_25713FED8, (uint64_t (*)(uint64_t))type metadata accessor for EditWeightCellView, (uint64_t)&unk_2416BFE98);
    v6[3] = sub_2416A2E00();
    v4 = MEMORY[0x242699480](a1, v6, MEMORY[0x24BDF3748], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_25713FEC8);
  }
}

unint64_t sub_2416A2E00()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_25713FEE0;
  if (!qword_25713FEE0)
  {
    sub_24159D7F0(255, &qword_25713FED0, (uint64_t)&type metadata for MedicalIDEditBiometricsModalView.TextFieldFocus, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v2 = v1;
    v3 = sub_24169EF9C();
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE4AB0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713FEE0);
  }
  return result;
}

unint64_t sub_2416A2E78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713FEE8;
  if (!qword_25713FEE8)
  {
    sub_24159D6B0(255, &qword_25713FEB8, (uint64_t (*)(uint64_t))sub_2416A2CB4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v1);
    atomic_store(result, (unint64_t *)&qword_25713FEE8);
  }
  return result;
}

uint64_t sub_2416A2EDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDEditBiometricsModalView() - 8) + 80);
  return sub_24169E4A4(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_2416A2F1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDEditBiometricsModalView() - 8) + 80);
  return sub_24169EDEC(v1 + ((v3 + 16) & ~v3), a1);
}

void sub_2416A2F58(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_24169D774(255, &qword_25713A190, &qword_25713A180, (unint64_t *)&qword_25713A188);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_2416A2FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24169EFE0(0, &qword_25713CE98, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_2416A302C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713FEF8)
  {
    sub_24159D7F0(255, &qword_25713FED0, (uint64_t)&type metadata for MedicalIDEditBiometricsModalView.TextFieldFocus, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    sub_2416A2E00();
    v0 = sub_2416B9F40();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713FEF8);
  }
}

uint64_t objectdestroyTm_24()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v34;

  v1 = (int *)type metadata accessor for MedicalIDEditBiometricsModalView();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  v34 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v3 = v2 + v34[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = (int *)type metadata accessor for MedicalIDData();
  v5 = v3 + v4[13];
  v6 = sub_2416B9B50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = v3 + v4[14];
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)(v3 + v4[19]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_2415A0DAC(*v10, v11);
  v12 = v3 + v4[20];
  v13 = sub_2416B9A18();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);

  v15 = v3 + v4[22];
  if (!v8(v15, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  v16 = v2 + v34[6];
  v17 = sub_2416B9C10();
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v18(v16, v17);
  v19 = v2 + v34[7];
  v18(v19, v17);

  v20 = v2 + v34[8];
  v18(v20, v17);
  v21 = type metadata accessor for MedicalIDWeightFormatter();

  if (*(_QWORD *)(v2 + v1[5] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  v22 = v2 + v1[6];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v18(v22, v17);
  else
    swift_release();
  v23 = v2 + v1[7];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v24 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  }
  else
  {
    swift_release();
  }
  swift_release();

  swift_release();
  v25 = v2 + v1[12];
  sub_24169D7CC(0, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8);
  v27 = v26;
  v28 = *(_QWORD *)(v26 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v25, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v25, v27);
  sub_24169EFE0(0, &qword_25713FDC8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  swift_release();
  v29 = v2 + v1[13];
  sub_24169D7CC(0, &qword_25713A180, (unint64_t *)&qword_25713A188);
  v31 = v30;
  v32 = *(_QWORD *)(v30 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v29, 1, v30))
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v29, v31);
  sub_2416A2F58(0, &qword_25713F768, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2416A358C()
{
  type metadata accessor for MedicalIDEditBiometricsModalView();
  return sub_24169ED80();
}

uint64_t sub_2416A35C4()
{
  return sub_24159CE88(&qword_25713FF10, (uint64_t (*)(uint64_t))sub_2416A2B8C, (uint64_t)&unk_2416BFE00);
}

uint64_t MedicalIDNavigationBarView.init(healthStore:medicalIDData:showDateUpdated:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t *, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t result;
  char v29;
  uint64_t v30;
  char v31;

  v30 = a4;
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_24159D6B0(0, &qword_25713FF18, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (uint64_t *)((char *)&v30 - v14);
  v31 = a3;
  sub_241637F04(a2, (uint64_t)&v30 - v14, &qword_25713FF18, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDData, v9);
  v16 = type metadata accessor for MedicalIDData();
  v17 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48);
  if (v17(v15, 1, v16) == 1)
  {
    sub_2415CCAFC((uint64_t)v15, &qword_25713FF18, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v19 = v15[1];
    if (v19)
    {
      v18 = *v15;
      v20 = HIBYTE(v19) & 0xF;
      if ((v19 & 0x2000000000000000) == 0)
        v20 = *v15 & 0xFFFFFFFFFFFFLL;
      if (v20)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
    else
    {
      v18 = 0;
    }
    sub_2415A6154((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  }
  sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v30 - v22;
  sub_2416A3900(a2, (uint64_t)v13, &qword_25713FF18, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDData);
  if (v17((uint64_t *)v13, 1, v16) == 1)
  {
    sub_2415CCAFC((uint64_t)v13, &qword_25713FF18, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v24 = sub_2416B9B50();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  }
  else
  {
    sub_241637F04((uint64_t)&v13[*(int *)(v16 + 88)], (uint64_t)v23, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_2415A6154((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  }
  type metadata accessor for MedicalIDNavigationBarViewModel();
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = a1;
  v25[3] = v18;
  v25[4] = v19;
  sub_2416A3900((uint64_t)v23, (uint64_t)v25 + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_dateSaved, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908]);
  v26 = (char *)v25 + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_locale;
  v27 = sub_2416B9C10();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, v30, v27);
  v29 = v31;
  *(_QWORD *)a5 = v25;
  *(_BYTE *)(a5 + 8) = v29;
  return result;
}

uint64_t sub_2416A3900(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_24159D6B0(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t MedicalIDNavigationBarView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = sub_2416BA510();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  sub_2416A3C34();
  return sub_2416A39B0(v3, v4, a1 + *(int *)(v5 + 44));
}

uint64_t sub_2416A39B0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a3;
  sub_2416A3D34();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v36 - v9;
  v11 = sub_2416BA468();
  if (qword_2571393B8 != -1)
    swift_once();
  v12 = qword_2571476E8;
  *(_QWORD *)v10 = v11;
  *((_QWORD *)v10 + 1) = v12;
  v10[16] = 0;
  sub_2416A497C();
  sub_2416A407C(a1, (uint64_t)&v10[*(int *)(v13 + 44)]);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  KeyPath = 0;
  v19 = 0;
  if ((a2 & 1) != 0)
  {
    v20 = sub_24166CA48(a1 + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_dateSaved);
    if (v21)
    {
      v38 = v20;
      v39 = v21;
      sub_2415C343C();
      v22 = sub_2416BA9D8();
      v24 = v23;
      v36[1] = v25;
      v27 = v26 & 1;
      sub_2416BA8E8();
      v14 = sub_2416BA9C0();
      v15 = v28;
      v30 = v29;
      v17 = v31;
      swift_release();
      v16 = v30 & 1;
      sub_2415A431C(v22, v24, v27);
      swift_bridgeObjectRelease();
      KeyPath = swift_getKeyPath();
      v19 = 1;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      KeyPath = 0;
      v19 = 0;
    }
  }
  sub_2415BEF64((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_2416A3D34);
  v32 = v37;
  sub_2415BEF64((uint64_t)v8, v37, (uint64_t (*)(_QWORD))sub_2416A3D34);
  sub_2416A3CB0();
  v34 = v32 + *(int *)(v33 + 48);
  *(_QWORD *)v34 = v14;
  *(_QWORD *)(v34 + 8) = v15;
  *(_QWORD *)(v34 + 16) = v16;
  *(_QWORD *)(v34 + 24) = v17;
  *(_QWORD *)(v34 + 32) = KeyPath;
  *(_QWORD *)(v34 + 40) = v19;
  *(_BYTE *)(v34 + 48) = 0;
  sub_2416A49F8(v14, v15, v16, v17);
  sub_2415A6154((uint64_t)v10, (uint64_t (*)(_QWORD))sub_2416A3D34);
  sub_2416A4A34(v14, v15, v16, v17);
  return sub_2415A6154((uint64_t)v8, (uint64_t (*)(_QWORD))sub_2416A3D34);
}

void sub_2416A3C34()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713FF20)
  {
    sub_24159D6B0(255, &qword_25713FF28, (uint64_t (*)(uint64_t))sub_2416A3CB0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713FF20);
  }
}

void sub_2416A3CB0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713FF30)
  {
    sub_2416A3D34();
    sub_24159D6B0(255, &qword_25713FF78, (uint64_t (*)(uint64_t))sub_2416A3FF8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713FF30);
  }
}

void sub_2416A3D34()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713FF38)
  {
    sub_24159D6B0(255, &qword_25713FF40, (uint64_t (*)(uint64_t))sub_2416A3DCC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2415A3F2C(&qword_25713FF70, &qword_25713FF40, (uint64_t (*)(uint64_t))sub_2416A3DCC);
    v0 = sub_2416BAD8C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713FF38);
  }
}

void sub_2416A3DCC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713FF48)
  {
    sub_2416A3E30();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713FF48);
  }
}

void sub_2416A3E30()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713FF50)
  {
    sub_2416A3EB4();
    sub_2415A3D28(255, (unint64_t *)&qword_257139CD0, MEMORY[0x24BDF3E48], MEMORY[0x24BDF3E18], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF06F8]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713FF50);
  }
}

void sub_2416A3EB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713FF58)
  {
    sub_2416A3F30();
    sub_2416A3FA4(255, (unint64_t *)&qword_257139D20, &qword_257139D28);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713FF58);
  }
}

void sub_2416A3F30()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713FF60)
  {
    sub_24159D6B0(255, &qword_25713FF68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF40C0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713FF60);
  }
}

void sub_2416A3FA4(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_24160ACE0(255, a3);
    v4 = sub_2416BA75C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_2416A3FF8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713FF80)
  {
    sub_2416A3FA4(255, &qword_25713DED8, &qword_25713DEE0);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713FF80);
  }
}

uint64_t sub_2416A406C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2416A407C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(_QWORD);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v68)(char *, _QWORD, uint64_t);
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v73 = a1;
  v74 = a2;
  sub_24159D6B0(0, &qword_25713B7D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v78 = (char *)&v68 - v3;
  v77 = sub_2416BA90C();
  v72 = *(_QWORD *)(v77 - 8);
  MEMORY[0x24BDAC7A8](v77);
  v75 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_25713FF68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF40C0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
  v6 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t *)((char *)&v68 - v7);
  v9 = sub_2416BACD8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416A3F30();
  v14 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (uint64_t *)((char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2416A3EB4();
  v70 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416A3E30();
  v71 = v20;
  v21 = MEMORY[0x24BDAC7A8](v20);
  v79 = (uint64_t)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v76 = (uint64_t)&v68 - v23;
  if (qword_2571395B8 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  v24 = sub_2416BACC0();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BDF40B8], v9);
  KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v8 + *(int *)(v6 + 28), v12, v9);
  *v8 = KeyPath;
  v26 = (uint64_t)v16 + *(int *)(v14 + 36);
  v27 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF40C0];
  v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008];
  sub_241637F04((uint64_t)v8, v26, &qword_25713FF68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF40C0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
  *v16 = v24;
  swift_retain();
  sub_2415CCAFC((uint64_t)v8, &qword_25713FF68, v27, v28);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_release();
  v29 = v72;
  v30 = *(void (**)(_QWORD))(v72 + 104);
  v31 = v75;
  v69 = *MEMORY[0x24BDF1860];
  v32 = v77;
  v68 = (void (*)(char *, _QWORD, uint64_t))v30;
  v30(v75);
  v33 = sub_2416BA888();
  v34 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678];
  v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56);
  v36 = (uint64_t)v78;
  v35(v78, 1, 1, v33);
  sub_2416BA894();
  v37 = sub_2416BA8A0();
  sub_2415CCAFC(v36, &qword_25713B7D0, v34, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v38 = *(void (**)(char *, uint64_t))(v29 + 8);
  v38(v31, v32);
  v39 = swift_getKeyPath();
  sub_2415BEF64((uint64_t)v16, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_2416A3F30);
  v40 = (uint64_t *)&v19[*(int *)(v70 + 36)];
  *v40 = v39;
  v40[1] = v37;
  sub_2415A6154((uint64_t)v16, (uint64_t (*)(_QWORD))sub_2416A3F30);
  if (qword_2571395A0 != -1)
    swift_once();
  v41 = qword_2571477E0;
  v42 = v79;
  sub_2415BEF64((uint64_t)v19, v79, (uint64_t (*)(_QWORD))sub_2416A3EB4);
  *(_QWORD *)(v42 + *(int *)(v71 + 36)) = v41;
  swift_retain();
  sub_2415A6154((uint64_t)v19, (uint64_t (*)(_QWORD))sub_2416A3EB4);
  sub_2415A85BC(v42, v76, (uint64_t (*)(_QWORD))sub_2416A3E30);
  v80 = sub_241680464();
  v81 = v43;
  sub_2415C343C();
  v44 = sub_2416BA9D8();
  v46 = v45;
  v48 = v47 & 1;
  v49 = v75;
  v50 = v77;
  v68(v75, v69, v77);
  v51 = (uint64_t)v78;
  v35(v78, 1, 1, v33);
  sub_2416BA894();
  sub_2416BA8A0();
  sub_2415CCAFC(v51, &qword_25713B7D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v38(v49, v50);
  v52 = sub_2416BA9C0();
  v54 = v53;
  LOBYTE(v50) = v55;
  swift_release();
  LOBYTE(v49) = v50 & 1;
  sub_2415A431C(v44, v46, v48);
  swift_bridgeObjectRelease();
  v80 = qword_2571477E0;
  swift_retain();
  v56 = sub_2416BA990();
  v58 = v57;
  v60 = v59;
  LOBYTE(v46) = v61 & 1;
  sub_2415A431C(v52, v54, (char)v49);
  swift_release();
  swift_bridgeObjectRelease();
  v62 = v76;
  v63 = v79;
  sub_2415BEF64(v76, v79, (uint64_t (*)(_QWORD))sub_2416A3E30);
  v64 = v74;
  sub_2415BEF64(v63, v74, (uint64_t (*)(_QWORD))sub_2416A3E30);
  sub_2416A3DCC();
  v66 = v64 + *(int *)(v65 + 48);
  *(_QWORD *)v66 = v56;
  *(_QWORD *)(v66 + 8) = v58;
  *(_BYTE *)(v66 + 16) = v46;
  *(_QWORD *)(v66 + 24) = v60;
  sub_2415A43C8(v56, v58, v46);
  swift_bridgeObjectRetain();
  sub_2415A6154(v62, (uint64_t (*)(_QWORD))sub_2416A3E30);
  sub_2415A431C(v56, v58, v46);
  swift_bridgeObjectRelease();
  return sub_2415A6154(v63, (uint64_t (*)(_QWORD))sub_2416A3E30);
}

uint64_t sub_2416A470C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = sub_2416BA510();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  sub_2416A3C34();
  return sub_2416A39B0(v3, v4, a1 + *(int *)(v5 + 44));
}

uint64_t initializeBufferWithCopyOfBuffer for MedicalIDNavigationBarView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MedicalIDNavigationBarView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for MedicalIDNavigationBarView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDNavigationBarView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDNavigationBarView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDNavigationBarView()
{
  return &type metadata for MedicalIDNavigationBarView;
}

uint64_t sub_2416A48B8()
{
  return sub_24159CE88(&qword_25713FF88, (uint64_t (*)(uint64_t))sub_2416A48E4, MEMORY[0x24BDF4700]);
}

void sub_2416A48E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713FF90)
  {
    sub_24159D6B0(255, &qword_25713FF28, (uint64_t (*)(uint64_t))sub_2416A3CB0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2415A3F2C(&qword_25713FF98, &qword_25713FF28, (uint64_t (*)(uint64_t))sub_2416A3CB0);
    v0 = sub_2416BADF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713FF90);
  }
}

void sub_2416A497C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713FFA0)
  {
    sub_24159D6B0(255, &qword_25713FF40, (uint64_t (*)(uint64_t))sub_2416A3DCC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713FFA0);
  }
}

uint64_t sub_2416A49F8(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_2415A43C8(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_2416A4A34(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_2415A431C(result, a2, a3 & 1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2416A4A70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = sub_2416BA5E8();
  MEMORY[0x24BDAC7A8](v2);
  sub_2416A6B1C();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_257140070, (uint64_t (*)(uint64_t))sub_2416A6AF8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = v8;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v27 - v13;
  v15 = *(void **)(a1 + *(int *)(type metadata accessor for MedicalIDNavigationBarViewModifier() + 24));
  if (v15)
  {
    if ((objc_msgSend(v15, sel_isHostingView) & 1) != 0)
    {
      sub_2416A6AF8(0);
      v17 = v16;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v12, 1, 1, v16);
      v18 = sub_2416A6BC4();
      v29 = v4;
      v30 = v18;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      MEMORY[0x242697E18](v12, v17, OpaqueTypeConformance2);
      sub_2415CCAFC((uint64_t)v12, &qword_257140070, (uint64_t (*)(uint64_t))sub_2416A6AF8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    }
    else
    {
      v20 = sub_2416BA5DC();
      MEMORY[0x24BDAC7A8](v20);
      v28 = v5;
      *(&v27 - 2) = a1;
      sub_2416A6B80();
      sub_2416B9FE8();
      v21 = sub_2416A6BC4();
      MEMORY[0x242697E0C](v7, v4, v21);
      sub_2416A6AF8(0);
      v23 = v22;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v12, 0, 1, v22);
      v29 = v4;
      v30 = v21;
      v24 = swift_getOpaqueTypeConformance2();
      MEMORY[0x242697E18](v12, v23, v24);
      sub_2415CCAFC((uint64_t)v12, &qword_257140070, (uint64_t (*)(uint64_t))sub_2416A6AF8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v4);
    }
    v25 = sub_2416A6BE0();
    MEMORY[0x242697E0C](v14, v9, v25);
    return sub_2415CCAFC((uint64_t)v14, &qword_257140070, (uint64_t (*)(uint64_t))sub_2416A6AF8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  }
  else
  {
    sub_2415CA770();
    sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
    result = sub_2416BA264();
    __break(1u);
  }
  return result;
}

uint64_t sub_2416A4DBC@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  char v22;
  _QWORD v23[4];
  uint64_t v24;
  char v25;

  sub_2415A6FC4(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_25713FF18, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v23 - v8;
  v10 = type metadata accessor for MedicalIDNavigationBarViewModifier();
  v11 = a1[*(int *)(v10 + 36) + 8];
  v12 = *(id *)&a1[*(int *)(v10 + 28)];
  v13 = swift_retain();
  v14 = sub_2415C0C54(v13, v11);
  swift_release();
  swift_getKeyPath();
  v23[1] = v14;
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  v15 = v14 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_2415BEF64(v15, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  swift_release();
  LoadState<>.loadedValue.getter((uint64_t)v9);
  sub_2415A6154((uint64_t)v6, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  v16 = type metadata accessor for MedicalIDData();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 0, 1, v16);
  v17 = *a1;
  v18 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415C12E0((uint64_t)v20);
  result = MedicalIDNavigationBarView.init(healthStore:medicalIDData:showDateUpdated:locale:)((uint64_t)v12, (uint64_t)v9, v17, (uint64_t)v20, (uint64_t)&v24);
  v22 = v25;
  *(_QWORD *)a2 = v24;
  *(_BYTE *)(a2 + 8) = v22;
  return result;
}

uint64_t sub_2416A5008@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  unsigned __int8 v19;
  void *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;

  v33[1] = a2;
  v3 = sub_2416BA5E8();
  MEMORY[0x24BDAC7A8](v3);
  sub_2415E88A8();
  v5 = v4;
  v33[0] = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MedicalIDNavigationBarViewModifier();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_2571400A8, (uint64_t (*)(uint64_t))sub_2415E881C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v12 = v11;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v33 - v16;
  v18 = *(void **)(a1 + *(int *)(v8 + 24));
  if (v18)
  {
    v19 = objc_msgSend(v18, sel_isHostingView);
    sub_2415BEF64(a1, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDNavigationBarViewModifier);
    if ((v19 & 1) != 0)
    {
      sub_2415A6154((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDNavigationBarViewModifier);
      goto LABEL_7;
    }
    v20 = *(void **)&v10[*(int *)(v8 + 24)];
    if (v20)
    {
      v21 = objc_msgSend(v20, sel_shouldShowDoneButton);
      sub_2415A6154((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDNavigationBarViewModifier);
      if ((v21 & 1) != 0)
      {
        v22 = sub_2416BA5D0();
        MEMORY[0x24BDAC7A8](v22);
        v33[-2] = a1;
        sub_2415A3D28(0, (unint64_t *)&qword_25713B4D8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF4398]);
        sub_2415E8934();
        sub_2416B9FE8();
        v23 = sub_24163D708();
        MEMORY[0x242697E0C](v7, v5, v23);
        sub_2415E881C(0);
        v25 = v24;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v15, 0, 1, v24);
        v34 = v5;
        v35 = v23;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
        MEMORY[0x242697E18](v15, v25, OpaqueTypeConformance2);
        sub_2415CCAFC((uint64_t)v15, &qword_2571400A8, (uint64_t (*)(uint64_t))sub_2415E881C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        (*(void (**)(char *, uint64_t))(v33[0] + 8))(v7, v5);
LABEL_8:
        v31 = sub_2416A6C8C();
        MEMORY[0x242697E0C](v17, v12, v31);
        return sub_2415CCAFC((uint64_t)v17, &qword_2571400A8, (uint64_t (*)(uint64_t))sub_2415E881C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      }
LABEL_7:
      sub_2415E881C(0);
      v28 = v27;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v15, 1, 1, v27);
      v29 = sub_24163D708();
      v34 = v5;
      v35 = v29;
      v30 = swift_getOpaqueTypeConformance2();
      MEMORY[0x242697E18](v15, v28, v30);
      sub_2415CCAFC((uint64_t)v15, &qword_2571400A8, (uint64_t (*)(uint64_t))sub_2415E881C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      goto LABEL_8;
    }
  }
  sub_2415CA770();
  sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
  result = sub_2416BA264();
  __break(1u);
  return result;
}

uint64_t sub_2416A5404(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v2 = type metadata accessor for MedicalIDNavigationBarViewModifier();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v5);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v6 = (void *)qword_25713A038;
  v7 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v7);
  v8 = v6;
  sub_2416B9C04();
  v13[1] = sub_2416BB134();
  v13[2] = v9;
  sub_2415BEF64(a1, (uint64_t)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDNavigationBarViewModifier);
  v10 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v11 = swift_allocObject();
  sub_2415A85BC((uint64_t)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDNavigationBarViewModifier);
  sub_2415C343C();
  return sub_2416BAD68();
}

uint64_t sub_2416A55E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = sub_2416BA06C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MedicalIDNavigationBarViewModifier();
  sub_2415C0E10((uint64_t)v3);
  sub_2416BA060();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2416A567C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t OpaqueTypeConformance2;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v33 = a1;
  v1 = sub_2416BA450();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24163DC38(0, &qword_257140048, (uint64_t (*)(uint64_t))sub_2416A6894, sub_2416A690C, MEMORY[0x24BDF33A8]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v30 - v8;
  sub_2416A6928(0);
  v11 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  v32 = v11;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BDEE5F0], v1);
  sub_2416A6894();
  v15 = v14;
  v16 = sub_2416A690C();
  sub_2416BAB4C();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v17 = v30;
  v35 = v30;
  sub_2416A6A6C(0, &qword_257140068, &qword_257140070, (uint64_t (*)(uint64_t))sub_2416A6AF8, (uint64_t (*)(void))sub_2416A6BE0);
  v19 = v18;
  v36 = v15;
  v37 = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  sub_24159D6B0(255, &qword_257140070, (uint64_t (*)(uint64_t))sub_2416A6AF8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v22 = v21;
  v23 = sub_2416A6BE0();
  v36 = v22;
  v37 = v23;
  v24 = swift_getOpaqueTypeConformance2();
  sub_2416BABAC();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v34 = v17;
  sub_2416A6A6C(0, &qword_2571400A0, &qword_2571400A8, (uint64_t (*)(uint64_t))sub_2415E881C, (uint64_t (*)(void))sub_2416A6C8C);
  v36 = v6;
  v37 = v19;
  v38 = OpaqueTypeConformance2;
  v39 = v24;
  swift_getOpaqueTypeConformance2();
  sub_24159D6B0(255, &qword_2571400A8, (uint64_t (*)(uint64_t))sub_2415E881C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v26 = v25;
  v27 = sub_2416A6C8C();
  v36 = v26;
  v37 = v27;
  swift_getOpaqueTypeConformance2();
  v28 = v31;
  sub_2416BABAC();
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v13, v28);
}

uint64_t sub_2416A597C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_2416BA348();
  *a1 = result;
  return result;
}

uint64_t sub_2416A59A4()
{
  swift_retain();
  return sub_2416BA354();
}

uint64_t sub_2416A59CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_2416BA3D8();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_2416A59FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_2416BA3D8();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_2416A5A2C()
{
  return sub_2416BA3E4();
}

uint64_t sub_2416A5A58()
{
  return sub_2416BA3E4();
}

uint64_t sub_2416A5A84()
{
  return sub_2416BA27C();
}

uint64_t sub_2416A5AA4()
{
  return sub_2416BA27C();
}

uint64_t sub_2416A5AC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_2416BACD8();
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_2416BA288();
}

uint64_t sub_2416A5B44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_2416BA348();
  *a1 = result;
  return result;
}

uint64_t sub_2416A5B6C()
{
  swift_retain();
  return sub_2416BA354();
}

uint64_t *sub_2416A5B94(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = (uint64_t *)((char *)a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_2416B9C10();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v12 = a3[6];
    v13 = a3[7];
    v14 = (uint64_t *)((char *)v4 + v12);
    v15 = (char *)a2 + v12;
    v17 = *(void **)v15;
    v16 = *((_QWORD *)v15 + 1);
    v18 = *(void **)((char *)a2 + v13);
    *v14 = v17;
    v14[1] = v16;
    *(uint64_t *)((char *)v4 + v13) = (uint64_t)v18;
    v19 = a3[8];
    v20 = (uint64_t *)((char *)v4 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v22 = v17;
    v23 = v18;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v24 = sub_2416BA06C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v20, v21, v24);
    }
    else
    {
      *v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v25 = a3[9];
    v26 = (char *)v4 + v25;
    v27 = (char *)a2 + v25;
    v28 = *(_QWORD *)v27;
    LOBYTE(v27) = v27[8];
    *(_QWORD *)v26 = v28;
    v26[8] = (char)v27;
  }
  swift_retain();
  return v4;
}

uint64_t sub_2416A5D58(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + a2[5];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_2416B9C10();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }

  v6 = a1 + a2[8];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  return swift_release();
}

_BYTE *sub_2416A5E68(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = sub_2416B9C10();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    *v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v10 = a3[6];
  v11 = a3[7];
  v12 = &a1[v10];
  v13 = &a2[v10];
  v15 = *(void **)v13;
  v14 = *((_QWORD *)v13 + 1);
  v16 = *(void **)&a2[v11];
  *v12 = v15;
  v12[1] = v14;
  *(_QWORD *)&a1[v11] = v16;
  v17 = a3[8];
  v18 = &a1[v17];
  v19 = &a2[v17];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v20 = v15;
  v21 = v16;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v22 = sub_2416BA06C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v18, v19, v22);
  }
  else
  {
    *v18 = *v19;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v23 = a3[9];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *(_QWORD *)v25;
  LOBYTE(v25) = v25[8];
  *(_QWORD *)v24 = v26;
  v24[8] = (_BYTE)v25;
  swift_retain();
  return a1;
}

_BYTE *sub_2416A6004(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t (*v25)(uint64_t);
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;

  *a1 = *a2;
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = &a1[v6];
    v8 = &a2[v6];
    v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&a1[v6], &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, &qword_25713A1C8, v9, v10);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = sub_2416B9C10();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(void **)&a1[v12];
  v16 = *(void **)&a2[v12];
  *v13 = v16;
  v17 = v16;

  v13[1] = *((_QWORD *)v14 + 1);
  v18 = a3[7];
  v19 = *(void **)&a2[v18];
  v20 = *(void **)&a1[v18];
  *(_QWORD *)&a1[v18] = v19;
  v21 = v19;

  if (a1 != a2)
  {
    v22 = a3[8];
    v23 = &a1[v22];
    v24 = &a2[v22];
    v25 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038];
    v26 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&a1[v22], (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, v25, v26);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v27 = sub_2416BA06C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v23, v24, v27);
    }
    else
    {
      *v23 = *v24;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = *(_QWORD *)v30;
  LOBYTE(v30) = v30[8];
  *(_QWORD *)v29 = v31;
  v29[8] = (_BYTE)v30;
  swift_retain();
  swift_release();
  return a1;
}

_BYTE *sub_2416A6218(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v10 = v9;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_2416B9C10();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  v13 = a3[8];
  v14 = &a1[v13];
  v15 = &a2[v13];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v17 = v16;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = sub_2416BA06C();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v14, v15, v18);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  v19 = a3[9];
  v20 = &a1[v19];
  v21 = &a2[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  return a1;
}

_BYTE *sub_2416A63A0(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;

  *a1 = *a2;
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = &a1[v6];
    v8 = &a2[v6];
    v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&a1[v6], &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, &qword_25713A1C8, v9, v10);
    v12 = v11;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v13 = sub_2416B9C10();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v7, v8, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = *(void **)&a1[v14];
  *v15 = *v16;

  v15[1] = v16[1];
  v18 = a3[7];
  v19 = *(void **)&a1[v18];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];

  if (a1 != a2)
  {
    v20 = a3[8];
    v21 = &a1[v20];
    v22 = &a2[v20];
    v23 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038];
    v24 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&a1[v20], (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, v23, v24);
    v26 = v25;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v27 = sub_2416BA06C();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v21, v22, v27);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
  }
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = *(_QWORD *)v30;
  LOBYTE(v30) = v30[8];
  *(_QWORD *)v29 = v31;
  v29[8] = (_BYTE)v30;
  swift_release();
  return a1;
}

uint64_t sub_2416A65AC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416A65B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
    v8 = v12;
    v7 = *(_QWORD *)(v12 - 8);
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[7]);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_2416A668C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_2416A6698(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[7]) = (a2 - 1);
      return;
    }
    sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
    v10 = v12;
    v9 = *(_QWORD *)(v12 - 8);
    v11 = a4[8];
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for MedicalIDNavigationBarViewModifier()
{
  uint64_t result;

  result = qword_257140000;
  if (!qword_257140000)
    return swift_getSingletonMetadata();
  return result;
}

void sub_2416A67A4()
{
  unint64_t v0;
  unint64_t v1;

  sub_24159D6B0(319, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (v0 <= 0x3F)
  {
    sub_24159D6B0(319, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_2416A6884()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2416A6894()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257140050)
  {
    type metadata accessor for MedicalIDNavigationBarViewModifier();
    sub_24159CE88(&qword_25713A518, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDNavigationBarViewModifier, (uint64_t)&unk_2416C3190);
    v0 = sub_2416BA648();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257140050);
  }
}

uint64_t sub_2416A690C()
{
  return sub_24159CE88(&qword_257140058, (uint64_t (*)(uint64_t))sub_2416A6894, MEMORY[0x24BDEFB78]);
}

void sub_2416A6928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  if (!qword_257140060)
  {
    sub_24163DC38(255, &qword_257140048, (uint64_t (*)(uint64_t))sub_2416A6894, sub_2416A690C, MEMORY[0x24BDF33A8]);
    v3 = v2;
    sub_2416A6A6C(255, &qword_257140068, &qword_257140070, (uint64_t (*)(uint64_t))sub_2416A6AF8, (uint64_t (*)(void))sub_2416A6BE0);
    v5 = v4;
    sub_2416A6894();
    sub_2416A690C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    sub_24159D6B0(255, &qword_257140070, (uint64_t (*)(uint64_t))sub_2416A6AF8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_2416A6BE0();
    v9[0] = v3;
    v9[1] = v5;
    v9[2] = OpaqueTypeConformance2;
    v9[3] = swift_getOpaqueTypeConformance2();
    v7 = MEMORY[0x242699480](a1, v9, MEMORY[0x24BDF3858], 0);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_257140060);
  }
}

void sub_2416A6A6C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(void))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  if (!*a2)
  {
    sub_24159D6B0(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v11[0] = v8;
    v11[1] = a5();
    v9 = MEMORY[0x242699480](a1, v11, MEMORY[0x24BDEFA90], 0);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_2416A6AF8(uint64_t a1)
{
  sub_24163DC38(a1, &qword_257140078, (uint64_t (*)(uint64_t))sub_2416A6B1C, sub_2416A6BC4, MEMORY[0x24BDEFA90]);
}

void sub_2416A6B1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257140080)
  {
    sub_2416A6B80();
    v0 = sub_2416B9FF4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257140080);
  }
}

unint64_t sub_2416A6B80()
{
  unint64_t result;

  result = qword_257140088;
  if (!qword_257140088)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDNavigationBarView, &type metadata for MedicalIDNavigationBarView);
    atomic_store(result, (unint64_t *)&qword_257140088);
  }
  return result;
}

uint64_t sub_2416A6BC4()
{
  return sub_24159CE88(&qword_257140090, (uint64_t (*)(uint64_t))sub_2416A6B1C, MEMORY[0x24BDEB848]);
}

unint64_t sub_2416A6BE0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[3];

  result = qword_257140098;
  if (!qword_257140098)
  {
    sub_24159D6B0(255, &qword_257140070, (uint64_t (*)(uint64_t))sub_2416A6AF8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v2 = v1;
    sub_2416A6B1C();
    v4[1] = v3;
    v4[2] = sub_2416A6BC4();
    v4[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5568], v2, v4);
    atomic_store(result, (unint64_t *)&qword_257140098);
  }
  return result;
}

uint64_t sub_2416A6C7C()
{
  uint64_t v0;

  return sub_2416A4A70(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2416A6C84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2416A5008(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_2416A6C8C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[3];

  result = qword_2571400B0;
  if (!qword_2571400B0)
  {
    sub_24159D6B0(255, &qword_2571400A8, (uint64_t (*)(uint64_t))sub_2415E881C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v2 = v1;
    sub_2415E88A8();
    v4[1] = v3;
    v4[2] = sub_24163D708();
    v4[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5568], v2, v4);
    atomic_store(result, (unint64_t *)&qword_2571400B0);
  }
  return result;
}

uint64_t sub_2416A6D28()
{
  uint64_t v0;

  return sub_2416A5404(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2416A6D30()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (int *)type metadata accessor for MedicalIDNavigationBarViewModifier();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = v3 + v1[5];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_2416B9C10();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }

  v6 = v3 + v1[8];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2416A6E84()
{
  type metadata accessor for MedicalIDNavigationBarViewModifier();
  return sub_2416A55E4();
}

uint64_t sub_2416A6EB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2416A4DBC(*(char **)(v1 + 16), a1);
}

uint64_t sub_2416A6EC0()
{
  uint64_t (*v0)(uint64_t, uint64_t);

  sub_2416A6928(255);
  sub_2416A6A6C(255, &qword_2571400A0, &qword_2571400A8, (uint64_t (*)(uint64_t))sub_2415E881C, (uint64_t (*)(void))sub_2416A6C8C);
  sub_24163DC38(255, &qword_257140048, (uint64_t (*)(uint64_t))sub_2416A6894, sub_2416A690C, MEMORY[0x24BDF33A8]);
  sub_2416A6A6C(255, &qword_257140068, &qword_257140070, (uint64_t (*)(uint64_t))sub_2416A6AF8, (uint64_t (*)(void))sub_2416A6BE0);
  sub_2416A6894();
  sub_2416A690C();
  swift_getOpaqueTypeConformance2();
  v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_24159D6B0(255, &qword_257140070, (uint64_t (*)(uint64_t))sub_2416A6AF8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  sub_2416A6BE0();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  sub_24159D6B0(255, &qword_2571400A8, (uint64_t (*)(uint64_t))sub_2415E881C, v0);
  sub_2416A6C8C();
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2416A707C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[8];

  type metadata accessor for MedicalIDEditableEmergencyContactsModel();
  sub_24159CE88((unint64_t *)&qword_25713A5F0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, (uint64_t)&protocol conformance descriptor for MedicalIDEditableEmergencyContactsModel);
  sub_2416BAEE8();
  v4 = (int *)type metadata accessor for AddEmergencyContactView(0);
  *(_QWORD *)(a2 + v4[5]) = a1;
  v5 = (_QWORD *)(a2 + v4[6]);
  type metadata accessor for AddEmergencyContactFlowViewModel(0);
  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 16) = 2;
  sub_241628618(v11);
  sub_2416279E0((uint64_t)v11, v6 + 24);
  *(_WORD *)(v6 + 152) = 0;
  *(_BYTE *)(v6 + 154) = 0;
  *(_QWORD *)(v6 + 160) = 0;
  *(_QWORD *)(v6 + 168) = 0;
  sub_2416B9CD0();
  sub_2416BAD08();
  *v5 = v9;
  v5[1] = v10;
  v7 = a2 + v4[7];
  result = swift_getKeyPath();
  *(_QWORD *)v7 = result;
  *(_BYTE *)(v7 + 8) = 0;
  return result;
}

uint64_t sub_2416A719C()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_2416A7220@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

uint64_t sub_2416A72AC()
{
  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CA0();
  return swift_release();
}

_QWORD *sub_2416A7354@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[16];

  swift_getKeyPath();
  v4[0] = v1;
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  swift_release();
  sub_2416279E0(v1 + 24, (uint64_t)v4);
  sub_2416279E0((uint64_t)v4, a1);
  return sub_2416A7FAC(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2416A7ED4);
}

_QWORD *sub_2416A7400@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD v5[16];

  v3 = *a1;
  swift_getKeyPath();
  v5[0] = v3;
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  swift_release();
  sub_2416279E0(v3 + 24, (uint64_t)v5);
  sub_2416279E0((uint64_t)v5, a2);
  return sub_2416A7FAC(v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2416A7ED4);
}

uint64_t sub_2416A74AC(uint64_t a1)
{
  _QWORD v3[16];
  _BYTE v4[128];

  sub_2416279E0(a1, (uint64_t)v3);
  sub_2416279E0(a1, (uint64_t)v4);
  swift_getKeyPath();
  sub_2416A7FAC(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2416A7ED4);
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CA0();
  sub_2416A7FAC(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241627AAC);
  return swift_release();
}

_QWORD *sub_2416A7594(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD v5[16];

  v3 = a1 + 24;
  sub_2416279E0(a1 + 24, (uint64_t)v5);
  sub_2416279E0((uint64_t)a2, v3);
  sub_2416A7FAC(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2416A7ED4);
  return sub_2416A7FAC(v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241627AAC);
}

uint64_t sub_2416A7604()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  swift_release();
  return *(unsigned __int8 *)(v0 + 152);
}

uint64_t sub_2416A7688@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 152);
  return result;
}

uint64_t sub_2416A7714()
{
  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CA0();
  return swift_release();
}

uint64_t sub_2416A77BC()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  swift_release();
  return *(unsigned __int8 *)(v0 + 153);
}

uint64_t sub_2416A7840@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 153);
  return result;
}

uint64_t sub_2416A78CC()
{
  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CA0();
  return swift_release();
}

uint64_t sub_2416A7974()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  swift_release();
  return *(unsigned __int8 *)(v0 + 154);
}

uint64_t sub_2416A79F8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 154);
  return result;
}

uint64_t sub_2416A7A84()
{
  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CA0();
  return swift_release();
}

uint64_t sub_2416A7B2C()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  swift_release();
  v1 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2416A7BC0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  swift_release();
  v4 = *(_QWORD *)(v3 + 168);
  *a2 = *(_QWORD *)(v3 + 160);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2416A7C50()
{
  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  swift_bridgeObjectRetain();
  sub_2416B9CA0();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2416A7D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[16];

  sub_2416279E0(v0 + 24, (uint64_t)v4);
  sub_2416A7FAC(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241627AAC);
  swift_bridgeObjectRelease();
  v1 = v0
     + OBJC_IVAR____TtC11MedicalIDUIP33_651567AA3A8EF6C66B67A47E9FA4DE6932AddEmergencyContactFlowViewModel___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_2416A7D8C()
{
  return type metadata accessor for AddEmergencyContactFlowViewModel(0);
}

uint64_t type metadata accessor for AddEmergencyContactFlowViewModel(uint64_t a1)
{
  return sub_2415C5864(a1, qword_2571400F0);
}

uint64_t sub_2416A7DA8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2416B9CDC();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_2416A7E48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v2 = v0[4];
  *(_QWORD *)(v1 + 160) = v0[3];
  *(_QWORD *)(v1 + 168) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void sub_2416A7E8C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 154) = *(_BYTE *)(v0 + 24);
}

void sub_2416A7EA4()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 153) = *(_BYTE *)(v0 + 24);
}

void sub_2416A7EBC()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 152) = *(_BYTE *)(v0 + 24);
}

id sub_2416A7ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  id result;
  id v15;

  result = a13;
  if (a13)
  {
    v15 = a14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a13;
  }
  return result;
}

_QWORD *sub_2416A7F94()
{
  uint64_t v0;

  return sub_2416A7594(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

_QWORD *sub_2416A7FAC(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  return a1;
}

uint64_t type metadata accessor for AddEmergencyContactView(uint64_t a1)
{
  return sub_2415C5864(a1, qword_257140338);
}

void sub_2416A8024(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  ValueMetadata *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  ValueMetadata *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  unint64_t v98;
  unint64_t OpaqueTypeConformance2;
  uint64_t *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  unint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  _QWORD *v142;
  uint64_t v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  _QWORD v147[16];
  _QWORD *v148;
  ValueMetadata *v149;
  unint64_t v150;
  unint64_t v151;

  v2 = v1;
  v119 = a1;
  v3 = type metadata accessor for AddEmergencyContactView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  sub_2416AB440();
  v7 = v6;
  v129 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416AB7E8();
  v102 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v121 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416AB84C(0);
  v103 = *(_QWORD *)(v12 - 8);
  v104 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v122 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416AB9B8(0);
  v123 = v14;
  v106 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v105 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416ABACC(0);
  v107 = *(_QWORD *)(v16 - 8);
  v108 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v124 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416ABCC8(0);
  v109 = *(_QWORD *)(v18 - 8);
  v110 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v125 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416ABEE8(0);
  v112 = *(_QWORD *)(v20 - 8);
  v113 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v111 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BE730(0, &qword_257140428, v22);
  v114 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v117 = (char *)&v97 - v24;
  sub_2416AC164(0);
  v118 = v25;
  v116 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v115 = (char *)&v97 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEF64(v1, (uint64_t)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AddEmergencyContactView);
  v27 = *(unsigned __int8 *)(v4 + 80);
  v28 = (v27 + 16) & ~v27;
  v128 = v28 + v5;
  v130 = v27 | 7;
  v29 = swift_allocObject();
  v131 = v28;
  v126 = (uint64_t)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415A85BC(v126, v29 + v28, type metadata accessor for AddEmergencyContactView);
  sub_2415BE730(0, &qword_257140380, (void (*)(uint64_t))sub_2416AB4B8);
  sub_2416AB750();
  sub_2416BAD50();
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_2416BCC80;
  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  sub_2416BAED0();
  v32 = v148[4];
  v31 = v148[5];
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)(v30 + 32) = v32;
  *(_QWORD *)(v30 + 40) = v31;
  *(_QWORD *)(v30 + 48) = 6579265;
  *(_QWORD *)(v30 + 56) = 0xE300000000000000;
  v33 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v34 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v34)
  {
    sub_2416BB128();

    sub_24159CE88(&qword_2571403E8, (uint64_t (*)(uint64_t))sub_2416AB440, MEMORY[0x24BDF43B0]);
    v35 = (uint64_t)v121;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v129 + 8))(v9, v7);
    v101 = v3;
    v36 = (uint64_t *)(v2 + *(int *)(v3 + 24));
    v37 = v36[1];
    v147[0] = *v36;
    v147[1] = v37;
    sub_24159D6B0(0, &qword_257140448, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    v129 = v38;
    sub_2416BAD2C();
    v39 = v148;
    v40 = v149;
    v41 = v150;
    swift_getKeyPath();
    v127 = v2;
    v148 = v39;
    v149 = v40;
    v150 = v41;
    sub_24159D6B0(0, &qword_257140450, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    v120 = v42;
    sub_2416BAE28();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v43 = v126;
    sub_2415BEF64(v2, v126, type metadata accessor for AddEmergencyContactView);
    v44 = swift_allocObject();
    sub_2415A85BC(v43, v44 + v131, type metadata accessor for AddEmergencyContactView);
    v98 = sub_2416AB8DC();
    OpaqueTypeConformance2 = sub_2416AB974();
    v45 = v102;
    sub_2416BAB70();
    swift_release();
    swift_release();
    swift_release();
    sub_2415A6154(v35, (uint64_t (*)(_QWORD))sub_2416AB7E8);
    v46 = (ValueMetadata *)v36[1];
    v148 = (_QWORD *)*v36;
    v149 = v46;
    sub_2416BAD14();
    v47 = (_QWORD *)v147[0];
    swift_getKeyPath();
    v148 = v47;
    v121 = (char *)sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
    sub_2416B9CAC();
    swift_release();
    sub_2416279E0((uint64_t)(v47 + 3), (uint64_t)v147);
    sub_2416A7FAC(v147, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2416A7ED4);
    swift_release();
    sub_2416279E0((uint64_t)v147, (uint64_t)&v139);
    sub_2415BEF64(v127, v43, type metadata accessor for AddEmergencyContactView);
    v48 = swift_allocObject();
    sub_2415A85BC(v43, v48 + v131, type metadata accessor for AddEmergencyContactView);
    sub_24159D7F0(0, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v97 = v49;
    v148 = v45;
    v149 = &type metadata for EmergencyContactPickerSheetView;
    v150 = v98;
    v151 = OpaqueTypeConformance2;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v102 = (_QWORD *)sub_2416ABC5C(&qword_257140400, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(void))sub_2415DAAD0);
    v51 = v104;
    v50 = v105;
    v52 = v122;
    sub_2416BABE8();
    swift_release();
    sub_2416279E0((uint64_t)&v139, (uint64_t)&v148);
    sub_2416A7FAC(&v148, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241627AAC);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v52, v51);
    v53 = (char *)v36[1];
    v139 = *v36;
    v140 = v53;
    sub_2416BAD14();
    v54 = v134;
    swift_getKeyPath();
    v139 = v54;
    sub_2416B9CAC();
    swift_release();
    LOBYTE(v52) = *(_BYTE *)(v54 + 16);
    swift_release();
    LOBYTE(v134) = (_BYTE)v52;
    sub_2415BEF64(v127, v43, type metadata accessor for AddEmergencyContactView);
    v55 = swift_allocObject();
    sub_2415A85BC(v43, v55 + v131, type metadata accessor for AddEmergencyContactView);
    sub_24159D7F0(0, &qword_25713EB20, (uint64_t)&type metadata for EmergencyContactPickerError, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v57 = v56;
    v139 = v51;
    v140 = v97;
    v141 = (char *)OpaqueTypeConformance2;
    v142 = v102;
    v58 = swift_getOpaqueTypeConformance2();
    v59 = sub_2416ABC5C(&qword_257140410, &qword_25713EB20, (uint64_t)&type metadata for EmergencyContactPickerError, (uint64_t (*)(void))sub_241662B24);
    v60 = v123;
    v122 = v57;
    v103 = v58;
    v104 = v59;
    sub_2416BABE8();
    swift_release();
    (*(void (**)(char *, unint64_t))(v106 + 8))(v50, v60);
    v61 = (char *)v36[1];
    v139 = *v36;
    v140 = v61;
    sub_2416BAD14();
    v62 = v134;
    swift_getKeyPath();
    v139 = v62;
    sub_2416B9CAC();
    swift_release();
    v63 = *(unsigned __int8 *)(v62 + 16);
    swift_release();
    if (v63 == 2)
    {
      v64 = 0;
      v65 = 0xE000000000000000;
    }
    else
    {
      sub_241661254(v63 & 1, &v139);
      v64 = v139;
      v65 = (unint64_t)v140;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v137 = v64;
    v138 = v65;
    v66 = v36[1];
    v134 = *v36;
    v135 = v66;
    sub_2416BAD2C();
    v67 = v139;
    v68 = v140;
    v69 = v141;
    swift_getKeyPath();
    v139 = v67;
    v140 = v68;
    v141 = v69;
    sub_2416BAE28();
    swift_release();
    swift_release();
    swift_release();
    v70 = swift_release();
    v102 = &v97;
    LODWORD(OpaqueTypeConformance2) = v136;
    v71 = MEMORY[0x24BDAC7A8](v70);
    MEMORY[0x24BDAC7A8](v71);
    sub_2415A3D28(0, (unint64_t *)&qword_25713B4D8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF4398]);
    v105 = v72;
    v139 = v123;
    v140 = v122;
    v141 = (char *)v103;
    v142 = (_QWORD *)v104;
    v106 = swift_getOpaqueTypeConformance2();
    v122 = (char *)sub_2415C343C();
    v123 = sub_2415E8934();
    v73 = v108;
    v74 = v124;
    sub_2416BAB64();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v107 + 8))(v74, v73);
    v100 = v36;
    v75 = v36[1];
    v132 = *v36;
    v133 = v75;
    sub_2416BAD2C();
    v76 = v139;
    v77 = v140;
    v78 = v141;
    swift_getKeyPath();
    v139 = v76;
    v140 = v77;
    v141 = v78;
    sub_2416BAE28();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v79 = v126;
    v80 = v127;
    sub_2415BEF64(v127, v126, type metadata accessor for AddEmergencyContactView);
    v81 = swift_allocObject();
    sub_2415A85BC(v79, v81 + v131, type metadata accessor for AddEmergencyContactView);
    type metadata accessor for RelationshipPickerView();
    v139 = v73;
    v140 = (char *)MEMORY[0x24BEE0D00];
    v141 = v105;
    v142 = (_QWORD *)MEMORY[0x24BDF1FA8];
    v143 = v106;
    v144 = v122;
    v145 = v123;
    v146 = MEMORY[0x24BDF1F80];
    swift_getOpaqueTypeConformance2();
    sub_24159CE88(&qword_25713C3B0, (uint64_t (*)(uint64_t))type metadata accessor for RelationshipPickerView, (uint64_t)&unk_2416C3610);
    v82 = v110;
    v83 = v111;
    v84 = v125;
    sub_2416BAB70();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v84, v82);
    v85 = v80 + *(int *)(v101 + 28);
    v86 = *(_QWORD *)v85;
    LOBYTE(v76) = *(_BYTE *)(v85 + 8);
    sub_2416AAE84(*(_QWORD *)v85, v76);
    LOBYTE(v82) = sub_2415C1BDC(v86, v76);
    sub_2415C38C8(v86, v76);
    if ((v82 & 1) != 0)
      v87 = 1.0;
    else
      v87 = 0.6;
    v89 = v112;
    v88 = v113;
    v90 = (uint64_t)v117;
    (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v117, v83, v113);
    *(double *)(v90 + *(int *)(v114 + 36)) = v87;
    (*(void (**)(char *, uint64_t))(v89 + 8))(v83, v88);
    v91 = v100[1];
    v139 = *v100;
    v140 = (char *)v91;
    sub_2416BAD14();
    v92 = v134;
    swift_getKeyPath();
    v139 = v92;
    sub_2416B9CAC();
    swift_release();
    v94 = *(_QWORD *)(v92 + 160);
    v93 = *(char **)(v92 + 168);
    swift_bridgeObjectRetain();
    swift_release();
    v139 = v94;
    v140 = v93;
    sub_2415BEF64(v80, v79, type metadata accessor for AddEmergencyContactView);
    v95 = swift_allocObject();
    sub_2415A85BC(v79, v95 + v131, type metadata accessor for AddEmergencyContactView);
    sub_24159D7F0(0, (unint64_t *)&qword_25713A910, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    sub_2416AC228();
    sub_2416AC4D4();
    v96 = v115;
    sub_2416BABE8();
    swift_release();
    swift_bridgeObjectRelease();
    sub_2415C2970(v90, (uint64_t)&qword_257140428, (uint64_t)sub_2416ABEE8, MEMORY[0x24BDECC50], (uint64_t (*)(_QWORD))sub_2415BE730);
    (*(void (**)(uint64_t, char *, uint64_t))(v116 + 32))(v119, v96, v118);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_2416A8FD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  _OWORD v6[8];

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  sub_2416BAED0();
  swift_getKeyPath();
  sub_24159CE88((unint64_t *)&qword_25713A5F0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, (uint64_t)&protocol conformance descriptor for MedicalIDEditableEmergencyContactsModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v0 = *(_QWORD *)(*(_QWORD *)&v6[0] + 16);
  swift_bridgeObjectRetain();
  swift_release();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRelease();
  if (HKMedicalIDEmergencyContactsIsUnderLimit(v1))
  {
    type metadata accessor for AddEmergencyContactFlowViewModel(0);
    v2 = swift_allocObject();
    *(_BYTE *)(v2 + 16) = 2;
    sub_241628618(v6);
    sub_2416279E0((uint64_t)v6, v2 + 24);
    *(_WORD *)(v2 + 152) = 0;
    *(_BYTE *)(v2 + 154) = 0;
    *(_QWORD *)(v2 + 160) = 0;
    *(_QWORD *)(v2 + 168) = 0;
    sub_2416B9CD0();
    type metadata accessor for AddEmergencyContactView(0);
    sub_24159D6B0(0, &qword_257140448, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    sub_2416BAD20();
    sub_2416BAD14();
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
    sub_2416B9CA0();
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for AddEmergencyContactView(0);
    sub_24159D6B0(0, &qword_257140448, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    sub_2416BAD14();
    v5 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v5);
    sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
    sub_2416B9CA0();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_2416A931C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  sub_2416AB4B8();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2416BA468();
  if (qword_2571395D8 != -1)
    swift_once();
  v6 = qword_2571400B8;
  *(_QWORD *)v4 = v5;
  *((_QWORD *)v4 + 1) = v6;
  v4[16] = 0;
  sub_2416AC748();
  sub_2416A9454((uint64_t)&v4[*(int *)(v7 + 44)]);
  v8 = sub_2416BA840();
  sub_2416B9EF8();
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  sub_2415BEF64((uint64_t)v4, a1, (uint64_t (*)(_QWORD))sub_2416AB4B8);
  sub_2415BE730(0, &qword_257140380, (void (*)(uint64_t))sub_2416AB4B8);
  v18 = a1 + *(int *)(v17 + 36);
  *(_BYTE *)v18 = v8;
  *(_QWORD *)(v18 + 8) = v10;
  *(_QWORD *)(v18 + 16) = v12;
  *(_QWORD *)(v18 + 24) = v14;
  *(_QWORD *)(v18 + 32) = v16;
  *(_BYTE *)(v18 + 40) = 0;
  return sub_2415A6154((uint64_t)v4, (uint64_t (*)(_QWORD))sub_2416AB4B8);
}

uint64_t sub_2416A9454@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v53 = a1;
  sub_24159D6B0(0, &qword_25713FF68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF40C0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
  v51 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (uint64_t *)((char *)&v48 - v2);
  v4 = sub_2416BACD8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416AB618();
  v49 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2416AB594();
  v52 = (char *)v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v50 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v48 - v14;
  v16 = sub_2416BACC0();
  v17 = sub_2416BA87C();
  KeyPath = swift_getKeyPath();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDF40A8], v4);
  v19 = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)v3 + *(int *)(v51 + 28), v7, v4);
  *v3 = v19;
  sub_2416AC7D4((uint64_t)v3, (uint64_t)v10 + *(int *)(v49 + 36));
  *v10 = v16;
  v10[1] = KeyPath;
  v10[2] = v17;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_2415C2970((uint64_t)v3, (uint64_t)&qword_25713FF68, (uint64_t)MEMORY[0x24BDF40C0], (uint64_t)MEMORY[0x24BDF1008], (uint64_t (*)(_QWORD))sub_24159D6B0);
  v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21 = (uint64_t)v50;
  v20(v7, v4);
  swift_release();
  swift_release();
  swift_release();
  v22 = sub_2416BAC48();
  sub_2415BEF64((uint64_t)v10, v21, (uint64_t (*)(_QWORD))sub_2416AB618);
  *(_QWORD *)(v21 + *((int *)v52 + 9)) = v22;
  sub_2415A6154((uint64_t)v10, (uint64_t (*)(_QWORD))sub_2416AB618);
  v52 = v15;
  sub_2415A85BC(v21, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_2416AB594);
  sub_2416BA4C8();
  if (qword_257139300 != -1)
    swift_once();
  v23 = (id)qword_25713A038;
  v24 = sub_2416BA9CC();
  v26 = v25;
  v28 = v27 & 1;
  v54 = sub_2416BAC60();
  v29 = sub_2416BA990();
  v31 = v30;
  v33 = v32 & 1;
  sub_2415A431C(v24, v26, v28);
  swift_release();
  swift_bridgeObjectRelease();
  sub_2416BA87C();
  v34 = sub_2416BA9C0();
  v36 = v35;
  v38 = v37;
  v40 = v39;
  swift_release();
  sub_2415A431C(v29, v31, v33);
  swift_bridgeObjectRelease();
  v41 = (uint64_t)v52;
  sub_2415BEF64((uint64_t)v52, v21, (uint64_t (*)(_QWORD))sub_2416AB594);
  v42 = v21;
  v43 = v21;
  v44 = v53;
  sub_2415BEF64(v42, v53, (uint64_t (*)(_QWORD))sub_2416AB594);
  sub_2416AB530();
  v46 = v44 + *(int *)(v45 + 48);
  *(_QWORD *)v46 = v34;
  *(_QWORD *)(v46 + 8) = v36;
  *(_BYTE *)(v46 + 16) = v38 & 1;
  *(_QWORD *)(v46 + 24) = v40;
  sub_2415A43C8(v34, v36, v38 & 1);
  swift_bridgeObjectRetain();
  sub_2415A6154(v41, (uint64_t (*)(_QWORD))sub_2416AB594);
  sub_2415A431C(v34, v36, v38 & 1);
  swift_bridgeObjectRelease();
  return sub_2415A6154(v43, (uint64_t (*)(_QWORD))sub_2416AB594);
}

double sub_2416A9904@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 *v7;
  double result;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  sub_2416BAED0();
  v10 = sub_2415C3F2C();
  swift_release();
  sub_2416BAED0();
  v4 = *(_QWORD *)(v23 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  v5 = type metadata accessor for AddEmergencyContactView(0);
  v6 = *(void **)(a1 + *(int *)(v5 + 20));
  v7 = (__int128 *)(a1 + *(int *)(v5 + 24));
  v14 = *v7;
  sub_24159D6B0(0, &qword_257140448, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v9 = v6;
  sub_2416BAD2C();
  swift_getKeyPath();
  sub_24159D6B0(0, &qword_257140450, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  sub_2416BAE28();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v11 = *(_QWORD *)v7;
  v12 = *((_QWORD *)v7 + 1);
  sub_2416BAD2C();
  swift_getKeyPath();
  sub_2416BAE28();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(_OWORD *)(a2 + 104) = v19;
  *(_OWORD *)(a2 + 120) = v20;
  *(_OWORD *)(a2 + 136) = v21;
  *(_OWORD *)(a2 + 152) = v22;
  *(_OWORD *)(a2 + 40) = v15;
  result = *(double *)&v16;
  *(_OWORD *)(a2 + 56) = v16;
  *(_OWORD *)(a2 + 72) = v17;
  *(_OWORD *)(a2 + 88) = v18;
  *(_OWORD *)(a2 + 24) = v14;
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 168) = v11;
  *(_QWORD *)(a2 + 176) = v12;
  *(_BYTE *)(a2 + 184) = v13;
  return result;
}

uint64_t sub_2416A9B70(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  _QWORD v4[16];
  _QWORD v5[16];

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AddEmergencyContactView(0) + 24) + 8);
  sub_24159D6B0(0, &qword_257140448, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v5[1] = v1;
  sub_2416BAD14();
  swift_getKeyPath();
  v5[0] = v4[0];
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  swift_release();
  sub_2416279E0(v4[0] + 24, (uint64_t)v4);
  sub_2416A7FAC(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2416A7ED4);
  swift_release();
  sub_2416279E0((uint64_t)v4, (uint64_t)v5);
  if (sub_241627A3C((uint64_t)v5) != 1)
    sub_2416A7FAC(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241627AAC);
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  sub_2416B9CA0();
  swift_release();
  return swift_release();
}

uint64_t sub_2416A9D48()
{
  type metadata accessor for AddEmergencyContactView(0);
  sub_24159D6B0(0, &qword_257140448, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  sub_2416BAD14();
  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  swift_release();
  swift_release();
  swift_getKeyPath();
  sub_2416B9CA0();
  swift_release();
  return swift_release();
}

uint64_t sub_2416A9EAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v27 = a2;
  v3 = type metadata accessor for AddEmergencyContactView(0);
  v25 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v25 + 64);
  MEMORY[0x24BDAC7A8](v3);
  sub_24159D6B0(0, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v25 - v6;
  sub_2415A3D28(0, (unint64_t *)&qword_25713B4D8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF4398]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v25 - v11;
  v13 = *(int *)(v3 + 24);
  v26 = a1;
  v14 = (uint64_t *)(a1 + v13);
  v16 = *v14;
  v15 = v14[1];
  v28 = v16;
  v29 = v15;
  sub_24159D6B0(0, &qword_257140448, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v17 = v32;
  swift_getKeyPath();
  v28 = v17;
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  swift_release();
  v18 = *(unsigned __int8 *)(v17 + 16);
  swift_release();
  if (v18 == 2)
  {
    v19 = 0;
    v20 = 0xE000000000000000;
  }
  else
  {
    sub_241661254(v18 & 1, &v28);
    v19 = v30;
    v20 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v28 = v19;
  v29 = v20;
  sub_2416B9EB0();
  v21 = sub_2416B9EBC();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v7, 0, 1, v21);
  sub_2415BEF64(v26, (uint64_t)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AddEmergencyContactView);
  v22 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  v23 = swift_allocObject();
  sub_2415A85BC((uint64_t)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22, type metadata accessor for AddEmergencyContactView);
  sub_2415C343C();
  sub_2416BAD5C();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v27, v12, v9);
}

uint64_t sub_2416AA168()
{
  type metadata accessor for AddEmergencyContactView(0);
  sub_24159D6B0(0, &qword_257140448, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  swift_getKeyPath();
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CA0();
  swift_release();
  swift_release();
  sub_2416BAD14();
  swift_getKeyPath();
  sub_2416B9CA0();
  swift_release();
  return swift_release();
}

uint64_t sub_2416AA2F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v11 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AddEmergencyContactView(0) + 24) + 8);
  sub_24159D6B0(0, &qword_257140448, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  swift_getKeyPath();
  v10 = v14;
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  swift_release();
  v3 = *(unsigned __int8 *)(v14 + 16);
  swift_release();
  if (v3 == 2)
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  else
  {
    sub_241661254(v3 & 1, &v10);
    v4 = v12;
    v5 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v10 = v4;
  v11 = v5;
  sub_2415C343C();
  result = sub_2416BA9D8();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t sub_2416AA438@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  id v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD v40[16];
  _QWORD v41[17];

  v30 = a2;
  v3 = (int *)type metadata accessor for RelationshipPickerView();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(int *)(type metadata accessor for AddEmergencyContactView(0) + 24);
  v29 = a1;
  v7 = (_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  v41[0] = *(_QWORD *)(a1 + v6);
  v41[1] = v8;
  sub_24159D6B0(0, &qword_257140448, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v9 = v40[0];
  swift_getKeyPath();
  v41[0] = v9;
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  swift_release();
  sub_2416279E0(v9 + 24, (uint64_t)v40);
  sub_2416279E0((uint64_t)v40, (uint64_t)&v35);
  sub_2416A7FAC(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2416A7ED4);
  swift_release();
  sub_2416279E0((uint64_t)v40, (uint64_t)v41);
  v10 = 0;
  if (sub_241627A3C((uint64_t)v41) != 1)
  {
    v11 = v39;
    sub_2416279E0((uint64_t)&v35, (uint64_t)&v33);
    v10 = v11;
    sub_2416A7FAC(&v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_241627AAC);
  }
  v12 = v7[1];
  *(_QWORD *)&v33 = *v7;
  *((_QWORD *)&v33 + 1) = v12;
  sub_2416BAD2C();
  v13 = v35;
  v14 = v36;
  v15 = v37;
  swift_getKeyPath();
  *(_QWORD *)&v33 = v13;
  *((_QWORD *)&v33 + 1) = v14;
  v34 = v15;
  sub_24159D6B0(0, &qword_257140450, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  sub_2416BAE28();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v16 = v35;
  v17 = v36;
  v18 = v37;
  v19 = v38;
  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  sub_2416BAED0();
  v20 = *(_QWORD *)(v33 + 40);
  v29 = *(_QWORD *)(v33 + 32);
  swift_bridgeObjectRetain();
  swift_release();
  *v5 = swift_getKeyPath();
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v21 = (char *)v5 + v3[6];
  sub_24159D7F0(0, (unint64_t *)&qword_25713A910, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v31 = 0;
  v32 = 0;
  sub_2416BAD08();
  v22 = v34;
  *(_OWORD *)v21 = v33;
  *((_QWORD *)v21 + 2) = v22;
  v23 = (uint64_t *)((char *)v5 + v3[5]);
  *v23 = v16;
  v23[1] = v17;
  v23[2] = v18;
  v23[3] = v19;
  v24 = objc_allocWithZone((Class)MIUIRelationshipPickerDataSource);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v25 = objc_msgSend(v24, sel_initWithContact_, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  *(uint64_t *)((char *)v5 + v3[7]) = (uint64_t)v25;
  v26 = (uint64_t *)((char *)v5 + v3[8]);
  v27 = v30;
  *v26 = v29;
  v26[1] = v20;
  return sub_2415A85BC((uint64_t)v5, v27, (uint64_t (*)(_QWORD))type metadata accessor for RelationshipPickerView);
}

uint64_t sub_2416AA7D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  _OWORD v40[5];
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _QWORD v68[16];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;

  v1 = a1 + *(int *)(type metadata accessor for AddEmergencyContactView(0) + 24);
  *((_QWORD *)&v69 + 1) = *(_QWORD *)(v1 + 8);
  sub_24159D6B0(0, &qword_257140448, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  swift_getKeyPath();
  *(_QWORD *)&v69 = v68[0];
  sub_24159CE88(qword_2571402D8, type metadata accessor for AddEmergencyContactFlowViewModel, (uint64_t)&unk_2416C32E8);
  sub_2416B9CAC();
  swift_release();
  sub_2416279E0(v68[0] + 24, (uint64_t)v68);
  sub_2416A7FAC(v68, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2416A7ED4);
  swift_release();
  sub_2416279E0((uint64_t)v68, (uint64_t)&v69);
  result = sub_241627A3C((uint64_t)&v69);
  if ((_DWORD)result != 1)
  {
    v3 = *((_QWORD *)&v69 + 1);
    v36 = v69;
    v4 = *((_QWORD *)&v70 + 1);
    v5 = *((_QWORD *)&v71 + 1);
    v34 = v71;
    v35 = v70;
    v6 = *((_QWORD *)&v72 + 1);
    v7 = *((_QWORD *)&v73 + 1);
    v31 = v77;
    v32 = v72;
    v8 = *((_QWORD *)&v77 + 1);
    v66 = v72;
    v67 = v73;
    v64 = v70;
    v65 = v71;
    v29 = v74;
    v30 = v73;
    v9 = (void *)v76;
    v37 = v75;
    v62 = v77;
    v63 = v69;
    v61 = v76;
    *((_QWORD *)&v53 + 1) = *(_QWORD *)(v1 + 8);
    v33 = *((_QWORD *)&v76 + 1);
    v10 = *((id *)&v76 + 1);
    v39 = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2416BAD14();
    swift_getKeyPath();
    *(_QWORD *)&v53 = v45;
    sub_2416B9CAC();
    swift_release();
    v12 = *(_QWORD *)(v45 + 160);
    v11 = *(_QWORD *)(v45 + 168);
    swift_bridgeObjectRetain();
    swift_release();
    if (v11)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
      sub_2416BAED0();
      v13 = v10;
      v14 = v53;
      *(_QWORD *)&v45 = v36;
      *((_QWORD *)&v45 + 1) = v3;
      *(_QWORD *)&v46 = v35;
      *((_QWORD *)&v46 + 1) = v4;
      *(_QWORD *)&v47 = v34;
      *((_QWORD *)&v47 + 1) = v5;
      *(_QWORD *)&v48 = v32;
      *((_QWORD *)&v48 + 1) = v6;
      *(_QWORD *)&v49 = v30;
      *((_QWORD *)&v49 + 1) = v7;
      v38 = v12;
      *(_QWORD *)&v50 = v12;
      *((_QWORD *)&v50 + 1) = v11;
      *(_QWORD *)&v51 = v39;
      *((_QWORD *)&v51 + 1) = v33;
      *(_QWORD *)&v52 = v31;
      *((_QWORD *)&v52 + 1) = v8;
      sub_2415DA4E0((uint64_t)&v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      v57 = v49;
      v58 = v50;
      v59 = v51;
      v60 = v52;
      v53 = v45;
      v54 = v46;
      v55 = v47;
      v56 = v48;
      v15 = sub_2415DA34C();
      sub_2415DA580((uint64_t)&v45);
      MedicalIDEmergencyContact.init(hkEmergencyContact:contact:)(v15, 0, &v53);
      swift_getKeyPath();
      sub_24159CE88((unint64_t *)&qword_25713A5F0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, (uint64_t)&protocol conformance descriptor for MedicalIDEditableEmergencyContactsModel);
      sub_2416B9CAC();
      swift_release();
      *(_QWORD *)&v40[0] = v14;
      swift_getKeyPath();
      sub_2416B9CC4();
      swift_release();
      v16 = (_QWORD *)(v14 + 16);
      swift_beginAccess();
      v17 = *(_QWORD **)(v14 + 16);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v14 + 16) = v17;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v17 = sub_2415FE184(0, v17[2] + 1, 1, v17);
        *v16 = v17;
      }
      v20 = v17[2];
      v19 = v17[3];
      if (v20 >= v19 >> 1)
      {
        v17 = sub_2415FE184((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
        *v16 = v17;
      }
      v17[2] = v20 + 1;
      v21 = &v17[16 * v20];
      v22 = v53;
      v23 = v54;
      v24 = v56;
      v21[4] = v55;
      v21[5] = v24;
      v21[2] = v22;
      v21[3] = v23;
      v25 = v57;
      v26 = v58;
      v27 = v60;
      v21[8] = v59;
      v21[9] = v27;
      v21[6] = v25;
      v21[7] = v26;
      swift_endAccess();
      swift_getKeyPath();
      sub_2416B9CB8();
      swift_release();
      swift_release();
      v40[2] = v65;
      v40[3] = v66;
      v40[4] = v67;
      v40[0] = v63;
      v40[1] = v64;
      v41 = v38;
      v42 = v11;
      v43 = v61;
      v44 = v62;
      v28 = v40;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      v55 = v65;
      v56 = v66;
      v57 = v67;
      v53 = v63;
      v54 = v64;
      *(_QWORD *)&v58 = v29;
      *((_QWORD *)&v58 + 1) = v37;
      v59 = v61;
      v60 = v62;
      v28 = &v53;
    }
    return sub_2415DA580((uint64_t)v28);
  }
  return result;
}

uint64_t sub_2416AAD40@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2416BA3C0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_2416AAD6C()
{
  return sub_2416BA3CC();
}

uint64_t *sub_2416AAD90(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = v6[5];
    v9 = v6[6];
    v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    v11 = (uint64_t *)((char *)a1 + v9);
    v12 = (uint64_t *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = v6[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)v16;
    LOBYTE(v6) = v16[8];
    v18 = v10;
    swift_retain();
    swift_retain();
    sub_2416AAE84(v17, (char)v6);
    *(_QWORD *)v15 = v17;
    v15[8] = (char)v6;
  }
  return a1;
}

uint64_t sub_2416AAE84(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_retain();
  return result;
}

uint64_t sub_2416AAE90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

  swift_release();
  swift_release();
  return sub_2415C38C8(*(_QWORD *)(a1 + *(int *)(a2 + 28)), *(_BYTE *)(a1 + *(int *)(a2 + 28) + 8));
}

uint64_t sub_2416AAF20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_QWORD *)v15;
  LOBYTE(a2) = *(_BYTE *)(v15 + 8);
  v17 = v9;
  swift_retain();
  swift_retain();
  sub_2416AAE84(v16, a2);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = a2;
  return a1;
}

uint64_t sub_2416AAFE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_retain();
  swift_release();
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  swift_retain();
  swift_release();
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)v16;
  LOBYTE(a3) = *(_BYTE *)(v16 + 8);
  sub_2416AAE84(*(_QWORD *)v16, (char)a3);
  v18 = *(_QWORD *)v15;
  v19 = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v15 = v17;
  *(_BYTE *)(v15 + 8) = (_BYTE)a3;
  sub_2415C38C8(v18, v19);
  return a1;
}

uint64_t sub_2416AB0E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  return a1;
}

uint64_t sub_2416AB178(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = a3[6];
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_release();
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  swift_release();
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = *v14;
  LOBYTE(v14) = *((_BYTE *)v14 + 8);
  v16 = *(_QWORD *)v13;
  v17 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v13 = v15;
  *(_BYTE *)(v13 + 8) = (_BYTE)v14;
  sub_2415C38C8(v16, v17);
  return a1;
}

uint64_t sub_2416AB250()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416AB25C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_2416AB2F0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_2416AB2FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
}

void sub_2416AB38C()
{
  unint64_t v0;

  sub_24159D6B0(319, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_2416AB42C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2416AB440()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257140378)
  {
    sub_2415BE730(255, &qword_257140380, (void (*)(uint64_t))sub_2416AB4B8);
    sub_2416AB750();
    v0 = sub_2416BAD74();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257140378);
  }
}

void sub_2416AB4B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257140388)
  {
    sub_24159D6B0(255, &qword_257140390, (uint64_t (*)(uint64_t))sub_2416AB530, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2416AB6F0();
    v0 = sub_2416BAD8C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257140388);
  }
}

void sub_2416AB530()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_257140398)
  {
    sub_2416AB594();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_257140398);
  }
}

void sub_2416AB594()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2571403A0)
  {
    sub_2416AB618();
    sub_2415A3D28(255, (unint64_t *)&qword_257139CD0, MEMORY[0x24BDF3E48], MEMORY[0x24BDF3E18], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF06F8]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2571403A0);
  }
}

void sub_2416AB618()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2571403A8)
  {
    sub_2416AB694();
    sub_24159D6B0(255, &qword_25713FF68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF40C0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2571403A8);
  }
}

void sub_2416AB694()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2571403B0)
  {
    sub_2415A3F74();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2571403B0);
  }
}

unint64_t sub_2416AB6F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2571403B8;
  if (!qword_2571403B8)
  {
    sub_24159D6B0(255, &qword_257140390, (uint64_t (*)(uint64_t))sub_2416AB530, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v1);
    atomic_store(result, (unint64_t *)&qword_2571403B8);
  }
  return result;
}

unint64_t sub_2416AB750()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_2571403C0;
  if (!qword_2571403C0)
  {
    sub_2415BE730(255, &qword_257140380, (void (*)(uint64_t))sub_2416AB4B8);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_2571403C8, (uint64_t (*)(uint64_t))sub_2416AB4B8, MEMORY[0x24BDF4498]);
    v3[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_2571403C0);
  }
  return result;
}

void sub_2416AB7E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2571403D0)
  {
    sub_2416AB440();
    sub_2416BA768();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2571403D0);
  }
}

void sub_2416AB84C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_2571403D8)
  {
    sub_2416AB7E8();
    v5[0] = v2;
    v5[1] = &type metadata for EmergencyContactPickerSheetView;
    v5[2] = sub_2416AB8DC();
    v5[3] = sub_2416AB974();
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF3650], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_2571403D8);
  }
}

unint64_t sub_2416AB8DC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_2571403E0;
  if (!qword_2571403E0)
  {
    sub_2416AB7E8();
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_2571403E8, (uint64_t (*)(uint64_t))sub_2416AB440, MEMORY[0x24BDF43B0]);
    v3[1] = sub_24159CE88(&qword_257139D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_2571403E0);
  }
  return result;
}

unint64_t sub_2416AB974()
{
  unint64_t result;

  result = qword_2571403F0;
  if (!qword_2571403F0)
  {
    result = MEMORY[0x2426994BC](&unk_2416C1B60, &type metadata for EmergencyContactPickerSheetView);
    atomic_store(result, (unint64_t *)&qword_2571403F0);
  }
  return result;
}

void sub_2416AB9B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_2571403F8)
  {
    sub_2416AB84C(255);
    v3 = v2;
    sub_24159D7F0(255, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v5 = v4;
    sub_2416AB7E8();
    sub_2416AB8DC();
    sub_2416AB974();
    v8[0] = v3;
    v8[1] = v5;
    v8[2] = swift_getOpaqueTypeConformance2();
    v8[3] = sub_2416ABC5C(&qword_257140400, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(void))sub_2415DAAD0);
    v6 = MEMORY[0x242699480](a1, v8, MEMORY[0x24BDF3908], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_2571403F8);
  }
}

void sub_2416ABACC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[4];

  if (!qword_257140408)
  {
    sub_2416AB9B8(255);
    v3 = v2;
    v4 = MEMORY[0x24BEE1C68];
    sub_24159D7F0(255, &qword_25713EB20, (uint64_t)&type metadata for EmergencyContactPickerError, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v6 = v5;
    sub_2416AB84C(255);
    sub_24159D7F0(255, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))v4);
    sub_2416AB7E8();
    sub_2416AB8DC();
    sub_2416AB974();
    swift_getOpaqueTypeConformance2();
    sub_2416ABC5C(&qword_257140400, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(void))sub_2415DAAD0);
    v7 = MEMORY[0x24BDF3908];
    v10[0] = v3;
    v10[1] = v6;
    v10[2] = swift_getOpaqueTypeConformance2();
    v10[3] = sub_2416ABC5C(&qword_257140410, &qword_25713EB20, (uint64_t)&type metadata for EmergencyContactPickerError, (uint64_t (*)(void))sub_241662B24);
    v8 = MEMORY[0x242699480](a1, v10, v7, 0);
    if (!v9)
      atomic_store(v8, (unint64_t *)&qword_257140408);
  }
}

uint64_t sub_2416ABC5C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_24159D7F0(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v8 = v7;
    v9 = a4();
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE4AB8], v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

void sub_2416ABCC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t OpaqueTypeConformance2;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[8];

  if (!qword_257140418)
  {
    sub_2416ABACC(255);
    v11 = v2;
    sub_2415A3D28(255, (unint64_t *)&qword_25713B4D8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF4398]);
    v10 = v3;
    sub_2416AB9B8(255);
    v4 = MEMORY[0x24BEE1C68];
    sub_24159D7F0(255, &qword_25713EB20, (uint64_t)&type metadata for EmergencyContactPickerError, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    sub_2416AB84C(255);
    sub_24159D7F0(255, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))v4);
    sub_2416AB7E8();
    sub_2416AB8DC();
    sub_2416AB974();
    swift_getOpaqueTypeConformance2();
    sub_2416ABC5C(&qword_257140400, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(void))sub_2415DAAD0);
    swift_getOpaqueTypeConformance2();
    sub_2416ABC5C(&qword_257140410, &qword_25713EB20, (uint64_t)&type metadata for EmergencyContactPickerError, (uint64_t (*)(void))sub_241662B24);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v6 = sub_2415C343C();
    v7 = sub_2415E8934();
    v12[0] = v11;
    v12[1] = MEMORY[0x24BEE0D00];
    v12[2] = v10;
    v12[3] = MEMORY[0x24BDF1FA8];
    v12[4] = OpaqueTypeConformance2;
    v12[5] = v6;
    v12[6] = v7;
    v12[7] = MEMORY[0x24BDF1F80];
    v8 = MEMORY[0x242699480](a1, v12, MEMORY[0x24BDF35B8], 0);
    if (!v9)
      atomic_store(v8, (unint64_t *)&qword_257140418);
  }
}

void sub_2416ABEE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  if (!qword_257140420)
  {
    sub_2416ABCC8(255);
    v8 = v2;
    v7 = type metadata accessor for RelationshipPickerView();
    sub_2416ABACC(255);
    sub_2415A3D28(255, (unint64_t *)&qword_25713B4D8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF4398]);
    sub_2416AB9B8(255);
    v3 = MEMORY[0x24BEE1C68];
    sub_24159D7F0(255, &qword_25713EB20, (uint64_t)&type metadata for EmergencyContactPickerError, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    sub_2416AB84C(255);
    sub_24159D7F0(255, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))v3);
    sub_2416AB7E8();
    sub_2416AB8DC();
    sub_2416AB974();
    v4 = MEMORY[0x24BDF3650];
    swift_getOpaqueTypeConformance2();
    sub_2416ABC5C(&qword_257140400, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(void))sub_2415DAAD0);
    swift_getOpaqueTypeConformance2();
    sub_2416ABC5C(&qword_257140410, &qword_25713EB20, (uint64_t)&type metadata for EmergencyContactPickerError, (uint64_t (*)(void))sub_241662B24);
    v9[4] = swift_getOpaqueTypeConformance2();
    v9[5] = sub_2415C343C();
    v9[6] = sub_2415E8934();
    v9[7] = MEMORY[0x24BDF1F80];
    v9[0] = v8;
    v9[1] = v7;
    v9[2] = swift_getOpaqueTypeConformance2();
    v9[3] = sub_24159CE88(&qword_25713C3B0, (uint64_t (*)(uint64_t))type metadata accessor for RelationshipPickerView, (uint64_t)&unk_2416C3610);
    v5 = MEMORY[0x242699480](a1, v9, v4, 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_257140420);
  }
}

void sub_2416AC164(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_257140430)
  {
    sub_2415BE730(255, &qword_257140428, sub_2416ABEE8);
    v3 = v2;
    sub_24159D7F0(255, (unint64_t *)&qword_25713A910, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_2416AC228();
    v7[3] = sub_2416AC4D4();
    v5 = MEMORY[0x242699480](a1, v7, MEMORY[0x24BDF3908], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_257140430);
  }
}

unint64_t sub_2416AC228()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[10];

  result = qword_257140438;
  if (!qword_257140438)
  {
    sub_2415BE730(255, &qword_257140428, sub_2416ABEE8);
    v6 = v1;
    sub_2416ABCC8(255);
    v5 = v2;
    v4 = type metadata accessor for RelationshipPickerView();
    sub_2416ABACC(255);
    sub_2415A3D28(255, (unint64_t *)&qword_25713B4D8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF4398]);
    sub_2416AB9B8(255);
    v3 = MEMORY[0x24BEE1C68];
    sub_24159D7F0(255, &qword_25713EB20, (uint64_t)&type metadata for EmergencyContactPickerError, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    sub_2416AB84C(255);
    sub_24159D7F0(255, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))v3);
    sub_2416AB7E8();
    sub_2416AB8DC();
    sub_2416AB974();
    swift_getOpaqueTypeConformance2();
    sub_2416ABC5C(&qword_257140400, &qword_25713D0C0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(void))sub_2415DAAD0);
    swift_getOpaqueTypeConformance2();
    sub_2416ABC5C(&qword_257140410, &qword_25713EB20, (uint64_t)&type metadata for EmergencyContactPickerError, (uint64_t (*)(void))sub_241662B24);
    v7[6] = swift_getOpaqueTypeConformance2();
    v7[7] = sub_2415C343C();
    v7[8] = sub_2415E8934();
    v7[9] = MEMORY[0x24BDF1F80];
    v7[2] = v5;
    v7[3] = v4;
    v7[4] = swift_getOpaqueTypeConformance2();
    v7[5] = sub_24159CE88(&qword_25713C3B0, (uint64_t (*)(uint64_t))type metadata accessor for RelationshipPickerView, (uint64_t)&unk_2416C3610);
    v7[0] = swift_getOpaqueTypeConformance2();
    v7[1] = MEMORY[0x24BDECC38];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v6, v7);
    atomic_store(result, (unint64_t *)&qword_257140438);
  }
  return result;
}

unint64_t sub_2416AC4D4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_257140440;
  if (!qword_257140440)
  {
    sub_24159D7F0(255, (unint64_t *)&qword_25713A910, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v2 = MEMORY[0x24BEE0D28];
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE4AB8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_257140440);
  }
  return result;
}

uint64_t sub_2416AC548()
{
  return sub_2416AC5B4((uint64_t (*)(uint64_t))sub_2416A8FD4);
}

void sub_2416AC554()
{
  qword_2571400B8 = 0x4030000000000000;
}

double sub_2416AC568@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AddEmergencyContactView(0) - 8) + 80);
  return sub_2416A9904(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_2416AC5A8()
{
  return sub_2416AC5B4(sub_2416A9B70);
}

uint64_t sub_2416AC5B4(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AddEmergencyContactView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_2416AC5F4()
{
  return sub_2416AC5B4((uint64_t (*)(uint64_t))sub_2416A9D48);
}

uint64_t sub_2416AC600@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2416A9EAC(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2416AC608@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2416AA2F4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2416AC614@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AddEmergencyContactView(0) - 8) + 80);
  return sub_2416AA438(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_2416AC654()
{
  return sub_2416AC5B4(sub_2416AA7D8);
}

uint64_t objectdestroyTm_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for AddEmergencyContactView(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  swift_release();
  swift_release();
  sub_2415C38C8(*(_QWORD *)(v3 + *(int *)(v1 + 28)), *(_BYTE *)(v3 + *(int *)(v1 + 28) + 8));
  return swift_deallocObject();
}

uint64_t sub_2416AC73C()
{
  return sub_2416AC5B4((uint64_t (*)(uint64_t))sub_2416AA168);
}

void sub_2416AC748()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257140458)
  {
    sub_24159D6B0(255, &qword_257140390, (uint64_t (*)(uint64_t))sub_2416AB530, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257140458);
  }
}

uint64_t sub_2416AC7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, &qword_25713FF68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF40C0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL HKMedicalIDEmergencyContactsIsUnderLimit(uint64_t a1)
{
  return a1 < 10;
}

uint64_t sub_2416AC83C()
{
  sub_2415BE730(255, &qword_257140428, sub_2416ABEE8);
  sub_24159D7F0(255, (unint64_t *)&qword_25713A910, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  sub_2416AC228();
  sub_2416AC4D4();
  return swift_getOpaqueTypeConformance2();
}

void sub_2416AC8D4()
{
  sub_2416A7EA4();
}

void sub_2416AC8E8()
{
  sub_2416A7E8C();
}

void sub_2416AC8FC()
{
  sub_2416A7EBC();
}

void sub_2416AC910()
{
  sub_2415C74D8();
}

void sub_2416AC924(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  int *v16;
  char *v17;
  _QWORD *v18;
  id v19;
  id v20;
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;

  *a8 = swift_getKeyPath();
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v16 = (int *)type metadata accessor for RelationshipPickerView();
  v17 = (char *)a8 + v16[6];
  sub_24160E998(0, (unint64_t *)&qword_25713A910, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
  sub_2416BAD08();
  *(_OWORD *)v17 = v22;
  *((_QWORD *)v17 + 2) = v23;
  v18 = (uint64_t *)((char *)a8 + v16[5]);
  *v18 = a2;
  v18[1] = a3;
  v18[2] = a4;
  v18[3] = a5;
  v19 = objc_allocWithZone((Class)MIUIRelationshipPickerDataSource);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = objc_msgSend(v19, sel_initWithContact_, a1, 0, 0);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  *(uint64_t *)((char *)a8 + v16[7]) = (uint64_t)v20;
  v21 = (uint64_t *)((char *)a8 + v16[8]);
  *v21 = a6;
  v21[1] = a7;
}

uint64_t type metadata accessor for RelationshipPickerView()
{
  uint64_t result;

  result = qword_2571404B8;
  if (!qword_2571404B8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t *sub_2416ACAD8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_2416BA06C();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = a3[5];
    v10 = a3[6];
    v11 = (uint64_t *)((char *)a1 + v9);
    v12 = (uint64_t *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = v12[3];
    v11[2] = v12[2];
    v11[3] = v14;
    v15 = (uint64_t *)((char *)a1 + v10);
    v16 = (uint64_t *)((char *)a2 + v10);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v15[2] = v16[2];
    v18 = a3[7];
    v19 = a3[8];
    v20 = *(void **)((char *)a2 + v18);
    *(uint64_t *)((char *)a1 + v18) = (uint64_t)v20;
    v21 = (uint64_t *)((char *)a1 + v19);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v24 = v20;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_2416ACC48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

_QWORD *sub_2416ACD1C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;

  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_2416BA06C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)((char *)a1 + v7);
  v10 = (_QWORD *)((char *)a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = v10[3];
  v9[2] = v10[2];
  v9[3] = v12;
  v13 = (_QWORD *)((char *)a1 + v8);
  v14 = (_QWORD *)((char *)a2 + v8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v13[2] = v14[2];
  v16 = a3[7];
  v17 = a3[8];
  v18 = *(void **)((char *)a2 + v16);
  *(_QWORD *)((char *)a1 + v16) = v18;
  v19 = (_QWORD *)((char *)a1 + v17);
  v20 = (_QWORD *)((char *)a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v22 = v18;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_2416ACE60(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  if (a1 != a2)
  {
    sub_241639D38((uint64_t)a1);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_2416BA06C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v7 = a3[5];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  *(_QWORD *)((char *)a1 + v7) = *(_QWORD *)((char *)a2 + v7);
  swift_retain();
  swift_release();
  v8[1] = v9[1];
  swift_retain();
  swift_release();
  v8[2] = v9[2];
  v8[3] = v9[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (char *)a2 + v10;
  *v11 = *(_QWORD *)((char *)a2 + v10);
  v11[1] = *(_QWORD *)((char *)a2 + v10 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[2] = *((_QWORD *)v12 + 2);
  swift_retain();
  swift_release();
  v13 = a3[7];
  v14 = *(void **)((char *)a2 + v13);
  v15 = *(void **)((char *)a1 + v13);
  *(_QWORD *)((char *)a1 + v13) = v14;
  v16 = v14;

  v17 = a3[8];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_2416AD010(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_2416BA06C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = *(_OWORD *)&a2[v9];
  v12 = *(_OWORD *)&a2[v9 + 16];
  v13 = &a1[v9];
  *(_OWORD *)v13 = v11;
  *((_OWORD *)v13 + 1) = v12;
  v14 = &a1[v10];
  v15 = &a2[v10];
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
  v16 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  return a1;
}

char *sub_2416AD100(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    sub_241639D38((uint64_t)a1);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = sub_2416BA06C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  swift_release();
  *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
  swift_release();
  v12 = *((_QWORD *)v11 + 3);
  *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
  *((_QWORD *)v10 + 3) = v12;
  swift_bridgeObjectRelease();
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)&a2[v13 + 8];
  *(_QWORD *)v14 = *(_QWORD *)&a2[v13];
  *((_QWORD *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
  swift_release();
  v17 = a3[7];
  v18 = *(void **)&a1[v17];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];

  v19 = a3[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v23 = *(_QWORD *)v21;
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = v23;
  *((_QWORD *)v20 + 1) = v22;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2416AD260()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416AD26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_2416AD304()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_2416AD310(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
}

void sub_2416AD3A4()
{
  unint64_t v0;

  sub_24159D6B0(319, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_2416AD450()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2416AD460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t OpaqueTypeConformance2;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;

  v73 = a2;
  v3 = sub_2416BA450();
  v66 = *(_QWORD *)(v3 - 8);
  v67 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v65 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RelationshipPickerView();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  sub_2416AE76C();
  v9 = v8;
  v57 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416AE6AC(0);
  v60 = v12;
  v58 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416AE5C0(0);
  v62 = v15;
  v61 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v59 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416AE4B0(0);
  v68 = v17;
  v64 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v63 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416AE338(0);
  v71 = *(_QWORD *)(v19 - 8);
  v72 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v69 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1 + *(int *)(v5 + 24);
  v22 = *(_QWORD *)(v21 + 16);
  v75 = *(_OWORD *)v21;
  v76 = v22;
  sub_2416AE938(0, &qword_25713AAE8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  v74 = a1;
  sub_2416AE7E8();
  sub_2416AE8D8();
  sub_2416BA948();
  v23 = *(_QWORD *)(v21 + 16);
  v77 = *(_OWORD *)v21;
  v78 = v23;
  sub_2416BAD14();
  v77 = v75;
  v70 = a1;
  sub_2416AE9A8(a1, (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v25 = swift_allocObject();
  sub_2416AE9F0((uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v24);
  sub_24160E998(0, (unint64_t *)&qword_25713A910, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
  v27 = v26;
  v28 = sub_24159CE88(&qword_257140548, (uint64_t (*)(uint64_t))sub_2416AE76C, MEMORY[0x24BDF1A30]);
  v29 = sub_2416AC4D4();
  sub_2416BABE8();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v11, v9);
  sub_2416BA4C8();
  if (qword_257139300 != -1)
    swift_once();
  v30 = (id)qword_25713A038;
  v31 = sub_2416BA9CC();
  v33 = v32;
  *(_QWORD *)&v77 = v9;
  *((_QWORD *)&v77 + 1) = v27;
  v35 = v34 & 1;
  v78 = v28;
  v79 = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v37 = v59;
  v38 = v60;
  sub_2416BAAB0();
  sub_2415A431C(v31, v33, v35);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v14, v38);
  v40 = v66;
  v39 = v67;
  v41 = v65;
  (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v65, *MEMORY[0x24BDEE5F0], v67);
  *(_QWORD *)&v77 = v38;
  *((_QWORD *)&v77 + 1) = OpaqueTypeConformance2;
  v42 = swift_getOpaqueTypeConformance2();
  v43 = v63;
  v44 = v62;
  sub_2416BAB4C();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v39);
  v45 = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v37, v44);
  MEMORY[0x24BDAC7A8](v45);
  sub_241609510();
  v47 = v46;
  *(_QWORD *)&v77 = v44;
  *((_QWORD *)&v77 + 1) = v42;
  v48 = swift_getOpaqueTypeConformance2();
  v49 = sub_24159CE88((unint64_t *)&qword_25713B4E0, (uint64_t (*)(uint64_t))sub_241609510, MEMORY[0x24BDF43B0]);
  v51 = v68;
  v50 = v69;
  sub_2416BABB8();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v43, v51);
  *(_QWORD *)&v75 = sub_2416BAC3C();
  sub_24159D6B0(0, &qword_257140550, (uint64_t (*)(uint64_t))MEMORY[0x24BDEDB18], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  sub_2416BA21C();
  v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_2416BCF30;
  sub_2416BA210();
  *(_QWORD *)&v77 = v51;
  *((_QWORD *)&v77 + 1) = v47;
  v78 = v48;
  v79 = v49;
  v53 = swift_getOpaqueTypeConformance2();
  v54 = v72;
  MEMORY[0x2426982C8](&v75, v52, v72, MEMORY[0x24BDF3E48], v53, MEMORY[0x24BDF3E18]);
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v50, v54);
}

uint64_t sub_2416ADB68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v2 = type metadata accessor for RelationshipPickerView();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = objc_msgSend(*(id *)(a1 + *(int *)(MEMORY[0x24BDAC7A8](v2) + 28)), sel_relationships);
  v6 = sub_2416BB1F4();

  v10[1] = v6;
  swift_getKeyPath();
  sub_2416AE9A8(a1, (uint64_t)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v8 = swift_allocObject();
  sub_2416AE9F0((uint64_t)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  sub_24160E998(0, &qword_25713D110, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
  sub_2416AE880();
  sub_2416090A4();
  return sub_2416BAE7C();
}

uint64_t sub_2416ADCC4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *a1;
  v4 = a1[1];
  v6 = (uint64_t *)(a2 + *(int *)(type metadata accessor for RelationshipPickerView() + 32));
  v7 = *v6;
  v8 = v6[1];
  *a3 = v5;
  a3[1] = v4;
  a3[2] = v7;
  a3[3] = v8;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_2416ADD18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;

  v2 = sub_2416BA06C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RelationshipPickerView();
  v7 = (__int128 *)(a1 + *(int *)(v6 + 24));
  v8 = *((_QWORD *)v7 + 2);
  v12 = *v7;
  *(_QWORD *)&v13 = v8;
  sub_2416AE938(0, &qword_25713AAE8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v9 = a1 + *(int *)(v6 + 20);
  v10 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)&v12 = *(_QWORD *)v9;
  *((_QWORD *)&v12 + 1) = v10;
  v13 = *(_OWORD *)(v9 + 16);
  sub_2416AE938(0, (unint64_t *)&qword_25713BC70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  sub_2416BAE1C();
  sub_2415C0E10((uint64_t)v5);
  sub_2416BA060();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_2416ADE30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for RelationshipPickerView();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  sub_2416AE9A8(a1, (uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  sub_2416AE9F0((uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5);
  return sub_2416BAD50();
}

uint64_t sub_2416ADF04@<X0>(uint64_t a1@<X8>)
{
  id v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  sub_2416BA4C8();
  if (qword_257139300 != -1)
    swift_once();
  v2 = (id)qword_25713A038;
  result = sub_2416BA9CC();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_2416ADFD0()
{
  sub_2416AE188(0);
  sub_2416AE338(255);
  sub_2416AE4B0(255);
  sub_241609510();
  sub_2416AE5C0(255);
  sub_2416AE6AC(255);
  sub_2416AE76C();
  sub_24160E998(255, (unint64_t *)&qword_25713A910, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
  sub_24159CE88(&qword_257140548, (uint64_t (*)(uint64_t))sub_2416AE76C, MEMORY[0x24BDF1A30]);
  sub_2416AC4D4();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  sub_24159CE88((unint64_t *)&qword_25713B4E0, (uint64_t (*)(uint64_t))sub_241609510, MEMORY[0x24BDF43B0]);
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  return sub_2416BA15C();
}

uint64_t sub_2416AE180@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2416AD460(*(_QWORD *)(v1 + 16), a1);
}

void sub_2416AE188(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_257140500)
  {
    sub_2416AE338(255);
    v3 = v2;
    sub_2416AE4B0(255);
    sub_241609510();
    sub_2416AE5C0(255);
    sub_2416AE6AC(255);
    sub_2416AE76C();
    sub_24160E998(255, (unint64_t *)&qword_25713A910, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
    sub_24159CE88(&qword_257140548, (uint64_t (*)(uint64_t))sub_2416AE76C, MEMORY[0x24BDF1A30]);
    sub_2416AC4D4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_24159CE88((unint64_t *)&qword_25713B4E0, (uint64_t (*)(uint64_t))sub_241609510, MEMORY[0x24BDF43B0]);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = MEMORY[0x24BDF3E48];
    v7[2] = OpaqueTypeConformance2;
    v7[3] = MEMORY[0x24BDF3E18];
    v5 = MEMORY[0x242699480](a1, v7, MEMORY[0x24BDF2B08], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_257140500);
  }
}

void sub_2416AE338(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_257140508)
  {
    sub_2416AE4B0(255);
    v3 = v2;
    sub_241609510();
    v5 = v4;
    sub_2416AE5C0(255);
    sub_2416AE6AC(255);
    sub_2416AE76C();
    sub_24160E998(255, (unint64_t *)&qword_25713A910, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
    sub_24159CE88(&qword_257140548, (uint64_t (*)(uint64_t))sub_2416AE76C, MEMORY[0x24BDF1A30]);
    sub_2416AC4D4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v8[0] = v3;
    v8[1] = v5;
    v8[2] = swift_getOpaqueTypeConformance2();
    v8[3] = sub_24159CE88((unint64_t *)&qword_25713B4E0, (uint64_t (*)(uint64_t))sub_241609510, MEMORY[0x24BDF43B0]);
    v6 = MEMORY[0x242699480](a1, v8, MEMORY[0x24BDF3870], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_257140508);
  }
}

void sub_2416AE4B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_257140510)
  {
    sub_2416AE5C0(255);
    v3 = v2;
    sub_2416AE6AC(255);
    sub_2416AE76C();
    sub_24160E998(255, (unint64_t *)&qword_25713A910, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
    v6[2] = sub_24159CE88(&qword_257140548, (uint64_t (*)(uint64_t))sub_2416AE76C, MEMORY[0x24BDF1A30]);
    v6[3] = sub_2416AC4D4();
    swift_getOpaqueTypeConformance2();
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x242699480](a1, v6, MEMORY[0x24BDF33A8], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_257140510);
  }
}

void sub_2416AE5C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_257140518)
  {
    sub_2416AE6AC(255);
    v3 = v2;
    sub_2416AE76C();
    sub_24160E998(255, (unint64_t *)&qword_25713A910, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
    v6[2] = sub_24159CE88(&qword_257140548, (uint64_t (*)(uint64_t))sub_2416AE76C, MEMORY[0x24BDF1A30]);
    v6[3] = sub_2416AC4D4();
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x242699480](a1, v6, MEMORY[0x24BDF2898], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_257140518);
  }
}

void sub_2416AE6AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_257140520)
  {
    sub_2416AE76C();
    v3 = v2;
    sub_24160E998(255, (unint64_t *)&qword_25713A910, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_24159CE88(&qword_257140548, (uint64_t (*)(uint64_t))sub_2416AE76C, MEMORY[0x24BDF1A30]);
    v7[3] = sub_2416AC4D4();
    v5 = MEMORY[0x242699480](a1, v7, MEMORY[0x24BDF3908], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_257140520);
  }
}

void sub_2416AE76C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257140528)
  {
    sub_2416AE7E8();
    sub_2416AE8D8();
    v0 = sub_2416BA960();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257140528);
  }
}

void sub_2416AE7E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257140530)
  {
    sub_24160E998(255, &qword_25713D110, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
    sub_2416AE880();
    v0 = sub_2416BAE94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257140530);
  }
}

unint64_t sub_2416AE880()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257140538;
  if (!qword_257140538)
  {
    sub_24160E998(255, &qword_25713D110, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE12D8], v1);
    atomic_store(result, (unint64_t *)&qword_257140538);
  }
  return result;
}

unint64_t sub_2416AE8D8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_257140540;
  if (!qword_257140540)
  {
    sub_2416AE7E8();
    v2 = v1;
    v3 = sub_2416090A4();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF4A08], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_257140540);
  }
  return result;
}

void sub_2416AE938(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_24160E998(255, (unint64_t *)&qword_25713A910, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_2416AE9A0()
{
  uint64_t v0;

  return sub_2416ADB68(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2416AE9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RelationshipPickerView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2416AE9F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RelationshipPickerView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2416AEA34()
{
  return sub_2416AEA58(sub_2416ADD18);
}

uint64_t sub_2416AEA40()
{
  uint64_t v0;

  return sub_2416ADE30(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2416AEA4C()
{
  return sub_2416AEA58((uint64_t (*)(uint64_t))sub_24161DC3C);
}

uint64_t sub_2416AEA58(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RelationshipPickerView() - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t objectdestroyTm_26()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for RelationshipPickerView();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v3 = sub_2416BA06C();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + v2, v3);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2416AEBA8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RelationshipPickerView() - 8) + 80);
  return sub_2416ADCC4(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_2416AEBF4()
{
  return sub_24159CE88(&qword_257140558, (uint64_t (*)(uint64_t))sub_2416AEC20, MEMORY[0x24BDED358]);
}

void sub_2416AEC20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257140560)
  {
    sub_2416BA108();
    sub_2416AE188(255);
    sub_2416AE338(255);
    sub_2416AE4B0(255);
    sub_241609510();
    sub_2416AE5C0(255);
    sub_2416AE6AC(255);
    sub_2416AE76C();
    sub_24160E998(255, (unint64_t *)&qword_25713A910, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
    sub_24159CE88(&qword_257140548, (uint64_t (*)(uint64_t))sub_2416AE76C, MEMORY[0x24BDF1A30]);
    sub_2416AC4D4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_24159CE88((unint64_t *)&qword_25713B4E0, (uint64_t (*)(uint64_t))sub_241609510, MEMORY[0x24BDF43B0]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v0 = sub_2416BA168();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257140560);
  }
}

uint64_t sub_2416AEDF4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416AEE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_2416AEE7C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416AEE88(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MedicalIDAllergiesCellView()
{
  uint64_t result;

  result = qword_2571405C0;
  if (!qword_2571405C0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2416AEF3C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2416AEF4C@<X0>(uint64_t a1@<X8>)
{
  void **v1;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  if (qword_257139478 != -1)
    swift_once();
  v3 = *(_QWORD *)algn_257147708;
  v21 = qword_257147700;
  v4 = *v1;
  swift_bridgeObjectRetain();
  v5 = objc_msgSend(v4, sel_allergyInfo);
  if (v5)
  {
    v6 = v5;
    v7 = sub_2416BB128();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v10);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v11 = (void *)qword_25713A038;
  v12 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v12);
  v13 = v11;
  sub_2416B9C04();
  v14 = sub_2416BB134();
  v16 = v15;
  v17 = (uint64_t *)((char *)v1 + *(int *)(type metadata accessor for MedicalIDAllergiesCellView() + 20));
  v19 = *v17;
  v18 = v17[1];
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 64) = v18;
  return swift_retain();
}

__n128 sub_2416AF144@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  _QWORD v8[2];
  char v9;
  __int128 v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;

  sub_2416AEF4C((uint64_t)v8);
  v2 = v8[1];
  v3 = v9;
  v4 = v11;
  v5 = v13;
  result = v12;
  v7 = v10;
  *(_QWORD *)a1 = v8[0];
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 40) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_QWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t sub_2416AF1A0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  v32 = a1;
  v3 = type metadata accessor for EditBloodTypeCellView();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_2415E8E44();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2571394C0 != -1)
    swift_once();
  v9 = *(_QWORD *)algn_257147798;
  v31 = qword_257147790;
  swift_bridgeObjectRetain();
  v30 = sub_2416BB344();
  v10 = (char *)v1 + *(int *)(v3 + 20);
  v11 = *(_OWORD *)v10;
  v12 = *((_QWORD *)v10 + 2);
  v33 = v11;
  v34 = v12;
  sub_24159D6B0(0, &qword_2571406A8, (uint64_t (*)(uint64_t))type metadata accessor for HKBloodType, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  sub_2416BAE34();
  v28 = v36;
  v29 = v35;
  v27 = v37;
  v13 = sub_2416AF458();
  v15 = v14;
  sub_24159F83C();
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2416BCC80;
  v17 = v2[1];
  *(_QWORD *)(v16 + 32) = *v2;
  *(_QWORD *)(v16 + 40) = v17;
  *(_QWORD *)(v16 + 48) = 0x707954646F6F6C42;
  *(_QWORD *)(v16 + 56) = 0xE900000000000065;
  swift_bridgeObjectRetain();
  v18 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v19 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v19)
  {
    sub_2415BEF64((uint64_t)v2, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for EditBloodTypeCellView);
LABEL_7:
    v20 = *v5;
    v22 = v5[1];
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
  v20 = sub_2416BB128();
  v22 = v21;

  sub_2415BEF64((uint64_t)v2, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for EditBloodTypeCellView);
  if (!v22)
    goto LABEL_7;
LABEL_8:
  sub_2415A6154((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for EditBloodTypeCellView);
  v23 = (_QWORD *)((char *)v2 + *(int *)(v3 + 28));
  v24 = *v23;
  v25 = v23[1];
  sub_2415A4818(*v23);
  sub_2415E5A9C(v31, v9, v30, v29, v28, v27, v13, v15 & 1, (uint64_t)v8, 0, 0, v20, v22, 0, v24, v25, (uint64_t)sub_2416AF66C, 0);
  return sub_2416B18C8((uint64_t)v8, v32);
}

uint64_t sub_2416AF458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[4];

  v1 = type metadata accessor for HealthDemographicData();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, qword_257139AE8, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v15 - v7;
  v9 = type metadata accessor for EditBloodTypeCellView();
  v10 = *(void **)(v0 + *(int *)(v9 + 32));
  if (v10)
  {
    if ((objc_msgSend(v10, sel_suggestHealthData) & 1) != 0)
    {
      v11 = *(_QWORD *)(v0 + *(int *)(v9 + 24));
      swift_getKeyPath();
      v15[1] = v11;
      sub_24159CE88((unint64_t *)&qword_257139BC0, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicDataProvider, (uint64_t)&unk_2416BCD70);
      sub_2416B9CAC();
      swift_release();
      v12 = v11 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data;
      swift_beginAccess();
      sub_2415A0304(v12, (uint64_t)v8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1))
      {
        sub_2415BEF64((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for HealthDemographicData);
        sub_2415A0284((uint64_t)v8);
        v13 = *(_QWORD *)&v4[*(int *)(v1 + 36)];
        sub_2415A6154((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for HealthDemographicData);
        return v13;
      }
      sub_2415A0284((uint64_t)v8);
    }
    return 0;
  }
  sub_2415CA770();
  sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
  result = sub_2416BA264();
  __break(1u);
  return result;
}

uint64_t sub_2416AF66C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_2416AF67C()
{
  return MEMORY[0x24BEE1778];
}

uint64_t sub_2416AF688()
{
  id v0;
  uint64_t v1;

  v0 = (id)HKStringForBloodType();
  v1 = sub_2416BB128();

  return v1;
}

uint64_t sub_2416AF6D4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_24159CE88(&qword_2571405F8, (uint64_t (*)(uint64_t))type metadata accessor for HKBloodType, (uint64_t)&unk_2416BC924);
  result = sub_24159CE88(qword_257140600, (uint64_t (*)(uint64_t))type metadata accessor for HKBloodType, (uint64_t)&protocol conformance descriptor for HKBloodType);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_QWORD *sub_2416AF730(_QWORD *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  void *v93;
  id v94;
  void *v96;
  void *v97;
  char *__dst;
  int *v99;
  char *v101;
  _QWORD *v102;
  uint64_t v103;
  int *v104;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v26 = (_QWORD *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    v99 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    v7 = v99[5];
    v101 = a2;
    v102 = a1;
    v8 = (_QWORD *)((char *)a1 + v7);
    v9 = &a2[v7];
    v10 = *(_QWORD *)&a2[v7 + 8];
    *v8 = *(_QWORD *)&a2[v7];
    v8[1] = v10;
    v12 = *(_QWORD *)&a2[v7 + 16];
    v11 = *(_QWORD *)&a2[v7 + 24];
    v8[2] = v12;
    v8[3] = v11;
    v13 = *((_QWORD *)v9 + 5);
    v8[4] = *((_QWORD *)v9 + 4);
    v8[5] = v13;
    v14 = *((_QWORD *)v9 + 7);
    v8[6] = *((_QWORD *)v9 + 6);
    v8[7] = v14;
    v15 = *((_QWORD *)v9 + 9);
    v8[8] = *((_QWORD *)v9 + 8);
    v8[9] = v15;
    v16 = *((_QWORD *)v9 + 11);
    v8[10] = *((_QWORD *)v9 + 10);
    v8[11] = v16;
    v96 = (void *)*((_QWORD *)v9 + 12);
    v97 = (void *)*((_QWORD *)v9 + 13);
    v8[12] = v96;
    v8[13] = v97;
    v104 = (int *)type metadata accessor for MedicalIDData();
    v17 = v104[13];
    __dst = (char *)v8 + v17;
    v18 = &v9[v17];
    v19 = sub_2416B9B50();
    v103 = *(_QWORD *)(v19 - 8);
    v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = v96;
    v22 = v97;
    if (v20(v18, 1, v19))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v24 = v103;
    }
    else
    {
      v24 = v103;
      (*(void (**)(char *, char *, uint64_t))(v103 + 16))(__dst, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v103 + 56))(__dst, 0, 1, v19);
    }
    v27 = v104[14];
    v28 = (char *)v8 + v27;
    v29 = &v9[v27];
    v30 = v20;
    if (v20(&v9[v27], 1, v19))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v29, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v19);
    }
    v32 = v104[15];
    v33 = (_QWORD *)((char *)v8 + v32);
    v34 = &v9[v32];
    v35 = *((_QWORD *)v34 + 1);
    *v33 = *(_QWORD *)v34;
    v33[1] = v35;
    v36 = v104[16];
    v37 = (_QWORD *)((char *)v8 + v36);
    v38 = &v9[v36];
    v39 = *((_QWORD *)v38 + 1);
    *v37 = *(_QWORD *)v38;
    v37[1] = v39;
    *((_BYTE *)v8 + v104[17]) = v9[v104[17]];
    *((_BYTE *)v8 + v104[18]) = v9[v104[18]];
    v40 = v104[19];
    v41 = (char *)v8 + v40;
    v42 = (uint64_t *)&v9[v40];
    v43 = *(_QWORD *)&v9[v40 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v43 >> 60 == 15)
    {
      *(_OWORD *)v41 = *(_OWORD *)v42;
    }
    else
    {
      v44 = *v42;
      sub_2415A0A90(*v42, v43);
      *(_QWORD *)v41 = v44;
      *((_QWORD *)v41 + 1) = v43;
    }
    v45 = v104[20];
    v46 = (char *)v8 + v45;
    v47 = &v9[v45];
    v48 = sub_2416B9A18();
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    v51 = v104[21];
    v52 = *(void **)&v9[v51];
    *(_QWORD *)((char *)v8 + v51) = v52;
    v53 = v104[22];
    v54 = (char *)v8 + v53;
    v55 = &v9[v53];
    v56 = v52;
    v26 = v102;
    if (v30(v55, 1, v19))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v54, v55, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v54, 0, 1, v19);
    }
    v58 = v99[6];
    v59 = (char *)v102 + v58;
    v60 = &v101[v58];
    v61 = sub_2416B9C10();
    v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16);
    v62(v59, v60, v61);
    v63 = v99[7];
    v64 = (char *)v102 + v63;
    v65 = &v101[v63];
    v62((char *)v102 + v63, &v101[v63], v61);
    v66 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    v67 = *(void **)&v65[v66];
    *(_QWORD *)&v64[v66] = v67;
    v68 = v99[8];
    v69 = (char *)v102 + v68;
    v70 = &v101[v68];
    v71 = v67;
    v62(v69, v70, v61);
    v72 = type metadata accessor for MedicalIDWeightFormatter();
    v73 = *(int *)(v72 + 20);
    v74 = *(void **)&v70[v73];
    *(_QWORD *)&v69[v73] = v74;
    v75 = *(int *)(v72 + 24);
    v76 = *(void **)&v70[v75];
    *(_QWORD *)&v69[v75] = v76;
    v77 = a3[5];
    v78 = a3[6];
    v79 = (_QWORD *)((char *)v102 + v77);
    v80 = &v101[v77];
    v81 = *((_QWORD *)v80 + 1);
    *v79 = *(_QWORD *)v80;
    v79[1] = v81;
    v79[2] = *((_QWORD *)v80 + 2);
    *(_QWORD *)((char *)v102 + v78) = *(_QWORD *)&v101[v78];
    v82 = a3[7];
    v83 = (_QWORD *)((char *)v102 + v82);
    v84 = &v101[v82];
    v85 = *(_QWORD *)&v101[v82];
    v86 = v74;
    v87 = v76;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v85)
    {
      v88 = *((_QWORD *)v84 + 1);
      *v83 = v85;
      v83[1] = v88;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v83 = *(_OWORD *)v84;
    }
    v89 = a3[8];
    v90 = (_QWORD *)((char *)v102 + v89);
    v91 = &v101[v89];
    v93 = *(void **)v91;
    v92 = *((_QWORD *)v91 + 1);
    *v90 = v93;
    v90[1] = v92;
    v94 = v93;
  }
  return v26;
}

void sub_2416AFC90(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  swift_bridgeObjectRelease();
  v3 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v4 = a1 + v3[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = v4 + v5[13];
  v7 = sub_2416B9B50();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v10 = v4 + v5[14];
  if (!v9(v10, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)(v4 + v5[19]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_2415A0DAC(*v11, v12);
  v13 = v4 + v5[20];
  v14 = sub_2416B9A18();
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);

  v16 = v4 + v5[22];
  if (!v9(v16, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v16, v7);
  v17 = a1 + v3[6];
  v18 = sub_2416B9C10();
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(v17, v18);
  v20 = a1 + v3[7];
  v19(v20, v18);

  v21 = a1 + v3[8];
  v19(v21, v18);
  v22 = type metadata accessor for MedicalIDWeightFormatter();

  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + *(int *)(a2 + 28)))
    swift_release();

}

char *sub_2416AFF34(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  id v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  void *v90;
  id v91;
  void *v93;
  void *v94;
  char *__dst;
  int *v96;
  char *v98;
  char *v99;
  uint64_t v100;
  int *v101;

  v5 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v5;
  v96 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v6 = v96[5];
  v98 = a2;
  v99 = a1;
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  *(_QWORD *)v7 = *(_QWORD *)&a2[v6];
  *((_QWORD *)v7 + 1) = v9;
  v11 = *(_QWORD *)&a2[v6 + 16];
  v10 = *(_QWORD *)&a2[v6 + 24];
  *((_QWORD *)v7 + 2) = v11;
  *((_QWORD *)v7 + 3) = v10;
  v12 = *((_QWORD *)v8 + 5);
  *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
  *((_QWORD *)v7 + 5) = v12;
  v13 = *((_QWORD *)v8 + 7);
  *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
  *((_QWORD *)v7 + 7) = v13;
  v14 = *((_QWORD *)v8 + 9);
  *((_QWORD *)v7 + 8) = *((_QWORD *)v8 + 8);
  *((_QWORD *)v7 + 9) = v14;
  v15 = *((_QWORD *)v8 + 11);
  *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
  *((_QWORD *)v7 + 11) = v15;
  v93 = (void *)*((_QWORD *)v8 + 12);
  v94 = (void *)*((_QWORD *)v8 + 13);
  *((_QWORD *)v7 + 12) = v93;
  *((_QWORD *)v7 + 13) = v94;
  v101 = (int *)type metadata accessor for MedicalIDData();
  v16 = v101[13];
  __dst = &v7[v16];
  v17 = &v8[v16];
  v18 = sub_2416B9B50();
  v100 = *(_QWORD *)(v18 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = v93;
  v21 = v94;
  if (v19(v17, 1, v18))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    v23 = v100;
  }
  else
  {
    v23 = v100;
    (*(void (**)(char *, char *, uint64_t))(v100 + 16))(__dst, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(__dst, 0, 1, v18);
  }
  v24 = v101[14];
  v25 = &v7[v24];
  v26 = &v8[v24];
  v27 = v19;
  if (v19(&v8[v24], 1, v18))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v25, v26, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v18);
  }
  v29 = v101[15];
  v30 = &v7[v29];
  v31 = &v8[v29];
  v32 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = v32;
  v33 = v101[16];
  v34 = &v7[v33];
  v35 = &v8[v33];
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = v36;
  v7[v101[17]] = v8[v101[17]];
  v7[v101[18]] = v8[v101[18]];
  v37 = v101[19];
  v38 = &v7[v37];
  v39 = (uint64_t *)&v8[v37];
  v40 = *(_QWORD *)&v8[v37 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v40 >> 60 == 15)
  {
    *(_OWORD *)v38 = *(_OWORD *)v39;
  }
  else
  {
    v41 = *v39;
    sub_2415A0A90(*v39, v40);
    *(_QWORD *)v38 = v41;
    *((_QWORD *)v38 + 1) = v40;
  }
  v42 = v101[20];
  v43 = &v7[v42];
  v44 = &v8[v42];
  v45 = sub_2416B9A18();
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  v48 = v101[21];
  v49 = *(void **)&v8[v48];
  *(_QWORD *)&v7[v48] = v49;
  v50 = v101[22];
  v51 = &v7[v50];
  v52 = &v8[v50];
  v53 = v49;
  if (v27(v52, 1, v18))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v51, v52, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v51, 0, 1, v18);
  }
  v55 = v96[6];
  v56 = &v99[v55];
  v57 = &v98[v55];
  v58 = sub_2416B9C10();
  v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
  v59(v56, v57, v58);
  v60 = v96[7];
  v61 = &v99[v60];
  v62 = &v98[v60];
  v59(&v99[v60], &v98[v60], v58);
  v63 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v64 = *(void **)&v62[v63];
  *(_QWORD *)&v61[v63] = v64;
  v65 = v96[8];
  v66 = &v99[v65];
  v67 = &v98[v65];
  v68 = v64;
  v59(v66, v67, v58);
  v69 = type metadata accessor for MedicalIDWeightFormatter();
  v70 = *(int *)(v69 + 20);
  v71 = *(void **)&v67[v70];
  *(_QWORD *)&v66[v70] = v71;
  v72 = *(int *)(v69 + 24);
  v73 = *(void **)&v67[v72];
  *(_QWORD *)&v66[v72] = v73;
  v74 = a3[5];
  v75 = a3[6];
  v76 = &v99[v74];
  v77 = &v98[v74];
  v78 = *((_QWORD *)v77 + 1);
  *(_QWORD *)v76 = *(_QWORD *)v77;
  *((_QWORD *)v76 + 1) = v78;
  *((_QWORD *)v76 + 2) = *((_QWORD *)v77 + 2);
  *(_QWORD *)&v99[v75] = *(_QWORD *)&v98[v75];
  v79 = a3[7];
  v80 = &v99[v79];
  v81 = &v98[v79];
  v82 = *(_QWORD *)&v98[v79];
  v83 = v71;
  v84 = v73;
  swift_retain();
  swift_retain();
  swift_retain();
  if (v82)
  {
    v85 = *((_QWORD *)v81 + 1);
    *(_QWORD *)v80 = v82;
    *((_QWORD *)v80 + 1) = v85;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v80 = *(_OWORD *)v81;
  }
  v86 = a3[8];
  v87 = &v99[v86];
  v88 = &v98[v86];
  v90 = *(void **)v88;
  v89 = *((_QWORD *)v88 + 1);
  *(_QWORD *)v87 = v90;
  *((_QWORD *)v87 + 1) = v89;
  v91 = v90;
  return v99;
}

char *sub_2416B0468(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  id v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  id v82;
  uint64_t v83;
  void *v84;
  void *v85;
  id v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  void *v100;
  void *v101;
  id v102;
  uint64_t (*v104)(char *, uint64_t, uint64_t);
  uint64_t v105;
  int *v106;
  char *v108;
  char *v109;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v106 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v5 = v106[5];
  v108 = a2;
  v109 = a1;
  v6 = &a1[v5];
  v7 = &a2[v5];
  *(_QWORD *)v6 = *(_QWORD *)&a2[v5];
  *((_QWORD *)v6 + 1) = *(_QWORD *)&a2[v5 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 2) = *((_QWORD *)v7 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 3) = *((_QWORD *)v7 + 3);
  *((_QWORD *)v6 + 4) = *((_QWORD *)v7 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 5) = *((_QWORD *)v7 + 5);
  *((_QWORD *)v6 + 6) = *((_QWORD *)v7 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 7) = *((_QWORD *)v7 + 7);
  *((_QWORD *)v6 + 8) = *((_QWORD *)v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 9) = *((_QWORD *)v7 + 9);
  *((_QWORD *)v6 + 10) = *((_QWORD *)v7 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 11) = *((_QWORD *)v7 + 11);
  v8 = (void *)*((_QWORD *)v6 + 12);
  v9 = (void *)*((_QWORD *)v7 + 12);
  *((_QWORD *)v6 + 12) = v9;
  v10 = v9;

  v11 = (void *)*((_QWORD *)v6 + 13);
  v12 = (void *)*((_QWORD *)v7 + 13);
  *((_QWORD *)v6 + 13) = v12;
  v13 = v12;

  v14 = (int *)type metadata accessor for MedicalIDData();
  v15 = v14[13];
  v16 = &v6[v15];
  v17 = &v7[v15];
  v18 = sub_2416B9B50();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  v24 = v14[14];
  v25 = &v6[v24];
  v26 = &v7[v24];
  v27 = v20(&v6[v24], 1, v18);
  v28 = v20(v26, 1, v18);
  v104 = v20;
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v25, v26, v18);
LABEL_13:
  v30 = v14[15];
  v31 = &v6[v30];
  v32 = &v7[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = v14[16];
  v34 = &v6[v33];
  v35 = &v7[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6[v14[17]] = v7[v14[17]];
  v6[v14[18]] = v7[v14[18]];
  v36 = v14[19];
  v37 = (uint64_t *)&v6[v36];
  v38 = (uint64_t *)&v7[v36];
  v39 = *(_QWORD *)&v7[v36 + 8];
  v105 = v19;
  if (*(_QWORD *)&v6[v36 + 8] >> 60 == 15)
  {
    if (v39 >> 60 != 15)
    {
      v40 = *v38;
      sub_2415A0A90(*v38, v39);
      *v37 = v40;
      v37[1] = v39;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v39 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v37);
LABEL_18:
    *(_OWORD *)v37 = *(_OWORD *)v38;
    goto LABEL_20;
  }
  v41 = *v38;
  sub_2415A0A90(*v38, v39);
  v42 = *v37;
  v43 = v37[1];
  *v37 = v41;
  v37[1] = v39;
  sub_2415A0DAC(v42, v43);
LABEL_20:
  v44 = v14[20];
  v45 = &v6[v44];
  v46 = &v7[v44];
  v47 = sub_2416B9A18();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v47);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 24))(v45, v46, v47);
LABEL_26:
  v53 = v14[21];
  v54 = *(void **)&v6[v53];
  v55 = *(void **)&v7[v53];
  *(_QWORD *)&v6[v53] = v55;
  v56 = v55;

  v57 = v14[22];
  v58 = &v6[v57];
  v59 = &v7[v57];
  v60 = v104(&v6[v57], 1, v18);
  v61 = v104(v59, 1, v18);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v58, v59, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v58, 0, 1, v18);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v58, v18);
LABEL_31:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v105 + 24))(v58, v59, v18);
LABEL_32:
  v63 = v106[6];
  v64 = &v109[v63];
  v65 = &v108[v63];
  v66 = sub_2416B9C10();
  v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 24);
  v67(v64, v65, v66);
  v68 = v106[7];
  v69 = &v109[v68];
  v70 = &v108[v68];
  v67(&v109[v68], &v108[v68], v66);
  v71 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v72 = *(void **)&v70[v71];
  v73 = *(void **)&v69[v71];
  *(_QWORD *)&v69[v71] = v72;
  v74 = v72;

  v75 = v106[8];
  v76 = &v109[v75];
  v77 = &v108[v75];
  v67(&v109[v75], &v108[v75], v66);
  v78 = type metadata accessor for MedicalIDWeightFormatter();
  v79 = *(int *)(v78 + 20);
  v80 = *(void **)&v77[v79];
  v81 = *(void **)&v76[v79];
  *(_QWORD *)&v76[v79] = v80;
  v82 = v80;

  v83 = *(int *)(v78 + 24);
  v84 = *(void **)&v77[v83];
  v85 = *(void **)&v76[v83];
  *(_QWORD *)&v76[v83] = v84;
  v86 = v84;

  v87 = a3[5];
  v88 = &v109[v87];
  v89 = &v108[v87];
  *(_QWORD *)&v109[v87] = *(_QWORD *)&v108[v87];
  swift_retain();
  swift_release();
  *((_QWORD *)v88 + 1) = *((_QWORD *)v89 + 1);
  swift_retain();
  swift_release();
  *((_QWORD *)v88 + 2) = *((_QWORD *)v89 + 2);
  *(_QWORD *)&v109[a3[6]] = *(_QWORD *)&v108[a3[6]];
  swift_retain();
  swift_release();
  v90 = a3[7];
  v91 = &v109[v90];
  v92 = &v108[v90];
  v93 = *(_QWORD *)&v109[v90];
  v94 = *(_QWORD *)&v108[v90];
  if (!v93)
  {
    if (v94)
    {
      v96 = *((_QWORD *)v92 + 1);
      *(_QWORD *)v91 = v94;
      *((_QWORD *)v91 + 1) = v96;
      swift_retain();
      goto LABEL_39;
    }
LABEL_38:
    *(_OWORD *)v91 = *(_OWORD *)v92;
    goto LABEL_39;
  }
  if (!v94)
  {
    swift_release();
    goto LABEL_38;
  }
  v95 = *((_QWORD *)v92 + 1);
  *(_QWORD *)v91 = v94;
  *((_QWORD *)v91 + 1) = v95;
  swift_retain();
  swift_release();
LABEL_39:
  v97 = a3[8];
  v98 = &v109[v97];
  v99 = &v108[v97];
  v100 = *(void **)&v109[v97];
  v101 = *(void **)&v108[v97];
  *(_QWORD *)v98 = v101;
  v102 = v101;

  *((_QWORD *)v98 + 1) = *((_QWORD *)v99 + 1);
  return v109;
}

char *sub_2416B0C00(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  int *v55;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v55 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v5 = v55[5];
  v6 = &a1[v5];
  v7 = &a2[v5];
  *(_OWORD *)v6 = *(_OWORD *)&a2[v5];
  *((_QWORD *)v6 + 2) = *(_QWORD *)&a2[v5 + 16];
  *(_OWORD *)(v6 + 24) = *(_OWORD *)&a2[v5 + 24];
  *(_OWORD *)(v6 + 40) = *(_OWORD *)&a2[v5 + 40];
  *(_OWORD *)(v6 + 56) = *(_OWORD *)&a2[v5 + 56];
  *(_OWORD *)(v6 + 72) = *(_OWORD *)&a2[v5 + 72];
  *((_QWORD *)v6 + 11) = *(_QWORD *)&a2[v5 + 88];
  *((_OWORD *)v6 + 6) = *(_OWORD *)&a2[v5 + 96];
  v8 = (int *)type metadata accessor for MedicalIDData();
  v9 = v8[13];
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = sub_2416B9B50();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = v8[14];
  v17 = &v6[v16];
  v18 = &v7[v16];
  v53 = v14;
  v54 = v13;
  if (v14(&v7[v16], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v18, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  *(_OWORD *)&v6[v8[15]] = *(_OWORD *)&v7[v8[15]];
  *(_OWORD *)&v6[v8[16]] = *(_OWORD *)&v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  v6[v8[18]] = v7[v8[18]];
  *(_OWORD *)&v6[v8[19]] = *(_OWORD *)&v7[v8[19]];
  v20 = v8[20];
  v21 = &v6[v20];
  v22 = &v7[v20];
  v23 = sub_2416B9A18();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(_QWORD *)&v6[v8[21]] = *(_QWORD *)&v7[v8[21]];
  v26 = v8[22];
  v27 = &v6[v26];
  v28 = &v7[v26];
  if (v53(&v7[v26], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v27, v28, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v27, 0, 1, v12);
  }
  v30 = v55[6];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = sub_2416B9C10();
  v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
  v34(v31, v32, v33);
  v35 = v55[7];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v34(&a1[v35], &a2[v35], v33);
  v38 = type metadata accessor for MedicalIDHeightFormatter();
  *(_QWORD *)&v36[*(int *)(v38 + 20)] = *(_QWORD *)&v37[*(int *)(v38 + 20)];
  v39 = v55[8];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v34(&a1[v39], &a2[v39], v33);
  v42 = type metadata accessor for MedicalIDWeightFormatter();
  *(_QWORD *)&v40[*(int *)(v42 + 20)] = *(_QWORD *)&v41[*(int *)(v42 + 20)];
  *(_QWORD *)&v40[*(int *)(v42 + 24)] = *(_QWORD *)&v41[*(int *)(v42 + 24)];
  v43 = a3[5];
  v44 = a3[6];
  v45 = &a1[v43];
  v46 = &a2[v43];
  *((_QWORD *)v45 + 2) = *((_QWORD *)v46 + 2);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *(_QWORD *)&a1[v44] = *(_QWORD *)&a2[v44];
  v47 = a3[7];
  v48 = &a1[v47];
  v49 = (uint64_t *)&a2[v47];
  v50 = *v49;
  if (*v49)
  {
    v51 = v49[1];
    *(_QWORD *)v48 = v50;
    *((_QWORD *)v48 + 1) = v51;
  }
  else
  {
    *(_OWORD *)v48 = *(_OWORD *)v49;
  }
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  return a1;
}

char *sub_2416B1044(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  void *v97;
  uint64_t (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  int *v101;
  char *v103;
  char *v104;

  v5 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  v101 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v6 = v101[5];
  v103 = a2;
  v104 = a1;
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  *(_QWORD *)v7 = *(_QWORD *)&a2[v6];
  *((_QWORD *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
  swift_bridgeObjectRelease();
  v10 = *((_QWORD *)v8 + 4);
  *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
  *((_QWORD *)v7 + 4) = v10;
  swift_bridgeObjectRelease();
  v11 = *((_QWORD *)v8 + 6);
  *((_QWORD *)v7 + 5) = *((_QWORD *)v8 + 5);
  *((_QWORD *)v7 + 6) = v11;
  swift_bridgeObjectRelease();
  v12 = *((_QWORD *)v8 + 8);
  *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
  *((_QWORD *)v7 + 8) = v12;
  swift_bridgeObjectRelease();
  v13 = *((_QWORD *)v8 + 10);
  *((_QWORD *)v7 + 9) = *((_QWORD *)v8 + 9);
  *((_QWORD *)v7 + 10) = v13;
  swift_bridgeObjectRelease();
  v14 = (void *)*((_QWORD *)v7 + 12);
  v15 = *((_QWORD *)v8 + 12);
  *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
  *((_QWORD *)v7 + 12) = v15;

  v16 = (void *)*((_QWORD *)v7 + 13);
  *((_QWORD *)v7 + 13) = *((_QWORD *)v8 + 13);

  v17 = (int *)type metadata accessor for MedicalIDData();
  v18 = v17[13];
  v19 = &v7[v18];
  v20 = &v8[v18];
  v21 = sub_2416B9B50();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  v27 = v17[14];
  v28 = &v7[v27];
  v29 = &v8[v27];
  v30 = v23(&v7[v27], 1, v21);
  v31 = v23(v29, 1, v21);
  v99 = v23;
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v28, v29, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v28, v21);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v28, v29, v21);
LABEL_13:
  v33 = v17[15];
  v34 = &v7[v33];
  v35 = (uint64_t *)&v8[v33];
  v37 = *v35;
  v36 = v35[1];
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v38 = v17[16];
  v39 = &v7[v38];
  v40 = (uint64_t *)&v8[v38];
  v42 = *v40;
  v41 = v40[1];
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v7[v17[17]] = v8[v17[17]];
  v7[v17[18]] = v8[v17[18]];
  v43 = v17[19];
  v44 = (uint64_t)&v7[v43];
  v45 = &v8[v43];
  v46 = *(_QWORD *)&v7[v43 + 8];
  v100 = v22;
  if (v46 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v44 = *(_OWORD *)v45;
    goto LABEL_18;
  }
  v47 = *((_QWORD *)v45 + 1);
  if (v47 >> 60 == 15)
  {
    sub_2415A1B38(v44);
    goto LABEL_16;
  }
  v48 = *(_QWORD *)v44;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_QWORD *)(v44 + 8) = v47;
  sub_2415A0DAC(v48, v46);
LABEL_18:
  v49 = v17[20];
  v50 = &v7[v49];
  v51 = &v8[v49];
  v52 = sub_2416B9A18();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v50, 1, v52);
  v56 = v54(v51, 1, v52);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v50, v51, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
LABEL_23:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v50, v51, v52);
LABEL_24:
  v58 = v17[21];
  v59 = *(void **)&v7[v58];
  *(_QWORD *)&v7[v58] = *(_QWORD *)&v8[v58];

  v60 = v17[22];
  v61 = &v7[v60];
  v62 = &v8[v60];
  v63 = v99(&v7[v60], 1, v21);
  v64 = v99(v62, 1, v21);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v61, v62, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v61, 0, 1, v21);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v100 + 8))(v61, v21);
LABEL_29:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v100 + 40))(v61, v62, v21);
LABEL_30:
  v66 = v101[6];
  v67 = &v104[v66];
  v68 = &v103[v66];
  v69 = sub_2416B9C10();
  v70 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 40);
  v70(v67, v68, v69);
  v71 = v101[7];
  v72 = &v104[v71];
  v73 = &v103[v71];
  v70(&v104[v71], &v103[v71], v69);
  v74 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v75 = *(void **)&v72[v74];
  *(_QWORD *)&v72[v74] = *(_QWORD *)&v73[v74];

  v76 = v101[8];
  v77 = &v104[v76];
  v78 = &v103[v76];
  v70(&v104[v76], &v103[v76], v69);
  v79 = type metadata accessor for MedicalIDWeightFormatter();
  v80 = *(int *)(v79 + 20);
  v81 = *(void **)&v77[v80];
  *(_QWORD *)&v77[v80] = *(_QWORD *)&v78[v80];

  v82 = *(int *)(v79 + 24);
  v83 = *(void **)&v77[v82];
  *(_QWORD *)&v77[v82] = *(_QWORD *)&v78[v82];

  v84 = a3[5];
  v85 = &v104[v84];
  v86 = &v103[v84];
  *(_QWORD *)&v104[v84] = *(_QWORD *)&v103[v84];
  swift_release();
  *((_QWORD *)v85 + 1) = *((_QWORD *)v86 + 1);
  swift_release();
  *((_QWORD *)v85 + 2) = *((_QWORD *)v86 + 2);
  *(_QWORD *)&v104[a3[6]] = *(_QWORD *)&v103[a3[6]];
  swift_release();
  v87 = a3[7];
  v88 = &v104[v87];
  v89 = &v103[v87];
  v90 = *(_QWORD *)&v104[v87];
  v91 = *(_QWORD *)&v103[v87];
  if (!v90)
  {
    if (v91)
    {
      v93 = *((_QWORD *)v89 + 1);
      *(_QWORD *)v88 = v91;
      *((_QWORD *)v88 + 1) = v93;
      goto LABEL_37;
    }
LABEL_36:
    *(_OWORD *)v88 = *(_OWORD *)v89;
    goto LABEL_37;
  }
  if (!v91)
  {
    swift_release();
    goto LABEL_36;
  }
  v92 = *((_QWORD *)v89 + 1);
  *(_QWORD *)v88 = v91;
  *((_QWORD *)v88 + 1) = v92;
  swift_release();
LABEL_37:
  v94 = a3[8];
  v95 = &v104[v94];
  v96 = &v103[v94];
  v97 = *(void **)&v104[v94];
  *(_QWORD *)v95 = *(_QWORD *)v96;

  *((_QWORD *)v95 + 1) = *((_QWORD *)v96 + 1);
  return v104;
}

uint64_t sub_2416B16DC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416B16E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MedicalIDBiometricsViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_2416B1768()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416B1774(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDBiometricsViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for EditBloodTypeCellView()
{
  uint64_t result;

  result = qword_257140660;
  if (!qword_257140660)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2416B182C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MedicalIDBiometricsViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2416B18B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2416B18C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2415E8E44();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2416B1914()
{
  return sub_24159CE88(qword_2571406B0, (uint64_t (*)(uint64_t))sub_2415E8E44, (uint64_t)&unk_2416C24C0);
}

_QWORD *sub_2416B1940(_QWORD *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  id v85;
  id v86;
  uint64_t v87;
  void *v89;
  void *v90;
  uint64_t v91;
  char *__dst;
  int *v93;
  char *v95;
  _QWORD *v96;
  int *v97;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v26 = (_QWORD *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    v93 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    v7 = v93[5];
    v95 = a2;
    v96 = a1;
    v8 = (_QWORD *)((char *)a1 + v7);
    v9 = &a2[v7];
    v10 = *(_QWORD *)&a2[v7 + 8];
    *v8 = *(_QWORD *)&a2[v7];
    v8[1] = v10;
    v12 = *(_QWORD *)&a2[v7 + 16];
    v11 = *(_QWORD *)&a2[v7 + 24];
    v8[2] = v12;
    v8[3] = v11;
    v13 = *((_QWORD *)v9 + 5);
    v8[4] = *((_QWORD *)v9 + 4);
    v8[5] = v13;
    v14 = *((_QWORD *)v9 + 7);
    v8[6] = *((_QWORD *)v9 + 6);
    v8[7] = v14;
    v15 = *((_QWORD *)v9 + 9);
    v8[8] = *((_QWORD *)v9 + 8);
    v8[9] = v15;
    v16 = *((_QWORD *)v9 + 11);
    v8[10] = *((_QWORD *)v9 + 10);
    v8[11] = v16;
    v89 = (void *)*((_QWORD *)v9 + 12);
    v90 = (void *)*((_QWORD *)v9 + 13);
    v8[12] = v89;
    v8[13] = v90;
    v97 = (int *)type metadata accessor for MedicalIDData();
    v17 = v97[13];
    __dst = (char *)v8 + v17;
    v18 = &v9[v17];
    v19 = sub_2416B9B50();
    v91 = *(_QWORD *)(v19 - 8);
    v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = v89;
    v22 = v90;
    if (v20(v18, 1, v19))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v24 = v91;
    }
    else
    {
      v24 = v91;
      (*(void (**)(char *, char *, uint64_t))(v91 + 16))(__dst, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(__dst, 0, 1, v19);
    }
    v27 = v97[14];
    v28 = (char *)v8 + v27;
    v29 = &v9[v27];
    v30 = v20;
    if (v20(&v9[v27], 1, v19))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v29, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v19);
    }
    v32 = v97[15];
    v33 = (_QWORD *)((char *)v8 + v32);
    v34 = &v9[v32];
    v35 = *((_QWORD *)v34 + 1);
    *v33 = *(_QWORD *)v34;
    v33[1] = v35;
    v36 = v97[16];
    v37 = (_QWORD *)((char *)v8 + v36);
    v38 = &v9[v36];
    v39 = *((_QWORD *)v38 + 1);
    *v37 = *(_QWORD *)v38;
    v37[1] = v39;
    *((_BYTE *)v8 + v97[17]) = v9[v97[17]];
    *((_BYTE *)v8 + v97[18]) = v9[v97[18]];
    v40 = v97[19];
    v41 = (char *)v8 + v40;
    v42 = (uint64_t *)&v9[v40];
    v43 = *(_QWORD *)&v9[v40 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v43 >> 60 == 15)
    {
      *(_OWORD *)v41 = *(_OWORD *)v42;
    }
    else
    {
      v44 = *v42;
      sub_2415A0A90(*v42, v43);
      *(_QWORD *)v41 = v44;
      *((_QWORD *)v41 + 1) = v43;
    }
    v45 = v30;
    v46 = v97[20];
    v47 = (char *)v8 + v46;
    v48 = &v9[v46];
    v49 = sub_2416B9A18();
    v50 = *(_QWORD *)(v49 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v48, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
    v52 = v97[21];
    v53 = *(void **)&v9[v52];
    *(_QWORD *)((char *)v8 + v52) = v53;
    v54 = v97[22];
    v55 = (char *)v8 + v54;
    v56 = &v9[v54];
    v57 = v53;
    if (v45(v56, 1, v19))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v55, v56, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v55, 0, 1, v19);
    }
    v59 = v93[6];
    v26 = v96;
    v60 = (char *)v96 + v59;
    v61 = &v95[v59];
    v62 = sub_2416B9C10();
    v63 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16);
    v63(v60, v61, v62);
    v64 = v93[7];
    v65 = (char *)v96 + v64;
    v66 = &v95[v64];
    v63((char *)v96 + v64, &v95[v64], v62);
    v67 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    v68 = *(void **)&v66[v67];
    *(_QWORD *)&v65[v67] = v68;
    v69 = v93[8];
    v70 = (char *)v96 + v69;
    v71 = &v95[v69];
    v72 = v68;
    v63(v70, v71, v62);
    v73 = type metadata accessor for MedicalIDWeightFormatter();
    v74 = *(int *)(v73 + 20);
    v75 = *(void **)&v71[v74];
    *(_QWORD *)&v70[v74] = v75;
    v76 = *(int *)(v73 + 24);
    v77 = *(void **)&v71[v76];
    *(_QWORD *)&v70[v76] = v77;
    v78 = *(int *)(a3 + 20);
    v79 = *(int *)(a3 + 24);
    v80 = (_QWORD *)((char *)v96 + v78);
    v81 = &v95[v78];
    v82 = *((_QWORD *)v81 + 1);
    *v80 = *(_QWORD *)v81;
    v80[1] = v82;
    v83 = (_QWORD *)((char *)v96 + v79);
    v84 = &v95[v79];
    sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v85 = v75;
    v86 = v77;
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v87 = sub_2416BA144();
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v83, v84, v87);
    }
    else
    {
      *v83 = *(_QWORD *)v84;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v26;
}

uint64_t sub_2416B1EC4(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_bridgeObjectRelease();
  v3 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v4 = a1 + v3[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = v4 + v5[13];
  v7 = sub_2416B9B50();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v10 = v4 + v5[14];
  if (!v9(v10, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)(v4 + v5[19]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_2415A0DAC(*v11, v12);
  v13 = v4 + v5[20];
  v14 = sub_2416B9A18();
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);

  v16 = v4 + v5[22];
  if (!v9(v16, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v16, v7);
  v17 = a1 + v3[6];
  v18 = sub_2416B9C10();
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(v17, v18);
  v20 = a1 + v3[7];
  v19(v20, v18);

  v21 = a1 + v3[8];
  v19(v21, v18);
  v22 = type metadata accessor for MedicalIDWeightFormatter();

  swift_release();
  v23 = a1 + *(int *)(a2 + 24);
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v24 = sub_2416BA144();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
}

char *sub_2416B21AC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  id v81;
  id v82;
  uint64_t v83;
  char *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  char *__dst;
  int *v90;
  char *v92;
  char *v93;
  int *v94;

  v5 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v5;
  v90 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v6 = v90[5];
  v92 = a2;
  v93 = a1;
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  *(_QWORD *)v7 = *(_QWORD *)&a2[v6];
  *((_QWORD *)v7 + 1) = v9;
  v11 = *(_QWORD *)&a2[v6 + 16];
  v10 = *(_QWORD *)&a2[v6 + 24];
  *((_QWORD *)v7 + 2) = v11;
  *((_QWORD *)v7 + 3) = v10;
  v12 = *((_QWORD *)v8 + 5);
  *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
  *((_QWORD *)v7 + 5) = v12;
  v13 = *((_QWORD *)v8 + 7);
  *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
  *((_QWORD *)v7 + 7) = v13;
  v14 = *((_QWORD *)v8 + 9);
  *((_QWORD *)v7 + 8) = *((_QWORD *)v8 + 8);
  *((_QWORD *)v7 + 9) = v14;
  v15 = *((_QWORD *)v8 + 11);
  *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
  *((_QWORD *)v7 + 11) = v15;
  v86 = (void *)*((_QWORD *)v8 + 12);
  v87 = (void *)*((_QWORD *)v8 + 13);
  *((_QWORD *)v7 + 12) = v86;
  *((_QWORD *)v7 + 13) = v87;
  v94 = (int *)type metadata accessor for MedicalIDData();
  v16 = v94[13];
  __dst = &v7[v16];
  v85 = &v8[v16];
  v17 = sub_2416B9B50();
  v88 = *(_QWORD *)(v17 - 8);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = v86;
  v20 = v87;
  if (v18(v85, 1, v17))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v85, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    v22 = v88;
  }
  else
  {
    v22 = v88;
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))(__dst, v85, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(__dst, 0, 1, v17);
  }
  v23 = v94[14];
  v24 = &v7[v23];
  v25 = &v8[v23];
  v26 = v18;
  if (v18(&v8[v23], 1, v17))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v25, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v17);
  }
  v28 = v94[15];
  v29 = &v7[v28];
  v30 = &v8[v28];
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = v31;
  v32 = v94[16];
  v33 = &v7[v32];
  v34 = &v8[v32];
  v35 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = v35;
  v7[v94[17]] = v8[v94[17]];
  v7[v94[18]] = v8[v94[18]];
  v36 = v94[19];
  v37 = &v7[v36];
  v38 = (uint64_t *)&v8[v36];
  v39 = *(_QWORD *)&v8[v36 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v39 >> 60 == 15)
  {
    *(_OWORD *)v37 = *(_OWORD *)v38;
  }
  else
  {
    v40 = *v38;
    sub_2415A0A90(*v38, v39);
    *(_QWORD *)v37 = v40;
    *((_QWORD *)v37 + 1) = v39;
  }
  v41 = v26;
  v42 = v94[20];
  v43 = &v7[v42];
  v44 = &v8[v42];
  v45 = sub_2416B9A18();
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  v48 = v94[21];
  v49 = *(void **)&v8[v48];
  *(_QWORD *)&v7[v48] = v49;
  v50 = v94[22];
  v51 = &v7[v50];
  v52 = &v8[v50];
  v53 = v49;
  if (v41(v52, 1, v17))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v51, v52, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v51, 0, 1, v17);
  }
  v55 = v90[6];
  v56 = &v93[v55];
  v57 = &v92[v55];
  v58 = sub_2416B9C10();
  v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
  v59(v56, v57, v58);
  v60 = v90[7];
  v61 = &v93[v60];
  v62 = &v92[v60];
  v59(&v93[v60], &v92[v60], v58);
  v63 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v64 = *(void **)&v62[v63];
  *(_QWORD *)&v61[v63] = v64;
  v65 = v90[8];
  v66 = &v93[v65];
  v67 = &v92[v65];
  v68 = v64;
  v59(v66, v67, v58);
  v69 = type metadata accessor for MedicalIDWeightFormatter();
  v70 = *(int *)(v69 + 20);
  v71 = *(void **)&v67[v70];
  *(_QWORD *)&v66[v70] = v71;
  v72 = *(int *)(v69 + 24);
  v73 = *(void **)&v67[v72];
  *(_QWORD *)&v66[v72] = v73;
  v74 = *(int *)(a3 + 20);
  v75 = *(int *)(a3 + 24);
  v76 = &v93[v74];
  v77 = &v92[v74];
  v78 = *((_QWORD *)v77 + 1);
  *(_QWORD *)v76 = *(_QWORD *)v77;
  *((_QWORD *)v76 + 1) = v78;
  v79 = &v93[v75];
  v80 = &v92[v75];
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v81 = v71;
  v82 = v73;
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v83 = sub_2416BA144();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v79, v80, v83);
  }
  else
  {
    *(_QWORD *)v79 = *(_QWORD *)v80;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return v93;
}

char *sub_2416B2700(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  id v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  id v83;
  uint64_t v84;
  void *v85;
  void *v86;
  id v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t (*v97)(char *, uint64_t, uint64_t);
  uint64_t v98;
  int *v99;
  char *v101;
  char *v102;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v99 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v5 = v99[5];
  v101 = a2;
  v102 = a1;
  v6 = &a1[v5];
  v7 = &a2[v5];
  *(_QWORD *)v6 = *(_QWORD *)&a2[v5];
  *((_QWORD *)v6 + 1) = *(_QWORD *)&a2[v5 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 2) = *((_QWORD *)v7 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 3) = *((_QWORD *)v7 + 3);
  *((_QWORD *)v6 + 4) = *((_QWORD *)v7 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 5) = *((_QWORD *)v7 + 5);
  *((_QWORD *)v6 + 6) = *((_QWORD *)v7 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 7) = *((_QWORD *)v7 + 7);
  *((_QWORD *)v6 + 8) = *((_QWORD *)v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 9) = *((_QWORD *)v7 + 9);
  *((_QWORD *)v6 + 10) = *((_QWORD *)v7 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 11) = *((_QWORD *)v7 + 11);
  v8 = (void *)*((_QWORD *)v6 + 12);
  v9 = (void *)*((_QWORD *)v7 + 12);
  *((_QWORD *)v6 + 12) = v9;
  v10 = v9;

  v11 = (void *)*((_QWORD *)v6 + 13);
  v12 = (void *)*((_QWORD *)v7 + 13);
  *((_QWORD *)v6 + 13) = v12;
  v13 = v12;

  v14 = (int *)type metadata accessor for MedicalIDData();
  v15 = v14[13];
  v16 = &v6[v15];
  v17 = &v7[v15];
  v18 = sub_2416B9B50();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  v24 = v14[14];
  v25 = &v6[v24];
  v26 = &v7[v24];
  v27 = v20(&v6[v24], 1, v18);
  v28 = v20(v26, 1, v18);
  v98 = v19;
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v25, v26, v18);
LABEL_13:
  v30 = v14[15];
  v31 = &v6[v30];
  v32 = &v7[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = v14[16];
  v34 = &v6[v33];
  v35 = &v7[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6[v14[17]] = v7[v14[17]];
  v6[v14[18]] = v7[v14[18]];
  v36 = v14[19];
  v37 = (uint64_t *)&v6[v36];
  v38 = (uint64_t *)&v7[v36];
  v39 = *(_QWORD *)&v7[v36 + 8];
  v97 = v20;
  if (*(_QWORD *)&v6[v36 + 8] >> 60 == 15)
  {
    if (v39 >> 60 != 15)
    {
      v40 = *v38;
      sub_2415A0A90(*v38, v39);
      *v37 = v40;
      v37[1] = v39;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v39 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v37);
LABEL_18:
    *(_OWORD *)v37 = *(_OWORD *)v38;
    goto LABEL_20;
  }
  v41 = *v38;
  sub_2415A0A90(*v38, v39);
  v42 = *v37;
  v43 = v37[1];
  *v37 = v41;
  v37[1] = v39;
  sub_2415A0DAC(v42, v43);
LABEL_20:
  v44 = v14[20];
  v45 = &v6[v44];
  v46 = &v7[v44];
  v47 = sub_2416B9A18();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (v50)
  {
    v52 = v97;
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v52 = v97;
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v47);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 24))(v45, v46, v47);
LABEL_26:
  v54 = v14[21];
  v55 = *(void **)&v6[v54];
  v56 = *(void **)&v7[v54];
  *(_QWORD *)&v6[v54] = v56;
  v57 = v56;

  v58 = v14[22];
  v59 = &v6[v58];
  v60 = &v7[v58];
  v61 = v52(&v6[v58], 1, v18);
  v62 = v52(v60, 1, v18);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v59, v60, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v59, 0, 1, v18);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v98 + 8))(v59, v18);
LABEL_31:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v98 + 24))(v59, v60, v18);
LABEL_32:
  v64 = v99[6];
  v65 = &v102[v64];
  v66 = &v101[v64];
  v67 = sub_2416B9C10();
  v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 24);
  v68(v65, v66, v67);
  v69 = v99[7];
  v70 = &v102[v69];
  v71 = &v101[v69];
  v68(&v102[v69], &v101[v69], v67);
  v72 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v73 = *(void **)&v71[v72];
  v74 = *(void **)&v70[v72];
  *(_QWORD *)&v70[v72] = v73;
  v75 = v73;

  v76 = v99[8];
  v77 = &v102[v76];
  v78 = &v101[v76];
  v68(&v102[v76], &v101[v76], v67);
  v79 = type metadata accessor for MedicalIDWeightFormatter();
  v80 = *(int *)(v79 + 20);
  v81 = *(void **)&v78[v80];
  v82 = *(void **)&v77[v80];
  *(_QWORD *)&v77[v80] = v81;
  v83 = v81;

  v84 = *(int *)(v79 + 24);
  v85 = *(void **)&v78[v84];
  v86 = *(void **)&v77[v84];
  *(_QWORD *)&v77[v84] = v85;
  v87 = v85;

  v88 = *(int *)(a3 + 20);
  v89 = &v102[v88];
  v90 = &v101[v88];
  v91 = *((_QWORD *)v90 + 1);
  *(_QWORD *)v89 = *(_QWORD *)v90;
  *((_QWORD *)v89 + 1) = v91;
  swift_retain();
  swift_release();
  if (v102 != v101)
  {
    v92 = *(int *)(a3 + 24);
    v93 = &v102[v92];
    v94 = &v101[v92];
    sub_2416415E4((uint64_t)&v102[v92]);
    sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v95 = sub_2416BA144();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v93, v94, v95);
    }
    else
    {
      *(_QWORD *)v93 = *(_QWORD *)v94;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v102;
}

