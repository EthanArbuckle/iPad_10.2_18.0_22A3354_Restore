void sub_24159C338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void type metadata accessor for AVMediaType(uint64_t a1)
{
  sub_24159D7F0(a1, &qword_257139608, (uint64_t)&unk_251193DE0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKEmergencyCardOrganDonorStatus(uint64_t a1)
{
  sub_24159D7F0(a1, &qword_257139610, (uint64_t)&unk_251193E08, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKBloodType(uint64_t a1)
{
  sub_24159D7F0(a1, &qword_257139618, (uint64_t)&unk_251193E28, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for MIUIMedicalIDAccessPoint(uint64_t a1)
{
  sub_24159D7F0(a1, &qword_257139620, (uint64_t)&unk_251193E48, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for MIUIEntryPoint(uint64_t a1)
{
  sub_24159D7F0(a1, &qword_257139628, (uint64_t)&unk_251193E68, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for Weight(uint64_t a1)
{
  sub_24159D7F0(a1, &qword_257139630, (uint64_t)&unk_251193E88, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for TraitKey(uint64_t a1)
{
  sub_24159D7F0(a1, &qword_257139638, (uint64_t)&unk_251193EB0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for AttributeName(uint64_t a1)
{
  sub_24159D7F0(a1, &qword_257139640, (uint64_t)&unk_251193ED8, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for SourceType(uint64_t a1)
{
  sub_24159D7F0(a1, &qword_257139648, (uint64_t)&unk_251193F00, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for AVAuthorizationStatus(uint64_t a1)
{
  sub_24159D7F0(a1, &qword_257139650, (uint64_t)&unk_251193F20, MEMORY[0x24BEE4D40]);
}

void sub_24159C64C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t (*sub_24159C658())(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  sub_24159D590();
  sub_2416BA420();
  if (!v2)
    return 0;
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = v3;
  return sub_24159D5F8;
}

uint64_t sub_24159C6D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[2];

  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v8, a1);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  sub_24159D678(255);
  v11 = sub_2416BA150();
  v12 = sub_24159CE88((unint64_t *)&qword_257139770, (uint64_t (*)(uint64_t))sub_24159D678, MEMORY[0x24BDF1028]);
  v15[0] = a2;
  v15[1] = v12;
  MEMORY[0x2426994BC](MEMORY[0x24BDED308], v11, v15);
  result = sub_2416BA1E0();
  *a3 = result;
  a3[1] = v14;
  return result;
}

uint64_t sub_24159C804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  v21 = a2;
  v22 = a3;
  v24 = a4;
  v5 = sub_2416BA198();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D678(255);
  v9 = sub_2416BA150();
  v23 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v21 - v13;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v15 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v16 + v15, v8, v5);
  v25[2] = sub_24159D89C;
  v25[3] = v16;
  v17 = v22;
  sub_2416BAA2C();
  swift_release();
  swift_release();
  v18 = sub_24159CE88((unint64_t *)&qword_257139770, (uint64_t (*)(uint64_t))sub_24159D678, MEMORY[0x24BDF1028]);
  v25[0] = v17;
  v25[1] = v18;
  MEMORY[0x2426994BC](MEMORY[0x24BDED308], v9, v25);
  sub_2415E3D20((uint64_t)v12, v9, (uint64_t)v14);
  v19 = *(void (**)(char *, uint64_t))(v23 + 8);
  v19(v12, v9);
  sub_2415E07B8((uint64_t)v14, v9, v24);
  return ((uint64_t (*)(char *, uint64_t))v19)(v14, v9);
}

uint64_t sub_24159CA08(_QWORD *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  return sub_2416BA18C();
}

_QWORD *sub_24159CA60@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_24159CA70(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_24159CA7C(uint64_t a1, uint64_t a2)
{
  return sub_24159D088(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E8]);
}

uint64_t sub_24159CA9C(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_2416BB110();
  *a2 = 0;
  return result;
}

uint64_t sub_24159CB10(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_2416BB11C();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_24159CB8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_2416BB128();
  v2 = sub_2416BB0F8();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_24159CBCC()
{
  return sub_2416B9CE8();
}

uint64_t sub_24159CBE4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = MEMORY[0x2426974E8](a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_24159CC34(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = MEMORY[0x2426974F4](a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_24159CC88(double *a1@<X8>)
{
  *a1 = MEMORY[0x242697500]();
}

BOOL sub_24159CCAC(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_24159CCC0()
{
  sub_2416BB6BC();
  sub_2416BB6C8();
  return sub_2416BB6EC();
}

uint64_t sub_24159CD04()
{
  return sub_2416BB6C8();
}

uint64_t sub_24159CD2C()
{
  sub_2416BB6BC();
  sub_2416BB6C8();
  return sub_2416BB6EC();
}

uint64_t sub_24159CD74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2416BB128();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_24159CD9C(uint64_t a1, uint64_t a2)
{
  return sub_24159CDC4(a1, a2, (void (*)(void))sub_24159D38C, (void (*)(void))sub_24159D3A8);
}

uint64_t sub_24159CDB0(uint64_t a1, uint64_t a2)
{
  return sub_24159CDC4(a1, a2, (void (*)(void))sub_24159D534, (void (*)(void))sub_24159D550);
}

uint64_t sub_24159CDC4(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  a3();
  a4();
  return sub_2416BB608();
}

uint64_t sub_24159CE1C(uint64_t a1, uint64_t a2)
{
  return sub_24159CDC4(a1, a2, (void (*)(void))sub_24159D440, (void (*)(void))sub_24159D45C);
}

uint64_t sub_24159CE30()
{
  return sub_24159CE88(&qword_257139658, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_2416BC398);
}

uint64_t sub_24159CE5C()
{
  return sub_24159CE88(&qword_257139660, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_2416BC36C);
}

uint64_t sub_24159CE88(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x2426994BC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24159CEC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2416BB0F8();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_24159CF0C(uint64_t a1, uint64_t a2)
{
  return sub_24159CDC4(a1, a2, (void (*)(void))sub_24159D408, (void (*)(void))sub_24159D424);
}

uint64_t sub_24159CF20()
{
  return sub_24159CE88(&qword_257139668, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_2416BC4AC);
}

uint64_t sub_24159CF4C()
{
  return sub_24159CE88(&qword_257139670, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_2416BC480);
}

double sub_24159CF78@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t sub_24159CF84()
{
  sub_24159CE88(&qword_2571396D0, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_2416BC65C);
  sub_24159CE88(&qword_2571396D8, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_2416BC5FC);
  sub_24159D3C4();
  return sub_2416BB608();
}

uint64_t sub_24159D024()
{
  return sub_24159CE88(&qword_257139678, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_2416BC5C0);
}

uint64_t sub_24159D050()
{
  return sub_24159CE88(&qword_257139680, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_2416BC594);
}

uint64_t sub_24159D07C(uint64_t a1, uint64_t a2)
{
  return sub_24159D088(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t sub_24159D088(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_2416BB128();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_24159D0C4()
{
  sub_2416BB128();
  sub_2416BB164();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24159D104()
{
  uint64_t v0;

  sub_2416BB128();
  sub_2416BB6BC();
  sub_2416BB164();
  v0 = sub_2416BB6EC();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24159D174()
{
  return sub_2416BB2B4();
}

uint64_t sub_24159D17C()
{
  return sub_2416BB6E0();
}

uint64_t sub_24159D1AC()
{
  return sub_2416BB6B0();
}

uint64_t sub_24159D1BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_2416BB128();
  v2 = v1;
  if (v0 == sub_2416BB128() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_2416BB644();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL sub_24159D244(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_24159D258()
{
  return sub_24159CE88(&qword_257139688, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_2416BC630);
}

uint64_t sub_24159D284()
{
  return sub_24159CE88(&qword_257139690, (uint64_t (*)(uint64_t))type metadata accessor for AVMediaType, (uint64_t)&unk_2416BC80C);
}

uint64_t sub_24159D2B0()
{
  return sub_24159CE88(&qword_257139698, (uint64_t (*)(uint64_t))type metadata accessor for AVMediaType, (uint64_t)&unk_2416BC7E4);
}

uint64_t sub_24159D2DC()
{
  return sub_24159CE88(&qword_2571396A0, (uint64_t (*)(uint64_t))type metadata accessor for AVMediaType, (uint64_t)&unk_2416BC874);
}

uint64_t sub_24159D308()
{
  return sub_24159CE88(&qword_2571396A8, (uint64_t (*)(uint64_t))type metadata accessor for HKBloodType, (uint64_t)&unk_2416BC77C);
}

uint64_t sub_24159D334()
{
  return sub_24159CE88(&qword_2571396B0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_2416BC408);
}

uint64_t sub_24159D360()
{
  return sub_24159CE88(&qword_2571396B8, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_2416BC51C);
}

uint64_t sub_24159D38C()
{
  return sub_24159CE88(&qword_2571396C0, (uint64_t (*)(uint64_t))type metadata accessor for AVMediaType, (uint64_t)&unk_2416BC89C);
}

uint64_t sub_24159D3A8()
{
  return sub_24159CE88(&qword_2571396C8, (uint64_t (*)(uint64_t))type metadata accessor for AVMediaType, (uint64_t)&unk_2416BC844);
}

unint64_t sub_24159D3C4()
{
  unint64_t result;

  result = qword_2571396E0;
  if (!qword_2571396E0)
  {
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE50D0], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&qword_2571396E0);
  }
  return result;
}

uint64_t sub_24159D408()
{
  return sub_24159CE88(&qword_2571396E8, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_2416BC9AC);
}

uint64_t sub_24159D424()
{
  return sub_24159CE88(&qword_2571396F0, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_2416BC4E8);
}

uint64_t sub_24159D440()
{
  return sub_24159CE88(&qword_2571396F8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_2416BC968);
}

uint64_t sub_24159D45C()
{
  return sub_24159CE88(&qword_257139700, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_2416BC3D4);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_24159D7F0(a1, &qword_257139708, (uint64_t)&unk_251193F40, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for InfoKey(uint64_t a1)
{
  sub_24159D7F0(a1, &qword_257139710, (uint64_t)&unk_251193F68, MEMORY[0x24BEE4D40]);
}

uint64_t sub_24159D4B0()
{
  return sub_24159CE88(&qword_257139718, (uint64_t (*)(uint64_t))type metadata accessor for InfoKey, (uint64_t)&unk_2416BCA68);
}

uint64_t sub_24159D4DC()
{
  return sub_24159CE88(&qword_257139720, (uint64_t (*)(uint64_t))type metadata accessor for InfoKey, (uint64_t)&unk_2416BCA3C);
}

uint64_t sub_24159D508()
{
  return sub_24159CE88(&qword_257139728, (uint64_t (*)(uint64_t))type metadata accessor for InfoKey, (uint64_t)&unk_2416BCAD8);
}

uint64_t sub_24159D534()
{
  return sub_24159CE88(&qword_257139730, (uint64_t (*)(uint64_t))type metadata accessor for InfoKey, (uint64_t)&unk_2416BCB50);
}

uint64_t sub_24159D550()
{
  return sub_24159CE88(&qword_257139738, (uint64_t (*)(uint64_t))type metadata accessor for InfoKey, (uint64_t)&unk_2416BCAA4);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_24159D590()
{
  unint64_t result;

  result = qword_257139740;
  if (!qword_257139740)
  {
    result = MEMORY[0x2426994BC](&unk_2416BCBD4, &type metadata for ScrollToProviderKey);
    atomic_store(result, (unint64_t *)&qword_257139740);
  }
  return result;
}

uint64_t sub_24159D5D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24159D5F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return sub_2415C74E8(a1, a2, a3, a4 & 1, *(uint64_t (**)(uint64_t, _QWORD *))(v4 + 16));
}

uint64_t sub_24159D604()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_24159D65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 80);
  return sub_24159C804(a1, v2 + ((v3 + 32) & ~v3), *(_QWORD *)(v2 + 24), a2);
}

void sub_24159D678(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_257139748, (uint64_t (*)(uint64_t))sub_24159D694, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
}

void sub_24159D694(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_257139750, (uint64_t (*)(uint64_t))sub_24159D708, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_24159D6B0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t sub_24159D708()
{
  unint64_t result;

  result = qword_257139758;
  if (!qword_257139758)
  {
    sub_24159D79C();
    sub_24159D7F0(255, &qword_257139768, MEMORY[0x24BDF54C0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    sub_2416BB290();
    result = swift_getFunctionTypeMetadataGlobalActor();
    atomic_store(result, (unint64_t *)&qword_257139758);
  }
  return result;
}

unint64_t sub_24159D79C()
{
  unint64_t result;

  result = qword_257139760;
  if (!qword_257139760)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_257139760);
  }
  return result;
}

void sub_24159D7F0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_24159D83C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_2416BA198();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_24159D89C(_QWORD *a1)
{
  sub_2416BA198();
  return sub_24159CA08(a1);
}

ValueMetadata *type metadata accessor for ScrollToProviderKey()
{
  return &type metadata for ScrollToProviderKey;
}

uint64_t HealthKitMedicalIDDataProvider.statePublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD v8[2];

  sub_24159EF1C(0, &qword_257139900, (uint64_t (*)(uint64_t))sub_24159D9F8, sub_24159DB4C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB9648]);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)v8 - v4;
  v8[1] = *(_QWORD *)(v0 + 16);
  sub_24159D9F8();
  sub_24159DB4C();
  sub_24159DB68();
  sub_2416B9E80();
  sub_24159DBD0();
  v6 = sub_2416B9E5C();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v6;
}

void sub_24159D9F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257139908)
  {
    sub_24159EF1C(255, (unint64_t *)&qword_257139910, (uint64_t (*)(uint64_t))sub_24159DA7C, (uint64_t (*)(void))sub_24159DAD4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LoadState);
    v0 = sub_2416B9DFC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257139908);
  }
}

void sub_24159DA7C(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_257139918, (uint64_t (*)(uint64_t))sub_24159DA98, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

unint64_t sub_24159DA98()
{
  unint64_t result;

  result = qword_257139920;
  if (!qword_257139920)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_257139920);
  }
  return result;
}

unint64_t sub_24159DAD4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_257139928;
  if (!qword_257139928)
  {
    sub_24159DA7C(255);
    v2 = v1;
    v3 = sub_24159CE88(&qword_257139930, (uint64_t (*)(uint64_t))sub_24159DA98, MEMORY[0x24BEE5BE0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE4AB8], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_257139928);
  }
  return result;
}

uint64_t sub_24159DB4C()
{
  return sub_24159CE88(&qword_257139938, (uint64_t (*)(uint64_t))sub_24159D9F8, MEMORY[0x24BDB9D10]);
}

unint64_t sub_24159DB68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257139940;
  if (!qword_257139940)
  {
    sub_24159EF1C(255, (unint64_t *)&qword_257139910, (uint64_t (*)(uint64_t))sub_24159DA7C, (uint64_t (*)(void))sub_24159DAD4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LoadState);
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for LoadState<A>, v1);
    atomic_store(result, (unint64_t *)&qword_257139940);
  }
  return result;
}

unint64_t sub_24159DBD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257139948;
  if (!qword_257139948)
  {
    sub_24159EF1C(255, &qword_257139900, (uint64_t (*)(uint64_t))sub_24159D9F8, sub_24159DB4C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB9648]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDB9658], v1);
    atomic_store(result, (unint64_t *)&qword_257139948);
  }
  return result;
}

uint64_t HealthKitMedicalIDDataProvider.state.getter()
{
  return sub_2416B9DE4();
}

_QWORD *HealthKitMedicalIDDataProvider.__allocating_init(dataFetcher:medicalIDUpdateNotificationPublishers:medicalIDData:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v8;

  swift_allocObject();
  v8 = sub_24159ED90(a1, a2, a3, a4);
  swift_release();
  swift_bridgeObjectRelease();

  return v8;
}

_QWORD *HealthKitMedicalIDDataProvider.init(dataFetcher:medicalIDUpdateNotificationPublishers:medicalIDData:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v5;

  v5 = sub_24159ED90(a1, a2, a3, a4);
  swift_release();
  swift_bridgeObjectRelease();

  return v5;
}

uint64_t sub_24159DD24()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, unint64_t, _QWORD);

  v1 = *v0;
  swift_allocObject();
  swift_weakInit();
  v2 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38];
  sub_24159F35C(0, &qword_257139A78, MEMORY[0x24BDB9E38]);
  swift_allocObject();
  sub_2416B9E2C();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  sub_24159F250(&qword_257139A80, &qword_257139A78, v2, MEMORY[0x24BDB9E58]);
  swift_retain();
  sub_2416B9E68();
  swift_release();
  swift_release();
  swift_release();
  swift_beginAccess();
  sub_2416B9DC0();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_24159DE8C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v25 = *v1;
  v26 = v1 + 3;
  sub_24159EF1C(0, &qword_257139A00, (uint64_t (*)(uint64_t))sub_24159EF8C, sub_24159EFF4, MEMORY[0x24BDB99B8]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v20 - v6;
  sub_24159F010();
  v9 = *(_QWORD *)(v8 - 8);
  v21 = v8;
  v22 = v9;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159F174();
  v13 = *(_QWORD *)(v12 - 8);
  v23 = v12;
  v24 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = a1;
  sub_24159EF8C();
  sub_24159D6B0(0, &qword_257139A48, (uint64_t (*)(uint64_t))sub_24159EF8C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_24159EFF4();
  sub_24159F290();
  swift_bridgeObjectRetain();
  sub_2416B9D9C();
  sub_24159F0B8();
  sub_24159F10C();
  sub_2416B9E8C();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_allocObject();
  swift_weakInit();
  sub_2416B9DA8();
  sub_24159DA7C(0);
  v16 = MEMORY[0x24BDB9AE0];
  sub_24159F35C(0, &qword_257139A30, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_24159CE88(&qword_257139A40, (uint64_t (*)(uint64_t))sub_24159F010, MEMORY[0x24BDB95F8]);
  sub_24159F250(&qword_257139A38, &qword_257139A30, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v16, MEMORY[0x24BDB9AF8]);
  v17 = v21;
  sub_2416B9E74();
  swift_release();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v17);
  *(_QWORD *)(swift_allocObject() + 16) = v25;
  swift_allocObject();
  swift_weakInit();
  sub_24159CE88(&qword_257139A58, (uint64_t (*)(uint64_t))sub_24159F174, MEMORY[0x24BDB98F0]);
  v18 = v23;
  sub_2416B9E68();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v18);
  swift_beginAccess();
  sub_2416B9DC0();
  swift_endAccess();
  return swift_release();
}

void sub_24159E21C(void **a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *oslog;
  uint64_t v15;

  v1 = *a1;
  if (*a1)
  {
    v2 = v1;
    if (qword_2571395C0 != -1)
      swift_once();
    v3 = sub_2416B9D6C();
    __swift_project_value_buffer(v3, (uint64_t)qword_257147810);
    v4 = v1;
    v5 = v1;
    oslog = sub_2416B9D54();
    v6 = sub_2416BB374();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = swift_slowAlloc();
      v8 = swift_slowAlloc();
      v15 = v8;
      *(_DWORD *)v7 = 136315650;
      v9 = sub_2416BB704();
      sub_2415A8600(v9, v10, &v15);
      sub_2416BB44C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      sub_2415A8600(0xD000000000000014, 0x80000002416C3C20, &v15);
      sub_2416BB44C();
      *(_WORD *)(v7 + 22) = 2080;
      v11 = v1;
      sub_24159F0B8();
      v12 = sub_2416BB14C();
      sub_2415A8600(v12, v13, &v15);
      sub_2416BB44C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_241599000, oslog, v6, "%s %s Error: %s", (uint8_t *)v7, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x242699570](v8, -1, -1);
      MEMORY[0x242699570](v7, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_24159E49C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t, uint64_t, unint64_t, _QWORD);
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  sub_24159D6B0(0, &qword_257139A60, (uint64_t (*)(uint64_t))sub_24159DA7C, MEMORY[0x24BDB9DE0]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v15 - v5;
  sub_24159F35C(0, &qword_257139A68, MEMORY[0x24BDBA1B0]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v15 - v10;
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_allocObject();
    swift_weakInit();
    v12 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38];
    sub_24159F35C(0, &qword_257139A78, MEMORY[0x24BDB9E38]);
    swift_allocObject();
    v15 = sub_2416B9E2C();
    sub_24159F250(&qword_257139A80, &qword_257139A78, v12, MEMORY[0x24BDB9E58]);
    v13 = sub_2416B9E5C();
    swift_release();
    result = swift_release();
  }
  else
  {
    v15 = 0;
    sub_24159DA7C(0);
    sub_2416B9E20();
    sub_24159F0B8();
    sub_2416B9E14();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_24159F250(&qword_257139A70, &qword_257139A68, MEMORY[0x24BDBA1B0], MEMORY[0x24BDBA1D0]);
    v13 = sub_2416B9E5C();
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  *a1 = v13;
  return result;
}

uint64_t sub_24159E6E0(void **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = sub_2416B9D6C();
  v3 = *(_QWORD *)(v2 - 8);
  result = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  if (v7)
  {
    v8 = v7;
    if (qword_2571395C0 != -1)
      swift_once();
    v9 = __swift_project_value_buffer(v2, (uint64_t)qword_257147810);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v9, v2);
    v10 = v7;
    v11 = v7;
    v12 = sub_2416B9D54();
    v13 = sub_2416BB374();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc();
      v22 = swift_slowAlloc();
      v24 = v22;
      *(_DWORD *)v14 = 136315650;
      v15 = sub_2416BB704();
      v23 = sub_2415A8600(v15, v16, &v24);
      sub_2416BB44C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      v23 = sub_2415A8600(0x6269726373627573, 0xEE00293A6F742865, &v24);
      sub_2416BB44C();
      *(_WORD *)(v14 + 22) = 2080;
      v23 = (uint64_t)v7;
      v17 = v7;
      sub_24159F0B8();
      v18 = sub_2416BB14C();
      v23 = sub_2415A8600(v18, v19, &v24);
      sub_2416BB44C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_241599000, v12, v13, "%s %s Error: %s", (uint8_t *)v14, 0x20u);
      v20 = v22;
      swift_arrayDestroy();
      MEMORY[0x242699570](v20, -1, -1);
      MEMORY[0x242699570](v14, -1, -1);

    }
    else
    {

    }
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return result;
}

uint64_t sub_24159E9B0(void **a1)
{
  void *v1;
  uint64_t result;
  id v3;

  v1 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = v1;
    sub_2416B9DF0();
    return swift_release();
  }
  return result;
}

uint64_t sub_24159EA20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t Strong;
  void (*v6)(_QWORD, uint64_t);
  uint64_t v7;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v6 = *(void (**)(_QWORD, uint64_t))(Strong + 32);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = sub_24159F3CC;
    *(_QWORD *)(v7 + 24) = v4;
    swift_retain();
    swift_retain();
    v6(sub_24159F428, v7);
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain();
  }
  return swift_release();
}

void sub_24159EB14(int a1, id a2, void (*a3)(void))
{
  id v5;

  if (a2)
  {
    v5 = a2;
    ((void (*)(id, uint64_t))a3)(a2, 1);

  }
  else
  {
    a3();
  }
}

uint64_t HealthKitMedicalIDDataProvider.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t HealthKitMedicalIDDataProvider.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t _s11MedicalIDUI09HealthKitA14IDDataProviderC37medicalIDUpdateNotificationPublishersSay7Combine12AnyPublisherVyyts5NeverOGGvgZ_0()
{
  uint64_t result;
  uint64_t v1;

  result = *MEMORY[0x24BDD4690];
  if (*MEMORY[0x24BDD4690])
  {
    sub_2416BB188();
    sub_2416B9D24();
    swift_allocObject();
    sub_2416B9D18();
    result = *MEMORY[0x24BDD4698];
    if (*MEMORY[0x24BDD4698])
    {
      sub_2416BB188();
      swift_allocObject();
      sub_2416B9D18();
      v1 = MEMORY[0x24BEE4AF8];
      sub_2416BB548();
      sub_24159CE88(&qword_257139A88, (uint64_t (*)(uint64_t))MEMORY[0x24BE458A0], MEMORY[0x24BE45898]);
      sub_2416B9E5C();
      sub_2416BB524();
      sub_2416BB554();
      sub_2416BB560();
      sub_2416BB530();
      sub_2416B9E5C();
      sub_2416BB524();
      sub_2416BB554();
      sub_2416BB560();
      sub_2416BB530();
      swift_release();
      swift_release();
      return v1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_24159ED90(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  id v11;

  sub_24159D9F8();
  swift_allocObject();
  v9 = sub_2416B9E08();
  v10 = MEMORY[0x24BEE4B08];
  v4[2] = v9;
  v4[3] = v10;
  v4[4] = a1;
  v4[5] = a2;
  if (a4)
  {
    v11 = a4;
    swift_retain();
    sub_2416B9DF0();
  }
  else
  {
    swift_retain();
    sub_2416B9DF0();
    sub_24159DD24();
  }
  sub_24159DE8C(a3);
  return v4;
}

uint64_t sub_24159EE60@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2416B9DE4();
  *a1 = v3;
  return result;
}

uint64_t sub_24159EE9C(id *a1)
{
  sub_24159EF0C(*a1);
  return sub_2416B9DF0();
}

uint64_t type metadata accessor for HealthKitMedicalIDDataProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for HealthKitMedicalIDDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HealthKitMedicalIDDataProvider.__allocating_init(dataFetcher:medicalIDUpdateNotificationPublishers:medicalIDData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

id sub_24159EF0C(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

void sub_24159EF1C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4();
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

void sub_24159EF8C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257139A08)
  {
    v0 = sub_2416B9DB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257139A08);
  }
}

uint64_t sub_24159EFF4()
{
  return sub_24159CE88(&qword_257139A10, (uint64_t (*)(uint64_t))sub_24159EF8C, MEMORY[0x24BDB9AF8]);
}

void sub_24159F010()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257139A18)
  {
    sub_24159EF1C(255, &qword_257139A00, (uint64_t (*)(uint64_t))sub_24159EF8C, sub_24159EFF4, MEMORY[0x24BDB99B8]);
    sub_24159F0B8();
    sub_24159F10C();
    v0 = sub_2416B9D78();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257139A18);
  }
}

unint64_t sub_24159F0B8()
{
  unint64_t result;

  result = qword_25713D130;
  if (!qword_25713D130)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25713D130);
  }
  return result;
}

unint64_t sub_24159F10C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257139A20;
  if (!qword_257139A20)
  {
    sub_24159EF1C(255, &qword_257139A00, (uint64_t (*)(uint64_t))sub_24159EF8C, sub_24159EFF4, MEMORY[0x24BDB99B8]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDB99D8], v1);
    atomic_store(result, (unint64_t *)&qword_257139A20);
  }
  return result;
}

void sub_24159F174()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_257139A28)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_24159F35C(255, &qword_257139A30, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_24159F010();
    sub_24159F250(&qword_257139A38, &qword_257139A30, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    sub_24159CE88(&qword_257139A40, (uint64_t (*)(uint64_t))sub_24159F010, MEMORY[0x24BDB95F8]);
    v1 = sub_2416B9D90();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_257139A28);
  }
}

uint64_t sub_24159F250(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_24159F35C(255, a2, a3);
    result = MEMORY[0x2426994BC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24159F290()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257139A50;
  if (!qword_257139A50)
  {
    sub_24159D6B0(255, &qword_257139A48, (uint64_t (*)(uint64_t))sub_24159EF8C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_257139A50);
  }
  return result;
}

uint64_t sub_24159F2F0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_24159F314@<X0>(uint64_t *a1@<X8>)
{
  return sub_24159E49C(a1);
}

uint64_t sub_24159F31C()
{
  return swift_deallocObject();
}

uint64_t sub_24159F32C(void **a1)
{
  return sub_24159E6E0(a1);
}

uint64_t sub_24159F334(void **a1)
{
  return sub_24159E9B0(a1);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_24159F354(uint64_t a1, uint64_t a2)
{
  return sub_24159EA20(a1, a2);
}

void sub_24159F35C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_24159DA7C(255);
    v7 = v6;
    v8 = sub_24159F0B8();
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_24159F3CC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_24159F404()
{
  swift_release();
  return swift_deallocObject();
}

void sub_24159F428(int a1, void *a2)
{
  uint64_t v2;

  sub_24159EB14(a1, a2, *(void (**)(void))(v2 + 16));
}

uint64_t sub_24159F430()
{
  return swift_deallocObject();
}

void sub_24159F440(void **a1)
{
  sub_24159E21C(a1);
}

uint64_t sub_24159F448(id *a1)
{
  id v1;

  v1 = *a1;
  return sub_2416B9DF0();
}

void sub_24159F484()
{
  id v0;
  void *v1;
  unsigned int v2;
  void *v3;
  void *v4;
  void *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_isAppleWatch);

    sub_2416BB4E8();
    swift_bridgeObjectRelease();
    sub_2416BB17C();
    v3 = (void *)sub_2416BB0F8();
    swift_bridgeObjectRelease();
    v4 = (void *)sub_2416BB0F8();
    sub_24159F618();
    v5 = (void *)sub_2416BB1E8();
    v6 = v2 == 0;
    if (v2)
      v7 = 1109271;
    else
      v7 = 616513;
    if (v6)
      v8 = 2;
    else
      v8 = 3;
    v9 = objc_msgSend((id)objc_opt_self(), sel_hk_tapToHealthRadarURLForComponent_title_description_classification_reproducibility_keywords_autoDiagnostics_attachments_collaborationContactHandles_, v7, v3, v4, 5, 0, v5, v8, 0, 0);

    sub_2416B9A9C();
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_24159F618()
{
  unint64_t result;

  result = qword_257139A90;
  if (!qword_257139A90)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_257139A90);
  }
  return result;
}

uint64_t MedicalIDListProperty.baseIdentifier.getter()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  if (*v0)
  {
    if (*v0 == 1)
    {
      v1 = 0x65696772656C6C41;
      sub_24159F83C();
      v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_2416BCC80;
      *(_QWORD *)(v2 + 32) = 0x496C61636964654DLL;
      *(_QWORD *)(v2 + 40) = 0xE900000000000044;
      *(_QWORD *)(v2 + 48) = 0x65696772656C6C41;
      *(_QWORD *)(v2 + 56) = 0xE900000000000073;
    }
    else
    {
      v1 = 0xD000000000000011;
      sub_24159F83C();
      v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_2416BCC80;
      *(_QWORD *)(v6 + 32) = 0x496C61636964654DLL;
      *(_QWORD *)(v6 + 40) = 0xE900000000000044;
      *(_QWORD *)(v6 + 48) = 0xD000000000000011;
      *(_QWORD *)(v6 + 56) = 0x80000002416C3CB0;
    }
    v3 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    v4 = (void *)HKUIJoinStringsForAutomationIdentifier();
  }
  else
  {
    v1 = 0x697461636964654DLL;
    sub_24159F83C();
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_2416BCC80;
    *(_QWORD *)(v5 + 32) = 0x496C61636964654DLL;
    *(_QWORD *)(v5 + 40) = 0xE900000000000044;
    *(_QWORD *)(v5 + 48) = 0x697461636964654DLL;
    *(_QWORD *)(v5 + 56) = 0xEB00000000736E6FLL;
    v3 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    v4 = (void *)HKUIJoinStringsForAutomationIdentifier();
  }
  v7 = v4;

  if (v7)
  {
    v1 = sub_2416BB128();

  }
  return v1;
}

void sub_24159F83C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713EB50)
  {
    v0 = sub_2416BB638();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713EB50);
  }
}

BOOL static MedicalIDListProperty.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MedicalIDListProperty.hash(into:)()
{
  return sub_2416BB6C8();
}

uint64_t MedicalIDListProperty.hashValue.getter()
{
  sub_2416BB6BC();
  sub_2416BB6C8();
  return sub_2416BB6EC();
}

BOOL sub_24159F910(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_24159F924()
{
  sub_2416BB6BC();
  sub_2416BB6C8();
  return sub_2416BB6EC();
}

uint64_t sub_24159F968()
{
  return sub_2416BB6C8();
}

uint64_t sub_24159F990()
{
  sub_2416BB6BC();
  sub_2416BB6C8();
  return sub_2416BB6EC();
}

uint64_t sub_24159F9D0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

unint64_t sub_24159F9E4()
{
  unint64_t result;

  result = qword_257139A98;
  if (!qword_257139A98)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDListProperty, &type metadata for MedicalIDListProperty);
    atomic_store(result, (unint64_t *)&qword_257139A98);
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MedicalIDListProperty(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDListProperty(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24159FB14 + 4 * byte_2416BCC95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24159FB48 + 4 * byte_2416BCC90[v4]))();
}

uint64_t sub_24159FB48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24159FB50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24159FB58);
  return result;
}

uint64_t sub_24159FB64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24159FB6CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24159FB70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24159FB78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24159FB84(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_24159FB8C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDListProperty()
{
  return &type metadata for MedicalIDListProperty;
}

uint64_t sub_24159FBA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  swift_getKeyPath();
  sub_2415A023C();
  sub_2416B9CAC();
  swift_release();
  v3 = v1 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data;
  swift_beginAccess();
  return sub_2415A0304(v3, a1);
}

uint64_t sub_24159FC3C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_getKeyPath();
  sub_2415A023C();
  sub_2416B9CAC();
  swift_release();
  v4 = v3 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data;
  swift_beginAccess();
  return sub_2415A0304(v4, a2);
}

uint64_t sub_24159FCD4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  sub_2415A01C8();
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2415A0304(a1, (uint64_t)v6);
  v7 = *a2;
  swift_getKeyPath();
  v10 = v7;
  v11 = v6;
  v12 = v7;
  sub_2415A023C();
  sub_2416B9CA0();
  swift_release();
  return sub_2415A0284((uint64_t)v6);
}

uint64_t sub_24159FDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data;
  swift_beginAccess();
  sub_2415A02C0(a2, v3);
  return swift_endAccess();
}

uint64_t sub_24159FE14(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  int *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t KeyPath;
  _QWORD v21[3];

  sub_2415A01C8();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (_QWORD *)((char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    v7 = objc_msgSend(a1, sel_firstName);
    v21[0] = sub_2416BB128();
    v9 = v8;

    v10 = objc_msgSend(a1, sel_lastName);
    v11 = sub_2416BB128();
    v13 = v12;

    v14 = objc_msgSend(a1, sel_dateOfBirthComponents);
    v15 = (int *)type metadata accessor for HealthDemographicData();
    sub_2416B99A0();

    v16 = objc_msgSend(a1, sel_heightQuantity);
    v17 = objc_msgSend(a1, sel_weightQuantity);
    v18 = objc_msgSend(a1, sel_bloodTypeObject);
    v19 = objc_msgSend(v18, sel_bloodType);

    *v4 = v21[0];
    v4[1] = v9;
    v4[2] = v11;
    v4[3] = v13;
    *(_QWORD *)((char *)v4 + v15[7]) = v16;
    *(_QWORD *)((char *)v4 + v15[8]) = v17;
    *(_QWORD *)((char *)v4 + v15[9]) = v19;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(*((_QWORD *)v15 - 1) + 56))(v4, 0, 1, v15);
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    v21[-2] = v6;
    v21[-1] = v4;
    v21[2] = v6;
    sub_2415A023C();
    sub_2416B9CA0();
    swift_release();
    sub_2415A0284((uint64_t)v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_2415A0084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_2415A0284(v0 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data);
  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_2415A00EC()
{
  return type metadata accessor for HealthDemographicDataProvider();
}

uint64_t type metadata accessor for HealthDemographicDataProvider()
{
  uint64_t result;

  result = qword_257139AD8;
  if (!qword_257139AD8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_2415A0130()
{
  unint64_t v0;
  unint64_t v1;

  sub_2415A01C8();
  if (v0 <= 0x3F)
  {
    sub_2416B9CDC();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

void sub_2415A01C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257139AE8[0])
  {
    type metadata accessor for HealthDemographicData();
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, qword_257139AE8);
  }
}

uint64_t sub_2415A0224()
{
  uint64_t v0;

  return sub_24159FDAC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_2415A023C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257139BC0;
  if (!qword_257139BC0)
  {
    v1 = type metadata accessor for HealthDemographicDataProvider();
    result = MEMORY[0x2426994BC](&unk_2416BCD70, v1);
    atomic_store(result, (unint64_t *)&qword_257139BC0);
  }
  return result;
}

uint64_t sub_2415A0284(uint64_t a1)
{
  uint64_t v2;

  sub_2415A01C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2415A02C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415A01C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415A0304(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415A01C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415A0348()
{
  return sub_2415A0224();
}

BOOL static PregnancyStatusLabelState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t PregnancyStatusLabelState.hash(into:)()
{
  return sub_2416BB6C8();
}

uint64_t PregnancyStatusLabelState.hashValue.getter()
{
  sub_2416BB6BC();
  sub_2416BB6C8();
  return sub_2416BB6EC();
}

unint64_t sub_2415A03E0()
{
  unint64_t result;

  result = qword_257139BC8;
  if (!qword_257139BC8)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for PregnancyStatusLabelState, &type metadata for PregnancyStatusLabelState);
    atomic_store(result, (unint64_t *)&qword_257139BC8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PregnancyStatusLabelState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2415A0470 + 4 * byte_2416BCDC5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2415A04A4 + 4 * byte_2416BCDC0[v4]))();
}

uint64_t sub_2415A04A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2415A04AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2415A04B4);
  return result;
}

uint64_t sub_2415A04C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2415A04C8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2415A04CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2415A04D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PregnancyStatusLabelState()
{
  return &type metadata for PregnancyStatusLabelState;
}

_QWORD *sub_2415A04F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  _QWORD *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  char *__dst;
  int *v84;
  _QWORD *v86;
  int *v87;
  unsigned int (*v88)(char *, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    v25 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v84 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
    v7 = v84[5];
    v86 = a1;
    v8 = (_QWORD *)((char *)a1 + v7);
    v79 = a2;
    v9 = (char *)a2 + v7;
    v10 = *(_QWORD *)((char *)a2 + v7 + 8);
    *v8 = *(_QWORD *)((char *)a2 + v7);
    v8[1] = v10;
    v12 = *(_QWORD *)((char *)a2 + v7 + 16);
    v11 = *(_QWORD *)((char *)a2 + v7 + 24);
    v8[2] = v12;
    v8[3] = v11;
    v13 = *((_QWORD *)v9 + 5);
    v8[4] = *((_QWORD *)v9 + 4);
    v8[5] = v13;
    v14 = *((_QWORD *)v9 + 7);
    v8[6] = *((_QWORD *)v9 + 6);
    v8[7] = v14;
    v15 = *((_QWORD *)v9 + 9);
    v8[8] = *((_QWORD *)v9 + 8);
    v8[9] = v15;
    v16 = *((_QWORD *)v9 + 11);
    v8[10] = *((_QWORD *)v9 + 10);
    v8[11] = v16;
    v80 = (void *)*((_QWORD *)v9 + 12);
    v81 = (void *)*((_QWORD *)v9 + 13);
    v8[12] = v80;
    v8[13] = v81;
    v87 = (int *)type metadata accessor for MedicalIDData();
    v17 = v87[13];
    __dst = (char *)v8 + v17;
    v18 = &v9[v17];
    v19 = sub_2416B9B50();
    v82 = *(_QWORD *)(v19 - 8);
    v88 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = v80;
    v21 = v81;
    if (v88(v18, 1, v19))
    {
      sub_2415A0A74(0);
      memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      v23 = v82;
    }
    else
    {
      v23 = v82;
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(__dst, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(__dst, 0, 1, v19);
    }
    v26 = v87[14];
    v27 = (char *)v8 + v26;
    v28 = &v9[v26];
    if (v88(&v9[v26], 1, v19))
    {
      sub_2415A0A74(0);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v27, v28, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v27, 0, 1, v19);
    }
    v30 = v87[15];
    v31 = (_QWORD *)((char *)v8 + v30);
    v32 = &v9[v30];
    v33 = *((_QWORD *)v32 + 1);
    *v31 = *(_QWORD *)v32;
    v31[1] = v33;
    v34 = v87[16];
    v35 = (_QWORD *)((char *)v8 + v34);
    v36 = &v9[v34];
    v37 = *((_QWORD *)v36 + 1);
    *v35 = *(_QWORD *)v36;
    v35[1] = v37;
    *((_BYTE *)v8 + v87[17]) = v9[v87[17]];
    *((_BYTE *)v8 + v87[18]) = v9[v87[18]];
    v38 = v87[19];
    v39 = (char *)v8 + v38;
    v40 = (uint64_t *)&v9[v38];
    v41 = *(_QWORD *)&v9[v38 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v41 >> 60 == 15)
    {
      *(_OWORD *)v39 = *(_OWORD *)v40;
    }
    else
    {
      v42 = *v40;
      sub_2415A0A90(*v40, v41);
      *(_QWORD *)v39 = v42;
      *((_QWORD *)v39 + 1) = v41;
    }
    v43 = v87[20];
    v44 = (char *)v8 + v43;
    v45 = &v9[v43];
    v46 = sub_2416B9A18();
    v47 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    v49 = v23;
    v50 = v87[21];
    v51 = *(void **)&v9[v50];
    *(_QWORD *)((char *)v8 + v50) = v51;
    v52 = v87[22];
    v53 = (char *)v8 + v52;
    v54 = &v9[v52];
    v55 = v51;
    if (v88(v54, 1, v19))
    {
      sub_2415A0A74(0);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v53, v54, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v53, 0, 1, v19);
    }
    v57 = v84[6];
    v25 = v86;
    v58 = (char *)v86 + v57;
    v59 = (char *)v79 + v57;
    v60 = sub_2416B9C70();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
    v61 = v84[7];
    v62 = (char *)v86 + v61;
    v63 = (char *)v79 + v61;
    v64 = sub_2416B9C10();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v62, v63, v64);
    *(_QWORD *)((char *)v86 + v84[8]) = *(_QWORD *)((char *)v79 + v84[8]);
    v65 = v84[9];
    v66 = (char *)v86 + v65;
    v67 = (char *)v79 + v65;
    swift_retain();
    if (v88(v67, 1, v19))
    {
      sub_2415A0A74(0);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v66, v67, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v66, 0, 1, v19);
    }
    v69 = *(int *)(a3 + 24);
    *((_BYTE *)v86 + *(int *)(a3 + 20)) = *((_BYTE *)v79 + *(int *)(a3 + 20));
    v70 = (_QWORD *)((char *)v86 + v69);
    v71 = (char *)v79 + v69;
    v72 = *(_QWORD *)((char *)v79 + v69 + 8);
    *v70 = *(_QWORD *)((char *)v79 + v69);
    v70[1] = v72;
    sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    v74 = *(int *)(v73 + 32);
    v75 = (char *)v70 + v74;
    v76 = &v71[v74];
    swift_retain();
    swift_retain();
    if (v88(v76, 1, v19))
    {
      sub_2415A0A74(0);
      memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v75, v76, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v75, 0, 1, v19);
    }
  }
  return v25;
}

void sub_2415A0A74(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_2415A0A90(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_2415A0AD4(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  swift_bridgeObjectRelease();
  v3 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v4 = a1 + v3[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = v4 + v5[13];
  v7 = sub_2416B9B50();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v10 = v4 + v5[14];
  if (!v9(v10, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)(v4 + v5[19]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_2415A0DAC(*v11, v12);
  v13 = v4 + v5[20];
  v14 = sub_2416B9A18();
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);

  v16 = v4 + v5[22];
  if (!v9(v16, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v16, v7);
  v17 = a1 + v3[6];
  v18 = sub_2416B9C70();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + v3[7];
  v20 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  swift_release();
  v21 = a1 + v3[9];
  if (!v9(v21, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v21, v7);
  v22 = a1 + *(int *)(a2 + 24);
  swift_release();
  swift_release();
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v24 = v22 + *(int *)(v23 + 32);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v24, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v24, v7);
  return result;
}

uint64_t sub_2415A0DAC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

_QWORD *sub_2415A0DF0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  _QWORD *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  char *__dst;
  int *v82;
  _QWORD *v83;
  unsigned int (*v84)(char *, uint64_t, uint64_t);
  int *v85;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v82 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v83 = a1;
  v6 = v82[5];
  v7 = (_QWORD *)((char *)a1 + v6);
  v77 = a2;
  v8 = (char *)a2 + v6;
  v9 = *(_QWORD *)((char *)a2 + v6 + 8);
  *v7 = *(_QWORD *)((char *)a2 + v6);
  v7[1] = v9;
  v11 = *(_QWORD *)((char *)a2 + v6 + 16);
  v10 = *(_QWORD *)((char *)a2 + v6 + 24);
  v7[2] = v11;
  v7[3] = v10;
  v12 = *((_QWORD *)v8 + 5);
  v7[4] = *((_QWORD *)v8 + 4);
  v7[5] = v12;
  v13 = *((_QWORD *)v8 + 7);
  v7[6] = *((_QWORD *)v8 + 6);
  v7[7] = v13;
  v14 = *((_QWORD *)v8 + 9);
  v7[8] = *((_QWORD *)v8 + 8);
  v7[9] = v14;
  v15 = *((_QWORD *)v8 + 11);
  v7[10] = *((_QWORD *)v8 + 10);
  v7[11] = v15;
  v78 = (void *)*((_QWORD *)v8 + 12);
  v79 = (void *)*((_QWORD *)v8 + 13);
  v7[12] = v78;
  v7[13] = v79;
  v85 = (int *)type metadata accessor for MedicalIDData();
  v16 = v85[13];
  __dst = (char *)v7 + v16;
  v17 = &v8[v16];
  v18 = sub_2416B9B50();
  v80 = *(_QWORD *)(v18 - 8);
  v84 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = v78;
  v20 = v79;
  if (v84(v17, 1, v18))
  {
    sub_2415A0A74(0);
    memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    v22 = v80;
  }
  else
  {
    v22 = v80;
    (*(void (**)(char *, char *, uint64_t))(v80 + 16))(__dst, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(__dst, 0, 1, v18);
  }
  v23 = v85[14];
  v24 = (char *)v7 + v23;
  v25 = &v8[v23];
  if (v84(&v8[v23], 1, v18))
  {
    sub_2415A0A74(0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v25, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v18);
  }
  v27 = v85[15];
  v28 = (_QWORD *)((char *)v7 + v27);
  v29 = &v8[v27];
  v30 = *((_QWORD *)v29 + 1);
  *v28 = *(_QWORD *)v29;
  v28[1] = v30;
  v31 = v85[16];
  v32 = (_QWORD *)((char *)v7 + v31);
  v33 = &v8[v31];
  v34 = *((_QWORD *)v33 + 1);
  *v32 = *(_QWORD *)v33;
  v32[1] = v34;
  *((_BYTE *)v7 + v85[17]) = v8[v85[17]];
  *((_BYTE *)v7 + v85[18]) = v8[v85[18]];
  v35 = v85[19];
  v36 = (char *)v7 + v35;
  v37 = (uint64_t *)&v8[v35];
  v38 = *(_QWORD *)&v8[v35 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v38 >> 60 == 15)
  {
    *(_OWORD *)v36 = *(_OWORD *)v37;
  }
  else
  {
    v39 = *v37;
    sub_2415A0A90(*v37, v38);
    *(_QWORD *)v36 = v39;
    *((_QWORD *)v36 + 1) = v38;
  }
  v40 = v85[20];
  v41 = (char *)v7 + v40;
  v42 = &v8[v40];
  v43 = sub_2416B9A18();
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  v46 = v22;
  v47 = v85[21];
  v48 = *(void **)&v8[v47];
  *(_QWORD *)((char *)v7 + v47) = v48;
  v49 = v85[22];
  v50 = (char *)v7 + v49;
  v51 = &v8[v49];
  v52 = v48;
  if (v84(v51, 1, v18))
  {
    sub_2415A0A74(0);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v50, v51, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v50, 0, 1, v18);
  }
  v54 = v82[6];
  v55 = (char *)v83 + v54;
  v56 = (char *)v77 + v54;
  v57 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
  v58 = v82[7];
  v59 = (char *)v83 + v58;
  v60 = (char *)v77 + v58;
  v61 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v59, v60, v61);
  *(_QWORD *)((char *)v83 + v82[8]) = *(_QWORD *)((char *)v77 + v82[8]);
  v62 = v82[9];
  v63 = (char *)v83 + v62;
  v64 = (char *)v77 + v62;
  swift_retain();
  if (v84(v64, 1, v18))
  {
    sub_2415A0A74(0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v63, v64, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v63, 0, 1, v18);
  }
  v66 = *(int *)(a3 + 24);
  *((_BYTE *)v83 + *(int *)(a3 + 20)) = *((_BYTE *)v77 + *(int *)(a3 + 20));
  v67 = (_QWORD *)((char *)v83 + v66);
  v68 = (char *)v77 + v66;
  v69 = *(_QWORD *)((char *)v77 + v66 + 8);
  *v67 = *(_QWORD *)((char *)v77 + v66);
  v67[1] = v69;
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v71 = *(int *)(v70 + 32);
  v72 = (char *)v67 + v71;
  v73 = &v68[v71];
  swift_retain();
  swift_retain();
  if (v84(v73, 1, v18))
  {
    sub_2415A0A74(0);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v72, v73, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v72, 0, 1, v18);
  }
  return v83;
}

char *sub_2415A1344(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  int *v88;
  uint64_t v89;
  _QWORD *v91;
  char *v92;
  uint64_t (*v93)(char *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v88 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v5 = v88[5];
  v92 = a1;
  v6 = &a1[v5];
  v7 = (_QWORD *)((char *)a2 + v5);
  *(_QWORD *)v6 = *(_QWORD *)((char *)a2 + v5);
  *((_QWORD *)v6 + 1) = *(_QWORD *)((char *)a2 + v5 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 2) = v7[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 3) = v7[3];
  *((_QWORD *)v6 + 4) = v7[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 5) = v7[5];
  *((_QWORD *)v6 + 6) = v7[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 7) = v7[7];
  *((_QWORD *)v6 + 8) = v7[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 9) = v7[9];
  *((_QWORD *)v6 + 10) = v7[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 11) = v7[11];
  v8 = (void *)*((_QWORD *)v6 + 12);
  v9 = (void *)v7[12];
  *((_QWORD *)v6 + 12) = v9;
  v10 = v9;

  v11 = (void *)*((_QWORD *)v6 + 13);
  v12 = (void *)v7[13];
  *((_QWORD *)v6 + 13) = v12;
  v13 = v12;

  v14 = (int *)type metadata accessor for MedicalIDData();
  v15 = v14[13];
  v16 = &v6[v15];
  v17 = (char *)v7 + v15;
  v18 = sub_2416B9B50();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v93 = v20;
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    sub_2415A0A74(0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  v24 = v14[14];
  v25 = &v6[v24];
  v26 = (char *)v7 + v24;
  v27 = v20(&v6[v24], 1, v18);
  v28 = v20(v26, 1, v18);
  v91 = a2;
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    sub_2415A0A74(0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v25, v26, v18);
LABEL_13:
  v30 = v14[15];
  v31 = &v6[v30];
  v32 = (_QWORD *)((char *)v7 + v30);
  *(_QWORD *)v31 = *v32;
  *((_QWORD *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = v14[16];
  v34 = &v6[v33];
  v35 = (_QWORD *)((char *)v7 + v33);
  *(_QWORD *)v34 = *v35;
  *((_QWORD *)v34 + 1) = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6[v14[17]] = *((_BYTE *)v7 + v14[17]);
  v6[v14[18]] = *((_BYTE *)v7 + v14[18]);
  v36 = v14[19];
  v37 = (uint64_t *)&v6[v36];
  v38 = (_QWORD *)((char *)v7 + v36);
  v39 = *(_QWORD *)((char *)v7 + v36 + 8);
  v89 = v19;
  if (*(_QWORD *)&v6[v36 + 8] >> 60 == 15)
  {
    if (v39 >> 60 != 15)
    {
      v40 = *v38;
      sub_2415A0A90(*v38, v39);
      *v37 = v40;
      v37[1] = v39;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v39 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v37);
LABEL_18:
    *(_OWORD *)v37 = *(_OWORD *)v38;
    goto LABEL_20;
  }
  v41 = *v38;
  sub_2415A0A90(*v38, v39);
  v42 = *v37;
  v43 = v37[1];
  *v37 = v41;
  v37[1] = v39;
  sub_2415A0DAC(v42, v43);
LABEL_20:
  v44 = v14[20];
  v45 = &v6[v44];
  v46 = (char *)v7 + v44;
  v47 = sub_2416B9A18();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (v50)
  {
    v52 = v89;
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v52 = v89;
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v47);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 24))(v45, v46, v47);
LABEL_26:
  v54 = v14[21];
  v55 = *(void **)&v6[v54];
  v56 = *(void **)((char *)v7 + v54);
  *(_QWORD *)&v6[v54] = v56;
  v57 = v56;

  v58 = v14[22];
  v59 = &v6[v58];
  v60 = (char *)v7 + v58;
  v61 = v93(&v6[v58], 1, v18);
  v62 = v93(v60, 1, v18);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v59, v60, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v59, 0, 1, v18);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v59, v18);
LABEL_31:
    sub_2415A0A74(0);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 24))(v59, v60, v18);
LABEL_32:
  v64 = v88[6];
  v65 = &v92[v64];
  v66 = (char *)v91 + v64;
  v67 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 24))(v65, v66, v67);
  v68 = v88[7];
  v69 = &v92[v68];
  v70 = (char *)v91 + v68;
  v71 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 24))(v69, v70, v71);
  *(_QWORD *)&v92[v88[8]] = *(_QWORD *)((char *)v91 + v88[8]);
  swift_retain();
  swift_release();
  v72 = v88[9];
  v73 = &v92[v72];
  v74 = (char *)v91 + v72;
  LODWORD(v70) = v93(&v92[v72], 1, v18);
  v75 = v93(v74, 1, v18);
  if ((_DWORD)v70)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v73, v74, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v73, 0, 1, v18);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v73, v18);
LABEL_37:
    sub_2415A0A74(0);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 24))(v73, v74, v18);
LABEL_38:
  v92[*(int *)(a3 + 20)] = *((_BYTE *)v91 + *(int *)(a3 + 20));
  v77 = *(int *)(a3 + 24);
  v78 = &v92[v77];
  v79 = (char *)v91 + v77;
  *(_QWORD *)&v92[v77] = *(_QWORD *)((char *)v91 + v77);
  swift_retain();
  swift_release();
  *((_QWORD *)v78 + 1) = *((_QWORD *)v79 + 1);
  swift_retain();
  swift_release();
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v81 = *(int *)(v80 + 32);
  v82 = &v78[v81];
  v83 = &v79[v81];
  v84 = v93(&v78[v81], 1, v18);
  v85 = v93(v83, 1, v18);
  if (!v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 24))(v82, v83, v18);
      return v92;
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v82, v18);
    goto LABEL_43;
  }
  if (v85)
  {
LABEL_43:
    sub_2415A0A74(0);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    return v92;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v82, v83, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v82, 0, 1, v18);
  return v92;
}

uint64_t sub_2415A1B38(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDF0] - 8) + 8))();
  return a1;
}

_OWORD *sub_2415A1B6C(_OWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int *v53;
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;

  *a1 = *(_OWORD *)a2;
  v53 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v5 = v53[5];
  v6 = (char *)a1 + v5;
  v7 = &a2[v5];
  *(_OWORD *)v6 = *(_OWORD *)&a2[v5];
  *((_QWORD *)v6 + 2) = *(_QWORD *)&a2[v5 + 16];
  *(_OWORD *)(v6 + 24) = *(_OWORD *)&a2[v5 + 24];
  *(_OWORD *)(v6 + 40) = *(_OWORD *)&a2[v5 + 40];
  *(_OWORD *)(v6 + 56) = *(_OWORD *)&a2[v5 + 56];
  *(_OWORD *)(v6 + 72) = *(_OWORD *)&a2[v5 + 72];
  *((_QWORD *)v6 + 11) = *(_QWORD *)&a2[v5 + 88];
  *((_OWORD *)v6 + 6) = *(_OWORD *)&a2[v5 + 96];
  v8 = (int *)type metadata accessor for MedicalIDData();
  v9 = v8[13];
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = sub_2416B9B50();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = v8[14];
  v17 = &v6[v16];
  v18 = &v7[v16];
  v54 = v14;
  v55 = v13;
  if (v14(&v7[v16], 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v18, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  *(_OWORD *)&v6[v8[15]] = *(_OWORD *)&v7[v8[15]];
  *(_OWORD *)&v6[v8[16]] = *(_OWORD *)&v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  v6[v8[18]] = v7[v8[18]];
  *(_OWORD *)&v6[v8[19]] = *(_OWORD *)&v7[v8[19]];
  v20 = v8[20];
  v21 = &v6[v20];
  v22 = &v7[v20];
  v23 = sub_2416B9A18();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(_QWORD *)&v6[v8[21]] = *(_QWORD *)&v7[v8[21]];
  v26 = v8[22];
  v27 = &v6[v26];
  v28 = &v7[v26];
  if (v54(&v7[v26], 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v27, v28, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v27, 0, 1, v12);
  }
  v30 = v53[6];
  v31 = (char *)a1 + v30;
  v32 = &a2[v30];
  v33 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
  v34 = v53[7];
  v35 = (char *)a1 + v34;
  v36 = &a2[v34];
  v37 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  *(_QWORD *)((char *)a1 + v53[8]) = *(_QWORD *)&a2[v53[8]];
  v38 = v53[9];
  v39 = (char *)a1 + v38;
  v40 = &a2[v38];
  if (v54(&a2[v38], 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v39, v40, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v39, 0, 1, v12);
  }
  v42 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = a2[*(int *)(a3 + 20)];
  v43 = (_QWORD *)((char *)a1 + v42);
  v44 = &a2[v42];
  v45 = *(_QWORD *)&a2[v42];
  v46 = *(_QWORD *)&a2[v42 + 8];
  *v43 = v45;
  v43[1] = v46;
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v48 = *(int *)(v47 + 32);
  v49 = (char *)v43 + v48;
  v50 = &v44[v48];
  if (v54(&v44[v48], 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v49, v50, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v49, 0, 1, v12);
  }
  return a1;
}

char *sub_2415A1FEC(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  int v87;
  uint64_t v88;
  int *v90;
  uint64_t (*v91)(char *, uint64_t, uint64_t);
  uint64_t v92;
  _QWORD *v94;
  char *v95;

  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  v90 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v6 = v90[5];
  v95 = a1;
  v7 = &a1[v6];
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = *(_QWORD *)((char *)a2 + v6 + 8);
  *(_QWORD *)v7 = *(_QWORD *)((char *)a2 + v6);
  *((_QWORD *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 2) = v8[2];
  swift_bridgeObjectRelease();
  v10 = v8[4];
  *((_QWORD *)v7 + 3) = v8[3];
  *((_QWORD *)v7 + 4) = v10;
  swift_bridgeObjectRelease();
  v11 = v8[6];
  *((_QWORD *)v7 + 5) = v8[5];
  *((_QWORD *)v7 + 6) = v11;
  swift_bridgeObjectRelease();
  v12 = v8[8];
  *((_QWORD *)v7 + 7) = v8[7];
  *((_QWORD *)v7 + 8) = v12;
  swift_bridgeObjectRelease();
  v13 = v8[10];
  *((_QWORD *)v7 + 9) = v8[9];
  *((_QWORD *)v7 + 10) = v13;
  swift_bridgeObjectRelease();
  v14 = (void *)*((_QWORD *)v7 + 12);
  v15 = v8[12];
  *((_QWORD *)v7 + 11) = v8[11];
  *((_QWORD *)v7 + 12) = v15;

  v16 = (void *)*((_QWORD *)v7 + 13);
  *((_QWORD *)v7 + 13) = v8[13];

  v17 = (int *)type metadata accessor for MedicalIDData();
  v18 = v17[13];
  v19 = &v7[v18];
  v20 = (char *)v8 + v18;
  v21 = sub_2416B9B50();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    sub_2415A0A74(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  v27 = v17[14];
  v28 = &v7[v27];
  v29 = (char *)v8 + v27;
  v30 = v23(&v7[v27], 1, v21);
  v31 = v23(v29, 1, v21);
  v94 = a2;
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v28, v29, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v28, v21);
LABEL_12:
    sub_2415A0A74(0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v28, v29, v21);
LABEL_13:
  v33 = v17[15];
  v34 = &v7[v33];
  v35 = (_QWORD *)((char *)v8 + v33);
  v37 = *v35;
  v36 = v35[1];
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v38 = v17[16];
  v39 = &v7[v38];
  v40 = (_QWORD *)((char *)v8 + v38);
  v42 = *v40;
  v41 = v40[1];
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v7[v17[17]] = *((_BYTE *)v8 + v17[17]);
  v7[v17[18]] = *((_BYTE *)v8 + v17[18]);
  v43 = v17[19];
  v44 = (uint64_t)&v7[v43];
  v45 = (char *)v8 + v43;
  v46 = *(_QWORD *)&v7[v43 + 8];
  v91 = v23;
  v92 = v22;
  if (v46 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v44 = *(_OWORD *)v45;
    goto LABEL_18;
  }
  v47 = *((_QWORD *)v45 + 1);
  if (v47 >> 60 == 15)
  {
    sub_2415A1B38(v44);
    goto LABEL_16;
  }
  v48 = *(_QWORD *)v44;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_QWORD *)(v44 + 8) = v47;
  sub_2415A0DAC(v48, v46);
LABEL_18:
  v49 = v17[20];
  v50 = &v7[v49];
  v51 = (char *)v8 + v49;
  v52 = sub_2416B9A18();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v50, 1, v52);
  v56 = v54(v51, 1, v52);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v50, v51, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
LABEL_23:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v50, v51, v52);
LABEL_24:
  v58 = v17[21];
  v59 = *(void **)&v7[v58];
  *(_QWORD *)&v7[v58] = *(_QWORD *)((char *)v8 + v58);

  v60 = v17[22];
  v61 = &v7[v60];
  v62 = (char *)v8 + v60;
  v63 = v91(&v7[v60], 1, v21);
  v64 = v91(v62, 1, v21);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v61, v62, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v61, 0, 1, v21);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v92 + 8))(v61, v21);
LABEL_29:
    sub_2415A0A74(0);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v92 + 40))(v61, v62, v21);
LABEL_30:
  v66 = v90[6];
  v67 = &v95[v66];
  v68 = (char *)v94 + v66;
  v69 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 40))(v67, v68, v69);
  v70 = v90[7];
  v71 = &v95[v70];
  v72 = (char *)v94 + v70;
  v73 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 40))(v71, v72, v73);
  *(_QWORD *)&v95[v90[8]] = *(_QWORD *)((char *)v94 + v90[8]);
  swift_release();
  v74 = v90[9];
  v75 = &v95[v74];
  v76 = (char *)v94 + v74;
  LODWORD(v72) = v91(&v95[v74], 1, v21);
  v77 = v91(v76, 1, v21);
  if ((_DWORD)v72)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v75, v76, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v75, 0, 1, v21);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v92 + 8))(v75, v21);
LABEL_35:
    sub_2415A0A74(0);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v92 + 40))(v75, v76, v21);
LABEL_36:
  v79 = *(int *)(a3 + 24);
  v95[*(int *)(a3 + 20)] = *((_BYTE *)v94 + *(int *)(a3 + 20));
  v80 = &v95[v79];
  v81 = (char *)v94 + v79;
  *(_QWORD *)&v95[v79] = *(_QWORD *)((char *)v94 + v79);
  swift_release();
  *((_QWORD *)v80 + 1) = *((_QWORD *)v81 + 1);
  swift_release();
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v83 = *(int *)(v82 + 32);
  v84 = &v80[v83];
  v85 = &v81[v83];
  v86 = v91(&v80[v83], 1, v21);
  v87 = v91(v85, 1, v21);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 40))(v84, v85, v21);
      return v95;
    }
    (*(void (**)(char *, uint64_t))(v92 + 8))(v84, v21);
    goto LABEL_41;
  }
  if (v87)
  {
LABEL_41:
    sub_2415A0A74(0);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    return v95;
  }
  (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v84, v85, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v84, 0, 1, v21);
  return v95;
}

uint64_t sub_2415A26E4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415A26F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for MedicalIDPregnancyViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 254)
  {
    sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    v8 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 2)
    return ((v11 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_2415A27BC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415A27C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = type metadata accessor for MedicalIDPregnancyViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
      return result;
    }
    sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for MedicalIDPregnancyStatusLabelView()
{
  uint64_t result;

  result = qword_257139C40;
  if (!qword_257139C40)
    return swift_getSingletonMetadata();
  return result;
}

void sub_2415A28BC()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for MedicalIDPregnancyViewModel();
  if (v0 <= 0x3F)
  {
    sub_24159D6B0(319, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_2415A2960()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2415A2970(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  _OWORD v23[10];
  uint64_t v24;
  _BYTE v25[128];
  __int128 v26;
  _OWORD v27[8];
  __int16 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int16 v38;
  _OWORD v39[9];
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42[17];

  v2 = v1;
  sub_2415A3988(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v23 - v10;
  sub_2415A0A74(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MedicalIDPregnancyStatusLabelView();
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604]();
  MedicalIDPregnancyViewModel.pregnancyDueDateLabelState(_:)((uint64_t)v14, v42);
  sub_2415A3FE0((uint64_t)v14);
  v15 = v42[0];
  if (v42[0] == 3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a1, 1, 1, v5);
  }
  else
  {
    v16 = sub_2416BA51C();
    sub_2415A2CC0(v15, (uint64_t)v2, (uint64_t)v39);
    sub_2415A401C((uint64_t)v39, (uint64_t)v25);
    v26 = (unint64_t)v16;
    LOBYTE(v27[0]) = 0;
    sub_2415A401C((uint64_t)v25, (uint64_t)v27 + 8);
    v35 = v27[5];
    v36 = v27[6];
    v37 = v27[7];
    v38 = v28;
    v31 = v27[1];
    v32 = v27[2];
    v33 = v27[3];
    v34 = v27[4];
    v29 = v26;
    v30 = v27[0];
    v17 = sub_2416BA8D0();
    KeyPath = swift_getKeyPath();
    v39[6] = v35;
    v39[7] = v36;
    v39[8] = v37;
    LOWORD(v40) = v38;
    v39[2] = v31;
    v39[3] = v32;
    v39[4] = v33;
    v39[5] = v34;
    v39[0] = v29;
    v39[1] = v30;
    *((_QWORD *)&v40 + 1) = KeyPath;
    v23[8] = v37;
    v23[9] = v40;
    v23[4] = v33;
    v23[5] = v34;
    v41 = v17;
    v24 = v17;
    v23[6] = v35;
    v23[7] = v36;
    v23[0] = v29;
    v23[1] = v30;
    v23[2] = v31;
    v23[3] = v32;
    sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_2416BCC80;
    v20 = v2[1];
    *(_QWORD *)(v19 + 32) = *v2;
    *(_QWORD *)(v19 + 40) = v20;
    strcpy((char *)(v19 + 48), "DueDateStatus");
    *(_WORD *)(v19 + 62) = -4864;
    swift_bridgeObjectRetain();
    v21 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    v22 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v22)
    {
      sub_2416BB128();

      sub_2415A39A4(0);
      sub_2415A4080();
      sub_2416BAB1C();
      swift_bridgeObjectRelease();
      sub_2415A414C((uint64_t)v39);
      sub_2415A435C((uint64_t)v9, (uint64_t)v11);
      sub_2415A435C((uint64_t)v11, a1);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_2415A2CC0@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[26];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[41];
  _OWORD v54[6];
  _OWORD v55[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[57];
  _OWORD v61[6];
  _OWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;

  v4 = a3;
  if (a1)
  {
    v34 = a3;
    sub_2416BACC0();
    sub_2415A36E0(a1, (uint64_t)&v63);
    v6 = v63;
    v7 = v64;
    v38 = v66;
    v39 = v65;
    v37 = v67;
    if (qword_2571395A8 != -1)
      swift_once();
    v36 = qword_2571477E8;
    swift_retain();
    swift_release();
    if (*(_BYTE *)(a2 + *(int *)(type metadata accessor for MedicalIDPregnancyStatusLabelView() + 20)) == 1)
    {
      sub_2416BA4C8();
      if (qword_257139300 != -1)
        swift_once();
      v8 = (id)qword_25713A038;
      v9 = sub_2416BA9CC();
      v11 = v10;
      v13 = v12;
      v15 = v14 & 1;
      v16 = sub_2416BA828();
      v17 = 1;
    }
    else
    {
      v9 = 0;
      v11 = 0;
      v15 = 0;
      v13 = 0;
      v16 = 0;
      v17 = 0;
    }
    *(_QWORD *)&v48 = v6;
    *((_QWORD *)&v48 + 1) = v7;
    *(_QWORD *)&v49 = v39;
    *((_QWORD *)&v49 + 1) = v38;
    LOBYTE(v50) = v37;
    *((_QWORD *)&v50 + 1) = v36;
    *(_QWORD *)&v51 = v9;
    v35 = v13;
    *((_QWORD *)&v51 + 1) = v11;
    *(_QWORD *)&v52 = v15;
    *((_QWORD *)&v52 + 1) = v13;
    *(_QWORD *)v53 = v16;
    memset(&v53[8], 0, 32);
    v53[40] = v17;
    v54[2] = v50;
    v54[3] = v51;
    v54[0] = v48;
    v54[1] = v49;
    *(_OWORD *)((char *)v55 + 9) = *(_OWORD *)&v53[25];
    v54[5] = *(_OWORD *)v53;
    v55[0] = *(_OWORD *)&v53[16];
    v54[4] = v52;
    swift_retain();
    sub_2415A43A0(v6, v7, v39);
    swift_retain();
    sub_2415A43D8(v9, v11, v15, v13);
    sub_2415A43A0(v6, v7, v39);
    sub_2415A43D8(v9, v11, v15, v13);
    sub_2415A432C(v9, v11, v15, v13);
    sub_2415A42F4(v6, v7, v39);
    swift_release();
    *(_OWORD *)v60 = v52;
    *(_OWORD *)&v60[16] = *(_OWORD *)v53;
    *(_OWORD *)&v60[32] = *(_OWORD *)&v53[16];
    *(_OWORD *)&v60[41] = *(_OWORD *)&v53[25];
    v56 = v48;
    v57 = v49;
    v58 = v50;
    v59 = v51;
    sub_2415A4408((uint64_t)&v56);
    sub_2415A4410((uint64_t)&v56, (uint64_t)&v63);
    sub_2415A4464((uint64_t *)v54);
    v32 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0];
    sub_24159D6B0(0, &qword_257139CA8, (uint64_t (*)(uint64_t))sub_2415A3B54, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_24159D6B0(0, &qword_257139CE8, (uint64_t (*)(uint64_t))sub_2415A3D70, v32);
    sub_2415A3F2C(&qword_257139D10, &qword_257139CA8, (uint64_t (*)(uint64_t))sub_2415A3B54);
    sub_2415A3F2C(&qword_257139D18, &qword_257139CE8, (uint64_t (*)(uint64_t))sub_2415A3D70);
    sub_2416BA57C();
    sub_2415A432C(v9, v11, v15, v35);
    sub_2415A450C((uint64_t *)&v48);
    sub_2415A42F4(v6, v7, v39);
    swift_release();
  }
  else
  {
    if (*(_BYTE *)(a2 + *(int *)(type metadata accessor for MedicalIDPregnancyStatusLabelView() + 20)) != 1)
    {
      sub_2415A45B4((uint64_t)v61);
      sub_2415A401C((uint64_t)v61, (uint64_t)&v63);
      return sub_2415A401C((uint64_t)&v63, v4);
    }
    v34 = v4;
    sub_2415A3448(&v63);
    v18 = v63;
    v19 = v64;
    v21 = v65;
    v20 = v66;
    sub_2416BA4C8();
    if (qword_257139300 != -1)
      swift_once();
    v22 = (id)qword_25713A038;
    v23 = sub_2416BA9CC();
    v25 = v24;
    v27 = v26;
    v29 = v28 & 1;
    v30 = sub_2416BA828();
    sub_2415A43D8(v18, v19, v21, v20);
    sub_2415A43C8(v23, v25, v29);
    swift_bridgeObjectRetain();
    sub_2415A43D8(v18, v19, v21, v20);
    sub_2415A43C8(v23, v25, v29);
    swift_bridgeObjectRetain();
    sub_2415A431C(v23, v25, v29);
    swift_bridgeObjectRelease();
    sub_2415A432C(v18, v19, v21, v20);
    *(_QWORD *)&v56 = v18;
    *((_QWORD *)&v56 + 1) = v19;
    *(_QWORD *)&v57 = v21;
    *((_QWORD *)&v57 + 1) = v20;
    *(_QWORD *)&v58 = v23;
    *((_QWORD *)&v58 + 1) = v25;
    LOBYTE(v59) = v29;
    *((_QWORD *)&v59 + 1) = v27;
    v60[0] = v30;
    memset(&v60[8], 0, 32);
    v60[40] = 1;
    sub_2415A45D8((uint64_t)&v56);
    sub_2415A4410((uint64_t)&v56, (uint64_t)&v63);
    v40 = v20;
    v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0];
    sub_24159D6B0(0, &qword_257139CA8, (uint64_t (*)(uint64_t))sub_2415A3B54, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_24159D6B0(0, &qword_257139CE8, (uint64_t (*)(uint64_t))sub_2415A3D70, v31);
    sub_2415A3F2C(&qword_257139D10, &qword_257139CA8, (uint64_t (*)(uint64_t))sub_2415A3B54);
    sub_2415A3F2C(&qword_257139D18, &qword_257139CE8, (uint64_t (*)(uint64_t))sub_2415A3D70);
    sub_2416BA57C();
    sub_2415A431C(v23, v25, v29);
    swift_bridgeObjectRelease();
    sub_2415A432C(v18, v19, v21, v40);
  }
  v61[4] = v45;
  v61[5] = v46;
  v62[0] = *(_OWORD *)v47;
  *(_OWORD *)((char *)v62 + 10) = *(_OWORD *)&v47[10];
  v61[0] = v41;
  v61[1] = v42;
  v61[2] = v43;
  v61[3] = v44;
  nullsub_1(v61);
  sub_2415A401C((uint64_t)v61, (uint64_t)&v63);
  v4 = v34;
  return sub_2415A401C((uint64_t)&v63, v4);
}

uint64_t sub_2415A3448@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _DWORD v26[4];

  v3 = sub_2416BA4BC();
  MEMORY[0x24BDAC7A8](v3);
  sub_2415A0A74(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MedicalIDPregnancyStatusLabelView();
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604]();
  MedicalIDPregnancyViewModel.gestationalAgeDescription(dueDate:)((uint64_t)v6);
  v9 = v8;
  result = sub_2415A3FE0((uint64_t)v6);
  if (v9)
  {
    sub_2416BA4B0();
    sub_2416BA4A4();
    sub_2416BA498();
    swift_bridgeObjectRelease();
    sub_2416BA4A4();
    sub_2416BA4D4();
    if (qword_257139300 != -1)
      swift_once();
    v11 = (id)qword_25713A038;
    v12 = sub_2416BA9CC();
    v14 = v13;
    v16 = v15;
    if (*(_BYTE *)(v1 + *(int *)(v7 + 20)) == 1)
      v17 = sub_2416BA654();
    else
      v17 = sub_2416BA660();
    v26[2] = v17;
    v22 = v16 & 1;
    v18 = sub_2416BA990();
    v19 = v23;
    v21 = v24;
    v20 = v25 & 1;
    sub_2415A431C(v12, v14, v22);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
  }
  *a1 = v18;
  a1[1] = v19;
  a1[2] = v20;
  a1[3] = v21;
  return result;
}

double sub_2415A36E0@<D0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  id v5;
  double result;
  __int128 v7;
  __int128 v8;
  char v9;

  v3 = a1;
  v4 = sub_2416BA4BC();
  MEMORY[0x24BDAC7A8](v4);
  if (v3 == 2)
  {
    sub_2416BA4B0();
    sub_2416BA4A4();
    sub_2416BA48C();
    sub_2416BA4A4();
    sub_2416BA4D4();
    if (qword_257139300 == -1)
      goto LABEL_5;
    goto LABEL_6;
  }
  sub_2416BA4B0();
  sub_2416BA4A4();
  sub_2416BA48C();
  sub_2416BA4A4();
  sub_2416BA4D4();
  if (qword_257139300 != -1)
LABEL_6:
    swift_once();
LABEL_5:
  v5 = (id)qword_25713A038;
  sub_2416BA9CC();
  sub_2416BA57C();
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 32) = v9;
  return result;
}

uint64_t sub_2415A396C()
{
  return sub_2416BAA8C();
}

void sub_2415A3988(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_257139C80, sub_2415A39A4, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
}

void sub_2415A39A4(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_257139C88, (void (*)(uint64_t))sub_2415A3A28, (void (*)(uint64_t))sub_2415A3F74);
}

void sub_2415A39C0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    v6 = sub_2416BA150();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_2415A3A28()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257139C90)
  {
    sub_24159D6B0(255, &qword_257139C98, (uint64_t (*)(uint64_t))sub_2415A3AA0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_2415A3E1C();
    v0 = sub_2416BADF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257139C90);
  }
}

void sub_2415A3AA0(uint64_t a1)
{
  sub_2415A3AB4(a1, &qword_257139CA0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
}

void sub_2415A3AB4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0];
    sub_24159D6B0(255, &qword_257139CA8, (uint64_t (*)(uint64_t))sub_2415A3B54, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v8 = v7;
    sub_24159D6B0(255, &qword_257139CE8, (uint64_t (*)(uint64_t))sub_2415A3D70, v6);
    v10 = a3(a1, v8, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

void sub_2415A3B54()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_257139CB0)
  {
    sub_2415A3BC0();
    sub_2415A3CB4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_257139CB0);
  }
}

void sub_2415A3BC0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257139CB8)
  {
    sub_2415A3C44();
    sub_2415A3D28(255, (unint64_t *)&qword_257139CD0, MEMORY[0x24BDF3E48], MEMORY[0x24BDF3E18], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF06F8]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257139CB8);
  }
}

void sub_2415A3C44()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257139CC0)
  {
    sub_2415A3D28(255, &qword_257139CC8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1FA8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v0 = sub_2416BACA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257139CC0);
  }
}

void sub_2415A3CB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257139CD8)
  {
    sub_2415A3D28(255, &qword_257139CE0, MEMORY[0x24BDF1FA8], MEMORY[0x24BDECC80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257139CD8);
  }
}

void sub_2415A3D28(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v6 = a5(0, a3, a4);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_2415A3D70()
{
  uint64_t v0;
  unint64_t TupleTypeMetadata2;
  uint64_t v2;

  if (!qword_257139CF0)
  {
    v0 = MEMORY[0x24BDF1FA8];
    sub_24159D7F0(255, &qword_257139CF8, MEMORY[0x24BDF1FA8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    sub_2415A3D28(255, &qword_257139CE0, v0, MEMORY[0x24BDECC80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v2)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_257139CF0);
  }
}

unint64_t sub_2415A3E1C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_257139D00;
  if (!qword_257139D00)
  {
    sub_24159D6B0(255, &qword_257139C98, (uint64_t (*)(uint64_t))sub_2415A3AA0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v2 = v1;
    v3 = sub_2415A3E94();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5578], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_257139D00);
  }
  return result;
}

unint64_t sub_2415A3E94()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_257139D08;
  if (!qword_257139D08)
  {
    sub_2415A3AA0(255);
    v2 = v1;
    v3[0] = sub_2415A3F2C(&qword_257139D10, &qword_257139CA8, (uint64_t (*)(uint64_t))sub_2415A3B54);
    v3[1] = sub_2415A3F2C(&qword_257139D18, &qword_257139CE8, (uint64_t (*)(uint64_t))sub_2415A3D70);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_257139D08);
  }
  return result;
}

uint64_t sub_2415A3F2C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_24159D6B0(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_2415A3F74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257139D20)
  {
    sub_24159D7F0(255, &qword_257139D28, MEMORY[0x24BDF1948], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v0 = sub_2416BA75C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257139D20);
  }
}

uint64_t sub_2415A3FE0(uint64_t a1)
{
  uint64_t v2;

  sub_2415A0A74(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2415A401C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, &qword_257139C98, (uint64_t (*)(uint64_t))sub_2415A3AA0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415A4080()
{
  return sub_2415A40A4(&qword_257139D30, (uint64_t (*)(uint64_t))sub_2415A39A4, sub_2415A4114, sub_2415A4130);
}

uint64_t sub_2415A40A4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2415A4114()
{
  return sub_24159CE88(&qword_257139D38, (uint64_t (*)(uint64_t))sub_2415A3A28, MEMORY[0x24BDF4700]);
}

uint64_t sub_2415A4130()
{
  return sub_24159CE88(&qword_257139D40, (uint64_t (*)(uint64_t))sub_2415A3F74, MEMORY[0x24BDF1028]);
}

uint64_t sub_2415A414C(uint64_t a1)
{
  sub_2415A41CC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_OWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_WORD *)(a1 + 144));
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_2415A41CC(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int16 a16)
{
  if (HIBYTE(a16) <= 0xFEu)
    return sub_2415A4210(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (unsigned __int16)(a16 & 0x1FF) >> 8);
  return result;
}

uint64_t sub_2415A4210(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char a17)
{
  if ((a17 & 1) != 0)
  {
    sub_2415A432C(a1, a2, a3, a4);
    sub_2415A431C(a5, a6, a7 & 1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_2415A42F4(a1, a2, a3);
    swift_release();
    return sub_2415A432C(a7, a8, a9, a10);
  }
}

uint64_t sub_2415A42F4(uint64_t a1, uint64_t a2, char a3)
{
  sub_2415A431C(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2415A431C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_2415A432C(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_2415A431C(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2415A435C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415A3988(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415A43A0(uint64_t a1, uint64_t a2, char a3)
{
  sub_2415A43C8(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_2415A43C8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t sub_2415A43D8(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_2415A43C8(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_2415A4408(uint64_t result)
{
  *(_BYTE *)(result + 121) = 0;
  return result;
}

uint64_t sub_2415A4410(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415A3AB4(0, &qword_257139D48, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_2415A4464(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[8];
  v5 = a1[7];
  v6 = a1[6];
  v3 = a1[9];
  sub_2415A43A0(*a1, a1[1], a1[2]);
  swift_retain();
  sub_2415A43D8(v6, v5, v2, v3);
  return a1;
}

uint64_t *sub_2415A450C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[8];
  v5 = a1[7];
  v6 = a1[6];
  v3 = a1[9];
  sub_2415A42F4(*a1, a1[1], a1[2]);
  swift_release();
  sub_2415A432C(v6, v5, v2, v3);
  return a1;
}

double sub_2415A45B4(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 120) = -256;
  return result;
}

uint64_t sub_2415A45D8(uint64_t result)
{
  *(_BYTE *)(result + 121) = 1;
  return result;
}

unint64_t sub_2415A45E8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_257139D50;
  if (!qword_257139D50)
  {
    sub_24159D6B0(255, &qword_257139D58, (uint64_t (*)(uint64_t))sub_2415A3988, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v2 = v1;
    v3 = sub_2415A40A4(&qword_257139D60, (uint64_t (*)(uint64_t))sub_2415A3988, sub_2415A4080, sub_2415A4680);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5578], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_257139D50);
  }
  return result;
}

uint64_t sub_2415A4680()
{
  return sub_24159CE88(&qword_257139D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
}

uint64_t BasicAlertModel.Action.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_2416B9B80();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t BasicAlertModel.Action.buttonText.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BasicAlertModel.Action() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for BasicAlertModel.Action()
{
  uint64_t result;

  result = qword_257139DE8;
  if (!qword_257139DE8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BasicAlertModel.Action.style.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for BasicAlertModel.Action() + 24);
  return sub_2415A477C(v3, a1);
}

uint64_t sub_2415A477C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t BasicAlertModel.Action.handler.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for BasicAlertModel.Action() + 28));
  sub_2415A4818(v1);
  return v1;
}

uint64_t sub_2415A4818(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t BasicAlertModel.Action.init(buttonText:style:handler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v12;
  _QWORD *v13;
  uint64_t result;
  _QWORD *v15;

  sub_2416B9B74();
  v12 = (int *)type metadata accessor for BasicAlertModel.Action();
  v13 = (_QWORD *)(a6 + v12[5]);
  *v13 = a1;
  v13[1] = a2;
  result = sub_2415A48A8(a3, a6 + v12[6]);
  v15 = (_QWORD *)(a6 + v12[7]);
  *v15 = a4;
  v15[1] = a5;
  return result;
}

uint64_t sub_2415A48A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415A490C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_2416B9B80();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t BasicAlertModel.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BasicAlertModel.actions.getter()
{
  return swift_bridgeObjectRetain();
}

void __swiftcall BasicAlertModel.init(title:message:actions:code:)(MedicalIDUI::BasicAlertModel *__return_ptr retstr, Swift::String title, Swift::String_optional message, Swift::OpaquePointer actions, Swift::String_optional code)
{
  retstr->title = title;
  retstr->message = message;
  retstr->actions = actions;
  retstr->code = code;
}

uint64_t BasicAlertModel.init(title:message:action:code:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  sub_24159D6B0(0, &qword_257139D78, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v16 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BasicAlertModel.Action() - 8) + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2416BCF30;
  result = sub_2415A519C(a5, v18 + v17);
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = v18;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t BasicAlertModel.errorDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BasicAlertModel.failureReason.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BasicAlertModel.code.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BasicAlertModel.code.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*BasicAlertModel.code.modify())()
{
  return nullsub_1;
}

uint64_t sub_2415A4B30()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2415A4B5C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2415A4B88()
{
  return sub_2416B9A30();
}

uint64_t sub_2415A4B9C()
{
  return sub_2416B9A24();
}

uint64_t _s11MedicalIDUI15BasicAlertModelV6ActionV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_QWORD);
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_BYTE *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[4];
  int v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;

  v60 = sub_2416B9EBC();
  v58 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v57 = &v54[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24159D6B0(0, &qword_257139D70, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v61 = &v54[-v7];
  sub_2415A6088();
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v59 = &v54[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for BasicAlertModel.Action();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = &v54[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = MEMORY[0x24BDAC7A8](v12);
  v62 = &v54[-v16];
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = &v54[-v18];
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = &v54[-v21];
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = &v54[-v24];
  MEMORY[0x24BDAC7A8](v23);
  v27 = &v54[-v26];
  v28 = sub_2416B9B68();
  sub_2415A6100(a1, (uint64_t)v27);
  sub_2415A6100(a2, (uint64_t)v25);
  if ((v28 & 1) == 0)
  {
    sub_2415A6154((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
    sub_2415A6154((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
    sub_2415A6100(a1, (uint64_t)v22);
    sub_2415A6100(a2, (uint64_t)v19);
    v34 = a2;
    goto LABEL_9;
  }
  v56 = v11;
  v29 = *(int *)(v11 + 20);
  v30 = *(_QWORD *)&v27[v29];
  v31 = *(_QWORD *)&v27[v29 + 8];
  v32 = &v25[v29];
  if (v30 == *v32 && v31 == v32[1])
  {
    sub_2415A6154((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
    sub_2415A6154((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
    sub_2415A6100(a1, (uint64_t)v22);
    v34 = a2;
    sub_2415A6100(a2, (uint64_t)v19);
    goto LABEL_11;
  }
  v55 = sub_2416BB644();
  sub_2415A6154((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
  sub_2415A6154((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
  sub_2415A6100(a1, (uint64_t)v22);
  v34 = a2;
  sub_2415A6100(a2, (uint64_t)v19);
  if ((v55 & 1) == 0)
  {
LABEL_9:
    sub_2415A6154((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
    v35 = (uint64_t)v22;
    v36 = (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action;
LABEL_17:
    sub_2415A6154(v35, v36);
    v44 = v62;
    sub_2415A6100(a1, (uint64_t)v62);
    sub_2415A6100(v34, (uint64_t)v14);
LABEL_18:
    sub_2415A6154((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
    sub_2415A6154((uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
    return 0;
  }
LABEL_11:
  v37 = *(int *)(v56 + 24);
  v38 = (uint64_t)&v19[v37];
  v39 = v59;
  v40 = (uint64_t)&v59[*(int *)(v9 + 48)];
  sub_2415A477C((uint64_t)&v22[v37], (uint64_t)v59);
  sub_2415A477C(v38, v40);
  v41 = v58;
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  v43 = v60;
  if (v42((uint64_t)v39, 1, v60) == 1)
  {
    sub_2415A6154((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
    sub_2415A6154((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
    if (v42(v40, 1, v43) == 1)
    {
      sub_2415A6190((uint64_t)v39);
      v44 = v62;
      sub_2415A6100(a1, (uint64_t)v62);
      sub_2415A6100(v34, (uint64_t)v14);
      goto LABEL_22;
    }
    goto LABEL_16;
  }
  sub_2415A477C((uint64_t)v39, (uint64_t)v61);
  if (v42(v40, 1, v43) == 1)
  {
    sub_2415A6154((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
    sub_2415A6154((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
    (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v61, v43);
LABEL_16:
    v36 = (uint64_t (*)(_QWORD))sub_2415A6088;
    v35 = (uint64_t)v39;
    goto LABEL_17;
  }
  v46 = v57;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v41 + 32))(v57, v40, v43);
  sub_2415A61E4();
  v47 = v41;
  v55 = sub_2416BB08C();
  v48 = (uint64_t)v14;
  v49 = *(void (**)(_BYTE *, uint64_t))(v47 + 8);
  v49(v46, v43);
  sub_2415A6154((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
  sub_2415A6154((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
  v49(v61, v43);
  v14 = (_BYTE *)v48;
  sub_2415A6190((uint64_t)v39);
  v44 = v62;
  sub_2415A6100(a1, (uint64_t)v62);
  sub_2415A6100(v34, v48);
  if ((v55 & 1) == 0)
    goto LABEL_18;
LABEL_22:
  v50 = v56;
  v51 = *(_QWORD *)&v44[*(int *)(v56 + 28)];
  sub_2415A4818(v51);
  sub_2415A6154((uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
  if (v51)
  {
    sub_2415A6144(v51);
    v52 = *(_QWORD *)&v14[*(int *)(v50 + 28)];
    sub_2415A4818(v52);
    sub_2415A6154((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
    if (v52)
    {
      sub_2415A6144(v52);
      return 1;
    }
  }
  else
  {
    v53 = *(_QWORD *)&v14[*(int *)(v50 + 28)];
    sub_2415A4818(v53);
    sub_2415A6154((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for BasicAlertModel.Action);
    if (!v53)
      return 1;
    sub_2415A6144(v53);
  }
  return 0;
}

uint64_t sub_2415A519C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BasicAlertModel.Action();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s11MedicalIDUI15BasicAlertModelV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v8 = a2[2];
  v7 = a2[3];
  v10 = a2[4];
  v9 = a2[5];
  v11 = a2[6];
  if (*a1 == *a2 && a1[1] == a2[1] || (v12 = sub_2416BB644(), result = 0, (v12 & 1) != 0))
  {
    if (v4)
    {
      if (!v7)
        return 0;
      if (v2 != v8 || v4 != v7)
      {
        v14 = sub_2416BB644();
        result = 0;
        if ((v14 & 1) == 0)
          return result;
      }
    }
    else if (v7)
    {
      return 0;
    }
    if ((sub_2415F2140(v3, v10) & 1) != 0)
    {
      if (v6)
      {
        if (v11 && (v5 == v9 && v6 == v11 || (sub_2416BB644() & 1) != 0))
          return 1;
      }
      else if (!v11)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_2415A5300()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257139D80;
  if (!qword_257139D80)
  {
    v1 = sub_2416B9B80();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDCEA80], v1);
    atomic_store(result, (unint64_t *)&qword_257139D80);
  }
  return result;
}

unint64_t sub_2415A534C()
{
  unint64_t result;

  result = qword_257139D88;
  if (!qword_257139D88)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for BasicAlertModel, &type metadata for BasicAlertModel);
    atomic_store(result, (unint64_t *)&qword_257139D88);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MedicalIDEmergencyContact(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for BasicAlertModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for BasicAlertModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for BasicAlertModel(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BasicAlertModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BasicAlertModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BasicAlertModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BasicAlertModel()
{
  return &type metadata for BasicAlertModel;
}

uint64_t *initializeBufferWithCopyOfBuffer for BasicAlertModel.Action(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_2416B9B80();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (char *)a1 + v9;
    v14 = (char *)a2 + v9;
    v15 = sub_2416B9EBC();
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain();
    if (v17(v14, 1, v15))
    {
      sub_24159D6B0(0, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v20 = a3[7];
    v21 = (uint64_t *)((char *)a1 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    if (*v22)
    {
      v23 = v22[1];
      *v21 = *v22;
      v21[1] = v23;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
    }
  }
  return a1;
}

uint64_t destroy for BasicAlertModel.Action(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_2416B9B80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 24);
  v6 = sub_2416B9EBC();
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  if (*(_QWORD *)(a1 + *(int *)(a2 + 28)))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for BasicAlertModel.Action(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v6 = sub_2416B9B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (void *)(a1 + v8);
  v13 = (const void *)(a2 + v8);
  v14 = sub_2416B9EBC();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
  swift_bridgeObjectRetain();
  if (v16(v13, 1, v14))
  {
    sub_24159D6B0(0, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = a3[7];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  if (*v20)
  {
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  return a1;
}

uint64_t assignWithCopy for BasicAlertModel.Action(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = sub_2416B9B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = sub_2416B9EBC();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    sub_24159D6B0(0, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = *(_QWORD *)(a1 + v19);
  v23 = *v21;
  if (!v22)
  {
    if (v23)
    {
      v25 = v21[1];
      *v20 = v23;
      v20[1] = v25;
      swift_retain();
      return a1;
    }
LABEL_13:
    *(_OWORD *)v20 = *(_OWORD *)v21;
    return a1;
  }
  if (!v23)
  {
    swift_release();
    goto LABEL_13;
  }
  v24 = v21[1];
  *v20 = v23;
  v20[1] = v24;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for BasicAlertModel.Action(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_2416B9B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_2416B9EBC();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_24159D6B0(0, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = *v15;
  if (*v15)
  {
    v17 = v15[1];
    *v14 = v16;
    v14[1] = v17;
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  return a1;
}

uint64_t assignWithTake for BasicAlertModel.Action(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_2416B9B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = sub_2416B9EBC();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_24159D6B0(0, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  v21 = a3[7];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v24 = *(_QWORD *)(a1 + v21);
  v25 = *v23;
  if (!v24)
  {
    if (v25)
    {
      v27 = v23[1];
      *v22 = v25;
      v22[1] = v27;
      return a1;
    }
LABEL_13:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    return a1;
  }
  if (!v25)
  {
    swift_release();
    goto LABEL_13;
  }
  v26 = v23[1];
  *v22 = v25;
  v22[1] = v26;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BasicAlertModel.Action()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415A5E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_2416B9B80();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_24159D6B0(0, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v8 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for BasicAlertModel.Action()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415A5F1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_2416B9B80();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    sub_24159D6B0(0, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_2415A5FDC()
{
  unint64_t v0;
  unint64_t v1;

  sub_2416B9B80();
  if (v0 <= 0x3F)
  {
    sub_24159D6B0(319, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_2415A6088()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_257139E28)
  {
    sub_24159D6B0(255, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_257139E28);
  }
}

uint64_t sub_2415A6100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BasicAlertModel.Action();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415A6144(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_2415A6154(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2415A6190(uint64_t a1)
{
  uint64_t v2;

  sub_24159D6B0(0, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2415A61E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257139E30;
  if (!qword_257139E30)
  {
    v1 = sub_2416B9EBC();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEAFC0], v1);
    atomic_store(result, (unint64_t *)&qword_257139E30);
  }
  return result;
}

_QWORD *sub_2415A6230(void *a1, void *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = v3;
  v47 = (void *)a3;
  sub_24159EF1C(0, &qword_257139900, (uint64_t (*)(uint64_t))sub_24159D9F8, sub_24159DB4C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB9648]);
  v8 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  v51 = v8;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v45 - v9;
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3CF0]), sel_initWithHealthStore_, a1);
  v4[9] = a1;
  v4[10] = v11;
  v12 = objc_allocWithZone(MEMORY[0x24BDBACF8]);
  v13 = v11;
  v14 = a1;
  v15 = v13;
  v16 = v14;
  v17 = objc_msgSend(v12, sel_init);
  type metadata accessor for MedicalIDEmergencyContactProvider();
  swift_allocObject();
  v18 = sub_2416277A4(v16, v17);

  v4[2] = v18;
  v48 = v18;
  type metadata accessor for HealthDemographicDataProvider();
  v19 = swift_allocObject();
  v20 = v19 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data;
  v21 = type metadata accessor for HealthDemographicData();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = v16;
  swift_retain();
  sub_2416B9CD0();
  *(_QWORD *)(v19 + 16) = v22;
  v4[3] = v19;
  type metadata accessor for MedicalIDHealthStoreDataProvider();
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v22;
  v24 = objc_allocWithZone(MEMORY[0x24BDD3E40]);
  v49 = v22;
  *(_QWORD *)(v23 + 24) = objc_msgSend(v24, sel_initWithHealthStore_, v49);
  v4[4] = v23;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v15;
  v26 = a2;
  v27 = a2;
  v46 = v27;
  v28 = v15;
  swift_retain();
  v29 = _s11MedicalIDUI09HealthKitA14IDDataProviderC37medicalIDUpdateNotificationPublishersSay7Combine12AnyPublisherVyyts5NeverOGGvgZ_0();
  type metadata accessor for HealthKitMedicalIDDataProvider();
  swift_allocObject();
  v30 = sub_24159ED90((uint64_t)sub_2415A7074, v25, v29, v26);
  swift_release();
  swift_bridgeObjectRelease();

  v4[5] = v30;
  type metadata accessor for MedicalIDSettingsProvider();
  swift_allocObject();
  v4[6] = sub_2416817F0();
  v31 = v47;
  v4[8] = v47;
  v52 = v30[2];
  sub_24159D9F8();
  sub_24159DB4C();
  sub_24159DB68();
  v32 = v31;
  sub_2416B9E80();
  sub_24159DBD0();
  v33 = v50;
  v47 = (void *)sub_2416B9E5C();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v10, v33);
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = v32;
  v35 = *(void **)(v23 + 16);
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = v35;
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = v28;
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = v28;
  type metadata accessor for MedicalIDDataManager();
  v39 = swift_allocObject();
  v40 = v28;
  v41 = v48;
  swift_retain();
  v42 = v35;
  v43 = sub_2415A71D0((uint64_t)v47, v41, (uint64_t)sub_2415A707C, v34, (uint64_t)sub_2415A709C, v36, (uint64_t)&unk_257139F38, v37, (uint64_t)&unk_257139F48, v38, v39);
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v4[7] = v43;
  return v4;
}

void sub_2415A66B0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  _QWORD v5[6];

  v5[4] = a1;
  v5[5] = a2;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1107296256;
  v5[2] = sub_2415A674C;
  v5[3] = &block_descriptor_18;
  v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  objc_msgSend(a3, sel_fetchMedicalIDDataWithCompletion_, v4);
  _Block_release(v4);
}

void sub_2415A674C(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t sub_2415A67C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  return swift_task_switch();
}

uint64_t sub_2415A67D8()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[15];
  v1 = (void *)v0[16];
  v0[7] = v0 + 18;
  v0[2] = v0;
  v0[3] = sub_2415A6878;
  v3 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_2415A6928;
  v4[3] = &block_descriptor_16;
  v4[4] = v3;
  objc_msgSend(v1, sel_updateMedicalIDData_completion_, v2, v4);
  return swift_continuation_await();
}

uint64_t sub_2415A6878()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 136) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_2415A68D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 144));
}

uint64_t sub_2415A68E8()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_2415A6928(uint64_t a1, char a2, void *a3)
{
  _QWORD *v4;
  id v5;

  if (a3)
  {
    sub_24159F0B8();
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_2415A69A4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = a1;
  return swift_task_switch();
}

uint64_t sub_2415A69BC()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[15];
  v0[7] = v0 + 17;
  v0[2] = v0;
  v0[3] = sub_2415A6A50;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_2415A6928;
  v3[3] = &block_descriptor;
  v3[4] = v2;
  objc_msgSend(v1, sel_deleteMedicalIDDataWithCompletion_, v3);
  return swift_continuation_await();
}

uint64_t sub_2415A6A50()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 128) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_2415A6AB0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 136));
}

uint64_t sub_2415A6AC0()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_2415A6B00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  id v27;
  int v28;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v4 = v3;
  v31 = a3;
  v7 = type metadata accessor for MedicalIDData();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415A6FC4(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v3 + 56);
  swift_beginAccess();
  v14 = *(void **)(v13 + 16);
  swift_getKeyPath();
  v32 = v13;
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  v15 = v14;
  sub_2416B9CAC();
  swift_release();
  v16 = v13 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_2415A700C(v16, (uint64_t)v12);
  LoadState<>.loadedValue.getter((uint64_t)v9);
  sub_2415A6154((uint64_t)v12, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  v17 = sub_2416B9C70();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v20 + 16))(v19, a1);
  v21 = *(void **)(*(_QWORD *)(v4 + 32) + 16);
  v22 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v25 + 16))(v24, a2);
  v26 = *(void **)(v4 + 64);
  v27 = v21;
  v28 = objc_msgSend(v26, sel_suggestHealthData);
  return MedicalIDDataViewModel.init(data:medicalIDData:calendar:healthStore:locale:suggestHealthData:)(v15, (uint64_t)v9, (uint64_t)v19, v27, (uint64_t)v24, v28, v31);
}

uint64_t sub_2415A6D50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[4];

  v2 = v1;
  v4 = type metadata accessor for MedicalIDData();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415A6FC4(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v1 + 56);
  swift_getKeyPath();
  v21[1] = v10;
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  v11 = v10 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_2415A700C(v11, (uint64_t)v9);
  LoadState<>.loadedValue.getter((uint64_t)v6);
  sub_2415A6154((uint64_t)v9, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  v12 = *(_QWORD *)(v2 + 32);
  v13 = *(void **)(v12 + 24);
  v14 = *(id *)(v12 + 16);
  v15 = objc_msgSend(v13, sel_synchronouslyFetchFirstName);
  if (v15)
  {
    v16 = v15;
    v17 = sub_2416BB128();
    v19 = v18;

  }
  else
  {
    v17 = 0;
    v19 = 0;
  }
  MedicalIDSettingsProvider.medicalIDSettingsViewModel(data:healthStore:profileFirstName:)((uint64_t)v6, v14, v17, v19, a1);

  swift_bridgeObjectRelease();
  return sub_2415A6154((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
}

id *sub_2415A6F28()
{
  id *v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return v0;
}

uint64_t sub_2415A6F84()
{
  sub_2415A6F28();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MedicalIDModelProvider()
{
  return objc_opt_self();
}

void sub_2415A6FC4(uint64_t a1)
{
  sub_24159EF1C(a1, &qword_257139F18, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDData, sub_2415A6FE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LoadState);
}

uint64_t sub_2415A6FE8()
{
  return sub_24159CE88(&qword_257139F20, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDData, (uint64_t)&protocol conformance descriptor for MedicalIDData);
}

uint64_t sub_2415A700C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415A6FC4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415A7050()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_2415A7074(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_2415A66B0(a1, a2, *(void **)(v2 + 16));
}

id sub_2415A707C()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_shouldSaveDataToHealthDetails);
}

void sub_2415A709C(void *a1)
{
  sub_2416808E8(a1);
}

uint64_t sub_2415A70BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_2415A7120;
  v5[15] = a1;
  v5[16] = v4;
  return swift_task_switch();
}

uint64_t sub_2415A7120(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_2415A7170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_2415A73D4;
  v3[15] = v2;
  return swift_task_switch();
}

uint64_t sub_2415A71D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v26[5];

  v26[3] = type metadata accessor for MedicalIDEmergencyContactProvider();
  v26[4] = &protocol witness table for MedicalIDEmergencyContactProvider;
  v26[0] = a2;
  *(_QWORD *)(a11 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD4218]), sel_init);
  *(_QWORD *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__subscriptions) = MEMORY[0x24BEE4B08];
  sub_2416B9CD0();
  sub_2415A7348((uint64_t)v26, a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_medicalIDEmergencyContactProvider);
  v18 = (_QWORD *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_shouldSaveDataToHealthDetails);
  *v18 = a3;
  v18[1] = a4;
  v19 = (_QWORD *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_saveDataToHealthStore);
  *v19 = a5;
  v19[1] = a6;
  v20 = (_QWORD *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_saveDataToMedicalIDStore);
  *v20 = a7;
  v20[1] = a8;
  v21 = (_QWORD *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_deleteDataFromMedicalIDStore);
  *v21 = a9;
  v21[1] = a10;
  v22 = a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  v23 = type metadata accessor for MedicalIDData();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_241672090(a1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return a11;
}

uint64_t sub_2415A7348(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void MedicalIDDisplaySection.baseIdentifier.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_2415A7408()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  v0 = 0x6C616E6F73726550;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v1 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v1 + 40) = 0xE900000000000044;
  strcpy((char *)(v1 + 48), "PersonalInfo");
  *(_BYTE *)(v1 + 61) = 0;
  *(_WORD *)(v1 + 62) = -5120;
  v2 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v3 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v3)
  {
    v0 = sub_2416BB128();

  }
  return v0;
}

uint64_t MedicalIDDataViewModel.init(data:medicalIDData:calendar:healthStore:locale:suggestHealthData:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, _QWORD *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  id v71;
  unint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t);
  char *v84;
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  id v91;
  id v92;
  uint64_t v93;
  _QWORD *v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  LODWORD(v86) = a6;
  v96 = a5;
  v91 = a4;
  v92 = a1;
  v98 = a2;
  v89 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x24BDAC7A8](v89);
  v90 = (uint64_t *)((char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2415A9F94(0, &qword_257139F50, (void (*)(uint64_t))type metadata accessor for MedicalIDWeightFormatter);
  MEMORY[0x24BDAC7A8](v13);
  v85 = (char *)&v78 - v14;
  sub_2415A9F94(0, &qword_257139F58, (void (*)(uint64_t))type metadata accessor for MedicalIDHeightFormatter);
  MEMORY[0x24BDAC7A8](v15);
  v84 = (char *)&v78 - v16;
  v17 = type metadata accessor for MedicalIDData();
  v18 = MEMORY[0x24BDAC7A8](v17);
  v93 = (uint64_t)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v95 = (int *)((char *)&v78 - v20);
  *a7 = a1;
  v21 = (int *)type metadata accessor for MedicalIDDataViewModel();
  sub_2415A84E8(a2, (uint64_t)a7 + v21[5]);
  v22 = (char *)a7 + v21[6];
  v23 = sub_2416B9C70();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v97 = a3;
  v82 = v23;
  v25(v22, a3, v23);
  v83 = v25;
  v26 = v21[7];
  v94 = a7;
  *(_QWORD *)((char *)a7 + v26) = a4;
  v27 = (char *)a7 + v21[8];
  v28 = sub_2416B9C10();
  v29 = *(_QWORD *)(v28 - 8);
  v81 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v30 = v96;
  v81(v27, v96, v28);
  v31 = sub_2415A84E8(v98, (uint64_t)v95);
  v88 = v24;
  MEMORY[0x24BDAC7A8](v31);
  v78 = v32;
  v33 = (char *)&v78 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = ((uint64_t (*)(char *, uint64_t, uint64_t))v25)(v33, a3, v23);
  v87 = v29;
  v35 = *(_QWORD *)(v29 + 64);
  MEMORY[0x24BDAC7A8](v34);
  v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF0;
  v37 = v81;
  v81((char *)&v78 - v36, v30, v28);
  v38 = v94;
  v39 = (uint64_t)v94 + v21[10];
  v92 = v92;
  v91 = v91;
  v40 = v39;
  v41 = (uint64_t)v95;
  MedicalIDPersonalInfoViewModel.init(data:calendar:locale:)((uint64_t)v95, (uint64_t)v33, (uint64_t)&v78 - v36, v40);
  v42 = sub_2415A84E8(v98, v41);
  v79 = v35;
  MEMORY[0x24BDAC7A8](v42);
  v43 = (char *)&v78 - v36;
  v37((char *)&v78 - v36, v30, v28);
  v44 = type metadata accessor for MedicalIDHeightFormatter();
  v45 = (uint64_t)v84;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v84, 1, 1, v44);
  v46 = type metadata accessor for MedicalIDWeightFormatter();
  v47 = (uint64_t)v85;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v85, 1, 1, v46);
  MedicalIDBiometricsViewModel.init(medicalIDData:locale:heightFormatter:weightFormatter:)((uint64_t)v95, v43, v45, v47, (_QWORD *)((char *)v38 + v21[9]));
  v95 = v21;
  v48 = (char *)v38 + v21[11];
  v49 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v50 = (uint64_t (*)(char *, uint64_t, uint64_t))v83;
  v51 = v82;
  ((void (*)(char *, uint64_t))v83)(&v48[*(int *)(v49 + 20)], v97);
  v52 = *(int *)(v49 + 24);
  v53 = v92;
  v54 = v28;
  v37(&v48[v52], v30, v28);
  *(_QWORD *)v48 = v53;
  if ((v86 & 1) != 0)
  {
    type metadata accessor for PregnancySampleDataProvider();
    v55 = v53;
    v80 = PregnancySampleDataProvider.__allocating_init(healthStore:)((uint64_t)v91);
  }
  else
  {
    v56 = v53;
    v80 = 0;
  }
  v58 = v78;
  v57 = v79;
  v59 = 0x636E616E67657250;
  v60 = sub_2415A84E8(v98, v93);
  v86 = &v78;
  MEMORY[0x24BDAC7A8](v60);
  v61 = (char *)&v78 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = v50(v61, v97, v51);
  v85 = (char *)&v78;
  MEMORY[0x24BDAC7A8](v62);
  v63 = (char *)&v78 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37(v63, v96, v54);
  sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
  v84 = (char *)&v78;
  MEMORY[0x24BDAC7A8](v64);
  v66 = (char *)&v78 - v65;
  v67 = sub_2416B9B50();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v66, 1, 1, v67);
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_2416BCC80;
  v69 = 0xE900000000000079;
  *(_QWORD *)(v68 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v68 + 40) = 0xE900000000000044;
  *(_QWORD *)(v68 + 48) = 0x636E616E67657250;
  *(_QWORD *)(v68 + 56) = 0xE900000000000079;
  v70 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v71 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v71)
  {
    v59 = sub_2416BB128();
    v69 = v72;

  }
  v73 = (uint64_t)v90;
  *v90 = v59;
  *(_QWORD *)(v73 + 8) = v69;
  v74 = (int *)v89;
  sub_2415A85BC(v93, v73 + *(int *)(v89 + 20), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  v75 = v88;
  (*(void (**)(uint64_t, char *, uint64_t))(v88 + 32))(v73 + v74[6], v61, v51);
  v76 = v87;
  (*(void (**)(uint64_t, char *, uint64_t))(v87 + 32))(v73 + v74[7], v63, v54);
  *(_QWORD *)(v73 + v74[8]) = v80;
  sub_2415A852C((uint64_t)v66, v73 + v74[9]);

  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v96, v54);
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v97, v51);
  sub_2415A8580(v98);
  return sub_2415A85BC(v73, (uint64_t)v94 + v95[12], (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
}

void MedicalIDDisplaySection.id.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

MedicalIDUI::MedicalIDDisplaySection_optional __swiftcall MedicalIDDisplaySection.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  MedicalIDUI::MedicalIDDisplaySection_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2416BB614();
  result.value = swift_bridgeObjectRelease();
  v5 = 8;
  if (v3 < 8)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static MedicalIDDisplaySection.allCases.getter()
{
  return &unk_251193928;
}

uint64_t MedicalIDDisplaySection.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2415A8090 + 4 * byte_2416BD170[*v0]))(0xD000000000000011, 0x80000002416C3A80);
}

uint64_t sub_2415A8090()
{
  return 0x6C616E6F73726570;
}

uint64_t sub_2415A80B0()
{
  return 0x636E616E67657270;
}

uint64_t sub_2415A80D0()
{
  return 0x697461636964656DLL;
}

uint64_t sub_2415A80F0()
{
  return 0x65696772656C6C61;
}

uint64_t sub_2415A810C()
{
  return 0x697274656D6F6962;
}

uint64_t sub_2415A813C()
{
  return 0x4E6C61636964656DLL;
}

void sub_2415A815C(char *a1)
{
  sub_24160287C(*a1);
}

void sub_2415A8168()
{
  char *v0;

  sub_241682848(0, *v0);
}

void sub_2415A8174(uint64_t a1)
{
  char *v1;

  sub_2416825D0(a1, *v1);
}

void sub_2415A817C(uint64_t a1)
{
  char *v1;

  sub_241682848(a1, *v1);
}

MedicalIDUI::MedicalIDDisplaySection_optional sub_2415A8184(Swift::String *a1)
{
  return MedicalIDDisplaySection.init(rawValue:)(*a1);
}

uint64_t sub_2415A8190@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MedicalIDDisplaySection.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_2415A81B4(_QWORD *a1@<X8>)
{
  *a1 = &unk_251193928;
}

void sub_2415A81C4(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

MedicalIDUI::MedicalIDDisplaySection_optional __swiftcall MedicalIDDataViewModel.displaySectionForFirstLaunch(_:)(MIUIDisplayConfiguration *a1)
{
  char *v1;
  id *v2;
  char *v4;
  int64_t v5;
  char v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = v1;
  if (-[MIUIDisplayConfiguration isEditingAvailable](a1, sel_isEditingAvailable))
  {
    if (objc_msgSend(*v2, sel_isEmpty)
      && (v5 = -[MIUIDisplayConfiguration entryPoint](a1, sel_entryPoint)) == 0)
    {
      v6 = 0;
    }
    else
    {
      v5 = -[MIUIDisplayConfiguration entryPoint](a1, sel_entryPoint);
      if (v5 == 1)
        v6 = 4;
      else
        v6 = 8;
    }
  }
  else
  {
    if (qword_2571395C0 != -1)
      swift_once();
    v7 = sub_2416B9D6C();
    __swift_project_value_buffer(v7, (uint64_t)qword_257147810);
    v8 = sub_2416B9D54();
    v9 = sub_2416BB38C();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      v13 = v11;
      *(_DWORD *)v10 = 136315394;
      sub_2415A8600(0xD000000000000016, 0x80000002416BD170, &v13);
      sub_2416BB44C();
      *(_WORD *)(v10 + 12) = 2080;
      sub_2415A8600(0xD000000000000020, 0x80000002416C3FB0, &v13);
      sub_2416BB44C();
      _os_log_impl(&dword_241599000, v8, v9, "[%s.%s] editing is disabled, unable to display a custom section", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242699570](v11, -1, -1);
      MEMORY[0x242699570](v10, -1, -1);
    }

    v6 = 8;
  }
  *v4 = v6;
  return (MedicalIDUI::MedicalIDDisplaySection_optional)v5;
}

Swift::Bool __swiftcall MedicalIDDataViewModel.isDeletionVisible(with:healthStore:)(MIUIDisplayConfiguration *with, HKHealthStore healthStore)
{
  id *v2;
  unsigned int v5;
  id v6;
  id v7;

  v5 = -[MIUIDisplayConfiguration isEditingAvailable](with, sel_isEditingAvailable);
  if (v5)
  {
    v6 = -[objc_class profileIdentifier](healthStore.super.isa, sel_profileIdentifier);
    v7 = objc_msgSend(v6, sel_type);

    if (v7 == (id)3 && (id)-[MIUIDisplayConfiguration accessPoint](with, sel_accessPoint) != (id)8)
    {
      LOBYTE(v5) = 0;
    }
    else
    {
      v5 = -[MIUIDisplayConfiguration isDeletionAvailable](with, sel_isDeletionAvailable);
      if (v5)
        LOBYTE(v5) = objc_msgSend(*v2, sel_isEmpty) ^ 1;
    }
  }
  return v5;
}

uint64_t type metadata accessor for MedicalIDDataViewModel()
{
  uint64_t result;

  result = qword_257139FD8;
  if (!qword_257139FD8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2415A84E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MedicalIDData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415A852C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415A8580(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MedicalIDData();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2415A85BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2415A8600(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_2415A86D0(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_2415AFA44((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_2415AFA44((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_2415A86D0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_2416BB458();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_2415A8888(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_2416BB518();
  if (!v8)
  {
    sub_2416BB59C();
    __break(1u);
LABEL_17:
    result = sub_2416BB5FC();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_2415A8888(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_2415A891C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_2415A8B08(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_2415A8B08(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_2415A891C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_2415A8A90(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_2416BB4F4();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_2416BB59C();
      __break(1u);
LABEL_10:
      v2 = sub_2416BB194();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_2416BB5FC();
    __break(1u);
LABEL_14:
    result = sub_2416BB59C();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_2415A8A90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_24159D7F0(0, &qword_25713A030, MEMORY[0x24BEE4260], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_2415A8B08(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24159D7F0(0, &qword_25713A030, MEMORY[0x24BEE4260], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2416BB5FC();
  __break(1u);
  return result;
}

unint64_t sub_2415A8C6C()
{
  unint64_t result;

  result = qword_257139F60;
  if (!qword_257139F60)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDDisplaySection, &type metadata for MedicalIDDisplaySection);
    atomic_store(result, (unint64_t *)&qword_257139F60);
  }
  return result;
}

unint64_t sub_2415A8CB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257139F68;
  if (!qword_257139F68)
  {
    sub_24159D7F0(255, &qword_257139F70, (uint64_t)&type metadata for MedicalIDDisplaySection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_257139F68);
  }
  return result;
}

unint64_t sub_2415A8D18()
{
  unint64_t result;

  result = qword_257139F78;
  if (!qword_257139F78)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDDisplaySection, &type metadata for MedicalIDDisplaySection);
    atomic_store(result, (unint64_t *)&qword_257139F78);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MedicalIDDisplaySection(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDDisplaySection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_2415A8E38 + 4 * byte_2416BD17D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_2415A8E6C + 4 * byte_2416BD178[v4]))();
}

uint64_t sub_2415A8E6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2415A8E74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2415A8E7CLL);
  return result;
}

uint64_t sub_2415A8E88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2415A8E90);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_2415A8E94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2415A8E9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDDisplaySection()
{
  return &type metadata for MedicalIDDisplaySection;
}

void **initializeBufferWithCopyOfBuffer for MedicalIDDataViewModel(void **a1, void **a2, int *a3)
{
  int v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  char *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, void *);
  id v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  char *v82;
  id v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  char *v140;
  id v141;
  id v142;
  id v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  id v172;
  uint64_t v173;
  int *v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  _QWORD *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  id v191;
  id v192;
  id v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  void *v209;
  uint64_t v210;
  id v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  uint64_t v238;
  char *v239;
  char *v240;
  id v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  void *v248;
  char *v249;
  char *v250;
  int *v251;
  void *v252;
  char *v253;
  void *v254;
  char *v255;
  char *v256;
  char *v257;
  int *v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  void (*v262)(char *, char *);
  uint64_t v263;
  void *v264;
  unsigned int (*v265)(char *, uint64_t, uint64_t);
  char *v267;
  void *v269;
  void (*v270)(char *, char *, void *);
  char *__dst;
  void *__dsta;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int (*v277)(char *, uint64_t, uint64_t);
  int *v278;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v23 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v5 = a3[5];
    v6 = (void **)((char *)a1 + v5);
    v7 = (char *)a2 + v5;
    v8 = *(uint64_t *)((char *)a2 + v5 + 8);
    *v6 = *(void **)((char *)a2 + v5);
    v6[1] = v8;
    v10 = *(uint64_t *)((char *)a2 + v5 + 16);
    v9 = *(uint64_t *)((char *)a2 + v5 + 24);
    v6[2] = v10;
    v6[3] = v9;
    v11 = *((_QWORD *)v7 + 5);
    v6[4] = *((_QWORD *)v7 + 4);
    v6[5] = v11;
    v12 = *((_QWORD *)v7 + 7);
    v6[6] = *((_QWORD *)v7 + 6);
    v6[7] = v12;
    v13 = *((_QWORD *)v7 + 9);
    v6[8] = *((_QWORD *)v7 + 8);
    v6[9] = v13;
    v14 = *((_QWORD *)v7 + 11);
    v6[10] = *((_QWORD *)v7 + 10);
    v6[11] = v14;
    v264 = (void *)*((_QWORD *)v7 + 12);
    v269 = (void *)*((_QWORD *)v7 + 13);
    v6[12] = v264;
    v6[13] = v269;
    v278 = (int *)type metadata accessor for MedicalIDData();
    v15 = v278[13];
    __dst = (char *)v6 + v15;
    v261 = &v7[v15];
    v16 = sub_2416B9B50();
    v275 = *(_QWORD *)(v16 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v275 + 48);
    v18 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = v264;
    v20 = v269;
    if (v17(v261, 1, v16))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(__dst, v261, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      v22 = v275;
    }
    else
    {
      v22 = v275;
      (*(void (**)(char *, char *, uint64_t))(v275 + 16))(__dst, v261, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v275 + 56))(__dst, 0, 1, v16);
    }
    v24 = v278[14];
    v25 = (char *)v6 + v24;
    v26 = &v7[v24];
    v276 = v16;
    if (v17(&v7[v24], 1, v16))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v25, v26, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v16);
    }
    v28 = v278[15];
    v29 = (_QWORD *)((char *)v6 + v28);
    v30 = &v7[v28];
    v31 = *((_QWORD *)v30 + 1);
    *v29 = *(_QWORD *)v30;
    v29[1] = v31;
    v32 = v278[16];
    v33 = (_QWORD *)((char *)v6 + v32);
    v34 = &v7[v32];
    v35 = *((_QWORD *)v34 + 1);
    *v33 = *(_QWORD *)v34;
    v33[1] = v35;
    *((_BYTE *)v6 + v278[17]) = v7[v278[17]];
    *((_BYTE *)v6 + v278[18]) = v7[v278[18]];
    v36 = v278[19];
    v37 = (char *)v6 + v36;
    v38 = (uint64_t *)&v7[v36];
    v39 = *(_QWORD *)&v7[v36 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v277 = v17;
    if (v39 >> 60 == 15)
    {
      *(_OWORD *)v37 = *(_OWORD *)v38;
    }
    else
    {
      v40 = *v38;
      sub_2415A0A90(*v38, v39);
      *(_QWORD *)v37 = v40;
      *((_QWORD *)v37 + 1) = v39;
    }
    v41 = v278[20];
    v42 = (char *)v6 + v41;
    v43 = &v7[v41];
    v44 = sub_2416B9A18();
    v45 = *(_QWORD *)(v44 - 8);
    v265 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    v259 = v45;
    v260 = v44;
    if (v265(v43, 1, v44))
    {
      sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
    }
    v47 = v278[21];
    v48 = *(void **)&v7[v47];
    *(_QWORD *)((char *)v6 + v47) = v48;
    v49 = v278[22];
    v50 = (char *)v6 + v49;
    v51 = &v7[v49];
    v52 = v48;
    if (v277(v51, 1, v276))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v275 + 16))(v50, v51, v276);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v275 + 56))(v50, 0, 1, v276);
    }
    v54 = a3[6];
    v55 = (char *)a1 + v54;
    v56 = (char *)a2 + v54;
    v57 = sub_2416B9C70();
    v262 = *(void (**)(char *, char *))(*(_QWORD *)(v57 - 8) + 16);
    v263 = v57;
    v262(v55, v56);
    v58 = a3[7];
    v59 = a3[8];
    v60 = *(void **)((char *)a2 + v58);
    *(void **)((char *)a1 + v58) = v60;
    v61 = (char *)a1 + v59;
    v62 = (char *)a2 + v59;
    v63 = sub_2416B9C10();
    v64 = *(void (**)(char *, char *, void *))(*(_QWORD *)(v63 - 8) + 16);
    v65 = v60;
    v270 = v64;
    __dsta = (void *)v63;
    v64(v61, v62, (void *)v63);
    v66 = a3[9];
    v67 = (char *)a1 + v66;
    v68 = (char *)a2 + v66;
    v69 = *(uint64_t *)((char *)a2 + v66 + 8);
    *(_QWORD *)v67 = *(void **)((char *)a2 + v66);
    *((_QWORD *)v67 + 1) = v69;
    v251 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    v253 = v68;
    v70 = v251[5];
    v256 = v67;
    v71 = &v67[v70];
    v72 = &v68[v70];
    v73 = *(_QWORD *)&v68[v70];
    v74 = *((_QWORD *)v72 + 1);
    *(_QWORD *)v71 = v73;
    *((_QWORD *)v71 + 1) = v74;
    v75 = *((_QWORD *)v72 + 3);
    *((_QWORD *)v71 + 2) = *((_QWORD *)v72 + 2);
    *((_QWORD *)v71 + 3) = v75;
    v76 = *((_QWORD *)v72 + 5);
    *((_QWORD *)v71 + 4) = *((_QWORD *)v72 + 4);
    *((_QWORD *)v71 + 5) = v76;
    v77 = *((_QWORD *)v72 + 7);
    *((_QWORD *)v71 + 6) = *((_QWORD *)v72 + 6);
    *((_QWORD *)v71 + 7) = v77;
    v78 = *((_QWORD *)v72 + 9);
    *((_QWORD *)v71 + 8) = *((_QWORD *)v72 + 8);
    *((_QWORD *)v71 + 9) = v78;
    v79 = *((_QWORD *)v72 + 11);
    *((_QWORD *)v71 + 10) = *((_QWORD *)v72 + 10);
    *((_QWORD *)v71 + 11) = v79;
    v80 = (void *)*((_QWORD *)v72 + 12);
    v248 = (void *)*((_QWORD *)v72 + 13);
    *((_QWORD *)v71 + 12) = v80;
    *((_QWORD *)v71 + 13) = v248;
    v81 = v278[13];
    v249 = &v71[v81];
    v82 = &v72[v81];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v83 = v80;
    v84 = v248;
    if (v277(v82, 1, v276))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v249, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      v86 = v275;
    }
    else
    {
      v86 = v275;
      (*(void (**)(char *, char *, uint64_t))(v275 + 16))(v249, v82, v276);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v275 + 56))(v249, 0, 1, v276);
    }
    v87 = v278[14];
    v88 = &v71[v87];
    v89 = &v72[v87];
    if (v277(&v72[v87], 1, v276))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v88, v89, v276);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v88, 0, 1, v276);
    }
    v91 = v278[15];
    v92 = &v71[v91];
    v93 = &v72[v91];
    v94 = *((_QWORD *)v93 + 1);
    *(_QWORD *)v92 = *(_QWORD *)v93;
    *((_QWORD *)v92 + 1) = v94;
    v95 = v278[16];
    v96 = &v71[v95];
    v97 = &v72[v95];
    v98 = *((_QWORD *)v97 + 1);
    *(_QWORD *)v96 = *(_QWORD *)v97;
    *((_QWORD *)v96 + 1) = v98;
    v71[v278[17]] = v72[v278[17]];
    v71[v278[18]] = v72[v278[18]];
    v99 = v278[19];
    v100 = &v71[v99];
    v101 = (uint64_t *)&v72[v99];
    v102 = *(_QWORD *)&v72[v99 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v102 >> 60 == 15)
    {
      *(_OWORD *)v100 = *(_OWORD *)v101;
    }
    else
    {
      v103 = *v101;
      sub_2415A0A90(*v101, v102);
      *(_QWORD *)v100 = v103;
      *((_QWORD *)v100 + 1) = v102;
    }
    v104 = v278[20];
    v105 = &v71[v104];
    v106 = &v72[v104];
    if (v265(&v72[v104], 1, v260))
    {
      sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v105, v106, v260);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v105, 0, 1, v260);
    }
    v108 = v278[21];
    v109 = *(void **)&v72[v108];
    *(_QWORD *)&v71[v108] = v109;
    v110 = v278[22];
    v111 = &v71[v110];
    v112 = &v72[v110];
    v113 = v109;
    if (v277(v112, 1, v276))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v111, v112, v276);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v111, 0, 1, v276);
    }
    v270(&v256[v251[6]], &v253[v251[6]], __dsta);
    v115 = v251[7];
    v116 = &v256[v115];
    v117 = &v253[v115];
    v270(&v256[v115], &v253[v115], __dsta);
    v118 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    v119 = *(void **)&v117[v118];
    *(_QWORD *)&v116[v118] = v119;
    v120 = v251[8];
    v121 = &v256[v120];
    v122 = &v253[v120];
    v123 = v119;
    v270(v121, v122, __dsta);
    v124 = type metadata accessor for MedicalIDWeightFormatter();
    v125 = *(int *)(v124 + 20);
    v126 = *(void **)&v122[v125];
    *(_QWORD *)&v121[v125] = v126;
    v127 = *(int *)(v124 + 24);
    v252 = *(void **)&v122[v127];
    *(_QWORD *)&v121[v127] = v252;
    v128 = a3[10];
    v129 = (void **)((char *)a1 + v128);
    v130 = (char *)a2 + v128;
    v131 = *(uint64_t *)((char *)a2 + v128 + 8);
    *v129 = *(void **)((char *)a2 + v128);
    v129[1] = v131;
    v133 = *(uint64_t *)((char *)a2 + v128 + 16);
    v132 = *(uint64_t *)((char *)a2 + v128 + 24);
    v129[2] = v133;
    v129[3] = v132;
    v134 = *((_QWORD *)v130 + 5);
    v129[4] = *((_QWORD *)v130 + 4);
    v129[5] = v134;
    v135 = *((_QWORD *)v130 + 7);
    v129[6] = *((_QWORD *)v130 + 6);
    v129[7] = v135;
    v136 = *((_QWORD *)v130 + 9);
    v129[8] = *((_QWORD *)v130 + 8);
    v129[9] = v136;
    v137 = *((_QWORD *)v130 + 11);
    v129[10] = *((_QWORD *)v130 + 10);
    v129[11] = v137;
    v138 = (void *)*((_QWORD *)v130 + 12);
    v254 = (void *)*((_QWORD *)v130 + 13);
    v129[12] = v138;
    v129[13] = v254;
    v139 = v278[13];
    v257 = (char *)v129 + v139;
    v140 = &v130[v139];
    v141 = v126;
    v142 = v252;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v143 = v138;
    v144 = v254;
    if (v277(v140, 1, v276))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v257, v140, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v275 + 16))(v257, v140, v276);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v275 + 56))(v257, 0, 1, v276);
    }
    v146 = v278[14];
    v147 = (char *)v129 + v146;
    v148 = &v130[v146];
    if (v277(&v130[v146], 1, v276))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v275 + 16))(v147, v148, v276);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v275 + 56))(v147, 0, 1, v276);
    }
    v150 = v278[15];
    v151 = (_QWORD *)((char *)v129 + v150);
    v152 = &v130[v150];
    v153 = *((_QWORD *)v152 + 1);
    *v151 = *(_QWORD *)v152;
    v151[1] = v153;
    v154 = v278[16];
    v155 = (_QWORD *)((char *)v129 + v154);
    v156 = &v130[v154];
    v157 = *((_QWORD *)v156 + 1);
    *v155 = *(_QWORD *)v156;
    v155[1] = v157;
    *((_BYTE *)v129 + v278[17]) = v130[v278[17]];
    *((_BYTE *)v129 + v278[18]) = v130[v278[18]];
    v158 = v278[19];
    v159 = (char *)v129 + v158;
    v160 = (uint64_t *)&v130[v158];
    v161 = *(_QWORD *)&v130[v158 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v161 >> 60 == 15)
    {
      *(_OWORD *)v159 = *(_OWORD *)v160;
    }
    else
    {
      v162 = *v160;
      sub_2415A0A90(*v160, v161);
      *(_QWORD *)v159 = v162;
      *((_QWORD *)v159 + 1) = v161;
    }
    v163 = v278[20];
    v164 = (char *)v129 + v163;
    v165 = &v130[v163];
    if (v265(&v130[v163], 1, v260))
    {
      sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
      memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v166 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v259 + 16))(v164, v165, v260);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v259 + 56))(v164, 0, 1, v260);
    }
    v167 = v278[21];
    v168 = *(void **)&v130[v167];
    *(_QWORD *)((char *)v129 + v167) = v168;
    v169 = v278[22];
    v170 = (char *)v129 + v169;
    v171 = &v130[v169];
    v172 = v168;
    if (v277(v171, 1, v276))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v275 + 16))(v170, v171, v276);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v275 + 56))(v170, 0, 1, v276);
    }
    v174 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    ((void (*)(char *, char *, uint64_t))v262)((char *)v129 + v174[5], &v130[v174[5]], v263);
    v270((char *)v129 + v174[6], &v130[v174[6]], __dsta);
    v175 = v174[7];
    v176 = *(void **)&v130[v175];
    *(_QWORD *)((char *)v129 + v175) = v176;
    v177 = v174[8];
    v178 = *(void **)&v130[v177];
    *(_QWORD *)((char *)v129 + v177) = v178;
    v179 = v174[9];
    v180 = (_QWORD *)((char *)v129 + v179);
    v181 = &v130[v179];
    v182 = *((_QWORD *)v181 + 1);
    *v180 = *(_QWORD *)v181;
    v180[1] = v182;
    v183 = a3[11];
    v184 = (char *)a1 + v183;
    v185 = (char *)a2 + v183;
    v186 = *(void **)((char *)a2 + v183);
    *(void **)((char *)a1 + v183) = v186;
    v187 = type metadata accessor for MedicalIDMedicalInfoViewModel();
    v188 = *(int *)(v187 + 20);
    v189 = &v184[v188];
    v190 = &v185[v188];
    v191 = v176;
    v192 = v178;
    swift_bridgeObjectRetain();
    v193 = v186;
    ((void (*)(char *, char *, uint64_t))v262)(v189, v190, v263);
    v270(&v184[*(int *)(v187 + 24)], &v185[*(int *)(v187 + 24)], __dsta);
    v194 = a3[12];
    v195 = (char *)a1 + v194;
    v196 = (char *)a2 + v194;
    v197 = *(uint64_t *)((char *)a2 + v194 + 8);
    *(_QWORD *)v195 = *(void **)((char *)a2 + v194);
    *((_QWORD *)v195 + 1) = v197;
    v258 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
    v198 = v258[5];
    v267 = v195;
    v199 = &v195[v198];
    v274 = v196;
    v200 = &v196[v198];
    v201 = *(_QWORD *)&v196[v198 + 8];
    *v199 = *(_QWORD *)&v196[v198];
    v199[1] = v201;
    v203 = *(_QWORD *)&v196[v198 + 16];
    v202 = *(_QWORD *)&v196[v198 + 24];
    v199[2] = v203;
    v199[3] = v202;
    v204 = *((_QWORD *)v200 + 5);
    v199[4] = *((_QWORD *)v200 + 4);
    v199[5] = v204;
    v205 = *((_QWORD *)v200 + 7);
    v199[6] = *((_QWORD *)v200 + 6);
    v199[7] = v205;
    v206 = *((_QWORD *)v200 + 9);
    v199[8] = *((_QWORD *)v200 + 8);
    v199[9] = v206;
    v207 = *((_QWORD *)v200 + 11);
    v199[10] = *((_QWORD *)v200 + 10);
    v199[11] = v207;
    v209 = (void *)*((_QWORD *)v200 + 12);
    v208 = (void *)*((_QWORD *)v200 + 13);
    v199[12] = v209;
    v199[13] = v208;
    v210 = v278[13];
    v255 = (char *)v199 + v210;
    v250 = &v200[v210];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v211 = v209;
    v212 = v208;
    if (v277(v250, 1, v276))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v255, v250, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
      v214 = v275;
    }
    else
    {
      v214 = v275;
      (*(void (**)(char *, char *, uint64_t))(v275 + 16))(v255, v250, v276);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v275 + 56))(v255, 0, 1, v276);
    }
    v215 = v278[14];
    v216 = (char *)v199 + v215;
    v217 = &v200[v215];
    if (v277(&v200[v215], 1, v276))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v216, v217, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v214 + 16))(v216, v217, v276);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v214 + 56))(v216, 0, 1, v276);
    }
    v219 = v278[15];
    v220 = (_QWORD *)((char *)v199 + v219);
    v221 = &v200[v219];
    v222 = *((_QWORD *)v221 + 1);
    *v220 = *(_QWORD *)v221;
    v220[1] = v222;
    v223 = v278[16];
    v224 = (_QWORD *)((char *)v199 + v223);
    v225 = &v200[v223];
    v226 = *((_QWORD *)v225 + 1);
    *v224 = *(_QWORD *)v225;
    v224[1] = v226;
    *((_BYTE *)v199 + v278[17]) = v200[v278[17]];
    *((_BYTE *)v199 + v278[18]) = v200[v278[18]];
    v227 = v278[19];
    v228 = (char *)v199 + v227;
    v229 = (uint64_t *)&v200[v227];
    v230 = *(_QWORD *)&v200[v227 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v230 >> 60 == 15)
    {
      *(_OWORD *)v228 = *(_OWORD *)v229;
    }
    else
    {
      v231 = *v229;
      sub_2415A0A90(*v229, v230);
      *(_QWORD *)v228 = v231;
      *((_QWORD *)v228 + 1) = v230;
    }
    v232 = v278[20];
    v233 = (char *)v199 + v232;
    v234 = &v200[v232];
    if (v265(&v200[v232], 1, v260))
    {
      sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
      memcpy(v233, v234, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v259 + 16))(v233, v234, v260);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v259 + 56))(v233, 0, 1, v260);
    }
    v236 = v278[21];
    v237 = *(void **)&v200[v236];
    *(_QWORD *)((char *)v199 + v236) = v237;
    v238 = v278[22];
    v239 = (char *)v199 + v238;
    v240 = &v200[v238];
    v241 = v237;
    v23 = a1;
    if (v277(v240, 1, v276))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v239, v240, *(_QWORD *)(*(_QWORD *)(v242 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v214 + 16))(v239, v240, v276);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v214 + 56))(v239, 0, 1, v276);
    }
    ((void (*)(char *, char *, uint64_t))v262)(&v267[v258[6]], &v274[v258[6]], v263);
    v270(&v267[v258[7]], &v274[v258[7]], __dsta);
    *(_QWORD *)&v267[v258[8]] = *(_QWORD *)&v274[v258[8]];
    v243 = v258[9];
    v244 = &v267[v243];
    v245 = &v274[v243];
    swift_retain();
    if (v277(v245, 1, v276))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v244, v245, *(_QWORD *)(*(_QWORD *)(v246 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v214 + 16))(v244, v245, v276);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v214 + 56))(v244, 0, 1, v276);
    }
  }
  return v23;
}

void sub_2415A9F94(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_2416BB434();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t destroy for MedicalIDDataViewModel(id *a1, int *a2)
{
  id *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  id *v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  id *v39;
  uint64_t v40;
  char *v41;
  int *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t result;
  uint64_t v52;
  void (*v53)(char *);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *);
  unsigned int (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;

  v4 = (id *)((char *)a1 + a2[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = (char *)v4 + v5[13];
  v7 = sub_2416B9B50();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  v10 = (char *)v4 + v5[14];
  if (!v9(v10, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)((char *)v4 + v5[19]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_2415A0DAC(*v11, v12);
  v13 = (char *)v4 + v5[20];
  v14 = sub_2416B9A18();
  v52 = *(_QWORD *)(v14 - 8);
  v59 = v14;
  v57 = *(unsigned int (**)(char *, uint64_t))(v52 + 48);
  if (!v57(v13, 1))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v13, v59);

  v15 = (char *)v4 + v5[22];
  if (!v9(v15, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
  v58 = v8;
  v16 = (char *)a1 + a2[6];
  v17 = sub_2416B9C70();
  v53 = *(void (**)(char *))(*(_QWORD *)(v17 - 8) + 8);
  v54 = v17;
  v53(v16);

  v18 = (char *)a1 + a2[8];
  v55 = sub_2416B9C10();
  v56 = *(void (**)(char *))(*(_QWORD *)(v55 - 8) + 8);
  v56(v18);
  v19 = (char *)a1 + a2[9];
  swift_bridgeObjectRelease();
  v20 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v21 = &v19[v20[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v22 = &v21[v5[13]];
  if (!v9(v22, 1, v7))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v22, v7);
  v23 = &v21[v5[14]];
  if (!v9(v23, 1, v7))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v23, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = (uint64_t *)&v21[v5[19]];
  v25 = v24[1];
  if (v25 >> 60 != 15)
    sub_2415A0DAC(*v24, v25);
  v26 = &v21[v5[20]];
  if (!((unsigned int (*)(char *, uint64_t, uint64_t))v57)(v26, 1, v59))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v26, v59);

  v27 = &v21[v5[22]];
  if (!v9(v27, 1, v7))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v27, v7);
  ((void (*)(char *, uint64_t))v56)(&v19[v20[6]], v55);
  v28 = &v19[v20[7]];
  ((void (*)(char *, uint64_t))v56)(v28, v55);

  v29 = &v19[v20[8]];
  ((void (*)(char *, uint64_t))v56)(v29, v55);
  v30 = type metadata accessor for MedicalIDWeightFormatter();

  v31 = (id *)((char *)a1 + a2[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v32 = (char *)v31 + v5[13];
  if (!v9(v32, 1, v7))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v32, v7);
  v33 = (char *)v31 + v5[14];
  if (!v9(v33, 1, v7))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v33, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = (uint64_t *)((char *)v31 + v5[19]);
  v35 = v34[1];
  if (v35 >> 60 != 15)
    sub_2415A0DAC(*v34, v35);
  v36 = (char *)v31 + v5[20];
  if (!((unsigned int (*)(char *, uint64_t, uint64_t))v57)(v36, 1, v59))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v36, v59);

  v37 = (char *)v31 + v5[22];
  if (!v9(v37, 1, v7))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v37, v7);
  v38 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v53)((char *)v31 + v38[5], v54);
  ((void (*)(char *, uint64_t))v56)((char *)v31 + v38[6], v55);

  swift_bridgeObjectRelease();
  v39 = (id *)((char *)a1 + a2[11]);

  v40 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v53)((char *)v39 + *(int *)(v40 + 20), v54);
  ((void (*)(char *, uint64_t))v56)((char *)v39 + *(int *)(v40 + 24), v55);
  v41 = (char *)a1 + a2[12];
  swift_bridgeObjectRelease();
  v42 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v43 = &v41[v42[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v44 = &v43[v5[13]];
  if (!v9(v44, 1, v7))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v44, v7);
  v45 = &v43[v5[14]];
  if (!v9(v45, 1, v7))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v45, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v46 = (uint64_t *)&v43[v5[19]];
  v47 = v46[1];
  if (v47 >> 60 != 15)
    sub_2415A0DAC(*v46, v47);
  v48 = &v43[v5[20]];
  if (!((unsigned int (*)(char *, uint64_t, uint64_t))v57)(v48, 1, v59))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v48, v59);

  v49 = &v43[v5[22]];
  if (!v9(v49, 1, v7))
    (*(void (**)(char *, uint64_t))(v58 + 8))(v49, v7);
  ((void (*)(char *, uint64_t))v53)(&v41[v42[6]], v54);
  ((void (*)(char *, uint64_t))v56)(&v41[v42[7]], v55);
  swift_release();
  v50 = &v41[v42[9]];
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v9)(v50, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v50, v7);
  return result;
}

void **initializeWithCopy for MedicalIDDataViewModel(void **a1, void **a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  id v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  char *v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  char *v136;
  id v137;
  id v138;
  id v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  id v168;
  uint64_t v169;
  int *v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  _QWORD *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  id v187;
  id v188;
  id v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  void *v205;
  uint64_t v206;
  id v207;
  id v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  uint64_t v234;
  char *v235;
  char *v236;
  id v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  void *v244;
  char *__dst;
  char *__dsta;
  int *v247;
  void *v248;
  char *v249;
  void *v250;
  char *v251;
  char *v252;
  char *v253;
  int *v254;
  uint64_t v255;
  uint64_t v256;
  void (*v257)(char *, char *);
  char *v258;
  uint64_t v259;
  void *v260;
  unsigned int (*v261)(char *, uint64_t, uint64_t);
  void *v262;
  void (*v263)(char *, char *, uint64_t);
  void *v264;
  uint64_t v265;
  char *v267;
  char *v269;
  uint64_t v271;
  char *v272;
  unsigned int (*v273)(char *, uint64_t, uint64_t);
  uint64_t v274;
  int *v275;

  v262 = *a2;
  *a1 = *a2;
  v3 = a3[5];
  v4 = (void **)((char *)a1 + v3);
  v5 = (char *)a2 + v3;
  v6 = *(uint64_t *)((char *)a2 + v3 + 8);
  *v4 = *(void **)((char *)a2 + v3);
  v4[1] = v6;
  v8 = *(uint64_t *)((char *)a2 + v3 + 16);
  v7 = *(uint64_t *)((char *)a2 + v3 + 24);
  v4[2] = v8;
  v4[3] = v7;
  v9 = *((_QWORD *)v5 + 5);
  v4[4] = *((_QWORD *)v5 + 4);
  v4[5] = v9;
  v10 = *((_QWORD *)v5 + 7);
  v4[6] = *((_QWORD *)v5 + 6);
  v4[7] = v10;
  v11 = *((_QWORD *)v5 + 9);
  v4[8] = *((_QWORD *)v5 + 8);
  v4[9] = v11;
  v12 = *((_QWORD *)v5 + 11);
  v4[10] = *((_QWORD *)v5 + 10);
  v4[11] = v12;
  v260 = (void *)*((_QWORD *)v5 + 12);
  v264 = (void *)*((_QWORD *)v5 + 13);
  v4[12] = v260;
  v4[13] = v264;
  v275 = (int *)type metadata accessor for MedicalIDData();
  v13 = v275[13];
  v272 = (char *)v4 + v13;
  v258 = &v5[v13];
  v14 = sub_2416B9B50();
  v271 = *(_QWORD *)(v14 - 8);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v271 + 48);
  v16 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = v260;
  v18 = v264;
  if (v15(v258, 1, v14))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v272, v258, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    v20 = v271;
  }
  else
  {
    v20 = v271;
    (*(void (**)(char *, char *, uint64_t))(v271 + 16))(v272, v258, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v271 + 56))(v272, 0, 1, v14);
  }
  v21 = v275[14];
  v22 = (char *)v4 + v21;
  v23 = &v5[v21];
  v274 = v14;
  if (v15(&v5[v21], 1, v14))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v22, v23, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, v14);
  }
  v25 = v275[15];
  v26 = (_QWORD *)((char *)v4 + v25);
  v27 = &v5[v25];
  v28 = *((_QWORD *)v27 + 1);
  *v26 = *(_QWORD *)v27;
  v26[1] = v28;
  v29 = v275[16];
  v30 = (_QWORD *)((char *)v4 + v29);
  v31 = &v5[v29];
  v32 = *((_QWORD *)v31 + 1);
  *v30 = *(_QWORD *)v31;
  v30[1] = v32;
  *((_BYTE *)v4 + v275[17]) = v5[v275[17]];
  *((_BYTE *)v4 + v275[18]) = v5[v275[18]];
  v33 = v275[19];
  v34 = (char *)v4 + v33;
  v35 = (uint64_t *)&v5[v33];
  v36 = *(_QWORD *)&v5[v33 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v36 >> 60 == 15)
  {
    *(_OWORD *)v34 = *(_OWORD *)v35;
  }
  else
  {
    v37 = *v35;
    sub_2415A0A90(*v35, v36);
    *(_QWORD *)v34 = v37;
    *((_QWORD *)v34 + 1) = v36;
  }
  v38 = v275[20];
  v39 = (char *)v4 + v38;
  v40 = &v5[v38];
  v41 = sub_2416B9A18();
  v42 = *(_QWORD *)(v41 - 8);
  v261 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  if (v261(v40, 1, v41))
  {
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  v44 = v275[21];
  v45 = *(void **)&v5[v44];
  *(_QWORD *)((char *)v4 + v44) = v45;
  v46 = v275[22];
  v47 = (char *)v4 + v46;
  v48 = &v5[v46];
  v49 = v45;
  v273 = v15;
  v255 = v42;
  v256 = v41;
  if (v15(v48, 1, v274))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v271 + 16))(v47, v48, v274);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v271 + 56))(v47, 0, 1, v274);
  }
  v51 = a3[6];
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  v54 = sub_2416B9C70();
  v257 = *(void (**)(char *, char *))(*(_QWORD *)(v54 - 8) + 16);
  v259 = v54;
  v257(v52, v53);
  v55 = a3[7];
  v56 = a3[8];
  v57 = *(void **)((char *)a2 + v55);
  *(void **)((char *)a1 + v55) = v57;
  v58 = (char *)a1 + v56;
  v59 = (char *)a2 + v56;
  v60 = sub_2416B9C10();
  v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
  v62 = v57;
  v263 = v61;
  v265 = v60;
  v61(v58, v59, v60);
  v63 = a3[9];
  v64 = (char *)a1 + v63;
  v65 = (char *)a2 + v63;
  v66 = *(uint64_t *)((char *)a2 + v63 + 8);
  *(_QWORD *)v64 = *(void **)((char *)a2 + v63);
  *((_QWORD *)v64 + 1) = v66;
  v247 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v249 = v65;
  v67 = v247[5];
  v252 = v64;
  v68 = &v64[v67];
  v69 = &v65[v67];
  v70 = *((_QWORD *)v69 + 1);
  *(_QWORD *)v68 = *(_QWORD *)v69;
  *((_QWORD *)v68 + 1) = v70;
  v71 = *((_QWORD *)v69 + 3);
  *((_QWORD *)v68 + 2) = *((_QWORD *)v69 + 2);
  *((_QWORD *)v68 + 3) = v71;
  v72 = *((_QWORD *)v69 + 5);
  *((_QWORD *)v68 + 4) = *((_QWORD *)v69 + 4);
  *((_QWORD *)v68 + 5) = v72;
  v73 = *((_QWORD *)v69 + 7);
  *((_QWORD *)v68 + 6) = *((_QWORD *)v69 + 6);
  *((_QWORD *)v68 + 7) = v73;
  v74 = *((_QWORD *)v69 + 9);
  *((_QWORD *)v68 + 8) = *((_QWORD *)v69 + 8);
  *((_QWORD *)v68 + 9) = v74;
  v75 = *((_QWORD *)v69 + 11);
  *((_QWORD *)v68 + 10) = *((_QWORD *)v69 + 10);
  *((_QWORD *)v68 + 11) = v75;
  v76 = (void *)*((_QWORD *)v69 + 12);
  v244 = (void *)*((_QWORD *)v69 + 13);
  *((_QWORD *)v68 + 12) = v76;
  *((_QWORD *)v68 + 13) = v244;
  v77 = v275[13];
  __dst = &v68[v77];
  v78 = &v69[v77];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79 = v76;
  v80 = v244;
  if (v15(v78, 1, v274))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(__dst, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    v82 = v271;
  }
  else
  {
    v82 = v271;
    (*(void (**)(char *, char *, uint64_t))(v271 + 16))(__dst, v78, v274);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v271 + 56))(__dst, 0, 1, v274);
  }
  v83 = v275[14];
  v84 = &v68[v83];
  v85 = &v69[v83];
  if (v15(&v69[v83], 1, v274))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v84, v85, v274);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v84, 0, 1, v274);
  }
  v87 = v275[15];
  v88 = &v68[v87];
  v89 = &v69[v87];
  v90 = *((_QWORD *)v89 + 1);
  *(_QWORD *)v88 = *(_QWORD *)v89;
  *((_QWORD *)v88 + 1) = v90;
  v91 = v275[16];
  v92 = &v68[v91];
  v93 = &v69[v91];
  v94 = *((_QWORD *)v93 + 1);
  *(_QWORD *)v92 = *(_QWORD *)v93;
  *((_QWORD *)v92 + 1) = v94;
  v68[v275[17]] = v69[v275[17]];
  v68[v275[18]] = v69[v275[18]];
  v95 = v275[19];
  v96 = &v68[v95];
  v97 = (uint64_t *)&v69[v95];
  v98 = *(_QWORD *)&v69[v95 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v98 >> 60 == 15)
  {
    *(_OWORD *)v96 = *(_OWORD *)v97;
  }
  else
  {
    v99 = *v97;
    sub_2415A0A90(*v97, v98);
    *(_QWORD *)v96 = v99;
    *((_QWORD *)v96 + 1) = v98;
  }
  v100 = v275[20];
  v101 = &v68[v100];
  v102 = &v69[v100];
  if (v261(&v69[v100], 1, v256))
  {
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v255 + 16))(v101, v102, v256);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v255 + 56))(v101, 0, 1, v256);
  }
  v104 = v275[21];
  v105 = *(void **)&v69[v104];
  *(_QWORD *)&v68[v104] = v105;
  v106 = v275[22];
  v107 = &v68[v106];
  v108 = &v69[v106];
  v109 = v105;
  if (v15(v108, 1, v274))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v107, v108, v274);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v107, 0, 1, v274);
  }
  v61(&v252[v247[6]], &v249[v247[6]], v265);
  v111 = v247[7];
  v112 = &v252[v111];
  v113 = &v249[v111];
  v61(&v252[v111], &v249[v111], v265);
  v114 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v115 = *(void **)&v113[v114];
  *(_QWORD *)&v112[v114] = v115;
  v116 = v247[8];
  v117 = &v252[v116];
  v118 = &v249[v116];
  v119 = v115;
  v61(v117, v118, v265);
  v120 = type metadata accessor for MedicalIDWeightFormatter();
  v121 = *(int *)(v120 + 20);
  v122 = *(void **)&v118[v121];
  *(_QWORD *)&v117[v121] = v122;
  v123 = *(int *)(v120 + 24);
  v248 = *(void **)&v118[v123];
  *(_QWORD *)&v117[v123] = v248;
  v124 = a3[10];
  v125 = (void **)((char *)a1 + v124);
  v126 = (char *)a2 + v124;
  v127 = *(uint64_t *)((char *)a2 + v124 + 8);
  *v125 = *(void **)((char *)a2 + v124);
  v125[1] = v127;
  v129 = *(uint64_t *)((char *)a2 + v124 + 16);
  v128 = *(uint64_t *)((char *)a2 + v124 + 24);
  v125[2] = v129;
  v125[3] = v128;
  v130 = *((_QWORD *)v126 + 5);
  v125[4] = *((_QWORD *)v126 + 4);
  v125[5] = v130;
  v131 = *((_QWORD *)v126 + 7);
  v125[6] = *((_QWORD *)v126 + 6);
  v125[7] = v131;
  v132 = *((_QWORD *)v126 + 9);
  v125[8] = *((_QWORD *)v126 + 8);
  v125[9] = v132;
  v133 = *((_QWORD *)v126 + 11);
  v125[10] = *((_QWORD *)v126 + 10);
  v125[11] = v133;
  v134 = (void *)*((_QWORD *)v126 + 12);
  v250 = (void *)*((_QWORD *)v126 + 13);
  v125[12] = v134;
  v125[13] = v250;
  v135 = v275[13];
  v253 = (char *)v125 + v135;
  v136 = &v126[v135];
  v137 = v122;
  v138 = v248;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v139 = v134;
  v140 = v250;
  if (v15(v136, 1, v274))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v253, v136, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v271 + 16))(v253, v136, v274);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v271 + 56))(v253, 0, 1, v274);
  }
  v142 = v275[14];
  v143 = (char *)v125 + v142;
  v144 = &v126[v142];
  if (v273(&v126[v142], 1, v274))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v271 + 16))(v143, v144, v274);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v271 + 56))(v143, 0, 1, v274);
  }
  v146 = v275[15];
  v147 = (_QWORD *)((char *)v125 + v146);
  v148 = &v126[v146];
  v149 = *((_QWORD *)v148 + 1);
  *v147 = *(_QWORD *)v148;
  v147[1] = v149;
  v150 = v275[16];
  v151 = (_QWORD *)((char *)v125 + v150);
  v152 = &v126[v150];
  v153 = *((_QWORD *)v152 + 1);
  *v151 = *(_QWORD *)v152;
  v151[1] = v153;
  *((_BYTE *)v125 + v275[17]) = v126[v275[17]];
  *((_BYTE *)v125 + v275[18]) = v126[v275[18]];
  v154 = v275[19];
  v155 = (char *)v125 + v154;
  v156 = (uint64_t *)&v126[v154];
  v157 = *(_QWORD *)&v126[v154 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v157 >> 60 == 15)
  {
    *(_OWORD *)v155 = *(_OWORD *)v156;
  }
  else
  {
    v158 = *v156;
    sub_2415A0A90(*v156, v157);
    *(_QWORD *)v155 = v158;
    *((_QWORD *)v155 + 1) = v157;
  }
  v159 = v275[20];
  v160 = (char *)v125 + v159;
  v161 = &v126[v159];
  if (v261(&v126[v159], 1, v256))
  {
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v255 + 16))(v160, v161, v256);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v255 + 56))(v160, 0, 1, v256);
  }
  v163 = v275[21];
  v164 = *(void **)&v126[v163];
  *(_QWORD *)((char *)v125 + v163) = v164;
  v165 = v275[22];
  v166 = (char *)v125 + v165;
  v167 = &v126[v165];
  v168 = v164;
  if (v273(v167, 1, v274))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v271 + 16))(v166, v167, v274);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v271 + 56))(v166, 0, 1, v274);
  }
  v170 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v257)((char *)v125 + v170[5], &v126[v170[5]], v259);
  v263((char *)v125 + v170[6], &v126[v170[6]], v265);
  v171 = v170[7];
  v172 = *(void **)&v126[v171];
  *(_QWORD *)((char *)v125 + v171) = v172;
  v173 = v170[8];
  v174 = *(void **)&v126[v173];
  *(_QWORD *)((char *)v125 + v173) = v174;
  v175 = v170[9];
  v176 = (_QWORD *)((char *)v125 + v175);
  v177 = &v126[v175];
  v178 = *((_QWORD *)v177 + 1);
  *v176 = *(_QWORD *)v177;
  v176[1] = v178;
  v179 = a3[11];
  v180 = (char *)a1 + v179;
  v181 = (char *)a2 + v179;
  v182 = *(void **)((char *)a2 + v179);
  *(void **)((char *)a1 + v179) = v182;
  v183 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v184 = *(int *)(v183 + 20);
  v185 = &v180[v184];
  v186 = &v181[v184];
  v187 = v172;
  v188 = v174;
  swift_bridgeObjectRetain();
  v189 = v182;
  ((void (*)(char *, char *, uint64_t))v257)(v185, v186, v259);
  v263(&v180[*(int *)(v183 + 24)], &v181[*(int *)(v183 + 24)], v265);
  v190 = a3[12];
  v191 = (char *)a1 + v190;
  v192 = (char *)a2 + v190;
  v193 = *(uint64_t *)((char *)a2 + v190 + 8);
  *(_QWORD *)v191 = *(void **)((char *)a2 + v190);
  *((_QWORD *)v191 + 1) = v193;
  v254 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v194 = v254[5];
  v267 = v191;
  v269 = v192;
  v195 = &v191[v194];
  v196 = &v192[v194];
  v197 = *(_QWORD *)&v192[v194 + 8];
  *v195 = *(_QWORD *)&v192[v194];
  v195[1] = v197;
  v199 = *(_QWORD *)&v192[v194 + 16];
  v198 = *(_QWORD *)&v192[v194 + 24];
  v195[2] = v199;
  v195[3] = v198;
  v200 = *((_QWORD *)v196 + 5);
  v195[4] = *((_QWORD *)v196 + 4);
  v195[5] = v200;
  v201 = *((_QWORD *)v196 + 7);
  v195[6] = *((_QWORD *)v196 + 6);
  v195[7] = v201;
  v202 = *((_QWORD *)v196 + 9);
  v195[8] = *((_QWORD *)v196 + 8);
  v195[9] = v202;
  v203 = *((_QWORD *)v196 + 11);
  v195[10] = *((_QWORD *)v196 + 10);
  v195[11] = v203;
  v205 = (void *)*((_QWORD *)v196 + 12);
  v204 = (void *)*((_QWORD *)v196 + 13);
  v195[12] = v205;
  v195[13] = v204;
  v206 = v275[13];
  v251 = (char *)v195 + v206;
  __dsta = &v196[v206];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v207 = v205;
  v208 = v204;
  if (v273(__dsta, 1, v274))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v251, __dsta, *(_QWORD *)(*(_QWORD *)(v209 - 8) + 64));
    v210 = v271;
  }
  else
  {
    v210 = v271;
    (*(void (**)(char *, char *, uint64_t))(v271 + 16))(v251, __dsta, v274);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v271 + 56))(v251, 0, 1, v274);
  }
  v211 = v275[14];
  v212 = (char *)v195 + v211;
  v213 = &v196[v211];
  if (v273(&v196[v211], 1, v274))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v210 + 16))(v212, v213, v274);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v210 + 56))(v212, 0, 1, v274);
  }
  v215 = v275[15];
  v216 = (_QWORD *)((char *)v195 + v215);
  v217 = &v196[v215];
  v218 = *((_QWORD *)v217 + 1);
  *v216 = *(_QWORD *)v217;
  v216[1] = v218;
  v219 = v275[16];
  v220 = (_QWORD *)((char *)v195 + v219);
  v221 = &v196[v219];
  v222 = *((_QWORD *)v221 + 1);
  *v220 = *(_QWORD *)v221;
  v220[1] = v222;
  *((_BYTE *)v195 + v275[17]) = v196[v275[17]];
  *((_BYTE *)v195 + v275[18]) = v196[v275[18]];
  v223 = v275[19];
  v224 = (char *)v195 + v223;
  v225 = (uint64_t *)&v196[v223];
  v226 = *(_QWORD *)&v196[v223 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v226 >> 60 == 15)
  {
    *(_OWORD *)v224 = *(_OWORD *)v225;
  }
  else
  {
    v227 = *v225;
    sub_2415A0A90(*v225, v226);
    *(_QWORD *)v224 = v227;
    *((_QWORD *)v224 + 1) = v226;
  }
  v228 = v275[20];
  v229 = (char *)v195 + v228;
  v230 = &v196[v228];
  if (v261(&v196[v228], 1, v256))
  {
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v229, v230, *(_QWORD *)(*(_QWORD *)(v231 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v255 + 16))(v229, v230, v256);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v255 + 56))(v229, 0, 1, v256);
  }
  v232 = v275[21];
  v233 = *(void **)&v196[v232];
  *(_QWORD *)((char *)v195 + v232) = v233;
  v234 = v275[22];
  v235 = (char *)v195 + v234;
  v236 = &v196[v234];
  v237 = v233;
  if (v273(v236, 1, v274))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v235, v236, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v210 + 16))(v235, v236, v274);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v210 + 56))(v235, 0, 1, v274);
  }
  ((void (*)(char *, char *, uint64_t))v257)(&v267[v254[6]], &v269[v254[6]], v259);
  v263(&v267[v254[7]], &v269[v254[7]], v265);
  *(_QWORD *)&v267[v254[8]] = *(_QWORD *)&v269[v254[8]];
  v239 = v254[9];
  v240 = &v267[v239];
  v241 = &v269[v239];
  swift_retain();
  if (v273(v241, 1, v274))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v242 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v210 + 16))(v240, v241, v274);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v210 + 56))(v240, 0, 1, v274);
  }
  return a1;
}

void **assignWithCopy for MedicalIDDataViewModel(void **a1, void **a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  id v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  id v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  void *v84;
  void *v85;
  id v86;
  void *v87;
  void *v88;
  id v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  id v124;
  uint64_t v125;
  char *v126;
  char *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  void *v134;
  void *v135;
  id v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  id v144;
  uint64_t v145;
  void *v146;
  void *v147;
  id v148;
  uint64_t v149;
  char *v150;
  _QWORD *v151;
  void *v152;
  void *v153;
  id v154;
  void *v155;
  void *v156;
  id v157;
  uint64_t v158;
  char *v159;
  char *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  _QWORD *v171;
  uint64_t v172;
  char *v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  void *v191;
  id v192;
  uint64_t v193;
  char *v194;
  char *v195;
  int v196;
  int v197;
  uint64_t v198;
  int *v199;
  uint64_t v200;
  void *v201;
  void *v202;
  id v203;
  uint64_t v204;
  void *v205;
  void *v206;
  id v207;
  uint64_t v208;
  char *v209;
  _QWORD *v210;
  uint64_t v211;
  void **v212;
  char *v213;
  void *v214;
  void *v215;
  id v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  char *v222;
  char *v223;
  void *v224;
  void *v225;
  id v226;
  void *v227;
  void *v228;
  id v229;
  uint64_t v230;
  char *v231;
  char *v232;
  int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  int v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  int v259;
  int v260;
  uint64_t (*v261)(char *, uint64_t, uint64_t);
  uint64_t v262;
  uint64_t v263;
  void *v264;
  void *v265;
  id v266;
  uint64_t v267;
  char *v268;
  char *v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  int v275;
  int v276;
  void **v277;
  uint64_t v278;
  _QWORD *v280;
  int *v281;
  char *v282;
  void (*v283)(char *, char *);
  uint64_t v284;
  uint64_t v285;
  void (*v286)(char *, char *);
  uint64_t v287;
  uint64_t (*v288)(char *, uint64_t, uint64_t);
  int *v289;
  int *v290;
  void **v291;
  char *v292;
  void **v293;
  uint64_t v294;
  uint64_t (*v295)(char *, uint64_t, uint64_t);
  uint64_t v296;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v289 = a3;
  v291 = a2;
  v9 = a3[5];
  v293 = a1;
  v10 = (char *)a1 + v9;
  v11 = (void **)((char *)a2 + v9);
  *(_QWORD *)v10 = *(void **)((char *)a2 + v9);
  *((_QWORD *)v10 + 1) = *(void **)((char *)a2 + v9 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 2) = v11[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 3) = v11[3];
  *((_QWORD *)v10 + 4) = v11[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 5) = v11[5];
  *((_QWORD *)v10 + 6) = v11[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 7) = v11[7];
  *((_QWORD *)v10 + 8) = v11[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 9) = v11[9];
  *((_QWORD *)v10 + 10) = v11[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 11) = v11[11];
  v12 = (void *)*((_QWORD *)v10 + 12);
  v13 = (void *)v11[12];
  *((_QWORD *)v10 + 12) = v13;
  v14 = v13;

  v15 = (void *)*((_QWORD *)v10 + 13);
  v16 = (void *)v11[13];
  *((_QWORD *)v10 + 13) = v16;
  v17 = v16;

  v18 = (int *)type metadata accessor for MedicalIDData();
  v19 = v18[13];
  v20 = &v10[v19];
  v21 = (char *)v11 + v19;
  v22 = sub_2416B9B50();
  v296 = *(_QWORD *)(v22 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v296 + 48);
  v24 = v23(v20, 1, v22);
  v25 = v23(v21, 1, v22);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v296 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v296 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v296 + 8))(v20, v22);
LABEL_6:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v296 + 24))(v20, v21, v22);
LABEL_7:
  v27 = v18[14];
  v28 = &v10[v27];
  v29 = (char *)v11 + v27;
  v30 = v23(&v10[v27], 1, v22);
  v31 = v23(v29, 1, v22);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v296 + 16))(v28, v29, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v296 + 56))(v28, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v296 + 8))(v28, v22);
LABEL_12:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v296 + 24))(v28, v29, v22);
LABEL_13:
  v33 = v18[15];
  v34 = &v10[v33];
  v35 = (_QWORD *)((char *)v11 + v33);
  *(_QWORD *)v34 = *v35;
  *((_QWORD *)v34 + 1) = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36 = v18[16];
  v37 = &v10[v36];
  v38 = (_QWORD *)((char *)v11 + v36);
  *(_QWORD *)v37 = *v38;
  *((_QWORD *)v37 + 1) = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10[v18[17]] = *((_BYTE *)v11 + v18[17]);
  v10[v18[18]] = *((_BYTE *)v11 + v18[18]);
  v39 = v18[19];
  v40 = (uint64_t *)&v10[v39];
  v41 = (_QWORD *)((char *)v11 + v39);
  v42 = *(_QWORD *)((char *)v11 + v39 + 8);
  if (*(_QWORD *)&v10[v39 + 8] >> 60 == 15)
  {
    if (v42 >> 60 != 15)
    {
      v43 = *v41;
      sub_2415A0A90(v43, v42);
      *v40 = v43;
      v40[1] = v42;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v42 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v40);
LABEL_18:
    *(_OWORD *)v40 = *(_OWORD *)v41;
    goto LABEL_20;
  }
  v44 = *v41;
  sub_2415A0A90(v44, v42);
  v45 = *v40;
  v46 = v40[1];
  *v40 = v44;
  v40[1] = v42;
  sub_2415A0DAC(v45, v46);
LABEL_20:
  v47 = v18[20];
  v48 = &v10[v47];
  v49 = (char *)v11 + v47;
  v50 = sub_2416B9A18();
  v285 = *(_QWORD *)(v50 - 8);
  v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v285 + 48);
  v52 = v51(v48, 1, v50);
  v294 = v50;
  v288 = v51;
  v53 = v51(v49, 1, v50);
  v54 = v23;
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v48, v49, v50);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v285 + 56))(v48, 0, 1, v50);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v285 + 8))(v48, v50);
LABEL_25:
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v285 + 24))(v48, v49, v50);
LABEL_26:
  v56 = v18[21];
  v57 = *(void **)&v10[v56];
  v58 = *(void **)((char *)v11 + v56);
  *(_QWORD *)&v10[v56] = v58;
  v59 = v58;

  v60 = v18[22];
  v61 = &v10[v60];
  v62 = (char *)v11 + v60;
  v63 = v23(&v10[v60], 1, v22);
  v64 = v23(v62, 1, v22);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v296 + 16))(v61, v62, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v296 + 56))(v61, 0, 1, v22);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v296 + 8))(v61, v22);
LABEL_31:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v296 + 24))(v61, v62, v22);
LABEL_32:
  v66 = v289[6];
  v67 = (char *)v293 + v66;
  v68 = (char *)v291 + v66;
  v69 = sub_2416B9C70();
  v283 = *(void (**)(char *, char *))(*(_QWORD *)(v69 - 8) + 24);
  v284 = v69;
  v283(v67, v68);
  v70 = v289[7];
  v71 = *(void **)((char *)v291 + v70);
  v72 = *(void **)((char *)v293 + v70);
  *(void **)((char *)v293 + v70) = v71;
  v73 = v71;

  v74 = v289[8];
  v75 = (char *)v293 + v74;
  v76 = (char *)v291 + v74;
  v77 = sub_2416B9C10();
  v286 = *(void (**)(char *, char *))(*(_QWORD *)(v77 - 8) + 24);
  v287 = v77;
  v286(v75, v76);
  v78 = v289[9];
  v79 = (void **)((char *)v293 + v78);
  v80 = (char *)v291 + v78;
  *v79 = *(void **)((char *)v291 + v78);
  v79[1] = *(void **)((char *)v291 + v78 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v280 = v79;
  v281 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v81 = v281[5];
  v82 = (char *)v79 + v81;
  v282 = v80;
  v83 = &v80[v81];
  *(_QWORD *)v82 = *(_QWORD *)v83;
  *((_QWORD *)v82 + 1) = *((_QWORD *)v83 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v82 + 2) = *((_QWORD *)v83 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v82 + 3) = *((_QWORD *)v83 + 3);
  *((_QWORD *)v82 + 4) = *((_QWORD *)v83 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v82 + 5) = *((_QWORD *)v83 + 5);
  *((_QWORD *)v82 + 6) = *((_QWORD *)v83 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v82 + 7) = *((_QWORD *)v83 + 7);
  *((_QWORD *)v82 + 8) = *((_QWORD *)v83 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v82 + 9) = *((_QWORD *)v83 + 9);
  *((_QWORD *)v82 + 10) = *((_QWORD *)v83 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v82 + 11) = *((_QWORD *)v83 + 11);
  v84 = (void *)*((_QWORD *)v82 + 12);
  v85 = (void *)*((_QWORD *)v83 + 12);
  *((_QWORD *)v82 + 12) = v85;
  v86 = v85;

  v87 = (void *)*((_QWORD *)v82 + 13);
  v88 = (void *)*((_QWORD *)v83 + 13);
  *((_QWORD *)v82 + 13) = v88;
  v89 = v88;

  v90 = v18[13];
  v91 = &v82[v90];
  v92 = &v83[v90];
  LODWORD(v87) = v54(&v82[v90], 1, v22);
  v93 = v54(v92, 1, v22);
  if ((_DWORD)v87)
  {
    if (!v93)
    {
      (*(void (**)(char *, char *, uint64_t))(v296 + 16))(v91, v92, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v296 + 56))(v91, 0, 1, v22);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v93)
  {
    (*(void (**)(char *, uint64_t))(v296 + 8))(v91, v22);
LABEL_37:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v296 + 24))(v91, v92, v22);
LABEL_38:
  v95 = v18[14];
  v96 = &v82[v95];
  v97 = &v83[v95];
  v98 = v54(&v82[v95], 1, v22);
  v99 = v54(v97, 1, v22);
  if (v98)
  {
    if (!v99)
    {
      (*(void (**)(char *, char *, uint64_t))(v296 + 16))(v96, v97, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v296 + 56))(v96, 0, 1, v22);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v99)
  {
    (*(void (**)(char *, uint64_t))(v296 + 8))(v96, v22);
LABEL_43:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v296 + 24))(v96, v97, v22);
LABEL_44:
  v101 = v18[15];
  v102 = &v82[v101];
  v103 = &v83[v101];
  *(_QWORD *)v102 = *(_QWORD *)v103;
  *((_QWORD *)v102 + 1) = *((_QWORD *)v103 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v104 = v18[16];
  v105 = &v82[v104];
  v106 = &v83[v104];
  *(_QWORD *)v105 = *(_QWORD *)v106;
  *((_QWORD *)v105 + 1) = *((_QWORD *)v106 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v82[v18[17]] = v83[v18[17]];
  v82[v18[18]] = v83[v18[18]];
  v107 = v18[19];
  v108 = (uint64_t *)&v82[v107];
  v109 = (uint64_t *)&v83[v107];
  v110 = *(_QWORD *)&v83[v107 + 8];
  v295 = v54;
  if (*(_QWORD *)&v82[v107 + 8] >> 60 == 15)
  {
    if (v110 >> 60 != 15)
    {
      v111 = *v109;
      sub_2415A0A90(v111, v110);
      *v108 = v111;
      v108[1] = v110;
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  if (v110 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v108);
LABEL_49:
    *(_OWORD *)v108 = *(_OWORD *)v109;
    goto LABEL_51;
  }
  v112 = *v109;
  sub_2415A0A90(v112, v110);
  v113 = *v108;
  v114 = v108[1];
  *v108 = v112;
  v108[1] = v110;
  sub_2415A0DAC(v113, v114);
LABEL_51:
  v115 = v18[20];
  v116 = &v82[v115];
  v117 = &v83[v115];
  v118 = v288(&v82[v115], 1, v294);
  v119 = v288(v117, 1, v294);
  if (v118)
  {
    if (!v119)
    {
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v116, v117, v294);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v285 + 56))(v116, 0, 1, v294);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  if (v119)
  {
    (*(void (**)(char *, uint64_t))(v285 + 8))(v116, v294);
LABEL_56:
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(char *, char *, uint64_t))(v285 + 24))(v116, v117, v294);
LABEL_57:
  v121 = v18[21];
  v122 = *(void **)&v82[v121];
  v123 = *(void **)&v83[v121];
  *(_QWORD *)&v82[v121] = v123;
  v124 = v123;

  v125 = v18[22];
  v126 = &v82[v125];
  v127 = &v83[v125];
  LODWORD(v122) = v54(&v82[v125], 1, v22);
  v128 = v54(v127, 1, v22);
  if ((_DWORD)v122)
  {
    if (!v128)
    {
      (*(void (**)(char *, char *, uint64_t))(v296 + 16))(v126, v127, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v296 + 56))(v126, 0, 1, v22);
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (v128)
  {
    (*(void (**)(char *, uint64_t))(v296 + 8))(v126, v22);
LABEL_62:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v296 + 24))(v126, v127, v22);
LABEL_63:
  ((void (*)(char *, char *, uint64_t))v286)((char *)v280 + v281[6], &v282[v281[6]], v287);
  v130 = v281[7];
  v131 = (char *)v280 + v130;
  v132 = &v282[v130];
  ((void (*)(char *, char *, uint64_t))v286)((char *)v280 + v130, &v282[v130], v287);
  v133 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v134 = *(void **)&v132[v133];
  v135 = *(void **)&v131[v133];
  *(_QWORD *)&v131[v133] = v134;
  v136 = v134;

  v137 = v281[8];
  v138 = (char *)v280 + v137;
  v139 = &v282[v137];
  ((void (*)(char *, char *, uint64_t))v286)((char *)v280 + v137, &v282[v137], v287);
  v140 = type metadata accessor for MedicalIDWeightFormatter();
  v141 = *(int *)(v140 + 20);
  v142 = *(void **)&v139[v141];
  v143 = *(void **)&v138[v141];
  *(_QWORD *)&v138[v141] = v142;
  v144 = v142;

  v145 = *(int *)(v140 + 24);
  v146 = *(void **)&v139[v145];
  v147 = *(void **)&v138[v145];
  *(_QWORD *)&v138[v145] = v146;
  v148 = v146;

  v149 = v289[10];
  v150 = (char *)v293 + v149;
  v151 = (void **)((char *)v291 + v149);
  *(_QWORD *)v150 = *(void **)((char *)v291 + v149);
  *((_QWORD *)v150 + 1) = *(void **)((char *)v291 + v149 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v150 + 2) = v151[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v150 + 3) = v151[3];
  *((_QWORD *)v150 + 4) = v151[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v150 + 5) = v151[5];
  *((_QWORD *)v150 + 6) = v151[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v150 + 7) = v151[7];
  *((_QWORD *)v150 + 8) = v151[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v150 + 9) = v151[9];
  *((_QWORD *)v150 + 10) = v151[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v150 + 11) = v151[11];
  v152 = (void *)*((_QWORD *)v150 + 12);
  v153 = (void *)v151[12];
  *((_QWORD *)v150 + 12) = v153;
  v154 = v153;

  v155 = (void *)*((_QWORD *)v150 + 13);
  v156 = (void *)v151[13];
  *((_QWORD *)v150 + 13) = v156;
  v157 = v156;

  v158 = v18[13];
  v159 = &v150[v158];
  v160 = (char *)v151 + v158;
  LODWORD(v138) = v54(&v150[v158], 1, v22);
  v161 = v54(v160, 1, v22);
  if ((_DWORD)v138)
  {
    if (!v161)
    {
      (*(void (**)(char *, char *, uint64_t))(v296 + 16))(v159, v160, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v296 + 56))(v159, 0, 1, v22);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v161)
  {
    (*(void (**)(char *, uint64_t))(v296 + 8))(v159, v22);
LABEL_68:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_69;
  }
  (*(void (**)(char *, char *, uint64_t))(v296 + 24))(v159, v160, v22);
LABEL_69:
  v163 = v18[14];
  v164 = &v150[v163];
  v165 = (char *)v151 + v163;
  v166 = v54(&v150[v163], 1, v22);
  v167 = v54(v165, 1, v22);
  if (v166)
  {
    if (!v167)
    {
      (*(void (**)(char *, char *, uint64_t))(v296 + 16))(v164, v165, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v296 + 56))(v164, 0, 1, v22);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v167)
  {
    (*(void (**)(char *, uint64_t))(v296 + 8))(v164, v22);
LABEL_74:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(char *, char *, uint64_t))(v296 + 24))(v164, v165, v22);
LABEL_75:
  v169 = v18[15];
  v170 = &v150[v169];
  v171 = (_QWORD *)((char *)v151 + v169);
  *(_QWORD *)v170 = *v171;
  *((_QWORD *)v170 + 1) = v171[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v172 = v18[16];
  v173 = &v150[v172];
  v174 = (_QWORD *)((char *)v151 + v172);
  *(_QWORD *)v173 = *v174;
  *((_QWORD *)v173 + 1) = v174[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v150[v18[17]] = *((_BYTE *)v151 + v18[17]);
  v150[v18[18]] = *((_BYTE *)v151 + v18[18]);
  v175 = v18[19];
  v176 = (uint64_t *)&v150[v175];
  v177 = (_QWORD *)((char *)v151 + v175);
  v178 = *(_QWORD *)((char *)v151 + v175 + 8);
  if (*(_QWORD *)&v150[v175 + 8] >> 60 == 15)
  {
    if (v178 >> 60 != 15)
    {
      v179 = *v177;
      sub_2415A0A90(*v177, v178);
      *v176 = v179;
      v176[1] = v178;
      goto LABEL_82;
    }
    goto LABEL_80;
  }
  if (v178 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v176);
LABEL_80:
    *(_OWORD *)v176 = *(_OWORD *)v177;
    goto LABEL_82;
  }
  v180 = *v177;
  sub_2415A0A90(*v177, v178);
  v181 = *v176;
  v182 = v176[1];
  *v176 = v180;
  v176[1] = v178;
  sub_2415A0DAC(v181, v182);
LABEL_82:
  v183 = v18[20];
  v184 = &v150[v183];
  v185 = (char *)v151 + v183;
  v186 = v288(&v150[v183], 1, v294);
  v187 = v288(v185, 1, v294);
  if (v186)
  {
    if (!v187)
    {
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v184, v185, v294);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v285 + 56))(v184, 0, 1, v294);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v187)
  {
    (*(void (**)(char *, uint64_t))(v285 + 8))(v184, v294);
LABEL_87:
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v184, v185, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v285 + 24))(v184, v185, v294);
LABEL_88:
  v189 = v18[21];
  v190 = *(void **)&v150[v189];
  v191 = *(void **)((char *)v151 + v189);
  *(_QWORD *)&v150[v189] = v191;
  v192 = v191;

  v193 = v18[22];
  v194 = &v150[v193];
  v195 = (char *)v151 + v193;
  v196 = v54(&v150[v193], 1, v22);
  v197 = v54(v195, 1, v22);
  if (v196)
  {
    if (!v197)
    {
      (*(void (**)(char *, char *, uint64_t))(v296 + 16))(v194, v195, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v296 + 56))(v194, 0, 1, v22);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v197)
  {
    (*(void (**)(char *, uint64_t))(v296 + 8))(v194, v22);
LABEL_93:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v296 + 24))(v194, v195, v22);
LABEL_94:
  v199 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v283)(&v150[v199[5]], (char *)v151 + v199[5], v284);
  ((void (*)(char *, char *, uint64_t))v286)(&v150[v199[6]], (char *)v151 + v199[6], v287);
  v200 = v199[7];
  v201 = *(void **)&v150[v200];
  v202 = *(void **)((char *)v151 + v200);
  *(_QWORD *)&v150[v200] = v202;
  v203 = v202;

  v204 = v199[8];
  v205 = *(void **)((char *)v151 + v204);
  v206 = *(void **)&v150[v204];
  *(_QWORD *)&v150[v204] = v205;
  v207 = v205;

  v208 = v199[9];
  v209 = &v150[v208];
  v210 = (_QWORD *)((char *)v151 + v208);
  *(_QWORD *)v209 = *v210;
  *((_QWORD *)v209 + 1) = v210[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v211 = v289[11];
  v212 = (void **)((char *)v293 + v211);
  v213 = (char *)v291 + v211;
  v214 = *(void **)((char *)v291 + v211);
  v215 = *v212;
  *v212 = v214;
  v216 = v214;

  v217 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v283)((char *)v212 + *(int *)(v217 + 20), &v213[*(int *)(v217 + 20)], v284);
  ((void (*)(char *, char *, uint64_t))v286)((char *)v212 + *(int *)(v217 + 24), &v213[*(int *)(v217 + 24)], v287);
  v218 = v289[12];
  v219 = (char *)v293 + v218;
  v220 = (char *)v291 + v218;
  *(_QWORD *)v219 = *(void **)((char *)v291 + v218);
  *((_QWORD *)v219 + 1) = *(void **)((char *)v291 + v218 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v290 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v292 = v220;
  v221 = v290[5];
  v222 = &v219[v221];
  v223 = &v220[v221];
  *(_QWORD *)v222 = *(_QWORD *)&v220[v221];
  *((_QWORD *)v222 + 1) = *(_QWORD *)&v220[v221 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v222 + 2) = *((_QWORD *)v223 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v222 + 3) = *((_QWORD *)v223 + 3);
  *((_QWORD *)v222 + 4) = *((_QWORD *)v223 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v222 + 5) = *((_QWORD *)v223 + 5);
  *((_QWORD *)v222 + 6) = *((_QWORD *)v223 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v222 + 7) = *((_QWORD *)v223 + 7);
  *((_QWORD *)v222 + 8) = *((_QWORD *)v223 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v222 + 9) = *((_QWORD *)v223 + 9);
  *((_QWORD *)v222 + 10) = *((_QWORD *)v223 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v222 + 11) = *((_QWORD *)v223 + 11);
  v224 = (void *)*((_QWORD *)v222 + 12);
  v225 = (void *)*((_QWORD *)v223 + 12);
  *((_QWORD *)v222 + 12) = v225;
  v226 = v225;

  v227 = (void *)*((_QWORD *)v222 + 13);
  v228 = (void *)*((_QWORD *)v223 + 13);
  *((_QWORD *)v222 + 13) = v228;
  v229 = v228;

  v230 = v18[13];
  v231 = &v222[v230];
  v232 = &v223[v230];
  v233 = v295(&v222[v230], 1, v22);
  v234 = v295(v232, 1, v22);
  if (v233)
  {
    if (!v234)
    {
      (*(void (**)(char *, char *, uint64_t))(v296 + 16))(v231, v232, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v296 + 56))(v231, 0, 1, v22);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v234)
  {
    (*(void (**)(char *, uint64_t))(v296 + 8))(v231, v22);
LABEL_99:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v231, v232, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v296 + 24))(v231, v232, v22);
LABEL_100:
  v236 = v18[14];
  v237 = &v222[v236];
  v238 = &v223[v236];
  v239 = v295(&v222[v236], 1, v22);
  v240 = v295(v238, 1, v22);
  if (v239)
  {
    if (!v240)
    {
      (*(void (**)(char *, char *, uint64_t))(v296 + 16))(v237, v238, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v296 + 56))(v237, 0, 1, v22);
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  if (v240)
  {
    (*(void (**)(char *, uint64_t))(v296 + 8))(v237, v22);
LABEL_105:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v237, v238, *(_QWORD *)(*(_QWORD *)(v241 - 8) + 64));
    goto LABEL_106;
  }
  (*(void (**)(char *, char *, uint64_t))(v296 + 24))(v237, v238, v22);
LABEL_106:
  v242 = v18[15];
  v243 = &v222[v242];
  v244 = &v223[v242];
  *(_QWORD *)v243 = *(_QWORD *)v244;
  *((_QWORD *)v243 + 1) = *((_QWORD *)v244 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v245 = v18[16];
  v246 = &v222[v245];
  v247 = &v223[v245];
  *(_QWORD *)v246 = *(_QWORD *)v247;
  *((_QWORD *)v246 + 1) = *((_QWORD *)v247 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v222[v18[17]] = v223[v18[17]];
  v222[v18[18]] = v223[v18[18]];
  v248 = v18[19];
  v249 = (uint64_t *)&v222[v248];
  v250 = (uint64_t *)&v223[v248];
  v251 = *(_QWORD *)&v223[v248 + 8];
  if (*(_QWORD *)&v222[v248 + 8] >> 60 == 15)
  {
    if (v251 >> 60 != 15)
    {
      v252 = *v250;
      sub_2415A0A90(v252, v251);
      *v249 = v252;
      v249[1] = v251;
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  if (v251 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v249);
LABEL_111:
    *(_OWORD *)v249 = *(_OWORD *)v250;
    goto LABEL_113;
  }
  v253 = *v250;
  sub_2415A0A90(v253, v251);
  v254 = *v249;
  v255 = v249[1];
  *v249 = v253;
  v249[1] = v251;
  sub_2415A0DAC(v254, v255);
LABEL_113:
  v256 = v18[20];
  v257 = &v222[v256];
  v258 = &v223[v256];
  v259 = v288(&v222[v256], 1, v294);
  v260 = v288(v258, 1, v294);
  if (v259)
  {
    v261 = v295;
    if (!v260)
    {
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v257, v258, v294);
      v261 = v295;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v285 + 56))(v257, 0, 1, v294);
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  v261 = v295;
  if (v260)
  {
    (*(void (**)(char *, uint64_t))(v285 + 8))(v257, v294);
LABEL_118:
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v257, v258, *(_QWORD *)(*(_QWORD *)(v262 - 8) + 64));
    goto LABEL_119;
  }
  (*(void (**)(char *, char *, uint64_t))(v285 + 24))(v257, v258, v294);
LABEL_119:
  v263 = v18[21];
  v264 = *(void **)&v222[v263];
  v265 = *(void **)&v223[v263];
  *(_QWORD *)&v222[v263] = v265;
  v266 = v265;

  v267 = v18[22];
  v268 = &v222[v267];
  v269 = &v223[v267];
  LODWORD(v264) = v261(&v222[v267], 1, v22);
  v270 = v261(v269, 1, v22);
  if ((_DWORD)v264)
  {
    if (!v270)
    {
      (*(void (**)(char *, char *, uint64_t))(v296 + 16))(v268, v269, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v296 + 56))(v268, 0, 1, v22);
      goto LABEL_125;
    }
    goto LABEL_124;
  }
  if (v270)
  {
    (*(void (**)(char *, uint64_t))(v296 + 8))(v268, v22);
LABEL_124:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v268, v269, *(_QWORD *)(*(_QWORD *)(v271 - 8) + 64));
    goto LABEL_125;
  }
  (*(void (**)(char *, char *, uint64_t))(v296 + 24))(v268, v269, v22);
LABEL_125:
  ((void (*)(char *, char *, uint64_t))v283)(&v219[v290[6]], &v292[v290[6]], v284);
  ((void (*)(char *, char *, uint64_t))v286)(&v219[v290[7]], &v292[v290[7]], v287);
  *(_QWORD *)&v219[v290[8]] = *(_QWORD *)&v292[v290[8]];
  swift_retain();
  swift_release();
  v272 = v290[9];
  v273 = &v219[v272];
  v274 = &v292[v272];
  v275 = v261(&v219[v272], 1, v22);
  v276 = v261(v274, 1, v22);
  if (!v275)
  {
    v277 = v293;
    if (!v276)
    {
      (*(void (**)(char *, char *, uint64_t))(v296 + 24))(v273, v274, v22);
      return v277;
    }
    (*(void (**)(char *, uint64_t))(v296 + 8))(v273, v22);
    goto LABEL_130;
  }
  v277 = v293;
  if (v276)
  {
LABEL_130:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v273, v274, *(_QWORD *)(*(_QWORD *)(v278 - 8) + 64));
    return v277;
  }
  (*(void (**)(char *, char *, uint64_t))(v296 + 16))(v273, v274, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v296 + 56))(v273, 0, 1, v22);
  return v277;
}

_QWORD *initializeWithTake for MedicalIDDataViewModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  int *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  int *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  void (*v120)(char *, char *);
  uint64_t v121;
  _QWORD *v122;
  void (*v123)(char *, char *);
  uint64_t v124;
  unsigned int (*v125)(char *, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  unsigned int (*v130)(char *, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = a3[5];
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_OWORD *)v5 = *(_OWORD *)((char *)a2 + v4);
  *((_QWORD *)v5 + 2) = *(_QWORD *)((char *)a2 + v4 + 16);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)((char *)a2 + v4 + 24);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)((char *)a2 + v4 + 40);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)((char *)a2 + v4 + 56);
  *(_OWORD *)(v5 + 72) = *(_OWORD *)((char *)a2 + v4 + 72);
  *((_QWORD *)v5 + 11) = *(_QWORD *)((char *)a2 + v4 + 88);
  *((_OWORD *)v5 + 6) = *(_OWORD *)((char *)a2 + v4 + 96);
  v7 = (int *)type metadata accessor for MedicalIDData();
  v8 = v7[13];
  v9 = &v5[v8];
  v10 = &v6[v8];
  v11 = sub_2416B9B50();
  v12 = *(_QWORD *)(v11 - 8);
  v130 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v130(v10, 1, v11))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = v7[14];
  v15 = &v5[v14];
  v16 = &v6[v14];
  if (v130(&v6[v14], 1, v11))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v16, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  *(_OWORD *)&v5[v7[15]] = *(_OWORD *)&v6[v7[15]];
  *(_OWORD *)&v5[v7[16]] = *(_OWORD *)&v6[v7[16]];
  v5[v7[17]] = v6[v7[17]];
  v5[v7[18]] = v6[v7[18]];
  *(_OWORD *)&v5[v7[19]] = *(_OWORD *)&v6[v7[19]];
  v18 = v7[20];
  v19 = &v5[v18];
  v20 = &v6[v18];
  v21 = sub_2416B9A18();
  v22 = *(_QWORD *)(v21 - 8);
  v125 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v125(v20, 1, v21))
  {
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(_QWORD *)&v5[v7[21]] = *(_QWORD *)&v6[v7[21]];
  v24 = v7[22];
  v25 = &v5[v24];
  v26 = &v6[v24];
  v128 = v21;
  v129 = v12;
  if (v130(&v6[v24], 1, v11))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v25, v26, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v25, 0, 1, v11);
  }
  v28 = a3[6];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = sub_2416B9C70();
  v120 = *(void (**)(char *, char *))(*(_QWORD *)(v31 - 8) + 32);
  v121 = v31;
  v120(v29, v30);
  v32 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = sub_2416B9C10();
  v123 = *(void (**)(char *, char *))(*(_QWORD *)(v35 - 8) + 32);
  v124 = v35;
  v123(v33, v34);
  v36 = a3[9];
  v122 = a1;
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  *(_OWORD *)((char *)a1 + v36) = *(_OWORD *)((char *)a2 + v36);
  v39 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v40 = v39[5];
  v41 = &v37[v40];
  v42 = &v38[v40];
  *(_OWORD *)v41 = *(_OWORD *)&v38[v40];
  *((_QWORD *)v41 + 2) = *(_QWORD *)&v38[v40 + 16];
  *(_OWORD *)(v41 + 24) = *(_OWORD *)&v38[v40 + 24];
  *(_OWORD *)(v41 + 40) = *(_OWORD *)&v38[v40 + 40];
  *(_OWORD *)(v41 + 56) = *(_OWORD *)&v38[v40 + 56];
  *(_OWORD *)(v41 + 72) = *(_OWORD *)&v38[v40 + 72];
  *((_QWORD *)v41 + 11) = *(_QWORD *)&v38[v40 + 88];
  *((_OWORD *)v41 + 6) = *(_OWORD *)&v38[v40 + 96];
  v43 = v7[13];
  v44 = &v41[v43];
  v45 = &v42[v43];
  if (v130(&v42[v43], 1, v11))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v44, v45, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v44, 0, 1, v11);
  }
  v47 = v7[14];
  v48 = &v41[v47];
  v49 = &v42[v47];
  if (v130(&v42[v47], 1, v11))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v48, v49, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v48, 0, 1, v11);
  }
  *(_OWORD *)&v41[v7[15]] = *(_OWORD *)&v42[v7[15]];
  *(_OWORD *)&v41[v7[16]] = *(_OWORD *)&v42[v7[16]];
  v41[v7[17]] = v42[v7[17]];
  v41[v7[18]] = v42[v7[18]];
  *(_OWORD *)&v41[v7[19]] = *(_OWORD *)&v42[v7[19]];
  v51 = v7[20];
  v52 = &v41[v51];
  v53 = &v42[v51];
  if (v125(&v42[v51], 1, v128))
  {
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v52, v53, v128);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v52, 0, 1, v128);
  }
  *(_QWORD *)&v41[v7[21]] = *(_QWORD *)&v42[v7[21]];
  v55 = v7[22];
  v56 = &v41[v55];
  v57 = &v42[v55];
  if (v130(&v42[v55], 1, v11))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v56, v57, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v56, 0, 1, v11);
  }
  ((void (*)(char *, char *, uint64_t))v123)(&v37[v39[6]], &v38[v39[6]], v124);
  v59 = v39[7];
  v60 = &v37[v59];
  v61 = &v38[v59];
  ((void (*)(char *, char *, uint64_t))v123)(&v37[v59], &v38[v59], v124);
  v62 = type metadata accessor for MedicalIDHeightFormatter();
  *(_QWORD *)&v60[*(int *)(v62 + 20)] = *(_QWORD *)&v61[*(int *)(v62 + 20)];
  v63 = v39[8];
  v64 = &v37[v63];
  v65 = &v38[v63];
  ((void (*)(char *, char *, uint64_t))v123)(&v37[v63], &v38[v63], v124);
  v66 = type metadata accessor for MedicalIDWeightFormatter();
  *(_QWORD *)&v64[*(int *)(v66 + 20)] = *(_QWORD *)&v65[*(int *)(v66 + 20)];
  *(_QWORD *)&v64[*(int *)(v66 + 24)] = *(_QWORD *)&v65[*(int *)(v66 + 24)];
  v67 = a3[10];
  v68 = (char *)v122 + v67;
  v69 = (char *)a2 + v67;
  *(_OWORD *)v68 = *(_OWORD *)((char *)a2 + v67);
  *((_QWORD *)v68 + 2) = *(_QWORD *)((char *)a2 + v67 + 16);
  *(_OWORD *)(v68 + 24) = *(_OWORD *)((char *)a2 + v67 + 24);
  *(_OWORD *)(v68 + 40) = *(_OWORD *)((char *)a2 + v67 + 40);
  *(_OWORD *)(v68 + 56) = *(_OWORD *)((char *)a2 + v67 + 56);
  *(_OWORD *)(v68 + 72) = *(_OWORD *)((char *)a2 + v67 + 72);
  *((_QWORD *)v68 + 11) = *(_QWORD *)((char *)a2 + v67 + 88);
  *((_OWORD *)v68 + 6) = *(_OWORD *)((char *)a2 + v67 + 96);
  v70 = v7[13];
  v71 = &v68[v70];
  v72 = &v69[v70];
  if (v130(&v69[v70], 1, v11))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    v74 = v129;
  }
  else
  {
    v74 = v129;
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v71, v72, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v71, 0, 1, v11);
  }
  v75 = v7[14];
  v76 = &v68[v75];
  v77 = &v69[v75];
  if (v130(&v69[v75], 1, v11))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v76, v77, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v76, 0, 1, v11);
  }
  *(_OWORD *)&v68[v7[15]] = *(_OWORD *)&v69[v7[15]];
  *(_OWORD *)&v68[v7[16]] = *(_OWORD *)&v69[v7[16]];
  v68[v7[17]] = v69[v7[17]];
  v68[v7[18]] = v69[v7[18]];
  *(_OWORD *)&v68[v7[19]] = *(_OWORD *)&v69[v7[19]];
  v79 = v7[20];
  v80 = &v68[v79];
  v81 = &v69[v79];
  if (v125(&v69[v79], 1, v128))
  {
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v80, v81, v128);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v80, 0, 1, v128);
  }
  *(_QWORD *)&v68[v7[21]] = *(_QWORD *)&v69[v7[21]];
  v83 = v7[22];
  v84 = &v68[v83];
  v85 = &v69[v83];
  if (v130(&v69[v83], 1, v11))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v84, v85, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v84, 0, 1, v11);
  }
  v87 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v120)(&v68[v87[5]], &v69[v87[5]], v121);
  ((void (*)(char *, char *, uint64_t))v123)(&v68[v87[6]], &v69[v87[6]], v124);
  *(_QWORD *)&v68[v87[7]] = *(_QWORD *)&v69[v87[7]];
  *(_QWORD *)&v68[v87[8]] = *(_QWORD *)&v69[v87[8]];
  *(_OWORD *)&v68[v87[9]] = *(_OWORD *)&v69[v87[9]];
  v88 = a3[11];
  v89 = (char *)v122 + v88;
  v90 = (char *)a2 + v88;
  *(_QWORD *)((char *)v122 + v88) = *(_QWORD *)((char *)a2 + v88);
  v91 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v120)(&v89[*(int *)(v91 + 20)], &v90[*(int *)(v91 + 20)], v121);
  ((void (*)(char *, char *, uint64_t))v123)(&v89[*(int *)(v91 + 24)], &v90[*(int *)(v91 + 24)], v124);
  v92 = a3[12];
  v93 = (char *)v122 + v92;
  v94 = (char *)a2 + v92;
  *(_OWORD *)((char *)v122 + v92) = *(_OWORD *)((char *)a2 + v92);
  v95 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v96 = v95[5];
  v97 = &v93[v96];
  v98 = &v94[v96];
  *(_OWORD *)v97 = *(_OWORD *)&v94[v96];
  *((_QWORD *)v97 + 2) = *(_QWORD *)&v94[v96 + 16];
  *(_OWORD *)(v97 + 24) = *(_OWORD *)&v94[v96 + 24];
  *(_OWORD *)(v97 + 40) = *(_OWORD *)&v94[v96 + 40];
  *(_OWORD *)(v97 + 56) = *(_OWORD *)&v94[v96 + 56];
  *(_OWORD *)(v97 + 72) = *(_OWORD *)&v94[v96 + 72];
  *((_QWORD *)v97 + 11) = *(_QWORD *)&v94[v96 + 88];
  *((_OWORD *)v97 + 6) = *(_OWORD *)&v94[v96 + 96];
  v99 = v7[13];
  v100 = &v97[v99];
  v101 = &v98[v99];
  if (v130(&v98[v99], 1, v11))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v100, v101, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v100, 0, 1, v11);
  }
  v103 = v7[14];
  v104 = &v97[v103];
  v105 = &v98[v103];
  if (v130(&v98[v103], 1, v11))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v104, v105, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v104, 0, 1, v11);
  }
  *(_OWORD *)&v97[v7[15]] = *(_OWORD *)&v98[v7[15]];
  *(_OWORD *)&v97[v7[16]] = *(_OWORD *)&v98[v7[16]];
  v97[v7[17]] = v98[v7[17]];
  v97[v7[18]] = v98[v7[18]];
  *(_OWORD *)&v97[v7[19]] = *(_OWORD *)&v98[v7[19]];
  v107 = v7[20];
  v108 = &v97[v107];
  v109 = &v98[v107];
  if (v125(&v98[v107], 1, v128))
  {
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v108, v109, v128);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v108, 0, 1, v128);
  }
  *(_QWORD *)&v97[v7[21]] = *(_QWORD *)&v98[v7[21]];
  v111 = v7[22];
  v112 = &v97[v111];
  v113 = &v98[v111];
  if (v130(v113, 1, v11))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v112, v113, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v112, 0, 1, v11);
  }
  ((void (*)(char *, char *, uint64_t))v120)(&v93[v95[6]], &v94[v95[6]], v121);
  ((void (*)(char *, char *, uint64_t))v123)(&v93[v95[7]], &v94[v95[7]], v124);
  *(_QWORD *)&v93[v95[8]] = *(_QWORD *)&v94[v95[8]];
  v115 = v95[9];
  v116 = &v93[v115];
  v117 = &v94[v115];
  if (v130(&v94[v115], 1, v11))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v116, v117, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v116, 0, 1, v11);
  }
  return v122;
}

void **assignWithTake for MedicalIDDataViewModel(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  int v54;
  int v55;
  uint64_t (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  char *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  int v195;
  int v196;
  uint64_t v197;
  int *v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  char *v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  int v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  int v259;
  int v260;
  uint64_t (*v261)(char *, uint64_t, uint64_t);
  uint64_t v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  char *v266;
  char *v267;
  int v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  int v274;
  int v275;
  void **v276;
  uint64_t v277;
  int *v279;
  char *v280;
  void (*v281)(char *, char *);
  uint64_t v282;
  uint64_t v283;
  void (*v284)(char *, char *);
  uint64_t v285;
  uint64_t (*v286)(char *, uint64_t, uint64_t);
  int *v287;
  int *v288;
  void **v289;
  char *v290;
  void **v291;
  uint64_t (*v292)(char *, uint64_t, uint64_t);
  uint64_t v293;
  uint64_t v294;

  v6 = *a1;
  *a1 = *a2;

  v287 = a3;
  v289 = a2;
  v7 = a3[5];
  v291 = a1;
  v8 = (char *)a1 + v7;
  v9 = (void **)((char *)a2 + v7);
  v10 = *(uint64_t *)((char *)a2 + v7 + 8);
  *(_QWORD *)v8 = *(void **)((char *)a2 + v7);
  *((_QWORD *)v8 + 1) = v10;
  swift_bridgeObjectRelease();
  *((_QWORD *)v8 + 2) = v9[2];
  swift_bridgeObjectRelease();
  v11 = v9[4];
  *((_QWORD *)v8 + 3) = v9[3];
  *((_QWORD *)v8 + 4) = v11;
  swift_bridgeObjectRelease();
  v12 = v9[6];
  *((_QWORD *)v8 + 5) = v9[5];
  *((_QWORD *)v8 + 6) = v12;
  swift_bridgeObjectRelease();
  v13 = v9[8];
  *((_QWORD *)v8 + 7) = v9[7];
  *((_QWORD *)v8 + 8) = v13;
  swift_bridgeObjectRelease();
  v14 = v9[10];
  *((_QWORD *)v8 + 9) = v9[9];
  *((_QWORD *)v8 + 10) = v14;
  swift_bridgeObjectRelease();
  v15 = (void *)*((_QWORD *)v8 + 12);
  v16 = v9[12];
  *((_QWORD *)v8 + 11) = v9[11];
  *((_QWORD *)v8 + 12) = v16;

  v17 = (void *)*((_QWORD *)v8 + 13);
  *((_QWORD *)v8 + 13) = v9[13];

  v18 = (int *)type metadata accessor for MedicalIDData();
  v19 = v18[13];
  v20 = &v8[v19];
  v21 = (char *)v9 + v19;
  v22 = sub_2416B9B50();
  v294 = *(_QWORD *)(v22 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v294 + 48);
  v24 = v23(v20, 1, v22);
  v25 = v23(v21, 1, v22);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v294 + 8))(v20, v22);
LABEL_6:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v294 + 40))(v20, v21, v22);
LABEL_7:
  v27 = v18[14];
  v28 = &v8[v27];
  v29 = (char *)v9 + v27;
  v30 = v23(&v8[v27], 1, v22);
  v31 = v23(v29, 1, v22);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v28, v29, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v28, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v294 + 8))(v28, v22);
LABEL_12:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v294 + 40))(v28, v29, v22);
LABEL_13:
  v33 = v18[15];
  v34 = &v8[v33];
  v35 = (_QWORD *)((char *)v9 + v33);
  v37 = *v35;
  v36 = v35[1];
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v38 = v18[16];
  v39 = &v8[v38];
  v40 = (_QWORD *)((char *)v9 + v38);
  v42 = *v40;
  v41 = v40[1];
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v8[v18[17]] = *((_BYTE *)v9 + v18[17]);
  v8[v18[18]] = *((_BYTE *)v9 + v18[18]);
  v43 = v18[19];
  v44 = (uint64_t)&v8[v43];
  v45 = (char *)v9 + v43;
  v46 = *(_QWORD *)&v8[v43 + 8];
  if (v46 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v44 = *(_OWORD *)v45;
    goto LABEL_18;
  }
  v47 = *((_QWORD *)v45 + 1);
  if (v47 >> 60 == 15)
  {
    sub_2415A1B38(v44);
    goto LABEL_16;
  }
  v48 = *(_QWORD *)v44;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_QWORD *)(v44 + 8) = v47;
  sub_2415A0DAC(v48, v46);
LABEL_18:
  v49 = v18[20];
  v50 = &v8[v49];
  v51 = (char *)v9 + v49;
  v52 = sub_2416B9A18();
  v283 = *(_QWORD *)(v52 - 8);
  v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v283 + 48);
  v54 = v53(v50, 1, v52);
  v293 = v52;
  v286 = v53;
  v55 = v53(v51, 1, v52);
  v56 = v23;
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(v283 + 32))(v50, v51, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v283 + 56))(v50, 0, 1, v52);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v283 + 8))(v50, v52);
LABEL_23:
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v283 + 40))(v50, v51, v52);
LABEL_24:
  v58 = v18[21];
  v59 = *(void **)&v8[v58];
  *(_QWORD *)&v8[v58] = *(_QWORD *)((char *)v9 + v58);

  v60 = v18[22];
  v61 = &v8[v60];
  v62 = (char *)v9 + v60;
  v63 = v23(&v8[v60], 1, v22);
  v64 = v23(v62, 1, v22);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v61, v62, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v61, 0, 1, v22);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v294 + 8))(v61, v22);
LABEL_29:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v294 + 40))(v61, v62, v22);
LABEL_30:
  v66 = v287[6];
  v67 = (char *)v291 + v66;
  v68 = (char *)v289 + v66;
  v69 = sub_2416B9C70();
  v281 = *(void (**)(char *, char *))(*(_QWORD *)(v69 - 8) + 40);
  v282 = v69;
  v281(v67, v68);
  v70 = v287[7];
  v71 = *(void **)((char *)v291 + v70);
  *(void **)((char *)v291 + v70) = *(void **)((char *)v289 + v70);

  v72 = v287[8];
  v73 = (char *)v291 + v72;
  v74 = (char *)v289 + v72;
  v75 = sub_2416B9C10();
  v284 = *(void (**)(char *, char *))(*(_QWORD *)(v75 - 8) + 40);
  v285 = v75;
  v284(v73, v74);
  v76 = v287[9];
  v77 = (void **)((char *)v291 + v76);
  v78 = (char *)v289 + v76;
  v79 = *(uint64_t *)((char *)v289 + v76 + 8);
  *v77 = *(void **)((char *)v289 + v76);
  v77[1] = v79;
  swift_bridgeObjectRelease();
  v279 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v280 = v78;
  v80 = v279[5];
  v81 = (char *)v77 + v80;
  v82 = &v78[v80];
  v83 = *((_QWORD *)v82 + 1);
  *(_QWORD *)v81 = *(_QWORD *)v82;
  *((_QWORD *)v81 + 1) = v83;
  swift_bridgeObjectRelease();
  *((_QWORD *)v81 + 2) = *((_QWORD *)v82 + 2);
  swift_bridgeObjectRelease();
  v84 = *((_QWORD *)v82 + 4);
  *((_QWORD *)v81 + 3) = *((_QWORD *)v82 + 3);
  *((_QWORD *)v81 + 4) = v84;
  swift_bridgeObjectRelease();
  v85 = *((_QWORD *)v82 + 6);
  *((_QWORD *)v81 + 5) = *((_QWORD *)v82 + 5);
  *((_QWORD *)v81 + 6) = v85;
  swift_bridgeObjectRelease();
  v86 = *((_QWORD *)v82 + 8);
  *((_QWORD *)v81 + 7) = *((_QWORD *)v82 + 7);
  *((_QWORD *)v81 + 8) = v86;
  swift_bridgeObjectRelease();
  v87 = *((_QWORD *)v82 + 10);
  *((_QWORD *)v81 + 9) = *((_QWORD *)v82 + 9);
  *((_QWORD *)v81 + 10) = v87;
  swift_bridgeObjectRelease();
  v88 = (void *)*((_QWORD *)v81 + 12);
  v89 = *((_QWORD *)v82 + 12);
  *((_QWORD *)v81 + 11) = *((_QWORD *)v82 + 11);
  *((_QWORD *)v81 + 12) = v89;

  v90 = (void *)*((_QWORD *)v81 + 13);
  *((_QWORD *)v81 + 13) = *((_QWORD *)v82 + 13);

  v91 = v18[13];
  v92 = &v81[v91];
  v93 = &v82[v91];
  v94 = v56(&v81[v91], 1, v22);
  v95 = v56(v93, 1, v22);
  if (v94)
  {
    if (!v95)
    {
      (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v92, v93, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v92, 0, 1, v22);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v95)
  {
    (*(void (**)(char *, uint64_t))(v294 + 8))(v92, v22);
LABEL_35:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v294 + 40))(v92, v93, v22);
LABEL_36:
  v97 = v18[14];
  v98 = &v81[v97];
  v99 = &v82[v97];
  v100 = v56(&v81[v97], 1, v22);
  v101 = v56(v99, 1, v22);
  if (v100)
  {
    if (!v101)
    {
      (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v98, v99, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v98, 0, 1, v22);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v101)
  {
    (*(void (**)(char *, uint64_t))(v294 + 8))(v98, v22);
LABEL_41:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v294 + 40))(v98, v99, v22);
LABEL_42:
  v103 = v18[15];
  v104 = &v81[v103];
  v105 = (uint64_t *)&v82[v103];
  v107 = *v105;
  v106 = v105[1];
  *(_QWORD *)v104 = v107;
  *((_QWORD *)v104 + 1) = v106;
  swift_bridgeObjectRelease();
  v108 = v18[16];
  v109 = &v81[v108];
  v110 = (uint64_t *)&v82[v108];
  v112 = *v110;
  v111 = v110[1];
  *(_QWORD *)v109 = v112;
  *((_QWORD *)v109 + 1) = v111;
  swift_bridgeObjectRelease();
  v81[v18[17]] = v82[v18[17]];
  v81[v18[18]] = v82[v18[18]];
  v113 = v18[19];
  v114 = (uint64_t)&v81[v113];
  v115 = &v82[v113];
  v116 = *(_QWORD *)&v81[v113 + 8];
  v292 = v56;
  if (v116 >> 60 == 15)
  {
LABEL_45:
    *(_OWORD *)v114 = *(_OWORD *)v115;
    goto LABEL_47;
  }
  v117 = *((_QWORD *)v115 + 1);
  if (v117 >> 60 == 15)
  {
    sub_2415A1B38(v114);
    goto LABEL_45;
  }
  v118 = *(_QWORD *)v114;
  *(_QWORD *)v114 = *(_QWORD *)v115;
  *(_QWORD *)(v114 + 8) = v117;
  sub_2415A0DAC(v118, v116);
LABEL_47:
  v119 = v18[20];
  v120 = &v81[v119];
  v121 = &v82[v119];
  v122 = v286(&v81[v119], 1, v293);
  v123 = v286(v121, 1, v293);
  if (v122)
  {
    if (!v123)
    {
      (*(void (**)(char *, char *, uint64_t))(v283 + 32))(v120, v121, v293);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v283 + 56))(v120, 0, 1, v293);
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (v123)
  {
    (*(void (**)(char *, uint64_t))(v283 + 8))(v120, v293);
LABEL_52:
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    goto LABEL_53;
  }
  (*(void (**)(char *, char *, uint64_t))(v283 + 40))(v120, v121, v293);
LABEL_53:
  v125 = v18[21];
  v126 = *(void **)&v81[v125];
  *(_QWORD *)&v81[v125] = *(_QWORD *)&v82[v125];

  v127 = v18[22];
  v128 = &v81[v127];
  v129 = &v82[v127];
  v130 = v56(&v81[v127], 1, v22);
  v131 = v56(v129, 1, v22);
  if (v130)
  {
    if (!v131)
    {
      (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v128, v129, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v128, 0, 1, v22);
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  if (v131)
  {
    (*(void (**)(char *, uint64_t))(v294 + 8))(v128, v22);
LABEL_58:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
    goto LABEL_59;
  }
  (*(void (**)(char *, char *, uint64_t))(v294 + 40))(v128, v129, v22);
LABEL_59:
  ((void (*)(char *, char *, uint64_t))v284)((char *)v77 + v279[6], &v280[v279[6]], v285);
  v133 = v279[7];
  v134 = (char *)v77 + v133;
  v135 = &v280[v133];
  ((void (*)(char *, char *, uint64_t))v284)((char *)v77 + v133, &v280[v133], v285);
  v136 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v137 = *(void **)&v134[v136];
  *(_QWORD *)&v134[v136] = *(_QWORD *)&v135[v136];

  v138 = v279[8];
  v139 = (char *)v77 + v138;
  v140 = &v280[v138];
  ((void (*)(char *, char *, uint64_t))v284)((char *)v77 + v138, &v280[v138], v285);
  v141 = type metadata accessor for MedicalIDWeightFormatter();
  v142 = *(int *)(v141 + 20);
  v143 = *(void **)&v139[v142];
  *(_QWORD *)&v139[v142] = *(_QWORD *)&v140[v142];

  v144 = *(int *)(v141 + 24);
  v145 = *(void **)&v139[v144];
  *(_QWORD *)&v139[v144] = *(_QWORD *)&v140[v144];

  v146 = v287[10];
  v147 = (char *)v291 + v146;
  v148 = (void **)((char *)v289 + v146);
  v149 = *(uint64_t *)((char *)v289 + v146 + 8);
  *(_QWORD *)v147 = *(void **)((char *)v289 + v146);
  *((_QWORD *)v147 + 1) = v149;
  swift_bridgeObjectRelease();
  *((_QWORD *)v147 + 2) = v148[2];
  swift_bridgeObjectRelease();
  v150 = v148[4];
  *((_QWORD *)v147 + 3) = v148[3];
  *((_QWORD *)v147 + 4) = v150;
  swift_bridgeObjectRelease();
  v151 = v148[6];
  *((_QWORD *)v147 + 5) = v148[5];
  *((_QWORD *)v147 + 6) = v151;
  swift_bridgeObjectRelease();
  v152 = v148[8];
  *((_QWORD *)v147 + 7) = v148[7];
  *((_QWORD *)v147 + 8) = v152;
  swift_bridgeObjectRelease();
  v153 = v148[10];
  *((_QWORD *)v147 + 9) = v148[9];
  *((_QWORD *)v147 + 10) = v153;
  swift_bridgeObjectRelease();
  v154 = (void *)*((_QWORD *)v147 + 12);
  v155 = v148[12];
  *((_QWORD *)v147 + 11) = v148[11];
  *((_QWORD *)v147 + 12) = v155;

  v156 = (void *)*((_QWORD *)v147 + 13);
  *((_QWORD *)v147 + 13) = v148[13];

  v157 = v18[13];
  v158 = &v147[v157];
  v159 = (char *)v148 + v157;
  LODWORD(v139) = v56(&v147[v157], 1, v22);
  v160 = v56(v159, 1, v22);
  if ((_DWORD)v139)
  {
    if (!v160)
    {
      (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v158, v159, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v158, 0, 1, v22);
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if (v160)
  {
    (*(void (**)(char *, uint64_t))(v294 + 8))(v158, v22);
LABEL_64:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
    goto LABEL_65;
  }
  (*(void (**)(char *, char *, uint64_t))(v294 + 40))(v158, v159, v22);
LABEL_65:
  v162 = v18[14];
  v163 = &v147[v162];
  v164 = (char *)v148 + v162;
  v165 = v56(&v147[v162], 1, v22);
  v166 = v56(v164, 1, v22);
  if (v165)
  {
    if (!v166)
    {
      (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v163, v164, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v163, 0, 1, v22);
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v166)
  {
    (*(void (**)(char *, uint64_t))(v294 + 8))(v163, v22);
LABEL_70:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
    goto LABEL_71;
  }
  (*(void (**)(char *, char *, uint64_t))(v294 + 40))(v163, v164, v22);
LABEL_71:
  v168 = v18[15];
  v169 = &v147[v168];
  v170 = (_QWORD *)((char *)v148 + v168);
  v172 = *v170;
  v171 = v170[1];
  *(_QWORD *)v169 = v172;
  *((_QWORD *)v169 + 1) = v171;
  swift_bridgeObjectRelease();
  v173 = v18[16];
  v174 = &v147[v173];
  v175 = (_QWORD *)((char *)v148 + v173);
  v177 = *v175;
  v176 = v175[1];
  *(_QWORD *)v174 = v177;
  *((_QWORD *)v174 + 1) = v176;
  swift_bridgeObjectRelease();
  v147[v18[17]] = *((_BYTE *)v148 + v18[17]);
  v147[v18[18]] = *((_BYTE *)v148 + v18[18]);
  v178 = v18[19];
  v179 = (uint64_t)&v147[v178];
  v180 = (char *)v148 + v178;
  v181 = *(_QWORD *)&v147[v178 + 8];
  if (v181 >> 60 == 15)
  {
LABEL_74:
    *(_OWORD *)v179 = *(_OWORD *)v180;
    goto LABEL_76;
  }
  v182 = *((_QWORD *)v180 + 1);
  if (v182 >> 60 == 15)
  {
    sub_2415A1B38(v179);
    goto LABEL_74;
  }
  v183 = *(_QWORD *)v179;
  *(_QWORD *)v179 = *(_QWORD *)v180;
  *(_QWORD *)(v179 + 8) = v182;
  sub_2415A0DAC(v183, v181);
LABEL_76:
  v184 = v18[20];
  v185 = &v147[v184];
  v186 = (char *)v148 + v184;
  v187 = v286(&v147[v184], 1, v293);
  v188 = v286(v186, 1, v293);
  if (v187)
  {
    if (!v188)
    {
      (*(void (**)(char *, char *, uint64_t))(v283 + 32))(v185, v186, v293);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v283 + 56))(v185, 0, 1, v293);
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  if (v188)
  {
    (*(void (**)(char *, uint64_t))(v283 + 8))(v185, v293);
LABEL_81:
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
    goto LABEL_82;
  }
  (*(void (**)(char *, char *, uint64_t))(v283 + 40))(v185, v186, v293);
LABEL_82:
  v190 = v18[21];
  v191 = *(void **)&v147[v190];
  *(_QWORD *)&v147[v190] = *(_QWORD *)((char *)v148 + v190);

  v192 = v18[22];
  v193 = &v147[v192];
  v194 = (char *)v148 + v192;
  v195 = v56(&v147[v192], 1, v22);
  v196 = v56(v194, 1, v22);
  if (v195)
  {
    if (!v196)
    {
      (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v193, v194, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v193, 0, 1, v22);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v196)
  {
    (*(void (**)(char *, uint64_t))(v294 + 8))(v193, v22);
LABEL_87:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v193, v194, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v294 + 40))(v193, v194, v22);
LABEL_88:
  v198 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v281)(&v147[v198[5]], (char *)v148 + v198[5], v282);
  ((void (*)(char *, char *, uint64_t))v284)(&v147[v198[6]], (char *)v148 + v198[6], v285);
  v199 = v198[7];
  v200 = *(void **)&v147[v199];
  *(_QWORD *)&v147[v199] = *(_QWORD *)((char *)v148 + v199);

  v201 = v198[8];
  v202 = *(void **)&v147[v201];
  *(_QWORD *)&v147[v201] = *(_QWORD *)((char *)v148 + v201);

  v203 = v198[9];
  v204 = &v147[v203];
  v205 = (_QWORD *)((char *)v148 + v203);
  v207 = *v205;
  v206 = v205[1];
  *(_QWORD *)v204 = v207;
  *((_QWORD *)v204 + 1) = v206;
  swift_bridgeObjectRelease();
  v208 = v287[11];
  v209 = (char *)v291 + v208;
  v210 = (char *)v289 + v208;
  v211 = *(void **)((char *)v291 + v208);
  *(void **)((char *)v291 + v208) = *(void **)((char *)v289 + v208);

  v212 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v281)(&v209[*(int *)(v212 + 20)], &v210[*(int *)(v212 + 20)], v282);
  ((void (*)(char *, char *, uint64_t))v284)(&v209[*(int *)(v212 + 24)], &v210[*(int *)(v212 + 24)], v285);
  v213 = v287[12];
  v214 = (char *)v291 + v213;
  v215 = (char *)v289 + v213;
  v216 = *(uint64_t *)((char *)v289 + v213 + 8);
  *(_QWORD *)v214 = *(void **)((char *)v289 + v213);
  *((_QWORD *)v214 + 1) = v216;
  swift_bridgeObjectRelease();
  v288 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v290 = v215;
  v217 = v288[5];
  v218 = &v214[v217];
  v219 = &v215[v217];
  v220 = *(_QWORD *)&v215[v217 + 8];
  *(_QWORD *)v218 = *(_QWORD *)&v215[v217];
  *((_QWORD *)v218 + 1) = v220;
  swift_bridgeObjectRelease();
  *((_QWORD *)v218 + 2) = *((_QWORD *)v219 + 2);
  swift_bridgeObjectRelease();
  v221 = *((_QWORD *)v219 + 4);
  *((_QWORD *)v218 + 3) = *((_QWORD *)v219 + 3);
  *((_QWORD *)v218 + 4) = v221;
  swift_bridgeObjectRelease();
  v222 = *((_QWORD *)v219 + 6);
  *((_QWORD *)v218 + 5) = *((_QWORD *)v219 + 5);
  *((_QWORD *)v218 + 6) = v222;
  swift_bridgeObjectRelease();
  v223 = *((_QWORD *)v219 + 8);
  *((_QWORD *)v218 + 7) = *((_QWORD *)v219 + 7);
  *((_QWORD *)v218 + 8) = v223;
  swift_bridgeObjectRelease();
  v224 = *((_QWORD *)v219 + 10);
  *((_QWORD *)v218 + 9) = *((_QWORD *)v219 + 9);
  *((_QWORD *)v218 + 10) = v224;
  swift_bridgeObjectRelease();
  v225 = (void *)*((_QWORD *)v218 + 12);
  v226 = *((_QWORD *)v219 + 12);
  *((_QWORD *)v218 + 11) = *((_QWORD *)v219 + 11);
  *((_QWORD *)v218 + 12) = v226;

  v227 = (void *)*((_QWORD *)v218 + 13);
  *((_QWORD *)v218 + 13) = *((_QWORD *)v219 + 13);

  v228 = v18[13];
  v229 = &v218[v228];
  v230 = &v219[v228];
  v231 = v292(&v218[v228], 1, v22);
  v232 = v292(v230, 1, v22);
  if (v231)
  {
    if (!v232)
    {
      (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v229, v230, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v229, 0, 1, v22);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v232)
  {
    (*(void (**)(char *, uint64_t))(v294 + 8))(v229, v22);
LABEL_93:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v229, v230, *(_QWORD *)(*(_QWORD *)(v233 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v294 + 40))(v229, v230, v22);
LABEL_94:
  v234 = v18[14];
  v235 = &v218[v234];
  v236 = &v219[v234];
  v237 = v292(&v218[v234], 1, v22);
  v238 = v292(v236, 1, v22);
  if (v237)
  {
    if (!v238)
    {
      (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v235, v236, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v235, 0, 1, v22);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v238)
  {
    (*(void (**)(char *, uint64_t))(v294 + 8))(v235, v22);
LABEL_99:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v235, v236, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v294 + 40))(v235, v236, v22);
LABEL_100:
  v240 = v18[15];
  v241 = &v218[v240];
  v242 = (uint64_t *)&v219[v240];
  v244 = *v242;
  v243 = v242[1];
  *(_QWORD *)v241 = v244;
  *((_QWORD *)v241 + 1) = v243;
  swift_bridgeObjectRelease();
  v245 = v18[16];
  v246 = &v218[v245];
  v247 = (uint64_t *)&v219[v245];
  v249 = *v247;
  v248 = v247[1];
  *(_QWORD *)v246 = v249;
  *((_QWORD *)v246 + 1) = v248;
  swift_bridgeObjectRelease();
  v218[v18[17]] = v219[v18[17]];
  v218[v18[18]] = v219[v18[18]];
  v250 = v18[19];
  v251 = (uint64_t)&v218[v250];
  v252 = &v219[v250];
  v253 = *(_QWORD *)&v218[v250 + 8];
  if (v253 >> 60 == 15)
  {
LABEL_103:
    *(_OWORD *)v251 = *(_OWORD *)v252;
    goto LABEL_105;
  }
  v254 = *((_QWORD *)v252 + 1);
  if (v254 >> 60 == 15)
  {
    sub_2415A1B38(v251);
    goto LABEL_103;
  }
  v255 = *(_QWORD *)v251;
  *(_QWORD *)v251 = *(_QWORD *)v252;
  *(_QWORD *)(v251 + 8) = v254;
  sub_2415A0DAC(v255, v253);
LABEL_105:
  v256 = v18[20];
  v257 = &v218[v256];
  v258 = &v219[v256];
  v259 = v286(&v218[v256], 1, v293);
  v260 = v286(v258, 1, v293);
  if (v259)
  {
    v261 = v292;
    if (!v260)
    {
      (*(void (**)(char *, char *, uint64_t))(v283 + 32))(v257, v258, v293);
      v261 = v292;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v283 + 56))(v257, 0, 1, v293);
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  v261 = v292;
  if (v260)
  {
    (*(void (**)(char *, uint64_t))(v283 + 8))(v257, v293);
LABEL_110:
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v257, v258, *(_QWORD *)(*(_QWORD *)(v262 - 8) + 64));
    goto LABEL_111;
  }
  (*(void (**)(char *, char *, uint64_t))(v283 + 40))(v257, v258, v293);
LABEL_111:
  v263 = v18[21];
  v264 = *(void **)&v218[v263];
  *(_QWORD *)&v218[v263] = *(_QWORD *)&v219[v263];

  v265 = v18[22];
  v266 = &v218[v265];
  v267 = &v219[v265];
  v268 = v261(&v218[v265], 1, v22);
  v269 = v261(v267, 1, v22);
  if (v268)
  {
    if (!v269)
    {
      (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v266, v267, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v266, 0, 1, v22);
      goto LABEL_117;
    }
    goto LABEL_116;
  }
  if (v269)
  {
    (*(void (**)(char *, uint64_t))(v294 + 8))(v266, v22);
LABEL_116:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v266, v267, *(_QWORD *)(*(_QWORD *)(v270 - 8) + 64));
    goto LABEL_117;
  }
  (*(void (**)(char *, char *, uint64_t))(v294 + 40))(v266, v267, v22);
LABEL_117:
  ((void (*)(char *, char *, uint64_t))v281)(&v214[v288[6]], &v290[v288[6]], v282);
  ((void (*)(char *, char *, uint64_t))v284)(&v214[v288[7]], &v290[v288[7]], v285);
  *(_QWORD *)&v214[v288[8]] = *(_QWORD *)&v290[v288[8]];
  swift_release();
  v271 = v288[9];
  v272 = &v214[v271];
  v273 = &v290[v271];
  v274 = v261(&v214[v271], 1, v22);
  v275 = v261(v273, 1, v22);
  if (!v274)
  {
    v276 = v291;
    if (!v275)
    {
      (*(void (**)(char *, char *, uint64_t))(v294 + 40))(v272, v273, v22);
      return v276;
    }
    (*(void (**)(char *, uint64_t))(v294 + 8))(v272, v22);
    goto LABEL_122;
  }
  v276 = v291;
  if (v275)
  {
LABEL_122:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v272, v273, *(_QWORD *)(*(_QWORD *)(v277 - 8) + 64));
    return v276;
  }
  (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v272, v273, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v272, 0, 1, v22);
  return v276;
}

uint64_t getEnumTagSinglePayload for MedicalIDDataViewModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415AF670(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for MedicalIDData();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = sub_2416B9C70();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v13 = sub_2416B9C10();
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[8];
        }
        else
        {
          v14 = type metadata accessor for MedicalIDBiometricsViewModel();
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
          {
            v10 = v14;
            v11 = a3[9];
          }
          else
          {
            v15 = type metadata accessor for MedicalIDPersonalInfoViewModel();
            v9 = *(_QWORD *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
            {
              v10 = v15;
              v11 = a3[10];
            }
            else
            {
              v16 = type metadata accessor for MedicalIDMedicalInfoViewModel();
              v9 = *(_QWORD *)(v16 - 8);
              if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
              {
                v10 = v16;
                v11 = a3[11];
              }
              else
              {
                v10 = type metadata accessor for MedicalIDPregnancyViewModel();
                v9 = *(_QWORD *)(v10 - 8);
                v11 = a3[12];
              }
            }
          }
        }
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MedicalIDDataViewModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_2415AF7D0(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for MedicalIDData();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = sub_2416B9C70();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v13 = sub_2416B9C10();
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[8];
        }
        else
        {
          v14 = type metadata accessor for MedicalIDBiometricsViewModel();
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == a3)
          {
            v10 = v14;
            v11 = a4[9];
          }
          else
          {
            v15 = type metadata accessor for MedicalIDPersonalInfoViewModel();
            v9 = *(_QWORD *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == a3)
            {
              v10 = v15;
              v11 = a4[10];
            }
            else
            {
              v16 = type metadata accessor for MedicalIDMedicalInfoViewModel();
              v9 = *(_QWORD *)(v16 - 8);
              if (*(_DWORD *)(v9 + 84) == a3)
              {
                v10 = v16;
                v11 = a4[11];
              }
              else
              {
                v10 = type metadata accessor for MedicalIDPregnancyViewModel();
                v9 = *(_QWORD *)(v10 - 8);
                v11 = a4[12];
              }
            }
          }
        }
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_2415AF920()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = type metadata accessor for MedicalIDData();
  if (v1 <= 0x3F)
  {
    result = sub_2416B9C70();
    if (v2 <= 0x3F)
    {
      result = sub_2416B9C10();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for MedicalIDBiometricsViewModel();
        if (v4 <= 0x3F)
        {
          result = type metadata accessor for MedicalIDPersonalInfoViewModel();
          if (v5 <= 0x3F)
          {
            result = type metadata accessor for MedicalIDMedicalInfoViewModel();
            if (v6 <= 0x3F)
            {
              result = type metadata accessor for MedicalIDPregnancyViewModel();
              if (v7 <= 0x3F)
              {
                swift_initStructMetadata();
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2415AFA44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_2415AFA84()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for MedicalIDModelProvider();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  qword_25713A038 = (uint64_t)result;
  return result;
}

id static NSBundle.medicalIDUI.getter()
{
  if (qword_257139300 != -1)
    swift_once();
  return (id)qword_25713A038;
}

id sub_2415AFB18(uint64_t a1)
{
  return sub_2415AFB40(a1, (SEL *)&selRef_centimeters, &qword_2571475D0);
}

id sub_2415AFB2C(uint64_t a1)
{
  return sub_2415AFB40(a1, (SEL *)&selRef_inches, &qword_2571475D8);
}

id sub_2415AFB40(uint64_t a1, SEL *a2, _QWORD *a3)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), *a2);
  *a3 = result;
  return result;
}

uint64_t sub_2415AFB80(uint64_t a1)
{
  return sub_2415AFBA8(a1, qword_2571475E0);
}

uint64_t sub_2415AFB90(uint64_t a1)
{
  return sub_2415AFBA8(a1, qword_2571475F8);
}

uint64_t sub_2415AFBA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  sub_2415B11B0(0);
  v4 = v3;
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v4, (uint64_t)a2);
  if (qword_257139310 != -1)
    swift_once();
  v5 = (void *)qword_2571475D8;
  sub_2415B11CC();
  v6 = v5;
  return sub_2416B98E0();
}

uint64_t sub_2415AFC4C(uint64_t a1)
{
  return sub_2415AFBA8(a1, qword_257147610);
}

uint64_t sub_2415AFC64()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  sub_2415B11B0(0);
  v1 = v0;
  __swift_allocate_value_buffer(v0, qword_257147628);
  __swift_project_value_buffer(v1, (uint64_t)qword_257147628);
  if (qword_257139308 != -1)
    swift_once();
  v2 = (void *)qword_2571475D0;
  sub_2415B11CC();
  v3 = v2;
  return sub_2416B98E0();
}

uint64_t sub_2415AFD00()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  sub_2415B11B0(0);
  v1 = v0;
  __swift_allocate_value_buffer(v0, qword_257147640);
  __swift_project_value_buffer(v1, (uint64_t)qword_257147640);
  if (qword_257139308 != -1)
    swift_once();
  v2 = (void *)qword_2571475D0;
  sub_2415B11CC();
  v3 = v2;
  return sub_2416B98E0();
}

uint64_t sub_2415AFDA4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  sub_2415B11B0(0);
  v1 = v0;
  __swift_allocate_value_buffer(v0, qword_257147658);
  __swift_project_value_buffer(v1, (uint64_t)qword_257147658);
  if (qword_257139308 != -1)
    swift_once();
  v2 = (void *)qword_2571475D0;
  sub_2415B11CC();
  v3 = v2;
  return sub_2416B98E0();
}

uint64_t sub_2415AFE48(uint64_t a1)
{
  return sub_2415AFE78(a1, qword_257147670, (SEL *)&selRef_inches);
}

uint64_t sub_2415AFE60(uint64_t a1)
{
  return sub_2415AFE78(a1, qword_257147688, (SEL *)&selRef_inches);
}

uint64_t sub_2415AFE78(uint64_t a1, uint64_t *a2, SEL *a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;

  sub_2415B11B0(0);
  v6 = v5;
  __swift_allocate_value_buffer(v5, a2);
  __swift_project_value_buffer(v6, (uint64_t)a2);
  v7 = objc_msgSend((id)objc_opt_self(), *a3);
  sub_2415B11CC();
  return sub_2416B98E0();
}

uint64_t sub_2415AFF0C(uint64_t a1)
{
  return sub_2415AFE78(a1, qword_2571476A0, (SEL *)&selRef_feet);
}

uint64_t sub_2415AFF24(uint64_t a1)
{
  return sub_2415AFE78(a1, qword_2571476B8, (SEL *)&selRef_feet);
}

uint64_t sub_2415AFF3C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_2416B9E44();
  swift_release();
  return swift_release();
}

void *sub_2415AFFA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t (*v10)(char *, uint64_t);
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t *v19;
  double v20;
  char v22;
  uint64_t v23;
  double v24;
  uint64_t v25;

  v0 = sub_2416B9C10();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_2416B9E44();
  swift_release();
  swift_release();
  v4 = sub_2416B9BBC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2416B9BC8();
  v8 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  MEMORY[0x24BDAC7A8](v8);
  sub_2416B9BA4();
  sub_2415B1168();
  v9 = sub_2416BB08C();
  v10 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  v11 = v10((char *)&v25 - v7, v4);
  if ((v9 & 1) != 0
    || (MEMORY[0x24BDAC7A8](v11),
        sub_2416B9B98(),
        v12 = sub_2416BB08C(),
        v13 = v10((char *)&v25 - v7, v4),
        (v12 & 1) != 0))
  {
    v10((char *)&v25 - v7, v4);
    if (qword_257139310 != -1)
      swift_once();
    v14 = (void *)qword_2571475D8;
    if (qword_257139318 != -1)
      swift_once();
    sub_2415B11B0(0);
    v16 = v15;
    __swift_project_value_buffer(v15, (uint64_t)qword_2571475E0);
    sub_2416B98EC();
    v18 = v17;
    if (qword_257139328 != -1)
      swift_once();
    v19 = qword_257147610;
LABEL_10:
    __swift_project_value_buffer(v16, (uint64_t)v19);
    sub_2416B98EC();
    return sub_2415B1354(v14, v18, v20);
  }
  MEMORY[0x24BDAC7A8](v13);
  sub_2416B9BB0();
  v22 = sub_2416BB08C();
  v10((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v10((char *)&v25 - v7, v4);
  if ((v22 & 1) != 0)
  {
    if (qword_257139308 != -1)
      swift_once();
    v14 = (void *)qword_2571475D0;
    if (qword_257139330 != -1)
      swift_once();
    sub_2415B11B0(0);
    v16 = v23;
    __swift_project_value_buffer(v23, (uint64_t)qword_257147628);
    sub_2416B98EC();
    v18 = v24;
    if (qword_257139340 != -1)
      swift_once();
    v19 = qword_257147658;
    goto LABEL_10;
  }
  return (void *)MEMORY[0x24BEE4AF8];
}

uint64_t sub_2415B0374@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  char *v29;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  void (*v43)(char *, uint64_t);
  void (*v44)(char *, uint64_t);
  _QWORD *v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;

  v6 = sub_2415B0BC8();
  if (v6)
  {
    v7 = v6;
    sub_24159D6B0(0, &qword_25713A190, (uint64_t (*)(uint64_t))sub_2415B11B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v51 = &v45;
    v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
    MEMORY[0x24BDAC7A8](v8);
    v11 = (char *)&v45 - v10;
    v52 = a3;
    v53 = v7;
    v49 = (_QWORD *)a1;
    v50 = (uint64_t)&v45 - v10;
    if ((a2 & 1) != 0)
    {
      sub_2415B07E4((uint64_t)&v45 - v10);
    }
    else
    {
      sub_2415B11B0(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v11, 1, 1, v14);
    }
    sub_2415B11B0(0);
    v16 = v15;
    v17 = *(_QWORD *)(v15 - 8);
    v18 = *(_QWORD *)(v17 + 64);
    v19 = MEMORY[0x24BDAC7A8](v15);
    v20 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    v21 = (char *)&v45 - v20;
    MEMORY[0x24BDAC7A8](v19);
    sub_2415B1248((uint64_t)v49, (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v16) == 1)
    {

      sub_2415B12A4((uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
      return sub_2415B12F8(v50, v52);
    }
    else
    {
      v49 = &v45;
      v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))((char *)&v45 - v20, (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
      v48 = &v45;
      MEMORY[0x24BDAC7A8](v22);
      v23 = (char *)&v45 - v20;
      v24 = v53;
      sub_2416B9910();
      v25 = sub_2415AFFA0();
      v47 = v23;
      sub_2416B98EC();
      v27 = v26;
      v28 = v25[2];
      v29 = v21;
      if (v28)
      {
        v46 = v21;
        v54 = MEMORY[0x24BEE4AF8];
        isUniquelyReferenced_nonNull_native = sub_2415FE4E4(0, v28, 0);
        v31 = *(unsigned __int8 *)(v17 + 80);
        v45 = v25;
        v32 = (char *)v25 + ((v31 + 32) & ~v31);
        v33 = *(_QWORD *)(v17 + 72);
        v34 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
        do
        {
          MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
          v34((char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v32, v16);
          sub_2416B98EC();
          v36 = v35;
          (*(void (**)(char *, uint64_t))(v17 + 8))((char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
          v37 = v54;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            isUniquelyReferenced_nonNull_native = sub_2415FE4E4(0, *(_QWORD *)(v37 + 16) + 1, 1);
            v37 = v54;
          }
          v39 = *(_QWORD *)(v37 + 16);
          v38 = *(_QWORD *)(v37 + 24);
          if (v39 >= v38 >> 1)
          {
            isUniquelyReferenced_nonNull_native = sub_2415FE4E4(v38 > 1, v39 + 1, 1);
            v37 = v54;
          }
          *(_QWORD *)(v37 + 16) = v39 + 1;
          *(_QWORD *)(v37 + 8 * v39 + 32) = v36;
          v32 += v33;
          --v28;
        }
        while (v28);
        swift_bridgeObjectRelease();
        v40 = v52;
        v24 = v53;
        v29 = v46;
      }
      else
      {
        swift_bridgeObjectRelease();
        v37 = MEMORY[0x24BEE4AF8];
        v40 = v52;
      }
      sub_2415B1548(v27, 0, v37);
      v42 = v41;
      swift_bridgeObjectRelease();
      if ((v42 & 1) != 0)
      {

        v44 = *(void (**)(char *, uint64_t))(v17 + 8);
        v44(v47, v16);
        v44(v29, v16);
        return sub_2415B12F8(v50, v40);
      }
      else
      {
        sub_2415B11CC();
        sub_2416B98E0();
        v43 = *(void (**)(char *, uint64_t))(v17 + 8);
        v43(v47, v16);
        v43(v29, v16);
        sub_2415B12A4(v50);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v40, 0, 1, v16);
      }
    }
  }
  else
  {
    sub_2415B11B0(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a3, 1, 1, v12);
  }
}

uint64_t sub_2415B07E4@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  _QWORD v29[2];
  id v30;
  uint64_t v31;

  v2 = sub_2415B0BC8();
  if (v2)
  {
    v30 = v2;
    v31 = a1;
    v3 = sub_2416B9C10();
    v29[1] = v29;
    v4 = *(_QWORD *)(v3 - 8);
    MEMORY[0x24BDAC7A8](v3);
    v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_2416B9E44();
    swift_release();
    swift_release();
    v7 = sub_2416B9BBC();
    v29[0] = v29;
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(_QWORD *)(v8 + 64);
    MEMORY[0x24BDAC7A8](v7);
    v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    sub_2416B9BC8();
    v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    MEMORY[0x24BDAC7A8](v11);
    sub_2416B9BA4();
    sub_2415B1168();
    v12 = sub_2416BB08C();
    v13 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
    v14 = v13((char *)v29 - v10, v7);
    if ((v12 & 1) != 0
      || (MEMORY[0x24BDAC7A8](v14),
          sub_2416B9B98(),
          v15 = sub_2416BB08C(),
          v16 = v13((char *)v29 - v10, v7),
          (v15 & 1) != 0))
    {
      v13((char *)v29 - v10, v7);
      if (qword_257139320 != -1)
        swift_once();
      sub_2415B11B0(0);
      v18 = v17;
      __swift_project_value_buffer(v17, (uint64_t)qword_2571475F8);
      v20 = v30;
      v19 = v31;
      sub_2416B9910();

      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v19, 0, 1, v18);
    }
    else
    {
      MEMORY[0x24BDAC7A8](v16);
      sub_2416B9BB0();
      v23 = sub_2416BB08C();
      v13((char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
      v13((char *)v29 - v10, v7);
      if ((v23 & 1) != 0)
      {
        v24 = v31;
        if (qword_257139338 != -1)
          swift_once();
        sub_2415B11B0(0);
        v26 = v25;
        __swift_project_value_buffer(v25, (uint64_t)qword_257147640);
        v27 = v30;
        sub_2416B9910();

        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v24, 0, 1, v26);
      }
      else
      {

        sub_2415B11B0(0);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v31, 1, 1, v28);
      }
    }
  }
  else
  {
    sub_2415B11B0(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a1, 1, 1, v22);
  }
}

void *sub_2415B0BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t (*v10)(char *, uint64_t);
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  id v15;
  char v17;
  uint64_t v18;

  v0 = sub_2416B9C10();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_2416B9E44();
  swift_release();
  swift_release();
  v4 = sub_2416B9BBC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_2416B9BC8();
  v8 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  MEMORY[0x24BDAC7A8](v8);
  sub_2416B9BA4();
  sub_2415B1168();
  v9 = sub_2416BB08C();
  v10 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  v11 = v10((char *)&v18 - v7, v4);
  if ((v9 & 1) != 0
    || (MEMORY[0x24BDAC7A8](v11),
        sub_2416B9B98(),
        v12 = sub_2416BB08C(),
        v13 = v10((char *)&v18 - v7, v4),
        (v12 & 1) != 0))
  {
    v10((char *)&v18 - v7, v4);
    if (qword_257139310 != -1)
      swift_once();
    v14 = (void *)qword_2571475D8;
  }
  else
  {
    MEMORY[0x24BDAC7A8](v13);
    sub_2416B9BB0();
    v17 = sub_2416BB08C();
    v10((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    v10((char *)&v18 - v7, v4);
    if ((v17 & 1) == 0)
      return 0;
    if (qword_257139308 != -1)
      swift_once();
    v14 = (void *)qword_2571475D0;
  }
  v15 = v14;
  return v14;
}

uint64_t sub_2415B0E74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI18HeightDataProvider__locale;
  sub_24159D6B0(0, qword_25713A080, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDB9EF0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_2415B0EDC()
{
  return type metadata accessor for HeightDataProvider();
}

uint64_t type metadata accessor for HeightDataProvider()
{
  uint64_t result;

  result = qword_25713A070;
  if (!qword_25713A070)
    return swift_getSingletonMetadata();
  return result;
}

void sub_2415B0F20()
{
  unint64_t v0;

  sub_24159D6B0(319, qword_25713A080, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDB9EF0]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_2415B0FA4()
{
  return MEMORY[0x24BDB9D70];
}

uint64_t sub_2415B0FB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for HeightDataProvider();
  result = sub_2416B9DD8();
  *a1 = result;
  return result;
}

uint64_t sub_2415B0FEC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_2416B9E44();
  swift_release();
  return swift_release();
}

uint64_t sub_2415B1058(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(char *, char *, uint64_t);
  uint64_t KeyPath;
  uint64_t v9;

  v2 = sub_2416B9C10();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v6((char *)&v9 - v5, a1, v2);
  swift_getKeyPath();
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  v6((char *)&v9 - v5, (char *)&v9 - v5, v2);
  swift_retain();
  sub_2416B9E50();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))((char *)&v9 - v5, v2);
}

unint64_t sub_2415B1168()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713A178;
  if (!qword_25713A178)
  {
    v1 = sub_2416B9BBC();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDCEC48], v1);
    atomic_store(result, (unint64_t *)&qword_25713A178);
  }
  return result;
}

void sub_2415B11B0(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713A180, (uint64_t (*)(uint64_t))sub_2415B11CC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
}

unint64_t sub_2415B11CC()
{
  unint64_t result;

  result = qword_25713A188;
  if (!qword_25713A188)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25713A188);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_2415B1248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, &qword_25713A190, (uint64_t (*)(uint64_t))sub_2415B11B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415B12A4(uint64_t a1)
{
  uint64_t v2;

  sub_24159D6B0(0, &qword_25713A190, (uint64_t (*)(uint64_t))sub_2415B11B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2415B12F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, &qword_25713A190, (uint64_t (*)(uint64_t))sub_2415B11B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_2415B1354(void *result, double a2, double a3)
{
  uint64_t v5;
  double v6;
  unint64_t v7;
  BOOL v8;
  double i;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  int v22;

  v21 = result;
  v22 = 0;
  v5 = 0;
  v6 = a2;
  v7 = MEMORY[0x24BEE4AF8];
  v8 = a2 == a3;
  if (a2 >= a3)
    goto LABEL_4;
  while (!__OFADD__(v5++, 1))
  {
    for (i = (double)v5 + a2; ; i = v6)
    {
      sub_2415B11B0(0);
      v13 = v12;
      v14 = *(_QWORD *)(v12 - 8);
      v15 = *(_QWORD *)(v14 + 64);
      MEMORY[0x24BDAC7A8](v12);
      v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_2415B11CC();
      v17 = v21;
      v18 = sub_2416B98E0();
      MEMORY[0x24BDAC7A8](v18);
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v16, v13);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = sub_2415FDF68(0, *(_QWORD *)(v7 + 16) + 1, 1, v7);
      v20 = *(_QWORD *)(v7 + 16);
      v19 = *(_QWORD *)(v7 + 24);
      if (v20 >= v19 >> 1)
        v7 = sub_2415FDF68(v19 > 1, v20 + 1, 1, v7);
      *(_QWORD *)(v7 + 16) = v20 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v7+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v20, v16, v13);
      result = (void *)(*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      v6 = i;
      v8 = i == a3;
      if (i < a3)
        break;
LABEL_4:
      v11 = !v8;
      if (((v11 | v22) & 1) != 0)
        return (void *)v7;
      v22 = 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_2415B1548(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v9;

  if ((a2 & 1) == 0)
  {
    v3 = *(_QWORD *)(a3 + 16);
    if (v3)
    {
      if (v3 == 1)
      {
        return *(uint64_t *)(a3 + 32);
      }
      else
      {
        v4 = *(double *)(a3 + 32);
        if (v4 < *(double *)&result)
        {
          v5 = *(double *)(a3 + 40);
          if (v5 == *(double *)&result)
          {
LABEL_10:
            *(double *)&result = v5;
          }
          else
          {
            v6 = (double *)(a3 + 48);
            v7 = v3 - 2;
            while (v4 >= *(double *)&result || v5 <= *(double *)&result)
            {
              if (!v7)
                return *(uint64_t *)(a3 + 32 + 8 * v3 - 8);
              v4 = *(v6 - 1);
              if (v4 >= *(double *)&result)
                goto LABEL_8;
              v9 = *v6++;
              v5 = v9;
              --v7;
              if (v9 == *(double *)&result)
                goto LABEL_10;
            }
            if (*(double *)&result - v4 >= v5 - *(double *)&result)
              v4 = v5;
            *(double *)&result = v4;
          }
        }
        else
        {
LABEL_8:
          *(double *)&result = v4;
        }
      }
    }
    else
    {
      *(double *)&result = 0.0;
    }
  }
  return result;
}

_QWORD *sub_2415B1620(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  id v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  char *v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  char *v144;
  id v145;
  id v146;
  id v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  id v176;
  uint64_t v177;
  int *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  id v195;
  id v196;
  id v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  char *v214;
  id v215;
  id v216;
  uint64_t v217;
  _QWORD *v218;
  int *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  uint64_t v244;
  char *v245;
  char *v246;
  id v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  char *v256;
  uint64_t v257;
  void *v258;
  _QWORD *v259;
  _QWORD *v260;
  id v261;
  uint64_t v262;
  char *v263;
  char *v264;
  uint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  _QWORD *v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  _QWORD *v285;
  uint64_t v286;
  void *v288;
  char *__dst;
  int *v290;
  void *v291;
  void *v292;
  char *v293;
  void *v294;
  char *v295;
  char *v296;
  char *v297;
  uint64_t v301;
  uint64_t v302;
  unsigned int (*v303)(char *, uint64_t, uint64_t);
  char *v304;
  int *v305;
  void (*v306)(char *, char *);
  void *v307;
  uint64_t v308;
  int *v309;
  char *v310;
  char *v311;
  char *v312;
  uint64_t v313;
  void *v314;
  void (*v315)(char *, char *, uint64_t);
  char *v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  unsigned int (*v320)(char *, uint64_t, uint64_t);
  int *v321;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v27 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v5 = a3[5];
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v319 = *(void **)((char *)a2 + v5);
    *(_QWORD *)((char *)a1 + v5) = v319;
    v309 = (int *)type metadata accessor for MedicalIDDataViewModel();
    v311 = v7;
    v8 = v309[5];
    v9 = &v6[v8];
    v10 = &v7[v8];
    v11 = *(_QWORD *)&v7[v8 + 8];
    *(_QWORD *)v9 = *(_QWORD *)&v7[v8];
    *((_QWORD *)v9 + 1) = v11;
    v13 = *(_QWORD *)&v7[v8 + 16];
    v12 = *(_QWORD *)&v7[v8 + 24];
    *((_QWORD *)v9 + 2) = v13;
    *((_QWORD *)v9 + 3) = v12;
    v14 = *((_QWORD *)v10 + 5);
    v304 = v6;
    *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
    *((_QWORD *)v9 + 5) = v14;
    v15 = *((_QWORD *)v10 + 7);
    *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
    *((_QWORD *)v9 + 7) = v15;
    v16 = *((_QWORD *)v10 + 9);
    *((_QWORD *)v9 + 8) = *((_QWORD *)v10 + 8);
    *((_QWORD *)v9 + 9) = v16;
    v17 = *((_QWORD *)v10 + 11);
    *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
    *((_QWORD *)v9 + 11) = v17;
    v307 = (void *)*((_QWORD *)v10 + 12);
    v314 = (void *)*((_QWORD *)v10 + 13);
    *((_QWORD *)v9 + 12) = v307;
    *((_QWORD *)v9 + 13) = v314;
    v321 = (int *)type metadata accessor for MedicalIDData();
    v18 = v321[13];
    v316 = &v9[v18];
    v19 = &v10[v18];
    v20 = sub_2416B9B50();
    v313 = *(_QWORD *)(v20 - 8);
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v313 + 48);
    swift_retain();
    v22 = v319;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = v307;
    v24 = v314;
    v320 = v21;
    if (v21(v19, 1, v20))
    {
      sub_2415A0A74(0);
      memcpy(v316, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      v26 = v313;
    }
    else
    {
      v26 = v313;
      (*(void (**)(char *, char *, uint64_t))(v313 + 16))(v316, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v313 + 56))(v316, 0, 1, v20);
    }
    v28 = v321[14];
    v29 = &v9[v28];
    v30 = &v10[v28];
    if (v21(&v10[v28], 1, v20))
    {
      sub_2415A0A74(0);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v29, v30, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v29, 0, 1, v20);
    }
    v32 = v321[15];
    v33 = &v9[v32];
    v34 = &v10[v32];
    v35 = *((_QWORD *)v34 + 1);
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = v321[16];
    v37 = &v9[v36];
    v38 = &v10[v36];
    v39 = *((_QWORD *)v38 + 1);
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = v39;
    v9[v321[17]] = v10[v321[17]];
    v9[v321[18]] = v10[v321[18]];
    v40 = v321[19];
    v41 = &v9[v40];
    v42 = (uint64_t *)&v10[v40];
    v43 = *(_QWORD *)&v10[v40 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v43 >> 60 == 15)
    {
      *(_OWORD *)v41 = *(_OWORD *)v42;
    }
    else
    {
      v44 = *v42;
      sub_2415A0A90(*v42, v43);
      *(_QWORD *)v41 = v44;
      *((_QWORD *)v41 + 1) = v43;
    }
    v45 = v321[20];
    v46 = &v9[v45];
    v47 = &v10[v45];
    v48 = sub_2416B9A18();
    v49 = *(_QWORD *)(v48 - 8);
    v303 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
    if (v303(v47, 1, v48))
    {
      sub_2415B2870(0);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    v51 = v321[21];
    v52 = *(void **)&v10[v51];
    *(_QWORD *)&v9[v51] = v52;
    v53 = v321[22];
    v54 = &v9[v53];
    v55 = &v10[v53];
    v56 = v52;
    v301 = v49;
    v302 = v48;
    v318 = v20;
    if (v320(v55, 1, v20))
    {
      sub_2415A0A74(0);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v54, v55, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v54, 0, 1, v20);
    }
    v58 = v309[6];
    v59 = &v304[v58];
    v60 = &v311[v58];
    v61 = sub_2416B9C70();
    v306 = *(void (**)(char *, char *))(*(_QWORD *)(v61 - 8) + 16);
    v308 = v61;
    v306(v59, v60);
    v62 = v309[7];
    v63 = *(void **)&v311[v62];
    *(_QWORD *)&v304[v62] = v63;
    v64 = v309[8];
    v65 = &v304[v64];
    v66 = &v311[v64];
    v67 = sub_2416B9C10();
    v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16);
    v69 = v63;
    v315 = v68;
    v317 = v67;
    v68(v65, v66, v67);
    v70 = v309[9];
    v71 = &v304[v70];
    v72 = &v311[v70];
    v73 = *(_QWORD *)&v311[v70 + 8];
    *(_QWORD *)v71 = *(_QWORD *)&v311[v70];
    *((_QWORD *)v71 + 1) = v73;
    v290 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    v293 = v72;
    v74 = v290[5];
    v295 = v71;
    v75 = &v71[v74];
    v76 = &v72[v74];
    v77 = *(_QWORD *)&v72[v74];
    v78 = *((_QWORD *)v76 + 1);
    *(_QWORD *)v75 = v77;
    *((_QWORD *)v75 + 1) = v78;
    v79 = *((_QWORD *)v76 + 3);
    *((_QWORD *)v75 + 2) = *((_QWORD *)v76 + 2);
    *((_QWORD *)v75 + 3) = v79;
    v80 = *((_QWORD *)v76 + 5);
    *((_QWORD *)v75 + 4) = *((_QWORD *)v76 + 4);
    *((_QWORD *)v75 + 5) = v80;
    v81 = *((_QWORD *)v76 + 7);
    *((_QWORD *)v75 + 6) = *((_QWORD *)v76 + 6);
    *((_QWORD *)v75 + 7) = v81;
    v82 = *((_QWORD *)v76 + 9);
    *((_QWORD *)v75 + 8) = *((_QWORD *)v76 + 8);
    *((_QWORD *)v75 + 9) = v82;
    v83 = *((_QWORD *)v76 + 11);
    *((_QWORD *)v75 + 10) = *((_QWORD *)v76 + 10);
    *((_QWORD *)v75 + 11) = v83;
    v84 = (void *)*((_QWORD *)v76 + 12);
    v288 = (void *)*((_QWORD *)v76 + 13);
    *((_QWORD *)v75 + 12) = v84;
    *((_QWORD *)v75 + 13) = v288;
    v85 = v321[13];
    __dst = &v75[v85];
    v86 = &v76[v85];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v87 = v84;
    v88 = v288;
    if (v320(v86, 1, v318))
    {
      sub_2415A0A74(0);
      memcpy(__dst, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
      v90 = v313;
    }
    else
    {
      v90 = v313;
      (*(void (**)(char *, char *, uint64_t))(v313 + 16))(__dst, v86, v318);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v313 + 56))(__dst, 0, 1, v318);
    }
    v91 = v321[14];
    v92 = &v75[v91];
    v93 = &v76[v91];
    if (v320(&v76[v91], 1, v318))
    {
      sub_2415A0A74(0);
      memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v92, v93, v318);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v92, 0, 1, v318);
    }
    v95 = v321[15];
    v96 = &v75[v95];
    v97 = &v76[v95];
    v98 = *((_QWORD *)v97 + 1);
    *(_QWORD *)v96 = *(_QWORD *)v97;
    *((_QWORD *)v96 + 1) = v98;
    v99 = v321[16];
    v100 = &v75[v99];
    v101 = &v76[v99];
    v102 = *((_QWORD *)v101 + 1);
    *(_QWORD *)v100 = *(_QWORD *)v101;
    *((_QWORD *)v100 + 1) = v102;
    v75[v321[17]] = v76[v321[17]];
    v75[v321[18]] = v76[v321[18]];
    v103 = v321[19];
    v104 = &v75[v103];
    v105 = (uint64_t *)&v76[v103];
    v106 = *(_QWORD *)&v76[v103 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v106 >> 60 == 15)
    {
      *(_OWORD *)v104 = *(_OWORD *)v105;
    }
    else
    {
      v107 = *v105;
      sub_2415A0A90(*v105, v106);
      *(_QWORD *)v104 = v107;
      *((_QWORD *)v104 + 1) = v106;
    }
    v108 = v321[20];
    v109 = &v75[v108];
    v110 = &v76[v108];
    if (v303(&v76[v108], 1, v302))
    {
      sub_2415B2870(0);
      memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 16))(v109, v110, v302);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v109, 0, 1, v302);
    }
    v112 = v321[21];
    v113 = *(void **)&v76[v112];
    *(_QWORD *)&v75[v112] = v113;
    v114 = v321[22];
    v115 = &v75[v114];
    v116 = &v76[v114];
    v117 = v113;
    if (v320(v116, 1, v318))
    {
      sub_2415A0A74(0);
      memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v115, v116, v318);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v115, 0, 1, v318);
    }
    v315(&v295[v290[6]], &v293[v290[6]], v317);
    v119 = v290[7];
    v120 = &v295[v119];
    v121 = &v293[v119];
    v315(&v295[v119], &v293[v119], v317);
    v122 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    v123 = *(void **)&v121[v122];
    *(_QWORD *)&v120[v122] = v123;
    v124 = v290[8];
    v125 = &v295[v124];
    v126 = &v293[v124];
    v127 = v123;
    v315(v125, v126, v317);
    v128 = type metadata accessor for MedicalIDWeightFormatter();
    v129 = *(int *)(v128 + 20);
    v130 = *(void **)&v126[v129];
    *(_QWORD *)&v125[v129] = v130;
    v131 = *(int *)(v128 + 24);
    v291 = *(void **)&v126[v131];
    *(_QWORD *)&v125[v131] = v291;
    v132 = v309[10];
    v133 = &v304[v132];
    v134 = &v311[v132];
    v135 = *(_QWORD *)&v311[v132 + 8];
    *(_QWORD *)v133 = *(_QWORD *)&v311[v132];
    *((_QWORD *)v133 + 1) = v135;
    v137 = *(_QWORD *)&v311[v132 + 16];
    v136 = *(_QWORD *)&v311[v132 + 24];
    *((_QWORD *)v133 + 2) = v137;
    *((_QWORD *)v133 + 3) = v136;
    v138 = *((_QWORD *)v134 + 5);
    *((_QWORD *)v133 + 4) = *((_QWORD *)v134 + 4);
    *((_QWORD *)v133 + 5) = v138;
    v139 = *((_QWORD *)v134 + 7);
    *((_QWORD *)v133 + 6) = *((_QWORD *)v134 + 6);
    *((_QWORD *)v133 + 7) = v139;
    v140 = *((_QWORD *)v134 + 9);
    *((_QWORD *)v133 + 8) = *((_QWORD *)v134 + 8);
    *((_QWORD *)v133 + 9) = v140;
    v141 = *((_QWORD *)v134 + 11);
    *((_QWORD *)v133 + 10) = *((_QWORD *)v134 + 10);
    *((_QWORD *)v133 + 11) = v141;
    v142 = (void *)*((_QWORD *)v134 + 12);
    v294 = (void *)*((_QWORD *)v134 + 13);
    *((_QWORD *)v133 + 12) = v142;
    *((_QWORD *)v133 + 13) = v294;
    v143 = v321[13];
    v296 = &v133[v143];
    v144 = &v134[v143];
    v145 = v130;
    v146 = v291;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v147 = v142;
    v148 = v294;
    if (v320(v144, 1, v318))
    {
      sub_2415A0A74(0);
      memcpy(v296, v144, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v313 + 16))(v296, v144, v318);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v313 + 56))(v296, 0, 1, v318);
    }
    v150 = v321[14];
    v151 = &v133[v150];
    v152 = &v134[v150];
    if (v320(&v134[v150], 1, v318))
    {
      sub_2415A0A74(0);
      memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v313 + 16))(v151, v152, v318);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v313 + 56))(v151, 0, 1, v318);
    }
    v154 = v321[15];
    v155 = &v133[v154];
    v156 = &v134[v154];
    v157 = *((_QWORD *)v156 + 1);
    *(_QWORD *)v155 = *(_QWORD *)v156;
    *((_QWORD *)v155 + 1) = v157;
    v158 = v321[16];
    v159 = &v133[v158];
    v160 = &v134[v158];
    v161 = *((_QWORD *)v160 + 1);
    *(_QWORD *)v159 = *(_QWORD *)v160;
    *((_QWORD *)v159 + 1) = v161;
    v133[v321[17]] = v134[v321[17]];
    v133[v321[18]] = v134[v321[18]];
    v162 = v321[19];
    v163 = &v133[v162];
    v164 = (uint64_t *)&v134[v162];
    v165 = *(_QWORD *)&v134[v162 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v165 >> 60 == 15)
    {
      *(_OWORD *)v163 = *(_OWORD *)v164;
    }
    else
    {
      v166 = *v164;
      sub_2415A0A90(*v164, v165);
      *(_QWORD *)v163 = v166;
      *((_QWORD *)v163 + 1) = v165;
    }
    v167 = v321[20];
    v168 = &v133[v167];
    v169 = &v134[v167];
    if (v303(&v134[v167], 1, v302))
    {
      sub_2415B2870(0);
      memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 16))(v168, v169, v302);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v168, 0, 1, v302);
    }
    v171 = v321[21];
    v172 = *(void **)&v134[v171];
    *(_QWORD *)&v133[v171] = v172;
    v173 = v321[22];
    v174 = &v133[v173];
    v175 = &v134[v173];
    v176 = v172;
    if (v320(v175, 1, v318))
    {
      sub_2415A0A74(0);
      memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v313 + 16))(v174, v175, v318);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v313 + 56))(v174, 0, 1, v318);
    }
    v178 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    ((void (*)(char *, char *, uint64_t))v306)(&v133[v178[5]], &v134[v178[5]], v308);
    v315(&v133[v178[6]], &v134[v178[6]], v317);
    v179 = v178[7];
    v180 = *(void **)&v134[v179];
    *(_QWORD *)&v133[v179] = v180;
    v181 = v178[8];
    v182 = *(void **)&v134[v181];
    *(_QWORD *)&v133[v181] = v182;
    v183 = v178[9];
    v184 = &v133[v183];
    v185 = &v134[v183];
    v186 = *((_QWORD *)v185 + 1);
    *(_QWORD *)v184 = *(_QWORD *)v185;
    *((_QWORD *)v184 + 1) = v186;
    v187 = v309[11];
    v188 = &v304[v187];
    v189 = &v311[v187];
    v190 = *(void **)&v311[v187];
    *(_QWORD *)&v304[v187] = v190;
    v191 = type metadata accessor for MedicalIDMedicalInfoViewModel();
    v192 = *(int *)(v191 + 20);
    v193 = &v188[v192];
    v194 = &v189[v192];
    v195 = v180;
    v196 = v182;
    swift_bridgeObjectRetain();
    v197 = v190;
    ((void (*)(char *, char *, uint64_t))v306)(v193, v194, v308);
    v315(&v188[*(int *)(v191 + 24)], &v189[*(int *)(v191 + 24)], v317);
    v198 = v309[12];
    v199 = &v304[v198];
    v200 = &v311[v198];
    v201 = *(_QWORD *)&v311[v198 + 8];
    *(_QWORD *)v199 = *(_QWORD *)&v311[v198];
    *((_QWORD *)v199 + 1) = v201;
    v305 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
    v202 = v305[5];
    v310 = v199;
    v312 = v200;
    v203 = &v199[v202];
    v204 = &v200[v202];
    v205 = *(_QWORD *)&v200[v202 + 8];
    *(_QWORD *)v203 = *(_QWORD *)&v200[v202];
    *((_QWORD *)v203 + 1) = v205;
    v207 = *(_QWORD *)&v200[v202 + 16];
    v206 = *(_QWORD *)&v200[v202 + 24];
    *((_QWORD *)v203 + 2) = v207;
    *((_QWORD *)v203 + 3) = v206;
    v208 = *((_QWORD *)v204 + 5);
    *((_QWORD *)v203 + 4) = *((_QWORD *)v204 + 4);
    *((_QWORD *)v203 + 5) = v208;
    v209 = *((_QWORD *)v204 + 7);
    *((_QWORD *)v203 + 6) = *((_QWORD *)v204 + 6);
    *((_QWORD *)v203 + 7) = v209;
    v210 = *((_QWORD *)v204 + 9);
    *((_QWORD *)v203 + 8) = *((_QWORD *)v204 + 8);
    *((_QWORD *)v203 + 9) = v210;
    v211 = *((_QWORD *)v204 + 11);
    *((_QWORD *)v203 + 10) = *((_QWORD *)v204 + 10);
    *((_QWORD *)v203 + 11) = v211;
    v212 = (void *)*((_QWORD *)v204 + 12);
    v292 = (void *)*((_QWORD *)v204 + 13);
    *((_QWORD *)v203 + 12) = v212;
    *((_QWORD *)v203 + 13) = v292;
    v213 = v321[13];
    v297 = &v203[v213];
    v214 = &v204[v213];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v215 = v212;
    v216 = v292;
    if (v320(v214, 1, v318))
    {
      sub_2415A0A74(0);
      memcpy(v297, v214, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
      v219 = a3;
      v218 = a2;
      v220 = v313;
    }
    else
    {
      v220 = v313;
      (*(void (**)(char *, char *, uint64_t))(v313 + 16))(v297, v214, v318);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v313 + 56))(v297, 0, 1, v318);
      v219 = a3;
      v218 = a2;
    }
    v221 = v321[14];
    v222 = &v203[v221];
    v223 = &v204[v221];
    if (v320(&v204[v221], 1, v318))
    {
      sub_2415A0A74(0);
      memcpy(v222, v223, *(_QWORD *)(*(_QWORD *)(v224 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v222, v223, v318);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v220 + 56))(v222, 0, 1, v318);
    }
    v225 = v321[15];
    v226 = &v203[v225];
    v227 = &v204[v225];
    v228 = *((_QWORD *)v227 + 1);
    *(_QWORD *)v226 = *(_QWORD *)v227;
    *((_QWORD *)v226 + 1) = v228;
    v229 = v321[16];
    v230 = &v203[v229];
    v231 = &v204[v229];
    v232 = *((_QWORD *)v231 + 1);
    *(_QWORD *)v230 = *(_QWORD *)v231;
    *((_QWORD *)v230 + 1) = v232;
    v203[v321[17]] = v204[v321[17]];
    v203[v321[18]] = v204[v321[18]];
    v233 = v321[19];
    v234 = &v203[v233];
    v235 = (uint64_t *)&v204[v233];
    v236 = *(_QWORD *)&v204[v233 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v236 >> 60 == 15)
    {
      *(_OWORD *)v234 = *(_OWORD *)v235;
    }
    else
    {
      v237 = *v235;
      sub_2415A0A90(*v235, v236);
      *(_QWORD *)v234 = v237;
      *((_QWORD *)v234 + 1) = v236;
    }
    v238 = v321[20];
    v239 = &v203[v238];
    v240 = &v204[v238];
    if (v303(&v204[v238], 1, v302))
    {
      sub_2415B2870(0);
      memcpy(v239, v240, *(_QWORD *)(*(_QWORD *)(v241 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v301 + 16))(v239, v240, v302);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v239, 0, 1, v302);
    }
    v242 = v321[21];
    v243 = *(void **)&v204[v242];
    *(_QWORD *)&v203[v242] = v243;
    v244 = v321[22];
    v245 = &v203[v244];
    v246 = &v204[v244];
    v247 = v243;
    v27 = a1;
    if (v320(v246, 1, v318))
    {
      sub_2415A0A74(0);
      memcpy(v245, v246, *(_QWORD *)(*(_QWORD *)(v248 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v245, v246, v318);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v220 + 56))(v245, 0, 1, v318);
    }
    ((void (*)(char *, char *, uint64_t))v306)(&v310[v305[6]], &v312[v305[6]], v308);
    v315(&v310[v305[7]], &v312[v305[7]], v317);
    *(_QWORD *)&v310[v305[8]] = *(_QWORD *)&v312[v305[8]];
    v249 = v305[9];
    v250 = &v310[v249];
    v251 = &v312[v249];
    swift_retain();
    if (v320(v251, 1, v318))
    {
      sub_2415A0A74(0);
      memcpy(v250, v251, *(_QWORD *)(*(_QWORD *)(v252 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v250, v251, v318);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v220 + 56))(v250, 0, 1, v318);
    }
    v253 = v219[6];
    v254 = v219[7];
    v255 = (_QWORD *)((char *)a1 + v253);
    v256 = (char *)v218 + v253;
    v258 = *(void **)v256;
    v257 = *((_QWORD *)v256 + 1);
    *v255 = v258;
    v255[1] = v257;
    v259 = (_QWORD *)((char *)a1 + v254);
    v260 = (_QWORD *)((char *)v218 + v254);
    sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v261 = v258;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      ((void (*)(_QWORD *, _QWORD *, uint64_t))v306)(v259, v260, v308);
    }
    else
    {
      *v259 = *v260;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v262 = v219[8];
    v263 = (char *)a1 + v262;
    v264 = (char *)v218 + v262;
    sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v315(v263, v264, v317);
    }
    else
    {
      *(_QWORD *)v263 = *(_QWORD *)v264;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v265 = v219[9];
    v266 = (_QWORD *)((char *)a1 + v265);
    v267 = (_QWORD *)((char *)v218 + v265);
    sub_24159D6B0(0, &qword_25713A1D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB418], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v268 = sub_2416B9FA0();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v268 - 8) + 16))(v266, v267, v268);
    }
    else
    {
      *v266 = *v267;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v269 = v219[10];
    v270 = v219[11];
    v271 = (char *)a1 + v269;
    v272 = (char *)v218 + v269;
    v273 = *((_QWORD *)v272 + 1);
    *(_QWORD *)v271 = *(_QWORD *)v272;
    *((_QWORD *)v271 + 1) = v273;
    v271[16] = v272[16];
    v274 = (char *)a1 + v270;
    v275 = (char *)v218 + v270;
    *v274 = *v275;
    *((_QWORD *)v274 + 1) = *((_QWORD *)v275 + 1);
    v276 = v219[12];
    v277 = v219[13];
    v278 = (char *)a1 + v276;
    v279 = (char *)v218 + v276;
    *v278 = *v279;
    *((_QWORD *)v278 + 1) = *((_QWORD *)v279 + 1);
    v280 = (_QWORD *)((char *)a1 + v277);
    v281 = (_QWORD *)((char *)v218 + v277);
    v282 = v281[1];
    *v280 = *v281;
    v280[1] = v282;
    v283 = v219[14];
    v284 = (_QWORD *)((char *)a1 + v283);
    v285 = (_QWORD *)((char *)v218 + v283);
    v286 = v285[1];
    *v284 = *v285;
    v284[1] = v286;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v27;
}

void sub_2415B2870(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_2415B288C(uint64_t a1, int *a2)
{
  id *v4;
  id *v5;
  int *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  id *v33;
  char *v34;
  char *v35;
  uint64_t *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  id *v41;
  uint64_t v42;
  char *v43;
  int *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *);
  uint64_t v64;
  unsigned int (*v65)(char *, uint64_t, uint64_t);
  int *v66;
  void (*v67)(char *, uint64_t);

  swift_release();
  v59 = a2;
  v60 = a1;
  v4 = (id *)(a1 + a2[5]);

  v66 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v5 = (id *)((char *)v4 + v66[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v6 = (int *)type metadata accessor for MedicalIDData();
  v7 = (char *)v5 + v6[13];
  v8 = sub_2416B9B50();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  v11 = (char *)v5 + v6[14];
  if (!v10(v11, 1, v8))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = (uint64_t *)((char *)v5 + v6[19]);
  v13 = v12[1];
  if (v13 >> 60 != 15)
    sub_2415A0DAC(*v12, v13);
  v14 = (char *)v5 + v6[20];
  v15 = sub_2416B9A18();
  v61 = *(_QWORD *)(v15 - 8);
  v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48);
  if (!v65(v14, 1, v15))
    (*(void (**)(char *, uint64_t))(v61 + 8))(v14, v15);

  v16 = (char *)v5 + v6[22];
  if (!v10(v16, 1, v8))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
  v62 = v9;
  v17 = (char *)v4 + v66[6];
  v18 = sub_2416B9C70();
  v63 = *(void (**)(char *))(*(_QWORD *)(v18 - 8) + 8);
  v64 = v18;
  v63(v17);

  v19 = (char *)v4 + v66[8];
  v20 = sub_2416B9C10();
  v67 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
  v67(v19, v20);
  v21 = (char *)v4 + v66[9];
  swift_bridgeObjectRelease();
  v22 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v23 = &v21[v22[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v24 = &v23[v6[13]];
  if (!v10(v24, 1, v8))
    (*(void (**)(char *, uint64_t))(v62 + 8))(v24, v8);
  v25 = &v23[v6[14]];
  if (!v10(v25, 1, v8))
    (*(void (**)(char *, uint64_t))(v62 + 8))(v25, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = (uint64_t *)&v23[v6[19]];
  v27 = v26[1];
  if (v27 >> 60 != 15)
    sub_2415A0DAC(*v26, v27);
  v28 = &v23[v6[20]];
  if (!v65(v28, 1, v15))
    (*(void (**)(char *, uint64_t))(v61 + 8))(v28, v15);

  v29 = &v23[v6[22]];
  if (!v10(v29, 1, v8))
    (*(void (**)(char *, uint64_t))(v62 + 8))(v29, v8);
  v67(&v21[v22[6]], v20);
  v30 = &v21[v22[7]];
  v67(v30, v20);

  v31 = &v21[v22[8]];
  v67(v31, v20);
  v32 = type metadata accessor for MedicalIDWeightFormatter();

  v33 = (id *)((char *)v4 + v66[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v34 = (char *)v33 + v6[13];
  if (!v10(v34, 1, v8))
    (*(void (**)(char *, uint64_t))(v62 + 8))(v34, v8);
  v35 = (char *)v33 + v6[14];
  if (!v10(v35, 1, v8))
    (*(void (**)(char *, uint64_t))(v62 + 8))(v35, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36 = (uint64_t *)((char *)v33 + v6[19]);
  v37 = v36[1];
  if (v37 >> 60 != 15)
    sub_2415A0DAC(*v36, v37);
  v38 = (char *)v33 + v6[20];
  if (!v65(v38, 1, v15))
    (*(void (**)(char *, uint64_t))(v61 + 8))(v38, v15);
  v58 = v15;

  v39 = (char *)v33 + v6[22];
  if (!v10(v39, 1, v8))
    (*(void (**)(char *, uint64_t))(v62 + 8))(v39, v8);
  v40 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v63)((char *)v33 + v40[5], v64);
  v67((char *)v33 + v40[6], v20);

  swift_bridgeObjectRelease();
  v41 = (id *)((char *)v4 + v66[11]);

  v42 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v63)((char *)v41 + *(int *)(v42 + 20), v64);
  v67((char *)v41 + *(int *)(v42 + 24), v20);
  v43 = (char *)v4 + v66[12];
  swift_bridgeObjectRelease();
  v44 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v45 = &v43[v44[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v46 = &v45[v6[13]];
  if (!v10(v46, 1, v8))
    (*(void (**)(char *, uint64_t))(v62 + 8))(v46, v8);
  v47 = &v45[v6[14]];
  if (!v10(v47, 1, v8))
    (*(void (**)(char *, uint64_t))(v62 + 8))(v47, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v48 = (uint64_t *)&v45[v6[19]];
  v49 = v48[1];
  if (v49 >> 60 != 15)
    sub_2415A0DAC(*v48, v49);
  v50 = &v45[v6[20]];
  if (!v65(v50, 1, v58))
    (*(void (**)(char *, uint64_t))(v61 + 8))(v50, v58);

  v51 = &v45[v6[22]];
  if (!v10(v51, 1, v8))
    (*(void (**)(char *, uint64_t))(v62 + 8))(v51, v8);
  ((void (*)(char *, uint64_t))v63)(&v43[v44[6]], v64);
  v67(&v43[v44[7]], v20);
  swift_release();
  v52 = &v43[v44[9]];
  if (!v10(v52, 1, v8))
    (*(void (**)(char *, uint64_t))(v62 + 8))(v52, v8);

  v53 = v60 + v59[7];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    ((void (*)(uint64_t, uint64_t))v63)(v53, v64);
  else
    swift_release();
  v54 = (char *)(v60 + v59[8]);
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v67(v54, v20);
  else
    swift_release();
  v55 = v60 + v59[9];
  sub_24159D6B0(0, &qword_25713A1D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB418], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v56 = sub_2416B9FA0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v55, v56);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *sub_2415B3220(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  id v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  char *v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  id v142;
  id v143;
  id v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  id v174;
  uint64_t v175;
  int *v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  id v193;
  id v194;
  id v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  char *v212;
  id v213;
  id v214;
  uint64_t v215;
  int *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  char *v242;
  char *v243;
  id v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  char *v253;
  uint64_t v254;
  void *v255;
  _QWORD *v256;
  _QWORD *v257;
  id v258;
  uint64_t v259;
  char *v260;
  char *v261;
  uint64_t v262;
  _QWORD *v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  char *v269;
  uint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  _QWORD *v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  uint64_t v283;
  char *v285;
  void *v287;
  char *__dst;
  char *__dsta;
  void *__dstb;
  int *v291;
  void *v292;
  char *v293;
  char *v294;
  char *v295;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int (*v301)(char *, uint64_t, uint64_t);
  char *v302;
  int *v303;
  void *v304;
  void (*v305)(char *, char *);
  void *v306;
  uint64_t v307;
  int *v308;
  char *v309;
  char *v310;
  char *v311;
  uint64_t v312;
  void *v313;
  void (*v314)(char *, char *, uint64_t);
  char *v315;
  uint64_t v316;
  unsigned int (*v317)(char *, uint64_t, uint64_t);
  int *v318;

  *a1 = *a2;
  v3 = a3[5];
  v4 = (char *)a1 + v3;
  v5 = (char *)a2 + v3;
  v313 = *(void **)((char *)a2 + v3);
  *(_QWORD *)((char *)a1 + v3) = v313;
  v308 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v310 = v5;
  v6 = v308[5];
  v7 = &v4[v6];
  v8 = &v5[v6];
  v9 = *(_QWORD *)&v5[v6 + 8];
  *(_QWORD *)v7 = *(_QWORD *)&v5[v6];
  *((_QWORD *)v7 + 1) = v9;
  v11 = *(_QWORD *)&v5[v6 + 16];
  v10 = *(_QWORD *)&v5[v6 + 24];
  *((_QWORD *)v7 + 2) = v11;
  *((_QWORD *)v7 + 3) = v10;
  v12 = *((_QWORD *)v8 + 5);
  v302 = v4;
  *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
  *((_QWORD *)v7 + 5) = v12;
  v13 = *((_QWORD *)v8 + 7);
  *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
  *((_QWORD *)v7 + 7) = v13;
  v14 = *((_QWORD *)v8 + 9);
  *((_QWORD *)v7 + 8) = *((_QWORD *)v8 + 8);
  *((_QWORD *)v7 + 9) = v14;
  v15 = *((_QWORD *)v8 + 11);
  *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
  *((_QWORD *)v7 + 11) = v15;
  v304 = (void *)*((_QWORD *)v8 + 12);
  v306 = (void *)*((_QWORD *)v8 + 13);
  *((_QWORD *)v7 + 12) = v304;
  *((_QWORD *)v7 + 13) = v306;
  v318 = (int *)type metadata accessor for MedicalIDData();
  v16 = v318[13];
  v315 = &v7[v16];
  v17 = &v8[v16];
  v18 = sub_2416B9B50();
  v312 = *(_QWORD *)(v18 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v312 + 48);
  swift_retain();
  v20 = v313;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v304;
  v22 = v306;
  v317 = v19;
  if (v19(v17, 1, v18))
  {
    sub_2415A0A74(0);
    memcpy(v315, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    v24 = v312;
  }
  else
  {
    v24 = v312;
    (*(void (**)(char *, char *, uint64_t))(v312 + 16))(v315, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v312 + 56))(v315, 0, 1, v18);
  }
  v25 = v318[14];
  v26 = &v7[v25];
  v27 = &v8[v25];
  if (v317(&v8[v25], 1, v18))
  {
    sub_2415A0A74(0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v26, v27, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v18);
  }
  v29 = v318[15];
  v30 = &v7[v29];
  v31 = &v8[v29];
  v32 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = v32;
  v33 = v318[16];
  v34 = &v7[v33];
  v35 = &v8[v33];
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = v36;
  v7[v318[17]] = v8[v318[17]];
  v7[v318[18]] = v8[v318[18]];
  v37 = v318[19];
  v38 = &v7[v37];
  v39 = (uint64_t *)&v8[v37];
  v40 = *(_QWORD *)&v8[v37 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v40 >> 60 == 15)
  {
    *(_OWORD *)v38 = *(_OWORD *)v39;
  }
  else
  {
    v41 = *v39;
    sub_2415A0A90(*v39, v40);
    *(_QWORD *)v38 = v41;
    *((_QWORD *)v38 + 1) = v40;
  }
  v42 = v318[20];
  v43 = &v7[v42];
  v44 = &v8[v42];
  v45 = sub_2416B9A18();
  v46 = *(_QWORD *)(v45 - 8);
  v301 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
  if (v301(v44, 1, v45))
  {
    sub_2415B2870(0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  v48 = v318[21];
  v49 = *(void **)&v8[v48];
  *(_QWORD *)&v7[v48] = v49;
  v50 = v318[22];
  v51 = &v7[v50];
  v52 = &v8[v50];
  v53 = v49;
  v298 = v46;
  v299 = v45;
  v300 = v18;
  if (v317(v52, 1, v18))
  {
    sub_2415A0A74(0);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v51, v52, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v51, 0, 1, v18);
  }
  v55 = v308[6];
  v56 = &v302[v55];
  v57 = &v310[v55];
  v58 = sub_2416B9C70();
  v305 = *(void (**)(char *, char *))(*(_QWORD *)(v58 - 8) + 16);
  v307 = v58;
  v305(v56, v57);
  v59 = v308[7];
  v60 = *(void **)&v310[v59];
  *(_QWORD *)&v302[v59] = v60;
  v61 = v308[8];
  v62 = &v302[v61];
  v63 = &v310[v61];
  v64 = sub_2416B9C10();
  v65 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16);
  v66 = v60;
  v314 = v65;
  v316 = v64;
  v65(v62, v63, v64);
  v67 = v308[9];
  v68 = &v302[v67];
  v69 = &v310[v67];
  v70 = *(_QWORD *)&v310[v67 + 8];
  *(_QWORD *)v68 = *(_QWORD *)&v310[v67];
  *((_QWORD *)v68 + 1) = v70;
  v291 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v293 = v69;
  v71 = v291[5];
  v285 = v68;
  v72 = &v68[v71];
  v73 = &v69[v71];
  v74 = *(_QWORD *)&v69[v71 + 8];
  *(_QWORD *)v72 = *(_QWORD *)&v69[v71];
  *((_QWORD *)v72 + 1) = v74;
  v76 = *(_QWORD *)&v69[v71 + 16];
  v75 = *(_QWORD *)&v69[v71 + 24];
  *((_QWORD *)v72 + 2) = v76;
  *((_QWORD *)v72 + 3) = v75;
  v77 = *((_QWORD *)v73 + 5);
  *((_QWORD *)v72 + 4) = *((_QWORD *)v73 + 4);
  *((_QWORD *)v72 + 5) = v77;
  v78 = *((_QWORD *)v73 + 7);
  *((_QWORD *)v72 + 6) = *((_QWORD *)v73 + 6);
  *((_QWORD *)v72 + 7) = v78;
  v79 = *((_QWORD *)v73 + 9);
  *((_QWORD *)v72 + 8) = *((_QWORD *)v73 + 8);
  *((_QWORD *)v72 + 9) = v79;
  v80 = *((_QWORD *)v73 + 11);
  *((_QWORD *)v72 + 10) = *((_QWORD *)v73 + 10);
  *((_QWORD *)v72 + 11) = v80;
  v81 = (void *)*((_QWORD *)v73 + 12);
  v287 = (void *)*((_QWORD *)v73 + 13);
  *((_QWORD *)v72 + 12) = v81;
  *((_QWORD *)v72 + 13) = v287;
  v82 = v318[13];
  __dst = &v72[v82];
  v83 = &v73[v82];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v84 = v81;
  v85 = v287;
  if (v317(v83, 1, v18))
  {
    sub_2415A0A74(0);
    memcpy(__dst, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    v87 = v312;
  }
  else
  {
    v87 = v312;
    (*(void (**)(char *, char *, uint64_t))(v312 + 16))(__dst, v83, v300);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v312 + 56))(__dst, 0, 1, v300);
  }
  v88 = v318[14];
  v89 = &v72[v88];
  v90 = &v73[v88];
  if (v317(&v73[v88], 1, v300))
  {
    sub_2415A0A74(0);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v89, v90, v300);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v89, 0, 1, v300);
  }
  v92 = v318[15];
  v93 = &v72[v92];
  v94 = &v73[v92];
  v95 = *((_QWORD *)v94 + 1);
  *(_QWORD *)v93 = *(_QWORD *)v94;
  *((_QWORD *)v93 + 1) = v95;
  v96 = v318[16];
  v97 = &v72[v96];
  v98 = &v73[v96];
  v99 = *((_QWORD *)v98 + 1);
  *(_QWORD *)v97 = *(_QWORD *)v98;
  *((_QWORD *)v97 + 1) = v99;
  v72[v318[17]] = v73[v318[17]];
  v72[v318[18]] = v73[v318[18]];
  v100 = v318[19];
  v101 = &v72[v100];
  v102 = (uint64_t *)&v73[v100];
  v103 = *(_QWORD *)&v73[v100 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v103 >> 60 == 15)
  {
    *(_OWORD *)v101 = *(_OWORD *)v102;
  }
  else
  {
    v104 = *v102;
    sub_2415A0A90(*v102, v103);
    *(_QWORD *)v101 = v104;
    *((_QWORD *)v101 + 1) = v103;
  }
  v105 = v318[20];
  v106 = &v72[v105];
  v107 = &v73[v105];
  if (v301(&v73[v105], 1, v299))
  {
    sub_2415B2870(0);
    memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v298 + 16))(v106, v107, v299);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v298 + 56))(v106, 0, 1, v299);
  }
  v109 = v318[21];
  v110 = *(void **)&v73[v109];
  *(_QWORD *)&v72[v109] = v110;
  v111 = v318[22];
  v112 = &v72[v111];
  v113 = &v73[v111];
  v114 = v110;
  if (v317(v113, 1, v300))
  {
    sub_2415A0A74(0);
    memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v112, v113, v300);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v112, 0, 1, v300);
  }
  v314(&v285[v291[6]], &v293[v291[6]], v316);
  v116 = v291[7];
  v117 = &v285[v116];
  v118 = &v293[v116];
  v314(&v285[v116], &v293[v116], v316);
  v119 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v120 = *(void **)&v118[v119];
  *(_QWORD *)&v117[v119] = v120;
  v121 = v291[8];
  v122 = &v285[v121];
  v123 = &v293[v121];
  v124 = v120;
  v314(v122, v123, v316);
  v125 = type metadata accessor for MedicalIDWeightFormatter();
  v126 = *(int *)(v125 + 20);
  v127 = *(void **)&v123[v126];
  *(_QWORD *)&v122[v126] = v127;
  v128 = *(int *)(v125 + 24);
  v129 = *(void **)&v123[v128];
  *(_QWORD *)&v122[v128] = v129;
  v130 = v308[10];
  v131 = &v302[v130];
  v132 = &v310[v130];
  v133 = *(_QWORD *)&v310[v130 + 8];
  *(_QWORD *)v131 = *(_QWORD *)&v310[v130];
  *((_QWORD *)v131 + 1) = v133;
  v135 = *(_QWORD *)&v310[v130 + 16];
  v134 = *(_QWORD *)&v310[v130 + 24];
  *((_QWORD *)v131 + 2) = v135;
  *((_QWORD *)v131 + 3) = v134;
  v136 = *((_QWORD *)v132 + 5);
  *((_QWORD *)v131 + 4) = *((_QWORD *)v132 + 4);
  *((_QWORD *)v131 + 5) = v136;
  v137 = *((_QWORD *)v132 + 7);
  *((_QWORD *)v131 + 6) = *((_QWORD *)v132 + 6);
  *((_QWORD *)v131 + 7) = v137;
  v138 = *((_QWORD *)v132 + 9);
  *((_QWORD *)v131 + 8) = *((_QWORD *)v132 + 8);
  *((_QWORD *)v131 + 9) = v138;
  v139 = *((_QWORD *)v132 + 11);
  *((_QWORD *)v131 + 10) = *((_QWORD *)v132 + 10);
  *((_QWORD *)v131 + 11) = v139;
  v140 = (void *)*((_QWORD *)v132 + 12);
  v292 = (void *)*((_QWORD *)v132 + 13);
  *((_QWORD *)v131 + 12) = v140;
  *((_QWORD *)v131 + 13) = v292;
  v141 = v318[13];
  v294 = &v131[v141];
  __dsta = &v132[v141];
  v142 = v127;
  v143 = v129;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v144 = v140;
  v145 = v292;
  if (v317(__dsta, 1, v300))
  {
    sub_2415A0A74(0);
    memcpy(v294, __dsta, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v312 + 16))(v294, __dsta, v300);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v312 + 56))(v294, 0, 1, v300);
  }
  v147 = v318[14];
  v148 = &v131[v147];
  v149 = &v132[v147];
  if (v317(&v132[v147], 1, v300))
  {
    v150 = v300;
    sub_2415A0A74(0);
    memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v312 + 16))(v148, v149, v300);
    v150 = v300;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v312 + 56))(v148, 0, 1, v300);
  }
  v152 = v318[15];
  v153 = &v131[v152];
  v154 = &v132[v152];
  v155 = *((_QWORD *)v154 + 1);
  *(_QWORD *)v153 = *(_QWORD *)v154;
  *((_QWORD *)v153 + 1) = v155;
  v156 = v318[16];
  v157 = &v131[v156];
  v158 = &v132[v156];
  v159 = *((_QWORD *)v158 + 1);
  *(_QWORD *)v157 = *(_QWORD *)v158;
  *((_QWORD *)v157 + 1) = v159;
  v131[v318[17]] = v132[v318[17]];
  v131[v318[18]] = v132[v318[18]];
  v160 = v318[19];
  v161 = &v131[v160];
  v162 = (uint64_t *)&v132[v160];
  v163 = *(_QWORD *)&v132[v160 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v163 >> 60 == 15)
  {
    *(_OWORD *)v161 = *(_OWORD *)v162;
  }
  else
  {
    v164 = *v162;
    sub_2415A0A90(*v162, v163);
    *(_QWORD *)v161 = v164;
    *((_QWORD *)v161 + 1) = v163;
  }
  v165 = v318[20];
  v166 = &v131[v165];
  v167 = &v132[v165];
  if (v301(&v132[v165], 1, v299))
  {
    sub_2415B2870(0);
    memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v298 + 16))(v166, v167, v299);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v298 + 56))(v166, 0, 1, v299);
  }
  v169 = v318[21];
  v170 = *(void **)&v132[v169];
  *(_QWORD *)&v131[v169] = v170;
  v171 = v318[22];
  v172 = &v131[v171];
  v173 = &v132[v171];
  v174 = v170;
  if (v317(v173, 1, v150))
  {
    sub_2415A0A74(0);
    memcpy(v172, v173, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v312 + 16))(v172, v173, v150);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v312 + 56))(v172, 0, 1, v150);
  }
  v176 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v305)(&v131[v176[5]], &v132[v176[5]], v307);
  v314(&v131[v176[6]], &v132[v176[6]], v316);
  v177 = v176[7];
  v178 = *(void **)&v132[v177];
  *(_QWORD *)&v131[v177] = v178;
  v179 = v176[8];
  v180 = *(void **)&v132[v179];
  *(_QWORD *)&v131[v179] = v180;
  v181 = v176[9];
  v182 = &v131[v181];
  v183 = &v132[v181];
  v184 = *((_QWORD *)v183 + 1);
  *(_QWORD *)v182 = *(_QWORD *)v183;
  *((_QWORD *)v182 + 1) = v184;
  v185 = v308[11];
  v186 = &v302[v185];
  v187 = &v310[v185];
  v188 = *(void **)&v310[v185];
  *(_QWORD *)&v302[v185] = v188;
  v189 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v190 = *(int *)(v189 + 20);
  v191 = &v186[v190];
  v192 = &v187[v190];
  v193 = v178;
  v194 = v180;
  swift_bridgeObjectRetain();
  v195 = v188;
  ((void (*)(char *, char *, uint64_t))v305)(v191, v192, v307);
  v314(&v186[*(int *)(v189 + 24)], &v187[*(int *)(v189 + 24)], v316);
  v196 = v308[12];
  v197 = &v302[v196];
  v198 = &v310[v196];
  v199 = *(_QWORD *)&v310[v196 + 8];
  *(_QWORD *)v197 = *(_QWORD *)&v310[v196];
  *((_QWORD *)v197 + 1) = v199;
  v303 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v200 = v303[5];
  v309 = v197;
  v311 = v198;
  v201 = &v197[v200];
  v202 = &v198[v200];
  v203 = *(_QWORD *)&v198[v200];
  v204 = *((_QWORD *)v202 + 1);
  *(_QWORD *)v201 = v203;
  *((_QWORD *)v201 + 1) = v204;
  v205 = *((_QWORD *)v202 + 3);
  *((_QWORD *)v201 + 2) = *((_QWORD *)v202 + 2);
  *((_QWORD *)v201 + 3) = v205;
  v206 = *((_QWORD *)v202 + 5);
  *((_QWORD *)v201 + 4) = *((_QWORD *)v202 + 4);
  *((_QWORD *)v201 + 5) = v206;
  v207 = *((_QWORD *)v202 + 7);
  *((_QWORD *)v201 + 6) = *((_QWORD *)v202 + 6);
  *((_QWORD *)v201 + 7) = v207;
  v208 = *((_QWORD *)v202 + 9);
  *((_QWORD *)v201 + 8) = *((_QWORD *)v202 + 8);
  *((_QWORD *)v201 + 9) = v208;
  v209 = *((_QWORD *)v202 + 11);
  *((_QWORD *)v201 + 10) = *((_QWORD *)v202 + 10);
  *((_QWORD *)v201 + 11) = v209;
  v210 = (void *)*((_QWORD *)v202 + 12);
  __dstb = (void *)*((_QWORD *)v202 + 13);
  *((_QWORD *)v201 + 12) = v210;
  *((_QWORD *)v201 + 13) = __dstb;
  v211 = v318[13];
  v295 = &v201[v211];
  v212 = &v202[v211];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v213 = v210;
  v214 = __dstb;
  if (v317(v212, 1, v300))
  {
    sub_2415A0A74(0);
    memcpy(v295, v212, *(_QWORD *)(*(_QWORD *)(v215 - 8) + 64));
    v216 = a3;
    v217 = v312;
  }
  else
  {
    v217 = v312;
    (*(void (**)(char *, char *, uint64_t))(v312 + 16))(v295, v212, v300);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v312 + 56))(v295, 0, 1, v300);
    v216 = a3;
  }
  v218 = v318[14];
  v219 = &v201[v218];
  v220 = &v202[v218];
  if (v317(&v202[v218], 1, v300))
  {
    sub_2415A0A74(0);
    memcpy(v219, v220, *(_QWORD *)(*(_QWORD *)(v221 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v219, v220, v300);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v219, 0, 1, v300);
  }
  v222 = v318[15];
  v223 = &v201[v222];
  v224 = &v202[v222];
  v225 = *((_QWORD *)v224 + 1);
  *(_QWORD *)v223 = *(_QWORD *)v224;
  *((_QWORD *)v223 + 1) = v225;
  v226 = v318[16];
  v227 = &v201[v226];
  v228 = &v202[v226];
  v229 = *((_QWORD *)v228 + 1);
  *(_QWORD *)v227 = *(_QWORD *)v228;
  *((_QWORD *)v227 + 1) = v229;
  v201[v318[17]] = v202[v318[17]];
  v201[v318[18]] = v202[v318[18]];
  v230 = v318[19];
  v231 = &v201[v230];
  v232 = (uint64_t *)&v202[v230];
  v233 = *(_QWORD *)&v202[v230 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v233 >> 60 == 15)
  {
    *(_OWORD *)v231 = *(_OWORD *)v232;
  }
  else
  {
    v234 = *v232;
    sub_2415A0A90(*v232, v233);
    *(_QWORD *)v231 = v234;
    *((_QWORD *)v231 + 1) = v233;
  }
  v235 = v318[20];
  v236 = &v201[v235];
  v237 = &v202[v235];
  if (v301(&v202[v235], 1, v299))
  {
    sub_2415B2870(0);
    memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v298 + 16))(v236, v237, v299);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v298 + 56))(v236, 0, 1, v299);
  }
  v239 = v318[21];
  v240 = *(void **)&v202[v239];
  *(_QWORD *)&v201[v239] = v240;
  v241 = v318[22];
  v242 = &v201[v241];
  v243 = &v202[v241];
  v244 = v240;
  if (v317(v243, 1, v300))
  {
    sub_2415A0A74(0);
    memcpy(v242, v243, *(_QWORD *)(*(_QWORD *)(v245 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v242, v243, v300);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v242, 0, 1, v300);
  }
  ((void (*)(char *, char *, uint64_t))v305)(&v309[v303[6]], &v311[v303[6]], v307);
  v314(&v309[v303[7]], &v311[v303[7]], v316);
  *(_QWORD *)&v309[v303[8]] = *(_QWORD *)&v311[v303[8]];
  v246 = v303[9];
  v247 = &v309[v246];
  v248 = &v311[v246];
  swift_retain();
  if (v317(v248, 1, v300))
  {
    sub_2415A0A74(0);
    memcpy(v247, v248, *(_QWORD *)(*(_QWORD *)(v249 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v247, v248, v300);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v247, 0, 1, v300);
  }
  v250 = v216[6];
  v251 = v216[7];
  v252 = (_QWORD *)((char *)a1 + v250);
  v253 = (char *)a2 + v250;
  v255 = *(void **)v253;
  v254 = *((_QWORD *)v253 + 1);
  *v252 = v255;
  v252[1] = v254;
  v256 = (_QWORD *)((char *)a1 + v251);
  v257 = (_QWORD *)((char *)a2 + v251);
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v258 = v255;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    ((void (*)(_QWORD *, _QWORD *, uint64_t))v305)(v256, v257, v307);
  }
  else
  {
    *v256 = *v257;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v259 = v216[8];
  v260 = (char *)a1 + v259;
  v261 = (char *)a2 + v259;
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v314(v260, v261, v316);
  }
  else
  {
    *(_QWORD *)v260 = *(_QWORD *)v261;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v262 = v216[9];
  v263 = (_QWORD *)((char *)a1 + v262);
  v264 = (_QWORD *)((char *)a2 + v262);
  sub_24159D6B0(0, &qword_25713A1D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB418], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v265 = sub_2416B9FA0();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v265 - 8) + 16))(v263, v264, v265);
  }
  else
  {
    *v263 = *v264;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v266 = v216[10];
  v267 = v216[11];
  v268 = (char *)a1 + v266;
  v269 = (char *)a2 + v266;
  v270 = *((_QWORD *)v269 + 1);
  *(_QWORD *)v268 = *(_QWORD *)v269;
  *((_QWORD *)v268 + 1) = v270;
  v268[16] = v269[16];
  v271 = (char *)a1 + v267;
  v272 = (char *)a2 + v267;
  *v271 = *v272;
  *((_QWORD *)v271 + 1) = *((_QWORD *)v272 + 1);
  v273 = v216[12];
  v274 = v216[13];
  v275 = (char *)a1 + v273;
  v276 = (char *)a2 + v273;
  *v275 = *v276;
  *((_QWORD *)v275 + 1) = *((_QWORD *)v276 + 1);
  v277 = (_QWORD *)((char *)a1 + v274);
  v278 = (_QWORD *)((char *)a2 + v274);
  v279 = v278[1];
  *v277 = *v278;
  v277[1] = v279;
  v280 = v216[14];
  v281 = (_QWORD *)((char *)a1 + v280);
  v282 = (_QWORD *)((char *)a2 + v280);
  v283 = v282[1];
  *v281 = *v282;
  v281[1] = v283;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_2415B4460(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  void **v7;
  char *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  id v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  void *v84;
  void *v85;
  id v86;
  void *v87;
  void *v88;
  id v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  id v124;
  uint64_t v125;
  char *v126;
  char *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  void *v134;
  void *v135;
  id v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  id v144;
  uint64_t v145;
  void *v146;
  void *v147;
  id v148;
  uint64_t v149;
  char *v150;
  char *v151;
  void *v152;
  void *v153;
  id v154;
  void *v155;
  void *v156;
  id v157;
  uint64_t v158;
  char *v159;
  char *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  void *v191;
  id v192;
  uint64_t v193;
  char *v194;
  char *v195;
  int v196;
  uint64_t v197;
  int *v198;
  uint64_t v199;
  void *v200;
  void *v201;
  id v202;
  uint64_t v203;
  void *v204;
  void *v205;
  id v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  void **v211;
  char *v212;
  void *v213;
  void *v214;
  id v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  char *v222;
  void *v223;
  void *v224;
  id v225;
  void *v226;
  void *v227;
  id v228;
  uint64_t v229;
  char *v230;
  char *v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  int v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  char *v255;
  char *v256;
  int v257;
  int v258;
  uint64_t (*v259)(char *, uint64_t, uint64_t);
  uint64_t v260;
  uint64_t v261;
  void *v262;
  void *v263;
  id v264;
  uint64_t v265;
  char *v266;
  char *v267;
  int v268;
  _QWORD *v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  int v275;
  int v276;
  int *v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  void *v282;
  void *v283;
  id v284;
  uint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  uint64_t (*v288)(uint64_t);
  uint64_t (*v289)(uint64_t, uint64_t);
  uint64_t v290;
  _QWORD *v291;
  _QWORD *v292;
  uint64_t (*v293)(uint64_t);
  uint64_t v294;
  _QWORD *v295;
  _QWORD *v296;
  uint64_t (*v297)(uint64_t);
  uint64_t (*v298)(uint64_t, uint64_t);
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  _QWORD *v311;
  uint64_t v312;
  _QWORD *v313;
  _QWORD *v314;
  uint64_t v316;
  uint64_t v317;
  int *v318;
  char *v319;
  int *v320;
  _QWORD *v321;
  _QWORD *v322;
  void (*v323)(char *, char *);
  uint64_t v324;
  uint64_t v325;
  void (*v326)(char *, char *);
  int *v327;
  uint64_t (*v328)(char *, uint64_t, uint64_t);
  char *v329;
  int *v330;
  void **v331;
  char *v332;
  uint64_t v333;
  uint64_t (*v334)(char *, uint64_t, uint64_t);
  uint64_t v335;
  uint64_t v336;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v320 = a3;
  v321 = a2;
  v6 = a3[5];
  v322 = a1;
  v7 = (void **)((char *)a1 + v6);
  v8 = (char *)a2 + v6;
  v9 = *(void **)((char *)a2 + v6);
  v10 = *v7;
  *v7 = v9;
  v11 = v9;

  v327 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v12 = v327[5];
  v329 = v8;
  v331 = v7;
  v13 = (char *)v7 + v12;
  v14 = &v8[v12];
  *(_QWORD *)v13 = *(_QWORD *)&v8[v12];
  *((_QWORD *)v13 + 1) = *(_QWORD *)&v8[v12 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
  *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
  *((_QWORD *)v13 + 6) = *((_QWORD *)v14 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
  *((_QWORD *)v13 + 8) = *((_QWORD *)v14 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v13 + 9) = *((_QWORD *)v14 + 9);
  *((_QWORD *)v13 + 10) = *((_QWORD *)v14 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v13 + 11) = *((_QWORD *)v14 + 11);
  v15 = (void *)*((_QWORD *)v13 + 12);
  v16 = (void *)*((_QWORD *)v14 + 12);
  *((_QWORD *)v13 + 12) = v16;
  v17 = v16;

  v18 = (void *)*((_QWORD *)v13 + 13);
  v19 = (void *)*((_QWORD *)v14 + 13);
  *((_QWORD *)v13 + 13) = v19;
  v20 = v19;

  v21 = (int *)type metadata accessor for MedicalIDData();
  v22 = v21[13];
  v23 = &v13[v22];
  v24 = &v14[v22];
  v25 = sub_2416B9B50();
  v336 = *(_QWORD *)(v25 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v336 + 48);
  LODWORD(v8) = v26(v23, 1, v25);
  v27 = v26(v24, 1, v25);
  if ((_DWORD)v8)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v336 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(v23, 0, 1, v25);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v336 + 8))(v23, v25);
LABEL_6:
    sub_2415A0A74(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v336 + 24))(v23, v24, v25);
LABEL_7:
  v29 = v21[14];
  v30 = &v13[v29];
  v31 = &v14[v29];
  v32 = v26(&v13[v29], 1, v25);
  v33 = v26(v31, 1, v25);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v336 + 16))(v30, v31, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(v30, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v336 + 8))(v30, v25);
LABEL_12:
    sub_2415A0A74(0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v336 + 24))(v30, v31, v25);
LABEL_13:
  v35 = v21[15];
  v36 = &v13[v35];
  v37 = &v14[v35];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = v21[16];
  v39 = &v13[v38];
  v40 = &v14[v38];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *((_QWORD *)v39 + 1) = *((_QWORD *)v40 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13[v21[17]] = v14[v21[17]];
  v13[v21[18]] = v14[v21[18]];
  v41 = v21[19];
  v42 = (uint64_t *)&v13[v41];
  v43 = (uint64_t *)&v14[v41];
  v44 = *(_QWORD *)&v14[v41 + 8];
  if (*(_QWORD *)&v13[v41 + 8] >> 60 == 15)
  {
    if (v44 >> 60 != 15)
    {
      v45 = *v43;
      sub_2415A0A90(v45, v44);
      *v42 = v45;
      v42[1] = v44;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v44 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v42);
LABEL_18:
    *(_OWORD *)v42 = *(_OWORD *)v43;
    goto LABEL_20;
  }
  v46 = *v43;
  sub_2415A0A90(v46, v44);
  v47 = *v42;
  v48 = v42[1];
  *v42 = v46;
  v42[1] = v44;
  sub_2415A0DAC(v47, v48);
LABEL_20:
  v49 = v21[20];
  v50 = &v13[v49];
  v51 = &v14[v49];
  v52 = sub_2416B9A18();
  v325 = *(_QWORD *)(v52 - 8);
  v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v325 + 48);
  v54 = v53(v50, 1, v52);
  v335 = v52;
  v328 = v53;
  v55 = v53(v51, 1, v52);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(v325 + 16))(v50, v51, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v325 + 56))(v50, 0, 1, v52);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v325 + 8))(v50, v52);
LABEL_25:
    sub_2415B2870(0);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v325 + 24))(v50, v51, v52);
LABEL_26:
  v57 = v21[21];
  v58 = *(void **)&v13[v57];
  v59 = *(void **)&v14[v57];
  *(_QWORD *)&v13[v57] = v59;
  v60 = v59;

  v61 = v21[22];
  v62 = &v13[v61];
  v63 = &v14[v61];
  LODWORD(v58) = v26(&v13[v61], 1, v25);
  v64 = v26(v63, 1, v25);
  if ((_DWORD)v58)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v336 + 16))(v62, v63, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(v62, 0, 1, v25);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v336 + 8))(v62, v25);
LABEL_31:
    sub_2415A0A74(0);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v336 + 24))(v62, v63, v25);
LABEL_32:
  v66 = v327[6];
  v67 = (char *)v331 + v66;
  v68 = &v329[v66];
  v69 = sub_2416B9C70();
  v316 = *(_QWORD *)(v69 - 8);
  v323 = *(void (**)(char *, char *))(v316 + 24);
  v324 = v69;
  v323(v67, v68);
  v70 = v327[7];
  v71 = *(void **)&v329[v70];
  v72 = *(void **)((char *)v331 + v70);
  *(void **)((char *)v331 + v70) = v71;
  v73 = v71;

  v74 = v327[8];
  v75 = (char *)v331 + v74;
  v76 = &v329[v74];
  v77 = sub_2416B9C10();
  v317 = *(_QWORD *)(v77 - 8);
  v333 = v77;
  v326 = *(void (**)(char *, char *))(v317 + 24);
  v326(v75, v76);
  v78 = v327[9];
  v79 = (void **)((char *)v331 + v78);
  v80 = &v329[v78];
  *v79 = *(_QWORD *)&v329[v78];
  v79[1] = *(_QWORD *)&v329[v78 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v318 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v319 = v80;
  v81 = v318[5];
  v82 = (char *)v79 + v81;
  v83 = &v80[v81];
  *(_QWORD *)v82 = *(_QWORD *)&v80[v81];
  *((_QWORD *)v82 + 1) = *(_QWORD *)&v80[v81 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v82 + 2) = *((_QWORD *)v83 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v82 + 3) = *((_QWORD *)v83 + 3);
  *((_QWORD *)v82 + 4) = *((_QWORD *)v83 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v82 + 5) = *((_QWORD *)v83 + 5);
  *((_QWORD *)v82 + 6) = *((_QWORD *)v83 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v82 + 7) = *((_QWORD *)v83 + 7);
  *((_QWORD *)v82 + 8) = *((_QWORD *)v83 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v82 + 9) = *((_QWORD *)v83 + 9);
  *((_QWORD *)v82 + 10) = *((_QWORD *)v83 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v82 + 11) = *((_QWORD *)v83 + 11);
  v84 = (void *)*((_QWORD *)v82 + 12);
  v85 = (void *)*((_QWORD *)v83 + 12);
  *((_QWORD *)v82 + 12) = v85;
  v86 = v85;

  v87 = (void *)*((_QWORD *)v82 + 13);
  v88 = (void *)*((_QWORD *)v83 + 13);
  *((_QWORD *)v82 + 13) = v88;
  v89 = v88;

  v90 = v21[13];
  v91 = &v82[v90];
  v92 = &v83[v90];
  LODWORD(v87) = v26(&v82[v90], 1, v25);
  v93 = v26(v92, 1, v25);
  if ((_DWORD)v87)
  {
    if (!v93)
    {
      (*(void (**)(char *, char *, uint64_t))(v336 + 16))(v91, v92, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(v91, 0, 1, v25);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v93)
  {
    (*(void (**)(char *, uint64_t))(v336 + 8))(v91, v25);
LABEL_37:
    sub_2415A0A74(0);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v336 + 24))(v91, v92, v25);
LABEL_38:
  v95 = v21[14];
  v96 = &v82[v95];
  v97 = &v83[v95];
  v98 = v26(&v82[v95], 1, v25);
  v99 = v26(v97, 1, v25);
  if (v98)
  {
    if (!v99)
    {
      (*(void (**)(char *, char *, uint64_t))(v336 + 16))(v96, v97, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(v96, 0, 1, v25);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v99)
  {
    (*(void (**)(char *, uint64_t))(v336 + 8))(v96, v25);
LABEL_43:
    sub_2415A0A74(0);
    memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v336 + 24))(v96, v97, v25);
LABEL_44:
  v101 = v21[15];
  v102 = &v82[v101];
  v103 = &v83[v101];
  *(_QWORD *)v102 = *(_QWORD *)v103;
  *((_QWORD *)v102 + 1) = *((_QWORD *)v103 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v104 = v21[16];
  v105 = &v82[v104];
  v106 = &v83[v104];
  *(_QWORD *)v105 = *(_QWORD *)v106;
  *((_QWORD *)v105 + 1) = *((_QWORD *)v106 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v82[v21[17]] = v83[v21[17]];
  v82[v21[18]] = v83[v21[18]];
  v107 = v21[19];
  v108 = (uint64_t *)&v82[v107];
  v109 = (uint64_t *)&v83[v107];
  v110 = *(_QWORD *)&v83[v107 + 8];
  v334 = v26;
  if (*(_QWORD *)&v82[v107 + 8] >> 60 == 15)
  {
    if (v110 >> 60 != 15)
    {
      v111 = *v109;
      sub_2415A0A90(v111, v110);
      *v108 = v111;
      v108[1] = v110;
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  if (v110 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v108);
LABEL_49:
    *(_OWORD *)v108 = *(_OWORD *)v109;
    goto LABEL_51;
  }
  v112 = *v109;
  sub_2415A0A90(v112, v110);
  v113 = *v108;
  v114 = v108[1];
  *v108 = v112;
  v108[1] = v110;
  sub_2415A0DAC(v113, v114);
LABEL_51:
  v115 = v21[20];
  v116 = &v82[v115];
  v117 = &v83[v115];
  v118 = v328(&v82[v115], 1, v335);
  v119 = v328(v117, 1, v335);
  if (v118)
  {
    if (!v119)
    {
      (*(void (**)(char *, char *, uint64_t))(v325 + 16))(v116, v117, v335);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v325 + 56))(v116, 0, 1, v335);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  if (v119)
  {
    (*(void (**)(char *, uint64_t))(v325 + 8))(v116, v335);
LABEL_56:
    sub_2415B2870(0);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(char *, char *, uint64_t))(v325 + 24))(v116, v117, v335);
LABEL_57:
  v121 = v21[21];
  v122 = *(void **)&v82[v121];
  v123 = *(void **)&v83[v121];
  *(_QWORD *)&v82[v121] = v123;
  v124 = v123;

  v125 = v21[22];
  v126 = &v82[v125];
  v127 = &v83[v125];
  LODWORD(v122) = v26(&v82[v125], 1, v25);
  v128 = v26(v127, 1, v25);
  if ((_DWORD)v122)
  {
    if (!v128)
    {
      (*(void (**)(char *, char *, uint64_t))(v336 + 16))(v126, v127, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(v126, 0, 1, v25);
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (v128)
  {
    (*(void (**)(char *, uint64_t))(v336 + 8))(v126, v25);
LABEL_62:
    sub_2415A0A74(0);
    memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v336 + 24))(v126, v127, v25);
LABEL_63:
  ((void (*)(char *, char *, uint64_t))v326)((char *)v79 + v318[6], &v319[v318[6]], v333);
  v130 = v318[7];
  v131 = (char *)v79 + v130;
  v132 = &v319[v130];
  ((void (*)(char *, char *, uint64_t))v326)((char *)v79 + v130, &v319[v130], v333);
  v133 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v134 = *(void **)&v132[v133];
  v135 = *(void **)&v131[v133];
  *(_QWORD *)&v131[v133] = v134;
  v136 = v134;

  v137 = v318[8];
  v138 = (char *)v79 + v137;
  v139 = &v319[v137];
  ((void (*)(char *, char *, uint64_t))v326)((char *)v79 + v137, &v319[v137], v333);
  v140 = type metadata accessor for MedicalIDWeightFormatter();
  v141 = *(int *)(v140 + 20);
  v142 = *(void **)&v139[v141];
  v143 = *(void **)&v138[v141];
  *(_QWORD *)&v138[v141] = v142;
  v144 = v142;

  v145 = *(int *)(v140 + 24);
  v146 = *(void **)&v139[v145];
  v147 = *(void **)&v138[v145];
  *(_QWORD *)&v138[v145] = v146;
  v148 = v146;

  v149 = v327[10];
  v150 = (char *)v331 + v149;
  v151 = &v329[v149];
  *(_QWORD *)v150 = *(_QWORD *)&v329[v149];
  *((_QWORD *)v150 + 1) = *(_QWORD *)&v329[v149 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v150 + 2) = *((_QWORD *)v151 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v150 + 3) = *((_QWORD *)v151 + 3);
  *((_QWORD *)v150 + 4) = *((_QWORD *)v151 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v150 + 5) = *((_QWORD *)v151 + 5);
  *((_QWORD *)v150 + 6) = *((_QWORD *)v151 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v150 + 7) = *((_QWORD *)v151 + 7);
  *((_QWORD *)v150 + 8) = *((_QWORD *)v151 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v150 + 9) = *((_QWORD *)v151 + 9);
  *((_QWORD *)v150 + 10) = *((_QWORD *)v151 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v150 + 11) = *((_QWORD *)v151 + 11);
  v152 = (void *)*((_QWORD *)v150 + 12);
  v153 = (void *)*((_QWORD *)v151 + 12);
  *((_QWORD *)v150 + 12) = v153;
  v154 = v153;

  v155 = (void *)*((_QWORD *)v150 + 13);
  v156 = (void *)*((_QWORD *)v151 + 13);
  *((_QWORD *)v150 + 13) = v156;
  v157 = v156;

  v158 = v21[13];
  v159 = &v150[v158];
  v160 = &v151[v158];
  LODWORD(v155) = v26(&v150[v158], 1, v25);
  v161 = v26(v160, 1, v25);
  if ((_DWORD)v155)
  {
    if (!v161)
    {
      (*(void (**)(char *, char *, uint64_t))(v336 + 16))(v159, v160, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(v159, 0, 1, v25);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v161)
  {
    (*(void (**)(char *, uint64_t))(v336 + 8))(v159, v25);
LABEL_68:
    sub_2415A0A74(0);
    memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
    goto LABEL_69;
  }
  (*(void (**)(char *, char *, uint64_t))(v336 + 24))(v159, v160, v25);
LABEL_69:
  v163 = v21[14];
  v164 = &v150[v163];
  v165 = &v151[v163];
  v166 = v26(&v150[v163], 1, v25);
  v167 = v26(v165, 1, v25);
  if (v166)
  {
    if (!v167)
    {
      (*(void (**)(char *, char *, uint64_t))(v336 + 16))(v164, v165, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(v164, 0, 1, v25);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v167)
  {
    (*(void (**)(char *, uint64_t))(v336 + 8))(v164, v25);
LABEL_74:
    sub_2415A0A74(0);
    memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(char *, char *, uint64_t))(v336 + 24))(v164, v165, v25);
LABEL_75:
  v169 = v21[15];
  v170 = &v150[v169];
  v171 = &v151[v169];
  *(_QWORD *)v170 = *(_QWORD *)v171;
  *((_QWORD *)v170 + 1) = *((_QWORD *)v171 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v172 = v21[16];
  v173 = &v150[v172];
  v174 = &v151[v172];
  *(_QWORD *)v173 = *(_QWORD *)v174;
  *((_QWORD *)v173 + 1) = *((_QWORD *)v174 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v150[v21[17]] = v151[v21[17]];
  v150[v21[18]] = v151[v21[18]];
  v175 = v21[19];
  v176 = (uint64_t *)&v150[v175];
  v177 = (uint64_t *)&v151[v175];
  v178 = *(_QWORD *)&v151[v175 + 8];
  if (*(_QWORD *)&v150[v175 + 8] >> 60 == 15)
  {
    if (v178 >> 60 != 15)
    {
      v179 = *v177;
      sub_2415A0A90(v179, v178);
      *v176 = v179;
      v176[1] = v178;
      goto LABEL_82;
    }
    goto LABEL_80;
  }
  if (v178 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v176);
LABEL_80:
    *(_OWORD *)v176 = *(_OWORD *)v177;
    goto LABEL_82;
  }
  v180 = *v177;
  sub_2415A0A90(v180, v178);
  v181 = *v176;
  v182 = v176[1];
  *v176 = v180;
  v176[1] = v178;
  sub_2415A0DAC(v181, v182);
LABEL_82:
  v183 = v21[20];
  v184 = &v150[v183];
  v185 = &v151[v183];
  v186 = v328(&v150[v183], 1, v335);
  v187 = v328(v185, 1, v335);
  if (v186)
  {
    if (!v187)
    {
      (*(void (**)(char *, char *, uint64_t))(v325 + 16))(v184, v185, v335);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v325 + 56))(v184, 0, 1, v335);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v187)
  {
    (*(void (**)(char *, uint64_t))(v325 + 8))(v184, v335);
LABEL_87:
    sub_2415B2870(0);
    memcpy(v184, v185, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v325 + 24))(v184, v185, v335);
LABEL_88:
  v189 = v21[21];
  v190 = *(void **)&v150[v189];
  v191 = *(void **)&v151[v189];
  *(_QWORD *)&v150[v189] = v191;
  v192 = v191;

  v193 = v21[22];
  v194 = &v150[v193];
  v195 = &v151[v193];
  LODWORD(v190) = v26(&v150[v193], 1, v25);
  v196 = v26(v195, 1, v25);
  if ((_DWORD)v190)
  {
    if (!v196)
    {
      (*(void (**)(char *, char *, uint64_t))(v336 + 16))(v194, v195, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(v194, 0, 1, v25);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v196)
  {
    (*(void (**)(char *, uint64_t))(v336 + 8))(v194, v25);
LABEL_93:
    sub_2415A0A74(0);
    memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v336 + 24))(v194, v195, v25);
LABEL_94:
  v198 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v323)(&v150[v198[5]], &v151[v198[5]], v324);
  ((void (*)(char *, char *, uint64_t))v326)(&v150[v198[6]], &v151[v198[6]], v333);
  v199 = v198[7];
  v200 = *(void **)&v150[v199];
  v201 = *(void **)&v151[v199];
  *(_QWORD *)&v150[v199] = v201;
  v202 = v201;

  v203 = v198[8];
  v204 = *(void **)&v151[v203];
  v205 = *(void **)&v150[v203];
  *(_QWORD *)&v150[v203] = v204;
  v206 = v204;

  v207 = v198[9];
  v208 = &v150[v207];
  v209 = &v151[v207];
  *(_QWORD *)v208 = *(_QWORD *)v209;
  *((_QWORD *)v208 + 1) = *((_QWORD *)v209 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v210 = v327[11];
  v211 = (void **)((char *)v331 + v210);
  v212 = &v329[v210];
  v213 = *(void **)&v329[v210];
  v214 = *v211;
  *v211 = v213;
  v215 = v213;

  v216 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v323)((char *)v211 + *(int *)(v216 + 20), &v212[*(int *)(v216 + 20)], v324);
  ((void (*)(char *, char *, uint64_t))v326)((char *)v211 + *(int *)(v216 + 24), &v212[*(int *)(v216 + 24)], v333);
  v217 = v327[12];
  v218 = (char *)v331 + v217;
  v219 = &v329[v217];
  *(_QWORD *)v218 = *(_QWORD *)&v329[v217];
  *((_QWORD *)v218 + 1) = *(_QWORD *)&v329[v217 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v330 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v332 = v219;
  v220 = v330[5];
  v221 = &v218[v220];
  v222 = &v219[v220];
  *(_QWORD *)v221 = *(_QWORD *)&v219[v220];
  *((_QWORD *)v221 + 1) = *(_QWORD *)&v219[v220 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v221 + 2) = *((_QWORD *)v222 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v221 + 3) = *((_QWORD *)v222 + 3);
  *((_QWORD *)v221 + 4) = *((_QWORD *)v222 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v221 + 5) = *((_QWORD *)v222 + 5);
  *((_QWORD *)v221 + 6) = *((_QWORD *)v222 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v221 + 7) = *((_QWORD *)v222 + 7);
  *((_QWORD *)v221 + 8) = *((_QWORD *)v222 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v221 + 9) = *((_QWORD *)v222 + 9);
  *((_QWORD *)v221 + 10) = *((_QWORD *)v222 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v221 + 11) = *((_QWORD *)v222 + 11);
  v223 = (void *)*((_QWORD *)v221 + 12);
  v224 = (void *)*((_QWORD *)v222 + 12);
  *((_QWORD *)v221 + 12) = v224;
  v225 = v224;

  v226 = (void *)*((_QWORD *)v221 + 13);
  v227 = (void *)*((_QWORD *)v222 + 13);
  *((_QWORD *)v221 + 13) = v227;
  v228 = v227;

  v229 = v21[13];
  v230 = &v221[v229];
  v231 = &v222[v229];
  LODWORD(v226) = v334(&v221[v229], 1, v25);
  v232 = v334(v231, 1, v25);
  if ((_DWORD)v226)
  {
    if (!v232)
    {
      (*(void (**)(char *, char *, uint64_t))(v336 + 16))(v230, v231, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(v230, 0, 1, v25);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v232)
  {
    (*(void (**)(char *, uint64_t))(v336 + 8))(v230, v25);
LABEL_99:
    sub_2415A0A74(0);
    memcpy(v230, v231, *(_QWORD *)(*(_QWORD *)(v233 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v336 + 24))(v230, v231, v25);
LABEL_100:
  v234 = v21[14];
  v235 = &v221[v234];
  v236 = &v222[v234];
  v237 = v334(&v221[v234], 1, v25);
  v238 = v334(v236, 1, v25);
  if (v237)
  {
    if (!v238)
    {
      (*(void (**)(char *, char *, uint64_t))(v336 + 16))(v235, v236, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(v235, 0, 1, v25);
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  if (v238)
  {
    (*(void (**)(char *, uint64_t))(v336 + 8))(v235, v25);
LABEL_105:
    sub_2415A0A74(0);
    memcpy(v235, v236, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
    goto LABEL_106;
  }
  (*(void (**)(char *, char *, uint64_t))(v336 + 24))(v235, v236, v25);
LABEL_106:
  v240 = v21[15];
  v241 = &v221[v240];
  v242 = &v222[v240];
  *(_QWORD *)v241 = *(_QWORD *)v242;
  *((_QWORD *)v241 + 1) = *((_QWORD *)v242 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v243 = v21[16];
  v244 = &v221[v243];
  v245 = &v222[v243];
  *(_QWORD *)v244 = *(_QWORD *)v245;
  *((_QWORD *)v244 + 1) = *((_QWORD *)v245 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v221[v21[17]] = v222[v21[17]];
  v221[v21[18]] = v222[v21[18]];
  v246 = v21[19];
  v247 = (uint64_t *)&v221[v246];
  v248 = (uint64_t *)&v222[v246];
  v249 = *(_QWORD *)&v222[v246 + 8];
  if (*(_QWORD *)&v221[v246 + 8] >> 60 == 15)
  {
    if (v249 >> 60 != 15)
    {
      v250 = *v248;
      sub_2415A0A90(v250, v249);
      *v247 = v250;
      v247[1] = v249;
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  if (v249 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v247);
LABEL_111:
    *(_OWORD *)v247 = *(_OWORD *)v248;
    goto LABEL_113;
  }
  v251 = *v248;
  sub_2415A0A90(v251, v249);
  v252 = *v247;
  v253 = v247[1];
  *v247 = v251;
  v247[1] = v249;
  sub_2415A0DAC(v252, v253);
LABEL_113:
  v254 = v21[20];
  v255 = &v221[v254];
  v256 = &v222[v254];
  v257 = v328(&v221[v254], 1, v335);
  v258 = v328(v256, 1, v335);
  if (v257)
  {
    v259 = v334;
    if (!v258)
    {
      (*(void (**)(char *, char *, uint64_t))(v325 + 16))(v255, v256, v335);
      v259 = v334;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v325 + 56))(v255, 0, 1, v335);
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  v259 = v334;
  if (v258)
  {
    (*(void (**)(char *, uint64_t))(v325 + 8))(v255, v335);
LABEL_118:
    sub_2415B2870(0);
    memcpy(v255, v256, *(_QWORD *)(*(_QWORD *)(v260 - 8) + 64));
    goto LABEL_119;
  }
  (*(void (**)(char *, char *, uint64_t))(v325 + 24))(v255, v256, v335);
LABEL_119:
  v261 = v21[21];
  v262 = *(void **)&v221[v261];
  v263 = *(void **)&v222[v261];
  *(_QWORD *)&v221[v261] = v263;
  v264 = v263;

  v265 = v21[22];
  v266 = &v221[v265];
  v267 = &v222[v265];
  LODWORD(v262) = v259(&v221[v265], 1, v25);
  v268 = v259(v267, 1, v25);
  if ((_DWORD)v262)
  {
    v270 = v321;
    v269 = v322;
    if (!v268)
    {
      (*(void (**)(char *, char *, uint64_t))(v336 + 16))(v266, v267, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(v266, 0, 1, v25);
      goto LABEL_125;
    }
    goto LABEL_124;
  }
  v270 = v321;
  v269 = v322;
  if (v268)
  {
    (*(void (**)(char *, uint64_t))(v336 + 8))(v266, v25);
LABEL_124:
    sub_2415A0A74(0);
    memcpy(v266, v267, *(_QWORD *)(*(_QWORD *)(v271 - 8) + 64));
    goto LABEL_125;
  }
  (*(void (**)(char *, char *, uint64_t))(v336 + 24))(v266, v267, v25);
LABEL_125:
  ((void (*)(char *, char *, uint64_t))v323)(&v218[v330[6]], &v332[v330[6]], v324);
  ((void (*)(char *, char *, uint64_t))v326)(&v218[v330[7]], &v332[v330[7]], v333);
  *(_QWORD *)&v218[v330[8]] = *(_QWORD *)&v332[v330[8]];
  swift_retain();
  swift_release();
  v272 = v330[9];
  v273 = &v218[v272];
  v274 = &v332[v272];
  v275 = v259(&v218[v272], 1, v25);
  v276 = v259(v274, 1, v25);
  if (v275)
  {
    v277 = v320;
    if (!v276)
    {
      (*(void (**)(char *, char *, uint64_t))(v336 + 16))(v273, v274, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(v273, 0, 1, v25);
      goto LABEL_131;
    }
    goto LABEL_130;
  }
  v277 = v320;
  if (v276)
  {
    (*(void (**)(char *, uint64_t))(v336 + 8))(v273, v25);
LABEL_130:
    sub_2415A0A74(0);
    memcpy(v273, v274, *(_QWORD *)(*(_QWORD *)(v278 - 8) + 64));
    goto LABEL_131;
  }
  (*(void (**)(char *, char *, uint64_t))(v336 + 24))(v273, v274, v25);
LABEL_131:
  v279 = v277[6];
  v280 = (_QWORD *)((char *)v269 + v279);
  v281 = (uint64_t)v270 + v279;
  v282 = *(void **)((char *)v269 + v279);
  v283 = *(void **)((char *)v270 + v279);
  *v280 = v283;
  v284 = v283;

  v280[1] = *(_QWORD *)(v281 + 8);
  if (v269 != v270)
  {
    v285 = v277[7];
    v286 = (_QWORD *)((char *)v269 + v285);
    v287 = (_QWORD *)((char *)v270 + v285);
    v288 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0];
    v289 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415C2970((uint64_t)v269 + v285, (uint64_t)&qword_25713A1C0, (uint64_t)MEMORY[0x24BDCF2E0], (uint64_t)MEMORY[0x24BDEB560], (uint64_t (*)(_QWORD))sub_24159D6B0);
    sub_24159D6B0(0, &qword_25713A1C0, v288, v289);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v316 + 16))(v286, v287, v324);
    }
    else
    {
      *v286 = *v287;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v290 = v277[8];
    v291 = (_QWORD *)((char *)v269 + v290);
    v292 = (_QWORD *)((char *)v270 + v290);
    v293 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    sub_2415C2970((uint64_t)v269 + v290, (uint64_t)&qword_25713A1C8, (uint64_t)MEMORY[0x24BDCEEB0], (uint64_t)v289, (uint64_t (*)(_QWORD))sub_24159D6B0);
    sub_24159D6B0(0, &qword_25713A1C8, v293, v289);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v317 + 16))(v291, v292, v333);
    }
    else
    {
      *v291 = *v292;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v294 = v277[9];
    v295 = (_QWORD *)((char *)v269 + v294);
    v296 = (_QWORD *)((char *)v270 + v294);
    v297 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEB418];
    v298 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415C2970((uint64_t)v269 + v294, (uint64_t)&qword_25713A1D0, (uint64_t)MEMORY[0x24BDEB418], (uint64_t)MEMORY[0x24BDEB560], (uint64_t (*)(_QWORD))sub_24159D6B0);
    sub_24159D6B0(0, &qword_25713A1D0, v297, v298);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v299 = sub_2416B9FA0();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v299 - 8) + 16))(v295, v296, v299);
    }
    else
    {
      *v295 = *v296;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v300 = v277[10];
  v301 = (uint64_t)v269 + v300;
  v302 = (uint64_t)v270 + v300;
  *(_QWORD *)((char *)v269 + v300) = *(_QWORD *)((char *)v270 + v300);
  swift_retain();
  swift_release();
  *(_QWORD *)(v301 + 8) = *(_QWORD *)(v302 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v301 + 16) = *(_BYTE *)(v302 + 16);
  v303 = v277[11];
  v304 = (uint64_t)v269 + v303;
  v305 = (uint64_t)v270 + v303;
  *(_BYTE *)v304 = *(_BYTE *)v305;
  *(_QWORD *)(v304 + 8) = *(_QWORD *)(v305 + 8);
  swift_retain();
  swift_release();
  v306 = v277[12];
  v307 = (uint64_t)v269 + v306;
  v308 = (uint64_t)v270 + v306;
  *(_BYTE *)v307 = *(_BYTE *)v308;
  *(_QWORD *)(v307 + 8) = *(_QWORD *)(v308 + 8);
  swift_retain();
  swift_release();
  v309 = v277[13];
  v310 = (_QWORD *)((char *)v269 + v309);
  v311 = (_QWORD *)((char *)v270 + v309);
  *v310 = *v311;
  v310[1] = v311[1];
  swift_retain();
  swift_release();
  v312 = v277[14];
  v313 = (_QWORD *)((char *)v269 + v312);
  v314 = (_QWORD *)((char *)v270 + v312);
  *v313 = *v314;
  v313[1] = v314[1];
  swift_retain();
  swift_release();
  return v269;
}

_QWORD *sub_2415B6034(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  int *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  __int128 v145;
  uint64_t v146;
  int *v148;
  uint64_t v152;
  unsigned int (*v153)(char *, uint64_t, uint64_t);
  char *v154;
  void (*v155)(char *, char *);
  uint64_t v156;
  int *v157;
  char *v158;
  uint64_t v159;
  void (*v160)(char *, char *);
  uint64_t v161;
  uint64_t v162;
  unsigned int (*v163)(char *, uint64_t);
  uint64_t v164;

  *a1 = *a2;
  v3 = a3[5];
  v4 = (char *)a1 + v3;
  v5 = (char *)a2 + v3;
  *(_QWORD *)((char *)a1 + v3) = *(_QWORD *)((char *)a2 + v3);
  v157 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v158 = v5;
  v6 = v157[5];
  v7 = &v4[v6];
  v8 = &v5[v6];
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
  *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
  *((_OWORD *)v7 + 6) = *((_OWORD *)v8 + 6);
  v9 = (int *)type metadata accessor for MedicalIDData();
  v10 = v9[13];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_2416B9B50();
  v14 = *(_QWORD *)(v13 - 8);
  v163 = *(unsigned int (**)(char *, uint64_t))(v14 + 48);
  v164 = v13;
  if (v163(v12, 1))
  {
    sub_2415A0A74(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v164);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v164);
  }
  v16 = v9[14];
  v17 = &v7[v16];
  v18 = &v8[v16];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v163)(&v8[v16], 1, v164))
  {
    sub_2415A0A74(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v18, v164);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v164);
  }
  *(_OWORD *)&v7[v9[15]] = *(_OWORD *)&v8[v9[15]];
  *(_OWORD *)&v7[v9[16]] = *(_OWORD *)&v8[v9[16]];
  v7[v9[17]] = v8[v9[17]];
  v7[v9[18]] = v8[v9[18]];
  *(_OWORD *)&v7[v9[19]] = *(_OWORD *)&v8[v9[19]];
  v20 = v9[20];
  v21 = &v7[v20];
  v22 = &v8[v20];
  v23 = sub_2416B9A18();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  if (v25(v22, 1, v23))
  {
    sub_2415B2870(0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(_QWORD *)&v7[v9[21]] = *(_QWORD *)&v8[v9[21]];
  v27 = v9[22];
  v28 = &v7[v27];
  v29 = &v8[v27];
  v162 = v14;
  v159 = v23;
  v152 = v24;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v163)(&v8[v27], 1, v164))
  {
    sub_2415A0A74(0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v28, v29, v164);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v28, 0, 1, v164);
  }
  v31 = v157[6];
  v32 = &v4[v31];
  v33 = &v158[v31];
  v34 = sub_2416B9C70();
  v155 = *(void (**)(char *, char *))(*(_QWORD *)(v34 - 8) + 32);
  v156 = v34;
  v155(v32, v33);
  *(_QWORD *)&v4[v157[7]] = *(_QWORD *)&v158[v157[7]];
  v35 = v157[8];
  v36 = &v4[v35];
  v37 = &v158[v35];
  v38 = sub_2416B9C10();
  v160 = *(void (**)(char *, char *))(*(_QWORD *)(v38 - 8) + 32);
  v161 = v38;
  v160(v36, v37);
  v39 = v157[9];
  v40 = &v4[v39];
  v41 = &v158[v39];
  *(_OWORD *)&v4[v39] = *(_OWORD *)&v158[v39];
  v148 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v42 = v148[5];
  v43 = &v40[v42];
  v44 = &v41[v42];
  *(_OWORD *)v43 = *(_OWORD *)&v41[v42];
  *((_QWORD *)v43 + 2) = *(_QWORD *)&v41[v42 + 16];
  *(_OWORD *)(v43 + 24) = *(_OWORD *)&v41[v42 + 24];
  *(_OWORD *)(v43 + 40) = *(_OWORD *)&v41[v42 + 40];
  *(_OWORD *)(v43 + 56) = *(_OWORD *)&v41[v42 + 56];
  *(_OWORD *)(v43 + 72) = *(_OWORD *)&v41[v42 + 72];
  *((_QWORD *)v43 + 11) = *(_QWORD *)&v41[v42 + 88];
  *((_OWORD *)v43 + 6) = *(_OWORD *)&v41[v42 + 96];
  v45 = v9[13];
  v46 = &v43[v45];
  v47 = &v44[v45];
  v154 = v4;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v163)(&v44[v45], 1, v164))
  {
    sub_2415A0A74(0);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v46, v47, v164);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v162 + 56))(v46, 0, 1, v164);
  }
  v49 = v9[14];
  v50 = &v43[v49];
  v51 = &v44[v49];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v163)(&v44[v49], 1, v164))
  {
    sub_2415A0A74(0);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v50, v51, v164);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v162 + 56))(v50, 0, 1, v164);
  }
  *(_OWORD *)&v43[v9[15]] = *(_OWORD *)&v44[v9[15]];
  *(_OWORD *)&v43[v9[16]] = *(_OWORD *)&v44[v9[16]];
  v43[v9[17]] = v44[v9[17]];
  v43[v9[18]] = v44[v9[18]];
  *(_OWORD *)&v43[v9[19]] = *(_OWORD *)&v44[v9[19]];
  v53 = v9[20];
  v54 = &v43[v53];
  v55 = &v44[v53];
  if (v25(&v44[v53], 1, v159))
  {
    sub_2415B2870(0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v54, v55, v159);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v54, 0, 1, v159);
  }
  v153 = v25;
  *(_QWORD *)&v43[v9[21]] = *(_QWORD *)&v44[v9[21]];
  v57 = v9[22];
  v58 = &v43[v57];
  v59 = &v44[v57];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v163)(&v44[v57], 1, v164))
  {
    sub_2415A0A74(0);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    v61 = v162;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v58, v59, v164);
    v61 = v162;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v162 + 56))(v58, 0, 1, v164);
  }
  ((void (*)(char *, char *, uint64_t))v160)(&v40[v148[6]], &v41[v148[6]], v161);
  v62 = v148[7];
  v63 = &v40[v62];
  v64 = &v41[v62];
  ((void (*)(char *, char *, uint64_t))v160)(&v40[v62], &v41[v62], v161);
  v65 = type metadata accessor for MedicalIDHeightFormatter();
  *(_QWORD *)&v63[*(int *)(v65 + 20)] = *(_QWORD *)&v64[*(int *)(v65 + 20)];
  v66 = v148[8];
  v67 = &v40[v66];
  v68 = &v41[v66];
  ((void (*)(char *, char *, uint64_t))v160)(&v40[v66], &v41[v66], v161);
  v69 = type metadata accessor for MedicalIDWeightFormatter();
  *(_QWORD *)&v67[*(int *)(v69 + 20)] = *(_QWORD *)&v68[*(int *)(v69 + 20)];
  *(_QWORD *)&v67[*(int *)(v69 + 24)] = *(_QWORD *)&v68[*(int *)(v69 + 24)];
  v70 = v157[10];
  v71 = &v4[v70];
  v72 = &v158[v70];
  *(_OWORD *)v71 = *(_OWORD *)&v158[v70];
  *((_QWORD *)v71 + 2) = *(_QWORD *)&v158[v70 + 16];
  *(_OWORD *)(v71 + 24) = *(_OWORD *)&v158[v70 + 24];
  *(_OWORD *)(v71 + 40) = *(_OWORD *)&v158[v70 + 40];
  *(_OWORD *)(v71 + 56) = *(_OWORD *)&v158[v70 + 56];
  *(_OWORD *)(v71 + 72) = *(_OWORD *)&v158[v70 + 72];
  *((_QWORD *)v71 + 11) = *(_QWORD *)&v158[v70 + 88];
  *((_OWORD *)v71 + 6) = *(_OWORD *)&v158[v70 + 96];
  v73 = v9[13];
  v74 = &v71[v73];
  v75 = &v72[v73];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v163)(&v72[v73], 1, v164))
  {
    sub_2415A0A74(0);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    v77 = v159;
    v78 = v24;
    v79 = v61;
  }
  else
  {
    v79 = v61;
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v74, v75, v164);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v74, 0, 1, v164);
    v77 = v159;
    v78 = v24;
  }
  v80 = v9[14];
  v81 = &v71[v80];
  v82 = &v72[v80];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v163)(&v72[v80], 1, v164))
  {
    sub_2415A0A74(0);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v81, v82, v164);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v81, 0, 1, v164);
  }
  *(_OWORD *)&v71[v9[15]] = *(_OWORD *)&v72[v9[15]];
  *(_OWORD *)&v71[v9[16]] = *(_OWORD *)&v72[v9[16]];
  v71[v9[17]] = v72[v9[17]];
  v71[v9[18]] = v72[v9[18]];
  *(_OWORD *)&v71[v9[19]] = *(_OWORD *)&v72[v9[19]];
  v84 = v9[20];
  v85 = &v71[v84];
  v86 = &v72[v84];
  if (v153(&v72[v84], 1, v77))
  {
    sub_2415B2870(0);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v85, v86, v77);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v85, 0, 1, v77);
  }
  *(_QWORD *)&v71[v9[21]] = *(_QWORD *)&v72[v9[21]];
  v88 = v9[22];
  v89 = &v71[v88];
  v90 = &v72[v88];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v163)(&v72[v88], 1, v164))
  {
    sub_2415A0A74(0);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v89, v90, v164);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v89, 0, 1, v164);
  }
  v92 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v155)(&v71[v92[5]], &v72[v92[5]], v156);
  ((void (*)(char *, char *, uint64_t))v160)(&v71[v92[6]], &v72[v92[6]], v161);
  *(_QWORD *)&v71[v92[7]] = *(_QWORD *)&v72[v92[7]];
  *(_QWORD *)&v71[v92[8]] = *(_QWORD *)&v72[v92[8]];
  *(_OWORD *)&v71[v92[9]] = *(_OWORD *)&v72[v92[9]];
  v93 = v157[11];
  v94 = &v154[v93];
  v95 = &v158[v93];
  *(_QWORD *)&v154[v93] = *(_QWORD *)&v158[v93];
  v96 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v155)(&v94[*(int *)(v96 + 20)], &v95[*(int *)(v96 + 20)], v156);
  ((void (*)(char *, char *, uint64_t))v160)(&v94[*(int *)(v96 + 24)], &v95[*(int *)(v96 + 24)], v161);
  v97 = v157[12];
  v98 = &v154[v97];
  v99 = &v158[v97];
  *(_OWORD *)&v154[v97] = *(_OWORD *)&v158[v97];
  v100 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v101 = v100[5];
  v102 = &v98[v101];
  v103 = &v99[v101];
  *(_OWORD *)v102 = *(_OWORD *)&v99[v101];
  *((_QWORD *)v102 + 2) = *(_QWORD *)&v99[v101 + 16];
  *(_OWORD *)(v102 + 24) = *(_OWORD *)&v99[v101 + 24];
  *(_OWORD *)(v102 + 40) = *(_OWORD *)&v99[v101 + 40];
  *(_OWORD *)(v102 + 56) = *(_OWORD *)&v99[v101 + 56];
  *(_OWORD *)(v102 + 72) = *(_OWORD *)&v99[v101 + 72];
  *((_QWORD *)v102 + 11) = *(_QWORD *)&v99[v101 + 88];
  *((_OWORD *)v102 + 6) = *(_OWORD *)&v99[v101 + 96];
  v104 = v9[13];
  v105 = &v102[v104];
  v106 = &v103[v104];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v163)(&v103[v104], 1, v164))
  {
    sub_2415A0A74(0);
    memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v105, v106, v164);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v162 + 56))(v105, 0, 1, v164);
  }
  v108 = v9[14];
  v109 = &v102[v108];
  v110 = &v103[v108];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v163)(&v103[v108], 1, v164))
  {
    sub_2415A0A74(0);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v109, v110, v164);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v162 + 56))(v109, 0, 1, v164);
  }
  *(_OWORD *)&v102[v9[15]] = *(_OWORD *)&v103[v9[15]];
  *(_OWORD *)&v102[v9[16]] = *(_OWORD *)&v103[v9[16]];
  v102[v9[17]] = v103[v9[17]];
  v102[v9[18]] = v103[v9[18]];
  *(_OWORD *)&v102[v9[19]] = *(_OWORD *)&v103[v9[19]];
  v112 = v9[20];
  v113 = &v102[v112];
  v114 = &v103[v112];
  if (v153(&v103[v112], 1, v159))
  {
    sub_2415B2870(0);
    memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v152 + 32))(v113, v114, v159);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v113, 0, 1, v159);
  }
  *(_QWORD *)&v102[v9[21]] = *(_QWORD *)&v103[v9[21]];
  v116 = v9[22];
  v117 = &v102[v116];
  v118 = &v103[v116];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v163)(&v103[v116], 1, v164))
  {
    sub_2415A0A74(0);
    memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
    v120 = v162;
  }
  else
  {
    v120 = v162;
    (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v117, v118, v164);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v162 + 56))(v117, 0, 1, v164);
  }
  ((void (*)(char *, char *, uint64_t))v155)(&v98[v100[6]], &v99[v100[6]], v156);
  ((void (*)(char *, char *, uint64_t))v160)(&v98[v100[7]], &v99[v100[7]], v161);
  *(_QWORD *)&v98[v100[8]] = *(_QWORD *)&v99[v100[8]];
  v121 = v100[9];
  v122 = &v98[v121];
  v123 = &v99[v121];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v163)(&v99[v121], 1, v164))
  {
    sub_2415A0A74(0);
    memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v122, v123, v164);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v120 + 56))(v122, 0, 1, v164);
  }
  v125 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v126 = (char *)a1 + v125;
  v127 = (char *)a2 + v125;
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v129 = v128;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    ((void (*)(char *, char *, uint64_t))v155)(v126, v127, v156);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
  }
  v130 = a3[8];
  v131 = (char *)a1 + v130;
  v132 = (char *)a2 + v130;
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v134 = v133;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    ((void (*)(char *, char *, uint64_t))v160)(v131, v132, v161);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
  }
  v135 = a3[9];
  v136 = (char *)a1 + v135;
  v137 = (char *)a2 + v135;
  sub_24159D6B0(0, &qword_25713A1D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB418], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v139 = v138;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v140 = sub_2416B9FA0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 32))(v136, v137, v140);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
  }
  v141 = a3[10];
  v142 = a3[11];
  v143 = (char *)a1 + v141;
  v144 = (char *)a2 + v141;
  v145 = *(_OWORD *)v144;
  v143[16] = v144[16];
  *(_OWORD *)v143 = v145;
  *(_OWORD *)((char *)a1 + v142) = *(_OWORD *)((char *)a2 + v142);
  v146 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(_OWORD *)((char *)a1 + v146) = *(_OWORD *)((char *)a2 + v146);
  *(_OWORD *)((char *)a1 + a3[14]) = *(_OWORD *)((char *)a2 + a3[14]);
  return a1;
}

_QWORD *sub_2415B6F00(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  char *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  int v195;
  int v196;
  uint64_t v197;
  int *v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  char *v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  int v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  char *v257;
  int v258;
  int v259;
  uint64_t (*v260)(char *, uint64_t, uint64_t);
  uint64_t v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  char *v265;
  char *v266;
  int v267;
  int v268;
  _QWORD *v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  int v275;
  int v276;
  int *v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  _QWORD *v281;
  void *v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t (*v286)(uint64_t);
  uint64_t (*v287)(uint64_t, uint64_t);
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  char *v292;
  uint64_t (*v293)(uint64_t);
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  char *v298;
  uint64_t (*v299)(uint64_t);
  uint64_t (*v300)(uint64_t, uint64_t);
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t v316;
  _QWORD *v317;
  _QWORD *v318;
  uint64_t v320;
  uint64_t v321;
  int *v322;
  char *v323;
  int *v324;
  _QWORD *v325;
  _QWORD *v326;
  void (*v327)(char *, char *);
  uint64_t v328;
  uint64_t v329;
  void (*v330)(char *, char *);
  int *v331;
  uint64_t (*v332)(char *, uint64_t, uint64_t);
  _QWORD *v333;
  int *v334;
  char *v335;
  char *v336;
  uint64_t v337;
  uint64_t (*v338)(char *, uint64_t, uint64_t);
  uint64_t v339;
  uint64_t v340;

  v5 = a1;
  *a1 = *a2;
  swift_release();
  v324 = a3;
  v325 = a2;
  v6 = a3[5];
  v326 = v5;
  v7 = (char *)v5 + v6;
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = *(void **)((char *)v5 + v6);
  *(_QWORD *)((char *)v5 + v6) = *v8;

  v331 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v10 = v331[5];
  v333 = v8;
  v335 = v7;
  v11 = &v7[v10];
  v12 = (_QWORD *)((char *)v8 + v10);
  v13 = *(_QWORD *)((char *)v8 + v10 + 8);
  *(_QWORD *)v11 = *(_QWORD *)((char *)v8 + v10);
  *((_QWORD *)v11 + 1) = v13;
  swift_bridgeObjectRelease();
  *((_QWORD *)v11 + 2) = v12[2];
  swift_bridgeObjectRelease();
  v14 = v12[4];
  *((_QWORD *)v11 + 3) = v12[3];
  *((_QWORD *)v11 + 4) = v14;
  swift_bridgeObjectRelease();
  v15 = v12[6];
  *((_QWORD *)v11 + 5) = v12[5];
  *((_QWORD *)v11 + 6) = v15;
  swift_bridgeObjectRelease();
  v16 = v12[8];
  *((_QWORD *)v11 + 7) = v12[7];
  *((_QWORD *)v11 + 8) = v16;
  swift_bridgeObjectRelease();
  v17 = v12[10];
  *((_QWORD *)v11 + 9) = v12[9];
  *((_QWORD *)v11 + 10) = v17;
  swift_bridgeObjectRelease();
  v18 = (void *)*((_QWORD *)v11 + 12);
  v19 = v12[12];
  *((_QWORD *)v11 + 11) = v12[11];
  *((_QWORD *)v11 + 12) = v19;

  v20 = (void *)*((_QWORD *)v11 + 13);
  *((_QWORD *)v11 + 13) = v12[13];

  v21 = (int *)type metadata accessor for MedicalIDData();
  v22 = v21[13];
  v23 = &v11[v22];
  v24 = (char *)v12 + v22;
  v25 = sub_2416B9B50();
  v340 = *(_QWORD *)(v25 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v340 + 48);
  LODWORD(v5) = v26(v23, 1, v25);
  v27 = v26(v24, 1, v25);
  if ((_DWORD)v5)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v340 + 32))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v340 + 56))(v23, 0, 1, v25);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v340 + 8))(v23, v25);
LABEL_6:
    sub_2415A0A74(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v340 + 40))(v23, v24, v25);
LABEL_7:
  v29 = v21[14];
  v30 = &v11[v29];
  v31 = (char *)v12 + v29;
  v32 = v26(&v11[v29], 1, v25);
  v33 = v26(v31, 1, v25);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v340 + 32))(v30, v31, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v340 + 56))(v30, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v340 + 8))(v30, v25);
LABEL_12:
    sub_2415A0A74(0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v340 + 40))(v30, v31, v25);
LABEL_13:
  v35 = v21[15];
  v36 = &v11[v35];
  v37 = (_QWORD *)((char *)v12 + v35);
  v39 = *v37;
  v38 = v37[1];
  *(_QWORD *)v36 = v39;
  *((_QWORD *)v36 + 1) = v38;
  swift_bridgeObjectRelease();
  v40 = v21[16];
  v41 = &v11[v40];
  v42 = (_QWORD *)((char *)v12 + v40);
  v44 = *v42;
  v43 = v42[1];
  *(_QWORD *)v41 = v44;
  *((_QWORD *)v41 + 1) = v43;
  swift_bridgeObjectRelease();
  v11[v21[17]] = *((_BYTE *)v12 + v21[17]);
  v11[v21[18]] = *((_BYTE *)v12 + v21[18]);
  v45 = v21[19];
  v46 = (uint64_t)&v11[v45];
  v47 = (char *)v12 + v45;
  v48 = *(_QWORD *)&v11[v45 + 8];
  if (v48 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v46 = *(_OWORD *)v47;
    goto LABEL_18;
  }
  v49 = *((_QWORD *)v47 + 1);
  if (v49 >> 60 == 15)
  {
    sub_2415A1B38(v46);
    goto LABEL_16;
  }
  v50 = *(_QWORD *)v46;
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_QWORD *)(v46 + 8) = v49;
  sub_2415A0DAC(v50, v48);
LABEL_18:
  v51 = v21[20];
  v52 = &v11[v51];
  v53 = (char *)v12 + v51;
  v54 = sub_2416B9A18();
  v329 = *(_QWORD *)(v54 - 8);
  v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v329 + 48);
  v56 = v55(v52, 1, v54);
  v339 = v54;
  v332 = v55;
  v57 = v55(v53, 1, v54);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v329 + 32))(v52, v53, v54);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v329 + 56))(v52, 0, 1, v54);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v329 + 8))(v52, v54);
LABEL_23:
    sub_2415B2870(0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v329 + 40))(v52, v53, v54);
LABEL_24:
  v59 = v21[21];
  v60 = *(void **)&v11[v59];
  *(_QWORD *)&v11[v59] = *(_QWORD *)((char *)v12 + v59);

  v61 = v21[22];
  v62 = &v11[v61];
  v63 = (char *)v12 + v61;
  v64 = v26(&v11[v61], 1, v25);
  v65 = v26(v63, 1, v25);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v340 + 32))(v62, v63, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v340 + 56))(v62, 0, 1, v25);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v340 + 8))(v62, v25);
LABEL_29:
    sub_2415A0A74(0);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v340 + 40))(v62, v63, v25);
LABEL_30:
  v67 = v331[6];
  v68 = &v335[v67];
  v69 = (char *)v333 + v67;
  v70 = sub_2416B9C70();
  v320 = *(_QWORD *)(v70 - 8);
  v327 = *(void (**)(char *, char *))(v320 + 40);
  v328 = v70;
  v327(v68, v69);
  v71 = v331[7];
  v72 = *(void **)&v335[v71];
  *(_QWORD *)&v335[v71] = *(_QWORD *)((char *)v333 + v71);

  v73 = v331[8];
  v74 = &v335[v73];
  v75 = (char *)v333 + v73;
  v76 = sub_2416B9C10();
  v321 = *(_QWORD *)(v76 - 8);
  v337 = v76;
  v330 = *(void (**)(char *, char *))(v321 + 40);
  v330(v74, v75);
  v77 = v331[9];
  v78 = &v335[v77];
  v79 = (char *)v333 + v77;
  v80 = *(_QWORD *)((char *)v333 + v77 + 8);
  *(_QWORD *)v78 = *(_QWORD *)((char *)v333 + v77);
  *((_QWORD *)v78 + 1) = v80;
  swift_bridgeObjectRelease();
  v322 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v323 = v79;
  v81 = v322[5];
  v82 = &v78[v81];
  v83 = &v79[v81];
  v84 = *(_QWORD *)&v79[v81 + 8];
  *(_QWORD *)v82 = *(_QWORD *)&v79[v81];
  *((_QWORD *)v82 + 1) = v84;
  swift_bridgeObjectRelease();
  *((_QWORD *)v82 + 2) = *((_QWORD *)v83 + 2);
  swift_bridgeObjectRelease();
  v85 = *((_QWORD *)v83 + 4);
  *((_QWORD *)v82 + 3) = *((_QWORD *)v83 + 3);
  *((_QWORD *)v82 + 4) = v85;
  swift_bridgeObjectRelease();
  v86 = *((_QWORD *)v83 + 6);
  *((_QWORD *)v82 + 5) = *((_QWORD *)v83 + 5);
  *((_QWORD *)v82 + 6) = v86;
  swift_bridgeObjectRelease();
  v87 = *((_QWORD *)v83 + 8);
  *((_QWORD *)v82 + 7) = *((_QWORD *)v83 + 7);
  *((_QWORD *)v82 + 8) = v87;
  swift_bridgeObjectRelease();
  v88 = *((_QWORD *)v83 + 10);
  *((_QWORD *)v82 + 9) = *((_QWORD *)v83 + 9);
  *((_QWORD *)v82 + 10) = v88;
  swift_bridgeObjectRelease();
  v89 = (void *)*((_QWORD *)v82 + 12);
  v90 = *((_QWORD *)v83 + 12);
  *((_QWORD *)v82 + 11) = *((_QWORD *)v83 + 11);
  *((_QWORD *)v82 + 12) = v90;

  v91 = (void *)*((_QWORD *)v82 + 13);
  *((_QWORD *)v82 + 13) = *((_QWORD *)v83 + 13);

  v92 = v21[13];
  v93 = &v82[v92];
  v94 = &v83[v92];
  LODWORD(v79) = v26(&v82[v92], 1, v25);
  v95 = v26(v94, 1, v25);
  if ((_DWORD)v79)
  {
    if (!v95)
    {
      (*(void (**)(char *, char *, uint64_t))(v340 + 32))(v93, v94, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v340 + 56))(v93, 0, 1, v25);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v95)
  {
    (*(void (**)(char *, uint64_t))(v340 + 8))(v93, v25);
LABEL_35:
    sub_2415A0A74(0);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v340 + 40))(v93, v94, v25);
LABEL_36:
  v97 = v21[14];
  v98 = &v82[v97];
  v99 = &v83[v97];
  v100 = v26(&v82[v97], 1, v25);
  v101 = v26(v99, 1, v25);
  if (v100)
  {
    if (!v101)
    {
      (*(void (**)(char *, char *, uint64_t))(v340 + 32))(v98, v99, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v340 + 56))(v98, 0, 1, v25);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v101)
  {
    (*(void (**)(char *, uint64_t))(v340 + 8))(v98, v25);
LABEL_41:
    sub_2415A0A74(0);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v340 + 40))(v98, v99, v25);
LABEL_42:
  v103 = v21[15];
  v104 = &v82[v103];
  v105 = (uint64_t *)&v83[v103];
  v107 = *v105;
  v106 = v105[1];
  *(_QWORD *)v104 = v107;
  *((_QWORD *)v104 + 1) = v106;
  swift_bridgeObjectRelease();
  v108 = v21[16];
  v109 = &v82[v108];
  v110 = (uint64_t *)&v83[v108];
  v112 = *v110;
  v111 = v110[1];
  *(_QWORD *)v109 = v112;
  *((_QWORD *)v109 + 1) = v111;
  swift_bridgeObjectRelease();
  v82[v21[17]] = v83[v21[17]];
  v82[v21[18]] = v83[v21[18]];
  v113 = v21[19];
  v114 = (uint64_t)&v82[v113];
  v115 = &v83[v113];
  v116 = *(_QWORD *)&v82[v113 + 8];
  v338 = v26;
  if (v116 >> 60 == 15)
  {
LABEL_45:
    *(_OWORD *)v114 = *(_OWORD *)v115;
    goto LABEL_47;
  }
  v117 = *((_QWORD *)v115 + 1);
  if (v117 >> 60 == 15)
  {
    sub_2415A1B38(v114);
    goto LABEL_45;
  }
  v118 = *(_QWORD *)v114;
  *(_QWORD *)v114 = *(_QWORD *)v115;
  *(_QWORD *)(v114 + 8) = v117;
  sub_2415A0DAC(v118, v116);
LABEL_47:
  v119 = v21[20];
  v120 = &v82[v119];
  v121 = &v83[v119];
  v122 = v332(&v82[v119], 1, v339);
  v123 = v332(v121, 1, v339);
  if (v122)
  {
    if (!v123)
    {
      (*(void (**)(char *, char *, uint64_t))(v329 + 32))(v120, v121, v339);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v329 + 56))(v120, 0, 1, v339);
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (v123)
  {
    (*(void (**)(char *, uint64_t))(v329 + 8))(v120, v339);
LABEL_52:
    sub_2415B2870(0);
    memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    goto LABEL_53;
  }
  (*(void (**)(char *, char *, uint64_t))(v329 + 40))(v120, v121, v339);
LABEL_53:
  v125 = v21[21];
  v126 = *(void **)&v82[v125];
  *(_QWORD *)&v82[v125] = *(_QWORD *)&v83[v125];

  v127 = v21[22];
  v128 = &v82[v127];
  v129 = &v83[v127];
  v130 = v26(&v82[v127], 1, v25);
  v131 = v26(v129, 1, v25);
  if (v130)
  {
    if (!v131)
    {
      (*(void (**)(char *, char *, uint64_t))(v340 + 32))(v128, v129, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v340 + 56))(v128, 0, 1, v25);
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  if (v131)
  {
    (*(void (**)(char *, uint64_t))(v340 + 8))(v128, v25);
LABEL_58:
    sub_2415A0A74(0);
    memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
    goto LABEL_59;
  }
  (*(void (**)(char *, char *, uint64_t))(v340 + 40))(v128, v129, v25);
LABEL_59:
  ((void (*)(char *, char *, uint64_t))v330)(&v78[v322[6]], &v323[v322[6]], v337);
  v133 = v322[7];
  v134 = &v78[v133];
  v135 = &v323[v133];
  ((void (*)(char *, char *, uint64_t))v330)(&v78[v133], &v323[v133], v337);
  v136 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v137 = *(void **)&v134[v136];
  *(_QWORD *)&v134[v136] = *(_QWORD *)&v135[v136];

  v138 = v322[8];
  v139 = &v78[v138];
  v140 = &v323[v138];
  ((void (*)(char *, char *, uint64_t))v330)(&v78[v138], &v323[v138], v337);
  v141 = type metadata accessor for MedicalIDWeightFormatter();
  v142 = *(int *)(v141 + 20);
  v143 = *(void **)&v139[v142];
  *(_QWORD *)&v139[v142] = *(_QWORD *)&v140[v142];

  v144 = *(int *)(v141 + 24);
  v145 = *(void **)&v139[v144];
  *(_QWORD *)&v139[v144] = *(_QWORD *)&v140[v144];

  v146 = v331[10];
  v147 = &v335[v146];
  v148 = (_QWORD *)((char *)v333 + v146);
  v149 = *(_QWORD *)((char *)v333 + v146 + 8);
  *(_QWORD *)v147 = *(_QWORD *)((char *)v333 + v146);
  *((_QWORD *)v147 + 1) = v149;
  swift_bridgeObjectRelease();
  *((_QWORD *)v147 + 2) = v148[2];
  swift_bridgeObjectRelease();
  v150 = v148[4];
  *((_QWORD *)v147 + 3) = v148[3];
  *((_QWORD *)v147 + 4) = v150;
  swift_bridgeObjectRelease();
  v151 = v148[6];
  *((_QWORD *)v147 + 5) = v148[5];
  *((_QWORD *)v147 + 6) = v151;
  swift_bridgeObjectRelease();
  v152 = v148[8];
  *((_QWORD *)v147 + 7) = v148[7];
  *((_QWORD *)v147 + 8) = v152;
  swift_bridgeObjectRelease();
  v153 = v148[10];
  *((_QWORD *)v147 + 9) = v148[9];
  *((_QWORD *)v147 + 10) = v153;
  swift_bridgeObjectRelease();
  v154 = (void *)*((_QWORD *)v147 + 12);
  v155 = v148[12];
  *((_QWORD *)v147 + 11) = v148[11];
  *((_QWORD *)v147 + 12) = v155;

  v156 = (void *)*((_QWORD *)v147 + 13);
  *((_QWORD *)v147 + 13) = v148[13];

  v157 = v21[13];
  v158 = &v147[v157];
  v159 = (char *)v148 + v157;
  LODWORD(v139) = v26(&v147[v157], 1, v25);
  v160 = v26(v159, 1, v25);
  if ((_DWORD)v139)
  {
    if (!v160)
    {
      (*(void (**)(char *, char *, uint64_t))(v340 + 32))(v158, v159, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v340 + 56))(v158, 0, 1, v25);
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if (v160)
  {
    (*(void (**)(char *, uint64_t))(v340 + 8))(v158, v25);
LABEL_64:
    sub_2415A0A74(0);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
    goto LABEL_65;
  }
  (*(void (**)(char *, char *, uint64_t))(v340 + 40))(v158, v159, v25);
LABEL_65:
  v162 = v21[14];
  v163 = &v147[v162];
  v164 = (char *)v148 + v162;
  v165 = v26(&v147[v162], 1, v25);
  v166 = v26(v164, 1, v25);
  if (v165)
  {
    if (!v166)
    {
      (*(void (**)(char *, char *, uint64_t))(v340 + 32))(v163, v164, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v340 + 56))(v163, 0, 1, v25);
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v166)
  {
    (*(void (**)(char *, uint64_t))(v340 + 8))(v163, v25);
LABEL_70:
    sub_2415A0A74(0);
    memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
    goto LABEL_71;
  }
  (*(void (**)(char *, char *, uint64_t))(v340 + 40))(v163, v164, v25);
LABEL_71:
  v168 = v21[15];
  v169 = &v147[v168];
  v170 = (_QWORD *)((char *)v148 + v168);
  v172 = *v170;
  v171 = v170[1];
  *(_QWORD *)v169 = v172;
  *((_QWORD *)v169 + 1) = v171;
  swift_bridgeObjectRelease();
  v173 = v21[16];
  v174 = &v147[v173];
  v175 = (_QWORD *)((char *)v148 + v173);
  v177 = *v175;
  v176 = v175[1];
  *(_QWORD *)v174 = v177;
  *((_QWORD *)v174 + 1) = v176;
  swift_bridgeObjectRelease();
  v147[v21[17]] = *((_BYTE *)v148 + v21[17]);
  v147[v21[18]] = *((_BYTE *)v148 + v21[18]);
  v178 = v21[19];
  v179 = (uint64_t)&v147[v178];
  v180 = (char *)v148 + v178;
  v181 = *(_QWORD *)&v147[v178 + 8];
  if (v181 >> 60 == 15)
  {
LABEL_74:
    *(_OWORD *)v179 = *(_OWORD *)v180;
    goto LABEL_76;
  }
  v182 = *((_QWORD *)v180 + 1);
  if (v182 >> 60 == 15)
  {
    sub_2415A1B38(v179);
    goto LABEL_74;
  }
  v183 = *(_QWORD *)v179;
  *(_QWORD *)v179 = *(_QWORD *)v180;
  *(_QWORD *)(v179 + 8) = v182;
  sub_2415A0DAC(v183, v181);
LABEL_76:
  v184 = v21[20];
  v185 = &v147[v184];
  v186 = (char *)v148 + v184;
  v187 = v332(&v147[v184], 1, v339);
  v188 = v332(v186, 1, v339);
  if (v187)
  {
    if (!v188)
    {
      (*(void (**)(char *, char *, uint64_t))(v329 + 32))(v185, v186, v339);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v329 + 56))(v185, 0, 1, v339);
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  if (v188)
  {
    (*(void (**)(char *, uint64_t))(v329 + 8))(v185, v339);
LABEL_81:
    sub_2415B2870(0);
    memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
    goto LABEL_82;
  }
  (*(void (**)(char *, char *, uint64_t))(v329 + 40))(v185, v186, v339);
LABEL_82:
  v190 = v21[21];
  v191 = *(void **)&v147[v190];
  *(_QWORD *)&v147[v190] = *(_QWORD *)((char *)v148 + v190);

  v192 = v21[22];
  v193 = &v147[v192];
  v194 = (char *)v148 + v192;
  v195 = v26(&v147[v192], 1, v25);
  v196 = v26(v194, 1, v25);
  if (v195)
  {
    if (!v196)
    {
      (*(void (**)(char *, char *, uint64_t))(v340 + 32))(v193, v194, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v340 + 56))(v193, 0, 1, v25);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v196)
  {
    (*(void (**)(char *, uint64_t))(v340 + 8))(v193, v25);
LABEL_87:
    sub_2415A0A74(0);
    memcpy(v193, v194, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v340 + 40))(v193, v194, v25);
LABEL_88:
  v198 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v327)(&v147[v198[5]], (char *)v148 + v198[5], v328);
  ((void (*)(char *, char *, uint64_t))v330)(&v147[v198[6]], (char *)v148 + v198[6], v337);
  v199 = v198[7];
  v200 = *(void **)&v147[v199];
  *(_QWORD *)&v147[v199] = *(_QWORD *)((char *)v148 + v199);

  v201 = v198[8];
  v202 = *(void **)&v147[v201];
  *(_QWORD *)&v147[v201] = *(_QWORD *)((char *)v148 + v201);

  v203 = v198[9];
  v204 = &v147[v203];
  v205 = (_QWORD *)((char *)v148 + v203);
  v207 = *v205;
  v206 = v205[1];
  *(_QWORD *)v204 = v207;
  *((_QWORD *)v204 + 1) = v206;
  swift_bridgeObjectRelease();
  v208 = v331[11];
  v209 = &v335[v208];
  v210 = (char *)v333 + v208;
  v211 = *(void **)&v335[v208];
  *(_QWORD *)&v335[v208] = *(_QWORD *)((char *)v333 + v208);

  v212 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v327)(&v209[*(int *)(v212 + 20)], &v210[*(int *)(v212 + 20)], v328);
  ((void (*)(char *, char *, uint64_t))v330)(&v209[*(int *)(v212 + 24)], &v210[*(int *)(v212 + 24)], v337);
  v213 = v331[12];
  v214 = &v335[v213];
  v215 = (char *)v333 + v213;
  v216 = *(_QWORD *)((char *)v333 + v213 + 8);
  *(_QWORD *)v214 = *(_QWORD *)((char *)v333 + v213);
  *((_QWORD *)v214 + 1) = v216;
  swift_bridgeObjectRelease();
  v334 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v336 = v215;
  v217 = v334[5];
  v218 = &v214[v217];
  v219 = &v215[v217];
  v220 = *(_QWORD *)&v215[v217 + 8];
  *(_QWORD *)v218 = *(_QWORD *)&v215[v217];
  *((_QWORD *)v218 + 1) = v220;
  swift_bridgeObjectRelease();
  *((_QWORD *)v218 + 2) = *((_QWORD *)v219 + 2);
  swift_bridgeObjectRelease();
  v221 = *((_QWORD *)v219 + 4);
  *((_QWORD *)v218 + 3) = *((_QWORD *)v219 + 3);
  *((_QWORD *)v218 + 4) = v221;
  swift_bridgeObjectRelease();
  v222 = *((_QWORD *)v219 + 6);
  *((_QWORD *)v218 + 5) = *((_QWORD *)v219 + 5);
  *((_QWORD *)v218 + 6) = v222;
  swift_bridgeObjectRelease();
  v223 = *((_QWORD *)v219 + 8);
  *((_QWORD *)v218 + 7) = *((_QWORD *)v219 + 7);
  *((_QWORD *)v218 + 8) = v223;
  swift_bridgeObjectRelease();
  v224 = *((_QWORD *)v219 + 10);
  *((_QWORD *)v218 + 9) = *((_QWORD *)v219 + 9);
  *((_QWORD *)v218 + 10) = v224;
  swift_bridgeObjectRelease();
  v225 = (void *)*((_QWORD *)v218 + 12);
  v226 = *((_QWORD *)v219 + 12);
  *((_QWORD *)v218 + 11) = *((_QWORD *)v219 + 11);
  *((_QWORD *)v218 + 12) = v226;

  v227 = (void *)*((_QWORD *)v218 + 13);
  *((_QWORD *)v218 + 13) = *((_QWORD *)v219 + 13);

  v228 = v21[13];
  v229 = &v218[v228];
  v230 = &v219[v228];
  LODWORD(v212) = v338(&v218[v228], 1, v25);
  v231 = v338(v230, 1, v25);
  if ((_DWORD)v212)
  {
    if (!v231)
    {
      (*(void (**)(char *, char *, uint64_t))(v340 + 32))(v229, v230, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v340 + 56))(v229, 0, 1, v25);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v231)
  {
    (*(void (**)(char *, uint64_t))(v340 + 8))(v229, v25);
LABEL_93:
    sub_2415A0A74(0);
    memcpy(v229, v230, *(_QWORD *)(*(_QWORD *)(v232 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v340 + 40))(v229, v230, v25);
LABEL_94:
  v233 = v21[14];
  v234 = &v218[v233];
  v235 = &v219[v233];
  v236 = v338(&v218[v233], 1, v25);
  v237 = v338(v235, 1, v25);
  if (v236)
  {
    if (!v237)
    {
      (*(void (**)(char *, char *, uint64_t))(v340 + 32))(v234, v235, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v340 + 56))(v234, 0, 1, v25);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v237)
  {
    (*(void (**)(char *, uint64_t))(v340 + 8))(v234, v25);
LABEL_99:
    sub_2415A0A74(0);
    memcpy(v234, v235, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v340 + 40))(v234, v235, v25);
LABEL_100:
  v239 = v21[15];
  v240 = &v218[v239];
  v241 = (uint64_t *)&v219[v239];
  v243 = *v241;
  v242 = v241[1];
  *(_QWORD *)v240 = v243;
  *((_QWORD *)v240 + 1) = v242;
  swift_bridgeObjectRelease();
  v244 = v21[16];
  v245 = &v218[v244];
  v246 = (uint64_t *)&v219[v244];
  v248 = *v246;
  v247 = v246[1];
  *(_QWORD *)v245 = v248;
  *((_QWORD *)v245 + 1) = v247;
  swift_bridgeObjectRelease();
  v218[v21[17]] = v219[v21[17]];
  v218[v21[18]] = v219[v21[18]];
  v249 = v21[19];
  v250 = (uint64_t)&v218[v249];
  v251 = &v219[v249];
  v252 = *(_QWORD *)&v218[v249 + 8];
  if (v252 >> 60 == 15)
  {
LABEL_103:
    *(_OWORD *)v250 = *(_OWORD *)v251;
    goto LABEL_105;
  }
  v253 = *((_QWORD *)v251 + 1);
  if (v253 >> 60 == 15)
  {
    sub_2415A1B38(v250);
    goto LABEL_103;
  }
  v254 = *(_QWORD *)v250;
  *(_QWORD *)v250 = *(_QWORD *)v251;
  *(_QWORD *)(v250 + 8) = v253;
  sub_2415A0DAC(v254, v252);
LABEL_105:
  v255 = v21[20];
  v256 = &v218[v255];
  v257 = &v219[v255];
  v258 = v332(&v218[v255], 1, v339);
  v259 = v332(v257, 1, v339);
  if (v258)
  {
    v260 = v338;
    if (!v259)
    {
      (*(void (**)(char *, char *, uint64_t))(v329 + 32))(v256, v257, v339);
      v260 = v338;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v329 + 56))(v256, 0, 1, v339);
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  v260 = v338;
  if (v259)
  {
    (*(void (**)(char *, uint64_t))(v329 + 8))(v256, v339);
LABEL_110:
    sub_2415B2870(0);
    memcpy(v256, v257, *(_QWORD *)(*(_QWORD *)(v261 - 8) + 64));
    goto LABEL_111;
  }
  (*(void (**)(char *, char *, uint64_t))(v329 + 40))(v256, v257, v339);
LABEL_111:
  v262 = v21[21];
  v263 = *(void **)&v218[v262];
  *(_QWORD *)&v218[v262] = *(_QWORD *)&v219[v262];

  v264 = v21[22];
  v265 = &v218[v264];
  v266 = &v219[v264];
  v267 = v260(&v218[v264], 1, v25);
  v268 = v260(v266, 1, v25);
  if (v267)
  {
    v270 = v325;
    v269 = v326;
    if (!v268)
    {
      (*(void (**)(char *, char *, uint64_t))(v340 + 32))(v265, v266, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v340 + 56))(v265, 0, 1, v25);
      goto LABEL_117;
    }
    goto LABEL_116;
  }
  v270 = v325;
  v269 = v326;
  if (v268)
  {
    (*(void (**)(char *, uint64_t))(v340 + 8))(v265, v25);
LABEL_116:
    sub_2415A0A74(0);
    memcpy(v265, v266, *(_QWORD *)(*(_QWORD *)(v271 - 8) + 64));
    goto LABEL_117;
  }
  (*(void (**)(char *, char *, uint64_t))(v340 + 40))(v265, v266, v25);
LABEL_117:
  ((void (*)(char *, char *, uint64_t))v327)(&v214[v334[6]], &v336[v334[6]], v328);
  ((void (*)(char *, char *, uint64_t))v330)(&v214[v334[7]], &v336[v334[7]], v337);
  *(_QWORD *)&v214[v334[8]] = *(_QWORD *)&v336[v334[8]];
  swift_release();
  v272 = v334[9];
  v273 = &v214[v272];
  v274 = &v336[v272];
  v275 = v260(&v214[v272], 1, v25);
  v276 = v260(v274, 1, v25);
  if (v275)
  {
    v277 = v324;
    if (!v276)
    {
      (*(void (**)(char *, char *, uint64_t))(v340 + 32))(v273, v274, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v340 + 56))(v273, 0, 1, v25);
      goto LABEL_123;
    }
    goto LABEL_122;
  }
  v277 = v324;
  if (v276)
  {
    (*(void (**)(char *, uint64_t))(v340 + 8))(v273, v25);
LABEL_122:
    sub_2415A0A74(0);
    memcpy(v273, v274, *(_QWORD *)(*(_QWORD *)(v278 - 8) + 64));
    goto LABEL_123;
  }
  (*(void (**)(char *, char *, uint64_t))(v340 + 40))(v273, v274, v25);
LABEL_123:
  v279 = v277[6];
  v280 = (_QWORD *)((char *)v269 + v279);
  v281 = (_QWORD *)((char *)v270 + v279);
  v282 = *(void **)((char *)v269 + v279);
  *v280 = *v281;

  v280[1] = v281[1];
  if (v269 != v270)
  {
    v283 = v277[7];
    v284 = (char *)v269 + v283;
    v285 = (char *)v270 + v283;
    v286 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0];
    v287 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415C2970((uint64_t)v269 + v283, (uint64_t)&qword_25713A1C0, (uint64_t)MEMORY[0x24BDCF2E0], (uint64_t)MEMORY[0x24BDEB560], (uint64_t (*)(_QWORD))sub_24159D6B0);
    sub_24159D6B0(0, &qword_25713A1C0, v286, v287);
    v289 = v288;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v320 + 32))(v284, v285, v328);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v284, v285, *(_QWORD *)(*(_QWORD *)(v289 - 8) + 64));
    }
    v290 = v277[8];
    v291 = (char *)v269 + v290;
    v292 = (char *)v270 + v290;
    v293 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    sub_2415C2970((uint64_t)v269 + v290, (uint64_t)&qword_25713A1C8, (uint64_t)MEMORY[0x24BDCEEB0], (uint64_t)v287, (uint64_t (*)(_QWORD))sub_24159D6B0);
    sub_24159D6B0(0, &qword_25713A1C8, v293, v287);
    v295 = v294;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v321 + 32))(v291, v292, v337);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v291, v292, *(_QWORD *)(*(_QWORD *)(v295 - 8) + 64));
    }
    v296 = v277[9];
    v297 = (char *)v269 + v296;
    v298 = (char *)v270 + v296;
    v299 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEB418];
    v300 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415C2970((uint64_t)v269 + v296, (uint64_t)&qword_25713A1D0, (uint64_t)MEMORY[0x24BDEB418], (uint64_t)MEMORY[0x24BDEB560], (uint64_t (*)(_QWORD))sub_24159D6B0);
    sub_24159D6B0(0, &qword_25713A1D0, v299, v300);
    v302 = v301;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v303 = sub_2416B9FA0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v303 - 8) + 32))(v297, v298, v303);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v297, v298, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
    }
  }
  v304 = v277[10];
  v305 = (uint64_t)v269 + v304;
  v306 = (uint64_t)v270 + v304;
  *(_QWORD *)((char *)v269 + v304) = *(_QWORD *)((char *)v270 + v304);
  swift_release();
  *(_QWORD *)(v305 + 8) = *(_QWORD *)(v306 + 8);
  swift_release();
  *(_BYTE *)(v305 + 16) = *(_BYTE *)(v306 + 16);
  v307 = v277[11];
  v308 = (uint64_t)v269 + v307;
  v309 = (uint64_t)v270 + v307;
  *(_BYTE *)v308 = *(_BYTE *)v309;
  *(_QWORD *)(v308 + 8) = *(_QWORD *)(v309 + 8);
  swift_release();
  v310 = v277[12];
  v311 = (uint64_t)v269 + v310;
  v312 = (uint64_t)v270 + v310;
  *(_BYTE *)v311 = *(_BYTE *)v312;
  *(_QWORD *)(v311 + 8) = *(_QWORD *)(v312 + 8);
  swift_release();
  v313 = v277[13];
  v314 = (_QWORD *)((char *)v269 + v313);
  v315 = (_QWORD *)((char *)v270 + v313);
  *v314 = *v315;
  v314[1] = v315[1];
  swift_release();
  v316 = v277[14];
  v317 = (_QWORD *)((char *)v269 + v316);
  v318 = (_QWORD *)((char *)v270 + v316);
  *v317 = *v318;
  v317[1] = v318[1];
  swift_release();
  return v269;
}

uint64_t sub_2415B876C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415B8778(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for MedicalIDDataViewModel();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      sub_24159D6B0(0, &qword_25713A1D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], MEMORY[0x24BDEB580]);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[8];
        }
        else
        {
          sub_24159D6B0(0, &qword_25713A1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB418], MEMORY[0x24BDEB580]);
          v10 = v14;
          v9 = *(_QWORD *)(v14 - 8);
          v11 = a3[9];
        }
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_2415B88A8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_2415B88B4(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for MedicalIDDataViewModel();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      sub_24159D6B0(0, &qword_25713A1D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], MEMORY[0x24BDEB580]);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[8];
        }
        else
        {
          sub_24159D6B0(0, &qword_25713A1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB418], MEMORY[0x24BDEB580]);
          v10 = v14;
          v9 = *(_QWORD *)(v14 - 8);
          v11 = a4[9];
        }
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDDataContentView()
{
  uint64_t result;

  result = qword_25713A248;
  if (!qword_25713A248)
    return swift_getSingletonMetadata();
  return result;
}

void sub_2415B8A1C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for MedicalIDDataViewModel();
  if (v0 <= 0x3F)
  {
    sub_24159D6B0(319, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (v1 <= 0x3F)
    {
      sub_24159D6B0(319, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
      if (v2 <= 0x3F)
      {
        sub_24159D6B0(319, &qword_25713A1D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB418], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_2415B8B48()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2415B8B58(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  void (*v18)(char *);
  uint64_t v19;
  char v20;
  uint64_t v21;

  v4 = v3;
  v18 = a1;
  v19 = a2;
  v6 = _s15SectionGridItemVMa();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v21 = MEMORY[0x24BEE4AF8];
    sub_2415FE500(0, v10, 0);
    v11 = v21;
    v12 = (char *)(a3 + 32);
    while (1)
    {
      v13 = *v12++;
      v20 = v13;
      v18(&v20);
      if (v4)
        break;
      v4 = 0;
      v21 = v11;
      v15 = *(_QWORD *)(v11 + 16);
      v14 = *(_QWORD *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_2415FE500(v14 > 1, v15 + 1, 1);
        v11 = v21;
      }
      *(_QWORD *)(v11 + 16) = v15 + 1;
      sub_2415A85BC((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v15, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
      if (!--v10)
        return v11;
    }
    swift_release();
  }
  return v11;
}

void sub_2415B8CAC(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t sub_2415B8CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v38 = a4;
  v36 = a2;
  v37 = a3;
  v7 = type metadata accessor for MedicalIDDataViewModel();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (int *)type metadata accessor for MedicalIDDataContentView();
  v11 = (_QWORD *)((char *)a5 + v10[6]);
  sub_2415C0788(0, (unint64_t *)&qword_25713A430);
  sub_2415BEF08();
  *v11 = sub_2416BA270();
  v11[1] = v12;
  v13 = (_QWORD *)((char *)a5 + v10[7]);
  *v13 = swift_getKeyPath();
  v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v15 = (_QWORD *)((char *)a5 + v10[8]);
  *v15 = swift_getKeyPath();
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], v14);
  swift_storeEnumTagMultiPayload();
  v16 = (_QWORD *)((char *)a5 + v10[9]);
  *v16 = swift_getKeyPath();
  sub_24159D6B0(0, &qword_25713A1D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB418], v14);
  swift_storeEnumTagMultiPayload();
  v17 = (char *)a5 + v10[11];
  LOBYTE(v39) = 0;
  sub_2416BAD08();
  v18 = v41;
  *v17 = v40;
  *((_QWORD *)v17 + 1) = v18;
  v19 = (char *)a5 + v10[12];
  LOBYTE(v39) = 8;
  sub_24159D7F0(0, &qword_25713A4F0, (uint64_t)&type metadata for MedicalIDDisplaySection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  sub_2416BAD08();
  v20 = v41;
  *v19 = v40;
  *((_QWORD *)v19 + 1) = v20;
  v21 = (_QWORD *)((char *)a5 + v10[13]);
  v39 = 0;
  sub_2416BAD08();
  v22 = v41;
  *v21 = v40;
  v21[1] = v22;
  v23 = (_QWORD *)((char *)a5 + v10[14]);
  v39 = 0;
  sub_2416BAD08();
  v24 = v41;
  *v23 = v40;
  v23[1] = v24;
  *a5 = a1;
  v25 = sub_2416B9C70();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v36 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_2416B9C4C();
  v29 = sub_2416B9C10();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v36 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416B9BEC();
  sub_2415A6B00((uint64_t)v28, (uint64_t)v32, v9);
  swift_release();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  result = sub_2415A85BC((uint64_t)v9, (uint64_t)a5 + v10[5], (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataViewModel);
  v34 = (char *)a5 + v10[10];
  v35 = v37;
  *(_QWORD *)v34 = v36;
  *((_QWORD *)v34 + 1) = v35;
  v34[16] = v38;
  return result;
}

uint64_t sub_2415B9070@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  double (**v22)@<D0>(double *@<X8>);
  void *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t (**v48)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (**v61)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v62;
  uint64_t v63;

  v61 = a1;
  v2 = type metadata accessor for MedicalIDDataContentView();
  v57 = *(_QWORD *)(v2 - 8);
  v62 = *(_QWORD *)(v57 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BDC0C();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEE70(0);
  v50 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEE8C(0);
  v54 = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v59 = *(_QWORD *)(v14 + 64);
  v60 = v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v58 = (uint64_t)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v51 = (char *)&v49 - v17;
  v63 = v1;
  sub_2416BA804();
  sub_2415BE730(0, &qword_25713A2B0, sub_2415BDC84);
  sub_2415BEC9C();
  sub_2416B9F7C();
  v53 = v1;
  v55 = v4;
  sub_2415BEF64(v1, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
  v18 = *(unsigned __int8 *)(v57 + 80);
  v19 = (v18 + 16) & ~v18;
  v56 = v18 | 7;
  v57 = v18;
  v20 = swift_allocObject();
  sub_2415A85BC((uint64_t)v4, v20 + v19, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
  v21 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v52 = v12;
  v21(v12, v9, v6);
  v22 = (double (**)@<D0>(double *@<X8>))&v12[*(int *)(v50 + 36)];
  *v22 = sub_2415BA144;
  v22[1] = 0;
  v22[2] = (double (*)@<D0>(double *@<X8>))sub_2415BEEB4;
  v22[3] = (double (*)@<D0>(double *@<X8>))v20;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v23 = *(void **)(*(_QWORD *)(*(_QWORD *)v1 + 32) + 16);
  v24 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
  sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (uint64_t *)((char *)&v49 - v26);
  *v27 = swift_getKeyPath();
  v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
  sub_24159D6B0(0, &qword_25713A1C8, v24, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  sub_2415C0788(0, (unint64_t *)&qword_25713A430);
  sub_2415BEF08();
  v29 = v23;
  v30 = sub_2416BA270();
  v32 = v31;
  KeyPath = swift_getKeyPath();
  v34 = (uint64_t)v51;
  v35 = &v51[*(int *)(v54 + 36)];
  v36 = (int *)type metadata accessor for MedicalIDNavigationBarViewModifier();
  *(_QWORD *)&v35[v36[8]] = KeyPath;
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], v28);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for MedicalIDDataManager();
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  v37 = sub_2416B9FC4();
  LOBYTE(v28) = v38;
  *v35 = 0;
  sub_2415C287C((uint64_t)v27, (uint64_t)&v35[v36[5]], (uint64_t)&qword_25713A1E0, (uint64_t)MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_24159D6B0);
  v39 = (uint64_t *)&v35[v36[6]];
  *v39 = v30;
  v39[1] = v32;
  *(_QWORD *)&v35[v36[7]] = v29;
  v40 = &v35[v36[9]];
  *(_QWORD *)v40 = v37;
  v40[8] = v28 & 1;
  v41 = (uint64_t)v52;
  sub_2415BEF64((uint64_t)v52, v34, (uint64_t (*)(_QWORD))sub_2415BEE70);

  sub_2415A6154(v41, (uint64_t (*)(_QWORD))sub_2415BEE70);
  v42 = v58;
  sub_2415BEF64(v34, v58, (uint64_t (*)(_QWORD))sub_2415BEE8C);
  v43 = (uint64_t)v55;
  sub_2415BEF64(v53, (uint64_t)v55, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
  v44 = (*(unsigned __int8 *)(v60 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
  v45 = (v59 + v57 + v44) & ~v57;
  v46 = swift_allocObject();
  sub_2415A85BC(v42, v46 + v44, (uint64_t (*)(_QWORD))sub_2415BEE8C);
  sub_2415A85BC(v43, v46 + v45, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
  result = sub_2415A6154(v34, (uint64_t (*)(_QWORD))sub_2415BEE8C);
  v48 = v61;
  *v61 = sub_2415BFAF0;
  v48[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v46;
  return result;
}

uint64_t sub_2415B958C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (**v23)();
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;

  v66 = a2;
  v65 = sub_2416B9D3C();
  v63 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v64 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for MedicalIDDataContentView();
  v59 = *(_QWORD *)(v69 - 8);
  v4 = *(_QWORD *)(v59 + 64);
  v5 = MEMORY[0x24BDAC7A8](v69);
  v60 = (uint64_t)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v59 - v6;
  v8 = sub_2416BA60C();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEF998];
  MEMORY[0x24BDAC7A8](v8);
  sub_2415BDE00();
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BDDE4(0);
  v68 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v67 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BDC84(0);
  v62 = v17;
  v61 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v70 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416BA51C();
  v71 = a1;
  LODWORD(v72) = 0;
  sub_24159CE88(&qword_25713A558, v9, MEMORY[0x24BDEF9B8]);
  sub_2416BB6F8();
  sub_2415BDE78(0);
  sub_24159CE88(&qword_25713A3F8, (uint64_t (*)(uint64_t))sub_2415BDE78, MEMORY[0x24BDF5428]);
  sub_2416B9F4C();
  v19 = a1;
  sub_2415BEF64(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
  v20 = (*(unsigned __int8 *)(v59 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  v21 = swift_allocObject();
  sub_2415A85BC((uint64_t)v7, v21 + v20, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
  v22 = v67;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v67, v14, v11);
  v23 = (uint64_t (**)())&v22[*(int *)(v68 + 36)];
  *v23 = sub_2415C08B8;
  v23[1] = (uint64_t (*)())v21;
  v23[2] = 0;
  v23[3] = 0;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v24 = v19 + *(int *)(v69 + 48);
  v25 = *(_BYTE *)v24;
  v26 = *(_QWORD *)(v24 + 8);
  LOBYTE(v72) = v25;
  v73 = v26;
  sub_2415BFB68();
  sub_2416BAD2C();
  v76 = v79;
  v77 = v80;
  v78 = v81;
  sub_2415BEF64(v19, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
  v27 = swift_allocObject();
  sub_2415A85BC((uint64_t)v7, v27 + v20, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
  v28 = v60;
  sub_2415BEF64(v19, v60, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
  v29 = swift_allocObject();
  sub_2415A85BC(v28, v29 + v20, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
  sub_2415BE78C(0);
  sub_2415C3610(&qword_25713A4A0, (uint64_t (*)(uint64_t))sub_2415BDDE4, sub_2415BEC3C, MEMORY[0x24BDF0910]);
  sub_2415BEC58();
  sub_2415BE868();
  v31 = v30;
  v32 = type metadata accessor for MedicalIDDataManager();
  v33 = sub_2415A40A4(&qword_25713A468, (uint64_t (*)(uint64_t))sub_2415BE868, sub_2415BEAA0, (uint64_t (*)(void))sub_2415BEBD4);
  v34 = sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  v72 = v31;
  v73 = v32;
  v74 = v33;
  v75 = v34;
  swift_getOpaqueTypeConformance2();
  v35 = (uint64_t)v67;
  sub_2416BAB7C();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_2415A6154(v35, (uint64_t (*)(_QWORD))sub_2415BDDE4);
  v36 = (uint64_t *)(v19 + *(int *)(v69 + 56));
  v37 = *v36;
  v38 = v36[1];
  v79 = v37;
  v80 = v38;
  sub_24159D7F0(0, &qword_25713A550, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  v39 = v72;
  v40 = v73;
  v41 = v74;
  sub_2415C0788(0, (unint64_t *)&qword_25713A430);
  sub_2415BEF08();
  v42 = sub_2416BA270();
  v44 = v43;
  if (qword_257139600 != -1)
    swift_once();
  v45 = v65;
  v46 = __swift_project_value_buffer(v65, (uint64_t)qword_257147840);
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
  v48 = v64;
  v47(v64, v46, v45);
  v49 = sub_2416BAC78();
  if (qword_2571395F8 != -1)
    swift_once();
  v50 = __swift_project_value_buffer(v45, (uint64_t)qword_257147828);
  v47(v48, v50, v45);
  v51 = sub_2416BAC78();
  v52 = v61;
  v53 = v66;
  v54 = v70;
  v55 = v62;
  (*(void (**)(uint64_t, char *, uint64_t))(v61 + 16))(v66, v70, v62);
  sub_2415BE730(0, &qword_25713A2B0, sub_2415BDC84);
  v57 = (uint64_t *)(v53 + *(int *)(v56 + 36));
  *v57 = v42;
  v57[1] = v44;
  v57[2] = v39;
  v57[3] = v40;
  v57[4] = v41;
  v57[5] = v49;
  v57[6] = v51;
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v54, v55);
}

uint64_t sub_2415B9C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t result;
  void *v19;
  id v20;
  id v21;
  _BOOL8 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t aBlock;
  uint64_t v27;
  void (*v28)(uint64_t, void *);
  void *v29;
  uint64_t (*v30)(void *);
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  v2 = type metadata accessor for MedicalIDDataContentView();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_25713A560, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v25 - v7;
  v9 = v0 + *(int *)(v2 + 40);
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  LOBYTE(v9) = *(_BYTE *)(v9 + 16);
  aBlock = v10;
  v27 = v11;
  LOBYTE(v28) = v9;
  sub_24159D7F0(0, &qword_25713A568, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604](&v32);
  if (v32 == 1)
  {
    v12 = sub_2416BB2A8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 1, 1, v12);
    sub_2415BEF64(v0, (uint64_t)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
    sub_2416BB290();
    v13 = sub_2416BB284();
    v14 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v15 = swift_allocObject();
    v16 = MEMORY[0x24BEE6930];
    *(_QWORD *)(v15 + 16) = v13;
    *(_QWORD *)(v15 + 24) = v16;
    sub_2415A85BC((uint64_t)v5, v15 + v14, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
    sub_24160B674((uint64_t)v8, (uint64_t)&unk_25713A578, v15);
    swift_release();
  }
  v17 = *(void **)(v1 + *(int *)(v2 + 24));
  if (v17)
  {
    result = (uint64_t)objc_msgSend(v17, sel_suggestHealthData);
    if ((result & 1) != 0)
    {
      v19 = *(void **)(*(_QWORD *)(*(_QWORD *)v1 + 24) + 16);
      swift_retain();
      v20 = objc_msgSend(v19, sel_profileIdentifier);
      v21 = objc_msgSend(v20, sel_type);

      v22 = v21 == (id)3;
      v23 = swift_allocObject();
      swift_weakInit();
      v30 = sub_2415C1DB8;
      v31 = v23;
      aBlock = MEMORY[0x24BDAC760];
      v27 = 1107296256;
      v28 = sub_2415B8CAC;
      v29 = &block_descriptor_27;
      v24 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(v19, sel_hk_fetchExistingDemographicInformationWithOptions_completion_, v22, v24);
      _Block_release(v24);
      return swift_release();
    }
  }
  else
  {
    sub_2415C0788(0, (unint64_t *)&qword_25713A430);
    sub_2415BEF08();
    result = sub_2416BA264();
    __break(1u);
  }
  return result;
}

uint64_t sub_2415B9F50()
{
  type metadata accessor for MedicalIDDataContentView();
  sub_2415BFB68();
  return sub_2416BAD20();
}

uint64_t sub_2415B9FB4@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t result;
  uint64_t v20;

  v6 = _s12SheetContentVMa();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BE78C(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  v15 = type metadata accessor for MedicalIDDataContentView();
  sub_2415BEF64((uint64_t)a2 + *(int *)(v15 + 20), (uint64_t)&v8[*(int *)(v6 + 20)], (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataViewModel);
  v16 = *a2;
  *v8 = v14;
  *(_QWORD *)&v8[*(int *)(v6 + 24)] = v16;
  v17 = *(void **)((char *)a2 + *(int *)(v15 + 24));
  if (v17)
  {
    swift_retain();
    v18 = v17;
    sub_2415E0958(v18, v16, (uint64_t)v13);

    sub_2415A6154((uint64_t)v8, (uint64_t (*)(_QWORD))_s12SheetContentVMa);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v13, v10);
  }
  else
  {
    sub_2415C0788(0, (unint64_t *)&qword_25713A430);
    sub_2415BEF08();
    swift_retain();
    result = sub_2416BA264();
    __break(1u);
  }
  return result;
}

double sub_2415BA144@<D0>(double *a1@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double result;

  sub_2416BA084();
  v3 = v2;
  sub_2416BA078();
  v5 = v3 + v4;
  sub_2416BA078();
  result = v5 + v6;
  *a1 = v5 + v6;
  return result;
}

uint64_t sub_2415BA188()
{
  type metadata accessor for MedicalIDDataContentView();
  sub_24159D7F0(0, &qword_25713A550, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  return sub_2416BAD20();
}

uint64_t sub_2415BA208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  char v21;
  uint64_t v22;
  char v23;

  v20[1] = a4;
  v20[2] = a2;
  v20[0] = a1;
  v5 = sub_2416BA198();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MedicalIDDataContentView();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a3 + *(int *)(MEMORY[0x24BDAC7A8](v9) + 48);
  v14 = *(_BYTE *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v21 = v14;
  v22 = v15;
  sub_2415BFB68();
  sub_2416BAD14();
  v21 = v23;
  sub_2415BEF64(a3, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 16))(v8, v20[0], v5);
  v16 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v17 = (v11 + *(unsigned __int8 *)(v6 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v18 = swift_allocObject();
  sub_2415A85BC((uint64_t)v12, v18 + v16, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v18 + v17, v8, v5);
  sub_2415BEE8C(0);
  sub_24159D7F0(0, &qword_25713A4F0, (uint64_t)&type metadata for MedicalIDDisplaySection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  sub_2415A40A4(&qword_25713A4F8, (uint64_t (*)(uint64_t))sub_2415BEE8C, sub_2415C0698, sub_2415C06F4);
  sub_2415C0710();
  sub_2416BABDC();
  return swift_release();
}

uint64_t sub_2415BA410(unsigned __int8 *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t aBlock;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  void *v48;
  uint64_t (*v49)();
  uint64_t v50;

  v35 = a3;
  v6 = sub_2416BAFE4();
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v41 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2416BB008();
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v38 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_2416BA198();
  v10 = *(_QWORD *)(v34 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v34);
  v37 = sub_2416BB020();
  v12 = *(_QWORD *)(v37 - 8);
  v13 = MEMORY[0x24BDAC7A8](v37);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v13);
  v36 = (char *)&v32 - v17;
  v18 = *a1;
  if (v18 != 8 && *a2 == 8)
  {
    v19 = (char *)(v3 + *(int *)(type metadata accessor for MedicalIDDataContentView() + 44));
    v20 = *v19;
    v21 = *((_QWORD *)v19 + 1);
    LOBYTE(aBlock) = *v19;
    v46 = v21;
    sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
    result = sub_2416BAD14();
    if (v44 == 1)
    {
      LOBYTE(aBlock) = v20;
      v46 = v21;
      LOBYTE(v44) = 0;
      sub_2416BAD20();
      sub_2415C0788(0, (unint64_t *)&qword_25713A530);
      v32 = sub_2416BB3BC();
      sub_2416BB014();
      v22 = v36;
      MEMORY[0x242698820](v15, 0.4);
      v33 = *(void (**)(char *, uint64_t))(v12 + 8);
      v23 = v37;
      v33(v15, v37);
      v24 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v35, v34);
      v25 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v26 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v26 + v25, (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v24);
      *(_BYTE *)(v26 + v25 + v11) = v18;
      v49 = sub_2415C0824;
      v50 = v26;
      aBlock = MEMORY[0x24BDAC760];
      v46 = 1107296256;
      v47 = sub_2416817C4;
      v48 = &block_descriptor_0;
      v27 = _Block_copy(&aBlock);
      v28 = v38;
      sub_2416BAFF0();
      v44 = MEMORY[0x24BEE4AF8];
      sub_24159CE88(&qword_25713A538, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      sub_2415C0874(0);
      sub_24159CE88((unint64_t *)&qword_25713A548, (uint64_t (*)(uint64_t))sub_2415C0874, MEMORY[0x24BEE12C8]);
      v29 = v41;
      v30 = v43;
      sub_2416BB4A0();
      v31 = (void *)v32;
      MEMORY[0x242698B98](v22, v28, v29, v27);
      _Block_release(v27);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v30);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v40);
      v33(v22, v23);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_2415BA7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  sub_2416BB290();
  *(_QWORD *)(v4 + 48) = sub_2416BB284();
  sub_2416BB254();
  return swift_task_switch();
}

uint64_t sub_2415BA838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id *v3;
  int *v4;
  uint64_t v5;
  MIUIDisplayConfiguration *v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char *v15;
  char v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release();
  v2 = type metadata accessor for MedicalIDDataContentView();
  v3 = (id *)(v1 + *(int *)(v2 + 24));
  if (*v3)
  {
    v4 = (int *)v2;
    v5 = *(_QWORD *)(v0 + 40);
    v6 = (MIUIDisplayConfiguration *)*v3;
    MedicalIDDataViewModel.displaySectionForFirstLaunch(_:)(v6);

    v7 = (char *)(v5 + v4[12]);
    v8 = *v7;
    v9 = *((_QWORD *)v7 + 1);
    *(_BYTE *)(v0 + 16) = *v7;
    *(_QWORD *)(v0 + 24) = v9;
    sub_2415BFB68();
    sub_2416BAD20();
    v10 = (uint64_t *)(v5 + v4[10]);
    v11 = *v10;
    v12 = v10[1];
    LOBYTE(v10) = *((_BYTE *)v10 + 16);
    *(_QWORD *)(v0 + 16) = v11;
    *(_QWORD *)(v0 + 24) = v12;
    *(_WORD *)(v0 + 32) = v10;
    v13 = MEMORY[0x24BEE1328];
    sub_24159D7F0(0, &qword_25713A568, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF4870]);
    sub_2416BAE1C();
    *(_BYTE *)(v0 + 16) = v8;
    *(_QWORD *)(v0 + 24) = v9;
    sub_2416BAD14();
    v14 = *(_BYTE *)(v0 + 33) != 8;
    v15 = (char *)(v5 + v4[11]);
    v16 = *v15;
    v17 = *((_QWORD *)v15 + 1);
    *(_BYTE *)(v0 + 16) = v16;
    *(_QWORD *)(v0 + 24) = v17;
    *(_BYTE *)(v0 + 33) = v14;
    sub_24159D7F0(0, (unint64_t *)&qword_25713A528, v13, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
    sub_2416BAD20();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_2415C0788(0, (unint64_t *)&qword_25713A430);
    sub_2415BEF08();
    return sub_2416BA264();
  }
}

uint64_t sub_2415BA9F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v53 = a2;
  sub_2415BE36C(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BE730(0, &qword_25713A378, v6);
  v8 = v7;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v51 - v12;
  sub_2415BE2C8(0, &qword_25713A360, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v51 - v18;
  sub_2415BDF40();
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v54 = (uint64_t)&v51 - v24;
  v25 = *(void **)(a1 + *(int *)(type metadata accessor for MedicalIDDataContentView() + 24));
  if (!v25)
  {
    sub_2415C0788(0, (unint64_t *)&qword_25713A430);
    sub_2415BEF08();
    result = sub_2416BA264();
    __break(1u);
    return result;
  }
  v26 = v25;
  if ((objc_msgSend(v26, sel_isLockScreen) & 1) == 0)
  {
    if ((objc_msgSend(v26, sel_isShowWhenLockedVisible) & 1) != 0)
    {

    }
    else
    {
      v28 = objc_msgSend(v26, sel_isShareDuringEmergencyCallVisible);

      if (!v28)
        goto LABEL_4;
    }
    v29 = v54;
    sub_2415BAEC8(v54);
    sub_2415A39C0(0, &qword_25713A2E8, sub_2415BDFAC, (void (*)(uint64_t))sub_2415BE080);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 0, 1, v30);
    goto LABEL_9;
  }

LABEL_4:
  sub_2415A39C0(0, &qword_25713A2E8, sub_2415BDFAC, (void (*)(uint64_t))sub_2415BE080);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v54, 1, 1, v27);
LABEL_9:
  v31 = (uint64_t)v19;
  sub_2415BB384((uint64_t)v19);
  sub_2415BB7C0(a1, v5);
  v32 = sub_2416BA810();
  if (qword_2571393A8 != -1)
    swift_once();
  sub_2416B9EF8();
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v40 = v39;
  sub_2415BEF64((uint64_t)v5, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_2415BE36C);
  v41 = &v11[*(int *)(v8 + 36)];
  *v41 = v32;
  *((_QWORD *)v41 + 1) = v34;
  *((_QWORD *)v41 + 2) = v36;
  *((_QWORD *)v41 + 3) = v38;
  *((_QWORD *)v41 + 4) = v40;
  v41[40] = 0;
  sub_2415A6154((uint64_t)v5, (uint64_t (*)(_QWORD))sub_2415BE36C);
  v42 = MEMORY[0x24BDECC80];
  sub_2415C287C((uint64_t)v11, (uint64_t)v13, (uint64_t)&qword_25713A378, (uint64_t)sub_2415BE36C, MEMORY[0x24BDECC80], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_2415BE730);
  v43 = v54;
  v52 = v23;
  sub_2415BEF64(v54, (uint64_t)v23, (uint64_t (*)(_QWORD))sub_2415BDF40);
  sub_2415C28CC(v31, (uint64_t)v17);
  sub_2415C2920((uint64_t)v13, (uint64_t)v11, (uint64_t)&qword_25713A378, (uint64_t)sub_2415BE36C, v42, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_2415BE730);
  v44 = v53;
  sub_2415BEF64((uint64_t)v23, v53, (uint64_t (*)(_QWORD))sub_2415BDF40);
  sub_2415BDE94();
  v45 = v44;
  v47 = v46;
  sub_2415C28CC((uint64_t)v17, v45 + *(int *)(v46 + 48));
  v48 = v45 + *(int *)(v47 + 64);
  v49 = MEMORY[0x24BDECC80];
  sub_2415C2920((uint64_t)v11, v48, (uint64_t)&qword_25713A378, (uint64_t)sub_2415BE36C, MEMORY[0x24BDECC80], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_2415BE730);
  sub_2415C2970((uint64_t)v13, (uint64_t)&qword_25713A378, (uint64_t)sub_2415BE36C, v49, (uint64_t (*)(_QWORD))sub_2415BE730);
  sub_2415C29AC(v31);
  sub_2415A6154(v43, (uint64_t (*)(_QWORD))sub_2415BDF40);
  sub_2415C2970((uint64_t)v11, (uint64_t)&qword_25713A378, (uint64_t)sub_2415BE36C, v49, (uint64_t (*)(_QWORD))sub_2415BE730);
  sub_2415C29AC((uint64_t)v17);
  return sub_2415A6154((uint64_t)v52, (uint64_t (*)(_QWORD))sub_2415BDF40);
}

uint64_t sub_2415BAEC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  _BYTE v71[7];
  _BYTE v72[7];
  char v73;
  int v74;
  __int16 v75;

  v66 = a1;
  v2 = type metadata accessor for MedicalIDDataContentView();
  v64 = *(_QWORD *)(v2 - 8);
  v65 = v2;
  v3 = *(_QWORD *)(v64 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v4 = type metadata accessor for MedicalIDSettingsViewModel(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MedicalIDEditSettingsView();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BDFC8(0);
  v11 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BDFAC(0);
  v15 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v1;
  sub_2415A6D50((uint64_t)v6);
  sub_24164BD6C((uint64_t)v6, (uint64_t)v9);
  v19 = sub_2416BA834();
  if (qword_257139378 != -1)
    swift_once();
  sub_2416B9EF8();
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  sub_2415BEF64((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditSettingsView);
  v28 = &v13[*(int *)(v11 + 36)];
  *v28 = v19;
  *((_QWORD *)v28 + 1) = v21;
  *((_QWORD *)v28 + 2) = v23;
  *((_QWORD *)v28 + 3) = v25;
  *((_QWORD *)v28 + 4) = v27;
  v28[40] = 0;
  sub_2415A6154((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditSettingsView);
  v29 = v18;
  sub_2415BEF64(v18, (uint64_t)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
  v30 = (*(unsigned __int8 *)(v64 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
  v31 = swift_allocObject();
  sub_2415A85BC((uint64_t)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v31 + v30, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
  sub_2415BEF64((uint64_t)v13, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_2415BDFC8);
  v32 = &v17[*(int *)(v15 + 36)];
  *(_QWORD *)v32 = sub_2415BD73C;
  *((_QWORD *)v32 + 1) = 0;
  *((_QWORD *)v32 + 2) = sub_2415C33E4;
  *((_QWORD *)v32 + 3) = v31;
  sub_2415A6154((uint64_t)v13, (uint64_t (*)(_QWORD))sub_2415BDFC8);
  v33 = sub_2416BAF48();
  v35 = v34;
  v36 = objc_msgSend((id)objc_opt_self(), sel_systemGroupedBackgroundColor);
  v37 = MEMORY[0x242698400](v36);
  if (qword_2571393C0 != -1)
    swift_once();
  v38 = qword_2571476F0;
  v39 = (uint64_t *)(v29 + *(int *)(v65 + 52));
  v40 = *v39;
  v41 = v39[1];
  v67 = v40;
  v68 = v41;
  sub_24159D7F0(0, &qword_25713A550, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v64 = v69;
  v42 = sub_2416BA828();
  sub_2416B9EF8();
  v65 = v43;
  v45 = v44;
  v47 = v46;
  v49 = v48;
  v50 = sub_2416BA810();
  if (qword_2571393C8 != -1)
    swift_once();
  sub_2416B9EF8();
  v52 = v51;
  v54 = v53;
  v56 = v55;
  v58 = v57;
  v73 = 0;
  v70 = 0;
  v59 = v66;
  sub_2415BEF64((uint64_t)v17, v66, (uint64_t (*)(_QWORD))sub_2415BDFAC);
  sub_2415A39C0(0, &qword_25713A2E8, sub_2415BDFAC, (void (*)(uint64_t))sub_2415BE080);
  v61 = v59 + *(int *)(v60 + 36);
  *(_QWORD *)v61 = v37;
  *(_QWORD *)(v61 + 8) = 0;
  *(_QWORD *)(v61 + 16) = v38;
  *(_QWORD *)(v61 + 24) = 0;
  *(_QWORD *)(v61 + 32) = v64;
  *(_WORD *)(v61 + 40) = 256;
  *(_DWORD *)(v61 + 42) = v74;
  *(_WORD *)(v61 + 46) = v75;
  *(_BYTE *)(v61 + 48) = v42;
  *(_DWORD *)(v61 + 49) = v69;
  *(_DWORD *)(v61 + 52) = *(_DWORD *)((char *)&v69 + 3);
  *(_QWORD *)(v61 + 56) = v65;
  *(_QWORD *)(v61 + 64) = v45;
  *(_QWORD *)(v61 + 72) = v47;
  *(_QWORD *)(v61 + 80) = v49;
  *(_BYTE *)(v61 + 88) = 0;
  *(_DWORD *)(v61 + 92) = *(_DWORD *)&v72[3];
  *(_DWORD *)(v61 + 89) = *(_DWORD *)v72;
  *(_BYTE *)(v61 + 96) = v50;
  *(_DWORD *)(v61 + 100) = *(_DWORD *)&v71[3];
  *(_DWORD *)(v61 + 97) = *(_DWORD *)v71;
  *(_QWORD *)(v61 + 104) = v52;
  *(_QWORD *)(v61 + 112) = v54;
  *(_QWORD *)(v61 + 120) = v56;
  *(_QWORD *)(v61 + 128) = v58;
  *(_BYTE *)(v61 + 136) = 0;
  *(_DWORD *)(v61 + 137) = v67;
  *(_DWORD *)(v61 + 140) = *(_DWORD *)((char *)&v67 + 3);
  *(_QWORD *)(v61 + 144) = v33;
  *(_QWORD *)(v61 + 152) = v35;
  return sub_2415A6154((uint64_t)v17, (uint64_t (*)(_QWORD))sub_2415BDFAC);
}

uint64_t sub_2415BB384@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  void (*v28)(char *, uint64_t);
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  __int128 v42;

  v37 = a1;
  v2 = sub_2416B9FA0();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v32 - v7;
  v33 = sub_2416BAE70();
  v9 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BE350(0);
  v36 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v34 = (uint64_t)&v32 - v16;
  sub_2415BE2C8(0, &qword_25713A598, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
  v35 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v32 - v18;
  v20 = *(void **)(v1 + *(int *)(type metadata accessor for MedicalIDDataContentView() + 24));
  if (v20)
  {
    if ((objc_msgSend(v20, sel_isLockScreen) & 1) != 0)
    {
      v21 = sub_2416BAC3C();
      if (qword_257139370 != -1)
        swift_once();
      sub_2416BAF48();
      sub_2416BA054();
      v22 = v38;
      v23 = v39;
      v24 = v40;
      v25 = v41;
      *(_QWORD *)v19 = v21;
      *((_QWORD *)v19 + 1) = v22;
      v19[16] = v23;
      *((_QWORD *)v19 + 3) = v24;
      v19[32] = v25;
      *(_OWORD *)(v19 + 40) = v42;
      swift_storeEnumTagMultiPayload();
      sub_2415A3D28(0, &qword_25713A368, MEMORY[0x24BDF3E48], MEMORY[0x24BDEBEF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
      sub_2415C3590();
      sub_2415C3610(&qword_25713A5A8, (uint64_t (*)(uint64_t))sub_2415BE350, sub_2415C3678, MEMORY[0x24BDECC38]);
      return sub_2416BA57C();
    }
    else
    {
      sub_2416BAE64();
      sub_2415C09EC((uint64_t)v8);
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x24BDEB3F0], v2);
      v27 = sub_2416B9F94();
      v28 = *(void (**)(char *, uint64_t))(v3 + 8);
      v28(v6, v2);
      v28(v8, v2);
      if ((v27 & 1) != 0)
        v29 = 1.0;
      else
        v29 = 0.0;
      v30 = v33;
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v15, v11, v33);
      *(double *)&v15[*(int *)(v36 + 36)] = v29;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v30);
      v31 = v34;
      sub_2415A85BC((uint64_t)v15, v34, (uint64_t (*)(_QWORD))sub_2415BE350);
      sub_2415BEF64(v31, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_2415BE350);
      swift_storeEnumTagMultiPayload();
      sub_2415A3D28(0, &qword_25713A368, MEMORY[0x24BDF3E48], MEMORY[0x24BDEBEF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
      sub_2415C3590();
      sub_2415C3610(&qword_25713A5A8, (uint64_t (*)(uint64_t))sub_2415BE350, sub_2415C3678, MEMORY[0x24BDECC38]);
      sub_2416BA57C();
      return sub_2415A6154(v31, (uint64_t (*)(_QWORD))sub_2415BE350);
    }
  }
  else
  {
    sub_2415C0788(0, (unint64_t *)&qword_25713A430);
    sub_2415BEF08();
    result = sub_2416BA264();
    __break(1u);
  }
  return result;
}

uint64_t sub_2415BB7C0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  MIUIDisplayConfiguration *v91;
  id v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t KeyPath;
  uint64_t *v106;
  char *v107;
  char v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(char *, char *, uint64_t);
  char *v128;
  char *v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t);
  uint64_t result;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  id *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  char v168;

  v154 = a2;
  v3 = type metadata accessor for MedicalIDDeleteView();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v142 = (uint64_t *)((char *)&v133 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v4);
  v143 = (uint64_t)&v133 - v6;
  sub_2415BE730(0, &qword_25713A3F0, v7);
  v9 = v8;
  v149 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v133 - v10;
  v12 = type metadata accessor for MedicalIDDataViewModel();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BE6C4();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v150 = (uint64_t)&v133 - v19;
  sub_2415BE640();
  v147 = v20;
  v146 = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v145 = (char *)&v133 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v144 = (uint64_t)&v133 - v23;
  sub_2415BE624(0);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v148 = (uint64_t)&v133 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v151 = (uint64_t)&v133 - v27;
  sub_2415BE52C(0);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v156 = (uint64_t)&v133 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v157 = (uint64_t)&v133 - v31;
  sub_2415BE3F4();
  v33 = v32;
  v34 = *(_QWORD *)(v32 - 8);
  v35 = MEMORY[0x24BDAC7A8](v32);
  v153 = (char *)&v133 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)&v133 - v37;
  sub_2415BC504((uint64_t)&v133 - v37);
  v39 = type metadata accessor for MedicalIDDataContentView();
  v40 = *(int *)(v39 + 24);
  v155 = a1;
  v41 = (void **)(a1 + v40);
  v42 = *v41;
  if (!*v41)
    goto LABEL_32;
  if ((objc_msgSend(v42, sel_isLockScreen) & 1) != 0)
  {
    sub_2415BE548();
    v44 = v157;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v157, 1, 1, v43);
    v45 = v156;
LABEL_27:
    v127 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v128 = v153;
    v127(v153, v38, v33);
    sub_2415BEF64(v44, v45, (uint64_t (*)(_QWORD))sub_2415BE52C);
    v129 = v154;
    v127(v154, v128, v33);
    sub_2415BE5B4(0, &qword_25713A390, (void (*)(uint64_t))sub_2415BE3F4, sub_2415BE52C);
    sub_2415BEF64(v45, (uint64_t)&v129[*(int *)(v130 + 48)], (uint64_t (*)(_QWORD))sub_2415BE52C);
    sub_2415A6154(v44, (uint64_t (*)(_QWORD))sub_2415BE52C);
    v131 = *(void (**)(char *, uint64_t))(v34 + 8);
    v131(v38, v33);
    sub_2415A6154(v45, (uint64_t (*)(_QWORD))sub_2415BE52C);
    return ((uint64_t (*)(char *, uint64_t))v131)(v128, v33);
  }
  v137 = v41;
  v138 = v9;
  v139 = v18;
  v152 = (id *)(v155 + *(int *)(v39 + 20));
  v46 = objc_msgSend(*v152, sel_dateSaved);
  sub_2415A0A74(0);
  MEMORY[0x24BDAC7A8](v47);
  v136 = v48;
  v49 = (char *)&v133 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = v38;
  if (v46)
  {
    sub_2416B9B2C();

    v50 = sub_2416B9B50();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 0, 1, v50);
  }
  else
  {
    v51 = sub_2416B9B50();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v49, 1, 1, v51);
  }
  v52 = (uint64_t)v14;
  v141 = v34;
  v53 = sub_24166C700((uint64_t)v49);
  v55 = v54;
  sub_2415A6154((uint64_t)v49, (uint64_t (*)(_QWORD))sub_2415A0A74);
  if (v55)
  {
    v133 = v3;
    v134 = v11;
    v135 = v33;
    v158 = v53;
    v159 = v55;
    sub_2415C343C();
    v56 = sub_2416BA9D8();
    v58 = v57;
    v60 = v59 & 1;
    sub_2416BA870();
    v61 = sub_2416BA9C0();
    v63 = v62;
    v65 = v64;
    swift_release();
    v66 = v65 & 1;
    sub_2415A431C(v56, v58, v60);
    swift_bridgeObjectRelease();
    LODWORD(v158) = sub_2416BA660();
    v67 = sub_2416BA990();
    v69 = v68;
    v71 = v70;
    v73 = v72;
    sub_2415A431C(v61, v63, v66);
    swift_bridgeObjectRelease();
    v74 = sub_2416BA864();
    if (qword_257139380 != -1)
      swift_once();
    sub_2416B9EF8();
    v158 = v67;
    v159 = v69;
    v75 = v67;
    v76 = v71 & 1;
    v160 = v71 & 1;
    v161 = v73;
    v162 = v74;
    v163 = v77;
    v164 = v78;
    v165 = v79;
    v166 = v80;
    v167 = 0;
    sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v81 = swift_allocObject();
    *(_OWORD *)(v81 + 16) = xmmword_2416BCC80;
    *(_QWORD *)(v81 + 32) = 0x496C61636964654DLL;
    *(_QWORD *)(v81 + 40) = 0xE900000000000044;
    *(_QWORD *)(v81 + 48) = 0x616470557473614CLL;
    *(_QWORD *)(v81 + 56) = 0xEF65746144646574;
    v82 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    v83 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (!v83)
    {
      __break(1u);
      goto LABEL_32;
    }
    v84 = v69;
    sub_2416BB128();

    sub_2415A3D28(0, &qword_257139CE0, MEMORY[0x24BDF1FA8], MEMORY[0x24BDECC80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    sub_2415C3480();
    v85 = (uint64_t)v145;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v75, v84, v76);
    swift_bridgeObjectRelease();
    v86 = v144;
    sub_2415A85BC(v85, v144, (uint64_t (*)(_QWORD))sub_2415BE640);
    v87 = v151;
    sub_2415A85BC(v86, v151, (uint64_t (*)(_QWORD))sub_2415BE640);
    v88 = 0;
    v33 = v135;
    v11 = v134;
    v3 = v133;
  }
  else
  {
    v88 = 1;
    v87 = v151;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v146 + 56))(v87, v88, 1, v147);
  sub_2415BEF64((uint64_t)v152, v52, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataViewModel);
  v38 = v140;
  v89 = v138;
  if (*v137)
  {
    v90 = *(void **)(*(_QWORD *)(*(_QWORD *)v155 + 32) + 16);
    v91 = (MIUIDisplayConfiguration *)*v137;
    v92 = v90;
    LOBYTE(v90) = MedicalIDDataViewModel.isDeletionVisible(with:healthStore:)(v91, (HKHealthStore)v92);

    sub_2415A6154(v52, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataViewModel);
    if ((v90 & 1) != 0)
    {
      v93 = v89;
      if (qword_257139388 != -1)
        swift_once();
      v94 = objc_msgSend(*v152, sel_dateSaved);
      v95 = MEMORY[0x24BDAC7A8](v94);
      v97 = (char *)&v133 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
      v98 = v149;
      if (v95)
      {
        sub_2416B9B2C();

        v99 = sub_2416B9B50();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v97, 0, 1, v99);
      }
      else
      {
        v102 = sub_2416B9B50();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 56))(v97, 1, 1, v102);
      }
      sub_24166C700((uint64_t)v97);
      v104 = v103;
      sub_2415A6154((uint64_t)v97, (uint64_t (*)(_QWORD))sub_2415A0A74);
      swift_bridgeObjectRelease();
      if (v104)
      {
        v34 = v141;
        if (qword_257139380 != -1)
          swift_once();
      }
      else
      {
        v34 = v141;
      }
      KeyPath = swift_getKeyPath();
      v106 = v142;
      *v142 = KeyPath;
      sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
      swift_storeEnumTagMultiPayload();
      v107 = (char *)v106 + *(int *)(v3 + 20);
      type metadata accessor for MedicalIDDataManager();
      sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
      *(_QWORD *)v107 = sub_2416B9FC4();
      v107[8] = v108 & 1;
      v109 = (char *)v106 + *(int *)(v3 + 24);
      v168 = 0;
      sub_2416BAD08();
      v110 = v159;
      *v109 = v158;
      *((_QWORD *)v109 + 1) = v110;
      v111 = (uint64_t)v106;
      v112 = v143;
      sub_2415A85BC(v111, v143, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDeleteView);
      LOBYTE(v107) = sub_2416BA828();
      sub_2416B9EF8();
      v114 = v113;
      v116 = v115;
      v118 = v117;
      v120 = v119;
      sub_2415BEF64(v112, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDeleteView);
      v121 = &v11[*(int *)(v93 + 36)];
      *v121 = (char)v107;
      *((_QWORD *)v121 + 1) = v114;
      *((_QWORD *)v121 + 2) = v116;
      *((_QWORD *)v121 + 3) = v118;
      *((_QWORD *)v121 + 4) = v120;
      v121[40] = 0;
      sub_2415A6154(v112, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDeleteView);
      v101 = v150;
      sub_2415C287C((uint64_t)v11, v150, (uint64_t)&qword_25713A3F0, (uint64_t)type metadata accessor for MedicalIDDeleteView, MEMORY[0x24BDECC80], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_2415BE730);
      v100 = 0;
      v87 = v151;
    }
    else
    {
      v100 = 1;
      v34 = v141;
      v101 = v150;
      v93 = v89;
      v98 = v149;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v101, v100, 1, v93);
    v122 = v148;
    sub_2415BEF64(v87, v148, (uint64_t (*)(_QWORD))sub_2415BE624);
    v123 = v87;
    v124 = (uint64_t)v139;
    sub_2415BEF64(v101, (uint64_t)v139, (uint64_t (*)(_QWORD))sub_2415BE6C4);
    v45 = v156;
    sub_2415BEF64(v122, v156, (uint64_t (*)(_QWORD))sub_2415BE624);
    sub_2415BE5B4(0, &qword_25713A3D0, sub_2415BE624, (void (*)(uint64_t))sub_2415BE6C4);
    sub_2415BEF64(v124, v45 + *(int *)(v125 + 48), (uint64_t (*)(_QWORD))sub_2415BE6C4);
    sub_2415A6154(v101, (uint64_t (*)(_QWORD))sub_2415BE6C4);
    sub_2415A6154(v123, (uint64_t (*)(_QWORD))sub_2415BE624);
    sub_2415A6154(v124, (uint64_t (*)(_QWORD))sub_2415BE6C4);
    sub_2415A6154(v122, (uint64_t (*)(_QWORD))sub_2415BE624);
    sub_2415BE548();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v126 - 8) + 56))(v45, 0, 1, v126);
    v44 = v157;
    sub_2415A85BC(v45, v157, (uint64_t (*)(_QWORD))sub_2415BE52C);
    goto LABEL_27;
  }
  v42 = 0;
LABEL_32:
  sub_2415C0788((uint64_t)v42, (unint64_t *)&qword_25713A430);
  sub_2415BEF08();
  result = sub_2416BA264();
  __break(1u);
  return result;
}

uint64_t sub_2415BC504@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)();
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  id v40;
  void *v41;
  id v42;
  unsigned __int8 v43;
  id v44;
  void *v45;
  id v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v70 = type metadata accessor for MedicalIDBiometricsViewModel();
  v3 = MEMORY[0x24BDAC7A8](v70);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (unint64_t)&v55 - v6;
  v74 = type metadata accessor for MedicalIDData();
  v68 = *(_QWORD *)(v74 - 8);
  v8 = MEMORY[0x24BDAC7A8](v74);
  v69 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v67 = (char *)&v55 - v10;
  sub_2415A6FC4(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v66 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v72 = (char *)&v55 - v14;
  v77 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x24BDAC7A8](v77);
  v65 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v78 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v71 = (char *)&v55 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v63 = (char *)&v55 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v64 = (char *)&v55 - v23;
  v81 = _s15SectionGridItemVMa();
  v24 = *(_QWORD *)(v81 - 8);
  v25 = MEMORY[0x24BDAC7A8](v81);
  v80 = (uint64_t)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v76 = (uint64_t)&v55 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v55 - v30;
  if (qword_257139368 != -1)
LABEL_30:
    v29 = swift_once();
  v32 = qword_25713A198;
  MEMORY[0x24BDAC7A8](v29);
  v54 = (uint64_t)v1;
  swift_bridgeObjectRetain();
  v33 = sub_2415B8B58((void (*)(char *))sub_2415C3500, (uint64_t)(&v55 - 4), v32);
  swift_bridgeObjectRelease();
  v82 = MEMORY[0x24BEE4AF8];
  v79 = *(char **)(v33 + 16);
  if (v79)
  {
    v59 = a1;
    v34 = v7;
    v7 = 0;
    v61 = v34;
    v57 = v34 + 104;
    v62 = v5;
    v55 = v5 + 88;
    v56 = v71 + 8;
    v58 = v69 + 24;
    v1 = _s15SectionGridItemVMa;
    v60 = xmmword_2416BD3D0;
    a1 = v77;
    v5 = v78;
    v73 = v24;
    v75 = v33;
    while (1)
    {
      if (v7 >= *(_QWORD *)(v33 + 16))
      {
        __break(1u);
        goto LABEL_30;
      }
      v35 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v36 = *(_QWORD *)(v24 + 72);
      sub_2415BEF64(v33 + v35 + v36 * v7, (uint64_t)v31, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
      v37 = v81;
      v38 = objc_msgSend(*(id *)&v31[*(int *)(v81 + 28)], sel_isLockScreen, v55, v56);
      v39 = v31[*(int *)(v37 + 24)];
      if (v38)
      {
        if (v39 != 1)
        {
          v48 = v76;
          sub_2415BEF64((uint64_t)v31, v76, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
LABEL_20:
          __asm { BR              X9 }
        }
        v40 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
        if (!v40)
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          JUMPOUT(0x2415BD71CLL);
        }
        v41 = v40;
        v42 = objc_msgSend(v40, sel_features);

        if (!v42)
          goto LABEL_32;
        v43 = objc_msgSend(v42, sel_seahorse);

        v48 = v76;
        sub_2415BEF64((uint64_t)v31, v76, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
        if ((v43 & 1) != 0)
          goto LABEL_20;
        v1 = _s15SectionGridItemVMa;
        sub_2415A6154(v48, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
        v33 = v75;
      }
      else
      {
        if (v39 != 1)
          goto LABEL_21;
        v44 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
        if (!v44)
          goto LABEL_33;
        v45 = v44;
        v46 = objc_msgSend(v44, sel_features);

        if (!v46)
          goto LABEL_34;
        v47 = objc_msgSend(v46, sel_seahorse);

        v1 = _s15SectionGridItemVMa;
        if ((v47 & 1) != 0)
        {
LABEL_21:
          sub_2415A85BC((uint64_t)v31, v80, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
          v49 = v82;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_2415FE500(0, *(_QWORD *)(v49 + 16) + 1, 1);
            v1 = _s15SectionGridItemVMa;
            v49 = v82;
          }
          v51 = *(_QWORD *)(v49 + 16);
          v50 = *(_QWORD *)(v49 + 24);
          if (v51 >= v50 >> 1)
          {
            sub_2415FE500(v50 > 1, v51 + 1, 1);
            v1 = _s15SectionGridItemVMa;
            v49 = v82;
          }
          *(_QWORD *)(v49 + 16) = v51 + 1;
          sub_2415A85BC(v80, v49 + v35 + v51 * v36, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
          a1 = v77;
          v5 = v78;
          goto LABEL_6;
        }
      }
      sub_2415A6154((uint64_t)v31, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
LABEL_6:
      if (v79 == (char *)++v7)
      {
        v52 = v82;
        goto LABEL_28;
      }
    }
  }
  v52 = MEMORY[0x24BEE4AF8];
LABEL_28:
  swift_bridgeObjectRelease();
  v82 = v52;
  swift_getKeyPath();
  sub_2415BE4A4(0);
  sub_2415BE4C0();
  sub_24159CE88(&qword_25713A3B8, (uint64_t (*)(uint64_t))sub_2415BE4A4, MEMORY[0x24BEE12D8]);
  sub_2415A8D18();
  v54 = sub_24159CE88(&qword_25713A590, (uint64_t (*)(uint64_t))sub_2415BE4C0, MEMORY[0x24BDF5428]);
  return sub_2416BAE7C();
}

uint64_t sub_2415BD73C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2416BA084();
  *a1 = v3;
  return result;
}

uint64_t sub_2415BD764()
{
  type metadata accessor for MedicalIDDataContentView();
  sub_24159D7F0(0, &qword_25713A550, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  return sub_2416BAD20();
}

uint64_t sub_2415BD7E4()
{
  sub_2416BAF60();
  sub_2416BA0D8();
  return swift_release();
}

uint64_t sub_2415BD844()
{
  sub_2416BAFD8();
  sub_2415A8D18();
  return sub_2416BA18C();
}

void sub_2415BD8AC()
{
  qword_25713A198 = (uint64_t)&unk_251193950;
}

uint64_t sub_2415BD8C0@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  uint64_t v10;
  int *v11;
  void *v12;
  char *v13;
  char v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int *v20;
  uint64_t result;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v6 = type metadata accessor for MedicalIDDataViewModel();
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *a1;
  v10 = *a2;
  v11 = (int *)type metadata accessor for MedicalIDDataContentView();
  sub_2415BEF64((uint64_t)a2 + v11[5], (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataViewModel);
  v12 = *(void **)((char *)a2 + v11[6]);
  if (v12)
  {
    v13 = (char *)a2 + v11[12];
    v14 = *v13;
    v15 = *((_QWORD *)v13 + 1);
    v23[8] = v14;
    v24 = v15;
    sub_2415BFB68();
    swift_retain();
    v16 = v12;
    sub_2416BAD2C();
    v17 = v25;
    v18 = v26;
    v19 = v27;
    v20 = (int *)_s15SectionGridItemVMa();
    *(_QWORD *)(a3 + v20[5]) = v10;
    result = sub_2415A85BC((uint64_t)v8, a3, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataViewModel);
    *(_BYTE *)(a3 + v20[6]) = v9;
    *(_QWORD *)(a3 + v20[7]) = v16;
    v22 = a3 + v20[8];
    *(_QWORD *)v22 = v17;
    *(_QWORD *)(v22 + 8) = v18;
    *(_BYTE *)(v22 + 16) = v19;
  }
  else
  {
    sub_2415C0788(0, (unint64_t *)&qword_25713A430);
    sub_2415BEF08();
    swift_retain();
    result = sub_2416BA264();
    __break(1u);
  }
  return result;
}

uint64_t sub_2415BDA64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v4 = sub_2416BAE70();
  v5 = (void (*)(uint64_t))MEMORY[0x24BDF4918];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v22 - v10;
  v12 = _s15SectionGridItemVMa();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v22 - v16;
  sub_2415BEF64(a1, (uint64_t)&v22 - v16, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  sub_2416BAE64();
  sub_2415BEF64((uint64_t)v17, (uint64_t)v15, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  v18 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v18(v9, v11, v4);
  sub_2415BEF64((uint64_t)v15, a2, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  sub_2415BE5B4(0, &qword_25713A3B0, (void (*)(uint64_t))_s15SectionGridItemVMa, v5);
  v18((char *)(a2 + *(int *)(v19 + 48)), v9, v4);
  v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v11, v4);
  sub_2415A6154((uint64_t)v17, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
  v20(v9, v4);
  return sub_2415A6154((uint64_t)v15, (uint64_t (*)(_QWORD))_s15SectionGridItemVMa);
}

void sub_2415BDC0C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A2A8)
  {
    sub_2415BE730(255, &qword_25713A2B0, sub_2415BDC84);
    sub_2415BEC9C();
    v0 = sub_2416B9F70();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A2A8);
  }
}

void sub_2415BDC84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[6];

  if (!qword_25713A2B8)
  {
    sub_2415BDDE4(255);
    v3 = v2;
    sub_2415BE78C(255);
    v5 = v4;
    v6 = sub_2415C3610(&qword_25713A4A0, (uint64_t (*)(uint64_t))sub_2415BDDE4, sub_2415BEC3C, MEMORY[0x24BDF0910]);
    v7 = sub_2415BEC58();
    sub_2415BE868();
    type metadata accessor for MedicalIDDataManager();
    sub_2415A40A4(&qword_25713A468, (uint64_t (*)(uint64_t))sub_2415BE868, sub_2415BEAA0, (uint64_t (*)(void))sub_2415BEBD4);
    sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
    v10[0] = v3;
    v10[1] = &type metadata for MedicalIDDisplaySection;
    v10[2] = v5;
    v10[3] = v6;
    v10[4] = v7;
    v10[5] = swift_getOpaqueTypeConformance2();
    v8 = MEMORY[0x242699480](a1, v10, MEMORY[0x24BDF3660], 0);
    if (!v9)
      atomic_store(v8, (unint64_t *)&qword_25713A2B8);
  }
}

void sub_2415BDDE4(uint64_t a1)
{
  sub_2415BE730(a1, &qword_25713A2C0, (void (*)(uint64_t))sub_2415BDE00);
}

void sub_2415BDE00()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A2C8)
  {
    sub_2415BDE78(255);
    sub_24159CE88(&qword_25713A3F8, (uint64_t (*)(uint64_t))sub_2415BDE78, MEMORY[0x24BDF5428]);
    v0 = sub_2416B9F58();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A2C8);
  }
}

void sub_2415BDE78(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713A2D0, (uint64_t (*)(uint64_t))sub_2415BDE94, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_2415BDE94()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713A2D8)
  {
    sub_2415BDF40();
    sub_2415BE2C8(255, &qword_25713A360, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    sub_2415BE730(255, &qword_25713A378, sub_2415BE36C);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713A2D8);
  }
}

void sub_2415BDF40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A2E0)
  {
    sub_2415A39C0(255, &qword_25713A2E8, sub_2415BDFAC, (void (*)(uint64_t))sub_2415BE080);
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A2E0);
  }
}

void sub_2415BDFAC(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_25713A2F0, sub_2415BDFC8, (void (*)(uint64_t))sub_2415BDFE4);
}

void sub_2415BDFC8(uint64_t a1)
{
  sub_2415BE730(a1, &qword_25713A2F8, (void (*)(uint64_t))type metadata accessor for MedicalIDEditSettingsView);
}

void sub_2415BDFE4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A300)
  {
    sub_2415BE03C();
    v0 = sub_2416BA66C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A300);
  }
}

unint64_t sub_2415BE03C()
{
  unint64_t result;

  result = qword_25713A308;
  if (!qword_25713A308)
  {
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE50E0], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&qword_25713A308);
  }
  return result;
}

void sub_2415BE080()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A310)
  {
    sub_2415BE100(255);
    sub_2415C3610(&qword_25713A348, (uint64_t (*)(uint64_t))sub_2415BE100, sub_2415BE288, MEMORY[0x24BDECC60]);
    v0 = sub_2416BA564();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A310);
  }
}

void sub_2415BE100(uint64_t a1)
{
  sub_2415BE730(a1, &qword_25713A318, sub_2415BE11C);
}

void sub_2415BE11C(uint64_t a1)
{
  sub_2415BE730(a1, &qword_25713A320, (void (*)(uint64_t))sub_2415BE138);
}

void sub_2415BE138()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A328)
  {
    sub_2415A3D28(255, &qword_25713A330, MEMORY[0x24BDF3E48], MEMORY[0x24BDF3E18], MEMORY[0x24BDEF320]);
    sub_2415BE1DC();
    sub_2415BE220();
    v0 = sub_2416B9F88();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A328);
  }
}

unint64_t sub_2415BE1DC()
{
  unint64_t result;

  result = qword_25713A338;
  if (!qword_25713A338)
  {
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF52E0], MEMORY[0x24BDF52F8]);
    atomic_store(result, (unint64_t *)&qword_25713A338);
  }
  return result;
}

unint64_t sub_2415BE220()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713A340;
  if (!qword_25713A340)
  {
    sub_2415A3D28(255, &qword_25713A330, MEMORY[0x24BDF3E48], MEMORY[0x24BDF3E18], MEMORY[0x24BDEF320]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF330], v1);
    atomic_store(result, (unint64_t *)&qword_25713A340);
  }
  return result;
}

uint64_t sub_2415BE288()
{
  return sub_2415C3610(&qword_25713A350, (uint64_t (*)(uint64_t))sub_2415BE11C, sub_2415BE2AC, MEMORY[0x24BDECC60]);
}

uint64_t sub_2415BE2AC()
{
  return sub_24159CE88(&qword_25713A358, (uint64_t (*)(uint64_t))sub_2415BE138, MEMORY[0x24BDEB358]);
}

void sub_2415BE2C8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_2415A3D28(255, &qword_25713A368, MEMORY[0x24BDF3E48], MEMORY[0x24BDEBEF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v7 = v6;
    sub_2415BE350(255);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_2415BE350(uint64_t a1)
{
  sub_2415BE730(a1, &qword_25713A370, (void (*)(uint64_t))MEMORY[0x24BDF4918]);
}

void sub_2415BE36C(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713A380, (uint64_t (*)(uint64_t))sub_2415BE388, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF3F28]);
}

void sub_2415BE388()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A388)
  {
    sub_2415BE5B4(255, &qword_25713A390, (void (*)(uint64_t))sub_2415BE3F4, sub_2415BE52C);
    v0 = sub_2416BAFA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A388);
  }
}

void sub_2415BE3F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A398)
  {
    sub_2415BE4A4(255);
    sub_2415BE4C0();
    sub_24159CE88(&qword_25713A3B8, (uint64_t (*)(uint64_t))sub_2415BE4A4, MEMORY[0x24BEE12D8]);
    sub_2415A8D18();
    v0 = sub_2416BAE94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A398);
  }
}

void sub_2415BE4A4(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713A3A0, (uint64_t (*)(uint64_t))_s15SectionGridItemVMa, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

void sub_2415BE4C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A3A8)
  {
    sub_2415BE5B4(255, &qword_25713A3B0, (void (*)(uint64_t))_s15SectionGridItemVMa, (void (*)(uint64_t))MEMORY[0x24BDF4918]);
    v0 = sub_2416BAFA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A3A8);
  }
}

void sub_2415BE52C(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713A3C0, (uint64_t (*)(uint64_t))sub_2415BE548, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_2415BE548()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A3C8)
  {
    sub_2415BE5B4(255, &qword_25713A3D0, sub_2415BE624, (void (*)(uint64_t))sub_2415BE6C4);
    v0 = sub_2416BAFA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A3C8);
  }
}

void sub_2415BE5B4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_2415BE624(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713A3D8, (uint64_t (*)(uint64_t))sub_2415BE640, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_2415BE640()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A3E0)
  {
    sub_2415A3D28(255, &qword_257139CE0, MEMORY[0x24BDF1FA8], MEMORY[0x24BDECC80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    sub_2416BA768();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A3E0);
  }
}

void sub_2415BE6C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A3E8)
  {
    sub_2415BE730(255, &qword_25713A3F0, (void (*)(uint64_t))type metadata accessor for MedicalIDDeleteView);
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A3E8);
  }
}

void sub_2415BE730(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_2416BA150();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_2415BE78C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_25713A400)
  {
    sub_2415BE868();
    v5[0] = v2;
    v5[1] = type metadata accessor for MedicalIDDataManager();
    v5[2] = sub_2415A40A4(&qword_25713A468, (uint64_t (*)(uint64_t))sub_2415BE868, sub_2415BEAA0, (uint64_t (*)(void))sub_2415BEBD4);
    v5[3] = sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF2358], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713A400);
  }
}

void sub_2415BE868()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A408)
  {
    sub_2415BE8EC();
    sub_2415BEA48(255, &qword_25713A450, &qword_25713A458, (unint64_t *)&qword_25713A460);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A408);
  }
}

void sub_2415BE8EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A410)
  {
    sub_2415BE970();
    sub_2415BEA48(255, &qword_25713A438, &qword_25713A440, &qword_25713A448);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A410);
  }
}

void sub_2415BE970()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A418)
  {
    _s12SheetContentVMa();
    sub_2415BEA48(255, &qword_25713A420, &qword_25713A428, (unint64_t *)&qword_25713A430);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A418);
  }
}

void sub_2415BE9F4(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_2415C0788(255, a3);
    v4 = sub_2416BB434();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_2415BEA48(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_2415BE9F4(255, a3, a4);
    v5 = sub_2416BA75C();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_2415BEAA0()
{
  return sub_2415A40A4(&qword_25713A470, (uint64_t (*)(uint64_t))sub_2415BE8EC, sub_2415BEAC4, (uint64_t (*)(void))sub_2415BEB6C);
}

uint64_t sub_2415BEAC4()
{
  return sub_2415A40A4(&qword_25713A478, (uint64_t (*)(uint64_t))sub_2415BE970, sub_2415BEAE8, (uint64_t (*)(void))sub_2415BEB04);
}

uint64_t sub_2415BEAE8()
{
  return sub_24159CE88(&qword_25713A480, (uint64_t (*)(uint64_t))_s12SheetContentVMa, (uint64_t)&unk_2416BDBA0);
}

unint64_t sub_2415BEB04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713A488;
  if (!qword_25713A488)
  {
    sub_2415BEA48(255, &qword_25713A420, &qword_25713A428, (unint64_t *)&qword_25713A430);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF1028], v1);
    atomic_store(result, (unint64_t *)&qword_25713A488);
  }
  return result;
}

unint64_t sub_2415BEB6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713A490;
  if (!qword_25713A490)
  {
    sub_2415BEA48(255, &qword_25713A438, &qword_25713A440, &qword_25713A448);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF1028], v1);
    atomic_store(result, (unint64_t *)&qword_25713A490);
  }
  return result;
}

unint64_t sub_2415BEBD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713A498;
  if (!qword_25713A498)
  {
    sub_2415BEA48(255, &qword_25713A450, &qword_25713A458, (unint64_t *)&qword_25713A460);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF1028], v1);
    atomic_store(result, (unint64_t *)&qword_25713A498);
  }
  return result;
}

uint64_t sub_2415BEC3C()
{
  return sub_24159CE88(&qword_25713A4A8, (uint64_t (*)(uint64_t))sub_2415BDE00, MEMORY[0x24BDEB188]);
}

unint64_t sub_2415BEC58()
{
  unint64_t result;

  result = qword_25713A4B0;
  if (!qword_25713A4B0)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDDisplaySection, &type metadata for MedicalIDDisplaySection);
    atomic_store(result, (unint64_t *)&qword_25713A4B0);
  }
  return result;
}

unint64_t sub_2415BEC9C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[8];

  result = qword_25713A4B8;
  if (!qword_25713A4B8)
  {
    sub_2415BE730(255, &qword_25713A2B0, sub_2415BDC84);
    v2 = v1;
    sub_2415BDDE4(255);
    v4 = v3;
    sub_2415BE78C(255);
    v6 = v5;
    v7 = sub_2415C3610(&qword_25713A4A0, (uint64_t (*)(uint64_t))sub_2415BDDE4, sub_2415BEC3C, MEMORY[0x24BDF0910]);
    v8 = sub_2415BEC58();
    sub_2415BE868();
    type metadata accessor for MedicalIDDataManager();
    sub_2415A40A4(&qword_25713A468, (uint64_t (*)(uint64_t))sub_2415BE868, sub_2415BEAA0, (uint64_t (*)(void))sub_2415BEBD4);
    sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
    v9[2] = v4;
    v9[3] = &type metadata for MedicalIDDisplaySection;
    v9[4] = v6;
    v9[5] = v7;
    v9[6] = v8;
    v9[7] = swift_getOpaqueTypeConformance2();
    v9[0] = swift_getOpaqueTypeConformance2();
    v9[1] = sub_2415BEE2C();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v9);
    atomic_store(result, (unint64_t *)&qword_25713A4B8);
  }
  return result;
}

unint64_t sub_2415BEE2C()
{
  unint64_t result;

  result = qword_25713A4C0;
  if (!qword_25713A4C0)
  {
    result = MEMORY[0x2426994BC](&unk_2416BDB24, &_s10BackgroundVN);
    atomic_store(result, (unint64_t *)&qword_25713A4C0);
  }
  return result;
}

void sub_2415BEE70(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_25713A4C8, (void (*)(uint64_t))sub_2415BDC0C, (void (*)(uint64_t))sub_2415BDFE4);
}

void sub_2415BEE8C(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_25713A4D0, sub_2415BEE70, (void (*)(uint64_t))type metadata accessor for MedicalIDNavigationBarViewModifier);
}

uint64_t sub_2415BEEA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2415B958C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2415BEEB4(uint64_t a1)
{
  return sub_2415C33F0(a1, (uint64_t (*)(uint64_t, uint64_t))sub_2415BA188);
}

void sub_2415BEEC0()
{
  qword_25713A1A0 = 0x403C000000000000;
}

void sub_2415BEED0()
{
  qword_25713A1A8 = 0x4030000000000000;
}

void sub_2415BEEE0()
{
  qword_25713A1B0 = 0x4018000000000000;
}

void sub_2415BEEF0()
{
  qword_25713A1B8 = 0x4041000000000000;
}

unint64_t sub_2415BEF08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713A4D8;
  if (!qword_25713A4D8)
  {
    v1 = sub_2415C0788(255, (unint64_t *)&qword_25713A430);
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MIUIDisplayConfiguration, v1);
    atomic_store(result, (unint64_t *)&qword_25713A4D8);
  }
  return result;
}

uint64_t sub_2415BEF64(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2415BEFA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id *v17;
  id *v18;
  int *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  int *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  id *v46;
  char *v47;
  char *v48;
  uint64_t *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int *v53;
  id *v54;
  uint64_t v55;
  char *v56;
  int *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  void (*v75)(char *);
  uint64_t v76;
  unsigned int (*v77)(char *, uint64_t, uint64_t);
  int *v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;

  sub_2415BEE8C(0);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = type metadata accessor for MedicalIDDataContentView();
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + v5 + v7;
  sub_2415BDC0C();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v0 + v4, v9);
  sub_2415BEE70(0);
  swift_release();
  swift_release();
  v10 = v0 + v4 + *(int *)(v2 + 36);
  v11 = (int *)type metadata accessor for MedicalIDNavigationBarViewModifier();
  v12 = v10 + v11[5];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = sub_2416B9C10();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  v14 = v8 & ~v7;

  v15 = v10 + v11[8];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = sub_2416BA06C();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  v73 = (int *)v6;
  v72 = v0 + v14;
  v17 = (id *)(v0 + v14 + *(int *)(v6 + 20));

  v78 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v18 = (id *)((char *)v17 + v78[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v19 = (int *)type metadata accessor for MedicalIDData();
  v20 = (char *)v18 + v19[13];
  v21 = sub_2416B9B50();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (!v23(v20, 1, v21))
    (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
  v24 = (char *)v18 + v19[14];
  if (!v23(v24, 1, v21))
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = (uint64_t *)((char *)v18 + v19[19]);
  v26 = v25[1];
  if (v26 >> 60 != 15)
    sub_2415A0DAC(*v25, v26);
  v27 = (char *)v18 + v19[20];
  v28 = sub_2416B9A18();
  v74 = *(_QWORD *)(v28 - 8);
  v77 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
  if (!v77(v27, 1, v28))
    (*(void (**)(char *, uint64_t))(v74 + 8))(v27, v28);

  v29 = (char *)v18 + v19[22];
  if (!v23(v29, 1, v21))
    (*(void (**)(char *, uint64_t))(v22 + 8))(v29, v21);
  v80 = v22;
  v30 = (char *)v17 + v78[6];
  v31 = sub_2416B9C70();
  v75 = *(void (**)(char *))(*(_QWORD *)(v31 - 8) + 8);
  v76 = v31;
  v75(v30);

  v32 = (char *)v17 + v78[8];
  v33 = sub_2416B9C10();
  v79 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8);
  v79(v32, v33);
  v34 = (char *)v17 + v78[9];
  swift_bridgeObjectRelease();
  v35 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v36 = &v34[v35[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v37 = &v36[v19[13]];
  if (!v23(v37, 1, v21))
    (*(void (**)(char *, uint64_t))(v80 + 8))(v37, v21);
  v38 = &v36[v19[14]];
  if (!v23(v38, 1, v21))
    (*(void (**)(char *, uint64_t))(v80 + 8))(v38, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v39 = (uint64_t *)&v36[v19[19]];
  v40 = v39[1];
  if (v40 >> 60 != 15)
    sub_2415A0DAC(*v39, v40);
  v41 = &v36[v19[20]];
  if (!v77(v41, 1, v28))
    (*(void (**)(char *, uint64_t))(v74 + 8))(v41, v28);

  v42 = &v36[v19[22]];
  if (!v23(v42, 1, v21))
    (*(void (**)(char *, uint64_t))(v80 + 8))(v42, v21);
  v79(&v34[v35[6]], v33);
  v43 = &v34[v35[7]];
  v79(v43, v33);

  v44 = &v34[v35[8]];
  v79(v44, v33);
  v45 = type metadata accessor for MedicalIDWeightFormatter();

  v46 = (id *)((char *)v17 + v78[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v47 = (char *)v46 + v19[13];
  if (!v23(v47, 1, v21))
    (*(void (**)(char *, uint64_t))(v80 + 8))(v47, v21);
  v48 = (char *)v46 + v19[14];
  if (!v23(v48, 1, v21))
    (*(void (**)(char *, uint64_t))(v80 + 8))(v48, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v49 = (uint64_t *)((char *)v46 + v19[19]);
  v50 = v49[1];
  if (v50 >> 60 != 15)
    sub_2415A0DAC(*v49, v50);
  v51 = (char *)v46 + v19[20];
  if (!v77(v51, 1, v28))
    (*(void (**)(char *, uint64_t))(v74 + 8))(v51, v28);
  v71 = v28;

  v52 = (char *)v46 + v19[22];
  if (!v23(v52, 1, v21))
    (*(void (**)(char *, uint64_t))(v80 + 8))(v52, v21);
  v53 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v75)((char *)v46 + v53[5], v76);
  v79((char *)v46 + v53[6], v33);

  swift_bridgeObjectRelease();
  v54 = (id *)((char *)v17 + v78[11]);

  v55 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v75)((char *)v54 + *(int *)(v55 + 20), v76);
  v79((char *)v54 + *(int *)(v55 + 24), v33);
  v56 = (char *)v17 + v78[12];
  swift_bridgeObjectRelease();
  v57 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v58 = &v56[v57[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v59 = &v58[v19[13]];
  if (!v23(v59, 1, v21))
    (*(void (**)(char *, uint64_t))(v80 + 8))(v59, v21);
  v60 = &v58[v19[14]];
  if (!v23(v60, 1, v21))
    (*(void (**)(char *, uint64_t))(v80 + 8))(v60, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v61 = (uint64_t *)&v58[v19[19]];
  v62 = v61[1];
  if (v62 >> 60 != 15)
    sub_2415A0DAC(*v61, v62);
  v63 = &v58[v19[20]];
  if (!v77(v63, 1, v71))
    (*(void (**)(char *, uint64_t))(v74 + 8))(v63, v71);

  v64 = &v58[v19[22]];
  if (!v23(v64, 1, v21))
    (*(void (**)(char *, uint64_t))(v80 + 8))(v64, v21);
  ((void (*)(char *, uint64_t))v75)(&v56[v57[6]], v76);
  v79(&v56[v57[7]], v33);
  swift_release();
  v65 = &v56[v57[9]];
  if (!v23(v65, 1, v21))
    (*(void (**)(char *, uint64_t))(v80 + 8))(v65, v21);

  v66 = v72 + v73[7];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    ((void (*)(uint64_t, uint64_t))v75)(v66, v76);
  else
    swift_release();
  v67 = (char *)(v72 + v73[8]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v79(v67, v33);
  else
    swift_release();
  v68 = v72 + v73[9];
  sub_24159D6B0(0, &qword_25713A1D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB418], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v69 = sub_2416B9FA0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 8))(v68, v69);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2415BFAF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_2415BEE8C(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDDataContentView() - 8) + 80);
  return sub_2415BA208(a1, v2 + v7, v2 + ((v7 + v8 + v9) & ~v9), a2);
}

void sub_2415BFB68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A4E8)
  {
    sub_24159D7F0(255, &qword_25713A4F0, (uint64_t)&type metadata for MedicalIDDisplaySection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v0 = sub_2416BAD38();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A4E8);
  }
}

uint64_t sub_2415BFBD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id *v5;
  id *v6;
  int *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  char *v12;
  uint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  id *v34;
  char *v35;
  char *v36;
  uint64_t *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int *v41;
  id *v42;
  uint64_t v43;
  char *v44;
  int *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  void (*v69)(char *);
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  int *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);

  v1 = type metadata accessor for MedicalIDDataContentView();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v60 = *(_QWORD *)(v2 + 64);
  v62 = sub_2416BA198();
  v63 = v0;
  v66 = *(_QWORD *)(v62 - 8);
  v59 = *(unsigned __int8 *)(v66 + 80);
  v61 = v3;
  v4 = v0 + v3;
  swift_release();
  v67 = (int *)v1;
  v5 = (id *)(v4 + *(int *)(v1 + 20));

  v72 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v6 = (id *)((char *)v5 + v72[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v7 = (int *)type metadata accessor for MedicalIDData();
  v8 = (char *)v6 + v7[13];
  v9 = sub_2416B9B50();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  v12 = (char *)v6 + v7[14];
  if (!v11(v12, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = (uint64_t *)((char *)v6 + v7[19]);
  v14 = v13[1];
  if (v14 >> 60 != 15)
    sub_2415A0DAC(*v13, v14);
  v15 = (char *)v6 + v7[20];
  v16 = sub_2416B9A18();
  v68 = *(_QWORD *)(v16 - 8);
  v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48);
  if (!v71(v15, 1, v16))
    (*(void (**)(char *, uint64_t))(v68 + 8))(v15, v16);
  v65 = v4;

  v17 = (char *)v6 + v7[22];
  if (!v11(v17, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
  v73 = v10;
  v18 = (char *)v5 + v72[6];
  v19 = sub_2416B9C70();
  v69 = *(void (**)(char *))(*(_QWORD *)(v19 - 8) + 8);
  v70 = v19;
  v69(v18);

  v20 = (char *)v5 + v72[8];
  v21 = sub_2416B9C10();
  v74 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
  v74(v20, v21);
  v22 = (char *)v5 + v72[9];
  swift_bridgeObjectRelease();
  v23 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v24 = &v22[v23[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v25 = &v24[v7[13]];
  if (!v11(v25, 1, v9))
    (*(void (**)(char *, uint64_t))(v73 + 8))(v25, v9);
  v26 = &v24[v7[14]];
  if (!v11(v26, 1, v9))
    (*(void (**)(char *, uint64_t))(v73 + 8))(v26, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = (uint64_t *)&v24[v7[19]];
  v28 = v27[1];
  if (v28 >> 60 != 15)
    sub_2415A0DAC(*v27, v28);
  v29 = &v24[v7[20]];
  if (!v71(v29, 1, v16))
    (*(void (**)(char *, uint64_t))(v68 + 8))(v29, v16);

  v30 = &v24[v7[22]];
  if (!v11(v30, 1, v9))
    (*(void (**)(char *, uint64_t))(v73 + 8))(v30, v9);
  v74(&v22[v23[6]], v21);
  v31 = &v22[v23[7]];
  v74(v31, v21);

  v32 = &v22[v23[8]];
  v74(v32, v21);
  v33 = type metadata accessor for MedicalIDWeightFormatter();

  v34 = (id *)((char *)v5 + v72[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v35 = (char *)v34 + v7[13];
  if (!v11(v35, 1, v9))
    (*(void (**)(char *, uint64_t))(v73 + 8))(v35, v9);
  v36 = (char *)v34 + v7[14];
  if (!v11(v36, 1, v9))
    (*(void (**)(char *, uint64_t))(v73 + 8))(v36, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v37 = (uint64_t *)((char *)v34 + v7[19]);
  v38 = v37[1];
  if (v38 >> 60 != 15)
    sub_2415A0DAC(*v37, v38);
  v39 = (char *)v34 + v7[20];
  if (!v71(v39, 1, v16))
    (*(void (**)(char *, uint64_t))(v68 + 8))(v39, v16);
  v64 = v16;

  v40 = (char *)v34 + v7[22];
  if (!v11(v40, 1, v9))
    (*(void (**)(char *, uint64_t))(v73 + 8))(v40, v9);
  v41 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v69)((char *)v34 + v41[5], v70);
  v74((char *)v34 + v41[6], v21);

  swift_bridgeObjectRelease();
  v42 = (id *)((char *)v5 + v72[11]);

  v43 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v69)((char *)v42 + *(int *)(v43 + 20), v70);
  v74((char *)v42 + *(int *)(v43 + 24), v21);
  v44 = (char *)v5 + v72[12];
  swift_bridgeObjectRelease();
  v45 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v46 = &v44[v45[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v47 = &v46[v7[13]];
  if (!v11(v47, 1, v9))
    (*(void (**)(char *, uint64_t))(v73 + 8))(v47, v9);
  v48 = &v46[v7[14]];
  if (!v11(v48, 1, v9))
    (*(void (**)(char *, uint64_t))(v73 + 8))(v48, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v49 = (uint64_t *)&v46[v7[19]];
  v50 = v49[1];
  if (v50 >> 60 != 15)
    sub_2415A0DAC(*v49, v50);
  v51 = &v46[v7[20]];
  if (!v71(v51, 1, v64))
    (*(void (**)(char *, uint64_t))(v68 + 8))(v51, v64);

  v52 = &v46[v7[22]];
  if (!v11(v52, 1, v9))
    (*(void (**)(char *, uint64_t))(v73 + 8))(v52, v9);
  ((void (*)(char *, uint64_t))v69)(&v44[v45[6]], v70);
  v74(&v44[v45[7]], v21);
  swift_release();
  v53 = &v44[v45[9]];
  if (!v11(v53, 1, v9))
    (*(void (**)(char *, uint64_t))(v73 + 8))(v53, v9);

  v54 = v65 + v67[7];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    ((void (*)(uint64_t, uint64_t))v69)(v54, v70);
  else
    swift_release();
  v55 = (char *)(v65 + v67[8]);
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v74(v55, v21);
  else
    swift_release();
  v56 = v65 + v67[9];
  sub_24159D6B0(0, &qword_25713A1D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB418], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v57 = sub_2416B9FA0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v56, v57);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v66 + 8))(v63 + ((v61 + v60 + v59) & ~v59), v62);
  return swift_deallocObject();
}

uint64_t sub_2415C0600(unsigned __int8 *a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v11;
  unsigned __int8 v12;

  v5 = *(_QWORD *)(type metadata accessor for MedicalIDDataContentView() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_2416BA198() - 8) + 80);
  v9 = *a2;
  v12 = *a1;
  v11 = v9;
  return sub_2415BA410(&v12, &v11, v2 + ((v6 + v7 + v8) & ~v8));
}

uint64_t sub_2415C0698()
{
  return sub_2415A40A4(&qword_25713A500, (uint64_t (*)(uint64_t))sub_2415BEE70, sub_2415C06BC, sub_2415C06D8);
}

uint64_t sub_2415C06BC()
{
  return sub_24159CE88(&qword_25713A508, (uint64_t (*)(uint64_t))sub_2415BDC0C, MEMORY[0x24BDEB238]);
}

uint64_t sub_2415C06D8()
{
  return sub_24159CE88(&qword_25713A510, (uint64_t (*)(uint64_t))sub_2415BDFE4, MEMORY[0x24BDF0400]);
}

uint64_t sub_2415C06F4()
{
  return sub_24159CE88(&qword_25713A518, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDNavigationBarViewModifier, (uint64_t)&unk_2416C3190);
}

unint64_t sub_2415C0710()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_25713A520;
  if (!qword_25713A520)
  {
    sub_24159D7F0(255, &qword_25713A4F0, (uint64_t)&type metadata for MedicalIDDisplaySection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v2 = v1;
    v3 = sub_2415A8C6C();
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE4AB8], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713A520);
  }
  return result;
}

uint64_t sub_2415C0788(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_2415C07C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_2416BA198();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_2415C0824()
{
  sub_2416BA198();
  return sub_2415BD7E4();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

void sub_2415C0874(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713A540, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

uint64_t sub_2415C0890()
{
  return sub_2415BD844();
}

uint64_t sub_2415C08AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2415BA9F8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2415C08B8()
{
  type metadata accessor for MedicalIDDataContentView();
  return sub_2415B9C60();
}

uint64_t sub_2415C08F4()
{
  type metadata accessor for MedicalIDDataContentView();
  return sub_2415B9F50();
}

uint64_t sub_2415C0924@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDDataContentView() - 8) + 80);
  return sub_2415B9FB4(a1, (uint64_t *)(v2 + ((v5 + 16) & ~v5)), a2);
}

uint64_t sub_2415C0970(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_2416B9FA0();
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_2416BA2A0();
}

uint64_t sub_2415C09EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(void);
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  os_log_type_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;

  v2 = v1;
  v4 = sub_2416BA414();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDEB418];
  v9 = MEMORY[0x24BDEB560];
  sub_24159D6B0(0, &qword_25713A1D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB418], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v21 - v11;
  sub_2415C2920(v2, (uint64_t)v21 - v11, (uint64_t)&qword_25713A1D0, (uint64_t)v8, (uint64_t)v9, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = sub_2416B9FA0();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, v12, v14);
  }
  else
  {
    v16 = sub_2416BB380();
    v17 = sub_2416BA7F8();
    v18 = v16;
    if (os_log_type_enabled(v17, v16))
    {
      v21[1] = a1;
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v22 = v20;
      *(_DWORD *)v19 = 136315138;
      v21[2] = sub_2415A8600(0x686353726F6C6F43, 0xEB00000000656D65, &v22);
      sub_2416BB44C();
      _os_log_impl(&dword_241599000, v17, v18, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v20, -1, -1);
      MEMORY[0x242699570](v19, -1, -1);
    }

    sub_2416BA408();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_2415C0C54(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_2416BA414();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  if ((a2 & 1) == 0)
  {
    v8 = sub_2416BB380();
    v9 = sub_2416BA7F8();
    v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v15 = v12;
      *(_DWORD *)v11 = 136315138;
      v14 = sub_2415A8600(0xD000000000000014, 0x80000002416C42B0, &v15);
      sub_2416BB44C();
      _os_log_impl(&dword_241599000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v12, -1, -1);
      MEMORY[0x242699570](v11, -1, -1);
    }

    sub_2416BA408();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v15;
  }
  return a1;
}

uint64_t sub_2415C0E10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(void);
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  os_log_type_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;

  v2 = v1;
  v4 = sub_2416BA414();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDEC038];
  v9 = MEMORY[0x24BDEB560];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v21 - v11;
  sub_2415C2920(v2, (uint64_t)v21 - v11, (uint64_t)&qword_25713A4E0, (uint64_t)v8, (uint64_t)v9, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = sub_2416BA06C();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, v12, v14);
  }
  else
  {
    v16 = sub_2416BB380();
    v17 = sub_2416BA7F8();
    v18 = v16;
    if (os_log_type_enabled(v17, v16))
    {
      v21[1] = a1;
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v22 = v20;
      *(_DWORD *)v19 = 136315138;
      v21[2] = sub_2415A8600(0x417373696D736944, 0xED00006E6F697463, &v22);
      sub_2416BB44C();
      _os_log_impl(&dword_241599000, v17, v18, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v20, -1, -1);
      MEMORY[0x242699570](v19, -1, -1);
    }

    sub_2416BA408();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_2415C107C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(void);
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  os_log_type_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;

  v2 = v1;
  v4 = sub_2416BA414();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDF1310];
  v9 = MEMORY[0x24BDEB560];
  sub_24159D6B0(0, &qword_25713A5D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1310], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v21 - v11;
  sub_2415C2920(v2, (uint64_t)v21 - v11, (uint64_t)&qword_25713A5D8, (uint64_t)v8, (uint64_t)v9, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = sub_2416BA7D4();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, v12, v14);
  }
  else
  {
    v16 = sub_2416BB380();
    v17 = sub_2416BA7F8();
    v18 = v16;
    if (os_log_type_enabled(v17, v16))
    {
      v21[1] = a1;
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v22 = v20;
      *(_DWORD *)v19 = 136315138;
      v21[2] = sub_2415A8600(0xD000000000000022, 0x80000002416C42D0, &v22);
      sub_2416BB44C();
      _os_log_impl(&dword_241599000, v17, v18, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v20, -1, -1);
      MEMORY[0x242699570](v19, -1, -1);
    }

    sub_2416BA408();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_2415C12E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(void);
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  os_log_type_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;

  v2 = v1;
  v4 = sub_2416BA414();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDCEEB0];
  v9 = MEMORY[0x24BDEB560];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v21 - v11;
  sub_2415C2920(v2, (uint64_t)v21 - v11, (uint64_t)&qword_25713A1C8, (uint64_t)v8, (uint64_t)v9, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = sub_2416B9C10();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, v12, v14);
  }
  else
  {
    v16 = sub_2416BB380();
    v17 = sub_2416BA7F8();
    v18 = v16;
    if (os_log_type_enabled(v17, v16))
    {
      v21[1] = a1;
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v22 = v20;
      *(_DWORD *)v19 = 136315138;
      v21[2] = sub_2415A8600(0x656C61636F4CLL, 0xE600000000000000, &v22);
      sub_2416BB44C();
      _os_log_impl(&dword_241599000, v17, v18, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v20, -1, -1);
      MEMORY[0x242699570](v19, -1, -1);
    }

    sub_2416BA408();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_2415C153C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(void);
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  os_log_type_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;

  v2 = v1;
  v4 = sub_2416BA414();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDECF50];
  v9 = MEMORY[0x24BDEB560];
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v21 - v11;
  sub_2415C2920(v2, (uint64_t)v21 - v11, (uint64_t)&qword_25713A5E0, (uint64_t)v8, (uint64_t)v9, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = sub_2416BA144();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, v12, v14);
  }
  else
  {
    v16 = sub_2416BB380();
    v17 = sub_2416BA7F8();
    v18 = v16;
    if (os_log_type_enabled(v17, v16))
    {
      v21[1] = a1;
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v22 = v20;
      *(_DWORD *)v19 = 136315138;
      v21[2] = sub_2415A8600(0x5463696D616E7944, 0xEF657A6953657079, &v22);
      sub_2416BB44C();
      _os_log_impl(&dword_241599000, v17, v18, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v20, -1, -1);
      MEMORY[0x242699570](v19, -1, -1);
    }

    sub_2416BA408();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_2415C17A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD, uint64_t, uint64_t, uint64_t);
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;

  v2 = v1;
  v4 = sub_2416BA414();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDEB560];
  sub_24159D6B0(0, &qword_25713A5B8, (uint64_t (*)(uint64_t))sub_2415C3694, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v19 - v10;
  sub_2415C2920(v2, (uint64_t)v19 - v10, (uint64_t)&qword_25713A5B8, (uint64_t)sub_2415C3694, (uint64_t)v8, v12);
  if (swift_getEnumCaseMultiPayload() == 1)
    return sub_2415A85BC((uint64_t)v11, a1, (uint64_t (*)(_QWORD))sub_2415C3694);
  v14 = sub_2416BB380();
  v15 = sub_2416BA7F8();
  v16 = v14;
  if (os_log_type_enabled(v15, v14))
  {
    v19[1] = a1;
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v20 = v18;
    *(_DWORD *)v17 = 136315138;
    v19[2] = sub_2415A8600(0xD000000000000019, 0x80000002416C4290, &v20);
    sub_2416BB44C();
    _os_log_impl(&dword_241599000, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242699570](v18, -1, -1);
    MEMORY[0x242699570](v17, -1, -1);
  }

  sub_2416BA408();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_2415C1A00(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;

  v6 = sub_2416BA414();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    sub_2415A4818(a1);
  }
  else
  {
    swift_retain();
    v10 = sub_2416BB380();
    v11 = sub_2416BA7F8();
    v12 = v10;
    if (os_log_type_enabled(v11, v10))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v17 = v14;
      *(_DWORD *)v13 = 136315138;
      v16[0] = v13 + 4;
      v16[1] = sub_2415A8600(0xD000000000000044, 0x80000002416C4300, &v17);
      sub_2416BB44C();
      _os_log_impl(&dword_241599000, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v14, -1, -1);
      MEMORY[0x242699570](v13, -1, -1);
    }

    sub_2416BA408();
    swift_getAtKeyPath();
    sub_2415C38D4(a1, a2, 0);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return v17;
  }
  return a1;
}

uint64_t sub_2415C1BDC(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_2416BA414();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  swift_retain();
  v8 = sub_2416BB380();
  v9 = sub_2416BA7F8();
  v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v15 = v12;
    *(_DWORD *)v11 = 136315138;
    v14 = sub_2415A8600(1819242306, 0xE400000000000000, &v15);
    sub_2416BB44C();
    _os_log_impl(&dword_241599000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242699570](v12, -1, -1);
    MEMORY[0x242699570](v11, -1, -1);
  }

  sub_2416BA408();
  swift_getAtKeyPath();
  sub_2415C38C8(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

uint64_t sub_2415C1D94()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_2415C1DB8(void *a1)
{
  return sub_24159FE14(a1);
}

uint64_t sub_2415C1DC0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  id *v4;
  id *v5;
  int *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  id *v33;
  char *v34;
  char *v35;
  uint64_t *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  id *v41;
  uint64_t v42;
  char *v43;
  int *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  void (*v62)(char *);
  uint64_t v63;
  unsigned int (*v64)(char *, uint64_t, uint64_t);
  int *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);

  v1 = type metadata accessor for MedicalIDDataContentView();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_unknownObjectRelease();
  v3 = v0 + v2;
  swift_release();
  v60 = (int *)v1;
  v4 = (id *)(v0 + v2 + *(int *)(v1 + 20));

  v65 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v5 = (id *)((char *)v4 + v65[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v6 = (int *)type metadata accessor for MedicalIDData();
  v7 = (char *)v5 + v6[13];
  v8 = sub_2416B9B50();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  v11 = (char *)v5 + v6[14];
  if (!v10(v11, 1, v8))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = (uint64_t *)((char *)v5 + v6[19]);
  v13 = v12[1];
  if (v13 >> 60 != 15)
    sub_2415A0DAC(*v12, v13);
  v14 = (char *)v5 + v6[20];
  v15 = sub_2416B9A18();
  v61 = *(_QWORD *)(v15 - 8);
  v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48);
  if (!v64(v14, 1, v15))
    (*(void (**)(char *, uint64_t))(v61 + 8))(v14, v15);
  v59 = v3;

  v16 = (char *)v5 + v6[22];
  if (!v10(v16, 1, v8))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
  v66 = v9;
  v17 = (char *)v4 + v65[6];
  v18 = sub_2416B9C70();
  v62 = *(void (**)(char *))(*(_QWORD *)(v18 - 8) + 8);
  v63 = v18;
  v62(v17);

  v19 = (char *)v4 + v65[8];
  v20 = sub_2416B9C10();
  v67 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
  v67(v19, v20);
  v21 = (char *)v4 + v65[9];
  swift_bridgeObjectRelease();
  v22 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v23 = &v21[v22[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v24 = &v23[v6[13]];
  if (!v10(v24, 1, v8))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v24, v8);
  v25 = &v23[v6[14]];
  if (!v10(v25, 1, v8))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v25, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = (uint64_t *)&v23[v6[19]];
  v27 = v26[1];
  if (v27 >> 60 != 15)
    sub_2415A0DAC(*v26, v27);
  v28 = &v23[v6[20]];
  if (!v64(v28, 1, v15))
    (*(void (**)(char *, uint64_t))(v61 + 8))(v28, v15);

  v29 = &v23[v6[22]];
  if (!v10(v29, 1, v8))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v29, v8);
  v67(&v21[v22[6]], v20);
  v30 = &v21[v22[7]];
  v67(v30, v20);

  v31 = &v21[v22[8]];
  v67(v31, v20);
  v32 = type metadata accessor for MedicalIDWeightFormatter();

  v33 = (id *)((char *)v4 + v65[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v34 = (char *)v33 + v6[13];
  if (!v10(v34, 1, v8))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v34, v8);
  v35 = (char *)v33 + v6[14];
  if (!v10(v35, 1, v8))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v35, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36 = (uint64_t *)((char *)v33 + v6[19]);
  v37 = v36[1];
  if (v37 >> 60 != 15)
    sub_2415A0DAC(*v36, v37);
  v38 = (char *)v33 + v6[20];
  if (!v64(v38, 1, v15))
    (*(void (**)(char *, uint64_t))(v61 + 8))(v38, v15);
  v58 = v15;

  v39 = (char *)v33 + v6[22];
  if (!v10(v39, 1, v8))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v39, v8);
  v40 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v62)((char *)v33 + v40[5], v63);
  v67((char *)v33 + v40[6], v20);

  swift_bridgeObjectRelease();
  v41 = (id *)((char *)v4 + v65[11]);

  v42 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v62)((char *)v41 + *(int *)(v42 + 20), v63);
  v67((char *)v41 + *(int *)(v42 + 24), v20);
  v43 = (char *)v4 + v65[12];
  swift_bridgeObjectRelease();
  v44 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v45 = &v43[v44[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v46 = &v45[v6[13]];
  if (!v10(v46, 1, v8))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v46, v8);
  v47 = &v45[v6[14]];
  if (!v10(v47, 1, v8))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v47, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v48 = (uint64_t *)&v45[v6[19]];
  v49 = v48[1];
  if (v49 >> 60 != 15)
    sub_2415A0DAC(*v48, v49);
  v50 = &v45[v6[20]];
  if (!v64(v50, 1, v58))
    (*(void (**)(char *, uint64_t))(v61 + 8))(v50, v58);

  v51 = &v45[v6[22]];
  if (!v10(v51, 1, v8))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v51, v8);
  ((void (*)(char *, uint64_t))v62)(&v43[v44[6]], v63);
  v67(&v43[v44[7]], v20);
  swift_release();
  v52 = &v43[v44[9]];
  if (!v10(v52, 1, v8))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v52, v8);

  v53 = v59 + v60[7];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    ((void (*)(uint64_t, uint64_t))v62)(v53, v63);
  else
    swift_release();
  v54 = (char *)(v59 + v60[8]);
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v67(v54, v20);
  else
    swift_release();
  v55 = v59 + v60[9];
  sub_24159D6B0(0, &qword_25713A1D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB418], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v56 = sub_2416B9FA0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v55, v56);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2415C27B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDDataContentView() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_2415C2834;
  return sub_2415BA7CC(a1, v5, v6, v7);
}

uint64_t sub_2415C2834()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2415C287C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t sub_2415C28CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415BE2C8(0, &qword_25713A360, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415C2920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_2415C2970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;

  v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_2415C29AC(uint64_t a1)
{
  uint64_t v2;

  sub_2415BE2C8(0, &qword_25713A360, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id *v3;
  id *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  id *v32;
  char *v33;
  char *v34;
  uint64_t *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int *v39;
  id *v40;
  uint64_t v41;
  char *v42;
  int *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  void (*v61)(char *);
  uint64_t v62;
  unsigned int (*v63)(char *, uint64_t, uint64_t);
  int *v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;

  v1 = type metadata accessor for MedicalIDDataContentView();
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));
  swift_release();
  v58 = v2;
  v59 = (int *)v1;
  v3 = (id *)(v2 + *(int *)(v1 + 20));

  v64 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v4 = (id *)((char *)v3 + v64[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = (char *)v4 + v5[13];
  v7 = sub_2416B9B50();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  v10 = (char *)v4 + v5[14];
  if (!v9(v10, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)((char *)v4 + v5[19]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_2415A0DAC(*v11, v12);
  v13 = (char *)v4 + v5[20];
  v14 = sub_2416B9A18();
  v60 = *(_QWORD *)(v14 - 8);
  v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
  if (!v63(v13, 1, v14))
    (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v14);

  v15 = (char *)v4 + v5[22];
  if (!v9(v15, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
  v66 = v8;
  v16 = (char *)v3 + v64[6];
  v17 = sub_2416B9C70();
  v61 = *(void (**)(char *))(*(_QWORD *)(v17 - 8) + 8);
  v62 = v17;
  v61(v16);

  v18 = (char *)v3 + v64[8];
  v19 = sub_2416B9C10();
  v65 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v65(v18, v19);
  v20 = (char *)v3 + v64[9];
  swift_bridgeObjectRelease();
  v21 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v22 = &v20[v21[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v23 = &v22[v5[13]];
  if (!v9(v23, 1, v7))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v23, v7);
  v24 = &v22[v5[14]];
  if (!v9(v24, 1, v7))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v24, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = (uint64_t *)&v22[v5[19]];
  v26 = v25[1];
  if (v26 >> 60 != 15)
    sub_2415A0DAC(*v25, v26);
  v27 = &v22[v5[20]];
  if (!v63(v27, 1, v14))
    (*(void (**)(char *, uint64_t))(v60 + 8))(v27, v14);

  v28 = &v22[v5[22]];
  if (!v9(v28, 1, v7))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v28, v7);
  v65(&v20[v21[6]], v19);
  v29 = &v20[v21[7]];
  v65(v29, v19);

  v30 = &v20[v21[8]];
  v65(v30, v19);
  v31 = type metadata accessor for MedicalIDWeightFormatter();

  v32 = (id *)((char *)v3 + v64[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v33 = (char *)v32 + v5[13];
  if (!v9(v33, 1, v7))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v33, v7);
  v34 = (char *)v32 + v5[14];
  if (!v9(v34, 1, v7))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v34, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v35 = (uint64_t *)((char *)v32 + v5[19]);
  v36 = v35[1];
  if (v36 >> 60 != 15)
    sub_2415A0DAC(*v35, v36);
  v37 = (char *)v32 + v5[20];
  if (!v63(v37, 1, v14))
    (*(void (**)(char *, uint64_t))(v60 + 8))(v37, v14);
  v57 = v14;

  v38 = (char *)v32 + v5[22];
  if (!v9(v38, 1, v7))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v38, v7);
  v39 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v61)((char *)v32 + v39[5], v62);
  v65((char *)v32 + v39[6], v19);

  swift_bridgeObjectRelease();
  v40 = (id *)((char *)v3 + v64[11]);

  v41 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v61)((char *)v40 + *(int *)(v41 + 20), v62);
  v65((char *)v40 + *(int *)(v41 + 24), v19);
  v42 = (char *)v3 + v64[12];
  swift_bridgeObjectRelease();
  v43 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v44 = &v42[v43[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v45 = &v44[v5[13]];
  if (!v9(v45, 1, v7))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v45, v7);
  v46 = &v44[v5[14]];
  if (!v9(v46, 1, v7))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v46, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47 = (uint64_t *)&v44[v5[19]];
  v48 = v47[1];
  if (v48 >> 60 != 15)
    sub_2415A0DAC(*v47, v48);
  v49 = &v44[v5[20]];
  if (!v63(v49, 1, v57))
    (*(void (**)(char *, uint64_t))(v60 + 8))(v49, v57);

  v50 = &v44[v5[22]];
  if (!v9(v50, 1, v7))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v50, v7);
  ((void (*)(char *, uint64_t))v61)(&v42[v43[6]], v62);
  v65(&v42[v43[7]], v19);
  swift_release();
  v51 = &v42[v43[9]];
  if (!v9(v51, 1, v7))
    (*(void (**)(char *, uint64_t))(v66 + 8))(v51, v7);

  v52 = v58 + v59[7];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    ((void (*)(uint64_t, uint64_t))v61)(v52, v62);
  else
    swift_release();
  v53 = (char *)(v58 + v59[8]);
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v65(v53, v19);
  else
    swift_release();
  v54 = v58 + v59[9];
  sub_24159D6B0(0, &qword_25713A1D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB418], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v55 = sub_2416B9FA0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v54, v55);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2415C33E4(uint64_t a1)
{
  return sub_2415C33F0(a1, (uint64_t (*)(uint64_t, uint64_t))sub_2415BD764);
}

uint64_t sub_2415C33F0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDDataContentView() - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

unint64_t sub_2415C343C()
{
  unint64_t result;

  result = qword_25713A580;
  if (!qword_25713A580)
  {
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_25713A580);
  }
  return result;
}

unint64_t sub_2415C3480()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25713A588;
  if (!qword_25713A588)
  {
    sub_2415A3D28(255, &qword_257139CE0, MEMORY[0x24BDF1FA8], MEMORY[0x24BDECC80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v2[0] = MEMORY[0x24BDF1F80];
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25713A588);
  }
  return result;
}

uint64_t sub_2415C3500@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2415BD8C0(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_2415C3524(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_2415A0DAC(a1, a2);
  return a1;
}

uint64_t sub_2415C3538(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_2415C357C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_2415A0A90(a1, a2);
  return a1;
}

unint64_t sub_2415C3590()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25713A5A0;
  if (!qword_25713A5A0)
  {
    sub_2415A3D28(255, &qword_25713A368, MEMORY[0x24BDF3E48], MEMORY[0x24BDEBEF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v2[0] = MEMORY[0x24BDF3E20];
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_25713A5A0);
  }
  return result;
}

uint64_t sub_2415C3610(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4;
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2415C3678()
{
  return sub_24159CE88(&qword_25713A5B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF4918], MEMORY[0x24BDF4900]);
}

void sub_2415C3694(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713E5C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDED8D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
}

uint64_t sub_2415C36B8()
{
  return sub_2416BA294();
}

uint64_t sub_2415C36DC()
{
  return sub_24159CE88(&qword_25713A5C0, (uint64_t (*)(uint64_t))sub_2415C3708, MEMORY[0x24BDEDA10]);
}

void sub_2415C3708()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A5C8)
  {
    sub_2415C37F8(255);
    sub_2415BEE8C(255);
    sub_24159D7F0(255, &qword_25713A4F0, (uint64_t)&type metadata for MedicalIDDisplaySection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    sub_2415A40A4(&qword_25713A4F8, (uint64_t (*)(uint64_t))sub_2415BEE8C, sub_2415C0698, sub_2415C06F4);
    sub_2415C0710();
    swift_getOpaqueTypeConformance2();
    v0 = sub_2416BA1EC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A5C8);
  }
}

void sub_2415C37F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_25713A5D0)
  {
    sub_2415BEE8C(255);
    v3 = v2;
    sub_24159D7F0(255, &qword_25713A4F0, (uint64_t)&type metadata for MedicalIDDisplaySection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_2415A40A4(&qword_25713A4F8, (uint64_t (*)(uint64_t))sub_2415BEE8C, sub_2415C0698, sub_2415C06F4);
    v7[3] = sub_2415C0710();
    v5 = MEMORY[0x242699480](a1, v7, MEMORY[0x24BDF38E8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25713A5D0);
  }
}

uint64_t sub_2415C38C8(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_release();
  return result;
}

uint64_t sub_2415C38D4(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return sub_2415A6144(result);
  else
    return swift_release();
}

uint64_t (*sub_2415C38E8())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_2415C3928@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  sub_2415C3AE0();
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_2415C39B4()
{
  swift_getKeyPath();
  sub_2415C3AE0();
  swift_bridgeObjectRetain();
  sub_2416B9CA0();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2415C3A54()
{
  swift_getKeyPath();
  sub_2415C3AE0();
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

unint64_t sub_2415C3AE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713A5F0;
  if (!qword_25713A5F0)
  {
    v1 = type metadata accessor for MedicalIDEditableEmergencyContactsModel();
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDEditableEmergencyContactsModel, v1);
    atomic_store(result, (unint64_t *)&qword_25713A5F0);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDEditableEmergencyContactsModel()
{
  uint64_t result;

  result = qword_25713A620;
  if (!qword_25713A620)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2415C3B64()
{
  swift_getKeyPath();
  sub_2415C3AE0();
  sub_2416B9CA0();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2415C3BF8(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(_QWORD *)(a1 + 16) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2415C3C5C()
{
  uint64_t v0;

  return sub_2415C3BF8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void (*sub_2415C3C74(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  v4[5] = OBJC_IVAR____TtC11MedicalIDUI39MedicalIDEditableEmergencyContactsModel___observationRegistrar;
  *v4 = v2;
  v4[6] = sub_2415C3AE0();
  sub_2416B9CAC();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  sub_2416B9CC4();
  swift_release();
  v4[7] = sub_2415C38E8();
  return sub_2415C3D44;
}

void sub_2415C3D44(_QWORD *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  *v1 = v1[4];
  swift_getKeyPath();
  sub_2416B9CB8();
  swift_release();
  free(v1);
}

uint64_t MedicalIDEditableEmergencyContactsModel.suggestedEmergencyContacts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MedicalIDEditableEmergencyContactsModel.baseIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDEditableEmergencyContactsModel.__allocating_init(emergencyContacts:suggestedEmergencyContacts:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  MedicalIDEditableEmergencyContactsModel.init(emergencyContacts:suggestedEmergencyContacts:)(a1, a2);
  return v4;
}

_QWORD *MedicalIDEditableEmergencyContactsModel.init(emergencyContacts:suggestedEmergencyContacts:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  id v9;
  unint64_t v10;

  v5 = 0xD000000000000011;
  sub_24159F83C();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v6 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v6 + 40) = 0xE900000000000044;
  v7 = 0x80000002416C3F90;
  *(_QWORD *)(v6 + 48) = 0xD000000000000011;
  *(_QWORD *)(v6 + 56) = 0x80000002416C3F90;
  v8 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v9 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v9)
  {
    v5 = sub_2416BB128();
    v7 = v10;

  }
  v2[4] = v5;
  v2[5] = v7;
  sub_2416B9CD0();
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

uint64_t sub_2415C3F2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v6;

  swift_getKeyPath();
  sub_2415C3AE0();
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v6 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2416BB548();
    v3 = 32;
    do
    {
      v4 = sub_2415DA34C();
      sub_2416BB524();
      sub_2416BB554();
      sub_2416BB560();
      sub_2416BB530();
      v3 += 128;
      --v1;
    }
    while (v1);
    v2 = v6;
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t MedicalIDEditableEmergencyContactsModel.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI39MedicalIDEditableEmergencyContactsModel___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MedicalIDEditableEmergencyContactsModel.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI39MedicalIDEditableEmergencyContactsModel___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_2415C413C()
{
  return type metadata accessor for MedicalIDEditableEmergencyContactsModel();
}

uint64_t sub_2415C4144()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2416B9CDC();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for MedicalIDEditableEmergencyContactsModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicalIDEditableEmergencyContactsModel.emergencyContacts.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of MedicalIDEditableEmergencyContactsModel.emergencyContacts.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MedicalIDEditableEmergencyContactsModel.emergencyContacts.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MedicalIDEditableEmergencyContactsModel.__allocating_init(emergencyContacts:suggestedEmergencyContacts:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of MedicalIDEditableEmergencyContactsModel.hkEmergencyContacts.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t sub_2415C4218()
{
  return sub_2415C3C5C();
}

uint64_t sub_2415C422C()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_2415C7478();
  sub_2416B9CAC();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_2415C4298@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_2415C7478();
  sub_2416B9CAC();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

uint64_t sub_2415C430C()
{
  swift_getKeyPath();
  sub_2415C7478();
  sub_2416B9CA0();
  return swift_release();
}

uint64_t sub_2415C439C()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_2415C7478();
  sub_2416B9CAC();
  swift_release();
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t sub_2415C4408@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_2415C7478();
  sub_2416B9CAC();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 17);
  return result;
}

uint64_t sub_2415C447C()
{
  swift_getKeyPath();
  sub_2415C7478();
  sub_2416B9CA0();
  return swift_release();
}

uint64_t sub_2415C450C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI34MedicalIDEditableSettingsViewModel___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t MedicalIDSettingsViewModel.medicalIDData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2415A84E8(v1, a1);
}

id MedicalIDSettingsViewModel.healthStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 20));
}

uint64_t type metadata accessor for MedicalIDSettingsViewModel(uint64_t a1)
{
  return sub_2415C5864(a1, qword_25713A8A0);
}

uint64_t MedicalIDSettingsViewModel.profileFirstName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDSettingsViewModel.hasPairedWatch.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 28));
}

uint64_t MedicalIDSettingsViewModel.isEEDAvailable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 32));
}

uint64_t MedicalIDSettingsViewModel.showWhenLockedEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 36));
}

uint64_t MedicalIDSettingsViewModel.shareDuringEmergencyCallEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 40));
}

uint64_t MedicalIDSettingsViewModel.baseIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDSettingsViewModel.init(medicalIDData:healthStore:profileFirstName:hasPairedWatch:isEEDAvailable:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t result;

  sub_24159F83C();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v14 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v14 + 40) = 0xE900000000000044;
  *(_QWORD *)(v14 + 48) = 0x73676E6974746553;
  *(_QWORD *)(v14 + 56) = 0xE800000000000000;
  v15 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v16 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v16)
  {
    v17 = sub_2416BB128();
    v19 = v18;

  }
  else
  {
    v19 = 0x80000002416C43E0;
    v17 = 0xD000000000000011;
  }
  v20 = (int *)type metadata accessor for MedicalIDSettingsViewModel(0);
  v21 = (uint64_t *)(a7 + v20[11]);
  *v21 = v17;
  v21[1] = v19;
  sub_2415A84E8(a1, a7);
  *(_QWORD *)(a7 + v20[5]) = a2;
  v22 = (_QWORD *)(a7 + v20[6]);
  *v22 = a3;
  v22[1] = a4;
  v23 = type metadata accessor for MedicalIDData();
  *(_BYTE *)(a7 + v20[9]) = (*(_BYTE *)(a1 + *(int *)(v23 + 68)) & 1) == 0;
  v24 = *(_BYTE *)(a1 + *(int *)(v23 + 72));
  result = sub_2415A8580(a1);
  *(_BYTE *)(a7 + v20[10]) = v24;
  *(_BYTE *)(a7 + v20[7]) = a5 & 1;
  *(_BYTE *)(a7 + v20[8]) = a6 & 1;
  return result;
}

uint64_t MedicalIDSettingsViewModel.showWhenLockedDetail.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  type metadata accessor for MedicalIDSettingsViewModel(0);
  v0 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v0);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v1 = (void *)qword_25713A038;
  v2 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v2);
  v3 = v1;
  sub_2416B9C04();
  return sub_2416BB134();
}

uint64_t MedicalIDSettingsViewModel.featureEnabledLocalizedString.getter()
{
  return sub_2415C49A0();
}

uint64_t MedicalIDSettingsViewModel.featureDisabledLocalizedString.getter()
{
  return sub_2415C49A0();
}

uint64_t sub_2415C49A0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  v0 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v0);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v1 = (void *)qword_25713A038;
  v2 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v2);
  v3 = v1;
  sub_2416B9C04();
  return sub_2416BB134();
}

uint64_t MedicalIDSettingsViewModel.showWhenLockedFooter.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23[2];

  v1 = v0;
  v2 = type metadata accessor for MedicalIDSettingsViewModel(0);
  v3 = *(void **)(v0 + *(int *)(v2 + 20));
  v4 = objc_msgSend(v3, sel_profileIdentifier);
  v5 = objc_msgSend(v4, sel_type);

  if (v5 == (id)3 && *(_QWORD *)(v1 + *(int *)(v2 + 24) + 8))
  {
    v6 = sub_2416BB0D4();
    MEMORY[0x24BDAC7A8](v6);
    sub_2416BB0C8();
    sub_2416BB0BC();
    sub_2416BB0B0();
    sub_2416BB0BC();
    v7 = sub_2416BB0EC();
    MEMORY[0x24BDAC7A8](v7);
    sub_2416BB0E0();
    if (qword_257139300 != -1)
      swift_once();
    v8 = (void *)qword_25713A038;
    v9 = sub_2416B9C10();
    MEMORY[0x24BDAC7A8](v9);
    v10 = v8;
    sub_2416B9C04();
    return sub_2416BB134();
  }
  else
  {
    v12 = objc_msgSend(v3, sel_profileIdentifier);
    v13 = objc_msgSend(v12, sel_type);

    if (v13 == (id)3)
    {
      if (qword_2571395C0 != -1)
        swift_once();
      v14 = sub_2416B9D6C();
      __swift_project_value_buffer(v14, (uint64_t)qword_257147810);
      v15 = sub_2416B9D54();
      v16 = sub_2416BB374();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = swift_slowAlloc();
        v18 = swift_slowAlloc();
        v23[0] = v18;
        *(_DWORD *)v17 = 136315394;
        sub_2415A8600(0xD00000000000001ALL, 0x80000002416BD660, v23);
        sub_2416BB44C();
        *(_WORD *)(v17 + 12) = 2080;
        sub_2415A8600(0xD000000000000014, 0x80000002416C4450, v23);
        sub_2416BB44C();
        _os_log_impl(&dword_241599000, v15, v16, "%s %s could not fetch first name", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242699570](v18, -1, -1);
        MEMORY[0x242699570](v17, -1, -1);
      }

    }
    v19 = sub_2416BB0EC();
    MEMORY[0x24BDAC7A8](v19);
    sub_2416BB098();
    if (qword_257139300 != -1)
      swift_once();
    v20 = (void *)qword_25713A038;
    v21 = sub_2416B9C10();
    MEMORY[0x24BDAC7A8](v21);
    v22 = v20;
    sub_2416B9C04();
    return sub_2416BB134();
  }
}

Swift::Bool __swiftcall MedicalIDSettingsViewModel.isShowWhenLockedEditable(with:)(MIUIDisplayConfiguration *with)
{
  uint64_t v1;
  void *v3;
  _BOOL4 v4;
  id v5;
  id v6;

  v3 = *(void **)(v1 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 20));
  v4 = -[MIUIDisplayConfiguration isEditingAvailable](with, sel_isEditingAvailable);
  if (v4)
  {
    v5 = objc_msgSend(v3, sel_profileIdentifier);
    v6 = objc_msgSend(v5, sel_type);

    LOBYTE(v4) = v6 != (id)3 || (id)-[MIUIDisplayConfiguration accessPoint](with, sel_accessPoint) == (id)8;
  }
  return v4;
}

BOOL static MedicalIDSettingsViewModel.ShareDuringEmergencyCallViewState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MedicalIDSettingsViewModel.ShareDuringEmergencyCallViewState.hash(into:)()
{
  return sub_2416BB6C8();
}

uint64_t MedicalIDSettingsViewModel.ShareDuringEmergencyCallViewState.hashValue.getter()
{
  sub_2416BB6BC();
  sub_2416BB6C8();
  return sub_2416BB6EC();
}

MedicalIDUI::MedicalIDSettingsViewModel::ShareDuringEmergencyCallViewState __swiftcall MedicalIDSettingsViewModel.shareDuringEmergencyCallViewState(with:hasShareDuringEmergencyCallBeenEnabled:)(MIUIDisplayConfiguration *with, Swift::Bool hasShareDuringEmergencyCallBeenEnabled)
{
  char *v2;
  uint64_t v3;
  char *v6;
  uint64_t v7;
  void *v8;
  int64_t v9;
  id v10;
  id v11;
  char v12;

  v6 = v2;
  v7 = type metadata accessor for MedicalIDSettingsViewModel(0);
  v8 = *(void **)(v3 + *(int *)(v7 + 20));
  LODWORD(v9) = -[MIUIDisplayConfiguration isEditingAvailable](with, sel_isEditingAvailable);
  if ((_DWORD)v9
    && ((v10 = objc_msgSend(v8, sel_profileIdentifier),
         v11 = objc_msgSend(v10, sel_type),
         v10,
         v11 != (id)3)
     || (v9 = -[MIUIDisplayConfiguration accessPoint](with, sel_accessPoint), v9 == 8)))
  {
    if (((*(_BYTE *)(v3 + *(int *)(v7 + 32)) | hasShareDuringEmergencyCallBeenEnabled) & 1) != 0)
      v12 = 0;
    else
      v12 = 2;
  }
  else if (*(_BYTE *)(v3 + *(int *)(v7 + 32)))
  {
    v12 = 1;
  }
  else
  {
    v12 = 2;
  }
  *v6 = v12;
  return (char)v9;
}

Swift::Bool __swiftcall MedicalIDSettingsViewModel.showShareDuringEmergencyCall(with:hasShareDuringEmergencyCallBeenEnabled:)(MIUIDisplayConfiguration *with, Swift::Bool hasShareDuringEmergencyCallBeenEnabled)
{
  _BOOL4 v4;
  unsigned __int8 v6;

  v4 = -[MIUIDisplayConfiguration isShareDuringEmergencyCallVisible](with, sel_isShareDuringEmergencyCallVisible);
  if (v4)
  {
    MedicalIDSettingsViewModel.shareDuringEmergencyCallViewState(with:hasShareDuringEmergencyCallBeenEnabled:)(with, hasShareDuringEmergencyCallBeenEnabled);
    LOBYTE(v4) = v6 < 2u;
  }
  return v4;
}

uint64_t MedicalIDSettingsViewModel.shareDuringEmergencyCallDetail.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  type metadata accessor for MedicalIDSettingsViewModel(0);
  v0 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v0);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v1 = (void *)qword_25713A038;
  v2 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v2);
  v3 = v1;
  sub_2416B9C04();
  return sub_2416BB134();
}

uint64_t MedicalIDSettingsViewModel.shareDuringEmergencyCallFooter.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23[2];

  v1 = v0;
  v2 = type metadata accessor for MedicalIDSettingsViewModel(0);
  v3 = *(void **)(v0 + *(int *)(v2 + 20));
  v4 = objc_msgSend(v3, sel_profileIdentifier);
  v5 = objc_msgSend(v4, sel_type);

  if (v5 == (id)3 && *(_QWORD *)(v1 + *(int *)(v2 + 24) + 8))
  {
    v6 = sub_2416BB0D4();
    MEMORY[0x24BDAC7A8](v6);
    sub_2416BB0C8();
    sub_2416BB0BC();
    sub_2416BB0B0();
    sub_2416BB0BC();
    v7 = sub_2416BB0EC();
    MEMORY[0x24BDAC7A8](v7);
    sub_2416BB0E0();
    if (qword_257139300 != -1)
      swift_once();
    v8 = (void *)qword_25713A038;
    v9 = sub_2416B9C10();
    MEMORY[0x24BDAC7A8](v9);
    v10 = v8;
    sub_2416B9C04();
    return sub_2416BB134();
  }
  else
  {
    v12 = objc_msgSend(v3, sel_profileIdentifier);
    v13 = objc_msgSend(v12, sel_type);

    if (v13 == (id)3)
    {
      if (qword_2571395C0 != -1)
        swift_once();
      v14 = sub_2416B9D6C();
      __swift_project_value_buffer(v14, (uint64_t)qword_257147810);
      v15 = sub_2416B9D54();
      v16 = sub_2416BB374();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = swift_slowAlloc();
        v18 = swift_slowAlloc();
        v23[0] = v18;
        *(_DWORD *)v17 = 136315394;
        sub_2415A8600(0xD00000000000001ALL, 0x80000002416BD660, v23);
        sub_2416BB44C();
        *(_WORD *)(v17 + 12) = 2080;
        sub_2415A8600(0xD00000000000001ELL, 0x80000002416C4570, v23);
        sub_2416BB44C();
        _os_log_impl(&dword_241599000, v15, v16, "%s %s could not fetch first name", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242699570](v18, -1, -1);
        MEMORY[0x242699570](v17, -1, -1);
      }

    }
    v19 = sub_2416BB0EC();
    MEMORY[0x24BDAC7A8](v19);
    sub_2416BB098();
    if (qword_257139300 != -1)
      swift_once();
    v20 = (void *)qword_25713A038;
    v21 = sub_2416B9C10();
    MEMORY[0x24BDAC7A8](v21);
    v22 = v20;
    sub_2416B9C04();
    return sub_2416BB134();
  }
}

unint64_t sub_2415C5804()
{
  unint64_t result;

  result = qword_25713A708;
  if (!qword_25713A708)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDSettingsViewModel.ShareDuringEmergencyCallViewState, &type metadata for MedicalIDSettingsViewModel.ShareDuringEmergencyCallViewState);
    atomic_store(result, (unint64_t *)&qword_25713A708);
  }
  return result;
}

uint64_t sub_2415C5848()
{
  return type metadata accessor for MedicalIDEditableSettingsViewModel(0);
}

uint64_t type metadata accessor for MedicalIDEditableSettingsViewModel(uint64_t a1)
{
  return sub_2415C5864(a1, qword_25713A740);
}

uint64_t sub_2415C5864(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2415C5898()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2416B9CDC();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MedicalIDSettingsViewModel(_QWORD *a1, char *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  unint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  id v65;
  char *v68;
  void *v69;
  char *__dst;
  int *v71;
  uint64_t v72;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    v7 = *((_QWORD *)a2 + 3);
    a1[2] = *((_QWORD *)a2 + 2);
    a1[3] = v7;
    v8 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v8;
    v9 = *((_QWORD *)a2 + 7);
    a1[6] = *((_QWORD *)a2 + 6);
    a1[7] = v9;
    v10 = *((_QWORD *)a2 + 9);
    a1[8] = *((_QWORD *)a2 + 8);
    a1[9] = v10;
    v11 = *((_QWORD *)a2 + 11);
    a1[10] = *((_QWORD *)a2 + 10);
    a1[11] = v11;
    v12 = (void *)*((_QWORD *)a2 + 12);
    v69 = (void *)*((_QWORD *)a2 + 13);
    a1[12] = v12;
    a1[13] = v69;
    v13 = type metadata accessor for MedicalIDData();
    v14 = *(int *)(v13 + 52);
    __dst = (char *)v4 + v14;
    v71 = (int *)v13;
    v68 = &a2[v14];
    v15 = sub_2416B9B50();
    v72 = *(_QWORD *)(v15 - 8);
    v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = v12;
    v18 = v69;
    if (v16(v68, 1, v15))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(__dst, v68, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      v20 = v72;
    }
    else
    {
      v20 = v72;
      (*(void (**)(char *, char *, uint64_t))(v72 + 16))(__dst, v68, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(__dst, 0, 1, v15);
    }
    v22 = v71[14];
    v23 = (char *)v4 + v22;
    v24 = &a2[v22];
    if (v16(&a2[v22], 1, v15))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v23, v24, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v23, 0, 1, v15);
    }
    v26 = v71[15];
    v27 = (_QWORD *)((char *)v4 + v26);
    v28 = &a2[v26];
    v29 = *((_QWORD *)v28 + 1);
    *v27 = *(_QWORD *)v28;
    v27[1] = v29;
    v30 = v71[16];
    v31 = (_QWORD *)((char *)v4 + v30);
    v32 = &a2[v30];
    v33 = *((_QWORD *)v32 + 1);
    *v31 = *(_QWORD *)v32;
    v31[1] = v33;
    *((_BYTE *)v4 + v71[17]) = a2[v71[17]];
    *((_BYTE *)v4 + v71[18]) = a2[v71[18]];
    v34 = v71[19];
    v35 = (char *)v4 + v34;
    v36 = (uint64_t *)&a2[v34];
    v37 = *(_QWORD *)&a2[v34 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38 = v16;
    if (v37 >> 60 == 15)
    {
      *(_OWORD *)v35 = *(_OWORD *)v36;
    }
    else
    {
      v39 = *v36;
      sub_2415A0A90(*v36, v37);
      *(_QWORD *)v35 = v39;
      *((_QWORD *)v35 + 1) = v37;
    }
    v40 = v71[20];
    v41 = (char *)v4 + v40;
    v42 = &a2[v40];
    v43 = sub_2416B9A18();
    v44 = *(_QWORD *)(v43 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
    {
      sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
    }
    v46 = v71[21];
    v47 = *(void **)&a2[v46];
    *(_QWORD *)((char *)v4 + v46) = v47;
    v48 = v71[22];
    v49 = (char *)v4 + v48;
    v50 = &a2[v48];
    v51 = v47;
    if (v38(v50, 1, v15))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v49, v50, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v49, 0, 1, v15);
    }
    v53 = a3[5];
    v54 = a3[6];
    v55 = *(void **)&a2[v53];
    *(_QWORD *)((char *)v4 + v53) = v55;
    v56 = (_QWORD *)((char *)v4 + v54);
    v57 = &a2[v54];
    v58 = *((_QWORD *)v57 + 1);
    *v56 = *(_QWORD *)v57;
    v56[1] = v58;
    v59 = a3[8];
    *((_BYTE *)v4 + a3[7]) = a2[a3[7]];
    *((_BYTE *)v4 + v59) = a2[v59];
    v60 = a3[10];
    *((_BYTE *)v4 + a3[9]) = a2[a3[9]];
    *((_BYTE *)v4 + v60) = a2[v60];
    v61 = a3[11];
    v62 = (_QWORD *)((char *)v4 + v61);
    v63 = &a2[v61];
    v64 = *((_QWORD *)v63 + 1);
    *v62 = *(_QWORD *)v63;
    v62[1] = v64;
    v65 = v55;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for MedicalIDSettingsViewModel(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = (int *)type metadata accessor for MedicalIDData();
  v5 = a1 + v4[13];
  v6 = sub_2416B9B50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + v4[14];
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)(a1 + v4[19]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_2415A0DAC(*v10, v11);
  v12 = a1 + v4[20];
  v13 = sub_2416B9A18();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);

  v15 = a1 + v4[22];
  if (!v8(v15, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MedicalIDSettingsViewModel(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  id v63;
  char *v66;
  void *v67;
  char *__dst;
  int *v69;
  uint64_t v70;

  v5 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *((_QWORD *)a2 + 3);
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = v6;
  v7 = *((_QWORD *)a2 + 5);
  a1[4] = *((_QWORD *)a2 + 4);
  a1[5] = v7;
  v8 = *((_QWORD *)a2 + 7);
  a1[6] = *((_QWORD *)a2 + 6);
  a1[7] = v8;
  v9 = *((_QWORD *)a2 + 9);
  a1[8] = *((_QWORD *)a2 + 8);
  a1[9] = v9;
  v10 = *((_QWORD *)a2 + 11);
  a1[10] = *((_QWORD *)a2 + 10);
  a1[11] = v10;
  v11 = (void *)*((_QWORD *)a2 + 12);
  v67 = (void *)*((_QWORD *)a2 + 13);
  a1[12] = v11;
  a1[13] = v67;
  v12 = type metadata accessor for MedicalIDData();
  v13 = *(int *)(v12 + 52);
  __dst = (char *)a1 + v13;
  v69 = (int *)v12;
  v66 = &a2[v13];
  v14 = sub_2416B9B50();
  v70 = *(_QWORD *)(v14 - 8);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = v11;
  v17 = v67;
  if (v15(v66, 1, v14))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(__dst, v66, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    v19 = v70;
  }
  else
  {
    v19 = v70;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(__dst, v66, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(__dst, 0, 1, v14);
  }
  v20 = v69[14];
  v21 = (char *)a1 + v20;
  v22 = &a2[v20];
  if (v15(&a2[v20], 1, v14))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v22, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v21, 0, 1, v14);
  }
  v24 = v69[15];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = &a2[v24];
  v27 = *((_QWORD *)v26 + 1);
  *v25 = *(_QWORD *)v26;
  v25[1] = v27;
  v28 = v69[16];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = &a2[v28];
  v31 = *((_QWORD *)v30 + 1);
  *v29 = *(_QWORD *)v30;
  v29[1] = v31;
  *((_BYTE *)a1 + v69[17]) = a2[v69[17]];
  *((_BYTE *)a1 + v69[18]) = a2[v69[18]];
  v32 = v69[19];
  v33 = (char *)a1 + v32;
  v34 = (uint64_t *)&a2[v32];
  v35 = *(_QWORD *)&a2[v32 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36 = v15;
  if (v35 >> 60 == 15)
  {
    *(_OWORD *)v33 = *(_OWORD *)v34;
  }
  else
  {
    v37 = *v34;
    sub_2415A0A90(*v34, v35);
    *(_QWORD *)v33 = v37;
    *((_QWORD *)v33 + 1) = v35;
  }
  v38 = v69[20];
  v39 = (char *)a1 + v38;
  v40 = &a2[v38];
  v41 = sub_2416B9A18();
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  v44 = v69[21];
  v45 = *(void **)&a2[v44];
  *(_QWORD *)((char *)a1 + v44) = v45;
  v46 = v69[22];
  v47 = (char *)a1 + v46;
  v48 = &a2[v46];
  v49 = v45;
  if (v36(v48, 1, v14))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v47, v48, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v47, 0, 1, v14);
  }
  v51 = a3[5];
  v52 = a3[6];
  v53 = *(void **)&a2[v51];
  *(_QWORD *)((char *)a1 + v51) = v53;
  v54 = (_QWORD *)((char *)a1 + v52);
  v55 = &a2[v52];
  v56 = *((_QWORD *)v55 + 1);
  *v54 = *(_QWORD *)v55;
  v54[1] = v56;
  v57 = a3[8];
  *((_BYTE *)a1 + a3[7]) = a2[a3[7]];
  *((_BYTE *)a1 + v57) = a2[v57];
  v58 = a3[10];
  *((_BYTE *)a1 + a3[9]) = a2[a3[9]];
  *((_BYTE *)a1 + v58) = a2[v58];
  v59 = a3[11];
  v60 = (_QWORD *)((char *)a1 + v59);
  v61 = &a2[v59];
  v62 = *((_QWORD *)v61 + 1);
  *v60 = *(_QWORD *)v61;
  v60[1] = v62;
  v63 = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for MedicalIDSettingsViewModel(char *a1, _QWORD *a2, int *a3)
{
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  id v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;

  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 3) = a2[3];
  *((_QWORD *)a1 + 4) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 7) = a2[7];
  *((_QWORD *)a1 + 8) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 9) = a2[9];
  *((_QWORD *)a1 + 10) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 11) = a2[11];
  v5 = (void *)*((_QWORD *)a1 + 12);
  v6 = (void *)a2[12];
  *((_QWORD *)a1 + 12) = v6;
  v7 = v6;

  v8 = (void *)*((_QWORD *)a1 + 13);
  v9 = (void *)a2[13];
  *((_QWORD *)a1 + 13) = v9;
  v10 = v9;

  v11 = (int *)type metadata accessor for MedicalIDData();
  v12 = v11[13];
  v13 = &a1[v12];
  v14 = (char *)a2 + v12;
  v15 = sub_2416B9B50();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  v21 = v11[14];
  v22 = &a1[v21];
  v23 = (char *)a2 + v21;
  v24 = v17(&a1[v21], 1, v15);
  v25 = v17(v23, 1, v15);
  v72 = v16;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  v27 = v11[15];
  v28 = &a1[v27];
  v29 = (_QWORD *)((char *)a2 + v27);
  *(_QWORD *)v28 = *v29;
  *((_QWORD *)v28 + 1) = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = v11[16];
  v31 = &a1[v30];
  v32 = (_QWORD *)((char *)a2 + v30);
  *(_QWORD *)v31 = *v32;
  *((_QWORD *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v11[17]] = *((_BYTE *)a2 + v11[17]);
  a1[v11[18]] = *((_BYTE *)a2 + v11[18]);
  v33 = v11[19];
  v34 = (uint64_t *)&a1[v33];
  v35 = (_QWORD *)((char *)a2 + v33);
  v36 = *(_QWORD *)((char *)a2 + v33 + 8);
  v71 = v17;
  if (*(_QWORD *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      v37 = *v35;
      sub_2415A0A90(*v35, v36);
      *v34 = v37;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v34);
LABEL_18:
    *(_OWORD *)v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  v38 = *v35;
  sub_2415A0A90(*v35, v36);
  v39 = *v34;
  v40 = v34[1];
  *v34 = v38;
  v34[1] = v36;
  sub_2415A0DAC(v39, v40);
LABEL_20:
  v41 = v11[20];
  v42 = &a1[v41];
  v43 = (char *)a2 + v41;
  v44 = sub_2416B9A18();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46(v43, 1, v44);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
LABEL_25:
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_26:
  v50 = v11[21];
  v51 = *(void **)&a1[v50];
  v52 = *(void **)((char *)a2 + v50);
  *(_QWORD *)&a1[v50] = v52;
  v53 = v52;

  v54 = v11[22];
  v55 = &a1[v54];
  v56 = (char *)a2 + v54;
  v57 = v71(&a1[v54], 1, v15);
  v58 = v71(v56, 1, v15);
  if (!v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v72 + 24))(v55, v56, v15);
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v72 + 8))(v55, v15);
    goto LABEL_31;
  }
  if (v58)
  {
LABEL_31:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v55, v56, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v55, 0, 1, v15);
LABEL_32:
  v60 = a3[5];
  v61 = *(void **)((char *)a2 + v60);
  v62 = *(void **)&a1[v60];
  *(_QWORD *)&a1[v60] = v61;
  v63 = v61;

  v64 = a3[6];
  v65 = &a1[v64];
  v66 = (_QWORD *)((char *)a2 + v64);
  *(_QWORD *)v65 = *v66;
  *((_QWORD *)v65 + 1) = v66[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[7]] = *((_BYTE *)a2 + a3[7]);
  a1[a3[8]] = *((_BYTE *)a2 + a3[8]);
  a1[a3[9]] = *((_BYTE *)a2 + a3[9]);
  a1[a3[10]] = *((_BYTE *)a2 + a3[10]);
  v67 = a3[11];
  v68 = &a1[v67];
  v69 = (_QWORD *)((char *)a2 + v67);
  *(_QWORD *)v68 = *v69;
  *((_QWORD *)v68 + 1) = v69[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MedicalIDSettingsViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v32)(const void *, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v6 = (int *)type metadata accessor for MedicalIDData();
  v7 = v6[13];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_2416B9B50();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = v6[14];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v32 = v12;
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  *(_OWORD *)(a1 + v6[15]) = *(_OWORD *)(a2 + v6[15]);
  *(_OWORD *)(a1 + v6[16]) = *(_OWORD *)(a2 + v6[16]);
  *(_BYTE *)(a1 + v6[17]) = *(_BYTE *)(a2 + v6[17]);
  *(_BYTE *)(a1 + v6[18]) = *(_BYTE *)(a2 + v6[18]);
  *(_OWORD *)(a1 + v6[19]) = *(_OWORD *)(a2 + v6[19]);
  v18 = v6[20];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = sub_2416B9A18();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(_QWORD *)(a1 + v6[21]) = *(_QWORD *)(a2 + v6[21]);
  v24 = v6[22];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  if (v32((const void *)(a2 + v24), 1, v10))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v25, v26, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v25, 0, 1, v10);
  }
  v28 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v28) = *(_OWORD *)(a2 + v28);
  v29 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v30 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

char *assignWithTake for MedicalIDSettingsViewModel(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;

  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  v6 = a2[4];
  *((_QWORD *)a1 + 3) = a2[3];
  *((_QWORD *)a1 + 4) = v6;
  swift_bridgeObjectRelease();
  v7 = a2[6];
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = v7;
  swift_bridgeObjectRelease();
  v8 = a2[8];
  *((_QWORD *)a1 + 7) = a2[7];
  *((_QWORD *)a1 + 8) = v8;
  swift_bridgeObjectRelease();
  v9 = a2[10];
  *((_QWORD *)a1 + 9) = a2[9];
  *((_QWORD *)a1 + 10) = v9;
  swift_bridgeObjectRelease();
  v10 = (void *)*((_QWORD *)a1 + 12);
  v11 = a2[12];
  *((_QWORD *)a1 + 11) = a2[11];
  *((_QWORD *)a1 + 12) = v11;

  v12 = (void *)*((_QWORD *)a1 + 13);
  *((_QWORD *)a1 + 13) = a2[13];

  v13 = (int *)type metadata accessor for MedicalIDData();
  v14 = v13[13];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = sub_2416B9B50();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  v23 = v13[14];
  v24 = &a1[v23];
  v25 = (char *)a2 + v23;
  v26 = v19(&a1[v23], 1, v17);
  v27 = v19(v25, 1, v17);
  v78 = v18;
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  v29 = v13[15];
  v30 = &a1[v29];
  v31 = (_QWORD *)((char *)a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *(_QWORD *)v30 = v33;
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  v34 = v13[16];
  v35 = &a1[v34];
  v36 = (_QWORD *)((char *)a2 + v34);
  v38 = *v36;
  v37 = v36[1];
  *(_QWORD *)v35 = v38;
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  a1[v13[17]] = *((_BYTE *)a2 + v13[17]);
  a1[v13[18]] = *((_BYTE *)a2 + v13[18]);
  v39 = v13[19];
  v40 = (uint64_t)&a1[v39];
  v41 = (char *)a2 + v39;
  v42 = *(_QWORD *)&a1[v39 + 8];
  v77 = v19;
  if (v42 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v40 = *(_OWORD *)v41;
    goto LABEL_18;
  }
  v43 = *((_QWORD *)v41 + 1);
  if (v43 >> 60 == 15)
  {
    sub_2415A1B38(v40);
    goto LABEL_16;
  }
  v44 = *(_QWORD *)v40;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_QWORD *)(v40 + 8) = v43;
  sub_2415A0DAC(v44, v42);
LABEL_18:
  v45 = v13[20];
  v46 = &a1[v45];
  v47 = (char *)a2 + v45;
  v48 = sub_2416B9A18();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v46, 1, v48);
  v52 = v50(v47, 1, v48);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
LABEL_23:
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 40))(v46, v47, v48);
LABEL_24:
  v54 = v13[21];
  v55 = *(void **)&a1[v54];
  *(_QWORD *)&a1[v54] = *(_QWORD *)((char *)a2 + v54);

  v56 = v13[22];
  v57 = &a1[v56];
  v58 = (char *)a2 + v56;
  v59 = v77(&a1[v56], 1, v17);
  v60 = v77(v58, 1, v17);
  if (!v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v78 + 40))(v57, v58, v17);
      goto LABEL_30;
    }
    (*(void (**)(char *, uint64_t))(v78 + 8))(v57, v17);
    goto LABEL_29;
  }
  if (v60)
  {
LABEL_29:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v57, v58, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v57, 0, 1, v17);
LABEL_30:
  v62 = a3[5];
  v63 = *(void **)&a1[v62];
  *(_QWORD *)&a1[v62] = *(_QWORD *)((char *)a2 + v62);

  v64 = a3[6];
  v65 = &a1[v64];
  v66 = (_QWORD *)((char *)a2 + v64);
  v68 = *v66;
  v67 = v66[1];
  *(_QWORD *)v65 = v68;
  *((_QWORD *)v65 + 1) = v67;
  swift_bridgeObjectRelease();
  v69 = a3[8];
  a1[a3[7]] = *((_BYTE *)a2 + a3[7]);
  a1[v69] = *((_BYTE *)a2 + v69);
  v70 = a3[10];
  a1[a3[9]] = *((_BYTE *)a2 + a3[9]);
  a1[v70] = *((_BYTE *)a2 + v70);
  v71 = a3[11];
  v72 = &a1[v71];
  v73 = (_QWORD *)((char *)a2 + v71);
  v75 = *v73;
  v74 = v73[1];
  *(_QWORD *)v72 = v75;
  *((_QWORD *)v72 + 1) = v74;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDSettingsViewModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415C720C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MedicalIDData();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDSettingsViewModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415C7294(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDData();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_2415C730C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MedicalIDData();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MedicalIDSettingsViewModel.ShareDuringEmergencyCallViewState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2415C73F0 + 4 * byte_2416BD675[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2415C7424 + 4 * byte_2416BD670[v4]))();
}

uint64_t sub_2415C7424(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2415C742C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2415C7434);
  return result;
}

uint64_t sub_2415C7440(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2415C7448);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2415C744C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2415C7454(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDSettingsViewModel.ShareDuringEmergencyCallViewState()
{
  return &type metadata for MedicalIDSettingsViewModel.ShareDuringEmergencyCallViewState;
}

unint64_t sub_2415C7478()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713A8F0;
  if (!qword_25713A8F0)
  {
    v1 = type metadata accessor for MedicalIDEditableSettingsViewModel(255);
    result = MEMORY[0x2426994BC](&unk_2416BD800, v1);
    atomic_store(result, (unint64_t *)&qword_25713A8F0);
  }
  return result;
}

void sub_2415C74C0()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 17) = *(_BYTE *)(v0 + 24);
}

void sub_2415C74D8()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 16) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_2415C74E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(uint64_t, _QWORD *))
{
  _QWORD v6[2];
  char v7;

  v6[0] = a2;
  v6[1] = a3;
  v7 = a4 & 1;
  return a5(a1, v6);
}

void sub_2415C7520(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v6 = sub_2416BA198();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  KeyPath = swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  sub_2415CE110();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a3, a2, v12);
  sub_2415CE69C();
  v14 = (uint64_t *)(a3 + *(int *)(v13 + 36));
  *v14 = KeyPath;
  v14[1] = (uint64_t)sub_24159D89C;
  v14[2] = v11;
}

double sub_2415C763C@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  sub_24159D590();
  sub_2416BA420();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_2415C7688(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = sub_2415CF01C;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_2415A4818(v1);
  sub_24159D590();
  return sub_2416BA42C();
}

uint64_t sub_2415C7738()
{
  return 1;
}

uint64_t sub_2415C7740()
{
  sub_2416BB6BC();
  sub_2416BB6C8();
  return sub_2416BB6EC();
}

uint64_t sub_2415C7780()
{
  return sub_2416BB6C8();
}

uint64_t sub_2415C77A4()
{
  sub_2416BB6BC();
  sub_2416BB6C8();
  return sub_2416BB6EC();
}

uint64_t sub_2415C77E0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  id v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t *v40;
  id v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  void *v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t result;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;

  v76 = a3;
  v77 = (uint64_t *)a1;
  v74 = a2;
  v5 = (int *)type metadata accessor for MedicalIDEditPersonalInfoModalView();
  v6 = (uint64_t *)(a4 + v5[5]);
  v78 = xmmword_2416BD3D0;
  sub_2415CA708();
  sub_2416BAD08();
  v7 = v83;
  *(_OWORD *)v6 = v82;
  v73 = v6;
  v6[2] = v7;
  v8 = a4 + v5[6];
  v9 = MEMORY[0x24BEE1C68];
  sub_24159D7F0(0, (unint64_t *)&qword_25713A910, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v78 = 0uLL;
  sub_2416BAD08();
  v10 = v83;
  *(_OWORD *)v8 = v82;
  v71 = (_QWORD *)v8;
  *(_QWORD *)(v8 + 16) = v10;
  v11 = a4 + v5[7];
  sub_2415A0A74(0);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_2416B9B50();
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v70 = v13;
  MEMORY[0x24BDAC7A8](v16);
  sub_2415BEF64((uint64_t)v14, (uint64_t)v14, (uint64_t (*)(_QWORD))sub_2415A0A74);
  v75 = v11;
  sub_2416BAD08();
  v17 = 0x6C616E6F73726550;
  sub_2415A6154((uint64_t)v14, (uint64_t (*)(_QWORD))sub_2415A0A74);
  v18 = a4 + v5[8];
  v78 = 0uLL;
  sub_2416BAD08();
  v19 = v83;
  *(_OWORD *)v18 = v82;
  *(_QWORD *)(v18 + 16) = v19;
  v20 = (_OWORD *)(a4 + v5[10]);
  sub_24159D7F0(0, (unint64_t *)&qword_25713A918, (uint64_t)&type metadata for BasicAlertModel, (uint64_t (*)(_QWORD, uint64_t))v9);
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0;
  sub_2416BAD08();
  v21 = v83;
  *v20 = v82;
  v20[1] = v21;
  v22 = v85;
  v20[2] = v84;
  v20[3] = v22;
  v23 = (uint64_t *)(a4 + v5[11]);
  *v23 = swift_getKeyPath();
  v24 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v25 = (uint64_t *)(a4 + v5[12]);
  *v25 = swift_getKeyPath();
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], v24);
  swift_storeEnumTagMultiPayload();
  v26 = (uint64_t *)(a4 + v5[13]);
  *v26 = swift_getKeyPath();
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], v24);
  swift_storeEnumTagMultiPayload();
  v27 = a4 + v5[14];
  type metadata accessor for MedicalIDDataManager();
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  *(_QWORD *)v27 = sub_2416B9FC4();
  *(_BYTE *)(v27 + 8) = v28 & 1;
  v29 = (uint64_t *)(a4 + v5[15]);
  sub_2415CA770();
  sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
  *v29 = sub_2416BA270();
  v29[1] = v30;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v31 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v31 + 40) = 0xE900000000000044;
  v32 = 0xEC0000006F666E49;
  strcpy((char *)(v31 + 48), "PersonalInfo");
  *(_BYTE *)(v31 + 61) = 0;
  *(_WORD *)(v31 + 62) = -5120;
  v33 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v34 = (id)HKUIJoinStringsForAutomationIdentifier();

  v69 = (_QWORD *)v18;
  if (v34)
  {
    v17 = sub_2416BB128();
    v32 = v35;

  }
  v36 = (uint64_t *)(a4 + v5[16]);
  *v36 = v17;
  v36[1] = v32;
  v37 = a4 + v5[17];
  sub_2415CA7AC();
  sub_2416B9F34();
  v38 = *((_QWORD *)&v82 + 1);
  v39 = v83;
  *(_BYTE *)v37 = v82;
  *(_QWORD *)(v37 + 8) = v38;
  *(_BYTE *)(v37 + 16) = v39;
  v40 = v77;
  sub_2415BEF64((uint64_t)v77, a4, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
  v41 = v74;
  *(_QWORD *)(a4 + v5[18]) = v74;
  *(_QWORD *)(a4 + v5[19]) = v76;
  v72 = type metadata accessor for MedicalIDData();
  v42 = (uint64_t *)((char *)v40 + *(int *)(v72 + 76));
  v43 = *v42;
  v44 = v42[1];
  v45 = v73;
  v46 = *v73;
  v47 = v73[1];
  *v73 = v43;
  v45[1] = v44;
  v45[2] = 0;
  v48 = v41;
  swift_retain();
  sub_2415C357C(v43, v44);
  sub_2415C3524(v46, v47);
  swift_release();
  v49 = v40[1];
  v74 = v48;
  if (v49)
  {
    v50 = *v40;
    v51 = HIBYTE(v49) & 0xF;
    if ((v49 & 0x2000000000000000) == 0)
      v51 = *v40 & 0xFFFFFFFFFFFFLL;
    if (v51)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v50 = 0;
      v49 = 0;
    }
  }
  else
  {
    v50 = 0;
  }
  v52 = v71;
  v53 = v70;
  v54 = v69;
  swift_bridgeObjectRelease();
  v55 = swift_release();
  *v52 = v50;
  v52[1] = v49;
  v52[2] = 0;
  MEMORY[0x24BDAC7A8](v55);
  v56 = (uint64_t)v77;
  MedicalIDPersonalInfoViewModel.dateOfBirth()((uint64_t)&v68 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  v57 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0];
  v58 = v75;
  sub_2415CCAFC(v75, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, v57);
  *(_QWORD *)(v58 + *(int *)(v59 + 28)) = 0;
  sub_2415A85BC((uint64_t)&v68 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0), v58, (uint64_t (*)(_QWORD))sub_2415A0A74);
  v60 = v72;
  v61 = (_QWORD *)(v56 + *(int *)(v72 + 60));
  v62 = v61[1];
  *v54 = *v61;
  v54[1] = v62;
  v54[2] = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_release();
  v63 = *(void **)(v56 + *(int *)(v60 + 84));
  if (!v63)
  {

    swift_release();
    goto LABEL_14;
  }
  v64 = (unint64_t)objc_msgSend(v63, sel_integerValue);

  swift_release();
  if (v64 >= 3)
  {
LABEL_14:
    LOBYTE(v65) = 0;
    goto LABEL_15;
  }
  v65 = 0x30102u >> (8 * v64);
LABEL_15:
  result = sub_2415A6154(v56, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
  v67 = a4 + v5[9];
  *(_BYTE *)v67 = v65;
  *(_QWORD *)(v67 + 8) = 0;
  return result;
}

uint64_t sub_2415C7ED0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  void (**v32)(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (**v44)();
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v2 = v1;
  v58 = a1;
  sub_2415CE110();
  v56 = *(_QWORD *)(v3 - 8);
  v57 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v55 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v46 - v6;
  v8 = type metadata accessor for MedicalIDEditPersonalInfoModalView();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159EF1C(0, &qword_25713AA98, (uint64_t (*)(uint64_t))sub_2415CE61C, sub_2415CE794, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MedicalIDEditModal);
  v13 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t *)((char *)&v46 - v14);
  if (qword_257139390 != -1)
    swift_once();
  v16 = unk_25713A900;
  v50 = (char *)qword_25713A8F8;
  sub_2415BEF64(v2, (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  v17 = *(unsigned __int8 *)(v9 + 80);
  v52 = ((v17 + 16) & ~v17) + v10;
  v18 = (v17 + 16) & ~v17;
  v53 = v18;
  v51 = v17 | 7;
  v19 = swift_allocObject();
  sub_2415A85BC((uint64_t)v11, v19 + v18, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  v20 = (__int128 *)(v2 + *(int *)(v8 + 40));
  v21 = v20[1];
  v60 = *v20;
  v61 = v21;
  v22 = v20[3];
  v62 = v20[2];
  v63 = v22;
  sub_2415CE834(0, (unint64_t *)&qword_25713AAD8, (unint64_t *)&qword_25713A918, (uint64_t)&type metadata for BasicAlertModel);
  swift_bridgeObjectRetain();
  sub_2416BAD2C();
  v49 = v64;
  v48 = v65;
  v47 = v66;
  v46 = v67;
  v23 = v68;
  *v15 = swift_getKeyPath();
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v24 = swift_storeEnumTagMultiPayload();
  v25 = (uint64_t *)((char *)v15 + v13[9]);
  *v25 = v50;
  v25[1] = v16;
  v26 = (uint64_t *)((char *)v15 + v13[10]);
  *v26 = &unk_25713AAD0;
  v26[1] = v19;
  v27 = (char *)v15 + v13[11];
  v28 = v48;
  *(_OWORD *)v27 = v49;
  *((_OWORD *)v27 + 1) = v28;
  v29 = v46;
  *((_OWORD *)v27 + 2) = v47;
  *((_OWORD *)v27 + 3) = v29;
  *((_QWORD *)v27 + 8) = v23;
  v30 = v13[12];
  v50 = v11;
  v31 = v2;
  v32 = (void (**)(uint64_t@<X0>, uint64_t@<X8>))((char *)v15 + v30);
  MEMORY[0x24BDAC7A8](v24);
  *((_QWORD *)&v46 - 2) = v31;
  sub_24159D6B0(0, &qword_25713AA10, (uint64_t (*)(uint64_t))sub_2415CE1A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
  sub_2415A3F2C(&qword_25713AA90, &qword_25713AA10, (uint64_t (*)(uint64_t))sub_2415CE1A8);
  sub_2416BA918();
  v34 = v56;
  v33 = v57;
  v35 = v55;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v55, v7, v57);
  v36 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v37 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v34 + 32))(v37 + v36, v35, v33);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v33);
  *v32 = sub_2415CE8A8;
  v32[1] = (void (*)(uint64_t@<X0>, uint64_t@<X8>))v37;
  v38 = (char *)v15 + v13[13];
  v59 = 0;
  sub_2416BAD08();
  v39 = *((_QWORD *)&v60 + 1);
  *v38 = v60;
  *((_QWORD *)v38 + 1) = v39;
  v40 = (uint64_t)v50;
  sub_2415BEF64(v31, (uint64_t)v50, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  v41 = swift_allocObject();
  sub_2415A85BC(v40, v41 + v53, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  v42 = v58;
  sub_2415CEDF8((uint64_t)v15, v58, &qword_25713AA98, (uint64_t (*)(uint64_t))sub_2415CE61C, sub_2415CE794, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MedicalIDEditModal);
  sub_2415CEE4C();
  v44 = (void (**)())(v42 + *(int *)(v43 + 36));
  *v44 = sub_2415CEDCC;
  v44[1] = (void (*)())v41;
  v44[2] = 0;
  v44[3] = 0;
  return sub_2415CEEC8((uint64_t)v15, &qword_25713AA98, (uint64_t (*)(uint64_t))sub_2415CE61C, sub_2415CE794, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MedicalIDEditModal);
}

uint64_t sub_2415C83E8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2415C2834;
  return sub_2415C8430();
}

uint64_t sub_2415C8430()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[24] = v0;
  v2 = sub_2416BA06C();
  v1[25] = v2;
  v1[26] = *(_QWORD *)(v2 - 8);
  v1[27] = swift_task_alloc();
  sub_24159EF1C(0, &qword_257139F18, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDData, sub_2415A6FE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LoadState);
  v1[28] = swift_task_alloc();
  type metadata accessor for MedicalIDData();
  v1[29] = swift_task_alloc();
  v1[30] = type metadata accessor for MedicalIDEditPersonalInfoModalView();
  v1[31] = swift_task_alloc();
  v1[32] = sub_2416BB290();
  v1[33] = sub_2416BB284();
  v1[34] = sub_2416BB254();
  v1[35] = v3;
  return swift_task_switch();
}

uint64_t sub_2415C854C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[31];
  v2 = v0[24];
  v3 = *(_BYTE *)(v2 + *(int *)(v0[30] + 56) + 8);
  v4 = swift_retain();
  v0[36] = sub_2415C0C54(v4, v3);
  swift_release();
  sub_2415BEF64(v2, v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  v0[37] = sub_2416BB284();
  v0[38] = sub_2416BB254();
  v0[39] = v5;
  return swift_task_switch();
}

uint64_t sub_2415C8604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 v26;

  v1 = *(_QWORD *)(v0 + 288);
  v3 = *(int **)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v25 = (_QWORD *)v5;
  swift_getKeyPath();
  *(_QWORD *)(v0 + 176) = v1;
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  v6 = v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_2415CEDF8(v6, v4, &qword_257139F18, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDData, sub_2415A6FE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LoadState);
  LoadState<>.loadedValue.getter(v5);
  sub_2415CEEC8(v4, &qword_257139F18, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDData, sub_2415A6FE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LoadState);
  v7 = v2 + v3[5];
  v8 = *(_QWORD *)(v7 + 16);
  *(_OWORD *)(v0 + 88) = *(_OWORD *)v7;
  *(_QWORD *)(v0 + 104) = v8;
  sub_24159D6B0(0, &qword_25713AB28, (uint64_t (*)(uint64_t))sub_2415CA708, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v9 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 120);
  v11 = v2 + v3[6];
  v12 = *(_QWORD *)(v11 + 16);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)v11;
  *(_QWORD *)(v0 + 32) = v12;
  sub_2415CE834(0, &qword_25713AAE8, (unint64_t *)&qword_25713A910, MEMORY[0x24BEE0D00]);
  sub_2416BAD14();
  v13 = *(_QWORD *)(v0 + 168);
  v24 = *(_QWORD *)(v0 + 160);
  sub_2415A0A74(0);
  v14 = swift_task_alloc();
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v15 = v2 + v3[8];
  v16 = *(_QWORD *)(v15 + 16);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)v15;
  *(_QWORD *)(v0 + 80) = v16;
  sub_2416BAD14();
  v18 = *(_QWORD *)(v0 + 144);
  v17 = *(_QWORD *)(v0 + 152);
  v19 = (char *)(v2 + v3[9]);
  v20 = *v19;
  v21 = *((_QWORD *)v19 + 1);
  *(_BYTE *)(v0 + 128) = v20;
  *(_QWORD *)(v0 + 136) = v21;
  sub_24159D7F0(0, &qword_25713AB18, (uint64_t)&type metadata for OrganDonationStatus, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v26 = *(_BYTE *)(v0 + 336);
  MedicalIDPersonalInfoViewModel.update(medicalIDData:withPictureData:personName:birthDate:primaryLanguageCode:organDonationStatus:)(v25, v9, v10, v24, v13, v14, v18, v17, &v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2415C3524(v9, v10);
  sub_2415A6154(v14, (uint64_t (*)(_QWORD))sub_2415A0A74);
  swift_task_dealloc();
  v22 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 320) = v22;
  *v22 = v0;
  v22[1] = sub_2415C8948;
  return sub_24167239C(*(_QWORD *)(v0 + 232), v0 + 184);
}

uint64_t sub_2415C8948()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2415C89A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 232);
  swift_release();
  sub_2415A6154(v2, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  sub_2415A6154(v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  swift_release();
  return swift_task_switch();
}

uint64_t sub_2415C8A18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  swift_release();
  sub_2415C0E10(v1);
  sub_2416BA060();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2415C8ABC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[31];
  v2 = v0[29];
  swift_release();
  sub_2415A6154(v2, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  v0[41] = v0[23];
  sub_2415A6154(v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  swift_release();
  return swift_task_switch();
}

uint64_t sub_2415C8B34()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 328);
  swift_release();
  sub_2415CF224();
  swift_allocError();
  *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2415C8BCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v60 = a2;
  sub_24159D6B0(0, &qword_25713AA80, (uint64_t (*)(uint64_t))sub_2415CE5B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v61 = (uint64_t)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v62 = (uint64_t)&v53 - v6;
  sub_2415CE350();
  v56 = *(_QWORD *)(v7 - 8);
  v57 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v59 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v55 = (char *)&v53 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v53 - v12;
  sub_2415CE5C4(0, &qword_25713AA28, (void (*)(uint64_t))sub_2415CE2D8);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v53 - v17;
  sub_2415CE244();
  v20 = v19;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v58 = (uint64_t)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v53 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v53 - v26;
  v64 = a1;
  sub_2415CE2D8();
  sub_2415A40A4(&qword_25713AAF8, (uint64_t (*)(uint64_t))sub_2415CE2D8, (uint64_t (*)(void))sub_2415CF05C, sub_2415A4680);
  sub_2416BAEB8();
  v65 = sub_2416BAC3C();
  swift_retain();
  v28 = sub_2416BAE04();
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v18, v15);
  swift_release();
  *(_QWORD *)&v25[*(int *)(v20 + 36)] = v28;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  sub_2415A85BC((uint64_t)v25, (uint64_t)v27, (uint64_t (*)(_QWORD))sub_2415CE244);
  v63 = a1;
  sub_24159D6B0(0, &qword_25713AA50, (uint64_t (*)(uint64_t))sub_2415CE3C8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
  sub_2415A3F2C(&qword_25713AB08, &qword_25713AA50, (uint64_t (*)(uint64_t))sub_2415CE3C8);
  v29 = v55;
  sub_2416BAEB8();
  v30 = v56;
  v31 = v13;
  v32 = v13;
  v33 = v57;
  (*(void (**)(char *, char *))(v56 + 32))(v32, v29);
  v34 = objc_msgSend(*(id *)(a1 + *(int *)(type metadata accessor for MedicalIDEditPersonalInfoModalView() + 72)), sel_profileIdentifier);
  v35 = objc_msgSend(v34, sel_type);

  if (v35 == (id)3)
  {
    sub_2415CE5B0(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v62, 1, 1, v37);
  }
  else
  {
    MEMORY[0x24BDAC7A8](v36);
    *(&v53 - 2) = a1;
    type metadata accessor for EditOrganDonationCellView();
    sub_24159CE88(&qword_25713AB10, (uint64_t (*)(uint64_t))type metadata accessor for EditOrganDonationCellView, (uint64_t)&unk_2416BE418);
    v38 = v62;
    sub_2416BAEB8();
    sub_2415CE5B0(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 0, 1, v39);
  }
  v54 = v27;
  v40 = v58;
  sub_2415BEF64((uint64_t)v27, v58, (uint64_t (*)(_QWORD))sub_2415CE244);
  v41 = v30;
  v42 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v43 = v59;
  v44 = v31;
  v42(v59, v31, v33);
  v45 = v61;
  v46 = v62;
  sub_2415CF0B0(v62, v61, &qword_25713AA80, (uint64_t (*)(uint64_t))sub_2415CE5B0);
  v47 = v60;
  sub_2415BEF64(v40, v60, (uint64_t (*)(_QWORD))sub_2415CE244);
  sub_2415CE1A8();
  v49 = v48;
  v42((char *)(v47 + *(int *)(v48 + 48)), v43, v33);
  sub_2415CF0B0(v45, v47 + *(int *)(v49 + 64), &qword_25713AA80, (uint64_t (*)(uint64_t))sub_2415CE5B0);
  v50 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_2415CCAFC(v46, &qword_25713AA80, (uint64_t (*)(uint64_t))sub_2415CE5B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v51 = *(void (**)(char *, uint64_t))(v41 + 8);
  v51(v44, v33);
  sub_2415A6154((uint64_t)v54, (uint64_t (*)(_QWORD))sub_2415CE244);
  sub_2415CCAFC(v45, &qword_25713AA80, (uint64_t (*)(uint64_t))sub_2415CE5B0, v50);
  v51(v43, v33);
  return sub_2415A6154(v40, (uint64_t (*)(_QWORD))sub_2415CE244);
}

void sub_2415C9124(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;

  v21 = a2;
  sub_2415CE2D8();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MedicalIDEditPersonalInfoModalView();
  v7 = (__int128 *)(a1 + *(int *)(v6 + 20));
  v8 = *((_QWORD *)v7 + 2);
  v28 = *v7;
  v29 = v8;
  sub_24159D6B0(0, &qword_25713AB28, (uint64_t (*)(uint64_t))sub_2415CA708, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  v9 = v22;
  v10 = v23;
  v11 = v24;
  v12 = v25;
  sub_24159D6B0(0, &qword_25713AB30, (uint64_t (*)(uint64_t))sub_2415CA708, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604](&v28);
  v13 = v28;
  type metadata accessor for EditPhotoCellView.ViewModel();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 64) = xmmword_2416BD3D0;
  *(_QWORD *)(v14 + 80) = 0;
  *(_BYTE *)(v14 + 88) = 1;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_QWORD *)(v14 + 144) = 0;
  sub_2416B9CD0();
  sub_2415C3524(*(_QWORD *)(v14 + 64), *(_QWORD *)(v14 + 72));
  *(_OWORD *)(v14 + 64) = v13;
  *(_QWORD *)(v14 + 16) = sub_2416152CC;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = sub_241615674;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = sub_2416156DC;
  *(_QWORD *)(v14 + 56) = 0;
  v22 = v14;
  v23 = 0;
  v24 = v9;
  v25 = v10;
  v26 = v11;
  v27 = v12;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2416BCC80;
  v16 = (_QWORD *)(a1 + *(int *)(v6 + 64));
  v17 = v16[1];
  *(_QWORD *)(v15 + 32) = *v16;
  *(_QWORD *)(v15 + 40) = v17;
  *(_QWORD *)(v15 + 48) = 0x6369506F746F6850;
  *(_QWORD *)(v15 + 56) = 0xEB0000000072656BLL;
  swift_bridgeObjectRetain();
  v18 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v19 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v19)
  {
    sub_2416BB128();

    sub_2415CF05C();
    sub_2416BAB1C();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_2415C3524(v11, v12);
    sub_2415A85BC((uint64_t)v5, v21, (uint64_t (*)(_QWORD))sub_2415CE2D8);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_2415C93E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  void (*v47)(char *, char *, uint64_t, __n128);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;

  v70 = a2;
  v3 = type metadata accessor for EditPrimaryLanguageCellView();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v69 = (uint64_t)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v68 = (uint64_t)&v58 - v6;
  v7 = (int *)type metadata accessor for MedicalIDEditPersonalInfoModalView();
  v63 = *((_QWORD *)v7 - 1);
  v64 = *(_QWORD *)(v63 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v61 = (uint64_t)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  MEMORY[0x24BDAC7A8](v9);
  v59 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for EditDateOfBirthCellView();
  v11 = MEMORY[0x24BDAC7A8](v62);
  v67 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v72 = (uint64_t)&v58 - v13;
  sub_2415CE44C(0);
  v66 = v14;
  v73 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v65 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v74 = (char *)&v58 - v17;
  v18 = a1 + v7[6];
  v19 = *(_QWORD *)(v18 + 16);
  v84 = *(_OWORD *)v18;
  v85 = v19;
  sub_2415CE834(0, &qword_25713AAE8, (unint64_t *)&qword_25713A910, MEMORY[0x24BEE0D00]);
  v60 = v20;
  sub_2416BAD2C();
  v71 = v7;
  v21 = v7[17];
  v22 = (uint64_t *)(a1 + v7[16]);
  v23 = v22[1];
  v82 = *v22;
  v83 = v23;
  v24 = a1 + v21;
  LOBYTE(v22) = *(_BYTE *)(a1 + v21);
  v25 = *(_QWORD *)(a1 + v21 + 8);
  LOBYTE(v24) = *(_BYTE *)(v24 + 16);
  v75 = (char)v22;
  v76 = v25;
  v77 = v24;
  sub_2415CF110();
  swift_bridgeObjectRetain();
  sub_2416B9F1C();
  v75 = 0;
  sub_24159D7F0(0, &qword_25713AA68, (uint64_t)&type metadata for MedicalIDEditPersonalInfoModalView.TextFieldFocus, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  sub_2415CE4F4();
  sub_2415CE538();
  sub_2416BAB94();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v26 = v59;
  sub_2415BEF64(a1, v59, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v58 - v28;
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  v30 = v61;
  sub_2415BEF64(a1, v61, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  v31 = (*(unsigned __int8 *)(v63 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
  v64 += v31;
  v32 = swift_allocObject();
  sub_2415A85BC(v30, v32 + v31, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  KeyPath = swift_getKeyPath();
  v34 = v62;
  v35 = v72;
  *(_QWORD *)(v72 + *(int *)(v62 + 28)) = KeyPath;
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  sub_2415A85BC(v26, v35, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
  sub_2415CF18C((uint64_t)v29, v35 + *(int *)(v34 + 20));
  v36 = (_QWORD *)(v35 + *(int *)(v34 + 24));
  *v36 = sub_2415CF10C;
  v36[1] = v32;
  v37 = v26;
  sub_2415BEF64(a1, v26, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
  v38 = a1 + v71[8];
  v39 = *(_QWORD *)(v38 + 16);
  v84 = *(_OWORD *)v38;
  v85 = v39;
  sub_2416BAD2C();
  v40 = v78;
  v41 = v79;
  v42 = v80;
  v43 = v81;
  sub_2415BEF64(a1, v30, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  v44 = swift_allocObject();
  sub_2415A85BC(v30, v44 + v31, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  v45 = v68;
  v46 = sub_241633594(v37, v40, v41, v42, v43, (uint64_t)sub_2415CF10C, v44, v68);
  v47 = *(void (**)(char *, char *, uint64_t, __n128))(v73 + 16);
  v48 = v65;
  v49 = v66;
  v47(v65, v74, v66, v46);
  v50 = v72;
  v51 = v67;
  sub_2415BEF64(v72, v67, (uint64_t (*)(_QWORD))type metadata accessor for EditDateOfBirthCellView);
  v52 = v69;
  sub_2415BEF64(v45, v69, (uint64_t (*)(_QWORD))type metadata accessor for EditPrimaryLanguageCellView);
  v53 = v70;
  ((void (*)(uint64_t, char *, uint64_t))v47)(v70, v48, v49);
  sub_2415CE3C8();
  v55 = v54;
  sub_2415BEF64(v51, v53 + *(int *)(v54 + 48), (uint64_t (*)(_QWORD))type metadata accessor for EditDateOfBirthCellView);
  sub_2415BEF64(v52, v53 + *(int *)(v55 + 64), (uint64_t (*)(_QWORD))type metadata accessor for EditPrimaryLanguageCellView);
  sub_2415A6154(v45, (uint64_t (*)(_QWORD))type metadata accessor for EditPrimaryLanguageCellView);
  sub_2415A6154(v50, (uint64_t (*)(_QWORD))type metadata accessor for EditDateOfBirthCellView);
  v56 = *(void (**)(char *, uint64_t))(v73 + 8);
  v56(v74, v49);
  sub_2415A6154(v52, (uint64_t (*)(_QWORD))type metadata accessor for EditPrimaryLanguageCellView);
  sub_2415A6154(v51, (uint64_t (*)(_QWORD))type metadata accessor for EditDateOfBirthCellView);
  return ((uint64_t (*)(char *, uint64_t))v56)(v48, v49);
}

uint64_t sub_2415C9A64()
{
  type metadata accessor for MedicalIDEditPersonalInfoModalView();
  sub_2415CF110();
  return sub_2416B9F10();
}

uint64_t sub_2415C9AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  _BYTE *v21;
  id v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  _BYTE *v27;
  uint64_t result;
  _BYTE v29[12];
  int v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;

  v34 = a2;
  v3 = type metadata accessor for MedicalIDEditPersonalInfoModalView();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v29[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = (int *)type metadata accessor for EditOrganDonationCellView();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = &v29[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v33 = &v29[-v14];
  sub_2415BEF64(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
  v15 = a1 + *(int *)(v3 + 36);
  v16 = *(_BYTE *)v15;
  v17 = *(_QWORD *)(v15 + 8);
  LOBYTE(v35) = v16;
  v36 = v17;
  sub_24159D7F0(0, &qword_25713AB18, (uint64_t)&type metadata for OrganDonationStatus, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  v31 = v39;
  v32 = v38;
  v30 = v40;
  sub_2415BEF64(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  v18 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v19 = swift_allocObject();
  sub_2415A85BC((uint64_t)v6, v19 + v18, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  v20 = *(void **)(a1 + *(int *)(v3 + 60));
  if (v20)
  {
    v21 = &v13[v10[7]];
    type metadata accessor for MedicalIDDataManager();
    sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
    v22 = v20;
    *(_QWORD *)v21 = sub_2416B9FC4();
    v21[8] = v23 & 1;
    sub_2415BEF64((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
    v24 = &v13[v10[6]];
    *v24 = sub_2415CF10C;
    v24[1] = v19;
    v35 = v32;
    v36 = v31;
    v37 = v30;
    type metadata accessor for EditOrganDonationCellViewModel();
    swift_allocObject();
    swift_retain();
    v25 = EditOrganDonationCellViewModel.init(outOrganDonationStatus:hasStoredRegistrant:medicalIDDonorStatusProvider:organDonationRegistrationAvailable:)(&v35, (uint64_t)sub_241603BD4, 0, (uint64_t)sub_241603BFC, 0, (uint64_t)sub_241603C38, 0);
    swift_release();

    sub_2415A6154((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
    v26 = (uint64_t *)&v13[v10[5]];
    *v26 = v25;
    v26[1] = 0;
    v27 = v33;
    sub_2415A85BC((uint64_t)v13, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for EditOrganDonationCellView);
    return sub_2415A85BC((uint64_t)v27, v34, (uint64_t (*)(_QWORD))type metadata accessor for EditOrganDonationCellView);
  }
  else
  {
    sub_2415CA770();
    sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
    result = sub_2416BA264();
    __break(1u);
  }
  return result;
}

void sub_2415C9E24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  void *v10;
  int *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  _QWORD *v40;
  int v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(_QWORD, _QWORD, _QWORD);
  char v50;
  _BOOL4 v51;
  uint64_t (*v52)(_QWORD, _QWORD);
  uint64_t v53;
  char *v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  void *v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  char *v73;
  uint64_t *v74;
  id v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  sub_24159D6B0(0, qword_257139AE8, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v66 - v3;
  v5 = type metadata accessor for HealthDemographicData();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t **)((char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for MedicalIDEditPersonalInfoModalView();
  v10 = *(void **)(a1 + *(int *)(v9 + 60));
  if (!v10)
  {
    sub_2415CA770();
    sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
    sub_2416BA264();
    __break(1u);
    return;
  }
  v11 = (int *)v9;
  v75 = v10;
  if ((objc_msgSend(v75, sel_suggestHealthData) & 1) == 0)
  {

    return;
  }
  v12 = MedicalIDPersonalInfoViewModel.hasPersonalInfoData.getter();

  if ((v12 & 1) == 0)
  {
    v13 = *(_QWORD *)(a1 + v11[19]);
    swift_getKeyPath();
    v80 = v13;
    sub_24159CE88((unint64_t *)&qword_257139BC0, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicDataProvider, (uint64_t)&unk_2416BCD70);
    sub_2416B9CAC();
    swift_release();
    v14 = v13 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data;
    swift_beginAccess();
    sub_2415CF0B0(v14, (uint64_t)v4, qword_257139AE8, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_2415CCAFC((uint64_t)v4, qword_257139AE8, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      return;
    }
    sub_2415A85BC((uint64_t)v4, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for HealthDemographicData);
    v15 = (__int128 *)(a1 + v11[6]);
    v16 = *((_QWORD *)v15 + 2);
    v76 = *v15;
    v77 = v16;
    sub_2415CE834(0, &qword_25713AAE8, (unint64_t *)&qword_25713A910, MEMORY[0x24BEE0D00]);
    v18 = v17;
    sub_2416BAD14();
    v19 = v79;
    swift_bridgeObjectRelease();
    if (!v19)
    {
      v20 = *v8;
      v75 = v18;
      v21 = v8[1];
      v22 = (char *)v8[2];
      v72 = v20;
      v73 = v22;
      v23 = v8[3];
      v70 = v21;
      v71 = v23;
      v24 = sub_2416B9A54();
      v74 = &v66;
      v25 = *(_QWORD *)(v24 - 8);
      v67 = v24;
      v68 = v25;
      MEMORY[0x24BDAC7A8](v24);
      v27 = (char *)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_24159D6B0(0, (unint64_t *)&qword_25713AAF0, v28, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v69 = &v66;
      MEMORY[0x24BDAC7A8](v29);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))((char *)&v66 - v30, 1, 1, v24);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_2416B9A3C();
      v31 = sub_2416B9A48();
      v33 = v32;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v27, v67);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v34 = *((_QWORD *)v15 + 2);
      v76 = *v15;
      v77 = v34;
      v78 = v31;
      v79 = v33;
      sub_2416BAD20();
    }
    sub_2415A0A74(0);
    v36 = *(uint64_t **)(*(_QWORD *)(v35 - 8) + 64);
    MEMORY[0x24BDAC7A8](v35);
    v37 = (uint64_t *)(a1 + v11[7]);
    sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    v39 = v38;
    sub_2416BAD14();
    v40 = (_QWORD *)sub_2416B9B50();
    v74 = (uint64_t *)*(v40 - 1);
    v75 = v40;
    v41 = ((uint64_t (*)(char *, uint64_t))v74[6])((char *)&v66 - (((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF0), 1);
    sub_2415A6154((uint64_t)&v66 - (((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))sub_2415A0A74);
    if (v41 == 1)
    {
      v69 = v39;
      v70 = v36;
      v71 = v37;
      v42 = (char *)v8 + *(int *)(v5 + 24);
      sub_2416B99AC();
      v44 = v43;
      v45 = sub_2416B9A18();
      v72 = &v66;
      v46 = *(_QWORD **)(v45 - 8);
      v47 = v46[8];
      MEMORY[0x24BDAC7A8](v45);
      v48 = (v47 + 15) & 0xFFFFFFFFFFFFFFF0;
      v49 = (void (*)(_QWORD, _QWORD, _QWORD))v46[2];
      v73 = v42;
      v49((char *)&v66 - v48, v42, v45);
      if ((v44 & 1) != 0)
      {
        v51 = 0;
      }
      else
      {
        sub_2416B99E8();
        v51 = (v50 & 1) == 0;
      }
      v52 = (uint64_t (*)(_QWORD, _QWORD))v46[1];
      v53 = v52((char *)&v66 - v48, v45);
      MEMORY[0x24BDAC7A8](v53);
      v54 = (char *)&v66 - v48;
      v49((char *)&v66 - v48, v73, v45);
      if (v51)
      {
        sub_2416B99D0();
        v56 = v55;
        v57 = v52(v54, v45);
        if ((v56 & 1) == 0)
        {
          v58 = v70;
          MEMORY[0x24BDAC7A8](v57);
          v59 = ((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF0;
          v60 = *(void **)(a1 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 28));
          if (v60)
          {
            v61 = (void *)sub_2416B9988();
            v62 = objc_msgSend(v60, sel_dateFromComponents_, v61);

            MEMORY[0x24BDAC7A8](v63);
            if (v62)
            {
              sub_2416B9B2C();

              v64 = 0;
            }
            else
            {
              v64 = 1;
            }
            ((void (*)(char *, uint64_t, uint64_t, id))v74[7])((char *)&v66 - v59, v64, 1, v75);
            v65 = sub_2415A85BC((uint64_t)&v66 - v59, (uint64_t)&v66 - v59, (uint64_t (*)(_QWORD))sub_2415A0A74);
          }
          else
          {
            v65 = ((uint64_t (*)(char *, uint64_t, uint64_t, id))v74[7])((char *)&v66 - v59, 1, 1, v75);
          }
          MEMORY[0x24BDAC7A8](v65);
          sub_2415BEF64((uint64_t)&v66 - v59, (uint64_t)&v66 - (((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))sub_2415A0A74);
          sub_2416BAD20();
          sub_2415A6154((uint64_t)&v66 - v59, (uint64_t (*)(_QWORD))sub_2415A0A74);
          sub_2415A6154((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for HealthDemographicData);
          return;
        }
      }
      else
      {
        v52(v54, v45);
      }
    }
    sub_2415A6154((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for HealthDemographicData);
  }
}

uint64_t sub_2415CA5A8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t result;
  uint64_t v5;

  v0 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v0);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v1 = (void *)qword_25713A038;
  v2 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v2);
  v3 = v1;
  sub_2416B9C04();
  result = sub_2416BB134();
  qword_25713A8F8 = result;
  unk_25713A900 = v5;
  return result;
}

uint64_t type metadata accessor for MedicalIDEditPersonalInfoModalView()
{
  uint64_t result;

  result = qword_25713A990;
  if (!qword_25713A990)
    return swift_getSingletonMetadata();
  return result;
}

void sub_2415CA708()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A908)
  {
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A908);
  }
}

unint64_t sub_2415CA770()
{
  unint64_t result;

  result = qword_25713A430;
  if (!qword_25713A430)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25713A430);
  }
  return result;
}

unint64_t sub_2415CA7AC()
{
  unint64_t result;

  result = qword_25713A920;
  if (!qword_25713A920)
  {
    result = MEMORY[0x2426994BC](&unk_2416BDA10, &type metadata for MedicalIDEditPersonalInfoModalView.TextFieldFocus);
    atomic_store(result, (unint64_t *)&qword_25713A920);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MedicalIDEditPersonalInfoModalView.TextFieldFocus(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for MedicalIDEditPersonalInfoModalView.TextFieldFocus(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2415CA884 + 4 * byte_2416BD870[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2415CA8A4 + 4 * byte_2416BD875[v4]))();
}

_BYTE *sub_2415CA884(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2415CA8A4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2415CA8AC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2415CA8B4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2415CA8BC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2415CA8C4(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_2415CA8D0()
{
  return 0;
}

ValueMetadata *type metadata accessor for MedicalIDEditPersonalInfoModalView.TextFieldFocus()
{
  return &type metadata for MedicalIDEditPersonalInfoModalView.TextFieldFocus;
}

_QWORD *sub_2415CA8E8(_QWORD *a1, char *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  id v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t *v70;
  unint64_t v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  _QWORD *v113;
  char *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  id v127;
  id v128;
  uint64_t v130;
  void *v131;
  char *__dst;
  void (*__dsta)(char *, char *, uint64_t);
  uint64_t v134;
  int *v135;
  void (*v136)(char *, char *, uint64_t);
  void *v138;
  unsigned int (*v139)(char *, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    v7 = *((_QWORD *)a2 + 3);
    a1[2] = *((_QWORD *)a2 + 2);
    a1[3] = v7;
    v8 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v8;
    v9 = *((_QWORD *)a2 + 7);
    a1[6] = *((_QWORD *)a2 + 6);
    a1[7] = v9;
    v10 = *((_QWORD *)a2 + 9);
    a1[8] = *((_QWORD *)a2 + 8);
    a1[9] = v10;
    v11 = *((_QWORD *)a2 + 11);
    a1[10] = *((_QWORD *)a2 + 10);
    a1[11] = v11;
    v131 = (void *)*((_QWORD *)a2 + 12);
    v138 = (void *)*((_QWORD *)a2 + 13);
    a1[12] = v131;
    a1[13] = v138;
    v135 = (int *)type metadata accessor for MedicalIDData();
    v12 = v135[13];
    __dst = (char *)v4 + v12;
    v13 = &a2[v12];
    v14 = sub_2416B9B50();
    v134 = *(_QWORD *)(v14 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = v131;
    v17 = v138;
    v139 = v15;
    if (v15(v13, 1, v14))
    {
      sub_2415A0A74(0);
      memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      v19 = v134;
    }
    else
    {
      v19 = v134;
      (*(void (**)(char *, char *, uint64_t))(v134 + 16))(__dst, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v134 + 56))(__dst, 0, 1, v14);
    }
    v21 = v135[14];
    v22 = (char *)v4 + v21;
    v23 = &a2[v21];
    if (v139(&a2[v21], 1, v14))
    {
      sub_2415A0A74(0);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v23, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v14);
    }
    v25 = v135[15];
    v26 = (_QWORD *)((char *)v4 + v25);
    v27 = &a2[v25];
    v28 = *((_QWORD *)v27 + 1);
    *v26 = *(_QWORD *)v27;
    v26[1] = v28;
    v29 = v135[16];
    v30 = (_QWORD *)((char *)v4 + v29);
    v31 = &a2[v29];
    v32 = *((_QWORD *)v31 + 1);
    *v30 = *(_QWORD *)v31;
    v30[1] = v32;
    *((_BYTE *)v4 + v135[17]) = a2[v135[17]];
    *((_BYTE *)v4 + v135[18]) = a2[v135[18]];
    v33 = v135[19];
    v34 = (char *)v4 + v33;
    v35 = (uint64_t *)&a2[v33];
    v36 = *(_QWORD *)&a2[v33 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v36 >> 60 == 15)
    {
      *(_OWORD *)v34 = *(_OWORD *)v35;
    }
    else
    {
      v37 = *v35;
      sub_2415A0A90(*v35, v36);
      *(_QWORD *)v34 = v37;
      *((_QWORD *)v34 + 1) = v36;
    }
    v38 = v135[20];
    v39 = (char *)v4 + v38;
    v40 = &a2[v38];
    v41 = sub_2416B9A18();
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
    v44 = v135[21];
    v45 = *(void **)&a2[v44];
    *(_QWORD *)((char *)v4 + v44) = v45;
    v46 = v135[22];
    v47 = (char *)v4 + v46;
    v48 = &a2[v46];
    v49 = v45;
    v130 = v14;
    if (v139(v48, 1, v14))
    {
      sub_2415A0A74(0);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v47, v48, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v134 + 56))(v47, 0, 1, v14);
    }
    v51 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    v52 = v51[5];
    v53 = (char *)v4 + v52;
    v54 = &a2[v52];
    v55 = sub_2416B9C70();
    __dsta = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
    __dsta(v53, v54, v55);
    v56 = v51[6];
    v57 = (char *)v4 + v56;
    v58 = &a2[v56];
    v59 = sub_2416B9C10();
    v136 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
    v136(v57, v58, v59);
    v60 = v51[7];
    v61 = *(void **)&a2[v60];
    *(_QWORD *)((char *)v4 + v60) = v61;
    v62 = v51[8];
    v63 = *(void **)&a2[v62];
    *(_QWORD *)((char *)v4 + v62) = v63;
    v64 = v51[9];
    v65 = (_QWORD *)((char *)v4 + v64);
    v66 = &a2[v64];
    v67 = *((_QWORD *)v66 + 1);
    *v65 = *(_QWORD *)v66;
    v65[1] = v67;
    v68 = a3[5];
    v69 = (char *)v4 + v68;
    v70 = (uint64_t *)&a2[v68];
    v71 = *(_QWORD *)&a2[v68 + 8];
    v72 = v61;
    v73 = v63;
    swift_bridgeObjectRetain();
    if (v71 >> 60 == 15)
    {
      *(_OWORD *)v69 = *(_OWORD *)v70;
    }
    else
    {
      v74 = *v70;
      sub_2415A0A90(*v70, v71);
      *(_QWORD *)v69 = v74;
      *((_QWORD *)v69 + 1) = v71;
    }
    *((_QWORD *)v69 + 2) = v70[2];
    v75 = a3[6];
    v76 = a3[7];
    v77 = (_QWORD *)((char *)v4 + v75);
    v78 = &a2[v75];
    v79 = *((_QWORD *)v78 + 1);
    *v77 = *(_QWORD *)v78;
    v77[1] = v79;
    v77[2] = *((_QWORD *)v78 + 2);
    v80 = (char *)v4 + v76;
    v81 = &a2[v76];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v139(v81, 1, v130))
    {
      sub_2415A0A74(0);
      memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v80, v81, v130);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v134 + 56))(v80, 0, 1, v130);
    }
    sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    *(_QWORD *)&v80[*(int *)(v83 + 28)] = *(_QWORD *)&v81[*(int *)(v83 + 28)];
    v84 = a3[8];
    v85 = a3[9];
    v86 = (_QWORD *)((char *)v4 + v84);
    v87 = &a2[v84];
    v88 = *((_QWORD *)v87 + 1);
    *v86 = *(_QWORD *)v87;
    v86[1] = v88;
    v86[2] = *((_QWORD *)v87 + 2);
    v89 = (char *)v4 + v85;
    v90 = &a2[v85];
    *v89 = *v90;
    *((_QWORD *)v89 + 1) = *((_QWORD *)v90 + 1);
    v91 = a3[10];
    v92 = (_QWORD *)((char *)v4 + v91);
    v93 = &a2[v91];
    v94 = *(_QWORD *)&a2[v91 + 8];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v94)
    {
      *v92 = *(_QWORD *)v93;
      v92[1] = v94;
      v95 = *((_QWORD *)v93 + 3);
      v92[2] = *((_QWORD *)v93 + 2);
      v92[3] = v95;
      v96 = *((_QWORD *)v93 + 5);
      v92[4] = *((_QWORD *)v93 + 4);
      v92[5] = v96;
      v92[6] = *((_QWORD *)v93 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v97 = *((_OWORD *)v93 + 1);
      *(_OWORD *)v92 = *(_OWORD *)v93;
      *((_OWORD *)v92 + 1) = v97;
      *((_OWORD *)v92 + 2) = *((_OWORD *)v93 + 2);
      v92[6] = *((_QWORD *)v93 + 6);
    }
    v92[7] = *((_QWORD *)v93 + 7);
    v98 = a3[11];
    v99 = (char *)v4 + v98;
    v100 = &a2[v98];
    sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      __dsta(v99, v100, v55);
    }
    else
    {
      *(_QWORD *)v99 = *(_QWORD *)v100;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v101 = a3[12];
    v102 = (char *)v4 + v101;
    v103 = &a2[v101];
    sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v136(v102, v103, v59);
    }
    else
    {
      *(_QWORD *)v102 = *(_QWORD *)v103;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v104 = a3[13];
    v105 = (_QWORD *)((char *)v4 + v104);
    v106 = &a2[v104];
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v107 = sub_2416BA06C();
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v105, v106, v107);
    }
    else
    {
      *v105 = *(_QWORD *)v106;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v108 = a3[14];
    v109 = a3[15];
    v110 = (char *)v4 + v108;
    v111 = &a2[v108];
    v112 = *(_QWORD *)v111;
    LOBYTE(v111) = v111[8];
    *(_QWORD *)v110 = v112;
    v110[8] = (char)v111;
    v113 = (_QWORD *)((char *)v4 + v109);
    v114 = &a2[v109];
    v116 = *(void **)v114;
    v115 = *((_QWORD *)v114 + 1);
    *v113 = v116;
    v113[1] = v115;
    v117 = a3[16];
    v118 = a3[17];
    v119 = (_QWORD *)((char *)v4 + v117);
    v120 = &a2[v117];
    v121 = *((_QWORD *)v120 + 1);
    *v119 = *(_QWORD *)v120;
    v119[1] = v121;
    v122 = (char *)v4 + v118;
    v123 = &a2[v118];
    *v122 = *v123;
    *((_QWORD *)v122 + 1) = *((_QWORD *)v123 + 1);
    v122[16] = v123[16];
    v124 = a3[18];
    v125 = a3[19];
    v126 = *(void **)&a2[v124];
    *(_QWORD *)((char *)v4 + v124) = v126;
    *(_QWORD *)((char *)v4 + v125) = *(_QWORD *)&a2[v125];
    swift_retain();
    v127 = v116;
    swift_bridgeObjectRetain();
    swift_retain();
    v128 = v126;
  }
  swift_retain();
  return v4;
}

uint64_t sub_2415CB158(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = (int *)type metadata accessor for MedicalIDData();
  v5 = a1 + v4[13];
  v6 = sub_2416B9B50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + v4[14];
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)(a1 + v4[19]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_2415A0DAC(*v10, v11);
  v12 = a1 + v4[20];
  v13 = sub_2416B9A18();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);

  v15 = a1 + v4[22];
  if (!v8(v15, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  v16 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v17 = a1 + v16[5];
  v18 = sub_2416B9C70();
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(v17, v18);
  v20 = a1 + v16[6];
  v21 = sub_2416B9C10();
  v22 = v20;
  v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
  v23(v22, v21);

  swift_bridgeObjectRelease();
  v24 = (uint64_t *)(a1 + a2[5]);
  v25 = v24[1];
  if (v25 >> 60 != 15)
    sub_2415A0DAC(*v24, v25);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v26 = a1 + a2[7];
  if (!v8(v26, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v26, v6);
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + a2[10] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  v27 = a1 + a2[11];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v19(v27, v18);
  else
    swift_release();
  v28 = a1 + a2[12];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v23(v28, v21);
  else
    swift_release();
  v29 = a1 + a2[13];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v30 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  }
  else
  {
    swift_release();
  }
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

_QWORD *sub_2415CB5DC(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  id v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t *v67;
  unint64_t v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  _QWORD *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  _QWORD *v110;
  char *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  id v124;
  id v125;
  uint64_t v127;
  char *v128;
  void *v129;
  char *__dst;
  void (*__dsta)(char *, char *, uint64_t);
  uint64_t v132;
  int *v133;
  void (*v134)(char *, char *, uint64_t);
  void *v136;
  unsigned int (*v137)(char *, uint64_t, uint64_t);

  v5 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *((_QWORD *)a2 + 3);
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = v6;
  v7 = *((_QWORD *)a2 + 5);
  a1[4] = *((_QWORD *)a2 + 4);
  a1[5] = v7;
  v8 = *((_QWORD *)a2 + 7);
  a1[6] = *((_QWORD *)a2 + 6);
  a1[7] = v8;
  v9 = *((_QWORD *)a2 + 9);
  a1[8] = *((_QWORD *)a2 + 8);
  a1[9] = v9;
  v10 = *((_QWORD *)a2 + 11);
  a1[10] = *((_QWORD *)a2 + 10);
  a1[11] = v10;
  v129 = (void *)*((_QWORD *)a2 + 12);
  v136 = (void *)*((_QWORD *)a2 + 13);
  a1[12] = v129;
  a1[13] = v136;
  v133 = (int *)type metadata accessor for MedicalIDData();
  v11 = v133[13];
  __dst = (char *)a1 + v11;
  v128 = &a2[v11];
  v12 = sub_2416B9B50();
  v132 = *(_QWORD *)(v12 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = v129;
  v15 = v136;
  v137 = v13;
  if (v13(v128, 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(__dst, v128, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    v17 = v132;
  }
  else
  {
    v17 = v132;
    (*(void (**)(char *, char *, uint64_t))(v132 + 16))(__dst, v128, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(__dst, 0, 1, v12);
  }
  v18 = v133[14];
  v19 = (char *)a1 + v18;
  v20 = &a2[v18];
  if (v137(&a2[v18], 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v20, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v12);
  }
  v22 = v133[15];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = &a2[v22];
  v25 = *((_QWORD *)v24 + 1);
  *v23 = *(_QWORD *)v24;
  v23[1] = v25;
  v26 = v133[16];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = &a2[v26];
  v29 = *((_QWORD *)v28 + 1);
  *v27 = *(_QWORD *)v28;
  v27[1] = v29;
  *((_BYTE *)a1 + v133[17]) = a2[v133[17]];
  *((_BYTE *)a1 + v133[18]) = a2[v133[18]];
  v30 = v133[19];
  v31 = (char *)a1 + v30;
  v32 = (uint64_t *)&a2[v30];
  v33 = *(_QWORD *)&a2[v30 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)v31 = *(_OWORD *)v32;
  }
  else
  {
    v34 = *v32;
    sub_2415A0A90(*v32, v33);
    *(_QWORD *)v31 = v34;
    *((_QWORD *)v31 + 1) = v33;
  }
  v35 = v133[20];
  v36 = (char *)a1 + v35;
  v37 = &a2[v35];
  v38 = sub_2416B9A18();
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  v41 = v133[21];
  v42 = *(void **)&a2[v41];
  *(_QWORD *)((char *)a1 + v41) = v42;
  v43 = v133[22];
  v44 = (char *)a1 + v43;
  v45 = &a2[v43];
  v46 = v42;
  v127 = v12;
  if (v137(v45, 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v44, v45, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v44, 0, 1, v12);
  }
  v48 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v49 = v48[5];
  v50 = (char *)a1 + v49;
  v51 = &a2[v49];
  v52 = sub_2416B9C70();
  __dsta = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
  __dsta(v50, v51, v52);
  v53 = v48[6];
  v54 = (char *)a1 + v53;
  v55 = &a2[v53];
  v56 = sub_2416B9C10();
  v134 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
  v134(v54, v55, v56);
  v57 = v48[7];
  v58 = *(void **)&a2[v57];
  *(_QWORD *)((char *)a1 + v57) = v58;
  v59 = v48[8];
  v60 = *(void **)&a2[v59];
  *(_QWORD *)((char *)a1 + v59) = v60;
  v61 = v48[9];
  v62 = (_QWORD *)((char *)a1 + v61);
  v63 = &a2[v61];
  v64 = *((_QWORD *)v63 + 1);
  *v62 = *(_QWORD *)v63;
  v62[1] = v64;
  v65 = a3[5];
  v66 = (char *)a1 + v65;
  v67 = (uint64_t *)&a2[v65];
  v68 = *(_QWORD *)&a2[v65 + 8];
  v69 = v58;
  v70 = v60;
  swift_bridgeObjectRetain();
  if (v68 >> 60 == 15)
  {
    *(_OWORD *)v66 = *(_OWORD *)v67;
  }
  else
  {
    v71 = *v67;
    sub_2415A0A90(*v67, v68);
    *(_QWORD *)v66 = v71;
    *((_QWORD *)v66 + 1) = v68;
  }
  *((_QWORD *)v66 + 2) = v67[2];
  v72 = a3[6];
  v73 = a3[7];
  v74 = (_QWORD *)((char *)a1 + v72);
  v75 = &a2[v72];
  v76 = *((_QWORD *)v75 + 1);
  *v74 = *(_QWORD *)v75;
  v74[1] = v76;
  v74[2] = *((_QWORD *)v75 + 2);
  v77 = (char *)a1 + v73;
  v78 = &a2[v73];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v137(v78, 1, v127))
  {
    sub_2415A0A74(0);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v77, v78, v127);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v77, 0, 1, v127);
  }
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v77[*(int *)(v80 + 28)] = *(_QWORD *)&v78[*(int *)(v80 + 28)];
  v81 = a3[8];
  v82 = a3[9];
  v83 = (_QWORD *)((char *)a1 + v81);
  v84 = &a2[v81];
  v85 = *((_QWORD *)v84 + 1);
  *v83 = *(_QWORD *)v84;
  v83[1] = v85;
  v83[2] = *((_QWORD *)v84 + 2);
  v86 = (char *)a1 + v82;
  v87 = &a2[v82];
  *v86 = *v87;
  *((_QWORD *)v86 + 1) = *((_QWORD *)v87 + 1);
  v88 = a3[10];
  v89 = (_QWORD *)((char *)a1 + v88);
  v90 = &a2[v88];
  v91 = *(_QWORD *)&a2[v88 + 8];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v91)
  {
    *v89 = *(_QWORD *)v90;
    v89[1] = v91;
    v92 = *((_QWORD *)v90 + 3);
    v89[2] = *((_QWORD *)v90 + 2);
    v89[3] = v92;
    v93 = *((_QWORD *)v90 + 5);
    v89[4] = *((_QWORD *)v90 + 4);
    v89[5] = v93;
    v89[6] = *((_QWORD *)v90 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v94 = *((_OWORD *)v90 + 1);
    *(_OWORD *)v89 = *(_OWORD *)v90;
    *((_OWORD *)v89 + 1) = v94;
    *((_OWORD *)v89 + 2) = *((_OWORD *)v90 + 2);
    v89[6] = *((_QWORD *)v90 + 6);
  }
  v89[7] = *((_QWORD *)v90 + 7);
  v95 = a3[11];
  v96 = (char *)a1 + v95;
  v97 = &a2[v95];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    __dsta(v96, v97, v52);
  }
  else
  {
    *(_QWORD *)v96 = *(_QWORD *)v97;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v98 = a3[12];
  v99 = (char *)a1 + v98;
  v100 = &a2[v98];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v134(v99, v100, v56);
  }
  else
  {
    *(_QWORD *)v99 = *(_QWORD *)v100;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v101 = a3[13];
  v102 = (_QWORD *)((char *)a1 + v101);
  v103 = &a2[v101];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v104 = sub_2416BA06C();
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v102, v103, v104);
  }
  else
  {
    *v102 = *(_QWORD *)v103;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v105 = a3[14];
  v106 = a3[15];
  v107 = (char *)a1 + v105;
  v108 = &a2[v105];
  v109 = *(_QWORD *)v108;
  LOBYTE(v108) = v108[8];
  *(_QWORD *)v107 = v109;
  v107[8] = (char)v108;
  v110 = (_QWORD *)((char *)a1 + v106);
  v111 = &a2[v106];
  v113 = *(void **)v111;
  v112 = *((_QWORD *)v111 + 1);
  *v110 = v113;
  v110[1] = v112;
  v114 = a3[16];
  v115 = a3[17];
  v116 = (_QWORD *)((char *)a1 + v114);
  v117 = &a2[v114];
  v118 = *((_QWORD *)v117 + 1);
  *v116 = *(_QWORD *)v117;
  v116[1] = v118;
  v119 = (char *)a1 + v115;
  v120 = &a2[v115];
  *v119 = *v120;
  *((_QWORD *)v119 + 1) = *((_QWORD *)v120 + 1);
  v119[16] = v120[16];
  v121 = a3[18];
  v122 = a3[19];
  v123 = *(void **)&a2[v121];
  *(_QWORD *)((char *)a1 + v121) = v123;
  *(_QWORD *)((char *)a1 + v122) = *(_QWORD *)&a2[v122];
  swift_retain();
  v124 = v113;
  swift_bridgeObjectRetain();
  swift_retain();
  v125 = v123;
  swift_retain();
  return a1;
}

char *sub_2415CBE28(char *a1, char *a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  int v48;
  int v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  id v74;
  uint64_t v75;
  void *v76;
  void *v77;
  id v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  int *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t (*v121)(uint64_t);
  uint64_t (*v122)(uint64_t, uint64_t);
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t (*v126)(uint64_t);
  uint64_t (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t (*v131)(uint64_t);
  uint64_t (*v132)(uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  void *v141;
  void *v142;
  id v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  void *v151;
  void *v152;
  id v153;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int *v159;
  uint64_t (*v160)(char *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
  v6 = (void *)*((_QWORD *)a1 + 12);
  v7 = (void *)*((_QWORD *)a2 + 12);
  *((_QWORD *)a1 + 12) = v7;
  v8 = v7;

  v9 = (void *)*((_QWORD *)a1 + 13);
  v10 = (void *)*((_QWORD *)a2 + 13);
  *((_QWORD *)a1 + 13) = v10;
  v11 = v10;

  v12 = (int *)type metadata accessor for MedicalIDData();
  v13 = v12[13];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = sub_2416B9B50();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v160 = v18;
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
LABEL_6:
    sub_2415A0A74(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 24))(v14, v15, v16);
LABEL_7:
  v22 = v12[14];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = v18(&a1[v22], 1, v16);
  v26 = v18(v24, 1, v16);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v23, v24, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v23, 0, 1, v16);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v16);
LABEL_12:
    sub_2415A0A74(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 24))(v23, v24, v16);
LABEL_13:
  v28 = v12[15];
  v29 = &a1[v28];
  v30 = &a2[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = v12[16];
  v32 = &a1[v31];
  v33 = &a2[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v12[17]] = a2[v12[17]];
  a1[v12[18]] = a2[v12[18]];
  v34 = v12[19];
  v35 = (uint64_t *)&a1[v34];
  v36 = (uint64_t *)&a2[v34];
  v37 = *(_QWORD *)&a2[v34 + 8];
  v158 = v17;
  v159 = a3;
  if (*(_QWORD *)&a1[v34 + 8] >> 60 == 15)
  {
    if (v37 >> 60 != 15)
    {
      v38 = *v36;
      sub_2415A0A90(*v36, v37);
      *v35 = v38;
      v35[1] = v37;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v37 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v35);
LABEL_18:
    *(_OWORD *)v35 = *(_OWORD *)v36;
    goto LABEL_20;
  }
  v39 = *v36;
  sub_2415A0A90(*v36, v37);
  v40 = *v35;
  v41 = v35[1];
  *v35 = v39;
  v35[1] = v37;
  sub_2415A0DAC(v40, v41);
LABEL_20:
  v42 = v12[20];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v45 = sub_2416B9A18();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  v48 = v47(v43, 1, v45);
  v49 = v47(v44, 1, v45);
  if (v48)
  {
    v50 = v159;
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v50 = v159;
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v43, v45);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 24))(v43, v44, v45);
LABEL_26:
  v52 = v12[21];
  v53 = *(void **)&a1[v52];
  v54 = *(void **)&a2[v52];
  *(_QWORD *)&a1[v52] = v54;
  v55 = v54;

  v56 = v12[22];
  v57 = &a1[v56];
  v58 = &a2[v56];
  v59 = v160(&a1[v56], 1, v16);
  v60 = v160(v58, 1, v16);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v57, v58, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v57, 0, 1, v16);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v60)
  {
    (*(void (**)(char *, uint64_t))(v158 + 8))(v57, v16);
LABEL_31:
    sub_2415A0A74(0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v158 + 24))(v57, v58, v16);
LABEL_32:
  v62 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v63 = v62[5];
  v64 = &a1[v63];
  v65 = &a2[v63];
  v66 = sub_2416B9C70();
  v155 = *(_QWORD *)(v66 - 8);
  (*(void (**)(char *, char *, uint64_t))(v155 + 24))(v64, v65, v66);
  v67 = v62[6];
  v68 = &a1[v67];
  v69 = &a2[v67];
  v70 = sub_2416B9C10();
  v156 = *(_QWORD *)(v70 - 8);
  v157 = v70;
  (*(void (**)(char *, char *))(v156 + 24))(v68, v69);
  v71 = v62[7];
  v72 = *(void **)&a1[v71];
  v73 = *(void **)&a2[v71];
  *(_QWORD *)&a1[v71] = v73;
  v74 = v73;

  v75 = v62[8];
  v76 = *(void **)&a2[v75];
  v77 = *(void **)&a1[v75];
  *(_QWORD *)&a1[v75] = v76;
  v78 = v76;

  v79 = v62[9];
  v80 = &a1[v79];
  v81 = &a2[v79];
  *(_QWORD *)v80 = *(_QWORD *)v81;
  *((_QWORD *)v80 + 1) = *((_QWORD *)v81 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v82 = v50[5];
  v83 = (uint64_t *)&a1[v82];
  v84 = (uint64_t *)&a2[v82];
  v85 = *(_QWORD *)&a2[v82 + 8];
  if (*(_QWORD *)&a1[v82 + 8] >> 60 == 15)
  {
    if (v85 >> 60 != 15)
    {
      v86 = *v84;
      sub_2415A0A90(*v84, v85);
      *v83 = v86;
      v83[1] = v85;
      goto LABEL_39;
    }
    goto LABEL_37;
  }
  if (v85 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v83);
LABEL_37:
    *(_OWORD *)v83 = *(_OWORD *)v84;
    goto LABEL_39;
  }
  v87 = *v84;
  sub_2415A0A90(*v84, v85);
  v88 = *v83;
  v89 = v83[1];
  *v83 = v87;
  v83[1] = v85;
  sub_2415A0DAC(v88, v89);
LABEL_39:
  v83[2] = v84[2];
  swift_retain();
  swift_release();
  v90 = v50[6];
  v91 = &a1[v90];
  v92 = &a2[v90];
  *(_QWORD *)v91 = *(_QWORD *)&a2[v90];
  *((_QWORD *)v91 + 1) = *(_QWORD *)&a2[v90 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v91 + 2) = *((_QWORD *)v92 + 2);
  swift_retain();
  swift_release();
  v93 = v50[7];
  v94 = &a1[v93];
  v95 = &a2[v93];
  v96 = v160(&a1[v93], 1, v16);
  v97 = v160(v95, 1, v16);
  if (v96)
  {
    if (!v97)
    {
      (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v94, v95, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v94, 0, 1, v16);
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (v97)
  {
    (*(void (**)(char *, uint64_t))(v158 + 8))(v94, v16);
LABEL_44:
    sub_2415A0A74(0);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    goto LABEL_45;
  }
  (*(void (**)(char *, char *, uint64_t))(v158 + 24))(v94, v95, v16);
LABEL_45:
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v94[*(int *)(v99 + 28)] = *(_QWORD *)&v95[*(int *)(v99 + 28)];
  swift_retain();
  swift_release();
  v100 = v50[8];
  v101 = &a1[v100];
  v102 = &a2[v100];
  *(_QWORD *)v101 = *(_QWORD *)&a2[v100];
  *((_QWORD *)v101 + 1) = *(_QWORD *)&a2[v100 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v101 + 2) = *((_QWORD *)v102 + 2);
  swift_retain();
  swift_release();
  v103 = v50[9];
  v104 = &a1[v103];
  v105 = &a2[v103];
  *v104 = *v105;
  *((_QWORD *)v104 + 1) = *((_QWORD *)v105 + 1);
  swift_retain();
  swift_release();
  v106 = v50[10];
  v107 = &a1[v106];
  v108 = &a2[v106];
  v109 = *(_QWORD *)&a1[v106 + 8];
  v110 = *(_QWORD *)&a2[v106 + 8];
  if (v109)
  {
    if (v110)
    {
      *(_QWORD *)v107 = *(_QWORD *)v108;
      *((_QWORD *)v107 + 1) = *((_QWORD *)v108 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v107 + 2) = *((_QWORD *)v108 + 2);
      *((_QWORD *)v107 + 3) = *((_QWORD *)v108 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v107 + 4) = *((_QWORD *)v108 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v107 + 5) = *((_QWORD *)v108 + 5);
      *((_QWORD *)v107 + 6) = *((_QWORD *)v108 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2415CCAC8((uint64_t)v107);
      v112 = *((_OWORD *)v108 + 1);
      v111 = *((_OWORD *)v108 + 2);
      v113 = *(_OWORD *)v108;
      *((_QWORD *)v107 + 6) = *((_QWORD *)v108 + 6);
      *((_OWORD *)v107 + 1) = v112;
      *((_OWORD *)v107 + 2) = v111;
      *(_OWORD *)v107 = v113;
    }
  }
  else if (v110)
  {
    *(_QWORD *)v107 = *(_QWORD *)v108;
    *((_QWORD *)v107 + 1) = *((_QWORD *)v108 + 1);
    *((_QWORD *)v107 + 2) = *((_QWORD *)v108 + 2);
    *((_QWORD *)v107 + 3) = *((_QWORD *)v108 + 3);
    *((_QWORD *)v107 + 4) = *((_QWORD *)v108 + 4);
    *((_QWORD *)v107 + 5) = *((_QWORD *)v108 + 5);
    *((_QWORD *)v107 + 6) = *((_QWORD *)v108 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v114 = *(_OWORD *)v108;
    v115 = *((_OWORD *)v108 + 1);
    v116 = *((_OWORD *)v108 + 2);
    *((_QWORD *)v107 + 6) = *((_QWORD *)v108 + 6);
    *((_OWORD *)v107 + 1) = v115;
    *((_OWORD *)v107 + 2) = v116;
    *(_OWORD *)v107 = v114;
  }
  *((_QWORD *)v107 + 7) = *((_QWORD *)v108 + 7);
  swift_retain();
  swift_release();
  v117 = v159;
  if (a1 != a2)
  {
    v118 = v159[11];
    v119 = &a1[v118];
    v120 = &a2[v118];
    v121 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0];
    v122 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&a1[v118], &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, &qword_25713A1C0, v121, v122);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v119, v120, v66);
    }
    else
    {
      *(_QWORD *)v119 = *(_QWORD *)v120;
      swift_retain();
    }
    v117 = v159;
    swift_storeEnumTagMultiPayload();
    v123 = v159[12];
    v124 = &a1[v123];
    v125 = &a2[v123];
    v126 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    v127 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&a1[v123], &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, &qword_25713A1C8, v126, v127);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v124, v125, v157);
    }
    else
    {
      *(_QWORD *)v124 = *(_QWORD *)v125;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v128 = v159[13];
    v129 = &a1[v128];
    v130 = &a2[v128];
    v131 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038];
    v132 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&a1[v128], (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, v131, v132);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v133 = sub_2416BA06C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 16))(v129, v130, v133);
    }
    else
    {
      *(_QWORD *)v129 = *(_QWORD *)v130;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v134 = v117[14];
  v135 = &a1[v134];
  v136 = &a2[v134];
  v137 = *(_QWORD *)v136;
  LOBYTE(v136) = v136[8];
  *(_QWORD *)v135 = v137;
  v135[8] = (char)v136;
  swift_retain();
  swift_release();
  v138 = v117[15];
  v139 = &a1[v138];
  v140 = &a2[v138];
  v141 = *(void **)&a1[v138];
  v142 = *(void **)&a2[v138];
  *(_QWORD *)v139 = v142;
  v143 = v142;

  *((_QWORD *)v139 + 1) = *((_QWORD *)v140 + 1);
  v144 = v117[16];
  v145 = &a1[v144];
  v146 = &a2[v144];
  *(_QWORD *)v145 = *(_QWORD *)v146;
  *((_QWORD *)v145 + 1) = *((_QWORD *)v146 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v147 = v117[17];
  v148 = &a1[v147];
  v149 = &a2[v147];
  *v148 = a2[v147];
  *((_QWORD *)v148 + 1) = *(_QWORD *)&a2[v147 + 8];
  swift_retain();
  swift_release();
  v148[16] = v149[16];
  v150 = v117[18];
  v151 = *(void **)&a2[v150];
  v152 = *(void **)&a1[v150];
  *(_QWORD *)&a1[v150] = v151;
  v153 = v151;

  *(_QWORD *)&a1[v117[19]] = *(_QWORD *)&a2[v117[19]];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_2415CCAC8(uint64_t a1)
{
  destroy for BasicAlertModel();
  return a1;
}

uint64_t sub_2415CCAFC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v5;

  sub_24159D6B0(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_2415CCB38(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  _OWORD *v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v82)(uint64_t, uint64_t, uint64_t);
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v6 = (int *)type metadata accessor for MedicalIDData();
  v7 = v6[13];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_2416B9B50();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    sub_2415A0A74(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = v6[14];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v84 = v11;
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    sub_2415A0A74(0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  *(_OWORD *)(a1 + v6[15]) = *(_OWORD *)(a2 + v6[15]);
  *(_OWORD *)(a1 + v6[16]) = *(_OWORD *)(a2 + v6[16]);
  *(_BYTE *)(a1 + v6[17]) = *(_BYTE *)(a2 + v6[17]);
  *(_BYTE *)(a1 + v6[18]) = *(_BYTE *)(a2 + v6[18]);
  *(_OWORD *)(a1 + v6[19]) = *(_OWORD *)(a2 + v6[19]);
  v18 = v6[20];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = sub_2416B9A18();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(_QWORD *)(a1 + v6[21]) = *(_QWORD *)(a2 + v6[21]);
  v24 = v6[22];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  if (v12((const void *)(a2 + v24), 1, v10))
  {
    sub_2415A0A74(0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v84 + 32))(v25, v26, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v25, 0, 1, v10);
  }
  v28 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v29 = v28[5];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = sub_2416B9C70();
  v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
  v82(v30, v31, v32);
  v33 = v28[6];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = sub_2416B9C10();
  v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32);
  v83(v34, v35, v36);
  *(_QWORD *)(a1 + v28[7]) = *(_QWORD *)(a2 + v28[7]);
  *(_QWORD *)(a1 + v28[8]) = *(_QWORD *)(a2 + v28[8]);
  *(_OWORD *)(a1 + v28[9]) = *(_OWORD *)(a2 + v28[9]);
  v37 = a3[5];
  v38 = a3[6];
  v39 = a1 + v37;
  v40 = a2 + v37;
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *(_QWORD *)(v39 + 16) = *(_QWORD *)(v40 + 16);
  v41 = a1 + v38;
  v42 = a2 + v38;
  *(_OWORD *)v41 = *(_OWORD *)v42;
  *(_QWORD *)(v41 + 16) = *(_QWORD *)(v42 + 16);
  v43 = a3[7];
  v44 = (char *)(a1 + v43);
  v45 = (char *)(a2 + v43);
  if (v12((const void *)(a2 + v43), 1, v10))
  {
    sub_2415A0A74(0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v44, v45, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v44, 0, 1, v10);
  }
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v44[*(int *)(v47 + 28)] = *(_QWORD *)&v45[*(int *)(v47 + 28)];
  v48 = a3[8];
  v49 = a3[9];
  v50 = a1 + v48;
  v51 = a2 + v48;
  *(_QWORD *)(v50 + 16) = *(_QWORD *)(v51 + 16);
  *(_OWORD *)v50 = *(_OWORD *)v51;
  *(_OWORD *)(a1 + v49) = *(_OWORD *)(a2 + v49);
  v52 = a3[10];
  v53 = a3[11];
  v54 = (_OWORD *)(a1 + v52);
  v55 = (_OWORD *)(a2 + v52);
  v56 = v55[3];
  v54[2] = v55[2];
  v54[3] = v56;
  v57 = v55[1];
  *v54 = *v55;
  v54[1] = v57;
  v58 = (void *)(a1 + v53);
  v59 = (const void *)(a2 + v53);
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v61 = v60;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v82((uint64_t)v58, (uint64_t)v59, v32);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  v62 = a3[12];
  v63 = (void *)(a1 + v62);
  v64 = (const void *)(a2 + v62);
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v66 = v65;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v83((uint64_t)v63, (uint64_t)v64, v36);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  v67 = a3[13];
  v68 = (void *)(a1 + v67);
  v69 = (const void *)(a2 + v67);
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v71 = v70;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v72 = sub_2416BA06C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v68, v69, v72);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  v73 = a3[14];
  v74 = a3[15];
  v75 = a1 + v73;
  v76 = a2 + v73;
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *(_BYTE *)(v75 + 8) = *(_BYTE *)(v76 + 8);
  *(_OWORD *)(a1 + v74) = *(_OWORD *)(a2 + v74);
  v77 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  v78 = a1 + v77;
  v79 = a2 + v77;
  *(_OWORD *)v78 = *(_OWORD *)v79;
  *(_BYTE *)(v78 + 16) = *(_BYTE *)(v79 + 16);
  v80 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  *(_QWORD *)(a1 + v80) = *(_QWORD *)(a2 + v80);
  return a1;
}

char *sub_2415CD1A0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  int v52;
  int v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int v61;
  int v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  char *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t (*v116)(uint64_t);
  uint64_t (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t (*v123)(uint64_t);
  uint64_t (*v124)(uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t (*v130)(uint64_t);
  uint64_t (*v131)(uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  void *v142;
  uint64_t v143;
  char *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  void *v152;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int *v157;
  uint64_t (*v158)(char *, uint64_t, uint64_t);

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRelease();
  v7 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 4) = v7;
  swift_bridgeObjectRelease();
  v8 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a1 + 6) = v8;
  swift_bridgeObjectRelease();
  v9 = *((_QWORD *)a2 + 8);
  *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a1 + 8) = v9;
  swift_bridgeObjectRelease();
  v10 = *((_QWORD *)a2 + 10);
  *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a1 + 10) = v10;
  swift_bridgeObjectRelease();
  v11 = (void *)*((_QWORD *)a1 + 12);
  v12 = *((_QWORD *)a2 + 12);
  *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a1 + 12) = v12;

  v13 = (void *)*((_QWORD *)a1 + 13);
  *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);

  v14 = (int *)type metadata accessor for MedicalIDData();
  v15 = v14[13];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = sub_2416B9B50();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v158 = v20;
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    sub_2415A0A74(0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v16, v17, v18);
LABEL_7:
  v24 = v14[14];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = v20(&a1[v24], 1, v18);
  v28 = v20(v26, 1, v18);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v25, v26, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    sub_2415A0A74(0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v25, v26, v18);
LABEL_13:
  v30 = v14[15];
  v31 = &a1[v30];
  v32 = (uint64_t *)&a2[v30];
  v34 = *v32;
  v33 = v32[1];
  *(_QWORD *)v31 = v34;
  *((_QWORD *)v31 + 1) = v33;
  swift_bridgeObjectRelease();
  v35 = v14[16];
  v36 = &a1[v35];
  v37 = (uint64_t *)&a2[v35];
  v39 = *v37;
  v38 = v37[1];
  *(_QWORD *)v36 = v39;
  *((_QWORD *)v36 + 1) = v38;
  swift_bridgeObjectRelease();
  a1[v14[17]] = a2[v14[17]];
  a1[v14[18]] = a2[v14[18]];
  v40 = v14[19];
  v41 = (uint64_t)&a1[v40];
  v42 = &a2[v40];
  v43 = *(_QWORD *)&a1[v40 + 8];
  v156 = v19;
  v157 = a3;
  if (v43 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v41 = *(_OWORD *)v42;
    goto LABEL_18;
  }
  v44 = *((_QWORD *)v42 + 1);
  if (v44 >> 60 == 15)
  {
    sub_2415A1B38(v41);
    goto LABEL_16;
  }
  v45 = *(_QWORD *)v41;
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *(_QWORD *)(v41 + 8) = v44;
  sub_2415A0DAC(v45, v43);
LABEL_18:
  v46 = v14[20];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v49 = sub_2416B9A18();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  v52 = v51(v47, 1, v49);
  v53 = v51(v48, 1, v49);
  if (v52)
  {
    v54 = v157;
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  v54 = v157;
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v49);
LABEL_23:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v50 + 40))(v47, v48, v49);
LABEL_24:
  v56 = v14[21];
  v57 = *(void **)&a1[v56];
  *(_QWORD *)&a1[v56] = *(_QWORD *)&a2[v56];

  v58 = v14[22];
  v59 = &a1[v58];
  v60 = &a2[v58];
  v61 = v158(&a1[v58], 1, v18);
  v62 = v158(v60, 1, v18);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v59, v60, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v156 + 56))(v59, 0, 1, v18);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v156 + 8))(v59, v18);
LABEL_29:
    sub_2415A0A74(0);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v156 + 40))(v59, v60, v18);
LABEL_30:
  v64 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v65 = v64[5];
  v66 = &a1[v65];
  v67 = &a2[v65];
  v68 = sub_2416B9C70();
  v154 = *(_QWORD *)(v68 - 8);
  (*(void (**)(char *, char *, uint64_t))(v154 + 40))(v66, v67, v68);
  v69 = v64[6];
  v70 = &a1[v69];
  v71 = &a2[v69];
  v72 = sub_2416B9C10();
  v155 = *(_QWORD *)(v72 - 8);
  (*(void (**)(char *, char *, uint64_t))(v155 + 40))(v70, v71, v72);
  v73 = v64[7];
  v74 = *(void **)&a1[v73];
  *(_QWORD *)&a1[v73] = *(_QWORD *)&a2[v73];

  v75 = v64[8];
  v76 = *(void **)&a1[v75];
  *(_QWORD *)&a1[v75] = *(_QWORD *)&a2[v75];

  v77 = v64[9];
  v78 = &a1[v77];
  v79 = (uint64_t *)&a2[v77];
  v81 = *v79;
  v80 = v79[1];
  *(_QWORD *)v78 = v81;
  *((_QWORD *)v78 + 1) = v80;
  swift_bridgeObjectRelease();
  v82 = v54[5];
  v83 = (uint64_t)&a1[v82];
  v84 = &a2[v82];
  v85 = *(_QWORD *)&a1[v82 + 8];
  if (v85 >> 60 == 15)
  {
LABEL_33:
    *(_OWORD *)v83 = *(_OWORD *)v84;
    goto LABEL_35;
  }
  v86 = *((_QWORD *)v84 + 1);
  if (v86 >> 60 == 15)
  {
    sub_2415A1B38(v83);
    goto LABEL_33;
  }
  v87 = *(_QWORD *)v83;
  *(_QWORD *)v83 = *(_QWORD *)v84;
  *(_QWORD *)(v83 + 8) = v86;
  sub_2415A0DAC(v87, v85);
LABEL_35:
  *(_QWORD *)(v83 + 16) = *((_QWORD *)v84 + 2);
  swift_release();
  v88 = v54[6];
  v89 = &a1[v88];
  v90 = &a2[v88];
  v91 = *(_QWORD *)&a2[v88 + 8];
  *(_QWORD *)v89 = *(_QWORD *)&a2[v88];
  *((_QWORD *)v89 + 1) = v91;
  swift_bridgeObjectRelease();
  *((_QWORD *)v89 + 2) = *((_QWORD *)v90 + 2);
  swift_release();
  v92 = v54[7];
  v93 = &a1[v92];
  v94 = &a2[v92];
  v95 = v158(&a1[v92], 1, v18);
  v96 = v158(v94, 1, v18);
  if (v95)
  {
    if (!v96)
    {
      (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v93, v94, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v156 + 56))(v93, 0, 1, v18);
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  if (v96)
  {
    (*(void (**)(char *, uint64_t))(v156 + 8))(v93, v18);
LABEL_40:
    sub_2415A0A74(0);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    goto LABEL_41;
  }
  (*(void (**)(char *, char *, uint64_t))(v156 + 40))(v93, v94, v18);
LABEL_41:
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v93[*(int *)(v98 + 28)] = *(_QWORD *)&v94[*(int *)(v98 + 28)];
  swift_release();
  v99 = v54[8];
  v100 = &a1[v99];
  v101 = &a2[v99];
  v102 = *(_QWORD *)&a2[v99 + 8];
  *(_QWORD *)v100 = *(_QWORD *)&a2[v99];
  *((_QWORD *)v100 + 1) = v102;
  swift_bridgeObjectRelease();
  *((_QWORD *)v100 + 2) = *((_QWORD *)v101 + 2);
  swift_release();
  v103 = v54[9];
  v104 = &a1[v103];
  v105 = &a2[v103];
  *v104 = *v105;
  *((_QWORD *)v104 + 1) = *((_QWORD *)v105 + 1);
  swift_release();
  v106 = v54[10];
  v107 = &a1[v106];
  v108 = &a2[v106];
  if (*(_QWORD *)&a1[v106 + 8])
  {
    v109 = *((_QWORD *)v108 + 1);
    if (v109)
    {
      *(_QWORD *)v107 = *(_QWORD *)v108;
      *((_QWORD *)v107 + 1) = v109;
      swift_bridgeObjectRelease();
      v110 = *((_QWORD *)v108 + 3);
      *((_QWORD *)v107 + 2) = *((_QWORD *)v108 + 2);
      *((_QWORD *)v107 + 3) = v110;
      swift_bridgeObjectRelease();
      *((_QWORD *)v107 + 4) = *((_QWORD *)v108 + 4);
      swift_bridgeObjectRelease();
      v111 = *((_QWORD *)v108 + 6);
      *((_QWORD *)v107 + 5) = *((_QWORD *)v108 + 5);
      *((_QWORD *)v107 + 6) = v111;
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    sub_2415CCAC8((uint64_t)v107);
  }
  v112 = *((_OWORD *)v108 + 1);
  *(_OWORD *)v107 = *(_OWORD *)v108;
  *((_OWORD *)v107 + 1) = v112;
  *((_OWORD *)v107 + 2) = *((_OWORD *)v108 + 2);
  *((_QWORD *)v107 + 6) = *((_QWORD *)v108 + 6);
LABEL_46:
  *((_QWORD *)v107 + 7) = *((_QWORD *)v108 + 7);
  swift_release();
  if (a1 != a2)
  {
    v113 = v54[11];
    v114 = &a1[v113];
    v115 = &a2[v113];
    v116 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0];
    v117 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&a1[v113], &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, &qword_25713A1C0, v116, v117);
    v119 = v118;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v154 + 32))(v114, v115, v68);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
    }
    v54 = v157;
    v120 = v157[12];
    v121 = &a1[v120];
    v122 = &a2[v120];
    v123 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    v124 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&a1[v120], &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, &qword_25713A1C8, v123, v124);
    v126 = v125;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v155 + 32))(v121, v122, v72);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
    }
    v127 = v157[13];
    v128 = &a1[v127];
    v129 = &a2[v127];
    v130 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038];
    v131 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&a1[v127], (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, v130, v131);
    v133 = v132;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v134 = sub_2416BA06C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 32))(v128, v129, v134);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
    }
  }
  v135 = v54[14];
  v136 = &a1[v135];
  v137 = &a2[v135];
  v138 = *(_QWORD *)v137;
  LOBYTE(v137) = v137[8];
  *(_QWORD *)v136 = v138;
  v136[8] = (char)v137;
  swift_release();
  v139 = v54[15];
  v140 = &a1[v139];
  v141 = &a2[v139];
  v142 = *(void **)&a1[v139];
  *(_QWORD *)v140 = *(_QWORD *)v141;

  *((_QWORD *)v140 + 1) = *((_QWORD *)v141 + 1);
  v143 = v54[16];
  v144 = &a1[v143];
  v145 = (uint64_t *)&a2[v143];
  v147 = *v145;
  v146 = v145[1];
  *(_QWORD *)v144 = v147;
  *((_QWORD *)v144 + 1) = v146;
  swift_bridgeObjectRelease();
  v148 = v54[17];
  v149 = &a1[v148];
  v150 = &a2[v148];
  *v149 = a2[v148];
  *((_QWORD *)v149 + 1) = *(_QWORD *)&a2[v148 + 8];
  swift_release();
  v149[16] = v150[16];
  v151 = v54[18];
  v152 = *(void **)&a1[v151];
  *(_QWORD *)&a1[v151] = *(_QWORD *)&a2[v151];

  *(_QWORD *)&a1[v54[19]] = *(_QWORD *)&a2[v54[19]];
  swift_release();
  return a1;
}

uint64_t sub_2415CDC20()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415CDC2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;

  v6 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[7];
LABEL_11:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  sub_24159D6B0(0, &qword_25713A1D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], MEMORY[0x24BDEB580]);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[11];
    goto LABEL_11;
  }
  sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[12];
    goto LABEL_11;
  }
  sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
  v12 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v16;
    v13 = a3[13];
    goto LABEL_11;
  }
  v18 = *(_QWORD *)(a1 + a3[16] + 8);
  if (v18 >= 0xFFFFFFFF)
    LODWORD(v18) = -1;
  return (v18 + 1);
}

uint64_t sub_2415CDDA4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_2415CDDB0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
LABEL_12:
    v11(v12, a2, a2, v10);
    return;
  }
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[7];
LABEL_11:
    v12 = a1 + v15;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_12;
  }
  sub_24159D6B0(0, &qword_25713A1D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], MEMORY[0x24BDEB580]);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[11];
    goto LABEL_11;
  }
  sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
  v14 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v17;
    v15 = a4[12];
    goto LABEL_11;
  }
  sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
  v14 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v18;
    v15 = a4[13];
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + a4[16] + 8) = (a2 - 1);
}

void sub_2415CDF24()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for MedicalIDPersonalInfoViewModel();
  if (v0 <= 0x3F)
  {
    sub_24159D6B0(319, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    if (v1 <= 0x3F)
    {
      sub_24159D6B0(319, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
      if (v2 <= 0x3F)
      {
        sub_24159D6B0(319, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
        if (v3 <= 0x3F)
        {
          sub_24159D6B0(319, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
          if (v4 <= 0x3F)
            swift_initStructMetadata();
        }
      }
    }
  }
}

unint64_t sub_2415CE0BC()
{
  unint64_t result;

  result = qword_25713AA00;
  if (!qword_25713AA00)
  {
    result = MEMORY[0x2426994BC](&unk_2416BD9E8, &type metadata for MedicalIDEditPersonalInfoModalView.TextFieldFocus);
    atomic_store(result, (unint64_t *)&qword_25713AA00);
  }
  return result;
}

uint64_t sub_2415CE100()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2415CE110()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AA08)
  {
    sub_24159D6B0(255, &qword_25713AA10, (uint64_t (*)(uint64_t))sub_2415CE1A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2415A3F2C(&qword_25713AA90, &qword_25713AA10, (uint64_t (*)(uint64_t))sub_2415CE1A8);
    v0 = sub_2416BA924();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AA08);
  }
}

void sub_2415CE1A8()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713AA18)
  {
    sub_2415CE244();
    sub_2415CE350();
    sub_24159D6B0(255, &qword_25713AA80, (uint64_t (*)(uint64_t))sub_2415CE5B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713AA18);
  }
}

void sub_2415CE244()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AA20)
  {
    sub_2415CE5C4(255, &qword_25713AA28, (void (*)(uint64_t))sub_2415CE2D8);
    sub_24159EF1C(255, &qword_25713AA38, MEMORY[0x24BDF0808], sub_2415CE334, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEFB28]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AA20);
  }
}

void sub_2415CE2D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AA30)
  {
    sub_2416BA768();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AA30);
  }
}

uint64_t sub_2415CE334()
{
  return sub_24159CE88(&qword_25713AA40, MEMORY[0x24BDF0808], MEMORY[0x24BDF0800]);
}

void sub_2415CE350()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AA48)
  {
    sub_24159D6B0(255, &qword_25713AA50, (uint64_t (*)(uint64_t))sub_2415CE3C8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BAEC4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AA48);
  }
}

void sub_2415CE3C8()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713AA58)
  {
    sub_2415CE44C(255);
    type metadata accessor for EditDateOfBirthCellView();
    type metadata accessor for EditPrimaryLanguageCellView();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713AA58);
  }
}

void sub_2415CE44C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_25713AA60)
  {
    sub_24159D7F0(255, &qword_25713AA68, (uint64_t)&type metadata for MedicalIDEditPersonalInfoModalView.TextFieldFocus, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v5[0] = &type metadata for EditNameCellView;
    v5[1] = v2;
    v5[2] = sub_2415CE4F4();
    v5[3] = sub_2415CE538();
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF3748], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713AA60);
  }
}

unint64_t sub_2415CE4F4()
{
  unint64_t result;

  result = qword_25713AA70;
  if (!qword_25713AA70)
  {
    result = MEMORY[0x2426994BC](&unk_2416C25B4, &type metadata for EditNameCellView);
    atomic_store(result, (unint64_t *)&qword_25713AA70);
  }
  return result;
}

unint64_t sub_2415CE538()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_25713AA78;
  if (!qword_25713AA78)
  {
    sub_24159D7F0(255, &qword_25713AA68, (uint64_t)&type metadata for MedicalIDEditPersonalInfoModalView.TextFieldFocus, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v2 = v1;
    v3 = sub_2415CA7AC();
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE4AB0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713AA78);
  }
  return result;
}

void sub_2415CE5B0(uint64_t a1)
{
  sub_2415CE5C4(a1, &qword_25713AA88, (void (*)(uint64_t))type metadata accessor for EditOrganDonationCellView);
}

void sub_2415CE5C4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_2416BAEC4();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_2415CE61C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AAA0)
  {
    sub_2415CE69C();
    sub_2415A40A4(&qword_25713AAB0, (uint64_t (*)(uint64_t))sub_2415CE69C, sub_2415CE718, (uint64_t (*)(void))sub_2415CE734);
    v0 = sub_2416BA1EC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AAA0);
  }
}

void sub_2415CE69C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AAA8)
  {
    sub_2415CE110();
    sub_24159D6B0(255, &qword_257139748, (uint64_t (*)(uint64_t))sub_24159D694, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AAA8);
  }
}

uint64_t sub_2415CE718()
{
  return sub_24159CE88(&qword_25713AAB8, (uint64_t (*)(uint64_t))sub_2415CE110, MEMORY[0x24BDF1988]);
}

unint64_t sub_2415CE734()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257139770;
  if (!qword_257139770)
  {
    sub_24159D6B0(255, &qword_257139748, (uint64_t (*)(uint64_t))sub_24159D694, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF1028], v1);
    atomic_store(result, (unint64_t *)&qword_257139770);
  }
  return result;
}

uint64_t sub_2415CE794()
{
  return sub_24159CE88(&qword_25713AAC0, (uint64_t (*)(uint64_t))sub_2415CE61C, MEMORY[0x24BDEDA10]);
}

uint64_t sub_2415CE7B4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  type metadata accessor for MedicalIDEditPersonalInfoModalView();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2415C2834;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_2415C2834;
  return sub_2415C8430();
}

void sub_2415CE834(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_24159D7F0(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v5 = sub_2416BAD38();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_2415CE894@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2415C8BCC(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2415CE89C()
{
  return objectdestroy_10Tm((uint64_t (*)(_QWORD))sub_2415CE110);
}

void sub_2415CE8A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  sub_2415CE110();
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  sub_2415C7520(a1, v2 + ((v6 + 16) & ~v6), a2);
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = (int *)type metadata accessor for MedicalIDEditPersonalInfoModalView();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v3 = (int *)type metadata accessor for MedicalIDData();
  v4 = v2 + v3[13];
  v5 = sub_2416B9B50();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = v2 + v3[14];
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (uint64_t *)(v2 + v3[19]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_2415A0DAC(*v9, v10);
  v11 = v2 + v3[20];
  v12 = sub_2416B9A18();
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);

  v14 = v2 + v3[22];
  if (!v7(v14, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  v15 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v16 = v2 + v15[5];
  v17 = sub_2416B9C70();
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v18(v16, v17);
  v19 = v2 + v15[6];
  v20 = sub_2416B9C10();
  v21 = v19;
  v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
  v22(v21, v20);

  swift_bridgeObjectRelease();
  v23 = (uint64_t *)(v2 + v1[5]);
  v24 = v23[1];
  if (v24 >> 60 != 15)
    sub_2415A0DAC(*v23, v24);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v25 = v2 + v1[7];
  if (!v7(v25, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v25, v5);
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v2 + v1[10] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  v26 = v2 + v1[11];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v18(v26, v17);
  else
    swift_release();
  v27 = v2 + v1[12];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v22(v27, v20);
  else
    swift_release();
  v28 = v2 + v1[13];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v29 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
  }
  else
  {
    swift_release();
  }
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

void sub_2415CEDCC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDEditPersonalInfoModalView() - 8) + 80);
  sub_2415C9E24(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_2415CEDF8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(void), uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  sub_24159EF1C(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

void sub_2415CEE4C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AAE0)
  {
    sub_24159EF1C(255, &qword_25713AA98, (uint64_t (*)(uint64_t))sub_2415CE61C, sub_2415CE794, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MedicalIDEditModal);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AAE0);
  }
}

uint64_t sub_2415CEEC8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  sub_24159EF1C(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

double sub_2415CEF0C@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  sub_24159D590();
  sub_2416BA420();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_2415CEF5C()
{
  return objectdestroy_10Tm((uint64_t (*)(_QWORD))MEMORY[0x24BDED420]);
}

uint64_t objectdestroy_10Tm(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = a1(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t sub_2415CEFCC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2415CEFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v2 + 16))(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t sub_2415CF01C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _QWORD *);
  _QWORD v7[2];
  char v8;

  v5 = *(uint64_t (**)(uint64_t, _QWORD *))(v4 + 16);
  v7[0] = a2;
  v7[1] = a3;
  v8 = a4 & 1;
  return v5(a1, v7);
}

void sub_2415CF054(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_2415C9124(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_2415CF05C()
{
  unint64_t result;

  result = qword_25713AB00;
  if (!qword_25713AB00)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for EditPhotoCellView, &type metadata for EditPhotoCellView);
    atomic_store(result, (unint64_t *)&qword_25713AB00);
  }
  return result;
}

uint64_t sub_2415CF0A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2415C93E0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2415CF0A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2415C9AD0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2415CF0B0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_24159D6B0(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_2415CF110()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AB20)
  {
    sub_24159D7F0(255, &qword_25713AA68, (uint64_t)&type metadata for MedicalIDEditPersonalInfoModalView.TextFieldFocus, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    sub_2415CE538();
    v0 = sub_2416B9F40();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AB20);
  }
}

uint64_t sub_2415CF18C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415CF1EC()
{
  type metadata accessor for MedicalIDEditPersonalInfoModalView();
  return sub_2415C9A64();
}

unint64_t sub_2415CF224()
{
  unint64_t result;

  result = qword_25713AB40;
  if (!qword_25713AB40)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDDataManager.UpdateError, &type metadata for MedicalIDDataManager.UpdateError);
    atomic_store(result, (unint64_t *)&qword_25713AB40);
  }
  return result;
}

unint64_t sub_2415CF26C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713AB48;
  if (!qword_25713AB48)
  {
    sub_2415CEE4C();
    v2 = v1;
    v3[0] = sub_2415CF2D4();
    v3[1] = MEMORY[0x24BDF0910];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713AB48);
  }
  return result;
}

unint64_t sub_2415CF2D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713AB50;
  if (!qword_25713AB50)
  {
    sub_24159EF1C(255, &qword_25713AA98, (uint64_t (*)(uint64_t))sub_2415CE61C, sub_2415CE794, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MedicalIDEditModal);
    result = MEMORY[0x2426994BC](&unk_2416BFE00, v1);
    atomic_store(result, (unint64_t *)&qword_25713AB50);
  }
  return result;
}

uint64_t _s10BackgroundVwxx(id *a1)
{

  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *_s10BackgroundVwcp(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  v6 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v6;
  a1[6] = *(_QWORD *)(a2 + 48);
  v7 = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t _s10BackgroundVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s10BackgroundVwta(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t _s10BackgroundVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s10BackgroundVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s10BackgroundVMa()
{
  return &_s10BackgroundVN;
}

uint64_t sub_2415CF5BC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2415CF5CC@<X0>(id *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  void (*v14)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v15;
  void (*v16)(_BYTE *, uint64_t);
  uint64_t result;
  _BYTE v18[312];
  _BYTE v19[312];
  _BYTE v20[312];
  _BYTE v21[312];

  sub_2415D00EC();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v13 = &v18[-v12];
  if (*a1)
  {
    if ((objc_msgSend(*a1, sel_isLockScreen) & 1) != 0)
    {
      sub_2415CF79C((uint64_t)v20);
      nullsub_1(v20);
    }
    else
    {
      sub_2415D0144((uint64_t)v20);
    }
    sub_2415D0178((uint64_t)v20, (uint64_t)v21);
    v14 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16);
    v14(v13, a2, v7);
    sub_2415D0178((uint64_t)v21, (uint64_t)v18);
    v14(v11, v13, v7);
    sub_2415D0178((uint64_t)v18, (uint64_t)v19);
    sub_2415D0178((uint64_t)v19, a3);
    sub_2415CFEA8();
    v14((_BYTE *)(a3 + *(int *)(v15 + 48)), v11, v7);
    sub_2415D0204((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2415D01D4);
    v16 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
    v16(v13, v7);
    v16(v11, v7);
    sub_2415D0178((uint64_t)v18, (uint64_t)v20);
    return sub_2415D0204((uint64_t)v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2415D0290);
  }
  else
  {
    sub_2415CA770();
    sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
    result = sub_2416BA264();
    __break(1u);
  }
  return result;
}

double sub_2415CF79C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  double result;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  _OWORD v36[8];
  __int128 v37;
  _BYTE v38[151];
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[2];
  char v49;
  _BYTE v50[7];
  char v51;
  _BYTE v52[7];
  _BYTE v53[7];
  _BYTE v54[7];
  char v55;
  _BYTE v56[7];
  char v57;

  v3 = sub_2416BA510();
  sub_2415CFAB8(v1, (uint64_t)v36);
  *(_OWORD *)&v38[103] = v36[6];
  *(_OWORD *)&v38[87] = v36[5];
  *(_OWORD *)&v38[39] = v36[2];
  *(_OWORD *)&v38[23] = v36[1];
  *(_OWORD *)&v38[119] = v36[7];
  *(_OWORD *)&v38[135] = v37;
  v39 = 0;
  *(_OWORD *)&v38[55] = v36[3];
  *(_OWORD *)&v38[71] = v36[4];
  *(_OWORD *)&v38[7] = v36[0];
  v46 = *(_OWORD *)&v38[96];
  v47 = *(_OWORD *)&v38[112];
  v48[0] = *(_OWORD *)&v38[128];
  *(_QWORD *)((char *)v48 + 15) = *((_QWORD *)&v37 + 1);
  v42 = *(_OWORD *)&v38[32];
  v43 = *(_OWORD *)&v38[48];
  v44 = *(_OWORD *)&v38[64];
  v45 = *(_OWORD *)&v38[80];
  v40 = *(_OWORD *)v38;
  v41 = *(_OWORD *)&v38[16];
  v4 = sub_2416BA834();
  v32 = *(_OWORD *)(v1 + 16);
  v33 = *(_QWORD *)(v1 + 32);
  sub_24159D7F0(0, &qword_25713ABC8, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604](&v31);
  if (qword_257139398 != -1)
    swift_once();
  sub_2416B9EF8();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v49 = 0;
  v13 = sub_2416BA810();
  if (qword_2571393C8 != -1)
    swift_once();
  sub_2416B9EF8();
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = v49;
  v51 = 0;
  sub_2416BAF3C();
  sub_2416BA054();
  v23 = v47;
  *(_OWORD *)(a1 + 113) = v46;
  *(_OWORD *)(a1 + 129) = v23;
  *(_OWORD *)(a1 + 145) = v48[0];
  v24 = v43;
  *(_OWORD *)(a1 + 49) = v42;
  *(_OWORD *)(a1 + 65) = v24;
  v25 = v45;
  *(_OWORD *)(a1 + 81) = v44;
  *(_OWORD *)(a1 + 97) = v25;
  v26 = v41;
  *(_OWORD *)(a1 + 17) = v40;
  v27 = v32;
  v28 = v33;
  v29 = v51;
  v57 = BYTE8(v32);
  v55 = v34;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)((char *)v48 + 15);
  *(_OWORD *)(a1 + 33) = v26;
  *(_BYTE *)(a1 + 168) = v4;
  *(_DWORD *)(a1 + 169) = *(_DWORD *)v50;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)&v50[3];
  *(_QWORD *)(a1 + 176) = v6;
  *(_QWORD *)(a1 + 184) = v8;
  *(_QWORD *)(a1 + 192) = v10;
  *(_QWORD *)(a1 + 200) = v12;
  *(_BYTE *)(a1 + 208) = v22;
  *(_DWORD *)(a1 + 209) = *(_DWORD *)v53;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)&v53[3];
  *(_BYTE *)(a1 + 216) = v13;
  *(_DWORD *)(a1 + 220) = *(_DWORD *)&v52[3];
  *(_DWORD *)(a1 + 217) = *(_DWORD *)v52;
  *(_QWORD *)(a1 + 224) = v15;
  *(_QWORD *)(a1 + 232) = v17;
  *(_QWORD *)(a1 + 240) = v19;
  *(_QWORD *)(a1 + 248) = v21;
  *(_BYTE *)(a1 + 256) = v29;
  *(_DWORD *)(a1 + 257) = v31;
  *(_DWORD *)(a1 + 260) = *(_DWORD *)((char *)&v31 + 3);
  *(_QWORD *)(a1 + 264) = v27;
  *(_BYTE *)(a1 + 272) = v57;
  *(_DWORD *)(a1 + 273) = *(_DWORD *)v56;
  *(_DWORD *)(a1 + 276) = *(_DWORD *)&v56[3];
  *(_QWORD *)(a1 + 280) = v28;
  *(_BYTE *)(a1 + 288) = v55;
  *(_DWORD *)(a1 + 292) = *(_DWORD *)&v54[3];
  *(_DWORD *)(a1 + 289) = *(_DWORD *)v54;
  result = *(double *)&v35;
  *(_OWORD *)(a1 + 296) = v35;
  return result;
}

double sub_2415CFAB8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  double result;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  double v41[3];
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[7];
  char v47;
  _BYTE v48[7];
  _BYTE v49[7];

  v45 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v38 = v45;
  sub_2415D02D0();
  swift_retain();
  v4 = MEMORY[0x24BDF3E48];
  v26 = sub_2416BAC90();
  v43 = *(_OWORD *)(a1 + 16);
  v44 = *(_QWORD *)(a1 + 32);
  v38 = *(_OWORD *)(a1 + 16);
  v39 = *(_QWORD *)(a1 + 32);
  sub_24159D7F0(0, &qword_25713ABC8, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF4870]);
  v6 = v5;
  MEMORY[0x242698604](&v28);
  sub_2416BAF48();
  sub_2416BA054();
  v7 = v28;
  v8 = v29;
  v9 = v30;
  v10 = v31;
  v24 = v33;
  v25 = v32;
  sub_24159D7F0(0, &qword_25713ABD8, v4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_2416BCC80;
  v42 = *(_QWORD *)(a1 + 48);
  v12 = v42;
  *(_QWORD *)(v11 + 32) = v45;
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)&v38 = v11;
  sub_2416BB200();
  v13 = v38;
  sub_2415D0314((uint64_t)&v45);
  sub_2415D0314((uint64_t)&v42);
  sub_2416BAFC0();
  sub_2416BAFCC();
  MEMORY[0x242698700](v13);
  sub_2416BA0F0();
  v14 = v34;
  v23 = v35;
  v15 = v36;
  v16 = v37;
  v38 = v43;
  v39 = v44;
  MEMORY[0x242698604](&v27, v6);
  sub_2416BAF48();
  sub_2416BA054();
  v17 = v38;
  v18 = BYTE8(v38);
  v19 = v39;
  v47 = v40;
  *(_DWORD *)(a2 + 17) = v27;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v27 + 3);
  *(_DWORD *)(a2 + 33) = *(_DWORD *)v49;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)&v49[3];
  v20 = *(_DWORD *)v48;
  *(_DWORD *)(a2 + 108) = *(_DWORD *)&v48[3];
  *(_DWORD *)(a2 + 105) = v20;
  LOBYTE(v20) = v47;
  v21 = *(_DWORD *)v46;
  *(_DWORD *)(a2 + 124) = *(_DWORD *)&v46[3];
  *(_DWORD *)(a2 + 121) = v21;
  *(_QWORD *)a2 = v26;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v9;
  *(_BYTE *)(a2 + 32) = v10;
  *(_QWORD *)(a2 + 40) = v25;
  *(_QWORD *)(a2 + 48) = v24;
  *(_QWORD *)(a2 + 56) = v14;
  *(_OWORD *)(a2 + 64) = v23;
  *(_QWORD *)(a2 + 80) = v15;
  *(_QWORD *)(a2 + 88) = v16;
  *(_QWORD *)(a2 + 96) = v17;
  *(_BYTE *)(a2 + 104) = v18;
  *(_QWORD *)(a2 + 112) = v19;
  *(_BYTE *)(a2 + 120) = v20;
  result = v41[0];
  *(_OWORD *)(a2 + 128) = *(_OWORD *)v41;
  return result;
}

uint64_t sub_2415CFDA0()
{
  return sub_2416BA048();
}

uint64_t sub_2415CFDB8@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v5;
  uint64_t v6;
  _OWORD v8[3];
  uint64_t v9;

  v5 = *(_OWORD *)(v2 + 16);
  v8[0] = *(_OWORD *)v2;
  v8[1] = v5;
  v8[2] = *(_OWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)a2 = sub_2416BA510();
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  sub_2415CFE28();
  return sub_2415CF5CC((id *)v8, a1, a2 + *(int *)(v6 + 44));
}

void sub_2415CFE28()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AB60)
  {
    sub_2415CFE8C(255);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AB60);
  }
}

void sub_2415CFE8C(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713AB68, (uint64_t (*)(uint64_t))sub_2415CFEA8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_2415CFEA8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713AB70)
  {
    sub_24159D6B0(255, &qword_25713AB78, (uint64_t (*)(uint64_t))sub_2415CFF2C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_2415D00EC();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713AB70);
  }
}

void sub_2415CFF2C(uint64_t a1)
{
  sub_2415BE730(a1, &qword_25713AB80, sub_2415CFF48);
}

void sub_2415CFF48(uint64_t a1)
{
  sub_2415BE730(a1, &qword_25713AB88, (void (*)(uint64_t))sub_2415CFF64);
}

void sub_2415CFF64()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AB90)
  {
    sub_2415D03A0(255, &qword_25713AB98, sub_2415CFFD8, (void (*)(void))sub_2415D00D0);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AB90);
  }
}

void sub_2415CFFD8(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713ABA0, (uint64_t (*)(uint64_t))sub_2415CFFF4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_2415CFFF4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713ABA8)
  {
    sub_2415D0080(255, &qword_25713A368);
    sub_2415D0080(255, &qword_25713ABB0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713ABA8);
  }
}

void sub_2415D0080(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_2416BA150();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_2415D00D0()
{
  return sub_24159CE88(&qword_25713ABB8, (uint64_t (*)(uint64_t))sub_2415CFFD8, MEMORY[0x24BDF5428]);
}

void sub_2415D00EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713ABC0)
  {
    sub_2415BEE2C();
    v0 = sub_2416BA648();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713ABC0);
  }
}

double sub_2415D0144(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 304) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_2415D0178(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, &qword_25713AB78, (uint64_t (*)(uint64_t))sub_2415CFF2C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415D01D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_2415D0204(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v6 = *(_OWORD *)(a1 + 272);
  v7 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 240);
  v5 = *(_OWORD *)(a1 + 256);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v4,
    *((_QWORD *)&v4 + 1),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    *(_QWORD *)(a1 + 304));
  return a1;
}

uint64_t sub_2415D0290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_2415D02C0()
{
  qword_25713AB58 = 0x4044000000000000;
}

unint64_t sub_2415D02D0()
{
  unint64_t result;

  result = qword_25713ABD0;
  if (!qword_25713ABD0)
  {
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF3E58], MEMORY[0x24BDF3E48]);
    atomic_store(result, (unint64_t *)&qword_25713ABD0);
  }
  return result;
}

uint64_t sub_2415D0314(uint64_t a1)
{
  swift_retain();
  return a1;
}

unint64_t sub_2415D0340()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713ABE0;
  if (!qword_25713ABE0)
  {
    sub_2415D03A0(255, &qword_25713ABE8, sub_2415CFE8C, (void (*)(void))sub_2415D0404);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF4700], v1);
    atomic_store(result, (unint64_t *)&qword_25713ABE0);
  }
  return result;
}

void sub_2415D03A0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4();
    v6 = sub_2416BADF8();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_2415D0404()
{
  return sub_24159CE88(qword_25713ABF0, (uint64_t (*)(uint64_t))sub_2415CFE8C, MEMORY[0x24BDF5428]);
}

uint64_t *sub_2415D0420(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  id v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  id v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  id v147;
  id v148;
  id v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  id v179;
  uint64_t v180;
  int *v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  id v198;
  id v199;
  id v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  char *v217;
  id v218;
  id v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  char *v246;
  char *v247;
  id v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  char *v255;
  char *v257;
  char *__dst;
  char *__dsta;
  void *__dstb;
  int *v261;
  void *v262;
  char *v263;
  char *v264;
  char *v265;
  uint64_t v268;
  uint64_t v269;
  void (*v270)(char *, char *);
  uint64_t v271;
  unsigned int (*v272)(char *, uint64_t, uint64_t);
  char *v273;
  int *v274;
  void *v275;
  uint64_t v276;
  void *v277;
  void (*v278)(char *, char *, uint64_t);
  void *v279;
  uint64_t v280;
  int *v281;
  char *v282;
  char *v283;
  char *v284;
  uint64_t v285;
  char *v286;
  unsigned int (*v287)(char *, uint64_t, uint64_t);
  int *v288;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    v29 = (uint64_t *)(v28 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v279 = *(void **)((char *)a2 + v5);
    *(uint64_t *)((char *)a1 + v5) = (uint64_t)v279;
    v281 = (int *)type metadata accessor for MedicalIDDataViewModel();
    v8 = v281[5];
    v273 = v6;
    v9 = &v6[v8];
    v283 = v7;
    v10 = &v7[v8];
    v11 = *(_QWORD *)&v7[v8 + 8];
    *(_QWORD *)v9 = *(_QWORD *)&v7[v8];
    *((_QWORD *)v9 + 1) = v11;
    v13 = *(_QWORD *)&v7[v8 + 16];
    v12 = *(_QWORD *)&v7[v8 + 24];
    *((_QWORD *)v9 + 2) = v13;
    *((_QWORD *)v9 + 3) = v12;
    v14 = *((_QWORD *)v10 + 5);
    *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
    *((_QWORD *)v9 + 5) = v14;
    v15 = *((_QWORD *)v10 + 7);
    *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
    *((_QWORD *)v9 + 7) = v15;
    v16 = *((_QWORD *)v10 + 9);
    *((_QWORD *)v9 + 8) = *((_QWORD *)v10 + 8);
    *((_QWORD *)v9 + 9) = v16;
    v17 = *((_QWORD *)v10 + 11);
    *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
    *((_QWORD *)v9 + 11) = v17;
    v275 = (void *)*((_QWORD *)v10 + 12);
    v277 = (void *)*((_QWORD *)v10 + 13);
    *((_QWORD *)v9 + 12) = v275;
    *((_QWORD *)v9 + 13) = v277;
    v18 = type metadata accessor for MedicalIDData();
    v19 = *(int *)(v18 + 52);
    v286 = &v9[v19];
    v288 = (int *)v18;
    v20 = &v10[v19];
    v21 = sub_2416B9B50();
    v285 = *(_QWORD *)(v21 - 8);
    v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v285 + 48);
    v23 = v279;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = v275;
    v25 = v277;
    if (v22(v20, 1, v21))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v286, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      v27 = v285;
    }
    else
    {
      v27 = v285;
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v286, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v285 + 56))(v286, 0, 1, v21);
    }
    v30 = v288[14];
    v31 = &v9[v30];
    v32 = &v10[v30];
    if (v22(&v10[v30], 1, v21))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v31, v32, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v31, 0, 1, v21);
    }
    v34 = v288[15];
    v35 = &v9[v34];
    v36 = &v10[v34];
    v37 = *((_QWORD *)v36 + 1);
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *((_QWORD *)v35 + 1) = v37;
    v38 = v288[16];
    v39 = &v9[v38];
    v40 = &v10[v38];
    v41 = *((_QWORD *)v40 + 1);
    *(_QWORD *)v39 = *(_QWORD *)v40;
    *((_QWORD *)v39 + 1) = v41;
    v9[v288[17]] = v10[v288[17]];
    v9[v288[18]] = v10[v288[18]];
    v42 = v288[19];
    v43 = &v9[v42];
    v44 = (uint64_t *)&v10[v42];
    v45 = *(_QWORD *)&v10[v42 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v45 >> 60 == 15)
    {
      *(_OWORD *)v43 = *(_OWORD *)v44;
    }
    else
    {
      v46 = *v44;
      sub_2415A0A90(*v44, v45);
      *(_QWORD *)v43 = v46;
      *((_QWORD *)v43 + 1) = v45;
    }
    v47 = v288[20];
    v48 = &v9[v47];
    v49 = &v10[v47];
    v50 = sub_2416B9A18();
    v51 = *(_QWORD *)(v50 - 8);
    v272 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
    if (v272(v49, 1, v50))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v48, v49, v50);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    v53 = v288[21];
    v54 = *(void **)&v10[v53];
    *(_QWORD *)&v9[v53] = v54;
    v55 = v288[22];
    v56 = &v9[v55];
    v57 = &v10[v55];
    v58 = v54;
    v287 = v22;
    v276 = v50;
    v268 = v51;
    v269 = v21;
    if (v22(v57, 1, v21))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v56, v57, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v56, 0, 1, v21);
    }
    v60 = v281[6];
    v61 = &v273[v60];
    v62 = &v283[v60];
    v63 = sub_2416B9C70();
    v270 = *(void (**)(char *, char *))(*(_QWORD *)(v63 - 8) + 16);
    v271 = v63;
    v270(v61, v62);
    v64 = v281[7];
    v65 = *(void **)&v283[v64];
    *(_QWORD *)&v273[v64] = v65;
    v66 = v281[8];
    v67 = &v273[v66];
    v68 = &v283[v66];
    v69 = sub_2416B9C10();
    v70 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16);
    v71 = v65;
    v278 = v70;
    v280 = v69;
    v70(v67, v68, v69);
    v72 = v281[9];
    v73 = &v273[v72];
    v74 = &v283[v72];
    v75 = *(_QWORD *)&v283[v72 + 8];
    *(_QWORD *)v73 = *(_QWORD *)&v283[v72];
    *((_QWORD *)v73 + 1) = v75;
    v261 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    v263 = v74;
    v76 = v261[5];
    v255 = v73;
    v77 = &v73[v76];
    v78 = &v74[v76];
    v79 = *(_QWORD *)&v74[v76 + 8];
    *(_QWORD *)v77 = *(_QWORD *)&v74[v76];
    *((_QWORD *)v77 + 1) = v79;
    v81 = *(_QWORD *)&v74[v76 + 16];
    v80 = *(_QWORD *)&v74[v76 + 24];
    *((_QWORD *)v77 + 2) = v81;
    *((_QWORD *)v77 + 3) = v80;
    v82 = *((_QWORD *)v78 + 5);
    *((_QWORD *)v77 + 4) = *((_QWORD *)v78 + 4);
    *((_QWORD *)v77 + 5) = v82;
    v83 = *((_QWORD *)v78 + 7);
    *((_QWORD *)v77 + 6) = *((_QWORD *)v78 + 6);
    *((_QWORD *)v77 + 7) = v83;
    v84 = *((_QWORD *)v78 + 9);
    *((_QWORD *)v77 + 8) = *((_QWORD *)v78 + 8);
    *((_QWORD *)v77 + 9) = v84;
    v85 = *((_QWORD *)v78 + 11);
    *((_QWORD *)v77 + 10) = *((_QWORD *)v78 + 10);
    *((_QWORD *)v77 + 11) = v85;
    v87 = (void *)*((_QWORD *)v78 + 12);
    v86 = (void *)*((_QWORD *)v78 + 13);
    *((_QWORD *)v77 + 12) = v87;
    *((_QWORD *)v77 + 13) = v86;
    v88 = v288[13];
    __dst = &v77[v88];
    v257 = &v78[v88];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v89 = v87;
    v90 = v86;
    if (v22(v257, 1, v269))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v257, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
      v92 = v285;
    }
    else
    {
      v92 = v285;
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(__dst, v257, v269);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v285 + 56))(__dst, 0, 1, v269);
    }
    v93 = v288[14];
    v94 = &v77[v93];
    v95 = &v78[v93];
    if (v22(&v78[v93], 1, v269))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v94, v95, v269);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v94, 0, 1, v269);
    }
    v97 = v288[15];
    v98 = &v77[v97];
    v99 = &v78[v97];
    v100 = *((_QWORD *)v99 + 1);
    *(_QWORD *)v98 = *(_QWORD *)v99;
    *((_QWORD *)v98 + 1) = v100;
    v101 = v288[16];
    v102 = &v77[v101];
    v103 = &v78[v101];
    v104 = *((_QWORD *)v103 + 1);
    *(_QWORD *)v102 = *(_QWORD *)v103;
    *((_QWORD *)v102 + 1) = v104;
    v77[v288[17]] = v78[v288[17]];
    v77[v288[18]] = v78[v288[18]];
    v105 = v288[19];
    v106 = &v77[v105];
    v107 = (uint64_t *)&v78[v105];
    v108 = *(_QWORD *)&v78[v105 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v108 >> 60 == 15)
    {
      *(_OWORD *)v106 = *(_OWORD *)v107;
    }
    else
    {
      v109 = *v107;
      sub_2415A0A90(*v107, v108);
      *(_QWORD *)v106 = v109;
      *((_QWORD *)v106 + 1) = v108;
    }
    v110 = v288[20];
    v111 = &v77[v110];
    v112 = &v78[v110];
    if (v272(&v78[v110], 1, v276))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v268 + 16))(v111, v112, v276);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v268 + 56))(v111, 0, 1, v276);
    }
    v114 = v288[21];
    v115 = *(void **)&v78[v114];
    *(_QWORD *)&v77[v114] = v115;
    v116 = v288[22];
    v117 = &v77[v116];
    v118 = &v78[v116];
    v119 = v115;
    if (v22(v118, 1, v269))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v117, v118, v269);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v117, 0, 1, v269);
    }
    v278(&v255[v261[6]], &v263[v261[6]], v280);
    v121 = v261[7];
    v122 = &v255[v121];
    v123 = &v263[v121];
    v278(&v255[v121], &v263[v121], v280);
    v124 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    v125 = *(void **)&v123[v124];
    *(_QWORD *)&v122[v124] = v125;
    v126 = v261[8];
    v127 = &v255[v126];
    v128 = &v263[v126];
    v129 = v125;
    v278(v127, v128, v280);
    v130 = type metadata accessor for MedicalIDWeightFormatter();
    v131 = *(int *)(v130 + 20);
    v132 = *(void **)&v128[v131];
    *(_QWORD *)&v127[v131] = v132;
    v133 = *(int *)(v130 + 24);
    v134 = *(void **)&v128[v133];
    *(_QWORD *)&v127[v133] = v134;
    v135 = v281[10];
    v136 = &v273[v135];
    v137 = &v283[v135];
    v138 = *(_QWORD *)&v283[v135 + 8];
    *(_QWORD *)v136 = *(_QWORD *)&v283[v135];
    *((_QWORD *)v136 + 1) = v138;
    v140 = *(_QWORD *)&v283[v135 + 16];
    v139 = *(_QWORD *)&v283[v135 + 24];
    *((_QWORD *)v136 + 2) = v140;
    *((_QWORD *)v136 + 3) = v139;
    v141 = *((_QWORD *)v137 + 5);
    *((_QWORD *)v136 + 4) = *((_QWORD *)v137 + 4);
    *((_QWORD *)v136 + 5) = v141;
    v142 = *((_QWORD *)v137 + 7);
    *((_QWORD *)v136 + 6) = *((_QWORD *)v137 + 6);
    *((_QWORD *)v136 + 7) = v142;
    v143 = *((_QWORD *)v137 + 9);
    *((_QWORD *)v136 + 8) = *((_QWORD *)v137 + 8);
    *((_QWORD *)v136 + 9) = v143;
    v144 = *((_QWORD *)v137 + 11);
    *((_QWORD *)v136 + 10) = *((_QWORD *)v137 + 10);
    *((_QWORD *)v136 + 11) = v144;
    v145 = (void *)*((_QWORD *)v137 + 12);
    v262 = (void *)*((_QWORD *)v137 + 13);
    *((_QWORD *)v136 + 12) = v145;
    *((_QWORD *)v136 + 13) = v262;
    v146 = v288[13];
    v264 = &v136[v146];
    __dsta = &v137[v146];
    v147 = v132;
    v148 = v134;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v149 = v145;
    v150 = v262;
    if (v287(__dsta, 1, v269))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v264, __dsta, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
      v152 = v285;
    }
    else
    {
      v152 = v285;
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v264, __dsta, v269);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v285 + 56))(v264, 0, 1, v269);
    }
    v153 = v288[14];
    v154 = &v136[v153];
    v155 = &v137[v153];
    if (v287(&v137[v153], 1, v269))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v154, v155, v269);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v154, 0, 1, v269);
    }
    v157 = v288[15];
    v158 = &v136[v157];
    v159 = &v137[v157];
    v160 = *((_QWORD *)v159 + 1);
    *(_QWORD *)v158 = *(_QWORD *)v159;
    *((_QWORD *)v158 + 1) = v160;
    v161 = v288[16];
    v162 = &v136[v161];
    v163 = &v137[v161];
    v164 = *((_QWORD *)v163 + 1);
    *(_QWORD *)v162 = *(_QWORD *)v163;
    *((_QWORD *)v162 + 1) = v164;
    v136[v288[17]] = v137[v288[17]];
    v136[v288[18]] = v137[v288[18]];
    v165 = v288[19];
    v166 = &v136[v165];
    v167 = (uint64_t *)&v137[v165];
    v168 = *(_QWORD *)&v137[v165 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v168 >> 60 == 15)
    {
      *(_OWORD *)v166 = *(_OWORD *)v167;
    }
    else
    {
      v169 = *v167;
      sub_2415A0A90(*v167, v168);
      *(_QWORD *)v166 = v169;
      *((_QWORD *)v166 + 1) = v168;
    }
    v170 = v288[20];
    v171 = &v136[v170];
    v172 = &v137[v170];
    if (v272(&v137[v170], 1, v276))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v171, v172, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v268 + 16))(v171, v172, v276);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v268 + 56))(v171, 0, 1, v276);
    }
    v174 = v288[21];
    v175 = *(void **)&v137[v174];
    *(_QWORD *)&v136[v174] = v175;
    v176 = v288[22];
    v177 = &v136[v176];
    v178 = &v137[v176];
    v179 = v175;
    if (v287(v178, 1, v269))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v180 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v177, v178, v269);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v177, 0, 1, v269);
    }
    v181 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    ((void (*)(char *, char *, uint64_t))v270)(&v136[v181[5]], &v137[v181[5]], v271);
    v278(&v136[v181[6]], &v137[v181[6]], v280);
    v182 = v181[7];
    v183 = *(void **)&v137[v182];
    *(_QWORD *)&v136[v182] = v183;
    v184 = v181[8];
    v185 = *(void **)&v137[v184];
    *(_QWORD *)&v136[v184] = v185;
    v186 = v181[9];
    v187 = &v136[v186];
    v188 = &v137[v186];
    v189 = *((_QWORD *)v188 + 1);
    *(_QWORD *)v187 = *(_QWORD *)v188;
    *((_QWORD *)v187 + 1) = v189;
    v190 = v281[11];
    v191 = &v273[v190];
    v192 = &v283[v190];
    v193 = *(void **)&v283[v190];
    *(_QWORD *)&v273[v190] = v193;
    v194 = type metadata accessor for MedicalIDMedicalInfoViewModel();
    v195 = *(int *)(v194 + 20);
    v196 = &v191[v195];
    v197 = &v192[v195];
    v198 = v183;
    v199 = v185;
    swift_bridgeObjectRetain();
    v200 = v193;
    ((void (*)(char *, char *, uint64_t))v270)(v196, v197, v271);
    v278(&v191[*(int *)(v194 + 24)], &v192[*(int *)(v194 + 24)], v280);
    v201 = v281[12];
    v202 = &v273[v201];
    v203 = &v283[v201];
    v204 = *(_QWORD *)&v283[v201 + 8];
    *(_QWORD *)v202 = *(_QWORD *)&v283[v201];
    *((_QWORD *)v202 + 1) = v204;
    v274 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
    v205 = v274[5];
    v282 = v202;
    v284 = v203;
    v206 = &v202[v205];
    v207 = &v203[v205];
    v208 = *(_QWORD *)&v203[v205 + 8];
    *(_QWORD *)v206 = *(_QWORD *)&v203[v205];
    *((_QWORD *)v206 + 1) = v208;
    v210 = *(_QWORD *)&v203[v205 + 16];
    v209 = *((_QWORD *)v207 + 3);
    *((_QWORD *)v206 + 2) = v210;
    *((_QWORD *)v206 + 3) = v209;
    v211 = *((_QWORD *)v207 + 5);
    *((_QWORD *)v206 + 4) = *((_QWORD *)v207 + 4);
    *((_QWORD *)v206 + 5) = v211;
    v212 = *((_QWORD *)v207 + 7);
    *((_QWORD *)v206 + 6) = *((_QWORD *)v207 + 6);
    *((_QWORD *)v206 + 7) = v212;
    v213 = *((_QWORD *)v207 + 9);
    *((_QWORD *)v206 + 8) = *((_QWORD *)v207 + 8);
    *((_QWORD *)v206 + 9) = v213;
    v214 = *((_QWORD *)v207 + 11);
    *((_QWORD *)v206 + 10) = *((_QWORD *)v207 + 10);
    *((_QWORD *)v206 + 11) = v214;
    v215 = (void *)*((_QWORD *)v207 + 12);
    __dstb = (void *)*((_QWORD *)v207 + 13);
    *((_QWORD *)v206 + 12) = v215;
    *((_QWORD *)v206 + 13) = __dstb;
    v216 = v288[13];
    v265 = &v206[v216];
    v217 = &v207[v216];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v218 = v215;
    v219 = __dstb;
    if (v287(v217, 1, v269))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v265, v217, *(_QWORD *)(*(_QWORD *)(v220 - 8) + 64));
      v221 = v285;
    }
    else
    {
      v221 = v285;
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v265, v217, v269);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v285 + 56))(v265, 0, 1, v269);
    }
    v222 = v288[14];
    v223 = &v206[v222];
    v224 = &v207[v222];
    if (v287(&v207[v222], 1, v269))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v223, v224, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v221 + 16))(v223, v224, v269);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v221 + 56))(v223, 0, 1, v269);
    }
    v226 = v288[15];
    v227 = &v206[v226];
    v228 = &v207[v226];
    v229 = *((_QWORD *)v228 + 1);
    *(_QWORD *)v227 = *(_QWORD *)v228;
    *((_QWORD *)v227 + 1) = v229;
    v230 = v288[16];
    v231 = &v206[v230];
    v232 = &v207[v230];
    v233 = *((_QWORD *)v232 + 1);
    *(_QWORD *)v231 = *(_QWORD *)v232;
    *((_QWORD *)v231 + 1) = v233;
    v206[v288[17]] = v207[v288[17]];
    v206[v288[18]] = v207[v288[18]];
    v234 = v288[19];
    v235 = &v206[v234];
    v236 = (uint64_t *)&v207[v234];
    v237 = *(_QWORD *)&v207[v234 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v237 >> 60 == 15)
    {
      *(_OWORD *)v235 = *(_OWORD *)v236;
    }
    else
    {
      v238 = *v236;
      sub_2415A0A90(*v236, v237);
      *(_QWORD *)v235 = v238;
      *((_QWORD *)v235 + 1) = v237;
    }
    v29 = a1;
    v239 = v288[20];
    v240 = &v206[v239];
    v241 = &v207[v239];
    if (v272(&v207[v239], 1, v276))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v240, v241, *(_QWORD *)(*(_QWORD *)(v242 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v268 + 16))(v240, v241, v276);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v268 + 56))(v240, 0, 1, v276);
    }
    v243 = v288[21];
    v244 = *(void **)&v207[v243];
    *(_QWORD *)&v206[v243] = v244;
    v245 = v288[22];
    v246 = &v206[v245];
    v247 = &v207[v245];
    v248 = v244;
    if (v287(v247, 1, v269))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v246, v247, *(_QWORD *)(*(_QWORD *)(v249 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v221 + 16))(v246, v247, v269);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v221 + 56))(v246, 0, 1, v269);
    }
    ((void (*)(char *, char *, uint64_t))v270)(&v282[v274[6]], &v284[v274[6]], v271);
    v278(&v282[v274[7]], &v284[v274[7]], v280);
    *(_QWORD *)&v282[v274[8]] = *(_QWORD *)&v284[v274[8]];
    v250 = v274[9];
    v251 = &v282[v250];
    v252 = &v284[v250];
    swift_retain();
    if (v287(v252, 1, v269))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v251, v252, *(_QWORD *)(*(_QWORD *)(v253 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v221 + 16))(v251, v252, v269);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v221 + 56))(v251, 0, 1, v269);
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return v29;
}

uint64_t sub_2415D15CC(uint64_t a1, uint64_t a2)
{
  id *v2;
  int *v3;
  id *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  id *v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  id *v39;
  uint64_t v40;
  char *v41;
  int *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v52;
  void (*v53)(char *);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *);
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;

  v2 = (id *)(a1 + *(int *)(a2 + 20));

  v3 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v4 = (id *)((char *)v2 + v3[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = (char *)v4 + v5[13];
  v7 = sub_2416B9B50();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  v10 = (char *)v4 + v5[14];
  if (!v9(v10, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v59 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)((char *)v4 + v5[19]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_2415A0DAC(*v11, v12);
  v13 = (char *)v4 + v5[20];
  v14 = sub_2416B9A18();
  v52 = *(_QWORD *)(v14 - 8);
  v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
  if (!v57(v13, 1, v14))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v13, v14);
  v58 = v14;

  v15 = (char *)v4 + v5[22];
  if (!v9(v15, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v15, v7);
  v16 = (char *)v2 + v3[6];
  v17 = sub_2416B9C70();
  v53 = *(void (**)(char *))(*(_QWORD *)(v17 - 8) + 8);
  v54 = v17;
  v53(v16);

  v18 = (char *)v2 + v3[8];
  v55 = sub_2416B9C10();
  v56 = *(void (**)(char *))(*(_QWORD *)(v55 - 8) + 8);
  v56(v18);
  v19 = (char *)v2 + v3[9];
  swift_bridgeObjectRelease();
  v20 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v21 = &v19[v20[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v22 = &v21[v5[13]];
  if (!v9(v22, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v22, v7);
  v23 = &v21[v5[14]];
  if (!v9(v23, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v23, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = (uint64_t *)&v21[v5[19]];
  v25 = v24[1];
  if (v25 >> 60 != 15)
    sub_2415A0DAC(*v24, v25);
  v26 = &v21[v5[20]];
  if (!v57(v26, 1, v58))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v26, v58);

  v27 = &v21[v5[22]];
  if (!v9(v27, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v27, v7);
  ((void (*)(char *, uint64_t))v56)(&v19[v20[6]], v55);
  v28 = &v19[v20[7]];
  ((void (*)(char *, uint64_t))v56)(v28, v55);

  v29 = &v19[v20[8]];
  ((void (*)(char *, uint64_t))v56)(v29, v55);
  v30 = type metadata accessor for MedicalIDWeightFormatter();

  v31 = (id *)((char *)v2 + v3[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v32 = (char *)v31 + v5[13];
  if (!v9(v32, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v32, v7);
  v33 = (char *)v31 + v5[14];
  if (!v9(v33, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v33, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = (uint64_t *)((char *)v31 + v5[19]);
  v35 = v34[1];
  if (v35 >> 60 != 15)
    sub_2415A0DAC(*v34, v35);
  v36 = (char *)v31 + v5[20];
  if (!v57(v36, 1, v58))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v36, v58);

  v37 = (char *)v31 + v5[22];
  if (!v9(v37, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v7);
  v38 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v53)((char *)v31 + v38[5], v54);
  ((void (*)(char *, uint64_t))v56)((char *)v31 + v38[6], v55);

  swift_bridgeObjectRelease();
  v39 = (id *)((char *)v2 + v3[11]);

  v40 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v53)((char *)v39 + *(int *)(v40 + 20), v54);
  ((void (*)(char *, uint64_t))v56)((char *)v39 + *(int *)(v40 + 24), v55);
  v41 = (char *)v2 + v3[12];
  swift_bridgeObjectRelease();
  v42 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v43 = &v41[v42[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v44 = &v43[v5[13]];
  if (!v9(v44, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v7);
  v45 = &v43[v5[14]];
  if (!v9(v45, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v45, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v46 = (uint64_t *)&v43[v5[19]];
  v47 = v46[1];
  if (v47 >> 60 != 15)
    sub_2415A0DAC(*v46, v47);
  v48 = &v43[v5[20]];
  if (!v57(v48, 1, v58))
    (*(void (**)(char *, uint64_t))(v52 + 8))(v48, v58);

  v49 = &v43[v5[22]];
  if (!v9(v49, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v49, v7);
  ((void (*)(char *, uint64_t))v53)(&v41[v42[6]], v54);
  ((void (*)(char *, uint64_t))v56)(&v41[v42[7]], v55);
  swift_release();
  v50 = &v41[v42[9]];
  if (!v9(v50, 1, v7))
    (*(void (**)(char *, uint64_t))(v59 + 8))(v50, v7);
  return swift_release();
}

_BYTE *sub_2415D1DEC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  id v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  id v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  char *v142;
  id v143;
  id v144;
  id v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  id v175;
  uint64_t v176;
  int *v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  _QWORD *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  _BYTE *v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  _BYTE *v192;
  _BYTE *v193;
  id v194;
  id v195;
  id v196;
  uint64_t v197;
  char *v198;
  _BYTE *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  void *v212;
  uint64_t v213;
  id v214;
  id v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  char *v242;
  char *v243;
  id v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  _BYTE *v248;
  uint64_t v249;
  char *v251;
  char *v253;
  char *__dst;
  void *__dstb;
  char *__dsta;
  int *v257;
  void *v258;
  char *v259;
  char *v260;
  char *v261;
  uint64_t v264;
  uint64_t v265;
  void (*v266)(_BYTE *, _BYTE *);
  uint64_t v267;
  unsigned int (*v268)(char *, uint64_t, uint64_t);
  _BYTE *v269;
  int *v270;
  void *v271;
  uint64_t v272;
  void *v273;
  void (*v274)(char *, char *, uint64_t);
  void *v275;
  uint64_t v276;
  int *v277;
  char *v278;
  _BYTE *v279;
  _BYTE *v280;
  uint64_t v281;
  char *v282;
  unsigned int (*v283)(char *, uint64_t, uint64_t);
  int *v284;

  *a1 = *a2;
  v3 = *(int *)(a3 + 20);
  v4 = &a1[v3];
  v5 = &a2[v3];
  v275 = *(void **)&a2[v3];
  *(_QWORD *)&a1[v3] = v275;
  v277 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v6 = v277[5];
  v269 = v4;
  v7 = &v4[v6];
  v279 = v5;
  v8 = &v5[v6];
  v9 = *(_QWORD *)&v5[v6 + 8];
  *v7 = *(_QWORD *)&v5[v6];
  v7[1] = v9;
  v11 = *(_QWORD *)&v5[v6 + 16];
  v10 = *(_QWORD *)&v5[v6 + 24];
  v7[2] = v11;
  v7[3] = v10;
  v12 = *((_QWORD *)v8 + 5);
  v7[4] = *((_QWORD *)v8 + 4);
  v7[5] = v12;
  v13 = *((_QWORD *)v8 + 7);
  v7[6] = *((_QWORD *)v8 + 6);
  v7[7] = v13;
  v14 = *((_QWORD *)v8 + 9);
  v7[8] = *((_QWORD *)v8 + 8);
  v7[9] = v14;
  v15 = *((_QWORD *)v8 + 11);
  v7[10] = *((_QWORD *)v8 + 10);
  v7[11] = v15;
  v271 = (void *)*((_QWORD *)v8 + 12);
  v273 = (void *)*((_QWORD *)v8 + 13);
  v7[12] = v271;
  v7[13] = v273;
  v16 = type metadata accessor for MedicalIDData();
  v17 = *(int *)(v16 + 52);
  v282 = (char *)v7 + v17;
  v284 = (int *)v16;
  v18 = &v8[v17];
  v19 = sub_2416B9B50();
  v281 = *(_QWORD *)(v19 - 8);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v281 + 48);
  v21 = v275;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = v271;
  v23 = v273;
  if (v20(v18, 1, v19))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v282, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    v25 = v281;
  }
  else
  {
    v25 = v281;
    (*(void (**)(char *, char *, uint64_t))(v281 + 16))(v282, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v281 + 56))(v282, 0, 1, v19);
  }
  v26 = v284[14];
  v27 = (char *)v7 + v26;
  v28 = &v8[v26];
  if (v20(&v8[v26], 1, v19))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v27, v28, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v27, 0, 1, v19);
  }
  v30 = v284[15];
  v31 = (_QWORD *)((char *)v7 + v30);
  v32 = &v8[v30];
  v33 = *((_QWORD *)v32 + 1);
  *v31 = *(_QWORD *)v32;
  v31[1] = v33;
  v34 = v284[16];
  v35 = (_QWORD *)((char *)v7 + v34);
  v36 = &v8[v34];
  v37 = *((_QWORD *)v36 + 1);
  *v35 = *(_QWORD *)v36;
  v35[1] = v37;
  *((_BYTE *)v7 + v284[17]) = v8[v284[17]];
  *((_BYTE *)v7 + v284[18]) = v8[v284[18]];
  v38 = v284[19];
  v39 = (char *)v7 + v38;
  v40 = (uint64_t *)&v8[v38];
  v41 = *(_QWORD *)&v8[v38 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v41 >> 60 == 15)
  {
    *(_OWORD *)v39 = *(_OWORD *)v40;
  }
  else
  {
    v42 = *v40;
    sub_2415A0A90(*v40, v41);
    *(_QWORD *)v39 = v42;
    *((_QWORD *)v39 + 1) = v41;
  }
  v43 = v284[20];
  v44 = (char *)v7 + v43;
  v45 = &v8[v43];
  v46 = sub_2416B9A18();
  v47 = *(_QWORD *)(v46 - 8);
  v268 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  if (v268(v45, 1, v46))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  v49 = v284[21];
  v50 = *(void **)&v8[v49];
  *(_QWORD *)((char *)v7 + v49) = v50;
  v51 = v284[22];
  v52 = (char *)v7 + v51;
  v53 = &v8[v51];
  v54 = v50;
  v283 = v20;
  v272 = v46;
  v264 = v47;
  v265 = v19;
  if (v20(v53, 1, v19))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v52, v53, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v52, 0, 1, v19);
  }
  v56 = v277[6];
  v57 = &v269[v56];
  v58 = &v279[v56];
  v59 = sub_2416B9C70();
  v266 = *(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v59 - 8) + 16);
  v267 = v59;
  v266(v57, v58);
  v60 = v277[7];
  v61 = *(void **)&v279[v60];
  *(_QWORD *)&v269[v60] = v61;
  v62 = v277[8];
  v63 = &v269[v62];
  v64 = &v279[v62];
  v65 = sub_2416B9C10();
  v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16);
  v67 = v61;
  v274 = v66;
  v276 = v65;
  v66(v63, v64, v65);
  v68 = v277[9];
  v69 = &v269[v68];
  v70 = &v279[v68];
  v71 = *(_QWORD *)&v279[v68 + 8];
  *(_QWORD *)v69 = *(_QWORD *)&v279[v68];
  *((_QWORD *)v69 + 1) = v71;
  v257 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v259 = v70;
  v72 = v257[5];
  v251 = v69;
  v73 = &v69[v72];
  v74 = &v70[v72];
  v75 = *(_QWORD *)&v70[v72 + 8];
  *(_QWORD *)v73 = *(_QWORD *)&v70[v72];
  *((_QWORD *)v73 + 1) = v75;
  v77 = *(_QWORD *)&v70[v72 + 16];
  v76 = *(_QWORD *)&v70[v72 + 24];
  *((_QWORD *)v73 + 2) = v77;
  *((_QWORD *)v73 + 3) = v76;
  v78 = *((_QWORD *)v74 + 5);
  *((_QWORD *)v73 + 4) = *((_QWORD *)v74 + 4);
  *((_QWORD *)v73 + 5) = v78;
  v79 = *((_QWORD *)v74 + 7);
  *((_QWORD *)v73 + 6) = *((_QWORD *)v74 + 6);
  *((_QWORD *)v73 + 7) = v79;
  v80 = *((_QWORD *)v74 + 9);
  *((_QWORD *)v73 + 8) = *((_QWORD *)v74 + 8);
  *((_QWORD *)v73 + 9) = v80;
  v81 = *((_QWORD *)v74 + 11);
  *((_QWORD *)v73 + 10) = *((_QWORD *)v74 + 10);
  *((_QWORD *)v73 + 11) = v81;
  v83 = (void *)*((_QWORD *)v74 + 12);
  v82 = (void *)*((_QWORD *)v74 + 13);
  *((_QWORD *)v73 + 12) = v83;
  *((_QWORD *)v73 + 13) = v82;
  v84 = v284[13];
  __dst = &v73[v84];
  v253 = &v74[v84];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v85 = v83;
  v86 = v82;
  if (v20(v253, 1, v265))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v253, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    v88 = v281;
  }
  else
  {
    v88 = v281;
    (*(void (**)(char *, char *, uint64_t))(v281 + 16))(__dst, v253, v265);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v281 + 56))(__dst, 0, 1, v265);
  }
  v89 = v284[14];
  v90 = &v73[v89];
  v91 = &v74[v89];
  if (v20(&v74[v89], 1, v265))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v90, v91, v265);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v90, 0, 1, v265);
  }
  v93 = v284[15];
  v94 = &v73[v93];
  v95 = &v74[v93];
  v96 = *((_QWORD *)v95 + 1);
  *v94 = *(_QWORD *)v95;
  v94[1] = v96;
  v97 = v284[16];
  v98 = &v73[v97];
  v99 = &v74[v97];
  v100 = *((_QWORD *)v99 + 1);
  *v98 = *(_QWORD *)v99;
  v98[1] = v100;
  v73[v284[17]] = v74[v284[17]];
  v73[v284[18]] = v74[v284[18]];
  v101 = v284[19];
  v102 = &v73[v101];
  v103 = (uint64_t *)&v74[v101];
  v104 = *(_QWORD *)&v74[v101 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v104 >> 60 == 15)
  {
    *(_OWORD *)v102 = *(_OWORD *)v103;
  }
  else
  {
    v105 = *v103;
    sub_2415A0A90(*v103, v104);
    *(_QWORD *)v102 = v105;
    *((_QWORD *)v102 + 1) = v104;
  }
  v106 = v284[20];
  v107 = &v73[v106];
  v108 = &v74[v106];
  if (v268(&v74[v106], 1, v272))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v264 + 16))(v107, v108, v272);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v107, 0, 1, v272);
  }
  v110 = v284[21];
  v111 = *(void **)&v74[v110];
  *(_QWORD *)&v73[v110] = v111;
  v112 = v284[22];
  v113 = &v73[v112];
  v114 = &v74[v112];
  v115 = v111;
  if (v20(v114, 1, v265))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v113, v114, v265);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v113, 0, 1, v265);
  }
  v274(&v251[v257[6]], &v259[v257[6]], v276);
  v117 = v257[7];
  v118 = &v251[v117];
  v119 = &v259[v117];
  v274(&v251[v117], &v259[v117], v276);
  v120 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v121 = *(void **)&v119[v120];
  *(_QWORD *)&v118[v120] = v121;
  v122 = v257[8];
  v123 = &v251[v122];
  v124 = &v259[v122];
  v125 = v121;
  v274(v123, v124, v276);
  v126 = type metadata accessor for MedicalIDWeightFormatter();
  v127 = *(int *)(v126 + 20);
  v128 = *(void **)&v124[v127];
  *(_QWORD *)&v123[v127] = v128;
  v129 = *(int *)(v126 + 24);
  __dstb = *(void **)&v124[v129];
  *(_QWORD *)&v123[v129] = __dstb;
  v130 = v277[10];
  v131 = &v269[v130];
  v132 = &v279[v130];
  v133 = *(_QWORD *)&v279[v130 + 8];
  *v131 = *(_QWORD *)&v279[v130];
  v131[1] = v133;
  v135 = *(_QWORD *)&v279[v130 + 16];
  v134 = *(_QWORD *)&v279[v130 + 24];
  v131[2] = v135;
  v131[3] = v134;
  v136 = *((_QWORD *)v132 + 5);
  v131[4] = *((_QWORD *)v132 + 4);
  v131[5] = v136;
  v137 = *((_QWORD *)v132 + 7);
  v131[6] = *((_QWORD *)v132 + 6);
  v131[7] = v137;
  v138 = *((_QWORD *)v132 + 9);
  v131[8] = *((_QWORD *)v132 + 8);
  v131[9] = v138;
  v139 = *((_QWORD *)v132 + 11);
  v131[10] = *((_QWORD *)v132 + 10);
  v131[11] = v139;
  v140 = (void *)*((_QWORD *)v132 + 12);
  v258 = (void *)*((_QWORD *)v132 + 13);
  v131[12] = v140;
  v131[13] = v258;
  v141 = v284[13];
  v260 = (char *)v131 + v141;
  v142 = &v132[v141];
  v143 = v128;
  v144 = __dstb;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v145 = v140;
  v146 = v258;
  if (v283(v142, 1, v265))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v260, v142, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
    v148 = v281;
  }
  else
  {
    v148 = v281;
    (*(void (**)(char *, char *, uint64_t))(v281 + 16))(v260, v142, v265);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v281 + 56))(v260, 0, 1, v265);
  }
  v149 = v284[14];
  v150 = (char *)v131 + v149;
  v151 = &v132[v149];
  if (v283(&v132[v149], 1, v265))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v150, v151, v265);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v150, 0, 1, v265);
  }
  v153 = v284[15];
  v154 = (_QWORD *)((char *)v131 + v153);
  v155 = &v132[v153];
  v156 = *((_QWORD *)v155 + 1);
  *v154 = *(_QWORD *)v155;
  v154[1] = v156;
  v157 = v284[16];
  v158 = (_QWORD *)((char *)v131 + v157);
  v159 = &v132[v157];
  v160 = *((_QWORD *)v159 + 1);
  *v158 = *(_QWORD *)v159;
  v158[1] = v160;
  *((_BYTE *)v131 + v284[17]) = v132[v284[17]];
  *((_BYTE *)v131 + v284[18]) = v132[v284[18]];
  v161 = v284[19];
  v162 = (char *)v131 + v161;
  v163 = (uint64_t *)&v132[v161];
  v164 = *(_QWORD *)&v132[v161 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v164 >> 60 == 15)
  {
    *(_OWORD *)v162 = *(_OWORD *)v163;
  }
  else
  {
    v165 = *v163;
    sub_2415A0A90(*v163, v164);
    *(_QWORD *)v162 = v165;
    *((_QWORD *)v162 + 1) = v164;
  }
  v166 = v284[20];
  v167 = (char *)v131 + v166;
  v168 = &v132[v166];
  if (v268(&v132[v166], 1, v272))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v264 + 16))(v167, v168, v272);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v167, 0, 1, v272);
  }
  v170 = v284[21];
  v171 = *(void **)&v132[v170];
  *(_QWORD *)((char *)v131 + v170) = v171;
  v172 = v284[22];
  v173 = (char *)v131 + v172;
  v174 = &v132[v172];
  v175 = v171;
  if (v283(v174, 1, v265))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v173, v174, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v173, v174, v265);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v173, 0, 1, v265);
  }
  v177 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v266)((char *)v131 + v177[5], &v132[v177[5]], v267);
  v274((char *)v131 + v177[6], &v132[v177[6]], v276);
  v178 = v177[7];
  v179 = *(void **)&v132[v178];
  *(_QWORD *)((char *)v131 + v178) = v179;
  v180 = v177[8];
  v181 = *(void **)&v132[v180];
  *(_QWORD *)((char *)v131 + v180) = v181;
  v182 = v177[9];
  v183 = (_QWORD *)((char *)v131 + v182);
  v184 = &v132[v182];
  v185 = *((_QWORD *)v184 + 1);
  *v183 = *(_QWORD *)v184;
  v183[1] = v185;
  v186 = v277[11];
  v187 = &v269[v186];
  v188 = &v279[v186];
  v189 = *(void **)&v279[v186];
  *(_QWORD *)&v269[v186] = v189;
  v190 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v191 = *(int *)(v190 + 20);
  v192 = &v187[v191];
  v193 = &v188[v191];
  v194 = v179;
  v195 = v181;
  swift_bridgeObjectRetain();
  v196 = v189;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v266)(v192, v193, v267);
  v274(&v187[*(int *)(v190 + 24)], &v188[*(int *)(v190 + 24)], v276);
  v197 = v277[12];
  v198 = &v269[v197];
  v199 = &v279[v197];
  v200 = *(_QWORD *)&v279[v197 + 8];
  *(_QWORD *)v198 = *(_QWORD *)&v279[v197];
  *((_QWORD *)v198 + 1) = v200;
  v270 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v201 = v270[5];
  v278 = v198;
  v280 = v199;
  v202 = &v198[v201];
  v203 = &v199[v201];
  v204 = *(_QWORD *)&v199[v201 + 8];
  *(_QWORD *)v202 = *(_QWORD *)&v199[v201];
  *((_QWORD *)v202 + 1) = v204;
  v206 = *(_QWORD *)&v199[v201 + 16];
  v205 = *(_QWORD *)&v199[v201 + 24];
  *((_QWORD *)v202 + 2) = v206;
  *((_QWORD *)v202 + 3) = v205;
  v207 = *((_QWORD *)v203 + 5);
  *((_QWORD *)v202 + 4) = *((_QWORD *)v203 + 4);
  *((_QWORD *)v202 + 5) = v207;
  v208 = *((_QWORD *)v203 + 7);
  *((_QWORD *)v202 + 6) = *((_QWORD *)v203 + 6);
  *((_QWORD *)v202 + 7) = v208;
  v209 = *((_QWORD *)v203 + 9);
  *((_QWORD *)v202 + 8) = *((_QWORD *)v203 + 8);
  *((_QWORD *)v202 + 9) = v209;
  v210 = *((_QWORD *)v203 + 11);
  *((_QWORD *)v202 + 10) = *((_QWORD *)v203 + 10);
  *((_QWORD *)v202 + 11) = v210;
  v212 = (void *)*((_QWORD *)v203 + 12);
  v211 = (void *)*((_QWORD *)v203 + 13);
  *((_QWORD *)v202 + 12) = v212;
  *((_QWORD *)v202 + 13) = v211;
  v213 = v284[13];
  v261 = &v202[v213];
  __dsta = &v203[v213];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v214 = v212;
  v215 = v211;
  if (v283(__dsta, 1, v265))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v261, __dsta, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
    v217 = v281;
  }
  else
  {
    v217 = v281;
    (*(void (**)(char *, char *, uint64_t))(v281 + 16))(v261, __dsta, v265);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v281 + 56))(v261, 0, 1, v265);
  }
  v218 = v284[14];
  v219 = &v202[v218];
  v220 = &v203[v218];
  if (v283(&v203[v218], 1, v265))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v219, v220, *(_QWORD *)(*(_QWORD *)(v221 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v219, v220, v265);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v219, 0, 1, v265);
  }
  v222 = v284[15];
  v223 = &v202[v222];
  v224 = &v203[v222];
  v225 = *((_QWORD *)v224 + 1);
  *v223 = *(_QWORD *)v224;
  v223[1] = v225;
  v226 = v284[16];
  v227 = &v202[v226];
  v228 = &v203[v226];
  v229 = *((_QWORD *)v228 + 1);
  *v227 = *(_QWORD *)v228;
  v227[1] = v229;
  v202[v284[17]] = v203[v284[17]];
  v202[v284[18]] = v203[v284[18]];
  v230 = v284[19];
  v231 = &v202[v230];
  v232 = (uint64_t *)&v203[v230];
  v233 = *(_QWORD *)&v203[v230 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v233 >> 60 == 15)
  {
    *(_OWORD *)v231 = *(_OWORD *)v232;
  }
  else
  {
    v234 = *v232;
    sub_2415A0A90(*v232, v233);
    *(_QWORD *)v231 = v234;
    *((_QWORD *)v231 + 1) = v233;
  }
  v235 = v284[20];
  v236 = &v202[v235];
  v237 = &v203[v235];
  if (v268(&v203[v235], 1, v272))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v264 + 16))(v236, v237, v272);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v236, 0, 1, v272);
  }
  v239 = v284[21];
  v240 = *(void **)&v203[v239];
  *(_QWORD *)&v202[v239] = v240;
  v241 = v284[22];
  v242 = &v202[v241];
  v243 = &v203[v241];
  v244 = v240;
  if (v283(v243, 1, v265))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v242, v243, *(_QWORD *)(*(_QWORD *)(v245 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v242, v243, v265);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v242, 0, 1, v265);
  }
  ((void (*)(char *, _BYTE *, uint64_t))v266)(&v278[v270[6]], &v280[v270[6]], v267);
  v274(&v278[v270[7]], &v280[v270[7]], v276);
  *(_QWORD *)&v278[v270[8]] = *(_QWORD *)&v280[v270[8]];
  v246 = v270[9];
  v247 = &v278[v246];
  v248 = &v280[v246];
  swift_retain();
  if (v283(v248, 1, v265))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v247, v248, *(_QWORD *)(*(_QWORD *)(v249 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, _BYTE *, uint64_t))(v217 + 16))(v247, v248, v265);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v247, 0, 1, v265);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  swift_retain();
  return a1;
}

_BYTE *sub_2415D2F70(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  void **v4;
  _BYTE *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  id v70;
  uint64_t v71;
  char *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _BYTE *v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  void *v81;
  void *v82;
  id v83;
  void *v84;
  void *v85;
  id v86;
  uint64_t v87;
  char *v88;
  char *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  id v121;
  uint64_t v122;
  char *v123;
  char *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  _BYTE *v129;
  uint64_t v130;
  void *v131;
  void *v132;
  id v133;
  uint64_t v134;
  char *v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void *v140;
  id v141;
  uint64_t v142;
  void *v143;
  void *v144;
  id v145;
  uint64_t v146;
  char *v147;
  _QWORD *v148;
  void *v149;
  void *v150;
  id v151;
  void *v152;
  void *v153;
  id v154;
  uint64_t v155;
  char *v156;
  char *v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  _QWORD *v168;
  uint64_t v169;
  char *v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  void *v188;
  id v189;
  uint64_t v190;
  char *v191;
  char *v192;
  int v193;
  uint64_t v194;
  int *v195;
  uint64_t v196;
  void *v197;
  void *v198;
  id v199;
  uint64_t v200;
  void *v201;
  void *v202;
  id v203;
  uint64_t v204;
  char *v205;
  _QWORD *v206;
  uint64_t v207;
  void **v208;
  _BYTE *v209;
  void *v210;
  void *v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  _BYTE *v216;
  uint64_t v217;
  char *v218;
  _QWORD *v219;
  void *v220;
  void *v221;
  id v222;
  void *v223;
  void *v224;
  id v225;
  uint64_t v226;
  char *v227;
  char *v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  int v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  _QWORD *v239;
  uint64_t v240;
  char *v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  int v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  void *v259;
  id v260;
  uint64_t v261;
  char *v262;
  char *v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  int v269;
  int v270;
  uint64_t v271;
  int *v273;
  _BYTE *v274;
  void (*v278)(char *, char *, uint64_t);
  uint64_t v279;
  uint64_t v280;
  void (*v281)(char *, _BYTE *);
  uint64_t v282;
  int *v283;
  uint64_t (*v284)(char *, uint64_t, uint64_t);
  _BYTE *v285;
  int *v286;
  void **v287;
  _BYTE *v288;
  uint64_t v289;
  uint64_t v290;

  *a1 = *a2;
  v3 = *(int *)(a3 + 20);
  v4 = (void **)&a1[v3];
  v5 = &a2[v3];
  v6 = *(void **)&a2[v3];
  v7 = *v4;
  *v4 = v6;
  v8 = v6;

  v283 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v9 = v283[5];
  v285 = v5;
  v287 = v4;
  v10 = (char *)v4 + v9;
  v11 = &v5[v9];
  *(_QWORD *)v10 = *(_QWORD *)&v5[v9];
  *((_QWORD *)v10 + 1) = *(_QWORD *)&v5[v9 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 2) = v11[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 3) = v11[3];
  *((_QWORD *)v10 + 4) = v11[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 5) = v11[5];
  *((_QWORD *)v10 + 6) = v11[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 7) = v11[7];
  *((_QWORD *)v10 + 8) = v11[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 9) = v11[9];
  *((_QWORD *)v10 + 10) = v11[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 11) = v11[11];
  v12 = (void *)*((_QWORD *)v10 + 12);
  v13 = (void *)v11[12];
  *((_QWORD *)v10 + 12) = v13;
  v14 = v13;

  v15 = (void *)*((_QWORD *)v10 + 13);
  v16 = (void *)v11[13];
  *((_QWORD *)v10 + 13) = v16;
  v17 = v16;

  v18 = (int *)type metadata accessor for MedicalIDData();
  v19 = v18[13];
  v20 = &v10[v19];
  v21 = (char *)v11 + v19;
  v22 = sub_2416B9B50();
  v290 = *(_QWORD *)(v22 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v290 + 48);
  LODWORD(v15) = v23(v20, 1, v22);
  v24 = v23(v21, 1, v22);
  if ((_DWORD)v15)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v20, v22);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 24))(v20, v21, v22);
LABEL_7:
  v26 = v18[14];
  v27 = &v10[v26];
  v28 = (char *)v11 + v26;
  v29 = v23(&v10[v26], 1, v22);
  v30 = v23(v28, 1, v22);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v27, v28, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v27, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v27, v22);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 24))(v27, v28, v22);
LABEL_13:
  v32 = v18[15];
  v33 = &v10[v32];
  v34 = (_QWORD *)((char *)v11 + v32);
  *(_QWORD *)v33 = *v34;
  *((_QWORD *)v33 + 1) = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 = v18[16];
  v36 = &v10[v35];
  v37 = (_QWORD *)((char *)v11 + v35);
  *(_QWORD *)v36 = *v37;
  *((_QWORD *)v36 + 1) = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10[v18[17]] = *((_BYTE *)v11 + v18[17]);
  v10[v18[18]] = *((_BYTE *)v11 + v18[18]);
  v38 = v18[19];
  v39 = (uint64_t *)&v10[v38];
  v40 = (_QWORD *)((char *)v11 + v38);
  v41 = *(_QWORD *)((char *)v11 + v38 + 8);
  if (*(_QWORD *)&v10[v38 + 8] >> 60 == 15)
  {
    if (v41 >> 60 != 15)
    {
      v42 = *v40;
      sub_2415A0A90(v42, v41);
      *v39 = v42;
      v39[1] = v41;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v41 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v39);
LABEL_18:
    *(_OWORD *)v39 = *(_OWORD *)v40;
    goto LABEL_20;
  }
  v43 = *v40;
  sub_2415A0A90(v43, v41);
  v44 = *v39;
  v45 = v39[1];
  *v39 = v43;
  v39[1] = v41;
  sub_2415A0DAC(v44, v45);
LABEL_20:
  v46 = v18[20];
  v47 = &v10[v46];
  v48 = (char *)v11 + v46;
  v49 = sub_2416B9A18();
  v280 = *(_QWORD *)(v49 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v280 + 48);
  v51 = v50(v47, 1, v49);
  v289 = v49;
  v284 = v50;
  v52 = v50(v48, 1, v49);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v280 + 16))(v47, v48, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v280 + 56))(v47, 0, 1, v49);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v280 + 8))(v47, v49);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v280 + 24))(v47, v48, v49);
LABEL_26:
  v54 = v18[21];
  v55 = *(void **)&v10[v54];
  v56 = *(void **)((char *)v11 + v54);
  *(_QWORD *)&v10[v54] = v56;
  v57 = v56;

  v58 = v18[22];
  v59 = &v10[v58];
  v60 = (char *)v11 + v58;
  LODWORD(v55) = v23(&v10[v58], 1, v22);
  v61 = v23(v60, 1, v22);
  if ((_DWORD)v55)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v59, v60, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v59, 0, 1, v22);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v59, v22);
LABEL_31:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 24))(v59, v60, v22);
LABEL_32:
  v63 = v283[6];
  v64 = (char *)v287 + v63;
  v65 = &v285[v63];
  v66 = sub_2416B9C70();
  v278 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 24);
  v279 = v66;
  ((void (*)(char *, _BYTE *))v278)(v64, v65);
  v67 = v283[7];
  v68 = *(void **)&v285[v67];
  v69 = *(void **)((char *)v287 + v67);
  *(void **)((char *)v287 + v67) = v68;
  v70 = v68;

  v71 = v283[8];
  v72 = (char *)v287 + v71;
  v73 = &v285[v71];
  v74 = sub_2416B9C10();
  v281 = *(void (**)(char *, _BYTE *))(*(_QWORD *)(v74 - 8) + 24);
  v282 = v74;
  v281(v72, v73);
  v75 = v283[9];
  v76 = (void **)((char *)v287 + v75);
  v77 = &v285[v75];
  *v76 = *(_QWORD *)&v285[v75];
  v76[1] = *(_QWORD *)&v285[v75 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v273 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v274 = v77;
  v78 = v273[5];
  v79 = (char *)v76 + v78;
  v80 = &v77[v78];
  *(_QWORD *)v79 = *(_QWORD *)&v77[v78];
  *((_QWORD *)v79 + 1) = *(_QWORD *)&v77[v78 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v79 + 2) = v80[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v79 + 3) = v80[3];
  *((_QWORD *)v79 + 4) = v80[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v79 + 5) = v80[5];
  *((_QWORD *)v79 + 6) = v80[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v79 + 7) = v80[7];
  *((_QWORD *)v79 + 8) = v80[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v79 + 9) = v80[9];
  *((_QWORD *)v79 + 10) = v80[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v79 + 11) = v80[11];
  v81 = (void *)*((_QWORD *)v79 + 12);
  v82 = (void *)v80[12];
  *((_QWORD *)v79 + 12) = v82;
  v83 = v82;

  v84 = (void *)*((_QWORD *)v79 + 13);
  v85 = (void *)v80[13];
  *((_QWORD *)v79 + 13) = v85;
  v86 = v85;

  v87 = v18[13];
  v88 = &v79[v87];
  v89 = (char *)v80 + v87;
  LODWORD(v84) = v23(&v79[v87], 1, v22);
  v90 = v23(v89, 1, v22);
  if ((_DWORD)v84)
  {
    if (!v90)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v88, v89, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v88, 0, 1, v22);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v90)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v88, v22);
LABEL_37:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 24))(v88, v89, v22);
LABEL_38:
  v92 = v18[14];
  v93 = &v79[v92];
  v94 = (char *)v80 + v92;
  v95 = v23(&v79[v92], 1, v22);
  v96 = v23(v94, 1, v22);
  if (v95)
  {
    if (!v96)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v93, v94, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v93, 0, 1, v22);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v96)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v93, v22);
LABEL_43:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 24))(v93, v94, v22);
LABEL_44:
  v98 = v18[15];
  v99 = &v79[v98];
  v100 = (_QWORD *)((char *)v80 + v98);
  *(_QWORD *)v99 = *v100;
  *((_QWORD *)v99 + 1) = v100[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v101 = v18[16];
  v102 = &v79[v101];
  v103 = (_QWORD *)((char *)v80 + v101);
  *(_QWORD *)v102 = *v103;
  *((_QWORD *)v102 + 1) = v103[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v79[v18[17]] = *((_BYTE *)v80 + v18[17]);
  v79[v18[18]] = *((_BYTE *)v80 + v18[18]);
  v104 = v18[19];
  v105 = (uint64_t *)&v79[v104];
  v106 = (_QWORD *)((char *)v80 + v104);
  v107 = *(_QWORD *)((char *)v80 + v104 + 8);
  if (*(_QWORD *)&v79[v104 + 8] >> 60 == 15)
  {
    if (v107 >> 60 != 15)
    {
      v108 = *v106;
      sub_2415A0A90(v108, v107);
      *v105 = v108;
      v105[1] = v107;
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  if (v107 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v105);
LABEL_49:
    *(_OWORD *)v105 = *(_OWORD *)v106;
    goto LABEL_51;
  }
  v109 = *v106;
  sub_2415A0A90(v109, v107);
  v110 = *v105;
  v111 = v105[1];
  *v105 = v109;
  v105[1] = v107;
  sub_2415A0DAC(v110, v111);
LABEL_51:
  v112 = v18[20];
  v113 = &v79[v112];
  v114 = (char *)v80 + v112;
  v115 = v284(&v79[v112], 1, v289);
  v116 = v284(v114, 1, v289);
  if (v115)
  {
    if (!v116)
    {
      (*(void (**)(char *, char *, uint64_t))(v280 + 16))(v113, v114, v289);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v280 + 56))(v113, 0, 1, v289);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  if (v116)
  {
    (*(void (**)(char *, uint64_t))(v280 + 8))(v113, v289);
LABEL_56:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(char *, char *, uint64_t))(v280 + 24))(v113, v114, v289);
LABEL_57:
  v118 = v18[21];
  v119 = *(void **)&v79[v118];
  v120 = *(void **)((char *)v80 + v118);
  *(_QWORD *)&v79[v118] = v120;
  v121 = v120;

  v122 = v18[22];
  v123 = &v79[v122];
  v124 = (char *)v80 + v122;
  LODWORD(v119) = v23(&v79[v122], 1, v22);
  v125 = v23(v124, 1, v22);
  if ((_DWORD)v119)
  {
    if (!v125)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v123, v124, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v123, 0, 1, v22);
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (v125)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v123, v22);
LABEL_62:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 24))(v123, v124, v22);
LABEL_63:
  ((void (*)(char *, _BYTE *, uint64_t))v281)((char *)v76 + v273[6], &v274[v273[6]], v282);
  v127 = v273[7];
  v128 = (char *)v76 + v127;
  v129 = &v274[v127];
  ((void (*)(char *, _BYTE *, uint64_t))v281)((char *)v76 + v127, &v274[v127], v282);
  v130 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v131 = *(void **)&v129[v130];
  v132 = *(void **)&v128[v130];
  *(_QWORD *)&v128[v130] = v131;
  v133 = v131;

  v134 = v273[8];
  v135 = (char *)v76 + v134;
  v136 = &v274[v134];
  ((void (*)(char *, _BYTE *, uint64_t))v281)((char *)v76 + v134, &v274[v134], v282);
  v137 = type metadata accessor for MedicalIDWeightFormatter();
  v138 = *(int *)(v137 + 20);
  v139 = *(void **)&v136[v138];
  v140 = *(void **)&v135[v138];
  *(_QWORD *)&v135[v138] = v139;
  v141 = v139;

  v142 = *(int *)(v137 + 24);
  v143 = *(void **)&v136[v142];
  v144 = *(void **)&v135[v142];
  *(_QWORD *)&v135[v142] = v143;
  v145 = v143;

  v146 = v283[10];
  v147 = (char *)v287 + v146;
  v148 = &v285[v146];
  *(_QWORD *)v147 = *(_QWORD *)&v285[v146];
  *((_QWORD *)v147 + 1) = *(_QWORD *)&v285[v146 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v147 + 2) = v148[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v147 + 3) = v148[3];
  *((_QWORD *)v147 + 4) = v148[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v147 + 5) = v148[5];
  *((_QWORD *)v147 + 6) = v148[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v147 + 7) = v148[7];
  *((_QWORD *)v147 + 8) = v148[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v147 + 9) = v148[9];
  *((_QWORD *)v147 + 10) = v148[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v147 + 11) = v148[11];
  v149 = (void *)*((_QWORD *)v147 + 12);
  v150 = (void *)v148[12];
  *((_QWORD *)v147 + 12) = v150;
  v151 = v150;

  v152 = (void *)*((_QWORD *)v147 + 13);
  v153 = (void *)v148[13];
  *((_QWORD *)v147 + 13) = v153;
  v154 = v153;

  v155 = v18[13];
  v156 = &v147[v155];
  v157 = (char *)v148 + v155;
  LODWORD(v152) = v23(&v147[v155], 1, v22);
  v158 = v23(v157, 1, v22);
  if ((_DWORD)v152)
  {
    if (!v158)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v156, v157, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v156, 0, 1, v22);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v158)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v156, v22);
LABEL_68:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
    goto LABEL_69;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 24))(v156, v157, v22);
LABEL_69:
  v160 = v18[14];
  v161 = &v147[v160];
  v162 = (char *)v148 + v160;
  v163 = v23(&v147[v160], 1, v22);
  v164 = v23(v162, 1, v22);
  if (v163)
  {
    if (!v164)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v161, v162, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v161, 0, 1, v22);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v164)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v161, v22);
LABEL_74:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 24))(v161, v162, v22);
LABEL_75:
  v166 = v18[15];
  v167 = &v147[v166];
  v168 = (_QWORD *)((char *)v148 + v166);
  *(_QWORD *)v167 = *v168;
  *((_QWORD *)v167 + 1) = v168[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v169 = v18[16];
  v170 = &v147[v169];
  v171 = (_QWORD *)((char *)v148 + v169);
  *(_QWORD *)v170 = *v171;
  *((_QWORD *)v170 + 1) = v171[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v147[v18[17]] = *((_BYTE *)v148 + v18[17]);
  v147[v18[18]] = *((_BYTE *)v148 + v18[18]);
  v172 = v18[19];
  v173 = (uint64_t *)&v147[v172];
  v174 = (_QWORD *)((char *)v148 + v172);
  v175 = *(_QWORD *)((char *)v148 + v172 + 8);
  if (*(_QWORD *)&v147[v172 + 8] >> 60 == 15)
  {
    if (v175 >> 60 != 15)
    {
      v176 = *v174;
      sub_2415A0A90(v176, v175);
      *v173 = v176;
      v173[1] = v175;
      goto LABEL_82;
    }
    goto LABEL_80;
  }
  if (v175 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v173);
LABEL_80:
    *(_OWORD *)v173 = *(_OWORD *)v174;
    goto LABEL_82;
  }
  v177 = *v174;
  sub_2415A0A90(v177, v175);
  v178 = *v173;
  v179 = v173[1];
  *v173 = v177;
  v173[1] = v175;
  sub_2415A0DAC(v178, v179);
LABEL_82:
  v180 = v18[20];
  v181 = &v147[v180];
  v182 = (char *)v148 + v180;
  v183 = v284(&v147[v180], 1, v289);
  v184 = v284(v182, 1, v289);
  if (v183)
  {
    if (!v184)
    {
      (*(void (**)(char *, char *, uint64_t))(v280 + 16))(v181, v182, v289);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v280 + 56))(v181, 0, 1, v289);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v184)
  {
    (*(void (**)(char *, uint64_t))(v280 + 8))(v181, v289);
LABEL_87:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v280 + 24))(v181, v182, v289);
LABEL_88:
  v186 = v18[21];
  v187 = *(void **)&v147[v186];
  v188 = *(void **)((char *)v148 + v186);
  *(_QWORD *)&v147[v186] = v188;
  v189 = v188;

  v190 = v18[22];
  v191 = &v147[v190];
  v192 = (char *)v148 + v190;
  LODWORD(v187) = v23(&v147[v190], 1, v22);
  v193 = v23(v192, 1, v22);
  if ((_DWORD)v187)
  {
    if (!v193)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v191, v192, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v191, 0, 1, v22);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v193)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v191, v22);
LABEL_93:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 24))(v191, v192, v22);
LABEL_94:
  v195 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v278(&v147[v195[5]], (char *)v148 + v195[5], v279);
  ((void (*)(char *, char *, uint64_t))v281)(&v147[v195[6]], (char *)v148 + v195[6], v282);
  v196 = v195[7];
  v197 = *(void **)&v147[v196];
  v198 = *(void **)((char *)v148 + v196);
  *(_QWORD *)&v147[v196] = v198;
  v199 = v198;

  v200 = v195[8];
  v201 = *(void **)((char *)v148 + v200);
  v202 = *(void **)&v147[v200];
  *(_QWORD *)&v147[v200] = v201;
  v203 = v201;

  v204 = v195[9];
  v205 = &v147[v204];
  v206 = (_QWORD *)((char *)v148 + v204);
  *(_QWORD *)v205 = *v206;
  *((_QWORD *)v205 + 1) = v206[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v207 = v283[11];
  v208 = (void **)((char *)v287 + v207);
  v209 = &v285[v207];
  v210 = *(void **)&v285[v207];
  v211 = *v208;
  *v208 = v210;
  v212 = v210;

  v213 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v278((char *)v208 + *(int *)(v213 + 20), &v209[*(int *)(v213 + 20)], v279);
  ((void (*)(char *, _BYTE *, uint64_t))v281)((char *)v208 + *(int *)(v213 + 24), &v209[*(int *)(v213 + 24)], v282);
  v214 = v283[12];
  v215 = (char *)v287 + v214;
  v216 = &v285[v214];
  *(_QWORD *)v215 = *(_QWORD *)&v285[v214];
  *((_QWORD *)v215 + 1) = *(_QWORD *)&v285[v214 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v286 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v288 = v216;
  v217 = v286[5];
  v218 = &v215[v217];
  v219 = &v216[v217];
  *(_QWORD *)v218 = *(_QWORD *)&v216[v217];
  *((_QWORD *)v218 + 1) = *(_QWORD *)&v216[v217 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v218 + 2) = v219[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v218 + 3) = v219[3];
  *((_QWORD *)v218 + 4) = v219[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v218 + 5) = v219[5];
  *((_QWORD *)v218 + 6) = v219[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v218 + 7) = v219[7];
  *((_QWORD *)v218 + 8) = v219[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v218 + 9) = v219[9];
  *((_QWORD *)v218 + 10) = v219[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v218 + 11) = v219[11];
  v220 = (void *)*((_QWORD *)v218 + 12);
  v221 = (void *)v219[12];
  *((_QWORD *)v218 + 12) = v221;
  v222 = v221;

  v223 = (void *)*((_QWORD *)v218 + 13);
  v224 = (void *)v219[13];
  *((_QWORD *)v218 + 13) = v224;
  v225 = v224;

  v226 = v18[13];
  v227 = &v218[v226];
  v228 = (char *)v219 + v226;
  LODWORD(v223) = v23(&v218[v226], 1, v22);
  v229 = v23(v228, 1, v22);
  if ((_DWORD)v223)
  {
    if (!v229)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v227, v228, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v227, 0, 1, v22);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v229)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v227, v22);
LABEL_99:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v227, v228, *(_QWORD *)(*(_QWORD *)(v230 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 24))(v227, v228, v22);
LABEL_100:
  v231 = v18[14];
  v232 = &v218[v231];
  v233 = (char *)v219 + v231;
  v234 = v23(&v218[v231], 1, v22);
  v235 = v23(v233, 1, v22);
  if (v234)
  {
    if (!v235)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v232, v233, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v232, 0, 1, v22);
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  if (v235)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v232, v22);
LABEL_105:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v232, v233, *(_QWORD *)(*(_QWORD *)(v236 - 8) + 64));
    goto LABEL_106;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 24))(v232, v233, v22);
LABEL_106:
  v237 = v18[15];
  v238 = &v218[v237];
  v239 = (_QWORD *)((char *)v219 + v237);
  *(_QWORD *)v238 = *v239;
  *((_QWORD *)v238 + 1) = v239[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v240 = v18[16];
  v241 = &v218[v240];
  v242 = (_QWORD *)((char *)v219 + v240);
  *(_QWORD *)v241 = *v242;
  *((_QWORD *)v241 + 1) = v242[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v218[v18[17]] = *((_BYTE *)v219 + v18[17]);
  v218[v18[18]] = *((_BYTE *)v219 + v18[18]);
  v243 = v18[19];
  v244 = (uint64_t *)&v218[v243];
  v245 = (_QWORD *)((char *)v219 + v243);
  v246 = *(_QWORD *)((char *)v219 + v243 + 8);
  if (*(_QWORD *)&v218[v243 + 8] >> 60 == 15)
  {
    if (v246 >> 60 != 15)
    {
      v247 = *v245;
      sub_2415A0A90(v247, v246);
      *v244 = v247;
      v244[1] = v246;
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  if (v246 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v244);
LABEL_111:
    *(_OWORD *)v244 = *(_OWORD *)v245;
    goto LABEL_113;
  }
  v248 = *v245;
  sub_2415A0A90(v248, v246);
  v249 = *v244;
  v250 = v244[1];
  *v244 = v248;
  v244[1] = v246;
  sub_2415A0DAC(v249, v250);
LABEL_113:
  v251 = v18[20];
  v252 = &v218[v251];
  v253 = (char *)v219 + v251;
  v254 = v284(&v218[v251], 1, v289);
  v255 = v284(v253, 1, v289);
  if (v254)
  {
    if (!v255)
    {
      (*(void (**)(char *, char *, uint64_t))(v280 + 16))(v252, v253, v289);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v280 + 56))(v252, 0, 1, v289);
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  if (v255)
  {
    (*(void (**)(char *, uint64_t))(v280 + 8))(v252, v289);
LABEL_118:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v252, v253, *(_QWORD *)(*(_QWORD *)(v256 - 8) + 64));
    goto LABEL_119;
  }
  (*(void (**)(char *, char *, uint64_t))(v280 + 24))(v252, v253, v289);
LABEL_119:
  v257 = v18[21];
  v258 = *(void **)&v218[v257];
  v259 = *(void **)((char *)v219 + v257);
  *(_QWORD *)&v218[v257] = v259;
  v260 = v259;

  v261 = v18[22];
  v262 = &v218[v261];
  v263 = (char *)v219 + v261;
  LODWORD(v258) = v23(&v218[v261], 1, v22);
  v264 = v23(v263, 1, v22);
  if ((_DWORD)v258)
  {
    if (!v264)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v262, v263, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v262, 0, 1, v22);
      goto LABEL_125;
    }
    goto LABEL_124;
  }
  if (v264)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v262, v22);
LABEL_124:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v262, v263, *(_QWORD *)(*(_QWORD *)(v265 - 8) + 64));
    goto LABEL_125;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 24))(v262, v263, v22);
LABEL_125:
  v278(&v215[v286[6]], &v288[v286[6]], v279);
  ((void (*)(char *, _BYTE *, uint64_t))v281)(&v215[v286[7]], &v288[v286[7]], v282);
  *(_QWORD *)&v215[v286[8]] = *(_QWORD *)&v288[v286[8]];
  swift_retain();
  swift_release();
  v266 = v286[9];
  v267 = &v215[v266];
  v268 = &v288[v266];
  v269 = v23(&v215[v266], 1, v22);
  v270 = v23(v268, 1, v22);
  if (!v269)
  {
    if (!v270)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 24))(v267, v268, v22);
      goto LABEL_131;
    }
    (*(void (**)(char *, uint64_t))(v290 + 8))(v267, v22);
    goto LABEL_130;
  }
  if (v270)
  {
LABEL_130:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v267, v268, *(_QWORD *)(*(_QWORD *)(v271 - 8) + 64));
    goto LABEL_131;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v267, v268, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v267, 0, 1, v22);
LABEL_131:
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  swift_retain();
  swift_release();
  return a1;
}

_BYTE *sub_2415D4990(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int *v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _BYTE *v41;
  uint64_t v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  char *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  int *v97;
  uint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  uint64_t v120;
  _BYTE *result;
  int *v122;
  int *v126;
  void (*v127)(_BYTE *, _BYTE *);
  uint64_t v128;
  void (*v129)(char *, _BYTE *, uint64_t);
  uint64_t v130;
  unsigned int (*v131)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int (*v136)(_BYTE *, uint64_t, uint64_t);

  *a1 = *a2;
  v3 = *(int *)(a3 + 20);
  v4 = &a1[v3];
  v5 = &a2[v3];
  *(_QWORD *)&a1[v3] = *(_QWORD *)&a2[v3];
  v126 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v6 = v126[5];
  v132 = v5;
  v133 = v4;
  v7 = &v4[v6];
  v8 = &v5[v6];
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
  *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
  *((_OWORD *)v7 + 6) = *((_OWORD *)v8 + 6);
  v9 = (int *)type metadata accessor for MedicalIDData();
  v10 = v9[13];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_2416B9B50();
  v14 = *(_QWORD *)(v13 - 8);
  v136 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48);
  if (v136(v12, 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = v9[14];
  v17 = &v7[v16];
  v18 = &v8[v16];
  if (v136(&v8[v16], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v17, v18, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
  }
  *(_OWORD *)&v7[v9[15]] = *(_OWORD *)&v8[v9[15]];
  *(_OWORD *)&v7[v9[16]] = *(_OWORD *)&v8[v9[16]];
  v7[v9[17]] = v8[v9[17]];
  v7[v9[18]] = v8[v9[18]];
  *(_OWORD *)&v7[v9[19]] = *(_OWORD *)&v8[v9[19]];
  v20 = v9[20];
  v21 = &v7[v20];
  v22 = &v8[v20];
  v23 = sub_2416B9A18();
  v24 = *(_QWORD *)(v23 - 8);
  v131 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48);
  if (v131(v22, 1, v23))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(_QWORD *)&v7[v9[21]] = *(_QWORD *)&v8[v9[21]];
  v26 = v9[22];
  v27 = &v7[v26];
  v28 = &v8[v26];
  v134 = v23;
  v135 = v14;
  if (v136(&v8[v26], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v27, v28, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v27, 0, 1, v13);
  }
  v30 = v126;
  v31 = v126[6];
  v32 = &v133[v31];
  v33 = &v132[v31];
  v34 = sub_2416B9C70();
  v127 = *(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v34 - 8) + 32);
  v128 = v34;
  v127(v32, v33);
  *(_QWORD *)&v133[v126[7]] = *(_QWORD *)&v132[v126[7]];
  v35 = v126[8];
  v36 = &v133[v35];
  v37 = &v132[v35];
  v38 = sub_2416B9C10();
  v129 = *(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v38 - 8) + 32);
  v130 = v38;
  ((void (*)(_BYTE *, _BYTE *))v129)(v36, v37);
  v39 = v126[9];
  v40 = &v133[v39];
  v41 = &v132[v39];
  *(_OWORD *)v40 = *(_OWORD *)&v132[v39];
  v122 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v42 = v122[5];
  v43 = &v40[v42];
  v44 = &v41[v42];
  *(_OWORD *)v43 = *(_OWORD *)&v41[v42];
  *((_QWORD *)v43 + 2) = *(_QWORD *)&v41[v42 + 16];
  *(_OWORD *)(v43 + 24) = *(_OWORD *)&v41[v42 + 24];
  *(_OWORD *)(v43 + 40) = *(_OWORD *)&v41[v42 + 40];
  *(_OWORD *)(v43 + 56) = *(_OWORD *)&v41[v42 + 56];
  *(_OWORD *)(v43 + 72) = *(_OWORD *)&v41[v42 + 72];
  *((_QWORD *)v43 + 11) = *(_QWORD *)&v41[v42 + 88];
  *((_OWORD *)v43 + 6) = *(_OWORD *)&v41[v42 + 96];
  v45 = v9[13];
  v46 = &v43[v45];
  v47 = &v44[v45];
  if (v136(&v44[v45], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, _BYTE *, uint64_t))(v135 + 32))(v46, v47, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v46, 0, 1, v13);
  }
  v49 = v9[14];
  v50 = &v43[v49];
  v51 = &v44[v49];
  if (v136(&v44[v49], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, _BYTE *, uint64_t))(v135 + 32))(v50, v51, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v50, 0, 1, v13);
  }
  *(_OWORD *)&v43[v9[15]] = *(_OWORD *)&v44[v9[15]];
  *(_OWORD *)&v43[v9[16]] = *(_OWORD *)&v44[v9[16]];
  v43[v9[17]] = v44[v9[17]];
  v43[v9[18]] = v44[v9[18]];
  *(_OWORD *)&v43[v9[19]] = *(_OWORD *)&v44[v9[19]];
  v53 = v9[20];
  v54 = &v43[v53];
  v55 = &v44[v53];
  if (v131(&v44[v53], 1, v134))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, _BYTE *, uint64_t))(v24 + 32))(v54, v55, v134);
    v30 = v126;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v54, 0, 1, v134);
  }
  *(_QWORD *)&v43[v9[21]] = *(_QWORD *)&v44[v9[21]];
  v57 = v9[22];
  v58 = &v43[v57];
  v59 = &v44[v57];
  if (v136(&v44[v57], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, _BYTE *, uint64_t))(v135 + 32))(v58, v59, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v58, 0, 1, v13);
  }
  v129(&v40[v122[6]], &v41[v122[6]], v130);
  v61 = v122[7];
  v62 = &v40[v61];
  v63 = &v41[v61];
  v129(&v40[v61], &v41[v61], v130);
  v64 = type metadata accessor for MedicalIDHeightFormatter();
  *(_QWORD *)&v62[*(int *)(v64 + 20)] = *(_QWORD *)&v63[*(int *)(v64 + 20)];
  v65 = v122[8];
  v66 = &v40[v65];
  v67 = &v41[v65];
  v129(&v40[v65], &v41[v65], v130);
  v68 = type metadata accessor for MedicalIDWeightFormatter();
  *(_QWORD *)&v66[*(int *)(v68 + 20)] = *(_QWORD *)&v67[*(int *)(v68 + 20)];
  *(_QWORD *)&v66[*(int *)(v68 + 24)] = *(_QWORD *)&v67[*(int *)(v68 + 24)];
  v69 = v30[10];
  v70 = &v133[v69];
  v71 = &v132[v69];
  *(_OWORD *)v70 = *(_OWORD *)&v132[v69];
  *((_QWORD *)v70 + 2) = *(_QWORD *)&v132[v69 + 16];
  *(_OWORD *)(v70 + 24) = *(_OWORD *)&v132[v69 + 24];
  *(_OWORD *)(v70 + 40) = *(_OWORD *)&v132[v69 + 40];
  *(_OWORD *)(v70 + 56) = *(_OWORD *)&v132[v69 + 56];
  *(_OWORD *)(v70 + 72) = *(_OWORD *)&v132[v69 + 72];
  *((_QWORD *)v70 + 11) = *(_QWORD *)&v132[v69 + 88];
  *((_OWORD *)v70 + 6) = *(_OWORD *)&v132[v69 + 96];
  v72 = v9[13];
  v73 = &v70[v72];
  v74 = &v71[v72];
  if (v136(&v71[v72], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    v76 = v135;
  }
  else
  {
    v76 = v135;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v135 + 32))(v73, v74, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v73, 0, 1, v13);
  }
  v77 = v9[14];
  v78 = &v70[v77];
  v79 = &v71[v77];
  if (v136(&v71[v77], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v76 + 32))(v78, v79, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v78, 0, 1, v13);
  }
  *(_OWORD *)&v70[v9[15]] = *(_OWORD *)&v71[v9[15]];
  *(_OWORD *)&v70[v9[16]] = *(_OWORD *)&v71[v9[16]];
  v70[v9[17]] = v71[v9[17]];
  v70[v9[18]] = v71[v9[18]];
  *(_OWORD *)&v70[v9[19]] = *(_OWORD *)&v71[v9[19]];
  v81 = v9[20];
  v82 = &v70[v81];
  v83 = &v71[v81];
  if (v131(&v71[v81], 1, v134))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 32))(v82, v83, v134);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v82, 0, 1, v134);
  }
  *(_QWORD *)&v70[v9[21]] = *(_QWORD *)&v71[v9[21]];
  v85 = v9[22];
  v86 = &v70[v85];
  v87 = &v71[v85];
  if (v136(&v71[v85], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v76 + 32))(v86, v87, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v86, 0, 1, v13);
  }
  v89 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v127)(&v70[v89[5]], &v71[v89[5]], v128);
  v129(&v70[v89[6]], &v71[v89[6]], v130);
  *(_QWORD *)&v70[v89[7]] = *(_QWORD *)&v71[v89[7]];
  *(_QWORD *)&v70[v89[8]] = *(_QWORD *)&v71[v89[8]];
  *(_OWORD *)&v70[v89[9]] = *(_OWORD *)&v71[v89[9]];
  v90 = v30[11];
  v91 = &v133[v90];
  v92 = &v132[v90];
  *(_QWORD *)&v133[v90] = *(_QWORD *)&v132[v90];
  v93 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v127)(&v91[*(int *)(v93 + 20)], &v92[*(int *)(v93 + 20)], v128);
  v129(&v91[*(int *)(v93 + 24)], &v92[*(int *)(v93 + 24)], v130);
  v94 = v30[12];
  v95 = &v133[v94];
  v96 = &v132[v94];
  *(_OWORD *)&v133[v94] = *(_OWORD *)&v132[v94];
  v97 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v98 = v97[5];
  v99 = &v95[v98];
  v100 = &v96[v98];
  *(_OWORD *)v99 = *(_OWORD *)&v96[v98];
  *((_QWORD *)v99 + 2) = *(_QWORD *)&v96[v98 + 16];
  *(_OWORD *)(v99 + 24) = *(_OWORD *)&v96[v98 + 24];
  *(_OWORD *)(v99 + 40) = *(_OWORD *)&v96[v98 + 40];
  *(_OWORD *)(v99 + 56) = *(_OWORD *)&v96[v98 + 56];
  *(_OWORD *)(v99 + 72) = *(_OWORD *)&v96[v98 + 72];
  *((_QWORD *)v99 + 11) = *(_QWORD *)&v96[v98 + 88];
  *((_OWORD *)v99 + 6) = *(_OWORD *)&v96[v98 + 96];
  v101 = v9[13];
  v102 = &v99[v101];
  v103 = &v100[v101];
  if (v136(&v100[v101], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v135 + 32))(v102, v103, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v102, 0, 1, v13);
  }
  v105 = v9[14];
  v106 = &v99[v105];
  v107 = &v100[v105];
  if (v136(&v100[v105], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v135 + 32))(v106, v107, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v106, 0, 1, v13);
  }
  *(_OWORD *)&v99[v9[15]] = *(_OWORD *)&v100[v9[15]];
  *(_OWORD *)&v99[v9[16]] = *(_OWORD *)&v100[v9[16]];
  v99[v9[17]] = v100[v9[17]];
  v99[v9[18]] = v100[v9[18]];
  *(_OWORD *)&v99[v9[19]] = *(_OWORD *)&v100[v9[19]];
  v109 = v9[20];
  v110 = &v99[v109];
  v111 = &v100[v109];
  if (v131(&v100[v109], 1, v134))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 32))(v110, v111, v134);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v110, 0, 1, v134);
  }
  *(_QWORD *)&v99[v9[21]] = *(_QWORD *)&v100[v9[21]];
  v113 = v9[22];
  v114 = &v99[v113];
  v115 = &v100[v113];
  if (v136(&v100[v113], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v135 + 32))(v114, v115, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v114, 0, 1, v13);
  }
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v127)(&v95[v97[6]], &v96[v97[6]], v128);
  v129(&v95[v97[7]], &v96[v97[7]], v130);
  *(_QWORD *)&v95[v97[8]] = *(_QWORD *)&v96[v97[8]];
  v117 = v97[9];
  v118 = &v95[v117];
  v119 = &v96[v117];
  if (v136(&v96[v117], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v135 + 32))(v118, v119, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v118, 0, 1, v13);
  }
  result = a1;
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return result;
}

_BYTE *sub_2415D5848(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  void *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t (*v52)(char *, uint64_t, uint64_t);
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  _BYTE *v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  char *v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  char *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  int v192;
  int v193;
  uint64_t v194;
  int *v195;
  uint64_t v196;
  void *v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  char *v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _BYTE *v206;
  _BYTE *v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  char *v226;
  char *v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  int v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  char *v261;
  char *v262;
  int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  int v269;
  int v270;
  uint64_t v271;
  int *v273;
  _BYTE *v274;
  void (*v278)(char *, char *, uint64_t);
  uint64_t v279;
  uint64_t v280;
  void (*v281)(char *, _BYTE *, uint64_t);
  uint64_t v282;
  int *v283;
  uint64_t (*v284)(char *, uint64_t, uint64_t);
  _BYTE *v285;
  int *v286;
  _BYTE *v287;
  _BYTE *v288;
  uint64_t v289;
  uint64_t v290;

  *a1 = *a2;
  v3 = *(int *)(a3 + 20);
  v4 = &a1[v3];
  v5 = &a2[v3];
  v6 = *(void **)&a1[v3];
  *(_QWORD *)&a1[v3] = *(_QWORD *)&a2[v3];

  v283 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v7 = v283[5];
  v285 = v5;
  v287 = v4;
  v8 = &v4[v7];
  v9 = &v5[v7];
  v10 = *(_QWORD *)&v5[v7 + 8];
  *(_QWORD *)v8 = *(_QWORD *)&v5[v7];
  *((_QWORD *)v8 + 1) = v10;
  swift_bridgeObjectRelease();
  *((_QWORD *)v8 + 2) = v9[2];
  swift_bridgeObjectRelease();
  v11 = v9[4];
  *((_QWORD *)v8 + 3) = v9[3];
  *((_QWORD *)v8 + 4) = v11;
  swift_bridgeObjectRelease();
  v12 = v9[6];
  *((_QWORD *)v8 + 5) = v9[5];
  *((_QWORD *)v8 + 6) = v12;
  swift_bridgeObjectRelease();
  v13 = v9[8];
  *((_QWORD *)v8 + 7) = v9[7];
  *((_QWORD *)v8 + 8) = v13;
  swift_bridgeObjectRelease();
  v14 = v9[10];
  *((_QWORD *)v8 + 9) = v9[9];
  *((_QWORD *)v8 + 10) = v14;
  swift_bridgeObjectRelease();
  v15 = (void *)*((_QWORD *)v8 + 12);
  v16 = v9[12];
  *((_QWORD *)v8 + 11) = v9[11];
  *((_QWORD *)v8 + 12) = v16;

  v17 = (void *)*((_QWORD *)v8 + 13);
  *((_QWORD *)v8 + 13) = v9[13];

  v18 = (int *)type metadata accessor for MedicalIDData();
  v19 = v18[13];
  v20 = &v8[v19];
  v21 = (char *)v9 + v19;
  v22 = sub_2416B9B50();
  v290 = *(_QWORD *)(v22 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v290 + 48);
  LODWORD(v5) = v23(v20, 1, v22);
  v24 = v23(v21, 1, v22);
  if ((_DWORD)v5)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 32))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v20, v22);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 40))(v20, v21, v22);
LABEL_7:
  v26 = v18[14];
  v27 = &v8[v26];
  v28 = (char *)v9 + v26;
  v29 = v23(&v8[v26], 1, v22);
  v30 = v23(v28, 1, v22);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 32))(v27, v28, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v27, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v27, v22);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 40))(v27, v28, v22);
LABEL_13:
  v32 = v18[15];
  v33 = &v8[v32];
  v34 = (_QWORD *)((char *)v9 + v32);
  v36 = *v34;
  v35 = v34[1];
  *(_QWORD *)v33 = v36;
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  v37 = v18[16];
  v38 = &v8[v37];
  v39 = (_QWORD *)((char *)v9 + v37);
  v41 = *v39;
  v40 = v39[1];
  *(_QWORD *)v38 = v41;
  *((_QWORD *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  v8[v18[17]] = *((_BYTE *)v9 + v18[17]);
  v8[v18[18]] = *((_BYTE *)v9 + v18[18]);
  v42 = v18[19];
  v43 = (uint64_t)&v8[v42];
  v44 = (char *)v9 + v42;
  v45 = *(_QWORD *)&v8[v42 + 8];
  if (v45 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v43 = *(_OWORD *)v44;
    goto LABEL_18;
  }
  v46 = *((_QWORD *)v44 + 1);
  if (v46 >> 60 == 15)
  {
    sub_2415A1B38(v43);
    goto LABEL_16;
  }
  v47 = *(_QWORD *)v43;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_QWORD *)(v43 + 8) = v46;
  sub_2415A0DAC(v47, v45);
LABEL_18:
  v48 = v18[20];
  v49 = &v8[v48];
  v50 = (char *)v9 + v48;
  v51 = sub_2416B9A18();
  v280 = *(_QWORD *)(v51 - 8);
  v52 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v280 + 48);
  v53 = v52(v49, 1, v51);
  v289 = v51;
  v284 = v52;
  v54 = v52(v50, 1, v51);
  if (v53)
  {
    if (!v54)
    {
      (*(void (**)(char *, char *, uint64_t))(v280 + 32))(v49, v50, v51);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v280 + 56))(v49, 0, 1, v51);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v54)
  {
    (*(void (**)(char *, uint64_t))(v280 + 8))(v49, v51);
LABEL_23:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v280 + 40))(v49, v50, v51);
LABEL_24:
  v56 = v18[21];
  v57 = *(void **)&v8[v56];
  *(_QWORD *)&v8[v56] = *(_QWORD *)((char *)v9 + v56);

  v58 = v18[22];
  v59 = &v8[v58];
  v60 = (char *)v9 + v58;
  v61 = v23(&v8[v58], 1, v22);
  v62 = v23(v60, 1, v22);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 32))(v59, v60, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v59, 0, 1, v22);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v59, v22);
LABEL_29:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 40))(v59, v60, v22);
LABEL_30:
  v64 = v283[6];
  v65 = &v287[v64];
  v66 = &v285[v64];
  v67 = sub_2416B9C70();
  v278 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 40);
  v279 = v67;
  ((void (*)(_BYTE *, _BYTE *))v278)(v65, v66);
  v68 = v283[7];
  v69 = *(void **)&v287[v68];
  *(_QWORD *)&v287[v68] = *(_QWORD *)&v285[v68];

  v70 = v283[8];
  v71 = &v287[v70];
  v72 = &v285[v70];
  v73 = sub_2416B9C10();
  v281 = *(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v73 - 8) + 40);
  v282 = v73;
  ((void (*)(_BYTE *, _BYTE *))v281)(v71, v72);
  v74 = v283[9];
  v75 = &v287[v74];
  v76 = &v285[v74];
  v77 = *(_QWORD *)&v285[v74 + 8];
  *v75 = *(_QWORD *)&v285[v74];
  v75[1] = v77;
  swift_bridgeObjectRelease();
  v273 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v274 = v76;
  v78 = v273[5];
  v79 = (char *)v75 + v78;
  v80 = &v76[v78];
  v81 = *(_QWORD *)&v76[v78 + 8];
  *(_QWORD *)v79 = *(_QWORD *)&v76[v78];
  *((_QWORD *)v79 + 1) = v81;
  swift_bridgeObjectRelease();
  *((_QWORD *)v79 + 2) = v80[2];
  swift_bridgeObjectRelease();
  v82 = v80[4];
  *((_QWORD *)v79 + 3) = v80[3];
  *((_QWORD *)v79 + 4) = v82;
  swift_bridgeObjectRelease();
  v83 = v80[6];
  *((_QWORD *)v79 + 5) = v80[5];
  *((_QWORD *)v79 + 6) = v83;
  swift_bridgeObjectRelease();
  v84 = v80[8];
  *((_QWORD *)v79 + 7) = v80[7];
  *((_QWORD *)v79 + 8) = v84;
  swift_bridgeObjectRelease();
  v85 = v80[10];
  *((_QWORD *)v79 + 9) = v80[9];
  *((_QWORD *)v79 + 10) = v85;
  swift_bridgeObjectRelease();
  v86 = (void *)*((_QWORD *)v79 + 12);
  v87 = v80[12];
  *((_QWORD *)v79 + 11) = v80[11];
  *((_QWORD *)v79 + 12) = v87;

  v88 = (void *)*((_QWORD *)v79 + 13);
  *((_QWORD *)v79 + 13) = v80[13];

  v89 = v18[13];
  v90 = &v79[v89];
  v91 = (char *)v80 + v89;
  LODWORD(v76) = v23(&v79[v89], 1, v22);
  v92 = v23(v91, 1, v22);
  if ((_DWORD)v76)
  {
    if (!v92)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 32))(v90, v91, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v90, 0, 1, v22);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v92)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v90, v22);
LABEL_35:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 40))(v90, v91, v22);
LABEL_36:
  v94 = v18[14];
  v95 = &v79[v94];
  v96 = (char *)v80 + v94;
  v97 = v23(&v79[v94], 1, v22);
  v98 = v23(v96, 1, v22);
  if (v97)
  {
    if (!v98)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 32))(v95, v96, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v95, 0, 1, v22);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v98)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v95, v22);
LABEL_41:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 40))(v95, v96, v22);
LABEL_42:
  v100 = v18[15];
  v101 = &v79[v100];
  v102 = (_QWORD *)((char *)v80 + v100);
  v104 = *v102;
  v103 = v102[1];
  *(_QWORD *)v101 = v104;
  *((_QWORD *)v101 + 1) = v103;
  swift_bridgeObjectRelease();
  v105 = v18[16];
  v106 = &v79[v105];
  v107 = (_QWORD *)((char *)v80 + v105);
  v109 = *v107;
  v108 = v107[1];
  *(_QWORD *)v106 = v109;
  *((_QWORD *)v106 + 1) = v108;
  swift_bridgeObjectRelease();
  v79[v18[17]] = *((_BYTE *)v80 + v18[17]);
  v79[v18[18]] = *((_BYTE *)v80 + v18[18]);
  v110 = v18[19];
  v111 = (uint64_t)&v79[v110];
  v112 = (char *)v80 + v110;
  v113 = *(_QWORD *)&v79[v110 + 8];
  if (v113 >> 60 == 15)
  {
LABEL_45:
    *(_OWORD *)v111 = *(_OWORD *)v112;
    goto LABEL_47;
  }
  v114 = *((_QWORD *)v112 + 1);
  if (v114 >> 60 == 15)
  {
    sub_2415A1B38(v111);
    goto LABEL_45;
  }
  v115 = *(_QWORD *)v111;
  *(_QWORD *)v111 = *(_QWORD *)v112;
  *(_QWORD *)(v111 + 8) = v114;
  sub_2415A0DAC(v115, v113);
LABEL_47:
  v116 = v18[20];
  v117 = &v79[v116];
  v118 = (char *)v80 + v116;
  v119 = v284(&v79[v116], 1, v289);
  v120 = v284(v118, 1, v289);
  if (v119)
  {
    if (!v120)
    {
      (*(void (**)(char *, char *, uint64_t))(v280 + 32))(v117, v118, v289);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v280 + 56))(v117, 0, 1, v289);
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (v120)
  {
    (*(void (**)(char *, uint64_t))(v280 + 8))(v117, v289);
LABEL_52:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    goto LABEL_53;
  }
  (*(void (**)(char *, char *, uint64_t))(v280 + 40))(v117, v118, v289);
LABEL_53:
  v122 = v18[21];
  v123 = *(void **)&v79[v122];
  *(_QWORD *)&v79[v122] = *(_QWORD *)((char *)v80 + v122);

  v124 = v18[22];
  v125 = &v79[v124];
  v126 = (char *)v80 + v124;
  v127 = v23(&v79[v124], 1, v22);
  v128 = v23(v126, 1, v22);
  if (v127)
  {
    if (!v128)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 32))(v125, v126, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v125, 0, 1, v22);
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  if (v128)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v125, v22);
LABEL_58:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
    goto LABEL_59;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 40))(v125, v126, v22);
LABEL_59:
  v281((char *)v75 + v273[6], &v274[v273[6]], v282);
  v130 = v273[7];
  v131 = (char *)v75 + v130;
  v132 = &v274[v130];
  v281((char *)v75 + v130, &v274[v130], v282);
  v133 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v134 = *(void **)&v131[v133];
  *(_QWORD *)&v131[v133] = *(_QWORD *)&v132[v133];

  v135 = v273[8];
  v136 = (char *)v75 + v135;
  v137 = &v274[v135];
  v281((char *)v75 + v135, &v274[v135], v282);
  v138 = type metadata accessor for MedicalIDWeightFormatter();
  v139 = *(int *)(v138 + 20);
  v140 = *(void **)&v136[v139];
  *(_QWORD *)&v136[v139] = *(_QWORD *)&v137[v139];

  v141 = *(int *)(v138 + 24);
  v142 = *(void **)&v136[v141];
  *(_QWORD *)&v136[v141] = *(_QWORD *)&v137[v141];

  v143 = v283[10];
  v144 = &v287[v143];
  v145 = &v285[v143];
  v146 = *(_QWORD *)&v285[v143 + 8];
  *(_QWORD *)v144 = *(_QWORD *)&v285[v143];
  *((_QWORD *)v144 + 1) = v146;
  swift_bridgeObjectRelease();
  *((_QWORD *)v144 + 2) = v145[2];
  swift_bridgeObjectRelease();
  v147 = v145[4];
  *((_QWORD *)v144 + 3) = v145[3];
  *((_QWORD *)v144 + 4) = v147;
  swift_bridgeObjectRelease();
  v148 = v145[6];
  *((_QWORD *)v144 + 5) = v145[5];
  *((_QWORD *)v144 + 6) = v148;
  swift_bridgeObjectRelease();
  v149 = v145[8];
  *((_QWORD *)v144 + 7) = v145[7];
  *((_QWORD *)v144 + 8) = v149;
  swift_bridgeObjectRelease();
  v150 = v145[10];
  *((_QWORD *)v144 + 9) = v145[9];
  *((_QWORD *)v144 + 10) = v150;
  swift_bridgeObjectRelease();
  v151 = (void *)*((_QWORD *)v144 + 12);
  v152 = v145[12];
  *((_QWORD *)v144 + 11) = v145[11];
  *((_QWORD *)v144 + 12) = v152;

  v153 = (void *)*((_QWORD *)v144 + 13);
  *((_QWORD *)v144 + 13) = v145[13];

  v154 = v18[13];
  v155 = &v144[v154];
  v156 = (char *)v145 + v154;
  LODWORD(v136) = v23(&v144[v154], 1, v22);
  v157 = v23(v156, 1, v22);
  if ((_DWORD)v136)
  {
    if (!v157)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 32))(v155, v156, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v155, 0, 1, v22);
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if (v157)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v155, v22);
LABEL_64:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
    goto LABEL_65;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 40))(v155, v156, v22);
LABEL_65:
  v159 = v18[14];
  v160 = &v144[v159];
  v161 = (char *)v145 + v159;
  v162 = v23(&v144[v159], 1, v22);
  v163 = v23(v161, 1, v22);
  if (v162)
  {
    if (!v163)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 32))(v160, v161, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v160, 0, 1, v22);
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v163)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v160, v22);
LABEL_70:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
    goto LABEL_71;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 40))(v160, v161, v22);
LABEL_71:
  v165 = v18[15];
  v166 = &v144[v165];
  v167 = (_QWORD *)((char *)v145 + v165);
  v169 = *v167;
  v168 = v167[1];
  *(_QWORD *)v166 = v169;
  *((_QWORD *)v166 + 1) = v168;
  swift_bridgeObjectRelease();
  v170 = v18[16];
  v171 = &v144[v170];
  v172 = (_QWORD *)((char *)v145 + v170);
  v174 = *v172;
  v173 = v172[1];
  *(_QWORD *)v171 = v174;
  *((_QWORD *)v171 + 1) = v173;
  swift_bridgeObjectRelease();
  v144[v18[17]] = *((_BYTE *)v145 + v18[17]);
  v144[v18[18]] = *((_BYTE *)v145 + v18[18]);
  v175 = v18[19];
  v176 = (uint64_t)&v144[v175];
  v177 = (char *)v145 + v175;
  v178 = *(_QWORD *)&v144[v175 + 8];
  if (v178 >> 60 == 15)
  {
LABEL_74:
    *(_OWORD *)v176 = *(_OWORD *)v177;
    goto LABEL_76;
  }
  v179 = *((_QWORD *)v177 + 1);
  if (v179 >> 60 == 15)
  {
    sub_2415A1B38(v176);
    goto LABEL_74;
  }
  v180 = *(_QWORD *)v176;
  *(_QWORD *)v176 = *(_QWORD *)v177;
  *(_QWORD *)(v176 + 8) = v179;
  sub_2415A0DAC(v180, v178);
LABEL_76:
  v181 = v18[20];
  v182 = &v144[v181];
  v183 = (char *)v145 + v181;
  v184 = v284(&v144[v181], 1, v289);
  v185 = v284(v183, 1, v289);
  if (v184)
  {
    if (!v185)
    {
      (*(void (**)(char *, char *, uint64_t))(v280 + 32))(v182, v183, v289);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v280 + 56))(v182, 0, 1, v289);
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  if (v185)
  {
    (*(void (**)(char *, uint64_t))(v280 + 8))(v182, v289);
LABEL_81:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v182, v183, *(_QWORD *)(*(_QWORD *)(v186 - 8) + 64));
    goto LABEL_82;
  }
  (*(void (**)(char *, char *, uint64_t))(v280 + 40))(v182, v183, v289);
LABEL_82:
  v187 = v18[21];
  v188 = *(void **)&v144[v187];
  *(_QWORD *)&v144[v187] = *(_QWORD *)((char *)v145 + v187);

  v189 = v18[22];
  v190 = &v144[v189];
  v191 = (char *)v145 + v189;
  v192 = v23(&v144[v189], 1, v22);
  v193 = v23(v191, 1, v22);
  if (v192)
  {
    if (!v193)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 32))(v190, v191, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v190, 0, 1, v22);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v193)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v190, v22);
LABEL_87:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 40))(v190, v191, v22);
LABEL_88:
  v195 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v278(&v144[v195[5]], (char *)v145 + v195[5], v279);
  v281(&v144[v195[6]], (_BYTE *)v145 + v195[6], v282);
  v196 = v195[7];
  v197 = *(void **)&v144[v196];
  *(_QWORD *)&v144[v196] = *(_QWORD *)((char *)v145 + v196);

  v198 = v195[8];
  v199 = *(void **)&v144[v198];
  *(_QWORD *)&v144[v198] = *(_QWORD *)((char *)v145 + v198);

  v200 = v195[9];
  v201 = &v144[v200];
  v202 = (_QWORD *)((char *)v145 + v200);
  v204 = *v202;
  v203 = v202[1];
  *(_QWORD *)v201 = v204;
  *((_QWORD *)v201 + 1) = v203;
  swift_bridgeObjectRelease();
  v205 = v283[11];
  v206 = &v287[v205];
  v207 = &v285[v205];
  v208 = *(void **)&v287[v205];
  *(_QWORD *)&v287[v205] = *(_QWORD *)&v285[v205];

  v209 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v278(&v206[*(int *)(v209 + 20)], &v207[*(int *)(v209 + 20)], v279);
  v281(&v206[*(int *)(v209 + 24)], &v207[*(int *)(v209 + 24)], v282);
  v210 = v283[12];
  v211 = &v287[v210];
  v212 = &v285[v210];
  v213 = *(_QWORD *)&v285[v210 + 8];
  *(_QWORD *)v211 = *(_QWORD *)&v285[v210];
  *((_QWORD *)v211 + 1) = v213;
  swift_bridgeObjectRelease();
  v286 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v288 = v212;
  v214 = v286[5];
  v215 = &v211[v214];
  v216 = &v212[v214];
  v217 = *(_QWORD *)&v212[v214 + 8];
  *(_QWORD *)v215 = *(_QWORD *)&v212[v214];
  *((_QWORD *)v215 + 1) = v217;
  swift_bridgeObjectRelease();
  *((_QWORD *)v215 + 2) = v216[2];
  swift_bridgeObjectRelease();
  v218 = v216[4];
  *((_QWORD *)v215 + 3) = v216[3];
  *((_QWORD *)v215 + 4) = v218;
  swift_bridgeObjectRelease();
  v219 = v216[6];
  *((_QWORD *)v215 + 5) = v216[5];
  *((_QWORD *)v215 + 6) = v219;
  swift_bridgeObjectRelease();
  v220 = v216[8];
  *((_QWORD *)v215 + 7) = v216[7];
  *((_QWORD *)v215 + 8) = v220;
  swift_bridgeObjectRelease();
  v221 = v216[10];
  *((_QWORD *)v215 + 9) = v216[9];
  *((_QWORD *)v215 + 10) = v221;
  swift_bridgeObjectRelease();
  v222 = (void *)*((_QWORD *)v215 + 12);
  v223 = v216[12];
  *((_QWORD *)v215 + 11) = v216[11];
  *((_QWORD *)v215 + 12) = v223;

  v224 = (void *)*((_QWORD *)v215 + 13);
  *((_QWORD *)v215 + 13) = v216[13];

  v225 = v18[13];
  v226 = &v215[v225];
  v227 = (char *)v216 + v225;
  LODWORD(v212) = v23(&v215[v225], 1, v22);
  v228 = v23(v227, 1, v22);
  if ((_DWORD)v212)
  {
    if (!v228)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 32))(v226, v227, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v226, 0, 1, v22);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v228)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v226, v22);
LABEL_93:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v226, v227, *(_QWORD *)(*(_QWORD *)(v229 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 40))(v226, v227, v22);
LABEL_94:
  v230 = v18[14];
  v231 = &v215[v230];
  v232 = (char *)v216 + v230;
  v233 = v23(&v215[v230], 1, v22);
  v234 = v23(v232, 1, v22);
  if (v233)
  {
    if (!v234)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 32))(v231, v232, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v231, 0, 1, v22);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v234)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v231, v22);
LABEL_99:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v231, v232, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 40))(v231, v232, v22);
LABEL_100:
  v236 = v18[15];
  v237 = &v215[v236];
  v238 = (_QWORD *)((char *)v216 + v236);
  v240 = *v238;
  v239 = v238[1];
  *(_QWORD *)v237 = v240;
  *((_QWORD *)v237 + 1) = v239;
  swift_bridgeObjectRelease();
  v241 = v18[16];
  v242 = &v215[v241];
  v243 = (_QWORD *)((char *)v216 + v241);
  v245 = *v243;
  v244 = v243[1];
  *(_QWORD *)v242 = v245;
  *((_QWORD *)v242 + 1) = v244;
  swift_bridgeObjectRelease();
  v215[v18[17]] = *((_BYTE *)v216 + v18[17]);
  v215[v18[18]] = *((_BYTE *)v216 + v18[18]);
  v246 = v18[19];
  v247 = (uint64_t)&v215[v246];
  v248 = (char *)v216 + v246;
  v249 = *(_QWORD *)&v215[v246 + 8];
  if (v249 >> 60 == 15)
  {
LABEL_103:
    *(_OWORD *)v247 = *(_OWORD *)v248;
    goto LABEL_105;
  }
  v250 = *((_QWORD *)v248 + 1);
  if (v250 >> 60 == 15)
  {
    sub_2415A1B38(v247);
    goto LABEL_103;
  }
  v251 = *(_QWORD *)v247;
  *(_QWORD *)v247 = *(_QWORD *)v248;
  *(_QWORD *)(v247 + 8) = v250;
  sub_2415A0DAC(v251, v249);
LABEL_105:
  v252 = v18[20];
  v253 = &v215[v252];
  v254 = (char *)v216 + v252;
  v255 = v284(&v215[v252], 1, v289);
  v256 = v284(v254, 1, v289);
  if (v255)
  {
    if (!v256)
    {
      (*(void (**)(char *, char *, uint64_t))(v280 + 32))(v253, v254, v289);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v280 + 56))(v253, 0, 1, v289);
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  if (v256)
  {
    (*(void (**)(char *, uint64_t))(v280 + 8))(v253, v289);
LABEL_110:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v253, v254, *(_QWORD *)(*(_QWORD *)(v257 - 8) + 64));
    goto LABEL_111;
  }
  (*(void (**)(char *, char *, uint64_t))(v280 + 40))(v253, v254, v289);
LABEL_111:
  v258 = v18[21];
  v259 = *(void **)&v215[v258];
  *(_QWORD *)&v215[v258] = *(_QWORD *)((char *)v216 + v258);

  v260 = v18[22];
  v261 = &v215[v260];
  v262 = (char *)v216 + v260;
  v263 = v23(&v215[v260], 1, v22);
  v264 = v23(v262, 1, v22);
  if (v263)
  {
    if (!v264)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 32))(v261, v262, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v261, 0, 1, v22);
      goto LABEL_117;
    }
    goto LABEL_116;
  }
  if (v264)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v261, v22);
LABEL_116:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v261, v262, *(_QWORD *)(*(_QWORD *)(v265 - 8) + 64));
    goto LABEL_117;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 40))(v261, v262, v22);
LABEL_117:
  v278(&v211[v286[6]], &v288[v286[6]], v279);
  v281(&v211[v286[7]], &v288[v286[7]], v282);
  *(_QWORD *)&v211[v286[8]] = *(_QWORD *)&v288[v286[8]];
  swift_release();
  v266 = v286[9];
  v267 = &v211[v266];
  v268 = &v288[v266];
  v269 = v23(&v211[v266], 1, v22);
  v270 = v23(v268, 1, v22);
  if (!v269)
  {
    if (!v270)
    {
      (*(void (**)(char *, char *, uint64_t))(v290 + 40))(v267, v268, v22);
      goto LABEL_123;
    }
    (*(void (**)(char *, uint64_t))(v290 + 8))(v267, v22);
    goto LABEL_122;
  }
  if (v270)
  {
LABEL_122:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v267, v268, *(_QWORD *)(*(_QWORD *)(v271 - 8) + 64));
    goto LABEL_123;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 32))(v267, v268, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v267, 0, 1, v22);
LABEL_123:
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  swift_release();
  return a1;
}

uint64_t sub_2415D6F24()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415D6F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MedicalIDDataViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_2415D6FB0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415D6FBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDDataViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t _s12SheetContentVMa()
{
  uint64_t result;

  result = qword_25713AC50;
  if (!qword_25713AC50)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2415D7074()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MedicalIDDataViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2415D70F4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2415D7104(uint64_t a1@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[10];
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;

  v70 = a1;
  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380];
  sub_2415D877C(0, &qword_25713AC90, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x24BDEF380]);
  v47 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v52 = (char *)v42 - v4;
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8];
  sub_2415D877C(0, &qword_25713AC98, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x24BDEF3B8]);
  v64 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v55 = (char *)v42 - v7;
  v48 = type metadata accessor for MedicalIDEditMedicationsModalView();
  MEMORY[0x24BDAC7A8](v48);
  v42[5] = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for MedicalIDEditConditionsModalView();
  MEMORY[0x24BDAC7A8](v50);
  v42[4] = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415D8888(0, &qword_25713ACA0, v2);
  v61 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v63 = (char *)v42 - v11;
  sub_2415D8800(0, &qword_25713ACB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditAllergiesModalView, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditConditionsModalView, v2);
  v42[9] = v12;
  MEMORY[0x24BDAC7A8](v12);
  v44 = (char *)v42 - v13;
  sub_2415D87DC(0);
  v62 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v49 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415D8874(0);
  v69 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v65 = (char *)v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for MedicalIDEditAllergiesModalView();
  MEMORY[0x24BDAC7A8](v43);
  v42[3] = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for MedicalIDEditEmergencyContactsModalView(0);
  v19 = MEMORY[0x24BDAC7A8](v53);
  MEMORY[0x24BDAC7A8](v19);
  v42[6] = (char *)v42 - v20;
  sub_2415D8800(0, &qword_25713ACC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditBiometricsModalView, v21, v2);
  v46 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v51 = (char *)v42 - v23;
  sub_2415D8900(0);
  v60 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v54 = (char *)v42 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for MedicalIDBiometricsViewModel();
  MEMORY[0x24BDAC7A8](v26);
  v45 = type metadata accessor for MedicalIDEditBiometricsModalView();
  MEMORY[0x24BDAC7A8](v45);
  v42[2] = (char *)v42 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x24BDAC7A8](v28);
  sub_24159D6B0(0, &qword_25713ACD0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditPregnancyModalView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v42[8] = v29;
  MEMORY[0x24BDAC7A8](v29);
  v42[1] = (char *)v42 - v30;
  sub_2415D8800(0, &qword_25713ACD8, (uint64_t (*)(uint64_t))sub_2415D8924, (uint64_t (*)(uint64_t))sub_2415D8874, v2);
  v66 = v31;
  MEMORY[0x24BDAC7A8](v31);
  v68 = (char *)v42 - v32;
  sub_2415D89B8(0, &qword_25713ACF0, v2);
  v56 = v33;
  MEMORY[0x24BDAC7A8](v33);
  v58 = (char *)v42 - v34;
  sub_2415D8938(0, &qword_25713ACF8, v2);
  MEMORY[0x24BDAC7A8](v35);
  sub_2415D8938(0, &qword_25713ACE8, v5);
  v57 = v36;
  MEMORY[0x24BDAC7A8](v36);
  v42[7] = (char *)v42 - v37;
  sub_2415D8924(0);
  v67 = v38;
  MEMORY[0x24BDAC7A8](v38);
  v59 = (char *)v42 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  MEMORY[0x24BDAC7A8](v40);
  v41 = type metadata accessor for MedicalIDEditPersonalInfoModalView();
  MEMORY[0x24BDAC7A8](v41);
  __asm { BR              X10 }
}

uint64_t sub_2415D77E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v5 = _s12SheetContentVMa();
  v6 = v3 + *(int *)(v5 + 20);
  v7 = type metadata accessor for MedicalIDDataViewModel();
  sub_2415BEF64(v6 + *(int *)(v7 + 40), v2, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
  v8 = *(_QWORD *)(v3 + *(int *)(v5 + 24));
  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(id *)(*(_QWORD *)(v8 + 32) + 16);
  swift_retain();
  sub_2415C77E0(v2, v10, v9, v0);
  sub_2415BEF64(v0, v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  swift_storeEnumTagMultiPayload();
  sub_24159CE88(&qword_25713AD40, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditPersonalInfoModalView, (uint64_t)&unk_2416BDA50);
  sub_2415D8CC0();
  v11 = *(_QWORD *)(v4 - 504);
  sub_2416BA57C();
  sub_2415D8F0C(v11, *(_QWORD *)(v4 - 360), (uint64_t)&qword_25713ACE8, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_2415D8938);
  swift_storeEnumTagMultiPayload();
  sub_2415D8C30();
  sub_2415D8D50();
  v12 = *(_QWORD *)(v4 - 352);
  sub_2416BA57C();
  sub_2415D8F60(v11, (uint64_t)&qword_25713ACE8, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_2415D8938);
  sub_2415BEF64(v12, *(_QWORD *)(v4 - 280), (uint64_t (*)(_QWORD))sub_2415D8924);
  swift_storeEnumTagMultiPayload();
  sub_2415D8B9C();
  sub_2415D8DE8();
  sub_2416BA57C();
  sub_2415A6154(v12, (uint64_t (*)(_QWORD))sub_2415D8924);
  return sub_2415A6154(v0, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPersonalInfoModalView);
}

void sub_2415D877C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, ValueMetadata *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for MedicalIDEditMedicationsModalView();
    v7 = a3(a1, v6, &type metadata for MedicalIDEditMedicalNotesModalView);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_2415D87DC(uint64_t a1)
{
  sub_2415D8800(a1, &qword_25713ACA8, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditAllergiesModalView, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditConditionsModalView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
}

void sub_2415D8800(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4(255);
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

void sub_2415D8874(uint64_t a1)
{
  sub_2415D8888(a1, &qword_25713ACB8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
}

void sub_2415D8888(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_2415D87DC(255);
    v7 = v6;
    sub_2415D877C(255, &qword_25713AC98, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x24BDEF3B8]);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_2415D8900(uint64_t a1)
{
  sub_2415D8800(a1, &qword_25713ACC8, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditBiometricsModalView, type metadata accessor for MedicalIDEditEmergencyContactsModalView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
}

void sub_2415D8924(uint64_t a1)
{
  sub_2415D89B8(a1, &qword_25713ACE0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
}

void sub_2415D8938(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for MedicalIDEditPersonalInfoModalView();
    sub_24159D6B0(255, &qword_25713ACD0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditPregnancyModalView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_2415D89B8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_2415D8938(255, &qword_25713ACE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v7 = v6;
    sub_2415D8900(255);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t sub_2415D8A30()
{
  unint64_t result;

  result = qword_25713AD08;
  if (!qword_25713AD08)
  {
    result = MEMORY[0x2426994BC](&unk_2416C02A4, &type metadata for MedicalIDEditMedicalNotesModalView);
    atomic_store(result, (unint64_t *)&qword_25713AD08);
  }
  return result;
}

unint64_t sub_2415D8A74()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713AD10;
  if (!qword_25713AD10)
  {
    sub_2415D87DC(255);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713AD18, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditAllergiesModalView, (uint64_t)&unk_2416C11D0);
    v3[1] = sub_24159CE88(&qword_25713AD20, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditConditionsModalView, (uint64_t)&unk_2416C1CA4);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713AD10);
  }
  return result;
}

unint64_t sub_2415D8B0C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713AD28;
  if (!qword_25713AD28)
  {
    sub_2415D877C(255, &qword_25713AC98, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713AD00, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditMedicationsModalView, (uint64_t)&unk_2416BE2C4);
    v3[1] = sub_2415D8A30();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713AD28);
  }
  return result;
}

uint64_t sub_2415D8B9C()
{
  return sub_2415D8BC0(&qword_25713AD30, (uint64_t (*)(uint64_t))sub_2415D8924, (uint64_t (*)(void))sub_2415D8C30, (uint64_t (*)(void))sub_2415D8D50);
}

uint64_t sub_2415D8BC0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2415D8C30()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713AD38;
  if (!qword_25713AD38)
  {
    sub_2415D8938(255, &qword_25713ACE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713AD40, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditPersonalInfoModalView, (uint64_t)&unk_2416BDA50);
    v3[1] = sub_2415D8CC0();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713AD38);
  }
  return result;
}

unint64_t sub_2415D8CC0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_25713AD48;
  if (!qword_25713AD48)
  {
    sub_24159D6B0(255, &qword_25713ACD0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditPregnancyModalView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v2 = v1;
    v3 = sub_24159CE88(&qword_25713AD50, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditPregnancyModalView, (uint64_t)&unk_2416BEA78);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5578], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713AD48);
  }
  return result;
}

unint64_t sub_2415D8D50()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713AD58;
  if (!qword_25713AD58)
  {
    sub_2415D8900(255);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713AD60, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditBiometricsModalView, (uint64_t)&unk_2416C2F98);
    v3[1] = sub_24159CE88(&qword_25713AD68, type metadata accessor for MedicalIDEditEmergencyContactsModalView, (uint64_t)&unk_2416BDE58);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713AD58);
  }
  return result;
}

uint64_t sub_2415D8DE8()
{
  return sub_2415D8BC0(&qword_25713AD70, (uint64_t (*)(uint64_t))sub_2415D8874, (uint64_t (*)(void))sub_2415D8A74, (uint64_t (*)(void))sub_2415D8B0C);
}

void sub_2415D8E0C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A918)
  {
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A918);
  }
}

uint64_t sub_2415D8E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MedicalIDEditEmergencyContactsModalView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415D8EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, &qword_25713ACD0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditPregnancyModalView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415D8F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, _QWORD))
{
  uint64_t v6;

  v6 = a4(0, a3, MEMORY[0x24BDEF3B8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_2415D8F60(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, _QWORD))
{
  uint64_t v4;

  v4 = a3(0, a2, MEMORY[0x24BDEF3B8]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_2415D8FA8(uint64_t a1)
{
  uint64_t v2;

  sub_24159D6B0(0, &qword_25713ACD0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditPregnancyModalView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2415D8FFC()
{
  return sub_2415D8BC0(&qword_25713AD78, (uint64_t (*)(uint64_t))sub_2415D9030, sub_2415D8B9C, sub_2415D8DE8);
}

void sub_2415D9030(uint64_t a1)
{
  sub_2415D8800(a1, &qword_25713AD80, (uint64_t (*)(uint64_t))sub_2415D8924, (uint64_t (*)(uint64_t))sub_2415D8874, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
}

void sub_2415D9054()
{
  qword_2571476D0 = 0x4024000000000000;
}

void sub_2415D9064()
{
  qword_2571476D8 = 0x403C000000000000;
}

void sub_2415D9074()
{
  qword_2571476E0 = 0x4010000000000000;
}

void sub_2415D9084()
{
  qword_2571476E8 = 0x4010000000000000;
}

void sub_2415D9094()
{
  qword_2571476F0 = 0x407F400000000000;
}

void sub_2415D90A8()
{
  qword_2571476F8 = 0x4059000000000000;
}

uint64_t initializeBufferWithCopyOfBuffer for OrganDonationRegistrationView(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  id v5;

  v3 = *((_QWORD *)a2 + 2);
  v4 = *a2;
  *(_OWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = v3;
  v5 = (id)v4;
  swift_retain();
  return a1;
}

uint64_t destroy for OrganDonationRegistrationView(id *a1)
{

  return swift_release();
}

uint64_t assignWithCopy for OrganDonationRegistrationView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v7;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for OrganDonationRegistrationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OrganDonationRegistrationView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OrganDonationRegistrationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OrganDonationRegistrationView()
{
  return &type metadata for OrganDonationRegistrationView;
}

unint64_t sub_2415D926C()
{
  unint64_t result;

  result = qword_25713AD88;
  if (!qword_25713AD88)
  {
    result = MEMORY[0x2426994BC](&unk_2416BDCE8, &type metadata for OrganDonationRegistrationView);
    atomic_store(result, (unint64_t *)&qword_25713AD88);
  }
  return result;
}

uint64_t sub_2415D92B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t result;
  _QWORD aBlock[7];

  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE4A780]), sel_initWithMedicalIDData_, a2);
  if (v6)
  {
    v7 = v6;
    v8 = sub_2416BB0EC();
    MEMORY[0x24BDAC7A8](v8);
    v9 = v7;
    sub_2416BB098();
    if (qword_257139300 != -1)
      swift_once();
    v10 = (void *)qword_25713A038;
    v11 = sub_2416B9C10();
    MEMORY[0x24BDAC7A8](v11);
    v12 = v10;
    sub_2416B9C04();
    sub_2416BB134();
    v13 = (void *)sub_2416BB0F8();
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setCompletionButtonTitle_, v13);

    aBlock[4] = a3;
    aBlock[5] = a4;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2416142CC;
    aBlock[3] = &block_descriptor_1;
    v14 = _Block_copy(aBlock);
    v15 = v9;
    swift_retain();
    swift_release();
    objc_msgSend(v15, sel_setRegistrationCompletionHandler_, v14);
    _Block_release(v14);

    return (uint64_t)v15;
  }
  else
  {
    result = sub_2416BB5A8();
    __break(1u);
  }
  return result;
}

uint64_t sub_2415D94FC(uint64_t a1)
{
  uint64_t *v1;

  return sub_2415D92B0(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_2415D9514()
{
  return sub_2416BA708();
}

uint64_t sub_2415D954C()
{
  return MEMORY[0x24BDF5560];
}

uint64_t sub_2415D9558()
{
  sub_2415D961C();
  return sub_2416BA744();
}

uint64_t sub_2415D95A8()
{
  sub_2415D961C();
  return sub_2416BA714();
}

void sub_2415D95F8()
{
  sub_2415D961C();
  sub_2416BA738();
  __break(1u);
}

unint64_t sub_2415D961C()
{
  unint64_t result;

  result = qword_25713AD90;
  if (!qword_25713AD90)
  {
    result = MEMORY[0x2426994BC](&unk_2416BDC70, &type metadata for OrganDonationRegistrationView);
    atomic_store(result, (unint64_t *)&qword_25713AD90);
  }
  return result;
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void *MedicalIDEmergencyContact.asHKEmergencyContact.getter()
{
  return sub_2415DA34C();
}

uint64_t MedicalIDEmergencyContact.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDEmergencyContact.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MedicalIDEmergencyContact.name.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDEmergencyContact.nameContactIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDEmergencyContact.nameContactIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*MedicalIDEmergencyContact.nameContactIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDEmergencyContact.phoneNumberLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDEmergencyContact.phoneNumberLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*MedicalIDEmergencyContact.phoneNumberLabel.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDEmergencyContact.phoneNumber.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDEmergencyContact.phoneNumber.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*MedicalIDEmergencyContact.phoneNumber.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDEmergencyContact.phoneNumberContactIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDEmergencyContact.phoneNumberContactIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*MedicalIDEmergencyContact.phoneNumberContactIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDEmergencyContact.relationship.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDEmergencyContact.relationship.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return result;
}

uint64_t (*MedicalIDEmergencyContact.relationship.modify())()
{
  return nullsub_1;
}

void *MedicalIDEmergencyContact.contact.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 104);
  v2 = v1;
  return v1;
}

uint64_t MedicalIDEmergencyContact.baseIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

double MedicalIDEmergencyContact.init(hkEmergencyContact:contact:)@<D0>(void *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  unint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  unint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  double result;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v67;
  void *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  v5 = 0xD000000000000011;
  v6 = (void *)sub_24169261C();
  sub_24159F83C();
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v7 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v7 + 40) = 0xE900000000000044;
  v8 = 0x80000002416C3F90;
  *(_QWORD *)(v7 + 48) = 0xD000000000000011;
  *(_QWORD *)(v7 + 56) = 0x80000002416C3F90;
  v65 = a2;
  v9 = a2;
  v10 = v6;
  v11 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v12 = (id)HKUIJoinStringsForAutomationIdentifier();

  v68 = v9;
  v64 = a1;
  if (v12)
  {
    v5 = sub_2416BB128();
    v8 = v13;

  }
  v14 = objc_msgSend(v10, sel_name);
  if (v14)
  {
    v15 = v14;
    v16 = sub_2416BB128();
    v18 = v17;

    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_2416BCC80;
    *(_QWORD *)(v19 + 32) = v5;
    *(_QWORD *)(v19 + 40) = v8;
    *(_QWORD *)&v69 = v16;
    *((_QWORD *)&v69 + 1) = v18;
    v8 = 0xE000000000000000;
    sub_2415C343C();
    v20 = sub_2416BB470();
    v22 = v21;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v19 + 48) = v20;
    *(_QWORD *)(v19 + 56) = v22;
    v23 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    v24 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v24)
    {
      v5 = sub_2416BB128();
      v8 = v25;

    }
    else
    {
      v5 = 0;
    }
  }
  swift_bridgeObjectRetain();
  v26 = objc_msgSend(v10, sel_name);
  if (v26)
  {
    v27 = v26;
    v63 = sub_2416BB128();
    v29 = v28;

  }
  else
  {
    v63 = 0;
    v29 = 0;
  }
  swift_bridgeObjectRetain();
  v30 = objc_msgSend(v10, sel_nameContactIdentifier);
  if (v30)
  {
    v31 = v30;
    v62 = sub_2416BB128();
    v33 = v32;

  }
  else
  {
    v62 = 0;
    v33 = 0;
  }
  swift_bridgeObjectRetain();
  v34 = objc_msgSend(v10, sel_phoneNumberLabel);
  if (v34)
  {
    v35 = v34;
    v61 = sub_2416BB128();
    v37 = v36;

  }
  else
  {
    v61 = 0;
    v37 = 0;
  }
  swift_bridgeObjectRetain();
  v38 = objc_msgSend(v10, sel_phoneNumber);
  v67 = v5;
  if (v38)
  {
    v39 = v38;
    v60 = sub_2416BB128();
    v41 = v40;

  }
  else
  {
    v60 = 0;
    v41 = 0;
  }
  swift_bridgeObjectRetain();
  v42 = objc_msgSend(v10, sel_phoneNumberContactIdentifier);
  if (v42)
  {
    v43 = v42;
    v59 = sub_2416BB128();
    v45 = v44;

  }
  else
  {
    v59 = 0;
    v45 = 0;
  }
  swift_bridgeObjectRetain();
  v46 = objc_msgSend(v10, sel_relationship);
  if (v46)
  {
    v47 = v46;
    v48 = v10;
    v49 = v33;
    v50 = v29;
    v51 = sub_2416BB128();
    v53 = v52;

  }
  else
  {
    v48 = v10;
    v49 = v33;
    v50 = v29;

    v51 = 0;
    v53 = 0;
  }
  *(_QWORD *)&v69 = v63;
  *((_QWORD *)&v69 + 1) = v50;
  *(_QWORD *)&v70 = v62;
  *((_QWORD *)&v70 + 1) = v49;
  *(_QWORD *)&v71 = v61;
  *((_QWORD *)&v71 + 1) = v37;
  *(_QWORD *)&v72 = v60;
  *((_QWORD *)&v72 + 1) = v41;
  *(_QWORD *)&v73 = v59;
  *((_QWORD *)&v73 + 1) = v45;
  *(_QWORD *)&v74 = v51;
  *((_QWORD *)&v74 + 1) = v53;
  *(_QWORD *)&v75 = v48;
  *((_QWORD *)&v75 + 1) = v65;
  *(_QWORD *)&v76 = v67;
  *((_QWORD *)&v76 + 1) = v8;
  swift_bridgeObjectRetain();
  sub_2415DA4E0((uint64_t)&v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_2415DA580((uint64_t)&v69);
  v54 = v74;
  a3[4] = v73;
  a3[5] = v54;
  v55 = v76;
  a3[6] = v75;
  a3[7] = v55;
  v56 = v70;
  *a3 = v69;
  a3[1] = v56;
  result = *(double *)&v71;
  v58 = v72;
  a3[2] = v71;
  a3[3] = v58;
  return result;
}

void sub_2415D9E34(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  if (*(_QWORD *)(v1 + 56))
  {
    v3 = objc_allocWithZone(MEMORY[0x24BEB4950]);
    swift_bridgeObjectRetain();
    v4 = objc_msgSend(v3, sel_init);
    v5 = objc_msgSend(v4, sel_defaultProvider);
    v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEB49D0]), sel_initWithProvider_, v5);
    v6 = objc_allocWithZone(MEMORY[0x24BEB49E8]);
    v7 = (void *)sub_2416BB0F8();
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v6, sel_initWithType_value_, 2, v7);

    objc_msgSend(v18, sel_setHandle_, v8);
    objc_msgSend(v18, sel_setShowUIPrompt_, 0);
    if (objc_msgSend(v18, sel_isValid))
    {
      v9 = objc_msgSend(v18, sel_URL);
      sub_2415DAEF4();
      MEMORY[0x24BDAC7A8](v10);
      v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v9)
      {
        sub_2416B9A9C();

        v13 = sub_2416B9AB4();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 0, 1, v13);
      }
      else
      {

        v16 = sub_2416B9AB4();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v12, 1, 1, v16);
      }
      sub_2415DAF48((uint64_t)v12, a1);
    }
    else
    {
      v15 = sub_2416B9AB4();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);

    }
  }
  else
  {
    v14 = sub_2416B9AB4();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
}

uint64_t MedicalIDEmergencyContact.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[3];
  v2 = v0[5];
  v3 = v0[7];
  v4 = v0[9];
  v5 = v0[11];
  if (v0[1])
  {
    sub_2416BB6D4();
    swift_bridgeObjectRetain();
    sub_2416BB164();
    swift_bridgeObjectRelease();
    if (v1)
      goto LABEL_3;
  }
  else
  {
    sub_2416BB6D4();
    if (v1)
    {
LABEL_3:
      sub_2416BB6D4();
      swift_bridgeObjectRetain();
      sub_2416BB164();
      swift_bridgeObjectRelease();
      if (v2)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  sub_2416BB6D4();
  if (v2)
  {
LABEL_4:
    sub_2416BB6D4();
    swift_bridgeObjectRetain();
    sub_2416BB164();
    swift_bridgeObjectRelease();
    if (v3)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  sub_2416BB6D4();
  if (v3)
  {
LABEL_5:
    sub_2416BB6D4();
    swift_bridgeObjectRetain();
    sub_2416BB164();
    swift_bridgeObjectRelease();
    if (v4)
      goto LABEL_6;
LABEL_12:
    sub_2416BB6D4();
    if (v5)
      goto LABEL_7;
    return sub_2416BB6D4();
  }
LABEL_11:
  sub_2416BB6D4();
  if (!v4)
    goto LABEL_12;
LABEL_6:
  sub_2416BB6D4();
  swift_bridgeObjectRetain();
  sub_2416BB164();
  swift_bridgeObjectRelease();
  if (v5)
  {
LABEL_7:
    sub_2416BB6D4();
    swift_bridgeObjectRetain();
    sub_2416BB164();
    return swift_bridgeObjectRelease();
  }
  return sub_2416BB6D4();
}

uint64_t MedicalIDEmergencyContact.hashValue.getter()
{
  sub_2416BB6BC();
  MedicalIDEmergencyContact.hash(into:)();
  return sub_2416BB6EC();
}

uint64_t sub_2415DA2D0()
{
  sub_2416BB6BC();
  MedicalIDEmergencyContact.hash(into:)();
  return sub_2416BB6EC();
}

uint64_t sub_2415DA310()
{
  sub_2416BB6BC();
  MedicalIDEmergencyContact.hash(into:)();
  return sub_2416BB6EC();
}

void *sub_2415DA34C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v14;

  v1 = v0[3];
  v2 = v0[5];
  v3 = v0[7];
  v4 = v0[9];
  v14 = v0[8];
  v6 = v0[11];
  v5 = (void *)v0[12];
  if (v0[1])
    v7 = (void *)sub_2416BB0F8();
  else
    v7 = 0;
  objc_msgSend(v5, sel_setName_, v7, v14);

  if (v1)
    v8 = (void *)sub_2416BB0F8();
  else
    v8 = 0;
  objc_msgSend(v5, sel_setNameContactIdentifier_, v8);

  if (v2)
    v9 = (void *)sub_2416BB0F8();
  else
    v9 = 0;
  objc_msgSend(v5, sel_setPhoneNumberLabel_, v9);

  if (v3)
    v10 = (void *)sub_2416BB0F8();
  else
    v10 = 0;
  objc_msgSend(v5, sel_setPhoneNumber_, v10);

  if (v4)
    v11 = (void *)sub_2416BB0F8();
  else
    v11 = 0;
  objc_msgSend(v5, sel_setPhoneNumberContactIdentifier_, v11);

  if (v6)
    v12 = (void *)sub_2416BB0F8();
  else
    v12 = 0;
  objc_msgSend(v5, sel_setRelationship_, v12);

  return v5;
}

uint64_t sub_2415DA4E0(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 96);
  v3 = *(id *)(a1 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = v2;
  return a1;
}

uint64_t sub_2415DA580(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 96);
  v3 = *(void **)(a1 + 104);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t _s11MedicalIDUI0A18IDEmergencyContactV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  id v79;
  id v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  void *v108;

  v3 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v5 = a1[4];
  v8 = a1[5];
  v7 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v12 = a1[9];
  v11 = a1[10];
  v13 = a1[11];
  v108 = (void *)a1[13];
  v14 = a1[14];
  v105 = a1[15];
  v15 = a2[1];
  v16 = a2[2];
  v17 = a2[3];
  v18 = a2[4];
  v20 = a2[5];
  v19 = a2[6];
  v22 = a2[7];
  v21 = a2[8];
  v24 = a2[9];
  v23 = a2[10];
  v25 = a2[11];
  v106 = a2[14];
  v107 = (void *)a2[13];
  v104 = a2[15];
  if (!v3)
  {
    if (v15)
      return 0;
    goto LABEL_8;
  }
  if (!v15)
    return 0;
  if (*a1 == *a2 && v3 == v15)
    goto LABEL_8;
  v98 = a2[7];
  v101 = a2[8];
  v83 = a2[2];
  v84 = a1[2];
  v26 = a1[14];
  v91 = a1[5];
  v93 = a1[4];
  v27 = a1[10];
  v28 = a1[11];
  v29 = a2[11];
  v87 = a2[4];
  v89 = a2[5];
  v30 = a2[10];
  v85 = a1[9];
  v86 = a1[6];
  v31 = a2[9];
  v95 = a2[6];
  v32 = a1[7];
  v33 = sub_2416BB644();
  v9 = v32;
  v19 = v95;
  v22 = v98;
  v12 = v85;
  v7 = v86;
  v21 = v101;
  v24 = v31;
  v23 = v30;
  v18 = v87;
  v20 = v89;
  v25 = v29;
  v13 = v28;
  v11 = v27;
  v8 = v91;
  v5 = v93;
  v14 = v26;
  v16 = v83;
  v4 = v84;
  v34 = v33;
  result = 0;
  if ((v34 & 1) != 0)
  {
LABEL_8:
    if (v6)
    {
      if (!v17)
        return 0;
      if (v4 != v16 || v6 != v17)
      {
        v99 = v22;
        v102 = v21;
        v36 = v14;
        v37 = v11;
        v88 = v18;
        v90 = v20;
        v38 = v13;
        v39 = v25;
        v40 = v23;
        v41 = v12;
        v94 = v5;
        v96 = v19;
        v42 = v24;
        v43 = v7;
        v92 = v8;
        v44 = v9;
        v45 = sub_2416BB644();
        v9 = v44;
        v7 = v43;
        v19 = v96;
        v22 = v99;
        v21 = v102;
        v24 = v42;
        v8 = v92;
        v5 = v94;
        v12 = v41;
        v23 = v40;
        v25 = v39;
        v13 = v38;
        v18 = v88;
        v20 = v90;
        v11 = v37;
        v14 = v36;
        v46 = v45;
        result = 0;
        if ((v46 & 1) == 0)
          return result;
      }
    }
    else if (v17)
    {
      return 0;
    }
    if (v8)
    {
      if (!v20)
        return 0;
      if (v5 != v18 || v8 != v20)
      {
        v100 = v22;
        v103 = v21;
        v97 = v19;
        v47 = v14;
        v48 = v11;
        v49 = v13;
        v50 = v25;
        v51 = v23;
        v52 = v12;
        v53 = v24;
        v54 = v7;
        v55 = v9;
        v56 = sub_2416BB644();
        v22 = v100;
        v21 = v103;
        v9 = v55;
        v7 = v54;
        v24 = v53;
        v12 = v52;
        v23 = v51;
        v25 = v50;
        v13 = v49;
        v11 = v48;
        v14 = v47;
        v19 = v97;
        v57 = v56;
        result = 0;
        if ((v57 & 1) == 0)
          return result;
      }
    }
    else if (v20)
    {
      return 0;
    }
    if (v9)
    {
      if (!v22)
        return 0;
      if (v7 != v19 || v9 != v22)
      {
        v58 = v21;
        v59 = v14;
        v60 = v11;
        v61 = v13;
        v62 = v25;
        v63 = v23;
        v64 = v12;
        v65 = v24;
        v66 = sub_2416BB644();
        v21 = v58;
        v24 = v65;
        v12 = v64;
        v23 = v63;
        v25 = v62;
        v13 = v61;
        v11 = v60;
        v14 = v59;
        v67 = v66;
        result = 0;
        if ((v67 & 1) == 0)
          return result;
      }
    }
    else if (v22)
    {
      return 0;
    }
    if (v12)
    {
      if (!v24)
        return 0;
      if (v10 != v21 || v12 != v24)
      {
        v68 = v14;
        v69 = v11;
        v70 = v13;
        v71 = v25;
        v72 = v23;
        v73 = sub_2416BB644();
        v23 = v72;
        v25 = v71;
        v13 = v70;
        v11 = v69;
        v14 = v68;
        v74 = v73;
        result = 0;
        if ((v74 & 1) == 0)
          return result;
      }
    }
    else if (v24)
    {
      return 0;
    }
    if (v13)
    {
      if (!v25)
        return 0;
      if (v11 != v23 || v13 != v25)
      {
        v75 = v14;
        v76 = sub_2416BB644();
        v14 = v75;
        v77 = v76;
        result = 0;
        if ((v77 & 1) == 0)
          return result;
      }
    }
    else if (v25)
    {
      return 0;
    }
    v78 = v14;
    sub_2415C0788(0, (unint64_t *)&qword_25713ADA0);
    if ((sub_2416BB428() & 1) != 0)
    {
      if (v108)
      {
        if (v107)
        {
          sub_2415C0788(0, &qword_25713EB60);
          v79 = v107;
          v80 = v108;
          v81 = sub_2416BB428();

          v82 = v78;
          if ((v81 & 1) != 0)
          {
LABEL_47:
            if (v82 == v106 && v105 == v104)
              return 1;
            else
              return sub_2416BB644();
          }
        }
      }
      else
      {
        v82 = v78;
        if (!v107)
          goto LABEL_47;
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_2415DAAD0()
{
  unint64_t result;

  result = qword_25713AD98;
  if (!qword_25713AD98)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDEmergencyContact, &type metadata for MedicalIDEmergencyContact);
    atomic_store(result, (unint64_t *)&qword_25713AD98);
  }
  return result;
}

uint64_t destroy for MedicalIDEmergencyContact(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MedicalIDEmergencyContact(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  v9 = (void *)a2[12];
  v10 = (void *)a2[13];
  a1[12] = v9;
  a1[13] = v10;
  v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = v9;
  v13 = v10;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MedicalIDEmergencyContact(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[12];
  v5 = (void *)a1[12];
  a1[12] = v4;
  v6 = v4;

  v7 = (void *)a1[13];
  v8 = (void *)a2[13];
  a1[13] = v8;
  v9 = v8;

  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for MedicalIDEmergencyContact(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  v9 = *(void **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);

  v10 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);

  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDEmergencyContact(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 96);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDEmergencyContact(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 96) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDEmergencyContact()
{
  return &type metadata for MedicalIDEmergencyContact;
}

void sub_2415DAEF4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713ADA8)
  {
    sub_2416B9AB4();
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713ADA8);
  }
}

uint64_t sub_2415DAF48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415DAEF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_2415DAF8C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  char v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v7;
    v8 = (void *)a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    swift_retain();
    swift_retain();
    v10 = v8;
    if (v9)
    {
      v4[4] = a2[4];
      v4[5] = v9;
      v11 = a2[7];
      v4[6] = a2[6];
      v4[7] = v11;
      v12 = a2[9];
      v4[8] = a2[8];
      v4[9] = v12;
      v4[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = *((_OWORD *)a2 + 3);
      *((_OWORD *)v4 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)v4 + 3) = v14;
      *((_OWORD *)v4 + 4) = *((_OWORD *)a2 + 4);
      v4[10] = a2[10];
    }
    v4[11] = a2[11];
    v15 = *(int *)(a3 + 32);
    v16 = (_QWORD *)((char *)v4 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v18 = sub_2416B9C10();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      *v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v19 = *(int *)(a3 + 36);
    v20 = (_QWORD *)((char *)v4 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v22 = sub_2416BA06C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    }
    else
    {
      *v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_2415DB1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release();
  swift_release();

  if (*(_QWORD *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  v4 = a1 + *(int *)(a2 + 32);
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_2416B9C10();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  v6 = a1 + *(int *)(a2 + 36);
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v7 = sub_2416BA06C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t sub_2415DB2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v6;
  v7 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_retain();
  v9 = v7;
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v8;
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v10;
    v11 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v11;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v13 = *(int *)(a3 + 32);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = sub_2416B9C10();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  else
  {
    *v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v17 = *(int *)(a3 + 36);
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = sub_2416BA06C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  else
  {
    *v18 = *v19;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_2415DB4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  void *v7;
  void *v8;
  id v9;
  _OWORD *v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;

  v6 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v6;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v7 = *(void **)(a2 + 24);
  v8 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  v9 = v7;

  v10 = (_OWORD *)(a1 + 32);
  v11 = (__int128 *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v12)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2415CCAC8(a1 + 32);
      v14 = *(_OWORD *)(a2 + 48);
      v13 = *(_OWORD *)(a2 + 64);
      v15 = *v11;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 48) = v14;
      *(_OWORD *)(a1 + 64) = v13;
      *v10 = v15;
    }
  }
  else if (v12)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = *v11;
    v17 = *(_OWORD *)(a2 + 48);
    v18 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v17;
    *(_OWORD *)(a1 + 64) = v18;
    *v10 = v16;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    v19 = *(int *)(a3 + 32);
    v20 = (_QWORD *)(a1 + v19);
    v21 = (_QWORD *)(a2 + v19);
    v22 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    sub_2415DB7F4(a1 + v19, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0]);
    sub_24159D6B0(0, &qword_25713A1C8, v22, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v23 = sub_2416B9C10();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
    }
    else
    {
      *v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v24 = *(int *)(a3 + 36);
    v25 = (_QWORD *)(a1 + v24);
    v26 = (_QWORD *)(a2 + v24);
    v27 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038];
    sub_2415DB7F4(a1 + v24, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038]);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, v27, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v28 = sub_2416BA06C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
    }
    else
    {
      *v25 = *v26;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_2415DB7F4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_24159D6B0(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_2415DB838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  v8 = *(int *)(a3 + 32);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v12 = v11;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = sub_2416B9C10();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v9, v10, v13);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  v14 = *(int *)(a3 + 36);
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v18 = v17;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v19 = sub_2416BA06C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v15, v16, v19);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  return a1;
}

uint64_t sub_2415DB9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v6;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  v7 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  if (*(_QWORD *)(a1 + 40))
  {
    v8 = *(_QWORD *)(a2 + 40);
    if (v8)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v8;
      swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v9;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRelease();
      v10 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = v10;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_2415CCAC8(a1 + 32);
  }
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
LABEL_6:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 32);
    v13 = (void *)(a1 + v12);
    v14 = (const void *)(a2 + v12);
    v15 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    sub_2415DB7F4(a1 + v12, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0]);
    sub_24159D6B0(0, &qword_25713A1C8, v15, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v17 = v16;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v18 = sub_2416B9C10();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v13, v14, v18);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    v19 = *(int *)(a3 + 36);
    v20 = (void *)(a1 + v19);
    v21 = (const void *)(a2 + v19);
    v22 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038];
    sub_2415DB7F4(a1 + v19, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038]);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, v22, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v24 = v23;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v25 = sub_2416BA06C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v20, v21, v25);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_2415DBC00()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415DBC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_2415DBCDC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415DBCE8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDEditEmergencyContactsModalView(uint64_t a1)
{
  return sub_2415C5864(a1, qword_25713AE50);
}

void sub_2415DBDC8()
{
  unint64_t v0;
  unint64_t v1;

  sub_24159D6B0(319, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (v0 <= 0x3F)
  {
    sub_24159D6B0(319, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_2415DBEAC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2415DBEBC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int *v20;
  int *v21;
  uint64_t *v22;
  _QWORD *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  char *v39;
  uint64_t result;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v2 = v1;
  v4 = sub_2416BAF00();
  v46 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v47 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v42 - v7;
  v9 = type metadata accessor for MedicalIDEditEmergencyContactsModalView(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2571393D0 != -1)
    swift_once();
  v13 = qword_25713ADB0;
  v14 = *(_QWORD *)algn_25713ADB8;
  sub_2415BEF64(v2, (uint64_t)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MedicalIDEditEmergencyContactsModalView);
  v15 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v16 = swift_allocObject();
  sub_2415A85BC((uint64_t)v12, v16 + v15, type metadata accessor for MedicalIDEditEmergencyContactsModalView);
  v17 = *(_OWORD *)(v2 + 48);
  v49 = *(_OWORD *)(v2 + 32);
  v50 = v17;
  v18 = *(_OWORD *)(v2 + 80);
  v51 = *(_OWORD *)(v2 + 64);
  v52 = v18;
  sub_2415DE314();
  swift_bridgeObjectRetain();
  sub_2416BAD2C();
  v45 = v53;
  v44 = v54;
  v43 = v55;
  v42 = v56;
  v19 = v57;
  *a1 = swift_getKeyPath();
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  sub_24159EF1C(0, &qword_25713AEA8, type metadata accessor for MedicalIDEmergencyContactsEditView, sub_2415DE398, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MedicalIDEditModal);
  v21 = v20;
  v22 = (uint64_t *)((char *)a1 + v20[9]);
  *v22 = v13;
  v22[1] = v14;
  v23 = (uint64_t *)((char *)a1 + v20[10]);
  *v23 = &unk_25713AEA0;
  v23[1] = v16;
  v24 = (char *)a1 + v20[11];
  v25 = v44;
  *(_OWORD *)v24 = v45;
  *((_OWORD *)v24 + 1) = v25;
  v26 = v42;
  *((_OWORD *)v24 + 2) = v43;
  *((_OWORD *)v24 + 3) = v26;
  *((_QWORD *)v24 + 8) = v19;
  v27 = (char *)a1 + v20[12];
  v28 = *(void **)(v2 + 24);
  v29 = v46;
  (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v8, *MEMORY[0x24BDF4C90], v4);
  type metadata accessor for MedicalIDEditableEmergencyContactsModel();
  sub_24159CE88((unint64_t *)&qword_25713A5F0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, (uint64_t)&protocol conformance descriptor for MedicalIDEditableEmergencyContactsModel);
  swift_retain();
  v30 = v28;
  sub_2416BAEE8();
  v31 = type metadata accessor for MedicalIDEmergencyContactsEditView(0);
  *(_QWORD *)&v27[*(int *)(v31 + 20)] = v30;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v32 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v32 + 40) = 0xE900000000000044;
  v33 = 0x80000002416C3F90;
  *(_QWORD *)(v32 + 48) = 0xD000000000000011;
  *(_QWORD *)(v32 + 56) = 0x80000002416C3F90;
  v34 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v35 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v35)
  {
    v36 = sub_2416BB128();
    v33 = v37;

  }
  else
  {
    v36 = 0xD000000000000011;
  }
  v38 = (uint64_t *)&v27[*(int *)(v31 + 24)];
  *v38 = v36;
  v38[1] = v33;
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v47, v8, v4);
  sub_2416BAD08();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v4);
  v39 = (char *)a1 + v21[13];
  v48 = 0;
  result = sub_2416BAD08();
  v41 = *((_QWORD *)&v49 + 1);
  *v39 = v49;
  *((_QWORD *)v39 + 1) = v41;
  return result;
}

uint64_t sub_2415DC310()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2415C2834;
  return sub_2415DC358();
}

uint64_t sub_2415DC358()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[11] = v0;
  v2 = sub_2416BA06C();
  v1[12] = v2;
  v1[13] = *(_QWORD *)(v2 - 8);
  v1[14] = swift_task_alloc();
  sub_2415A6FC4(0);
  v1[15] = swift_task_alloc();
  type metadata accessor for MedicalIDData();
  v1[16] = swift_task_alloc();
  v1[17] = type metadata accessor for MedicalIDEditEmergencyContactsModalView(0);
  v1[18] = swift_task_alloc();
  v1[19] = sub_2416BB290();
  v1[20] = sub_2416BB284();
  v1[21] = sub_2416BB254();
  v1[22] = v3;
  return swift_task_switch();
}

uint64_t sub_2415DC454()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[18];
  v2 = v0[11];
  v3 = *(_BYTE *)(v2 + 8);
  v4 = swift_retain();
  v0[23] = sub_2415C0C54(v4, v3);
  swift_release();
  sub_2415BEF64(v2, v1, type metadata accessor for MedicalIDEditEmergencyContactsModalView);
  v0[24] = sub_2416BB284();
  v0[25] = sub_2416BB254();
  v0[26] = v5;
  return swift_task_switch();
}

uint64_t sub_2415DC500()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[23];
  v2 = v0[18];
  v4 = v0[15];
  v3 = v0[16];
  swift_getKeyPath();
  v0[8] = v1;
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  v5 = v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_2415BEF64(v5, v4, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  LoadState<>.loadedValue.getter(v3);
  sub_2415A6154(v4, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  v6 = *(_QWORD *)(v2 + 16);
  swift_getKeyPath();
  v0[9] = v6;
  sub_24159CE88((unint64_t *)&qword_25713A5F0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, (uint64_t)&protocol conformance descriptor for MedicalIDEditableEmergencyContactsModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v7 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 16) = v7;
  v8 = (_QWORD *)swift_task_alloc();
  v0[27] = v8;
  *v8 = v0;
  v8[1] = sub_2415DC6C4;
  return sub_24167239C(v0[16], (uint64_t)(v0 + 10));
}

uint64_t sub_2415DC6C4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2415DC724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 128);
  swift_release();
  sub_2415A6154(v2, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  sub_2415A6154(v1, type metadata accessor for MedicalIDEditEmergencyContactsModalView);
  swift_release();
  return swift_task_switch();
}

uint64_t sub_2415DC794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release();
  sub_2415C0E10(v1);
  sub_2416BA060();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2415DC838()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[18];
  v2 = v0[16];
  swift_release();
  sub_2415A6154(v2, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  v0[28] = v0[10];
  sub_2415A6154(v1, type metadata accessor for MedicalIDEditEmergencyContactsModalView);
  swift_release();
  return swift_task_switch();
}

uint64_t sub_2415DC8B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 224);
  swift_release();
  sub_2415CF224();
  swift_allocError();
  *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2415DC94C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  void (*v45)(char *, _QWORD, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (**v75)();
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v110 = a2;
  sub_2415CE5C4(0, &qword_25713B078, sub_2415DF970);
  v112 = v3;
  v109 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v111 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v108 = (char *)&v89 - v6;
  v107 = type metadata accessor for MedicalIDEmergencyContactsEditView(0);
  v99 = *(_QWORD *)(v107 - 8);
  MEMORY[0x24BDAC7A8](v107);
  v100 = v7;
  v102 = (uint64_t)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  v97 = v8;
  v96 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v95 = (char *)&v89 - v9;
  sub_2415DF438();
  v103 = *(_QWORD *)(v10 - 8);
  v104 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v101 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415DF3B4();
  v98 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v106 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v105 = (uint64_t)&v89 - v15;
  sub_2415DF37C(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415DF27C();
  v91 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_2416BA480();
  v93 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415DF300();
  v92 = v25;
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415DF1D4(0);
  v90 = v29;
  MEMORY[0x24BDAC7A8](v29);
  v113 = (uint64_t)&v89 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415DF1C0(0);
  v94 = v31;
  v32 = MEMORY[0x24BDAC7A8](v31);
  v115 = (uint64_t)&v89 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v114 = (uint64_t)&v89 - v34;
  if (qword_2571394D0 != -1)
    swift_once();
  v36 = qword_2571477B0;
  v35 = *(_QWORD *)algn_2571477B8;
  v37 = qword_2571393D8;
  swift_bridgeObjectRetain();
  if (v37 != -1)
    swift_once();
  v38 = *(int *)(v107 + 24);
  v107 = a1;
  v39 = (uint64_t *)(a1 + v38);
  v40 = *v39;
  v41 = v39[1];
  v116 = v36;
  v117 = v35;
  v118 = qword_25713ADC0;
  v119 = *(_QWORD *)algn_25713ADC8;
  v120 = v40;
  v121 = v41;
  sub_2415DFB54();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v89 = v28;
  sub_2416BAEA0();
  sub_2416BA474();
  v42 = &v21[*(int *)(v91 + 36)];
  v43 = v93;
  v44 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
  v44(v42, v24, v22);
  v45 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56);
  v45(v42, 0, 1, v22);
  v46 = v28;
  v47 = v92;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v21, v46, v92);
  KeyPath = swift_getKeyPath();
  v44(v18, v24, v22);
  v45(v18, 0, 1, v22);
  v49 = *(int *)(v90 + 36);
  v91 = v26;
  v50 = v113;
  v51 = (uint64_t *)(v113 + v49);
  sub_24159D6B0(0, &qword_25713AFC8, (uint64_t (*)(uint64_t))sub_2415DF37C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
  sub_2415BEF64((uint64_t)v18, (uint64_t)v51 + *(int *)(v52 + 28), (uint64_t (*)(_QWORD))sub_2415DF37C);
  *v51 = KeyPath;
  sub_2415BEF64((uint64_t)v21, v50, (uint64_t (*)(_QWORD))sub_2415DF27C);
  sub_2415A6154((uint64_t)v18, (uint64_t (*)(_QWORD))sub_2415DF37C);
  sub_2415A6154((uint64_t)v21, (uint64_t (*)(_QWORD))sub_2415DF27C);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v24, v22);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v89, v47);
  if (qword_2571393E8 != -1)
    swift_once();
  v53 = qword_25713ADD8;
  v54 = qword_25713ADD8;
  if (qword_2571393E0 != -1)
  {
    swift_once();
    v54 = qword_25713ADD8;
  }
  v55 = qword_25713ADD0;
  v56 = v113;
  v57 = v115;
  sub_2415BEF64(v113, v115, (uint64_t (*)(_QWORD))sub_2415DF1D4);
  v58 = v57 + *(int *)(v94 + 36);
  *(_QWORD *)v58 = v53;
  *(_QWORD *)(v58 + 8) = v55;
  *(_QWORD *)(v58 + 16) = v54;
  *(_QWORD *)(v58 + 24) = v55;
  *(_BYTE *)(v58 + 32) = 0;
  sub_2415A6154(v56, (uint64_t (*)(_QWORD))sub_2415DF1D4);
  v59 = v114;
  sub_2415A85BC(v57, v114, (uint64_t (*)(_QWORD))sub_2415DF1C0);
  v60 = v95;
  v61 = v97;
  v62 = v107;
  sub_2416BAEDC();
  swift_getKeyPath();
  sub_2416BAEF4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v60, v61);
  v63 = v116;
  v64 = v117;
  v65 = v118;
  v66 = swift_getKeyPath();
  v67 = v101;
  sub_2415DD870(v63, v64, v65, v66, (uint64_t)sub_2415DD29C, 0);
  v68 = v102;
  sub_2415BEF64(v62, v102, type metadata accessor for MedicalIDEmergencyContactsEditView);
  v69 = (*(unsigned __int8 *)(v99 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
  v70 = swift_allocObject();
  sub_2415A85BC(v68, v70 + v69, type metadata accessor for MedicalIDEmergencyContactsEditView);
  v71 = swift_allocObject();
  *(_QWORD *)(v71 + 16) = sub_2415DFD68;
  *(_QWORD *)(v71 + 24) = v70;
  v73 = v103;
  v72 = v104;
  v74 = (uint64_t)v106;
  (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v106, v67, v104);
  v75 = (uint64_t (**)())(v74 + *(int *)(v98 + 36));
  *v75 = sub_2415DFDC8;
  v75[1] = (uint64_t (*)())v71;
  (*(void (**)(char *, uint64_t))(v73 + 8))(v67, v72);
  v76 = v105;
  v77 = sub_2415A85BC(v74, v105, (uint64_t (*)(_QWORD))sub_2415DF3B4);
  MEMORY[0x24BDAC7A8](v77);
  *(&v89 - 2) = (char *)v62;
  sub_2415DF970(0);
  sub_2415DFDF0();
  v78 = v108;
  sub_2416BAEB8();
  sub_2415BEF64(v59, v57, (uint64_t (*)(_QWORD))sub_2415DF1C0);
  sub_2415BEF64(v76, v74, (uint64_t (*)(_QWORD))sub_2415DF3B4);
  v79 = v109;
  v80 = *(void (**)(char *, char *, uint64_t))(v109 + 16);
  v82 = v111;
  v81 = v112;
  v80(v111, v78, v112);
  v83 = v57;
  v84 = v110;
  sub_2415BEF64(v83, v110, (uint64_t (*)(_QWORD))sub_2415DF1C0);
  sub_2415DF12C();
  v86 = v85;
  sub_2415BEF64(v74, v84 + *(int *)(v85 + 48), (uint64_t (*)(_QWORD))sub_2415DF3B4);
  v80((char *)(v84 + *(int *)(v86 + 64)), v82, v81);
  v87 = *(void (**)(char *, uint64_t))(v79 + 8);
  v87(v78, v81);
  sub_2415A6154(v76, (uint64_t (*)(_QWORD))sub_2415DF3B4);
  sub_2415A6154(v114, (uint64_t (*)(_QWORD))sub_2415DF1C0);
  v87(v82, v81);
  sub_2415A6154(v74, (uint64_t (*)(_QWORD))sub_2415DF3B4);
  return sub_2415A6154(v115, (uint64_t (*)(_QWORD))sub_2415DF1C0);
}

uint64_t sub_2415DD29C@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, _QWORD, uint64_t, uint64_t);
  void (*v32)(uint64_t, char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  _OWORD v53[9];

  v50 = a2;
  sub_2415DF37C(0);
  MEMORY[0x24BDAC7A8](v3);
  v49 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415DF67C();
  v44 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v48 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2416BA480();
  v47 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v45 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2416BA600();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415CE5C4(0, &qword_25713B038, (void (*)(uint64_t))type metadata accessor for ContactLabelEditView);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v42 - v16;
  sub_2415DF700(0);
  v46 = v18;
  v51 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[7];
  v53[6] = a1[6];
  v53[7] = v21;
  v53[8] = a1[8];
  v22 = a1[3];
  v53[2] = a1[2];
  v53[3] = v22;
  v23 = a1[5];
  v53[4] = a1[4];
  v53[5] = v23;
  v24 = a1[1];
  v53[0] = *a1;
  v53[1] = v24;
  v52 = v53;
  type metadata accessor for ContactLabelEditView(0);
  sub_24159CE88(&qword_25713B048, type metadata accessor for ContactLabelEditView, (uint64_t)&unk_2416BF110);
  sub_2416BAEB8();
  sub_2416BA5F4();
  sub_2415DF7A4();
  v25 = v20;
  sub_2416BAC00();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if (qword_2571393F0 != -1)
    swift_once();
  v26 = v45;
  sub_2416BA474();
  v27 = (uint64_t)v48;
  v28 = &v48[*(int *)(v44 + 36)];
  v29 = v47;
  v30 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v30(v28, v26, v7);
  v31 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
  v31(v28, 0, 1, v7);
  v32 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 16);
  v43 = v25;
  v33 = v25;
  v34 = v46;
  v32(v27, v33, v46);
  KeyPath = swift_getKeyPath();
  v36 = (uint64_t)v49;
  v30(v49, v26, v7);
  v31((char *)v36, 0, 1, v7);
  sub_2415DF658(0);
  v38 = v50;
  v39 = (uint64_t *)(v50 + *(int *)(v37 + 36));
  sub_24159D6B0(0, &qword_25713AFC8, (uint64_t (*)(uint64_t))sub_2415DF37C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
  sub_2415BEF64(v36, (uint64_t)v39 + *(int *)(v40 + 28), (uint64_t (*)(_QWORD))sub_2415DF37C);
  *v39 = KeyPath;
  sub_2415BEF64(v27, v38, (uint64_t (*)(_QWORD))sub_2415DF67C);
  sub_2415A6154(v36, (uint64_t (*)(_QWORD))sub_2415DF37C);
  sub_2415A6154(v27, (uint64_t (*)(_QWORD))sub_2415DF67C);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v43, v34);
}

__n128 sub_2415DD6DC@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[8];

  v4 = (uint64_t *)((char *)a2 + *(int *)(type metadata accessor for ContactLabelEditView(0) + 24));
  *v4 = swift_getKeyPath();
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  sub_2415E0604(a1);
  sub_24159D7F0(0, &qword_25713B128, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604](v19);
  v15 = v19[4];
  v16 = v19[5];
  v17 = v19[6];
  v18 = v19[7];
  v11 = v19[0];
  v12 = v19[1];
  v13 = v19[2];
  v14 = v19[3];
  type metadata accessor for ContactLabelEditViewModel(0);
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 144) = 0;
  sub_2416B9CD0();
  *(_OWORD *)(v5 + 80) = v15;
  *(_OWORD *)(v5 + 96) = v16;
  *(_OWORD *)(v5 + 112) = v17;
  *(_OWORD *)(v5 + 128) = v18;
  *(_OWORD *)(v5 + 16) = v11;
  *(_OWORD *)(v5 + 32) = v12;
  *(_OWORD *)(v5 + 48) = v13;
  *(_OWORD *)(v5 + 64) = v14;
  *a2 = v5;
  a2[1] = 0;
  v6 = swift_allocObject();
  v7 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v6 + 128) = v7;
  *(_OWORD *)(v6 + 144) = *(_OWORD *)(a1 + 128);
  v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 64) = v8;
  v9 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v6 + 96) = v9;
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(__n128 *)(v6 + 32) = result;
  a2[2] = (uint64_t)sub_2415E073C;
  a2[3] = v6;
  return result;
}

uint64_t sub_2415DD870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v20[4];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = a1;
  v22 = a2;
  v23 = a3;
  sub_2415DFFBC();
  MEMORY[0x242698604](v20);
  v11 = *(_QWORD *)(v20[0] + 16);
  swift_bridgeObjectRelease();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = a3;
  v12[5] = a4;
  v20[0] = 0;
  v20[1] = v11;
  v20[2] = sub_2415E0064;
  v20[3] = v12;
  sub_2415DF658(0);
  sub_24159D7F0(0, &qword_25713B0E0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_2415DF910();
  sub_2415A40A4(&qword_25713B100, (uint64_t (*)(uint64_t))sub_2415DF658, (uint64_t (*)(void))sub_2415E0074, sub_2415E0198);
  sub_2415DFF64(&qword_25713B0E8, MEMORY[0x24BEE12B8]);
  sub_2415DFF64((unint64_t *)&qword_25713B120, MEMORY[0x24BEE12D8]);
  swift_getKeyPath();
  v13 = v21;
  v14 = v22;
  v15 = v23;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v13;
  v16[3] = v14;
  v16[4] = v15;
  v16[5] = a5;
  v16[6] = a6;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_2415E0238;
  *(_QWORD *)(v17 + 24) = v16;
  sub_2415DF4CC();
  sub_2415DF838();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_2416BAE7C();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2415DDADC()
{
  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  sub_2416BAED0();
  swift_getKeyPath();
  sub_24159CE88((unint64_t *)&qword_25713A5F0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, (uint64_t)&protocol conformance descriptor for MedicalIDEditableEmergencyContactsModel);
  sub_2416B9CAC();
  swift_release();
  swift_getKeyPath();
  sub_2416B9CC4();
  swift_release();
  swift_beginAccess();
  sub_24159D7F0(0, &qword_25713B0E0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_2415DFF64(&qword_25713B0E8, MEMORY[0x24BEE12B8]);
  sub_2415DFF64(&qword_25713B0F0, MEMORY[0x24BEE12E8]);
  sub_2416BB32C();
  swift_endAccess();
  swift_getKeyPath();
  sub_2416B9CB8();
  swift_release();
  return swift_release();
}

uint64_t sub_2415DDC88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  v4 = type metadata accessor for AddEmergencyContactView(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415DF9EC(0);
  v8 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415DF984(0);
  v12 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  sub_2416BAED0();
  v15 = *(id *)(a1 + *(int *)(type metadata accessor for MedicalIDEmergencyContactsEditView(0) + 20));
  sub_2416A707C((uint64_t)v15, (uint64_t)v6);
  sub_2415BEF64((uint64_t)v6, (uint64_t)v10, type metadata accessor for AddEmergencyContactView);
  v16 = &v10[*(int *)(v8 + 36)];
  v16[32] = 0;
  *(_OWORD *)v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  sub_2415A6154((uint64_t)v6, type metadata accessor for AddEmergencyContactView);
  v17 = sub_2416BA810();
  if (qword_2571393F8 != -1)
    swift_once();
  sub_2416B9EF8();
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  sub_2415BEF64((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(_QWORD))sub_2415DF9EC);
  v26 = &v14[*(int *)(v12 + 36)];
  *v26 = v17;
  *((_QWORD *)v26 + 1) = v19;
  *((_QWORD *)v26 + 2) = v21;
  *((_QWORD *)v26 + 3) = v23;
  *((_QWORD *)v26 + 4) = v25;
  v26[40] = 0;
  sub_2415A6154((uint64_t)v10, (uint64_t (*)(_QWORD))sub_2415DF9EC);
  v27 = sub_2416BA864();
  if (qword_257139400 != -1)
    swift_once();
  sub_2416B9EF8();
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v35 = v34;
  sub_2415BEF64((uint64_t)v14, a2, (uint64_t (*)(_QWORD))sub_2415DF984);
  sub_2415DF970(0);
  v37 = a2 + *(int *)(v36 + 36);
  *(_BYTE *)v37 = v27;
  *(_QWORD *)(v37 + 8) = v29;
  *(_QWORD *)(v37 + 16) = v31;
  *(_QWORD *)(v37 + 24) = v33;
  *(_QWORD *)(v37 + 32) = v35;
  *(_BYTE *)(v37 + 40) = 0;
  return sub_2415A6154((uint64_t)v14, (uint64_t (*)(_QWORD))sub_2415DF984);
}

uint64_t sub_2415DDF24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;

  sub_2415DF060(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2415DF098();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = v1;
  sub_24159D6B0(0, &qword_25713AF88, (uint64_t (*)(uint64_t))sub_2415DF12C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
  sub_2415DFA84();
  sub_2416BA954();
  KeyPath = swift_getKeyPath();
  sub_24159D6B0(0, qword_25713AEC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF4CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  sub_2415DF07C(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 0, 1, v12);
  sub_2415DFB30(0);
  v14 = (uint64_t *)(a1 + *(int *)(v13 + 36));
  sub_24159D6B0(0, &qword_25713B0A8, (uint64_t (*)(uint64_t))sub_2415DF060, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
  sub_2415BEF64((uint64_t)v5, (uint64_t)v14 + *(int *)(v15 + 28), (uint64_t (*)(_QWORD))sub_2415DF060);
  *v14 = KeyPath;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 16))(a1, v10, v7);
  sub_2415A6154((uint64_t)v5, (uint64_t (*)(_QWORD))sub_2415DF060);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_2415DE100(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0xD000000000000020, 0x80000002416C46D0, &qword_25713ADB0, algn_25713ADB8);
}

uint64_t sub_2415DE128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for MedicalIDEditEmergencyContactsModalView(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_release();

  if (*(_QWORD *)(v3 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  v4 = v3 + *(int *)(v1 + 32);
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_2416B9C10();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  v6 = v3 + *(int *)(v1 + 36);
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_2415DE294()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  type metadata accessor for MedicalIDEditEmergencyContactsModalView(0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2415C2834;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_2415C2834;
  return sub_2415DC358();
}

void sub_2415DE314()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AAD8)
  {
    sub_24159D7F0(255, (unint64_t *)&qword_25713A918, (uint64_t)&type metadata for BasicAlertModel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v0 = sub_2416BAD38();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AAD8);
  }
}

uint64_t type metadata accessor for MedicalIDEmergencyContactsEditView(uint64_t a1)
{
  return sub_2415C5864(a1, qword_25713AF28);
}

uint64_t sub_2415DE398()
{
  return sub_24159CE88(&qword_25713AEB0, type metadata accessor for MedicalIDEmergencyContactsEditView, (uint64_t)&unk_2416BDF70);
}

uint64_t sub_2415DE3B4(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0xD000000000000021, 0x80000002416C4700, &qword_25713ADC0, algn_25713ADC8);
}

uint64_t sub_2415DE3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t result;
  uint64_t v12;

  v7 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v7);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v8 = (void *)qword_25713A038;
  v9 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v9);
  v10 = v8;
  sub_2416B9C04();
  result = sub_2416BB134();
  *a4 = result;
  *a5 = v12;
  return result;
}

void sub_2415DE504()
{
  qword_25713ADD0 = 0x4030000000000000;
}

void sub_2415DE514()
{
  qword_25713ADD8 = 0x4030000000000000;
}

void sub_2415DE524()
{
  qword_25713ADE0 = 0x4024000000000000;
}

void sub_2415DE534()
{
  qword_25713ADE8 = 0x402E000000000000;
}

void sub_2415DE544()
{
  qword_25713ADF0 = 0x4026000000000000;
}

_QWORD *sub_2415DE554@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  _QWORD *result;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v14[4];
  _OWORD v15[8];

  v14[1] = a2;
  v14[2] = a3;
  v14[3] = a4;
  *a5 = a1;
  sub_2415DFFBC();
  result = MEMORY[0x242698604](v14);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v14[0] + 16) > a1)
  {
    v7 = (_OWORD *)(v14[0] + (a1 << 7));
    v8 = v7[2];
    v9 = v7[3];
    v10 = v7[5];
    v15[2] = v7[4];
    v15[3] = v10;
    v15[0] = v8;
    v15[1] = v9;
    v11 = v7[6];
    v12 = v7[7];
    v13 = v7[9];
    v15[6] = v7[8];
    v15[7] = v13;
    v15[4] = v11;
    v15[5] = v12;
    sub_2415DA4E0((uint64_t)v15);
    swift_bridgeObjectRelease();
    swift_getAtKeyPath();
    return (_QWORD *)sub_2415DA580((uint64_t)v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_2415DE63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_OWORD *))
{
  _QWORD *v11;
  _QWORD *v12;
  _OWORD v14[9];
  _OWORD v15[9];

  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = a3;
  v11[5] = a4;
  v11[6] = a5;
  v11[7] = a1;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = a3;
  v12[5] = a4;
  v12[6] = a5;
  v12[7] = a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  sub_2416BAE40();
  a6(v14);
  v15[6] = v14[6];
  v15[7] = v14[7];
  v15[8] = v14[8];
  v15[2] = v14[2];
  v15[3] = v14[3];
  v15[4] = v14[4];
  v15[5] = v14[5];
  v15[0] = v14[0];
  v15[1] = v14[1];
  return sub_2415E0520((uint64_t)v15);
}

uint64_t *sub_2415DE778(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  void (*v19)(char *, char *, uint64_t);
  id v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    v11 = (uint64_t *)((char *)a1 + v9);
    v12 = (uint64_t *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = a3[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = sub_2416BAF00();
    v18 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF4CA8];
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v20 = v10;
    swift_bridgeObjectRetain();
    v19(v15, v16, v17);
    sub_24159D6B0(0, qword_25713AEC8, v18, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    *(_QWORD *)&v15[*(int *)(v21 + 28)] = *(_QWORD *)&v16[*(int *)(v21 + 28)];
  }
  swift_retain();
  return a1;
}

uint64_t sub_2415DE8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 28);
  v6 = sub_2416BAF00();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF4CA8];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  sub_24159D6B0(0, qword_25713AEC8, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  return swift_release();
}

uint64_t sub_2415DE964(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  void (*v18)(uint64_t, uint64_t, uint64_t);
  id v19;
  uint64_t v20;

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_2416BAF00();
  v17 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF4CA8];
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v19 = v9;
  swift_bridgeObjectRetain();
  v18(v14, v15, v16);
  sub_24159D6B0(0, qword_25713AEC8, v17, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)(v14 + *(int *)(v20 + 28)) = *(_QWORD *)(v15 + *(int *)(v20 + 28));
  swift_retain();
  return a1;
}

uint64_t sub_2415DEA68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_2416BAF00();
  v18 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF4CA8];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  sub_24159D6B0(0, qword_25713AEC8, v18, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)(v15 + *(int *)(v19 + 28)) = *(_QWORD *)(v16 + *(int *)(v19 + 28));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_2415DEB80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_2416BAF00();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF4CA8];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  sub_24159D6B0(0, qword_25713AEC8, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)(v9 + *(int *)(v13 + 28)) = *(_QWORD *)(v10 + *(int *)(v13 + 28));
  return a1;
}

uint64_t sub_2415DEC58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = a3[6];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v13 = *v11;
  v12 = v11[1];
  *v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease();
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_2416BAF00();
  v18 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF4CA8];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  sub_24159D6B0(0, qword_25713AEC8, v18, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)(v15 + *(int *)(v19 + 28)) = *(_QWORD *)(v16 + *(int *)(v19 + 28));
  swift_release();
  return a1;
}

uint64_t sub_2415DED54()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415DED60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_24159D6B0(0, qword_25713AEC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF4CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    v8 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_2415DEE38()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_2415DEE44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return;
    }
    sub_24159D6B0(0, qword_25713AEC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF4CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, v10);
}

void sub_2415DEF18()
{
  unint64_t v0;
  unint64_t v1;

  sub_24159D6B0(319, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  if (v0 <= 0x3F)
  {
    sub_24159D6B0(319, qword_25713AEC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF4CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

unint64_t sub_2415DEFE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713AF68;
  if (!qword_25713AF68)
  {
    sub_24159EF1C(255, &qword_25713AEA8, type metadata accessor for MedicalIDEmergencyContactsEditView, sub_2415DE398, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MedicalIDEditModal);
    result = MEMORY[0x2426994BC](&unk_2416BFE00, v1);
    atomic_store(result, (unint64_t *)&qword_25713AF68);
  }
  return result;
}

uint64_t sub_2415DF050()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2415DF060(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713AF70, (uint64_t (*)(uint64_t))sub_2415DF07C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_2415DF07C(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713AF78, (uint64_t (*)(uint64_t))MEMORY[0x24BDF4CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
}

void sub_2415DF098()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AF80)
  {
    sub_24159D6B0(255, &qword_25713AF88, (uint64_t (*)(uint64_t))sub_2415DF12C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2415DFA84();
    v0 = sub_2416BA960();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AF80);
  }
}

void sub_2415DF12C()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713AF90)
  {
    sub_2415DF1C0(255);
    sub_2415DF3B4();
    sub_2415CE5C4(255, &qword_25713B078, sub_2415DF970);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713AF90);
  }
}

void sub_2415DF1C0(uint64_t a1)
{
  sub_2415DFA00(a1, &qword_25713AF98, sub_2415DF1D4);
}

void sub_2415DF1D4(uint64_t a1)
{
  sub_2415DF1F8(a1, &qword_25713AFA0, (void (*)(uint64_t))sub_2415DF27C, &qword_25713AFC8, (uint64_t (*)(uint64_t))sub_2415DF37C);
}

void sub_2415DF1F8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    a3(255);
    sub_24159D6B0(255, a4, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    v8 = sub_2416BA150();
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_2415DF27C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AFA8)
  {
    sub_2415DF300();
    sub_24159EF1C(255, &qword_25713AFB8, MEMORY[0x24BDF0A90], sub_2415DF360, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEFB28]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AFA8);
  }
}

void sub_2415DF300()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AFB0)
  {
    v0 = sub_2416BAEC4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AFB0);
  }
}

uint64_t sub_2415DF360()
{
  return sub_24159CE88(&qword_25713AFC0, MEMORY[0x24BDF0A90], MEMORY[0x24BDF0A88]);
}

void sub_2415DF37C(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713AFD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEE9C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_2415DF398()
{
  return sub_24159CE88(&qword_25713AFE0, MEMORY[0x24BDEF980], MEMORY[0x24BDEF978]);
}

void sub_2415DF3B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AFE8)
  {
    sub_2415DF438();
    sub_24159EF1C(255, &qword_25713B068, MEMORY[0x24BDED7D0], sub_2415DF954, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEFB28]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AFE8);
  }
}

void sub_2415DF438()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AFF0)
  {
    sub_2415DF4CC();
    sub_2415DF658(255);
    sub_2415DF838();
    sub_2415DF910();
    v0 = sub_2416BAE94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AFF0);
  }
}

void sub_2415DF4CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713AFF8)
  {
    sub_2415DF554();
    sub_2415DF5B0();
    sub_2415DF8A8(&qword_25713B010, MEMORY[0x24BEE1BB8]);
    v0 = sub_2416BB590();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713AFF8);
  }
}

void sub_2415DF554()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B000)
  {
    v0 = sub_2416BB338();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B000);
  }
}

void sub_2415DF5B0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713B008)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713B008);
  }
}

unint64_t sub_2415DF614()
{
  unint64_t result;

  result = qword_25713B018;
  if (!qword_25713B018)
  {
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_25713B018);
  }
  return result;
}

void sub_2415DF658(uint64_t a1)
{
  sub_2415DF1F8(a1, &qword_25713B020, (void (*)(uint64_t))sub_2415DF67C, &qword_25713AFC8, (uint64_t (*)(uint64_t))sub_2415DF37C);
}

void sub_2415DF67C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B028)
  {
    sub_2415DF700(255);
    sub_24159EF1C(255, &qword_25713AFB8, MEMORY[0x24BDF0A90], sub_2415DF360, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEFB28]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B028);
  }
}

void sub_2415DF700(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_25713B030)
  {
    sub_2415CE5C4(255, &qword_25713B038, (void (*)(uint64_t))type metadata accessor for ContactLabelEditView);
    v5[0] = v2;
    v5[1] = sub_2416BA600();
    v5[2] = sub_2415DF7A4();
    v5[3] = MEMORY[0x24BDEF958];
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF3A80], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713B030);
  }
}

unint64_t sub_2415DF7A4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[3];

  result = qword_25713B040;
  if (!qword_25713B040)
  {
    sub_2415CE5C4(255, &qword_25713B038, (void (*)(uint64_t))type metadata accessor for ContactLabelEditView);
    v2 = v1;
    v3 = sub_24159CE88(&qword_25713B048, type metadata accessor for ContactLabelEditView, (uint64_t)&unk_2416BF110);
    v4[0] = MEMORY[0x24BDF5138];
    v4[1] = v3;
    v4[2] = MEMORY[0x24BDF5138];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF4AF8], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713B040);
  }
  return result;
}

unint64_t sub_2415DF838()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_25713B050;
  if (!qword_25713B050)
  {
    sub_2415DF4CC();
    v2 = v1;
    v3 = sub_2415DF8A8(&qword_25713B058, MEMORY[0x24BEE1BD0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE2B48], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713B050);
  }
  return result;
}

uint64_t sub_2415DF8A8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    sub_2415DF554();
    v6 = v5;
    v7 = sub_2415DF614();
    v8[0] = MEMORY[0x24BEE17A8];
    v8[1] = v7;
    result = MEMORY[0x2426994BC](a2, v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2415DF910()
{
  unint64_t result;

  result = qword_25713B060;
  if (!qword_25713B060)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDEmergencyContact, &type metadata for MedicalIDEmergencyContact);
    atomic_store(result, (unint64_t *)&qword_25713B060);
  }
  return result;
}

uint64_t sub_2415DF954()
{
  return sub_24159CE88(&qword_25713B070, MEMORY[0x24BDED7D0], MEMORY[0x24BDED7C8]);
}

void sub_2415DF970(uint64_t a1)
{
  sub_2415DF998(a1, &qword_25713B080, sub_2415DF984);
}

void sub_2415DF984(uint64_t a1)
{
  sub_2415DF998(a1, &qword_25713B088, sub_2415DF9EC);
}

void sub_2415DF998(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_2416BA150();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_2415DF9EC(uint64_t a1)
{
  sub_2415DFA00(a1, &qword_25713B090, (void (*)(uint64_t))type metadata accessor for AddEmergencyContactView);
}

void sub_2415DFA00(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    sub_24159EF1C(255, &qword_25713AFD8, MEMORY[0x24BDEF980], sub_2415DF398, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEFB28]);
    v4 = sub_2416BA150();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_2415DFA84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713B098;
  if (!qword_25713B098)
  {
    sub_24159D6B0(255, &qword_25713AF88, (uint64_t (*)(uint64_t))sub_2415DF12C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v1);
    atomic_store(result, (unint64_t *)&qword_25713B098);
  }
  return result;
}

uint64_t sub_2415DFAE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2415DC94C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2415DFAEC()
{
  return sub_2416BA39C();
}

uint64_t sub_2415DFB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2415DFBB8(a1, a2, a3, a4, (uint64_t (*)(_QWORD))sub_2415DF060, MEMORY[0x24BDEE440]);
}

void sub_2415DFB30(uint64_t a1)
{
  sub_2415DF1F8(a1, &qword_25713B0A0, (void (*)(uint64_t))sub_2415DF098, &qword_25713B0A8, (uint64_t (*)(uint64_t))sub_2415DF060);
}

unint64_t sub_2415DFB54()
{
  unint64_t result;

  result = qword_25713B0B0;
  if (!qword_25713B0B0)
  {
    result = MEMORY[0x2426994BC](&unk_2416C3910, &type metadata for MedicalIDEditSectionHeaderView);
    atomic_store(result, (unint64_t *)&qword_25713B0B0);
  }
  return result;
}

uint64_t sub_2415DFB98()
{
  return sub_2416BA318();
}

uint64_t sub_2415DFBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v9 = a5(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - v10;
  sub_2415BEF64(a1, (uint64_t)&v13 - v10, a5);
  return a6(v11);
}

uint64_t sub_2415DFC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2415DFBB8(a1, a2, a3, a4, (uint64_t (*)(_QWORD))sub_2415DF37C, MEMORY[0x24BDEE180]);
}

uint64_t sub_2415DFC64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  v1 = type metadata accessor for MedicalIDEmergencyContactsEditView(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  sub_24159D6B0(0, &qword_25713AEC0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x24BDF4C28]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  swift_bridgeObjectRelease();
  v5 = v3 + *(int *)(v1 + 28);
  v6 = sub_2416BAF00();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF4CA8];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  sub_24159D6B0(0, qword_25713AEC8, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2415DFD68()
{
  type metadata accessor for MedicalIDEmergencyContactsEditView(0);
  return sub_2415DDADC();
}

uint64_t sub_2415DFDA4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2415DFDC8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_2415DFDE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2415DDC88(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_2415DFDF0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713B0B8;
  if (!qword_25713B0B8)
  {
    sub_2415DF970(255);
    v2 = v1;
    v3[0] = sub_2415DFE58();
    v3[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713B0B8);
  }
  return result;
}

unint64_t sub_2415DFE58()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713B0C0;
  if (!qword_25713B0C0)
  {
    sub_2415DF984(255);
    v2 = v1;
    v3[0] = sub_2415A40A4(&qword_25713B0C8, (uint64_t (*)(uint64_t))sub_2415DF9EC, sub_2415DFEE0, (uint64_t (*)(void))sub_2415DFEFC);
    v3[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713B0C0);
  }
  return result;
}

uint64_t sub_2415DFEE0()
{
  return sub_24159CE88(&qword_25713B0D0, type metadata accessor for AddEmergencyContactView, (uint64_t)&unk_2416C3478);
}

unint64_t sub_2415DFEFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713B0D8;
  if (!qword_25713B0D8)
  {
    sub_24159EF1C(255, &qword_25713AFD8, MEMORY[0x24BDEF980], sub_2415DF398, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEFB28]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEFB48], v1);
    atomic_store(result, (unint64_t *)&qword_25713B0D8);
  }
  return result;
}

uint64_t sub_2415DFF64(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_24159D7F0(255, &qword_25713B0E0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426994BC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_2415DFFBC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B0F8)
  {
    sub_24159D7F0(255, &qword_25713B0E0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v0 = sub_2416BAE58();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B0F8);
  }
}

uint64_t sub_2415E0028()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

_QWORD *sub_2415E0064@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_2415DE554(*a1, v2[2], v2[3], v2[4], a2);
}

unint64_t sub_2415E0074()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  result = qword_25713B108;
  if (!qword_25713B108)
  {
    sub_2415DF67C();
    v2 = v1;
    sub_2415CE5C4(255, &qword_25713B038, (void (*)(uint64_t))type metadata accessor for ContactLabelEditView);
    v4[2] = v3;
    v4[3] = sub_2416BA600();
    v4[4] = sub_2415DF7A4();
    v4[5] = MEMORY[0x24BDEF958];
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = sub_2415E0130();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713B108);
  }
  return result;
}

unint64_t sub_2415E0130()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713B110;
  if (!qword_25713B110)
  {
    sub_24159EF1C(255, &qword_25713AFB8, MEMORY[0x24BDF0A90], sub_2415DF360, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEFB28]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEFB48], v1);
    atomic_store(result, (unint64_t *)&qword_25713B110);
  }
  return result;
}

uint64_t sub_2415E0198()
{
  return sub_2415E01B4(&qword_25713B118, &qword_25713AFC8, (uint64_t (*)(uint64_t))sub_2415DF37C);
}

uint64_t sub_2415E01B4(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_24159D6B0(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF1028], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2415E01FC()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2415E0238(uint64_t *a1, _OWORD *a2)
{
  uint64_t *v2;
  void (*v3)(_OWORD *);
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[8];

  v3 = (void (*)(_OWORD *))v2[5];
  v4 = *a1;
  v5 = a2[5];
  v10[4] = a2[4];
  v10[5] = v5;
  v6 = a2[7];
  v10[6] = a2[6];
  v10[7] = v6;
  v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  v8 = a2[3];
  v10[2] = a2[2];
  v10[3] = v8;
  return sub_2415DE63C(v4, (uint64_t)v10, v2[2], v2[3], v2[4], v3);
}

uint64_t sub_2415E0288(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_OWORD *, char *);
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[8];
  uint64_t v9;

  v2 = *(uint64_t (**)(_OWORD *, char *))(v1 + 16);
  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v9 = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return v2(v8, (char *)v8 + 8);
}

_QWORD *sub_2415E02E4@<X0>(uint64_t a1@<X2>, unint64_t *a2@<X3>, _OWORD *a3@<X8>)
{
  unint64_t v4;
  _QWORD *result;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v4 = *a2;
  v17[1] = *(_QWORD *)a1;
  v18 = *(_OWORD *)(a1 + 8);
  sub_2415DFFBC();
  result = MEMORY[0x242698604](v17);
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v4 < *(_QWORD *)(v17[0] + 16))
  {
    v6 = (_OWORD *)(v17[0] + (v4 << 7));
    v7 = v6[2];
    v8 = v6[3];
    v9 = v6[5];
    v21 = v6[4];
    v22 = v9;
    v19 = v7;
    v20 = v8;
    v10 = v6[6];
    v11 = v6[7];
    v12 = v6[9];
    v25 = v6[8];
    v26 = v12;
    v23 = v10;
    v24 = v11;
    sub_2415DA4E0((uint64_t)&v19);
    result = (_QWORD *)swift_bridgeObjectRelease();
    v13 = v24;
    a3[4] = v23;
    a3[5] = v13;
    v14 = v26;
    a3[6] = v25;
    a3[7] = v14;
    v15 = v20;
    *a3 = v19;
    a3[1] = v15;
    v16 = v22;
    a3[2] = v21;
    a3[3] = v16;
    return result;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2415E03AC@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_2415E02E4(v1 + 32, (unint64_t *)(v1 + 56), a1);
}

uint64_t sub_2415E03BC(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[8];
  _QWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v5 = a1[5];
  v32 = a1[4];
  v33 = v5;
  v6 = a1[7];
  v34 = a1[6];
  v35 = v6;
  v7 = a1[1];
  v28 = *a1;
  v29 = v7;
  v8 = a1[3];
  v30 = a1[2];
  v31 = v8;
  v9 = *a5;
  v26[1] = *(_QWORD *)a4;
  v27 = *(_OWORD *)(a4 + 8);
  sub_2415DA4E0((uint64_t)&v28);
  sub_2415DFFBC();
  MEMORY[0x242698604](v26);
  v10 = (_QWORD *)v26[0];
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((v9 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)sub_2415E05E0(v10);
  v10 = (_QWORD *)result;
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v9 < v10[2])
  {
    v12 = &v10[16 * v9];
    v13 = v12[2];
    v14 = v12[3];
    v15 = v12[5];
    v25[2] = v12[4];
    v25[3] = v15;
    v25[0] = v13;
    v25[1] = v14;
    v16 = v12[6];
    v17 = v12[7];
    v18 = v12[9];
    v25[6] = v12[8];
    v25[7] = v18;
    v25[4] = v16;
    v25[5] = v17;
    v19 = v28;
    v20 = v29;
    v21 = v31;
    v12[4] = v30;
    v12[5] = v21;
    v12[2] = v19;
    v12[3] = v20;
    v22 = v32;
    v23 = v33;
    v24 = v35;
    v12[8] = v34;
    v12[9] = v24;
    v12[6] = v22;
    v12[7] = v23;
    sub_2415DA580((uint64_t)v25);
    v26[0] = v10;
    return sub_2416BAE1C();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t objectdestroy_43Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2415E0510(__int128 *a1)
{
  uint64_t v1;

  return sub_2415E03BC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + 32, (unint64_t *)(v1 + 56));
}

uint64_t sub_2415E0520(uint64_t a1)
{
  void *v2;
  void *v4;

  v2 = *(void **)(a1 + 112);
  v4 = *(void **)(a1 + 120);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

_QWORD *sub_2415E05E0(_QWORD *a1)
{
  return sub_2415FE184(0, a1[2], 0, a1);
}

double sub_2415E05F4@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_2415DD6DC(*(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

uint64_t sub_2415E0604(uint64_t a1)
{
  id v2;
  id v3;
  void *v5;

  v5 = *(void **)(a1 + 112);
  v2 = *(id *)(a1 + 120);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v5;
  return a1;
}

uint64_t sub_2415E06C8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2415E073C(_OWORD *a1)
{
  return sub_241605D3C(a1);
}

uint64_t sub_2415E0744()
{
  return sub_2415A40A4(&qword_25713B130, (uint64_t (*)(uint64_t))sub_2415DFB30, sub_2415E0778, sub_2415E0794);
}

uint64_t sub_2415E0778()
{
  return sub_24159CE88(&qword_25713B138, (uint64_t (*)(uint64_t))sub_2415DF098, MEMORY[0x24BDF1A30]);
}

uint64_t sub_2415E0794()
{
  return sub_2415E01B4(&qword_25713B140, &qword_25713B0A8, (uint64_t (*)(uint64_t))sub_2415DF060);
}

uint64_t sub_2415E07B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_2415E07D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = sub_2416BA570();
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return sub_2416BA57C();
}

uint64_t sub_2415E0894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v5 = sub_2416BA570();
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return sub_2416BA57C();
}

uint64_t sub_2415E0958@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v29[2];
  uint64_t v30;
  uint64_t v31;

  v29[1] = a2;
  v31 = a3;
  sub_2415BE970();
  v6 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BE8EC();
  v10 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BE868();
  v30 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415C0788(0, (unint64_t *)&qword_25713A430);
  sub_2415E3B38((unint64_t *)&qword_25713A4D8, (unint64_t *)&qword_25713A430, (uint64_t)off_251193198, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
  v16 = sub_2416B9DCC();
  sub_2415BEF64(v29[0], (uint64_t)v8, (uint64_t (*)(_QWORD))_s12SheetContentVMa);
  v17 = (uint64_t *)&v8[*(int *)(v6 + 36)];
  *v17 = v16;
  v17[1] = (uint64_t)a1;
  v18 = *(_QWORD *)(a2 + 32);
  v19 = *(void **)(v18 + 16);
  sub_2415C0788(0, &qword_25713A448);
  sub_2415E3B38(&qword_25713B300, &qword_25713A448, 0x24BDD3C40, (uint64_t)&protocol conformance descriptor for HKHealthStore);
  v20 = a1;
  v21 = v19;
  v22 = sub_2416B9DCC();
  sub_2415BEF64((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_2415BE970);
  v23 = (uint64_t *)&v12[*(int *)(v10 + 36)];
  *v23 = v22;
  v23[1] = (uint64_t)v21;
  sub_2415A6154((uint64_t)v8, (uint64_t (*)(_QWORD))sub_2415BE970);
  v24 = *(void **)(v18 + 24);
  sub_2415C0788(0, (unint64_t *)&qword_25713A460);
  sub_2415E3B38(&qword_25713B308, (unint64_t *)&qword_25713A460, 0x24BDD3E40, (uint64_t)&protocol conformance descriptor for HKProfileStore);
  v25 = v24;
  v26 = sub_2416B9DCC();
  sub_2415BEF64((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_2415BE8EC);
  v27 = (uint64_t *)&v15[*(int *)(v30 + 36)];
  *v27 = v26;
  v27[1] = (uint64_t)v25;
  sub_2415A6154((uint64_t)v12, (uint64_t (*)(_QWORD))sub_2415BE8EC);
  type metadata accessor for MedicalIDDataManager();
  sub_2415A40A4(&qword_25713A468, (uint64_t (*)(uint64_t))sub_2415BE868, sub_2415BEAA0, (uint64_t (*)(void))sub_2415BEBD4);
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416BAA20();
  return sub_2415A6154((uint64_t)v15, (uint64_t (*)(_QWORD))sub_2415BE868);
}

uint64_t sub_2415E0C80@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v29[2];
  uint64_t v30;
  uint64_t v31;

  v29[1] = a2;
  v31 = a3;
  sub_2415E2998();
  v6 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415E2914();
  v10 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415E2890();
  v30 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415C0788(0, (unint64_t *)&qword_25713A430);
  sub_2415E3B38((unint64_t *)&qword_25713A4D8, (unint64_t *)&qword_25713A430, (uint64_t)off_251193198, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
  v16 = sub_2416B9DCC();
  sub_2415BEF64(v29[0], (uint64_t)v8, (uint64_t (*)(_QWORD))sub_2415E2738);
  v17 = (uint64_t *)&v8[*(int *)(v6 + 36)];
  *v17 = v16;
  v17[1] = (uint64_t)a1;
  v18 = *(_QWORD *)(a2 + 32);
  v19 = *(void **)(v18 + 16);
  sub_2415C0788(0, &qword_25713A448);
  sub_2415E3B38(&qword_25713B300, &qword_25713A448, 0x24BDD3C40, (uint64_t)&protocol conformance descriptor for HKHealthStore);
  v20 = a1;
  v21 = v19;
  v22 = sub_2416B9DCC();
  sub_2415BEF64((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_2415E2998);
  v23 = (uint64_t *)&v12[*(int *)(v10 + 36)];
  *v23 = v22;
  v23[1] = (uint64_t)v21;
  sub_2415A6154((uint64_t)v8, (uint64_t (*)(_QWORD))sub_2415E2998);
  v24 = *(void **)(v18 + 24);
  sub_2415C0788(0, (unint64_t *)&qword_25713A460);
  sub_2415E3B38(&qword_25713B308, (unint64_t *)&qword_25713A460, 0x24BDD3E40, (uint64_t)&protocol conformance descriptor for HKProfileStore);
  v25 = v24;
  v26 = sub_2416B9DCC();
  sub_2415BEF64((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_2415E2914);
  v27 = (uint64_t *)&v15[*(int *)(v30 + 36)];
  *v27 = v26;
  v27[1] = (uint64_t)v25;
  sub_2415A6154((uint64_t)v12, (uint64_t (*)(_QWORD))sub_2415E2914);
  type metadata accessor for MedicalIDDataManager();
  sub_2415A40A4(&qword_25713B1B8, (uint64_t (*)(uint64_t))sub_2415E2890, sub_2415E2A1C, (uint64_t (*)(void))sub_2415BEBD4);
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416BAA20();
  return sub_2415A6154((uint64_t)v15, (uint64_t (*)(_QWORD))sub_2415E2890);
}

uint64_t sub_2415E0FA8()
{
  return sub_2416BA360();
}

uint64_t sub_2415E0FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2415E240C(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEE3D8]);
}

_QWORD *MedicalIDMainView.init(healthStore:medicalIDData:displayConfiguration:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  int *v8;
  uint64_t *v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t *v11;
  id v12;
  _QWORD *result;
  char *v14;

  v8 = (int *)type metadata accessor for MedicalIDMainView();
  v9 = (_QWORD *)((char *)a4 + v8[5]);
  *v9 = swift_getKeyPath();
  v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v11 = (_QWORD *)((char *)a4 + v8[6]);
  *v11 = swift_getKeyPath();
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], v10);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for MedicalIDModelProvider();
  swift_allocObject();
  v12 = a3;
  result = sub_2415A6230(a1, a2, (uint64_t)v12);
  *a4 = result;
  *(_QWORD *)((char *)a4 + v8[8]) = v12;
  v14 = (char *)a4 + v8[7];
  *v14 = 1;
  *((_QWORD *)v14 + 1) = 0;
  return result;
}

uint64_t type metadata accessor for MedicalIDMainView()
{
  uint64_t result;

  result = qword_25713B238;
  if (!qword_25713B238)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t MedicalIDMainView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (**v24)();
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)@<X0>(uint64_t@<X8>);
  uint64_t v49;
  uint64_t v50;

  v2 = v1;
  v46 = a1;
  v3 = type metadata accessor for MedicalIDMainView();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415E25C4(0, &qword_25713B148, (uint64_t (*)(uint64_t))sub_2415E24F0, &qword_25713B188, (uint64_t)&unk_2416BE1B0);
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v35 - v8;
  sub_2415E2738();
  v38 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415E27B4(0);
  v14 = *(_QWORD *)(v13 - 8);
  v44 = v13;
  v45 = v14;
  MEMORY[0x24BDAC7A8](v13);
  v37 = (uint64_t)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415E2B08(0);
  v42 = *(_QWORD *)(v16 - 8);
  v43 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v41 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = *(int *)(v3 + 32);
  v18 = *(uint64_t *)((char *)v2 + v36);
  sub_2415BEF64((uint64_t)v2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDMainView);
  v19 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v20 = swift_allocObject();
  sub_2415E2C0C((uint64_t)v6, v20 + v19);
  v47 = v18;
  v48 = sub_2415E2C50;
  v49 = v20;
  sub_2415E24F0(0);
  sub_24159CE88(&qword_25713B188, (uint64_t (*)(uint64_t))sub_2415E24F0, (uint64_t)&unk_2416BE1B0);
  sub_2416BAAF8();
  swift_release();
  sub_2415BEF64((uint64_t)v2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDMainView);
  v21 = swift_allocObject();
  sub_2415E2C0C((uint64_t)v6, v21 + v19);
  v23 = v39;
  v22 = v40;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v12, v9, v40);
  v24 = (uint64_t (**)())&v12[*(int *)(v38 + 36)];
  *v24 = sub_2415E2DE4;
  v24[1] = (uint64_t (*)())v21;
  v24[2] = 0;
  v24[3] = 0;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v22);
  v25 = v36;
  v26 = v37;
  sub_2415E0C80(*(void **)((char *)v2 + v36), *v2, v37);
  sub_2415A6154((uint64_t)v12, (uint64_t (*)(_QWORD))sub_2415E2738);
  objc_msgSend(*(id *)((char *)v2 + v25), sel_isHomeIndicatorHidden);
  sub_2415E2890();
  v28 = v27;
  v29 = type metadata accessor for MedicalIDDataManager();
  v30 = sub_2415A40A4(&qword_25713B1B8, (uint64_t (*)(uint64_t))sub_2415E2890, sub_2415E2A1C, (uint64_t (*)(void))sub_2415BEBD4);
  v31 = sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  v47 = v28;
  v48 = (uint64_t (*)@<X0>(uint64_t@<X8>))v29;
  v49 = v30;
  v50 = v31;
  swift_getOpaqueTypeConformance2();
  v32 = v41;
  v33 = v44;
  sub_2416BAB28();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v26, v33);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v46, v32, v43);
}

uint64_t sub_2415E1504@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;

  v45 = a2;
  v43 = type metadata accessor for MedicalIDDataContentView();
  MEMORY[0x24BDAC7A8](v43);
  v4 = (uint64_t *)((char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2415E25C4(0, &qword_25713B168, v5, &qword_25713B170, (uint64_t)&unk_2416BD430);
  v44 = v6;
  v40 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v38 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v39 = (char *)&v36 - v9;
  sub_2415E3B88(0, &qword_25713B318, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
  v41 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v36 - v11;
  sub_2415E2560();
  v42 = v13;
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415A6FC4(0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = a1;
  v20 = *a1;
  v21 = *(_QWORD *)(*a1 + 56);
  swift_getKeyPath();
  v51 = v21;
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  swift_retain();
  sub_2416B9CAC();
  swift_release();
  v22 = v21 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_2415BEF64(v22, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  swift_release();
  v23 = type metadata accessor for MedicalIDData();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v19, 1, v23) == 1)
  {
    sub_2416BA018();
    v24 = v42;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v12, v16, v42);
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713B180, (uint64_t (*)(uint64_t))sub_2415E2560, MEMORY[0x24BDEBC00]);
    v25 = sub_24159CE88(&qword_25713B170, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataContentView, (uint64_t)&unk_2416BD430);
    v48 = v43;
    v49 = v25;
    swift_getOpaqueTypeConformance2();
    sub_2416BA57C();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v24);
  }
  else
  {
    v27 = (char *)v37 + *(int *)(type metadata accessor for MedicalIDMainView() + 28);
    v28 = *v27;
    v29 = *((_QWORD *)v27 + 1);
    v46 = v28;
    v47 = v29;
    sub_2415E3C18();
    swift_retain();
    sub_2416BAD2C();
    sub_2415B8CFC(v20, v48, v49, v50, v4);
    v30 = sub_24159CE88(&qword_25713B170, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataContentView, (uint64_t)&unk_2416BD430);
    v31 = v38;
    v32 = v43;
    sub_2416BAAF8();
    sub_2415A6154((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDDataContentView);
    v34 = v39;
    v33 = v40;
    v35 = v44;
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v39, v31, v44);
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v12, v34, v35);
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713B180, (uint64_t (*)(uint64_t))sub_2415E2560, MEMORY[0x24BDEBC00]);
    v48 = v32;
    v49 = v30;
    swift_getOpaqueTypeConformance2();
    sub_2416BA57C();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
    return sub_2415A6154((uint64_t)v19, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  }
}

uint64_t sub_2415E1994(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  sub_2415E1A84();
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v3 = *(void **)(a1 + *(int *)(type metadata accessor for MedicalIDMainView() + 32));
  swift_retain();
  MIUIMedicalIDAccessPoint.analyticsDisplayName.getter((uint64_t)objc_msgSend(v3, sel_accessPoint));
  v4 = objc_msgSend(*(id *)(v2 + 16), sel_profileIdentifier);
  objc_msgSend(v4, sel_type);

  sub_2416531DC();
  sub_241652FE8();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_2415E1A84()
{
  uint64_t v0;
  void *v1;
  BOOL v2;
  unsigned int v3;
  id v4;
  unint64_t v5;
  objc_class *v6;
  objc_class *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  id v28[2];

  v28[1] = *(id *)MEMORY[0x24BDAC8D0];
  if (objc_msgSend(*(id *)(v0 + *(int *)(type metadata accessor for MedicalIDMainView() + 32)), sel_isLockScreen))v2 = MEMORY[0x24BE0CE30] == 0;
  else
    v2 = 1;
  if (!v2)
  {
    v3 = MKBGetDeviceLockState();
    if (v3 <= 6 && ((1 << v3) & 0x46) != 0)
    {
      v4 = objc_msgSend((id)objc_opt_self(), sel_availableDevices);
      sub_2415C0788(0, &qword_25713B310);
      v5 = sub_2416BB1F4();

      if (v5 >> 62)
      {
        swift_bridgeObjectRetain();
        v23 = sub_2416BB5C0();
        swift_bridgeObjectRelease();
        if (v23)
          goto LABEL_9;
      }
      else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_9:
        if ((v5 & 0xC000000000000001) != 0)
        {
          v6 = (objc_class *)MEMORY[0x242698CF4](0, v5);
        }
        else
        {
          if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_31;
          }
          v6 = (objc_class *)*(id *)(v5 + 32);
        }
        v7 = v6;
        swift_bridgeObjectRelease();
        v8 = (void *)objc_opt_self();
        v28[0] = 0;
        v5 = v7;
        v9 = objc_msgSend(v8, sel_deviceWithDescriptor_error_, v5, v28);
        if (v9)
        {
          v1 = v9;
          v10 = v28[0];

          v28[0] = 0;
          if ((objc_msgSend(v1, sel_forceBioLockoutIfLockedForUser_error_, 501, v28) & 1) != 0)
          {
            v11 = qword_2571395C0;
            v12 = v28[0];
            if (v11 == -1)
            {
LABEL_15:
              v13 = sub_2416B9D6C();
              __swift_project_value_buffer(v13, (uint64_t)qword_257147810);
              v14 = sub_2416B9D54();
              v15 = sub_2416BB38C();
              if (os_log_type_enabled(v14, v15))
              {
                v16 = swift_slowAlloc();
                v17 = (void *)swift_slowAlloc();
                v28[0] = v17;
                *(_DWORD *)v16 = 136315394;
                sub_2415A8600(0xD000000000000011, 0x80000002416BE130, (uint64_t *)v28);
                sub_2416BB44C();
                *(_WORD *)(v16 + 12) = 2080;
                v18 = sub_2416BB140();
                sub_2415A8600(v18, v19, (uint64_t *)v28);
                sub_2416BB44C();
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_241599000, v14, v15, "[%s] Successfully forced passcode lock: %s", (uint8_t *)v16, 0x16u);
                swift_arrayDestroy();
                MEMORY[0x242699570](v17, -1, -1);
                MEMORY[0x242699570](v16, -1, -1);

                return;
              }

              goto LABEL_27;
            }
LABEL_31:
            swift_once();
            goto LABEL_15;
          }
          v22 = v28[0];
          v21 = (void *)sub_2416B9A60();

          swift_willThrow();
        }
        else
        {
          v20 = v28[0];
          v21 = (void *)sub_2416B9A60();

          swift_willThrow();
        }

LABEL_23:
        if (qword_2571395C0 != -1)
          swift_once();
        v24 = sub_2416B9D6C();
        __swift_project_value_buffer(v24, (uint64_t)qword_257147810);
        v5 = sub_2416B9D54();
        v25 = sub_2416BB374();
        if (os_log_type_enabled((os_log_t)v5, v25))
        {
          v26 = (uint8_t *)swift_slowAlloc();
          v27 = (void *)swift_slowAlloc();
          v28[0] = v27;
          *(_DWORD *)v26 = 136315138;
          sub_2415A8600(0xD000000000000011, 0x80000002416BE130, (uint64_t *)v28);
          sub_2416BB44C();
          _os_log_impl(&dword_241599000, (os_log_t)v5, v25, "[%s] Failed to force passcode lock with error", v26, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x242699570](v27, -1, -1);
          MEMORY[0x242699570](v26, -1, -1);
        }
LABEL_27:

        return;
      }
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
  }
}

uint64_t sub_2415E1FC0@<X0>(void *a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  id v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(void);
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(void);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];

  v40 = a2;
  v41 = a3;
  v44 = a6;
  sub_2416BA108();
  v43 = a5;
  v9 = sub_2416BA168();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v38 = (char *)&v37 - v15;
  v16 = *(_QWORD *)(a4 - 8);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v37 - v20;
  v39 = sub_2416BA588();
  v42 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v23 = (char *)&v37 - v22;
  v24 = objc_msgSend(a1, sel_isHostingView);
  if ((_DWORD)v24)
  {
    v40();
    v25 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v25(v21, v19, a4);
    v26 = *(void (**)(char *, uint64_t))(v16 + 8);
    v26(v19, a4);
    v25(v19, v21, a4);
    MEMORY[0x2426994BC](MEMORY[0x24BDED358], v9);
    v27 = v43;
    sub_2415E07D0((uint64_t)v19, a4);
    v26(v19, a4);
    v26(v21, a4);
  }
  else
  {
    MEMORY[0x24BDAC7A8](v24);
    v28 = v43;
    *(&v37 - 6) = a4;
    *(&v37 - 5) = v28;
    v29 = v40;
    *(&v37 - 4) = (uint64_t)a1;
    *(&v37 - 3) = (uint64_t)v29;
    *(&v37 - 2) = v41;
    sub_2416BA15C();
    MEMORY[0x2426994BC](MEMORY[0x24BDED358], v9);
    v30 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v31 = v38;
    v30(v38, v13, v9);
    v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    v32(v13, v9);
    v30(v13, v31, v9);
    v27 = v28;
    sub_2415E0894((uint64_t)v13, a4, v9);
    v32(v13, v9);
    v32(v31, v9);
  }
  v33 = MEMORY[0x2426994BC](MEMORY[0x24BDED358], v9);
  v45[0] = v27;
  v45[1] = v33;
  v34 = v39;
  MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v39, v45);
  v35 = v42;
  (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v44, v23, v34);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v23, v34);
}

uint64_t sub_2415E22DC@<X0>(uint64_t a1@<X3>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(uint64_t);
  void (*v12)(char *, char *, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v15 - v9;
  v11(v8);
  v12 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v12(v10, v7, a1);
  v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v7, a1);
  v12(a2, v10, a1);
  return ((uint64_t (*)(char *, uint64_t))v13)(v10, a1);
}

uint64_t sub_2415E23A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2415E1FC0(*(void **)v2, *(void (**)(void))(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_2415E23B8()
{
  return sub_2416BA390();
}

uint64_t sub_2415E23D8()
{
  return sub_2416BA390();
}

uint64_t sub_2415E23F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2415E240C(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF2E0], MEMORY[0x24BDEE430]);
}

uint64_t sub_2415E240C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_2415E2488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2415E240C(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF2E0], MEMORY[0x24BDEE430]);
}

uint64_t sub_2415E24AC()
{
  return sub_2416BA360();
}

uint64_t sub_2415E24CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2415E240C(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEE3D8]);
}

void sub_2415E24F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_25713B150)
  {
    sub_2415E3B88(255, &qword_25713B158, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v3 = v2;
    v4 = sub_2415E2658();
    v6 = type metadata accessor for UINavStack(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713B150);
  }
}

void sub_2415E2560()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B160)
  {
    v0 = sub_2416BA024();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B160);
  }
}

void sub_2415E25C4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  if (!*a2)
  {
    v12[0] = a3(255);
    v12[1] = sub_24159CE88(a4, a3, a5);
    v10 = MEMORY[0x242699480](a1, v12, MEMORY[0x24BDF2DC8], 0);
    if (!v11)
      atomic_store(v10, a2);
  }
}

unint64_t sub_2415E2658()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  result = qword_25713B178;
  if (!qword_25713B178)
  {
    sub_2415E3B88(255, &qword_25713B158, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3 = sub_24159CE88(&qword_25713B180, (uint64_t (*)(uint64_t))sub_2415E2560, MEMORY[0x24BDEBC00]);
    v4[2] = type metadata accessor for MedicalIDDataContentView();
    v4[3] = sub_24159CE88(&qword_25713B170, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataContentView, (uint64_t)&unk_2416BD430);
    v4[0] = v3;
    v4[1] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713B178);
  }
  return result;
}

uint64_t type metadata accessor for UINavStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UINavStack);
}

void sub_2415E2738()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B190)
  {
    sub_2415E25C4(255, &qword_25713B148, (uint64_t (*)(uint64_t))sub_2415E24F0, &qword_25713B188, (uint64_t)&unk_2416BE1B0);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B190);
  }
}

void sub_2415E27B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_25713B198)
  {
    sub_2415E2890();
    v5[0] = v2;
    v5[1] = type metadata accessor for MedicalIDDataManager();
    v5[2] = sub_2415A40A4(&qword_25713B1B8, (uint64_t (*)(uint64_t))sub_2415E2890, sub_2415E2A1C, (uint64_t (*)(void))sub_2415BEBD4);
    v5[3] = sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF2358], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713B198);
  }
}

void sub_2415E2890()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B1A0)
  {
    sub_2415E2914();
    sub_2415BEA48(255, &qword_25713A450, &qword_25713A458, (unint64_t *)&qword_25713A460);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B1A0);
  }
}

void sub_2415E2914()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B1A8)
  {
    sub_2415E2998();
    sub_2415BEA48(255, &qword_25713A438, &qword_25713A440, &qword_25713A448);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B1A8);
  }
}

void sub_2415E2998()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B1B0)
  {
    sub_2415E2738();
    sub_2415BEA48(255, &qword_25713A420, &qword_25713A428, (unint64_t *)&qword_25713A430);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B1B0);
  }
}

uint64_t sub_2415E2A1C()
{
  return sub_2415A40A4(&qword_25713B1C0, (uint64_t (*)(uint64_t))sub_2415E2914, sub_2415E2A40, (uint64_t (*)(void))sub_2415BEB6C);
}

uint64_t sub_2415E2A40()
{
  return sub_2415A40A4(&qword_25713B1C8, (uint64_t (*)(uint64_t))sub_2415E2998, (uint64_t (*)(void))sub_2415E2A64, (uint64_t (*)(void))sub_2415BEB04);
}

unint64_t sub_2415E2A64()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  result = qword_25713B1D0;
  if (!qword_25713B1D0)
  {
    sub_2415E2738();
    v2 = v1;
    sub_2415E24F0(255);
    v4[2] = v3;
    v4[3] = sub_24159CE88(&qword_25713B188, (uint64_t (*)(uint64_t))sub_2415E24F0, (uint64_t)&unk_2416BE1B0);
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = MEMORY[0x24BDF0910];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713B1D0);
  }
  return result;
}

void sub_2415E2B08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_25713B1D8)
  {
    sub_2415E27B4(255);
    v3 = v2;
    sub_2415E2890();
    type metadata accessor for MedicalIDDataManager();
    v6[2] = sub_2415A40A4(&qword_25713B1B8, (uint64_t (*)(uint64_t))sub_2415E2890, sub_2415E2A1C, (uint64_t (*)(void))sub_2415BEBD4);
    v6[3] = sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x242699480](a1, v6, MEMORY[0x24BDF3248], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_25713B1D8);
  }
}

uint64_t sub_2415E2C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MedicalIDMainView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415E2C50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDMainView() - 8) + 80);
  return sub_2415E1504((uint64_t *)(v1 + ((v3 + 16) & ~v3)), a1);
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (int *)type metadata accessor for MedicalIDMainView();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  v4 = v3 + v1[5];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_2416B9C70();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  v6 = v3 + v1[6];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_2416B9C10();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_2415E2DE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDMainView() - 8) + 80);
  return sub_2415E1994(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_2415E2E10()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for MedicalIDMainView(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  id v21;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = sub_2416B9C70();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      *v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v12 = a3[6];
    v13 = (uint64_t *)((char *)v7 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v15 = sub_2416B9C10();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      *v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v16 = a3[7];
    v17 = a3[8];
    v18 = (char *)v7 + v16;
    v19 = (char *)a2 + v16;
    *v18 = *v19;
    *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
    v20 = *(void **)((char *)a2 + v17);
    *(uint64_t *)((char *)v7 + v17) = (uint64_t)v20;
    swift_retain();
    v21 = v20;
  }
  return v7;
}

void destroy for MedicalIDMainView(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release();
  v4 = a1 + a2[5];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_2416B9C70();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  v6 = a1 + a2[6];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_2416B9C10();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  swift_release();

}

_QWORD *initializeWithCopy for MedicalIDMainView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  id v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = sub_2416B9C70();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    *v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = sub_2416B9C10();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  }
  else
  {
    *v11 = *v12;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v14 = a3[7];
  v15 = a3[8];
  v16 = (char *)a1 + v14;
  v17 = (char *)a2 + v14;
  *v16 = *v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  v18 = *(void **)((char *)a2 + v15);
  *(_QWORD *)((char *)a1 + v15) = v18;
  swift_retain();
  v19 = v18;
  return a1;
}

_QWORD *assignWithCopy for MedicalIDMainView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;

  *a1 = *a2;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)a2 + v6);
    v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0];
    sub_2415DB7F4((uint64_t)a1 + v6, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0]);
    sub_24159D6B0(0, &qword_25713A1C0, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_2416B9C70();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v11 = a3[6];
    v12 = (_QWORD *)((char *)a1 + v11);
    v13 = (_QWORD *)((char *)a2 + v11);
    v14 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    sub_2415DB7F4((uint64_t)a1 + v11, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0]);
    sub_24159D6B0(0, &qword_25713A1C8, v14, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v15 = sub_2416B9C10();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    }
    else
    {
      *v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *v17 = *v18;
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  swift_retain();
  swift_release();
  v19 = a3[8];
  v20 = *(void **)((char *)a2 + v19);
  v21 = *(void **)((char *)a1 + v19);
  *(_QWORD *)((char *)a1 + v19) = v20;
  v22 = v20;

  return a1;
}

_QWORD *initializeWithTake for MedicalIDMainView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v10 = v9;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_2416B9C70();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v16 = v15;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = sub_2416B9C10();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v13, v14, v17);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  v18 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  return a1;
}

_QWORD *assignWithTake for MedicalIDMainView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void *v24;

  *a1 = *a2;
  swift_release();
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0];
    sub_2415DB7F4((uint64_t)a1 + v6, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0]);
    sub_24159D6B0(0, &qword_25713A1C0, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v11 = v10;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = sub_2416B9C70();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v13 = a3[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0];
    sub_2415DB7F4((uint64_t)a1 + v13, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0]);
    sub_24159D6B0(0, &qword_25713A1C8, v16, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v18 = v17;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v19 = sub_2416B9C10();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v14, v15, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
  }
  v20 = a3[7];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  *v21 = *v22;
  *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
  swift_release();
  v23 = a3[8];
  v24 = *(void **)((char *)a1 + v23);
  *(_QWORD *)((char *)a1 + v23) = *(_QWORD *)((char *)a2 + v23);

  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDMainView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415E37A4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_24159D6B0(0, &qword_25713A1D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], MEMORY[0x24BDEB580]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MedicalIDMainView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_2415E3880(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_24159D6B0(0, &qword_25713A1D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], MEMORY[0x24BDEB580]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_2415E394C()
{
  unint64_t v0;
  unint64_t v1;

  sub_24159D6B0(319, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (v0 <= 0x3F)
  {
    sub_24159D6B0(319, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_2415E3A28()
{
  sub_2415E27B4(255);
  sub_2415E2890();
  type metadata accessor for MedicalIDDataManager();
  sub_2415A40A4(&qword_25713B1B8, (uint64_t (*)(uint64_t))sub_2415E2890, sub_2415E2A1C, (uint64_t (*)(void))sub_2415BEBD4);
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2415E3AFC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2415E3B04()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2415E3B38(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_2415C0788(255, a2);
    result = MEMORY[0x2426994BC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2415E3B78@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_2415E22DC(*(_QWORD *)(v1 + 16), a1);
}

void sub_2415E3B88(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_2415E2560();
    v7 = v6;
    sub_2415E25C4(255, &qword_25713B168, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataContentView, &qword_25713B170, (uint64_t)&unk_2416BD430);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_2415E3C18()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A528)
  {
    v0 = sub_2416BAD38();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A528);
  }
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x242699438](a1, v6, a5);
}

uint64_t sub_2415E3C98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v1 = *(_QWORD *)(a1 + 8);
  sub_2416BA108();
  v2 = sub_2416BA168();
  v3 = sub_2416BA588();
  v5[0] = v1;
  v5[1] = MEMORY[0x2426994BC](MEMORY[0x24BDED358], v2);
  return MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v3, v5);
}

uint64_t destroy for ContactRelationTextView()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ContactRelationTextView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ContactRelationTextView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for ContactRelationTextView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactRelationTextView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactRelationTextView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactRelationTextView()
{
  return &type metadata for ContactRelationTextView;
}

uint64_t sub_2415E3EDC()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2415E3EEC(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  sub_2415E40F8();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)objc_opt_self();
  v10 = (void *)sub_2416BB0F8();
  v11 = objc_msgSend(v9, sel_localizedStringForLabel_, v10);

  v12 = sub_2416BB128();
  v14 = v13;

  v24 = v12;
  v25 = v14;
  sub_2415C343C();
  v15 = sub_2416BA9D8();
  v17 = v16;
  v24 = v15;
  v25 = v16;
  v19 = v18 & 1;
  v26 = v18 & 1;
  v27 = v20;
  sub_24159F83C();
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v21 + 32) = a1;
  *(_QWORD *)(v21 + 40) = a2;
  *(_QWORD *)(v21 + 48) = 0x6E6F6974616C6552;
  *(_QWORD *)(v21 + 56) = 0xE800000000000000;
  swift_bridgeObjectRetain();
  v22 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v23 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v23)
  {
    sub_2416BB128();

    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v15, v17, v19);
    swift_bridgeObjectRelease();
    sub_2415E4154((uint64_t)v8, a3);
  }
  else
  {
    __break(1u);
  }
}

void sub_2415E40EC(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_2415E3EEC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_2415E40F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B320)
  {
    sub_2416BA768();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B320);
  }
}

uint64_t sub_2415E4154(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415E40F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_2415E419C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_25713B328;
  if (!qword_25713B328)
  {
    sub_2415E40F8();
    v2 = v1;
    v3 = sub_2415A4680();
    v4[0] = MEMORY[0x24BDF1F80];
    v4[1] = v3;
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713B328);
  }
  return result;
}

void **sub_2415E4204(void **a1, void **a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v4 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = (char *)*a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (void **)&v6[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    v7 = v4;
    v8 = *(int *)(v4 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_2416B9C70();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v13 = v6;
    v12(v9, v10, v11);
    v14 = *(int *)(v7 + 24);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = sub_2416B9C10();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return a1;
}

uint64_t sub_2415E42DC(id *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v3 = (char *)a1 + *(int *)(v2 + 20);
  v4 = sub_2416B9C70();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (char *)a1 + *(int *)(v2 + 24);
  v6 = sub_2416B9C10();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

void **sub_2415E4358(void **a1, void **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = *a2;
  *a1 = *a2;
  v5 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v6 = *(int *)(v5 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2416B9C70();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v11 = v4;
  v10(v7, v8, v9);
  v12 = *(int *)(v5 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

void **sub_2415E4408(void **a1, void **a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  v6 = v4;

  v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v8 = *(int *)(v7 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(v7 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

_QWORD *sub_2415E44B4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v5 = *(int *)(v4 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  v9 = *(int *)(v4 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

void **sub_2415E4554(void **a1, void **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = *a1;
  *a1 = *a2;

  v5 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v6 = *(int *)(v5 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(v5 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_2415E45FC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415E4608(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_2415E4644()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415E4650(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MedicalIDEditMedicationsModalView()
{
  uint64_t result;

  result = qword_25713B388;
  if (!qword_25713B388)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2415E46CC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2415E4734()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2415E4744(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  id v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v3);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v4 = (void *)qword_25713A038;
  v5 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v5);
  v6 = v4;
  sub_2416B9C04();
  v7 = sub_2416BB134();
  v39 = v8;
  v40 = v7;
  if (qword_257139490 != -1)
    v7 = swift_once();
  v9 = *(_QWORD *)algn_257147738;
  v38 = qword_257147730;
  MEMORY[0x24BDAC7A8](v7);
  swift_bridgeObjectRetain();
  v10 = sub_2416BB098();
  v11 = (void *)qword_25713A038;
  MEMORY[0x24BDAC7A8](v10);
  v12 = v11;
  sub_2416B9C04();
  v13 = sub_2416BB134();
  v36 = v14;
  v37 = v13;
  v15 = *a1;
  v16 = objc_msgSend(*a1, sel_medicationInfo);
  if (v16)
  {
    v17 = v16;
    v18 = sub_2416BB128();
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v21 = objc_msgSend(v15, sel_medicationsListVersion);
  if (v21)
  {

    MEMORY[0x24BDAC7A8](v22);
    v23 = sub_2416BB098();
    v24 = (void *)qword_25713A038;
    MEMORY[0x24BDAC7A8](v23);
    v25 = v24;
    sub_2416B9C04();
    v35 = sub_2416BB134();
    v27 = v26;
  }
  else
  {
    v35 = 0;
    v27 = 0;
  }
  v28 = 0x697461636964654DLL;
  sub_24159F83C();
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v29 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v29 + 40) = 0xE900000000000044;
  v30 = 0xEB00000000736E6FLL;
  *(_QWORD *)(v29 + 48) = 0x697461636964654DLL;
  *(_QWORD *)(v29 + 56) = 0xEB00000000736E6FLL;
  v31 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v32 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v32)
  {
    v28 = sub_2416BB128();
    v30 = v33;

  }
  *a2 = v40;
  a2[1] = v39;
  a2[2] = v38;
  a2[3] = v9;
  a2[4] = v37;
  a2[5] = v36;
  a2[6] = v18;
  a2[7] = v20;
  a2[8] = v35;
  a2[9] = v27;
  a2[10] = v28;
  a2[11] = v30;
}

uint64_t sub_2415E4B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 80) = a3;
  return result;
}

double sub_2415E4BCC@<D0>(uint64_t a1@<X8>)
{
  id *v1;
  _OWORD v4[6];

  sub_2415E4744(v1, (uint64_t *)v4);
  return sub_2416392BC(v4, (uint64_t)sub_2415E4B88, 0, a1);
}

unint64_t sub_2415E4C18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713B3C0;
  if (!qword_25713B3C0)
  {
    v1 = type metadata accessor for MedicalIDEditFreeformTextModalView();
    result = MEMORY[0x2426994BC](&unk_2416C0628, v1);
    atomic_store(result, (unint64_t *)&qword_25713B3C0);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MedicalIDErrorView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MedicalIDErrorView()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for MedicalIDErrorView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for MedicalIDErrorView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDErrorView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDErrorView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDErrorView()
{
  return &type metadata for MedicalIDErrorView;
}

uint64_t sub_2415E4DA4()
{
  return swift_getOpaqueTypeConformance2();
}

id sub_2415E4DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id result;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  sub_2415E52C8(0, &qword_25713B3C8, (uint64_t (*)(uint64_t, uint64_t, _QWORD))MEMORY[0x24BDEF380]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v21 - v5;
  sub_2415E5190();
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v13 = result;
    v14 = objc_msgSend(result, sel_isAppleInternalInstall);

    if (v14)
    {
      LODWORD(v22) = sub_2416BA660();
      v22 = sub_2416BA990();
      v23 = v15;
      v24 = v16 & 1;
      v25 = v17;
      v18 = swift_allocObject();
      *(_QWORD *)(v18 + 16) = a1;
      *(_QWORD *)(v18 + 24) = a2;
      swift_bridgeObjectRetain();
      v19 = MEMORY[0x24BDF1FA8];
      v20 = MEMORY[0x24BDF1F80];
      sub_2416BAA80();
      swift_release();
      sub_2415A431C(v22, v23, v24);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v11, v8);
      swift_storeEnumTagMultiPayload();
      v22 = v19;
      v23 = v20;
      swift_getOpaqueTypeConformance2();
      sub_2416BA57C();
      return (id)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    else
    {
      swift_storeEnumTagMultiPayload();
      v22 = MEMORY[0x24BDF1FA8];
      v23 = MEMORY[0x24BDF1F80];
      swift_getOpaqueTypeConformance2();
      return (id)sub_2416BA57C();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_2415E5058()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultWorkspace);
  if (v0)
  {
    v1 = v0;
    v2 = sub_2416B9AB4();
    v3 = *(_QWORD *)(v2 - 8);
    MEMORY[0x24BDAC7A8](v2);
    v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_24159F484();
    v6 = (void *)sub_2416B9A90();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_24166CDAC(MEMORY[0x24BEE4AF8]);
    v7 = (void *)sub_2416BB038();
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_openSensitiveURL_withOptions_, v6, v7);

  }
}

id sub_2415E5188()
{
  uint64_t *v0;

  return sub_2415E4DB4(*v0, v0[1]);
}

void sub_2415E5190()
{
  unint64_t v0;
  uint64_t v1;
  _QWORD v2[2];

  if (!qword_25713B3D0)
  {
    v2[0] = MEMORY[0x24BDF1FA8];
    v2[1] = MEMORY[0x24BDF1F80];
    v0 = MEMORY[0x242699480](0, v2, MEMORY[0x24BDF2550], 0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B3D0);
  }
}

uint64_t sub_2415E51FC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_2415E5220()
{
  sub_2415E5058();
}

unint64_t sub_2415E522C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];

  result = qword_25713B3D8;
  if (!qword_25713B3D8)
  {
    sub_2415E52C8(255, &qword_25713B3E0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3[2] = MEMORY[0x24BDF1FA8];
    v3[3] = MEMORY[0x24BDF1F80];
    v3[0] = swift_getOpaqueTypeConformance2();
    v3[1] = MEMORY[0x24BDF5138];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713B3D8);
  }
  return result;
}

void sub_2415E52C8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_2415E5190();
    v7 = a3(a1, v6, MEMORY[0x24BDF5158]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_2415E532C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = v1;
  v39 = a1;
  v3 = type metadata accessor for EditOrganDonationCellView();
  v37 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v37 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v5 = sub_2415E8488();
  MEMORY[0x24BDAC7A8](v5);
  v38 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_257139408 != -1)
    swift_once();
  v7 = unk_25713B3F0;
  v36 = qword_25713B3E8;
  v8 = (uint64_t *)(v2 + *(int *)(v3 + 20));
  v9 = v8[1];
  v43 = *v8;
  v44 = v9;
  sub_24159D6B0(0, &qword_25713B508, (uint64_t (*)(uint64_t))type metadata accessor for EditOrganDonationCellViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v35 = v7;
  swift_bridgeObjectRetain();
  sub_2416BAD14();
  v34 = sub_241604BF8((uint64_t)&unk_251193978, v40);
  swift_release();
  v10 = v8[1];
  v40 = *v8;
  v41 = v10;
  sub_2416BAD2C();
  v11 = v43;
  v12 = v44;
  v13 = v45;
  swift_getKeyPath();
  v43 = v11;
  v44 = v12;
  v45 = v13;
  sub_24159D6B0(0, &qword_25713B510, (uint64_t (*)(uint64_t))type metadata accessor for EditOrganDonationCellViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  sub_2416BAE28();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v32 = v41;
  v33 = v40;
  v14 = v42;
  sub_24159F83C();
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2416BCC80;
  v16 = (_QWORD *)(v2 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
  v17 = v16[1];
  *(_QWORD *)(v15 + 32) = *v16;
  *(_QWORD *)(v15 + 40) = v17;
  v18 = 0xED00006E6F697461;
  v19 = 0x6E6F446E6167724FLL;
  strcpy((char *)(v15 + 48), "OrganDonation");
  *(_WORD *)(v15 + 62) = -4864;
  swift_bridgeObjectRetain();
  v20 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v21 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v21)
  {
    v19 = sub_2416BB128();
    v18 = v22;

  }
  v23 = (uint64_t *)(v2 + *(int *)(v3 + 24));
  v24 = *v23;
  v25 = v23[1];
  sub_2415E8A70(v2, (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  v27 = swift_allocObject();
  sub_2415A85BC((uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v27 + v26, (uint64_t (*)(_QWORD))type metadata accessor for EditOrganDonationCellView);
  sub_2415A4818(v24);
  v30 = v24;
  v28 = v38;
  sub_2415E58B4(v36, v35, v34, v33, v32, v14, 4, 0, v38, v19, v18, 0, v30, v25, (uint64_t)sub_2415E8AB8, v27);
  return sub_2415A85BC(v28, v39, (uint64_t (*)(_QWORD))sub_2415E8488);
}

uint64_t sub_2415E56A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[8];

  v3 = v2;
  v14[0] = a2;
  v5 = type metadata accessor for EditOrganDonationCellView();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v14[7] = a1;
  v8 = (uint64_t *)(v3 + *(int *)(MEMORY[0x24BDAC7A8](v5) + 20));
  v10 = *v8;
  v9 = v8[1];
  v14[1] = v10;
  v14[2] = v9;
  sub_24159D6B0(0, &qword_25713B508, (uint64_t (*)(uint64_t))type metadata accessor for EditOrganDonationCellViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  swift_getKeyPath();
  sub_24159D6B0(0, &qword_25713B510, (uint64_t (*)(uint64_t))type metadata accessor for EditOrganDonationCellViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  sub_2416BAE28();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_2415E8A70(v3, (uint64_t)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v12 = swift_allocObject();
  sub_2415A85BC((uint64_t)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, (uint64_t (*)(_QWORD))type metadata accessor for EditOrganDonationCellView);
  sub_2415E85FC();
  sub_24159CE88(&qword_25713B4F8, (uint64_t (*)(uint64_t))sub_2415E85FC, MEMORY[0x24BDED358]);
  sub_2416BAB70();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_2415E58B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;

  v42 = a8;
  v39 = a6;
  v40 = a7;
  v37 = a4;
  v38 = a5;
  v34 = a2;
  v35 = a3;
  v44 = a15;
  v45 = a16;
  v43 = a14;
  v41 = a13;
  v36 = a12;
  v33 = a11;
  *(_WORD *)(a9 + 57) = 1028;
  *(_QWORD *)(a9 + 64) = swift_getKeyPath();
  *(_QWORD *)(a9 + 72) = 0;
  *(_BYTE *)(a9 + 80) = 0;
  v18 = (int *)sub_2415E8488();
  *(_QWORD *)(a9 + 88) = 0;
  *(_QWORD *)(a9 + 96) = 0;
  v19 = sub_2416B9B80();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = sub_2416B9B74();
  MEMORY[0x24BDAC7A8](v23);
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))((char *)&v33 - v22, (char *)&v33 - v22, v19);
  sub_2416BAD08();
  (*(void (**)(char *, uint64_t))(v20 + 8))((char *)&v33 - v22, v19);
  v24 = a9 + v18[21];
  v46 = 0;
  sub_2416BAD08();
  v25 = v48;
  *(_BYTE *)v24 = v47;
  *(_QWORD *)(v24 + 8) = v25;
  v26 = v34;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = v26;
  v27 = v37;
  *(_QWORD *)(a9 + 32) = v35;
  *(_QWORD *)(a9 + 40) = v27;
  *(_QWORD *)(a9 + 48) = v38;
  *(_BYTE *)(a9 + 56) = v39;
  *(_BYTE *)(a9 + 57) = v40;
  *(_BYTE *)(a9 + 58) = v42;
  v28 = v33;
  *(_QWORD *)(a9 + 16) = a10;
  *(_QWORD *)(a9 + 24) = v28;
  *(_BYTE *)(a9 + v18[23]) = v36;
  result = sub_2415A6144(*(_QWORD *)(a9 + 88));
  v30 = v43;
  *(_QWORD *)(a9 + 88) = v41;
  *(_QWORD *)(a9 + 96) = v30;
  v31 = (_QWORD *)(a9 + v18[22]);
  v32 = v45;
  *v31 = v44;
  v31[1] = v32;
  return result;
}

uint64_t sub_2415E5A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;

  v47 = a8;
  v45 = a6;
  v46 = a7;
  v42 = a4;
  v43 = a5;
  v50 = a17;
  v51 = a18;
  v48 = a15;
  v49 = a16;
  v44 = a14;
  v40 = a3;
  v41 = a13;
  v38 = a2;
  v39 = a12;
  v37 = a11;
  *(_QWORD *)(a9 + 64) = 0;
  *(_BYTE *)(a9 + 72) = 1;
  *(_QWORD *)(a9 + 80) = 0;
  *(_BYTE *)(a9 + 88) = 1;
  *(_QWORD *)(a9 + 96) = swift_getKeyPath();
  *(_QWORD *)(a9 + 104) = 0;
  *(_BYTE *)(a9 + 112) = 0;
  v20 = (int *)sub_2415E8E44();
  *(_QWORD *)(a9 + 120) = 0;
  *(_QWORD *)(a9 + 128) = 0;
  v21 = sub_2416B9B80();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_QWORD *)(v22 + 64);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
  v25 = sub_2416B9B74();
  MEMORY[0x24BDAC7A8](v25);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 16))(&v36[-v24], &v36[-v24], v21);
  sub_2416BAD08();
  (*(void (**)(_BYTE *, uint64_t))(v22 + 8))(&v36[-v24], v21);
  v26 = a9 + v20[21];
  v52 = 0;
  sub_2416BAD08();
  v27 = v54;
  *(_BYTE *)v26 = v53;
  *(_QWORD *)(v26 + 8) = v27;
  v28 = v38;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = v28;
  v29 = v42;
  *(_QWORD *)(a9 + 32) = v40;
  *(_QWORD *)(a9 + 40) = v29;
  v30 = v45;
  *(_QWORD *)(a9 + 48) = v43;
  *(_QWORD *)(a9 + 56) = v30;
  *(_QWORD *)(a9 + 64) = v46;
  *(_BYTE *)(a9 + 72) = v47 & 1;
  *(_QWORD *)(a9 + 80) = a10;
  *(_BYTE *)(a9 + 88) = v37 & 1;
  v31 = v41;
  *(_QWORD *)(a9 + 16) = v39;
  *(_QWORD *)(a9 + 24) = v31;
  *(_BYTE *)(a9 + v20[23]) = v44;
  result = sub_2415A6144(*(_QWORD *)(a9 + 120));
  v33 = v49;
  *(_QWORD *)(a9 + 120) = v48;
  *(_QWORD *)(a9 + 128) = v33;
  v34 = (_QWORD *)(a9 + v20[22]);
  v35 = v51;
  *v34 = v50;
  v34[1] = v35;
  return result;
}

uint64_t sub_2415E5CB0()
{
  sub_2415E8724(0);
  sub_2415A3D28(255, &qword_25713B4C0, (uint64_t)&type metadata for OrganDonationRegistrationView, MEMORY[0x24BDF1070], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  sub_2415E881C(255);
  sub_2415E899C();
  sub_2415E88A8();
  sub_24159CE88(&qword_25713B4E8, (uint64_t (*)(uint64_t))sub_2415E88A8, MEMORY[0x24BDEB848]);
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  return sub_2416BA15C();
}

uint64_t sub_2415E5DAC(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v1 = *(_BYTE *)(a1 + *(int *)(type metadata accessor for EditOrganDonationCellView() + 28) + 8);
  v2 = swift_retain();
  v3 = sub_2415C0C54(v2, v1);
  swift_release();
  swift_beginAccess();
  v4 = *(id *)(v3 + 16);
  swift_release();
  sub_24159D6B0(0, &qword_25713B508, (uint64_t (*)(uint64_t))type metadata accessor for EditOrganDonationCellViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  sub_2416BA180();
  sub_2416BA834();
  sub_2415A3D28(0, &qword_25713B4C0, (uint64_t)&type metadata for OrganDonationRegistrationView, MEMORY[0x24BDF1070], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  sub_2415E881C(0);
  sub_2415E899C();
  sub_2415E88A8();
  sub_24159CE88(&qword_25713B4E8, (uint64_t (*)(uint64_t))sub_2415E88A8, MEMORY[0x24BDEB848]);
  swift_getOpaqueTypeConformance2();
  sub_2416BABAC();

  return swift_release();
}

uint64_t sub_2415E5F60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v10[16];
  uint64_t v11;

  v2 = sub_2416BA5E8();
  MEMORY[0x24BDAC7A8](v2);
  sub_2415E88A8();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2416BA5C4();
  v11 = a1;
  sub_2415A3D28(0, (unint64_t *)&qword_25713B4D8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF4398]);
  sub_2415E8934();
  sub_2416B9FE8();
  v8 = sub_24159CE88(&qword_25713B4E8, (uint64_t (*)(uint64_t))sub_2415E88A8, MEMORY[0x24BDEB848]);
  MEMORY[0x242697E0C](v7, v4, v8);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_2415E60AC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  v0 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v0);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v1 = (void *)qword_25713A038;
  v2 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v2);
  v3 = v1;
  sub_2416B9C04();
  sub_2416BB134();
  type metadata accessor for EditOrganDonationCellView();
  sub_24159D6B0(0, &qword_25713B508, (uint64_t (*)(uint64_t))type metadata accessor for EditOrganDonationCellViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  sub_2415C343C();
  return sub_2416BAD68();
}

uint64_t sub_2415E6250()
{
  swift_getKeyPath();
  sub_24159CE88((unint64_t *)&qword_25713B518, (uint64_t (*)(uint64_t))type metadata accessor for EditOrganDonationCellViewModel, (uint64_t)&protocol conformance descriptor for EditOrganDonationCellViewModel);
  sub_2416B9CA0();
  return swift_release();
}

void sub_2415E62F8()
{
  char *v0;
  char v1;

  v1 = *v0;
  _s11MedicalIDUI0A23IDPersonalInfoViewModelV33localizedOrganDonationPickerValue3forSSAA0hI6StatusO_tFZ_0((uint64_t)&v1);
}

unint64_t sub_2415E6320(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_2415E634C();
  result = sub_2415E6390();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_2415E634C()
{
  unint64_t result;

  result = qword_25713B3F8;
  if (!qword_25713B3F8)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for OrganDonationStatus, &type metadata for OrganDonationStatus);
    atomic_store(result, (unint64_t *)&qword_25713B3F8);
  }
  return result;
}

unint64_t sub_2415E6390()
{
  unint64_t result;

  result = qword_25713B400;
  if (!qword_25713B400)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for OrganDonationStatus, &type metadata for OrganDonationStatus);
    atomic_store(result, (unint64_t *)&qword_25713B400);
  }
  return result;
}

uint64_t sub_2415E63D4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t result;
  uint64_t v5;

  v0 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v0);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v1 = (void *)qword_25713A038;
  v2 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v2);
  v3 = v1;
  sub_2416B9C04();
  result = sub_2416BB134();
  qword_25713B3E8 = result;
  unk_25713B3F0 = v5;
  return result;
}

_QWORD *sub_2415E6500(_QWORD *a1, char *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  id v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v84;
  void *v85;
  uint64_t v86;
  char *__dst;
  void *v89;
  unsigned int (*v90)(char *, uint64_t, uint64_t);
  int *v91;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    v7 = *((_QWORD *)a2 + 3);
    a1[2] = *((_QWORD *)a2 + 2);
    a1[3] = v7;
    v8 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v8;
    v9 = *((_QWORD *)a2 + 7);
    a1[6] = *((_QWORD *)a2 + 6);
    a1[7] = v9;
    v10 = *((_QWORD *)a2 + 9);
    a1[8] = *((_QWORD *)a2 + 8);
    a1[9] = v10;
    v11 = *((_QWORD *)a2 + 11);
    a1[10] = *((_QWORD *)a2 + 10);
    a1[11] = v11;
    v85 = (void *)*((_QWORD *)a2 + 12);
    v89 = (void *)*((_QWORD *)a2 + 13);
    a1[12] = v85;
    a1[13] = v89;
    v91 = (int *)type metadata accessor for MedicalIDData();
    v12 = v91[13];
    __dst = (char *)v4 + v12;
    v84 = &a2[v12];
    v13 = sub_2416B9B50();
    v86 = *(_QWORD *)(v13 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v85;
    v16 = v89;
    v90 = v14;
    if (v14(v84, 1, v13))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v84, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      v18 = v86;
    }
    else
    {
      v18 = v86;
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(__dst, v84, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(__dst, 0, 1, v13);
    }
    v20 = v91[14];
    v21 = (char *)v4 + v20;
    v22 = &a2[v20];
    if (v90(&a2[v20], 1, v13))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v22, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v13);
    }
    v24 = v91[15];
    v25 = (_QWORD *)((char *)v4 + v24);
    v26 = &a2[v24];
    v27 = *((_QWORD *)v26 + 1);
    *v25 = *(_QWORD *)v26;
    v25[1] = v27;
    v28 = v91[16];
    v29 = (_QWORD *)((char *)v4 + v28);
    v30 = &a2[v28];
    v31 = *((_QWORD *)v30 + 1);
    *v29 = *(_QWORD *)v30;
    v29[1] = v31;
    *((_BYTE *)v4 + v91[17]) = a2[v91[17]];
    *((_BYTE *)v4 + v91[18]) = a2[v91[18]];
    v32 = v91[19];
    v33 = (char *)v4 + v32;
    v34 = (uint64_t *)&a2[v32];
    v35 = *(_QWORD *)&a2[v32 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)v33 = *(_OWORD *)v34;
    }
    else
    {
      v36 = *v34;
      sub_2415A0A90(*v34, v35);
      *(_QWORD *)v33 = v36;
      *((_QWORD *)v33 + 1) = v35;
    }
    v37 = v91[20];
    v38 = (char *)v4 + v37;
    v39 = &a2[v37];
    v40 = sub_2416B9A18();
    v41 = *(_QWORD *)(v40 - 8);
    v42 = v18;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    v44 = v91[21];
    v45 = *(void **)&a2[v44];
    *(_QWORD *)((char *)v4 + v44) = v45;
    v46 = v91[22];
    v47 = (char *)v4 + v46;
    v48 = &a2[v46];
    v49 = v45;
    if (v90(v48, 1, v13))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v47, v48, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v47, 0, 1, v13);
    }
    v51 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    v52 = v51[5];
    v53 = (char *)v4 + v52;
    v54 = &a2[v52];
    v55 = sub_2416B9C70();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
    v56 = v51[6];
    v57 = (char *)v4 + v56;
    v58 = &a2[v56];
    v59 = sub_2416B9C10();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
    v60 = v51[7];
    v61 = *(void **)&a2[v60];
    *(_QWORD *)((char *)v4 + v60) = v61;
    v62 = v51[8];
    v63 = *(void **)&a2[v62];
    *(_QWORD *)((char *)v4 + v62) = v63;
    v64 = v51[9];
    v65 = (_QWORD *)((char *)v4 + v64);
    v66 = &a2[v64];
    v67 = *((_QWORD *)v66 + 1);
    *v65 = *(_QWORD *)v66;
    v65[1] = v67;
    v68 = a3[5];
    v69 = a3[6];
    v70 = (_QWORD *)((char *)v4 + v68);
    v71 = &a2[v68];
    v72 = *((_QWORD *)v71 + 1);
    *v70 = *(_QWORD *)v71;
    v70[1] = v72;
    v73 = (_QWORD *)((char *)v4 + v69);
    v74 = &a2[v69];
    v75 = *(_QWORD *)&a2[v69];
    v76 = v61;
    v77 = v63;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v75)
    {
      v78 = *((_QWORD *)v74 + 1);
      *v73 = v75;
      v73[1] = v78;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v73 = *(_OWORD *)v74;
    }
    v79 = a3[7];
    v80 = (char *)v4 + v79;
    v81 = &a2[v79];
    v82 = *(_QWORD *)v81;
    LOBYTE(v81) = v81[8];
    *(_QWORD *)v80 = v82;
    v80[8] = (char)v81;
  }
  swift_retain();
  return v4;
}

uint64_t sub_2415E6A14(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = (int *)type metadata accessor for MedicalIDData();
  v5 = a1 + v4[13];
  v6 = sub_2416B9B50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + v4[14];
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)(a1 + v4[19]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_2415A0DAC(*v10, v11);
  v12 = a1 + v4[20];
  v13 = sub_2416B9A18();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);

  v15 = a1 + v4[22];
  if (!v8(v15, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  v16 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v17 = a1 + v16[5];
  v18 = sub_2416B9C70();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + v16[6];
  v20 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + *(int *)(a2 + 24)))
    swift_release();
  return swift_release();
}

_QWORD *sub_2415E6C78(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  id v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v82;
  void *v83;
  uint64_t v84;
  char *__dst;
  void *v87;
  unsigned int (*v88)(char *, uint64_t, uint64_t);
  int *v89;

  v5 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *((_QWORD *)a2 + 3);
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = v6;
  v7 = *((_QWORD *)a2 + 5);
  a1[4] = *((_QWORD *)a2 + 4);
  a1[5] = v7;
  v8 = *((_QWORD *)a2 + 7);
  a1[6] = *((_QWORD *)a2 + 6);
  a1[7] = v8;
  v9 = *((_QWORD *)a2 + 9);
  a1[8] = *((_QWORD *)a2 + 8);
  a1[9] = v9;
  v10 = *((_QWORD *)a2 + 11);
  a1[10] = *((_QWORD *)a2 + 10);
  a1[11] = v10;
  v83 = (void *)*((_QWORD *)a2 + 12);
  v87 = (void *)*((_QWORD *)a2 + 13);
  a1[12] = v83;
  a1[13] = v87;
  v89 = (int *)type metadata accessor for MedicalIDData();
  v11 = v89[13];
  __dst = (char *)a1 + v11;
  v82 = &a2[v11];
  v12 = sub_2416B9B50();
  v84 = *(_QWORD *)(v12 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = v83;
  v15 = v87;
  v88 = v13;
  if (v13(v82, 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v82, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    v17 = v84;
  }
  else
  {
    v17 = v84;
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(__dst, v82, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(__dst, 0, 1, v12);
  }
  v18 = v89[14];
  v19 = (char *)a1 + v18;
  v20 = &a2[v18];
  if (v88(&a2[v18], 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v20, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v12);
  }
  v22 = v89[15];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = &a2[v22];
  v25 = *((_QWORD *)v24 + 1);
  *v23 = *(_QWORD *)v24;
  v23[1] = v25;
  v26 = v89[16];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = &a2[v26];
  v29 = *((_QWORD *)v28 + 1);
  *v27 = *(_QWORD *)v28;
  v27[1] = v29;
  *((_BYTE *)a1 + v89[17]) = a2[v89[17]];
  *((_BYTE *)a1 + v89[18]) = a2[v89[18]];
  v30 = v89[19];
  v31 = (char *)a1 + v30;
  v32 = (uint64_t *)&a2[v30];
  v33 = *(_QWORD *)&a2[v30 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)v31 = *(_OWORD *)v32;
  }
  else
  {
    v34 = *v32;
    sub_2415A0A90(*v32, v33);
    *(_QWORD *)v31 = v34;
    *((_QWORD *)v31 + 1) = v33;
  }
  v35 = v89[20];
  v36 = (char *)a1 + v35;
  v37 = &a2[v35];
  v38 = sub_2416B9A18();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = v17;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  v42 = v89[21];
  v43 = *(void **)&a2[v42];
  *(_QWORD *)((char *)a1 + v42) = v43;
  v44 = v89[22];
  v45 = (char *)a1 + v44;
  v46 = &a2[v44];
  v47 = v43;
  if (v88(v46, 1, v12))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v45, v46, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v45, 0, 1, v12);
  }
  v49 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v50 = v49[5];
  v51 = (char *)a1 + v50;
  v52 = &a2[v50];
  v53 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
  v54 = v49[6];
  v55 = (char *)a1 + v54;
  v56 = &a2[v54];
  v57 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
  v58 = v49[7];
  v59 = *(void **)&a2[v58];
  *(_QWORD *)((char *)a1 + v58) = v59;
  v60 = v49[8];
  v61 = *(void **)&a2[v60];
  *(_QWORD *)((char *)a1 + v60) = v61;
  v62 = v49[9];
  v63 = (_QWORD *)((char *)a1 + v62);
  v64 = &a2[v62];
  v65 = *((_QWORD *)v64 + 1);
  *v63 = *(_QWORD *)v64;
  v63[1] = v65;
  v66 = a3[5];
  v67 = a3[6];
  v68 = (_QWORD *)((char *)a1 + v66);
  v69 = &a2[v66];
  v70 = *((_QWORD *)v69 + 1);
  *v68 = *(_QWORD *)v69;
  v68[1] = v70;
  v71 = (_QWORD *)((char *)a1 + v67);
  v72 = &a2[v67];
  v73 = *(_QWORD *)&a2[v67];
  v74 = v59;
  v75 = v61;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v73)
  {
    v76 = *((_QWORD *)v72 + 1);
    *v71 = v73;
    v71[1] = v76;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v71 = *(_OWORD *)v72;
  }
  v77 = a3[7];
  v78 = (char *)a1 + v77;
  v79 = &a2[v77];
  v80 = *(_QWORD *)v79;
  LOBYTE(v79) = v79[8];
  *(_QWORD *)v78 = v80;
  v78[8] = (char)v79;
  swift_retain();
  return a1;
}

char *sub_2415E7164(char *a1, _QWORD *a2, int *a3)
{
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t (*v95)(char *, uint64_t, uint64_t);
  uint64_t v96;

  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 3) = a2[3];
  *((_QWORD *)a1 + 4) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 7) = a2[7];
  *((_QWORD *)a1 + 8) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 9) = a2[9];
  *((_QWORD *)a1 + 10) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 11) = a2[11];
  v5 = (void *)*((_QWORD *)a1 + 12);
  v6 = (void *)a2[12];
  *((_QWORD *)a1 + 12) = v6;
  v7 = v6;

  v8 = (void *)*((_QWORD *)a1 + 13);
  v9 = (void *)a2[13];
  *((_QWORD *)a1 + 13) = v9;
  v10 = v9;

  v11 = (int *)type metadata accessor for MedicalIDData();
  v12 = v11[13];
  v13 = &a1[v12];
  v14 = (char *)a2 + v12;
  v15 = sub_2416B9B50();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  v21 = v11[14];
  v22 = &a1[v21];
  v23 = (char *)a2 + v21;
  v24 = v17(&a1[v21], 1, v15);
  v25 = v17(v23, 1, v15);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  v27 = v11[15];
  v28 = &a1[v27];
  v29 = (_QWORD *)((char *)a2 + v27);
  *(_QWORD *)v28 = *v29;
  *((_QWORD *)v28 + 1) = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = v11[16];
  v31 = &a1[v30];
  v32 = (_QWORD *)((char *)a2 + v30);
  *(_QWORD *)v31 = *v32;
  *((_QWORD *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v11[17]] = *((_BYTE *)a2 + v11[17]);
  a1[v11[18]] = *((_BYTE *)a2 + v11[18]);
  v33 = v11[19];
  v34 = (uint64_t *)&a1[v33];
  v35 = (_QWORD *)((char *)a2 + v33);
  v36 = *(_QWORD *)((char *)a2 + v33 + 8);
  v95 = v17;
  v96 = v16;
  if (*(_QWORD *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      v37 = *v35;
      sub_2415A0A90(v37, v36);
      *v34 = v37;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v34);
LABEL_18:
    *(_OWORD *)v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  v38 = *v35;
  sub_2415A0A90(v38, v36);
  v39 = *v34;
  v40 = v34[1];
  *v34 = v38;
  v34[1] = v36;
  sub_2415A0DAC(v39, v40);
LABEL_20:
  v41 = v11[20];
  v42 = &a1[v41];
  v43 = (char *)a2 + v41;
  v44 = sub_2416B9A18();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46(v43, 1, v44);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_26:
  v50 = v11[21];
  v51 = *(void **)&a1[v50];
  v52 = *(void **)((char *)a2 + v50);
  *(_QWORD *)&a1[v50] = v52;
  v53 = v52;

  v54 = v11[22];
  v55 = &a1[v54];
  v56 = (char *)a2 + v54;
  v57 = v95(&a1[v54], 1, v15);
  v58 = v95(v56, 1, v15);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v55, v56, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v55, 0, 1, v15);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v96 + 8))(v55, v15);
LABEL_31:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v96 + 24))(v55, v56, v15);
LABEL_32:
  v60 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v61 = v60[5];
  v62 = &a1[v61];
  v63 = (char *)a2 + v61;
  v64 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 24))(v62, v63, v64);
  v65 = v60[6];
  v66 = &a1[v65];
  v67 = (char *)a2 + v65;
  v68 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 24))(v66, v67, v68);
  v69 = v60[7];
  v70 = *(void **)&a1[v69];
  v71 = *(void **)((char *)a2 + v69);
  *(_QWORD *)&a1[v69] = v71;
  v72 = v71;

  v73 = v60[8];
  v74 = *(void **)((char *)a2 + v73);
  v75 = *(void **)&a1[v73];
  *(_QWORD *)&a1[v73] = v74;
  v76 = v74;

  v77 = v60[9];
  v78 = &a1[v77];
  v79 = (_QWORD *)((char *)a2 + v77);
  *(_QWORD *)v78 = *v79;
  *((_QWORD *)v78 + 1) = v79[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v80 = a3[5];
  v81 = &a1[v80];
  v82 = (char *)a2 + v80;
  *(_QWORD *)&a1[v80] = *(_QWORD *)((char *)a2 + v80);
  swift_retain();
  swift_release();
  *((_QWORD *)v81 + 1) = *((_QWORD *)v82 + 1);
  swift_retain();
  swift_release();
  v83 = a3[6];
  v84 = &a1[v83];
  v85 = (char *)a2 + v83;
  v86 = *(_QWORD *)&a1[v83];
  v87 = *(_QWORD *)((char *)a2 + v83);
  if (!v86)
  {
    if (v87)
    {
      v89 = *((_QWORD *)v85 + 1);
      *(_QWORD *)v84 = v87;
      *((_QWORD *)v84 + 1) = v89;
      swift_retain();
      goto LABEL_39;
    }
LABEL_38:
    *(_OWORD *)v84 = *(_OWORD *)v85;
    goto LABEL_39;
  }
  if (!v87)
  {
    swift_release();
    goto LABEL_38;
  }
  v88 = *((_QWORD *)v85 + 1);
  *(_QWORD *)v84 = v87;
  *((_QWORD *)v84 + 1) = v88;
  swift_retain();
  swift_release();
LABEL_39:
  v90 = a3[7];
  v91 = &a1[v90];
  v92 = (char *)a2 + v90;
  v93 = *(_QWORD *)v92;
  LOBYTE(v92) = v92[8];
  *(_QWORD *)v91 = v93;
  v91[8] = (char)v92;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_2415E788C(uint64_t a1, uint64_t a2, int *a3)
{
  int *v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = v5[13];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_2416B9B50();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = v5[14];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(_OWORD *)(a1 + v5[15]) = *(_OWORD *)(a2 + v5[15]);
  *(_OWORD *)(a1 + v5[16]) = *(_OWORD *)(a2 + v5[16]);
  *(_BYTE *)(a1 + v5[17]) = *(_BYTE *)(a2 + v5[17]);
  *(_BYTE *)(a1 + v5[18]) = *(_BYTE *)(a2 + v5[18]);
  *(_OWORD *)(a1 + v5[19]) = *(_OWORD *)(a2 + v5[19]);
  v17 = v5[20];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = sub_2416B9A18();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_QWORD *)(a1 + v5[21]) = *(_QWORD *)(a2 + v5[21]);
  v23 = v5[22];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  if (v11((const void *)(a2 + v23), 1, v9))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v24, v25, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
  }
  v27 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v28 = v27[5];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = sub_2416B9C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
  v32 = v27[6];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
  *(_QWORD *)(a1 + v27[7]) = *(_QWORD *)(a2 + v27[7]);
  *(_QWORD *)(a1 + v27[8]) = *(_QWORD *)(a2 + v27[8]);
  *(_OWORD *)(a1 + v27[9]) = *(_OWORD *)(a2 + v27[9]);
  v36 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v37 = (_QWORD *)(a1 + v36);
  v38 = (uint64_t *)(a2 + v36);
  v39 = *v38;
  if (*v38)
  {
    v40 = v38[1];
    *v37 = v39;
    v37[1] = v40;
  }
  else
  {
    *(_OWORD *)v37 = *(_OWORD *)v38;
  }
  v41 = a3[7];
  v42 = a1 + v41;
  v43 = a2 + v41;
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
  return a1;
}

char *sub_2415E7C80(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t (*v95)(char *, uint64_t, uint64_t);
  uint64_t v96;

  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  v6 = a2[4];
  *((_QWORD *)a1 + 3) = a2[3];
  *((_QWORD *)a1 + 4) = v6;
  swift_bridgeObjectRelease();
  v7 = a2[6];
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = v7;
  swift_bridgeObjectRelease();
  v8 = a2[8];
  *((_QWORD *)a1 + 7) = a2[7];
  *((_QWORD *)a1 + 8) = v8;
  swift_bridgeObjectRelease();
  v9 = a2[10];
  *((_QWORD *)a1 + 9) = a2[9];
  *((_QWORD *)a1 + 10) = v9;
  swift_bridgeObjectRelease();
  v10 = (void *)*((_QWORD *)a1 + 12);
  v11 = a2[12];
  *((_QWORD *)a1 + 11) = a2[11];
  *((_QWORD *)a1 + 12) = v11;

  v12 = (void *)*((_QWORD *)a1 + 13);
  *((_QWORD *)a1 + 13) = a2[13];

  v13 = (int *)type metadata accessor for MedicalIDData();
  v14 = v13[13];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = sub_2416B9B50();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  v23 = v13[14];
  v24 = &a1[v23];
  v25 = (char *)a2 + v23;
  v26 = v19(&a1[v23], 1, v17);
  v27 = v19(v25, 1, v17);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  v29 = v13[15];
  v30 = &a1[v29];
  v31 = (_QWORD *)((char *)a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *(_QWORD *)v30 = v33;
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  v34 = v13[16];
  v35 = &a1[v34];
  v36 = (_QWORD *)((char *)a2 + v34);
  v38 = *v36;
  v37 = v36[1];
  *(_QWORD *)v35 = v38;
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  a1[v13[17]] = *((_BYTE *)a2 + v13[17]);
  a1[v13[18]] = *((_BYTE *)a2 + v13[18]);
  v39 = v13[19];
  v40 = (uint64_t)&a1[v39];
  v41 = (char *)a2 + v39;
  v42 = *(_QWORD *)&a1[v39 + 8];
  v95 = v19;
  v96 = v18;
  if (v42 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v40 = *(_OWORD *)v41;
    goto LABEL_18;
  }
  v43 = *((_QWORD *)v41 + 1);
  if (v43 >> 60 == 15)
  {
    sub_2415A1B38(v40);
    goto LABEL_16;
  }
  v44 = *(_QWORD *)v40;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_QWORD *)(v40 + 8) = v43;
  sub_2415A0DAC(v44, v42);
LABEL_18:
  v45 = v13[20];
  v46 = &a1[v45];
  v47 = (char *)a2 + v45;
  v48 = sub_2416B9A18();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v46, 1, v48);
  v52 = v50(v47, 1, v48);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
LABEL_23:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 40))(v46, v47, v48);
LABEL_24:
  v54 = v13[21];
  v55 = *(void **)&a1[v54];
  *(_QWORD *)&a1[v54] = *(_QWORD *)((char *)a2 + v54);

  v56 = v13[22];
  v57 = &a1[v56];
  v58 = (char *)a2 + v56;
  v59 = v95(&a1[v56], 1, v17);
  v60 = v95(v58, 1, v17);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v57, v58, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v57, 0, 1, v17);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v60)
  {
    (*(void (**)(char *, uint64_t))(v96 + 8))(v57, v17);
LABEL_29:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v96 + 40))(v57, v58, v17);
LABEL_30:
  v62 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v63 = v62[5];
  v64 = &a1[v63];
  v65 = (char *)a2 + v63;
  v66 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 40))(v64, v65, v66);
  v67 = v62[6];
  v68 = &a1[v67];
  v69 = (char *)a2 + v67;
  v70 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 40))(v68, v69, v70);
  v71 = v62[7];
  v72 = *(void **)&a1[v71];
  *(_QWORD *)&a1[v71] = *(_QWORD *)((char *)a2 + v71);

  v73 = v62[8];
  v74 = *(void **)&a1[v73];
  *(_QWORD *)&a1[v73] = *(_QWORD *)((char *)a2 + v73);

  v75 = v62[9];
  v76 = &a1[v75];
  v77 = (_QWORD *)((char *)a2 + v75);
  v79 = *v77;
  v78 = v77[1];
  *(_QWORD *)v76 = v79;
  *((_QWORD *)v76 + 1) = v78;
  swift_bridgeObjectRelease();
  v80 = a3[5];
  v81 = &a1[v80];
  v82 = (char *)a2 + v80;
  *(_QWORD *)&a1[v80] = *(_QWORD *)((char *)a2 + v80);
  swift_release();
  *((_QWORD *)v81 + 1) = *((_QWORD *)v82 + 1);
  swift_release();
  v83 = a3[6];
  v84 = &a1[v83];
  v85 = (char *)a2 + v83;
  v86 = *(_QWORD *)&a1[v83];
  v87 = *(_QWORD *)((char *)a2 + v83);
  if (!v86)
  {
    if (v87)
    {
      v89 = *((_QWORD *)v85 + 1);
      *(_QWORD *)v84 = v87;
      *((_QWORD *)v84 + 1) = v89;
      goto LABEL_37;
    }
LABEL_36:
    *(_OWORD *)v84 = *(_OWORD *)v85;
    goto LABEL_37;
  }
  if (!v87)
  {
    swift_release();
    goto LABEL_36;
  }
  v88 = *((_QWORD *)v85 + 1);
  *(_QWORD *)v84 = v87;
  *((_QWORD *)v84 + 1) = v88;
  swift_release();
LABEL_37:
  v90 = a3[7];
  v91 = &a1[v90];
  v92 = (char *)a2 + v90;
  v93 = *(_QWORD *)v92;
  LOBYTE(v92) = v92[8];
  *(_QWORD *)v91 = v93;
  v91[8] = (char)v92;
  swift_release();
  return a1;
}

uint64_t sub_2415E82AC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415E82B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_2415E8334()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415E8340(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDPersonalInfoViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for EditOrganDonationCellView()
{
  uint64_t result;

  result = qword_25713B460;
  if (!qword_25713B460)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2415E83F4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MedicalIDPersonalInfoViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2415E8478()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2415E8488()
{
  uint64_t result;

  result = qword_25713B4A0;
  if (!qword_25713B4A0)
  {
    sub_2415E855C(255);
    sub_2415E8A24();
    sub_2415E85FC();
    sub_24159CE88(&qword_25713B4F8, (uint64_t (*)(uint64_t))sub_2415E85FC, MEMORY[0x24BDED358]);
    swift_getOpaqueTypeConformance2();
    type metadata accessor for ExpandableWheelPickerView();
  }
  return result;
}

void sub_2415E855C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_25713B4A8)
  {
    sub_2415E85FC();
    v3 = v2;
    v4 = sub_24159CE88(&qword_25713B4F8, (uint64_t (*)(uint64_t))sub_2415E85FC, MEMORY[0x24BDED358]);
    v7[0] = MEMORY[0x24BDF4780];
    v7[1] = v3;
    v7[2] = MEMORY[0x24BDF4760];
    v7[3] = v4;
    v5 = MEMORY[0x242699480](a1, v7, MEMORY[0x24BDF3650], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25713B4A8);
  }
}

void sub_2415E85FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B4B0)
  {
    sub_2416BA108();
    sub_2415E8724(255);
    sub_2415A3D28(255, &qword_25713B4C0, (uint64_t)&type metadata for OrganDonationRegistrationView, MEMORY[0x24BDF1070], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    sub_2415E881C(255);
    sub_2415E899C();
    sub_2415E88A8();
    sub_24159CE88(&qword_25713B4E8, (uint64_t (*)(uint64_t))sub_2415E88A8, MEMORY[0x24BDEB848]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v0 = sub_2416BA168();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B4B0);
  }
}

void sub_2415E8724(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  if (!qword_25713B4B8)
  {
    sub_2415A3D28(255, &qword_25713B4C0, (uint64_t)&type metadata for OrganDonationRegistrationView, MEMORY[0x24BDF1070], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v3 = v2;
    sub_2415E881C(255);
    v5 = v4;
    v6 = sub_2415E899C();
    sub_2415E88A8();
    sub_24159CE88(&qword_25713B4E8, (uint64_t (*)(uint64_t))sub_2415E88A8, MEMORY[0x24BDEB848]);
    v9[0] = v3;
    v9[1] = v5;
    v9[2] = v6;
    v9[3] = swift_getOpaqueTypeConformance2();
    v7 = MEMORY[0x242699480](a1, v9, MEMORY[0x24BDF3858], 0);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_25713B4B8);
  }
}

void sub_2415E881C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_25713B4C8)
  {
    sub_2415E88A8();
    v5[0] = v2;
    v5[1] = sub_24159CE88(&qword_25713B4E8, (uint64_t (*)(uint64_t))sub_2415E88A8, MEMORY[0x24BDEB848]);
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDEFA90], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713B4C8);
  }
}

void sub_2415E88A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B4D0)
  {
    sub_2415A3D28(255, (unint64_t *)&qword_25713B4D8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF4398]);
    sub_2415E8934();
    v0 = sub_2416B9FF4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B4D0);
  }
}

unint64_t sub_2415E8934()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713B4E0;
  if (!qword_25713B4E0)
  {
    sub_2415A3D28(255, (unint64_t *)&qword_25713B4D8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF4398]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF43B0], v1);
    atomic_store(result, (unint64_t *)&qword_25713B4E0);
  }
  return result;
}

unint64_t sub_2415E899C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713B4F0;
  if (!qword_25713B4F0)
  {
    sub_2415A3D28(255, &qword_25713B4C0, (uint64_t)&type metadata for OrganDonationRegistrationView, MEMORY[0x24BDF1070], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v2 = v1;
    v3[0] = sub_2415D926C();
    v3[1] = MEMORY[0x24BDF1050];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713B4F0);
  }
  return result;
}

unint64_t sub_2415E8A24()
{
  unint64_t result;

  result = qword_25713B500;
  if (!qword_25713B500)
  {
    result = MEMORY[0x2426994BC](&unk_2416BE390, &type metadata for OrganDonationStatus);
    atomic_store(result, (unint64_t *)&qword_25713B500);
  }
  return result;
}

uint64_t sub_2415E8A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EditOrganDonationCellView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415E8AB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for EditOrganDonationCellView();
  return sub_2415E56A8(a1, a2);
}

uint64_t objectdestroyTm_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for EditOrganDonationCellView();
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v3 = (int *)type metadata accessor for MedicalIDData();
  v4 = v2 + v3[13];
  v5 = sub_2416B9B50();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = v2 + v3[14];
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (uint64_t *)(v2 + v3[19]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_2415A0DAC(*v9, v10);
  v11 = v2 + v3[20];
  v12 = sub_2416B9A18();
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);

  v14 = v2 + v3[22];
  if (!v7(v14, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  v15 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v16 = v2 + v15[5];
  v17 = sub_2416B9C70();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = v2 + v15[6];
  v19 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v2 + *(int *)(v1 + 24)))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2415E8DC8()
{
  type metadata accessor for EditOrganDonationCellView();
  return sub_2415E5CB0();
}

uint64_t sub_2415E8E04()
{
  uint64_t v0;

  return sub_2415E5DAC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2415E8E10()
{
  uint64_t v0;

  return sub_2415E5F60(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2415E8E18()
{
  return sub_2415E60AC();
}

uint64_t sub_2415E8E20()
{
  return sub_2415E6250();
}

void sub_2415E8E28()
{
  uint64_t v0;

  sub_24160304C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_2415E8E44()
{
  uint64_t result;

  result = qword_25713B520;
  if (!qword_25713B520)
  {
    type metadata accessor for HKBloodType(255);
    sub_24159CE88(&qword_25713B528, (uint64_t (*)(uint64_t))type metadata accessor for HKBloodType, (uint64_t)&unk_2416C3728);
    type metadata accessor for ExpandableWheelPickerView();
  }
  return result;
}

uint64_t sub_2415E8ED8()
{
  return sub_24159CE88(&qword_25713B530, (uint64_t (*)(uint64_t))sub_2415E8488, (uint64_t)&unk_2416C24C0);
}

_QWORD *sub_2415E8F04(_QWORD *a1, char *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  id v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  void *v77;
  id v78;
  id v79;
  id v80;
  char *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  char *__dst;
  int *v87;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    v7 = *((_QWORD *)a2 + 3);
    a1[2] = *((_QWORD *)a2 + 2);
    a1[3] = v7;
    v8 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v8;
    v9 = *((_QWORD *)a2 + 7);
    a1[6] = *((_QWORD *)a2 + 6);
    a1[7] = v9;
    v10 = *((_QWORD *)a2 + 9);
    a1[8] = *((_QWORD *)a2 + 8);
    a1[9] = v10;
    v11 = *((_QWORD *)a2 + 11);
    a1[10] = *((_QWORD *)a2 + 10);
    a1[11] = v11;
    v83 = (void *)*((_QWORD *)a2 + 12);
    v84 = (void *)*((_QWORD *)a2 + 13);
    a1[12] = v83;
    a1[13] = v84;
    v12 = type metadata accessor for MedicalIDData();
    v13 = *(int *)(v12 + 52);
    __dst = (char *)v4 + v13;
    v87 = (int *)v12;
    v82 = &a2[v13];
    v14 = sub_2416B9B50();
    v85 = *(_QWORD *)(v14 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = v83;
    v17 = v84;
    if (v15(v82, 1, v14))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v82, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      v19 = v85;
    }
    else
    {
      v19 = v85;
      (*(void (**)(char *, char *, uint64_t))(v85 + 16))(__dst, v82, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(__dst, 0, 1, v14);
    }
    v21 = v87[14];
    v22 = (char *)v4 + v21;
    v23 = &a2[v21];
    if (v15(&a2[v21], 1, v14))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v23, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v14);
    }
    v25 = v87[15];
    v26 = (_QWORD *)((char *)v4 + v25);
    v27 = &a2[v25];
    v28 = *((_QWORD *)v27 + 1);
    *v26 = *(_QWORD *)v27;
    v26[1] = v28;
    v29 = v87[16];
    v30 = (_QWORD *)((char *)v4 + v29);
    v31 = &a2[v29];
    v32 = *((_QWORD *)v31 + 1);
    *v30 = *(_QWORD *)v31;
    v30[1] = v32;
    *((_BYTE *)v4 + v87[17]) = a2[v87[17]];
    *((_BYTE *)v4 + v87[18]) = a2[v87[18]];
    v33 = v87[19];
    v34 = (char *)v4 + v33;
    v35 = (uint64_t *)&a2[v33];
    v36 = *(_QWORD *)&a2[v33 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v36 >> 60 == 15)
    {
      *(_OWORD *)v34 = *(_OWORD *)v35;
    }
    else
    {
      v37 = *v35;
      sub_2415A0A90(*v35, v36);
      *(_QWORD *)v34 = v37;
      *((_QWORD *)v34 + 1) = v36;
    }
    v38 = v15;
    v39 = v87[20];
    v40 = (char *)v4 + v39;
    v41 = &a2[v39];
    v42 = sub_2416B9A18();
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
    v45 = v87[21];
    v46 = *(void **)&a2[v45];
    *(_QWORD *)((char *)v4 + v45) = v46;
    v47 = v87[22];
    v48 = (char *)v4 + v47;
    v49 = &a2[v47];
    v50 = v46;
    if (v38(v49, 1, v14))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v48, v49, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v48, 0, 1, v14);
    }
    v52 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    v53 = v52[5];
    v54 = (char *)v4 + v53;
    v55 = &a2[v53];
    v56 = sub_2416B9C70();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v54, v55, v56);
    v57 = v52[6];
    v58 = (char *)v4 + v57;
    v59 = &a2[v57];
    v60 = sub_2416B9C10();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
    v61 = v52[7];
    v62 = *(void **)&a2[v61];
    *(_QWORD *)((char *)v4 + v61) = v62;
    v63 = v52[8];
    v64 = *(void **)&a2[v63];
    *(_QWORD *)((char *)v4 + v63) = v64;
    v65 = v52[9];
    v66 = (_QWORD *)((char *)v4 + v65);
    v67 = &a2[v65];
    v68 = *((_QWORD *)v67 + 1);
    *v66 = *(_QWORD *)v67;
    v66[1] = v68;
    v69 = *(int *)(a3 + 20);
    v70 = *(int *)(a3 + 24);
    v71 = (_QWORD *)((char *)v4 + v69);
    v72 = &a2[v69];
    v73 = *((_QWORD *)v72 + 1);
    *v71 = *(_QWORD *)v72;
    v71[1] = v73;
    v74 = (_QWORD *)((char *)v4 + v70);
    v75 = &a2[v70];
    v77 = *(void **)v75;
    v76 = *((_QWORD *)v75 + 1);
    *v74 = v77;
    v74[1] = v76;
    v78 = v62;
    v79 = v64;
    swift_bridgeObjectRetain();
    swift_retain();
    v80 = v77;
  }
  return v4;
}

void sub_2415E93C8(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = (int *)type metadata accessor for MedicalIDData();
  v5 = a1 + v4[13];
  v6 = sub_2416B9B50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + v4[14];
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)(a1 + v4[19]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_2415A0DAC(*v10, v11);
  v12 = a1 + v4[20];
  v13 = sub_2416B9A18();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);

  v15 = a1 + v4[22];
  if (!v8(v15, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  v16 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v17 = a1 + v16[5];
  v18 = sub_2416B9C70();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + v16[6];
  v20 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);

  swift_bridgeObjectRelease();
  swift_release();

}

_QWORD *sub_2415E960C(_QWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  id v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  void *v75;
  id v76;
  id v77;
  id v78;
  char *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  char *__dst;
  int *v85;

  v5 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *((_QWORD *)a2 + 3);
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = v6;
  v7 = *((_QWORD *)a2 + 5);
  a1[4] = *((_QWORD *)a2 + 4);
  a1[5] = v7;
  v8 = *((_QWORD *)a2 + 7);
  a1[6] = *((_QWORD *)a2 + 6);
  a1[7] = v8;
  v9 = *((_QWORD *)a2 + 9);
  a1[8] = *((_QWORD *)a2 + 8);
  a1[9] = v9;
  v10 = *((_QWORD *)a2 + 11);
  a1[10] = *((_QWORD *)a2 + 10);
  a1[11] = v10;
  v81 = (void *)*((_QWORD *)a2 + 12);
  v82 = (void *)*((_QWORD *)a2 + 13);
  a1[12] = v81;
  a1[13] = v82;
  v11 = type metadata accessor for MedicalIDData();
  v12 = *(int *)(v11 + 52);
  __dst = (char *)a1 + v12;
  v85 = (int *)v11;
  v80 = &a2[v12];
  v13 = sub_2416B9B50();
  v83 = *(_QWORD *)(v13 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = v81;
  v16 = v82;
  if (v14(v80, 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v80, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    v18 = v83;
  }
  else
  {
    v18 = v83;
    (*(void (**)(char *, char *, uint64_t))(v83 + 16))(__dst, v80, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(__dst, 0, 1, v13);
  }
  v19 = v85[14];
  v20 = (char *)a1 + v19;
  v21 = &a2[v19];
  if (v14(&a2[v19], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v20, v21, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v13);
  }
  v23 = v85[15];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = &a2[v23];
  v26 = *((_QWORD *)v25 + 1);
  *v24 = *(_QWORD *)v25;
  v24[1] = v26;
  v27 = v85[16];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = &a2[v27];
  v30 = *((_QWORD *)v29 + 1);
  *v28 = *(_QWORD *)v29;
  v28[1] = v30;
  *((_BYTE *)a1 + v85[17]) = a2[v85[17]];
  *((_BYTE *)a1 + v85[18]) = a2[v85[18]];
  v31 = v85[19];
  v32 = (char *)a1 + v31;
  v33 = (uint64_t *)&a2[v31];
  v34 = *(_QWORD *)&a2[v31 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v34 >> 60 == 15)
  {
    *(_OWORD *)v32 = *(_OWORD *)v33;
  }
  else
  {
    v35 = *v33;
    sub_2415A0A90(*v33, v34);
    *(_QWORD *)v32 = v35;
    *((_QWORD *)v32 + 1) = v34;
  }
  v36 = v14;
  v37 = v85[20];
  v38 = (char *)a1 + v37;
  v39 = &a2[v37];
  v40 = sub_2416B9A18();
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  v43 = v85[21];
  v44 = *(void **)&a2[v43];
  *(_QWORD *)((char *)a1 + v43) = v44;
  v45 = v85[22];
  v46 = (char *)a1 + v45;
  v47 = &a2[v45];
  v48 = v44;
  if (v36(v47, 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v46, v47, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v46, 0, 1, v13);
  }
  v50 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v51 = v50[5];
  v52 = (char *)a1 + v51;
  v53 = &a2[v51];
  v54 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
  v55 = v50[6];
  v56 = (char *)a1 + v55;
  v57 = &a2[v55];
  v58 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
  v59 = v50[7];
  v60 = *(void **)&a2[v59];
  *(_QWORD *)((char *)a1 + v59) = v60;
  v61 = v50[8];
  v62 = *(void **)&a2[v61];
  *(_QWORD *)((char *)a1 + v61) = v62;
  v63 = v50[9];
  v64 = (_QWORD *)((char *)a1 + v63);
  v65 = &a2[v63];
  v66 = *((_QWORD *)v65 + 1);
  *v64 = *(_QWORD *)v65;
  v64[1] = v66;
  v67 = *(int *)(a3 + 20);
  v68 = *(int *)(a3 + 24);
  v69 = (_QWORD *)((char *)a1 + v67);
  v70 = &a2[v67];
  v71 = *((_QWORD *)v70 + 1);
  *v69 = *(_QWORD *)v70;
  v69[1] = v71;
  v72 = (_QWORD *)((char *)a1 + v68);
  v73 = &a2[v68];
  v75 = *(void **)v73;
  v74 = *((_QWORD *)v73 + 1);
  *v72 = v75;
  v72[1] = v74;
  v76 = v60;
  v77 = v62;
  swift_bridgeObjectRetain();
  swift_retain();
  v78 = v75;
  return a1;
}

char *sub_2415E9AA4(char *a1, _QWORD *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  void *v87;
  void *v88;
  id v89;
  uint64_t (*v91)(char *, uint64_t, uint64_t);
  uint64_t v92;

  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 3) = a2[3];
  *((_QWORD *)a1 + 4) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 7) = a2[7];
  *((_QWORD *)a1 + 8) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 9) = a2[9];
  *((_QWORD *)a1 + 10) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 11) = a2[11];
  v5 = (void *)*((_QWORD *)a1 + 12);
  v6 = (void *)a2[12];
  *((_QWORD *)a1 + 12) = v6;
  v7 = v6;

  v8 = (void *)*((_QWORD *)a1 + 13);
  v9 = (void *)a2[13];
  *((_QWORD *)a1 + 13) = v9;
  v10 = v9;

  v11 = (int *)type metadata accessor for MedicalIDData();
  v12 = v11[13];
  v13 = &a1[v12];
  v14 = (char *)a2 + v12;
  v15 = sub_2416B9B50();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  v21 = v11[14];
  v22 = &a1[v21];
  v23 = (char *)a2 + v21;
  v24 = v17(&a1[v21], 1, v15);
  v25 = v17(v23, 1, v15);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  v27 = v11[15];
  v28 = &a1[v27];
  v29 = (_QWORD *)((char *)a2 + v27);
  *(_QWORD *)v28 = *v29;
  *((_QWORD *)v28 + 1) = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = v11[16];
  v31 = &a1[v30];
  v32 = (_QWORD *)((char *)a2 + v30);
  *(_QWORD *)v31 = *v32;
  *((_QWORD *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v11[17]] = *((_BYTE *)a2 + v11[17]);
  a1[v11[18]] = *((_BYTE *)a2 + v11[18]);
  v33 = v11[19];
  v34 = (uint64_t *)&a1[v33];
  v35 = (_QWORD *)((char *)a2 + v33);
  v36 = *(_QWORD *)((char *)a2 + v33 + 8);
  v91 = v17;
  v92 = v16;
  if (*(_QWORD *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      v37 = *v35;
      sub_2415A0A90(v37, v36);
      *v34 = v37;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v34);
LABEL_18:
    *(_OWORD *)v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  v38 = *v35;
  sub_2415A0A90(v38, v36);
  v39 = *v34;
  v40 = v34[1];
  *v34 = v38;
  v34[1] = v36;
  sub_2415A0DAC(v39, v40);
LABEL_20:
  v41 = v11[20];
  v42 = &a1[v41];
  v43 = (char *)a2 + v41;
  v44 = sub_2416B9A18();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46(v43, 1, v44);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_26:
  v50 = v11[21];
  v51 = *(void **)&a1[v50];
  v52 = *(void **)((char *)a2 + v50);
  *(_QWORD *)&a1[v50] = v52;
  v53 = v52;

  v54 = v11[22];
  v55 = &a1[v54];
  v56 = (char *)a2 + v54;
  v57 = v91(&a1[v54], 1, v15);
  v58 = v91(v56, 1, v15);
  if (!v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 24))(v55, v56, v15);
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v92 + 8))(v55, v15);
    goto LABEL_31;
  }
  if (v58)
  {
LABEL_31:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v55, v56, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v55, 0, 1, v15);
LABEL_32:
  v60 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v61 = v60[5];
  v62 = &a1[v61];
  v63 = (char *)a2 + v61;
  v64 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 24))(v62, v63, v64);
  v65 = v60[6];
  v66 = &a1[v65];
  v67 = (char *)a2 + v65;
  v68 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 24))(v66, v67, v68);
  v69 = v60[7];
  v70 = *(void **)&a1[v69];
  v71 = *(void **)((char *)a2 + v69);
  *(_QWORD *)&a1[v69] = v71;
  v72 = v71;

  v73 = v60[8];
  v74 = *(void **)((char *)a2 + v73);
  v75 = *(void **)&a1[v73];
  *(_QWORD *)&a1[v73] = v74;
  v76 = v74;

  v77 = v60[9];
  v78 = &a1[v77];
  v79 = (_QWORD *)((char *)a2 + v77);
  *(_QWORD *)v78 = *v79;
  *((_QWORD *)v78 + 1) = v79[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v80 = *(int *)(a3 + 20);
  v81 = &a1[v80];
  v82 = (_QWORD *)((char *)a2 + v80);
  v83 = v82[1];
  *(_QWORD *)v81 = *v82;
  *((_QWORD *)v81 + 1) = v83;
  swift_retain();
  swift_release();
  v84 = *(int *)(a3 + 24);
  v85 = &a1[v84];
  v86 = (char *)a2 + v84;
  v87 = *(void **)&a1[v84];
  v88 = *(void **)v86;
  *(_QWORD *)v85 = *(_QWORD *)v86;
  v89 = v88;

  *((_QWORD *)v85 + 1) = *((_QWORD *)v86 + 1);
  return a1;
}

uint64_t sub_2415EA154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = v5[13];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_2416B9B50();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = v5[14];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(_OWORD *)(a1 + v5[15]) = *(_OWORD *)(a2 + v5[15]);
  *(_OWORD *)(a1 + v5[16]) = *(_OWORD *)(a2 + v5[16]);
  *(_BYTE *)(a1 + v5[17]) = *(_BYTE *)(a2 + v5[17]);
  *(_BYTE *)(a1 + v5[18]) = *(_BYTE *)(a2 + v5[18]);
  *(_OWORD *)(a1 + v5[19]) = *(_OWORD *)(a2 + v5[19]);
  v17 = v5[20];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = sub_2416B9A18();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_QWORD *)(a1 + v5[21]) = *(_QWORD *)(a2 + v5[21]);
  v23 = v5[22];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  if (v11((const void *)(a2 + v23), 1, v9))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v24, v25, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
  }
  v27 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v28 = v27[5];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = sub_2416B9C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
  v32 = v27[6];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
  *(_QWORD *)(a1 + v27[7]) = *(_QWORD *)(a2 + v27[7]);
  *(_QWORD *)(a1 + v27[8]) = *(_QWORD *)(a2 + v27[8]);
  *(_OWORD *)(a1 + v27[9]) = *(_OWORD *)(a2 + v27[9]);
  v36 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v36) = *(_OWORD *)(a2 + v36);
  return a1;
}

char *sub_2415EA510(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  void *v83;
  uint64_t (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;

  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  v6 = a2[4];
  *((_QWORD *)a1 + 3) = a2[3];
  *((_QWORD *)a1 + 4) = v6;
  swift_bridgeObjectRelease();
  v7 = a2[6];
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = v7;
  swift_bridgeObjectRelease();
  v8 = a2[8];
  *((_QWORD *)a1 + 7) = a2[7];
  *((_QWORD *)a1 + 8) = v8;
  swift_bridgeObjectRelease();
  v9 = a2[10];
  *((_QWORD *)a1 + 9) = a2[9];
  *((_QWORD *)a1 + 10) = v9;
  swift_bridgeObjectRelease();
  v10 = (void *)*((_QWORD *)a1 + 12);
  v11 = a2[12];
  *((_QWORD *)a1 + 11) = a2[11];
  *((_QWORD *)a1 + 12) = v11;

  v12 = (void *)*((_QWORD *)a1 + 13);
  *((_QWORD *)a1 + 13) = a2[13];

  v13 = (int *)type metadata accessor for MedicalIDData();
  v14 = v13[13];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = sub_2416B9B50();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  v23 = v13[14];
  v24 = &a1[v23];
  v25 = (char *)a2 + v23;
  v26 = v19(&a1[v23], 1, v17);
  v27 = v19(v25, 1, v17);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  v29 = v13[15];
  v30 = &a1[v29];
  v31 = (_QWORD *)((char *)a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *(_QWORD *)v30 = v33;
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  v34 = v13[16];
  v35 = &a1[v34];
  v36 = (_QWORD *)((char *)a2 + v34);
  v38 = *v36;
  v37 = v36[1];
  *(_QWORD *)v35 = v38;
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  a1[v13[17]] = *((_BYTE *)a2 + v13[17]);
  a1[v13[18]] = *((_BYTE *)a2 + v13[18]);
  v39 = v13[19];
  v40 = (uint64_t)&a1[v39];
  v41 = (char *)a2 + v39;
  v42 = *(_QWORD *)&a1[v39 + 8];
  v85 = v19;
  v86 = v18;
  if (v42 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v40 = *(_OWORD *)v41;
    goto LABEL_18;
  }
  v43 = *((_QWORD *)v41 + 1);
  if (v43 >> 60 == 15)
  {
    sub_2415A1B38(v40);
    goto LABEL_16;
  }
  v44 = *(_QWORD *)v40;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_QWORD *)(v40 + 8) = v43;
  sub_2415A0DAC(v44, v42);
LABEL_18:
  v45 = v13[20];
  v46 = &a1[v45];
  v47 = (char *)a2 + v45;
  v48 = sub_2416B9A18();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v46, 1, v48);
  v52 = v50(v47, 1, v48);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
LABEL_23:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 40))(v46, v47, v48);
LABEL_24:
  v54 = v13[21];
  v55 = *(void **)&a1[v54];
  *(_QWORD *)&a1[v54] = *(_QWORD *)((char *)a2 + v54);

  v56 = v13[22];
  v57 = &a1[v56];
  v58 = (char *)a2 + v56;
  v59 = v85(&a1[v56], 1, v17);
  v60 = v85(v58, 1, v17);
  if (!v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 40))(v57, v58, v17);
      goto LABEL_30;
    }
    (*(void (**)(char *, uint64_t))(v86 + 8))(v57, v17);
    goto LABEL_29;
  }
  if (v60)
  {
LABEL_29:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v57, v58, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v57, 0, 1, v17);
LABEL_30:
  v62 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v63 = v62[5];
  v64 = &a1[v63];
  v65 = (char *)a2 + v63;
  v66 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 40))(v64, v65, v66);
  v67 = v62[6];
  v68 = &a1[v67];
  v69 = (char *)a2 + v67;
  v70 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 40))(v68, v69, v70);
  v71 = v62[7];
  v72 = *(void **)&a1[v71];
  *(_QWORD *)&a1[v71] = *(_QWORD *)((char *)a2 + v71);

  v73 = v62[8];
  v74 = *(void **)&a1[v73];
  *(_QWORD *)&a1[v73] = *(_QWORD *)((char *)a2 + v73);

  v75 = v62[9];
  v76 = &a1[v75];
  v77 = (_QWORD *)((char *)a2 + v75);
  v79 = *v77;
  v78 = v77[1];
  *(_QWORD *)v76 = v79;
  *((_QWORD *)v76 + 1) = v78;
  swift_bridgeObjectRelease();
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_release();
  v80 = *(int *)(a3 + 24);
  v81 = &a1[v80];
  v82 = (_QWORD *)((char *)a2 + v80);
  v83 = *(void **)&a1[v80];
  *(_QWORD *)v81 = *v82;

  *((_QWORD *)v81 + 1) = v82[1];
  return a1;
}

uint64_t sub_2415EAAD8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415EAAE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_2415EAB60()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415EAB6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDPersonalInfoViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MedicalIDPersonalInformationCellView(uint64_t a1)
{
  return sub_2415C5864(a1, qword_25713B5B0);
}

uint64_t sub_2415EABF8()
{
  return sub_2415EF578();
}

uint64_t sub_2415EAC08()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2415EAC18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  unsigned __int8 v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (**v33)();
  uint64_t v34;
  uint64_t (**v35)();
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  _BYTE v75[32];
  uint64_t v76;

  v73 = a1;
  sub_2415EF694(0, &qword_25713B5F0, (uint64_t (*)(uint64_t))sub_2415EBC18, (uint64_t)&type metadata for MedicalIDPlaceholderCell, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
  v72 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v66 - v3;
  v5 = type metadata accessor for MedicalIDPersonalInformationCellView(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v66 - v10;
  v68 = sub_2415EBCBC();
  v12 = MEMORY[0x24BDAC7A8](v68);
  v14 = (uint64_t *)((char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v69 = (uint64_t)&v66 - v15;
  sub_2415EBC18(0);
  v17 = v16;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)&v70 = (char *)&v66 - v21;
  v22 = MedicalIDPersonalInfoViewModel.hasPersonalInfoData.getter();
  v71 = v17;
  if ((v22 & 1) != 0)
  {
    sub_2415EB2C4((uint64_t)&v74);
    if (qword_257139418 != -1)
      swift_once();
    v23 = *(void **)(v1 + *(int *)(v5 + 24));
    if (v23)
    {
      v24 = qword_25713B540;
      v25 = objc_msgSend(v23, sel_isLockScreen);
      v26 = *(_OWORD *)&v75[16];
      *((_OWORD *)v20 + 1) = *(_OWORD *)v75;
      *((_OWORD *)v20 + 2) = v26;
      *((_QWORD *)v20 + 6) = v76;
      *(_OWORD *)v20 = v74;
      *((_QWORD *)v20 + 7) = v24;
      v20[64] = v25 ^ 1;
      v67 = &v20[*(int *)(v17 + 44)];
      sub_2415BEF64(v1, (uint64_t)v11, type metadata accessor for MedicalIDPersonalInformationCellView);
      v27 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v66 = swift_allocObject();
      sub_2415A85BC((uint64_t)v11, v66 + v27, type metadata accessor for MedicalIDPersonalInformationCellView);
      sub_2415BEF64(v1, (uint64_t)v9, type metadata accessor for MedicalIDPersonalInformationCellView);
      v28 = swift_allocObject();
      sub_2415A85BC((uint64_t)v9, v28 + v27, type metadata accessor for MedicalIDPersonalInformationCellView);
      *v14 = swift_getKeyPath();
      sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
      swift_storeEnumTagMultiPayload();
      v29 = v68;
      v30 = (char *)v14 + *(int *)(v68 + 52);
      v31 = *MEMORY[0x24BDECEA0];
      v32 = sub_2416BA144();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v30, v31, v32);
      v33 = (uint64_t (**)())((char *)v14 + *(int *)(v29 + 56));
      v34 = v66;
      *v33 = sub_2415ED52C;
      v33[1] = (uint64_t (*)())v34;
      v35 = (uint64_t (**)())((char *)v14 + *(int *)(v29 + 60));
      *v35 = sub_2415ED7C8;
      v35[1] = (uint64_t (*)())v28;
      v36 = v69;
      sub_2415A85BC((uint64_t)v14, v69, (uint64_t (*)(_QWORD))sub_2415EBCBC);
      v37 = sub_2416BA834();
      if (qword_257139410 != -1)
        swift_once();
      sub_2416B9EF8();
      v39 = v38;
      v41 = v40;
      v43 = v42;
      v45 = v44;
      v46 = (uint64_t)v67;
      sub_2415BEF64(v36, (uint64_t)v67, (uint64_t (*)(_QWORD))sub_2415EBCBC);
      sub_2415EBC98(0);
      v48 = v46 + *(int *)(v47 + 36);
      *(_BYTE *)v48 = v37;
      *(_QWORD *)(v48 + 8) = v39;
      *(_QWORD *)(v48 + 16) = v41;
      *(_QWORD *)(v48 + 24) = v43;
      *(_QWORD *)(v48 + 32) = v45;
      *(_BYTE *)(v48 + 40) = 0;
      sub_2415A6154(v36, (uint64_t (*)(_QWORD))sub_2415EBCBC);
      v49 = v70;
      sub_2415A85BC((uint64_t)v20, v70, (uint64_t (*)(_QWORD))sub_2415EBC18);
      sub_2415BEF64(v49, (uint64_t)v4, (uint64_t (*)(_QWORD))sub_2415EBC18);
      swift_storeEnumTagMultiPayload();
      sub_24159CE88(&qword_25713B690, (uint64_t (*)(uint64_t))sub_2415EBC18, (uint64_t)&unk_2416C01F8);
      sub_2415EC02C();
      sub_2416BA57C();
      return sub_2415A6154(v49, (uint64_t (*)(_QWORD))sub_2415EBC18);
    }
    else
    {
      sub_2415CA770();
      sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
      result = sub_2416BA264();
      __break(1u);
    }
  }
  else
  {
    sub_2415EB2C4((uint64_t)&v74);
    v68 = *((_QWORD *)&v74 + 1);
    v69 = v74;
    v51 = v75[0];
    v52 = v75[1];
    v70 = *(_OWORD *)&v75[8];
    v53 = *(_QWORD *)&v75[24];
    v67 = (char *)v76;
    v54 = sub_2416BB0EC();
    MEMORY[0x24BDAC7A8](v54);
    sub_2416BB098();
    if (qword_257139300 != -1)
      swift_once();
    v55 = (void *)qword_25713A038;
    v56 = sub_2416B9C10();
    MEMORY[0x24BDAC7A8](v56);
    v57 = v55;
    sub_2416B9C04();
    v58 = sub_2416BB134();
    v60 = v59;
    v61 = (uint64_t *)(v1 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
    v62 = *v61;
    v63 = v61[1];
    v64 = v68;
    *(_QWORD *)v4 = v69;
    *((_QWORD *)v4 + 1) = v64;
    v4[16] = v51;
    v4[17] = v52;
    *(_OWORD *)(v4 + 24) = v70;
    v65 = (uint64_t)v67;
    *((_QWORD *)v4 + 5) = v53;
    *((_QWORD *)v4 + 6) = v65;
    *((_QWORD *)v4 + 7) = v58;
    *((_QWORD *)v4 + 8) = v60;
    *((_QWORD *)v4 + 9) = v62;
    *((_QWORD *)v4 + 10) = v63;
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713B690, (uint64_t (*)(uint64_t))sub_2415EBC18, (uint64_t)&unk_2416C01F8);
    sub_2415EC02C();
    swift_bridgeObjectRetain();
    return sub_2416BA57C();
  }
  return result;
}

uint64_t sub_2415EB2C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v3);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v4 = (void *)qword_25713A038;
  v5 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v5);
  v6 = v4;
  sub_2416B9C04();
  v7 = sub_2416BB134();
  v9 = v8;
  v10 = MedicalIDPersonalInfoViewModel.hasPersonalInfoData.getter();
  v11 = (uint64_t *)(v1 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
  v13 = *v11;
  v12 = v11[1];
  v14 = (uint64_t *)(v1 + *(int *)(type metadata accessor for MedicalIDPersonalInformationCellView(0) + 20));
  v15 = *v14;
  v16 = v14[1];
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v10 & 1;
  *(_BYTE *)(a1 + 17) = 2;
  *(_QWORD *)(a1 + 24) = v15;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v12;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_2415EB454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_2416BA468();
  if (qword_257139420 != -1)
    swift_once();
  v5 = qword_25713B548;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = 0;
  sub_2415ED870(0, qword_25713B6A8, sub_2415EBE34);
  return sub_2415EB628(a1, a2 + *(int *)(v6 + 44));
}

uint64_t sub_2415EB4F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  sub_2415EBF30(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2416BA510();
  if (qword_257139428 != -1)
    swift_once();
  v8 = qword_25713B550;
  *(_QWORD *)v6 = v7;
  *((_QWORD *)v6 + 1) = v8;
  v6[16] = 0;
  sub_2415ED870(0, &qword_25713B6A0, sub_2415EBF54);
  sub_2415EB960(a1, (uint64_t *)&v6[*(int *)(v9 + 44)]);
  v10 = sub_2416BAF48();
  sub_241668D58(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a2, 0.0, 1, 0.0, 1, v10, v11);
  return sub_2415A6154((uint64_t)v6, (uint64_t (*)(_QWORD))sub_2415EBF30);
}

uint64_t sub_2415EB628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  unsigned __int8 v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t result;
  uint64_t v34;

  v4 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PersonInfoView(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415EBED4(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v34 - v14;
  sub_2415BEF64(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
  v16 = sub_2416BA51C();
  sub_2415CA770();
  sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
  v17 = sub_2416BA270();
  *(_QWORD *)&v9[*(int *)(v7 + 20)] = v16;
  v18 = (uint64_t *)&v9[*(int *)(v7 + 24)];
  *v18 = v17;
  v18[1] = v19;
  v20 = sub_2416BAF54();
  sub_241668DB0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, 0.0, 1, v20, v21);
  sub_2415A6154((uint64_t)v9, type metadata accessor for PersonInfoView);
  sub_2415A85BC((uint64_t)v13, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_2415EBED4);
  v22 = *(void **)(a1 + *(int *)(type metadata accessor for MedicalIDPersonalInformationCellView(0) + 24));
  if (v22)
  {
    v23 = v22;
    v24 = objc_msgSend(v23, sel_isLockScreen);
    sub_2415BEF64(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
    if ((v24 & 1) != 0)
    {
      v25 = (uint64_t *)&v6[*(int *)(type metadata accessor for MedicalIDData() + 76)];
      v26 = *v25;
      v27 = v25[1];
      sub_2415C357C(*v25, v27);
      sub_2415A6154((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
      if (v27 >> 60 == 15)
      {

        v28 = 0;
        v29 = 0xB000000000000000;
LABEL_8:
        sub_2415BEF64((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_2415EBED4);
        sub_2415BEF64((uint64_t)v13, a2, (uint64_t (*)(_QWORD))sub_2415EBED4);
        sub_2415EBE50();
        v32 = (uint64_t *)(a2 + *(int *)(v31 + 48));
        *v32 = v28;
        v32[1] = v29;
        sub_2415ED848(v28, v29);
        sub_2415A6154((uint64_t)v15, (uint64_t (*)(_QWORD))sub_2415EBED4);
        sub_2415ED85C(v28, v29);
        return sub_2415A6154((uint64_t)v13, (uint64_t (*)(_QWORD))sub_2415EBED4);
      }
      sub_2415C3524(v26, v27);
    }
    else
    {
      sub_2415A6154((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
    }

    v30 = (uint64_t *)(a1 + *(int *)(type metadata accessor for MedicalIDData() + 76));
    v28 = *v30;
    v29 = v30[1];
    sub_2415C357C(*v30, v29);
    goto LABEL_8;
  }
  result = sub_2416BA264();
  __break(1u);
  return result;
}

uint64_t sub_2415EB960@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;

  v4 = type metadata accessor for PersonInfoView(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v28 - v8;
  v10 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)(a1 + *(int *)(type metadata accessor for MedicalIDPersonalInformationCellView(0) + 24));
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v14, sel_isLockScreen);
    sub_2415BEF64(a1, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
    if ((v15 & 1) != 0)
    {
      v16 = (uint64_t *)&v12[*(int *)(type metadata accessor for MedicalIDData() + 76)];
      v17 = *v16;
      v18 = v16[1];
      sub_2415C357C(*v16, v18);
      sub_2415A6154((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
      if (v18 >> 60 == 15)
      {

        v19 = 0;
        v20 = 0xB000000000000000;
LABEL_8:
        sub_2415BEF64(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
        v22 = sub_2416BA510();
        sub_2415CA770();
        sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
        v23 = sub_2416BA270();
        *(_QWORD *)&v9[*(int *)(v4 + 20)] = v22;
        v24 = (uint64_t *)&v9[*(int *)(v4 + 24)];
        *v24 = v23;
        v24[1] = v25;
        sub_2415BEF64((uint64_t)v9, (uint64_t)v7, type metadata accessor for PersonInfoView);
        *a2 = v19;
        a2[1] = v20;
        sub_2415EBF70();
        sub_2415BEF64((uint64_t)v7, (uint64_t)a2 + *(int *)(v26 + 48), type metadata accessor for PersonInfoView);
        sub_2415ED848(v19, v20);
        sub_2415A6154((uint64_t)v9, type metadata accessor for PersonInfoView);
        sub_2415A6154((uint64_t)v7, type metadata accessor for PersonInfoView);
        return sub_2415ED85C(v19, v20);
      }
      sub_2415C3524(v17, v18);
    }
    else
    {
      sub_2415A6154((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPersonalInfoViewModel);
    }

    v21 = (uint64_t *)(a1 + *(int *)(type metadata accessor for MedicalIDData() + 76));
    v19 = *v21;
    v20 = v21[1];
    sub_2415C357C(*v21, v20);
    goto LABEL_8;
  }
  sub_2415CA770();
  sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
  result = sub_2416BA264();
  __break(1u);
  return result;
}

void sub_2415EBC18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_25713B5F8)
  {
    sub_2415EBC98(255);
    v3 = v2;
    v4 = sub_2415C3610(&qword_25713B680, (uint64_t (*)(uint64_t))sub_2415EBC98, sub_2415EC010, MEMORY[0x24BDECC60]);
    v6 = type metadata accessor for MedicalIDCellView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713B5F8);
  }
}

void sub_2415EBC98(uint64_t a1)
{
  sub_2415EF694(a1, &qword_25713B600, (uint64_t (*)(uint64_t))sub_2415EBCBC, MEMORY[0x24BDECC80], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
}

uint64_t sub_2415EBCBC()
{
  uint64_t result;

  result = qword_25713B608;
  if (!qword_25713B608)
  {
    sub_2415EBD8C(255);
    sub_2415EBF0C(255);
    sub_24159CE88(&qword_25713B668, (uint64_t (*)(uint64_t))sub_2415EBD8C, MEMORY[0x24BDF4498]);
    sub_2415C3610(&qword_25713B670, (uint64_t (*)(uint64_t))sub_2415EBF0C, sub_2415EBFF4, MEMORY[0x24BDEDBB8]);
    type metadata accessor for MedicalIDAXLayoutView();
  }
  return result;
}

void sub_2415EBD8C(uint64_t a1)
{
  sub_2415EBDB0(a1, &qword_25713B610, (uint64_t (*)(uint64_t))sub_2415EBE34, &qword_25713B638, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF4480]);
}

void sub_2415EBDB0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (!*a2)
  {
    v10 = a3(255);
    v11 = sub_24159CE88(a4, a3, MEMORY[0x24BDF5428]);
    v12 = a5(a1, v10, v11);
    if (!v13)
      atomic_store(v12, a2);
  }
}

void sub_2415EBE34(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713B618, (uint64_t (*)(uint64_t))sub_2415EBE50, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_2415EBE50()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713B620)
  {
    sub_2415EBED4(255);
    sub_24159D7F0(255, &qword_25713B630, (uint64_t)&type metadata for ProfileImageView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713B620);
  }
}

void sub_2415EBED4(uint64_t a1)
{
  sub_2415EF694(a1, &qword_25713B628, type metadata accessor for PersonInfoView, MEMORY[0x24BDEDBD8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
}

uint64_t type metadata accessor for PersonInfoView(uint64_t a1)
{
  return sub_2415C5864(a1, qword_25713B708);
}

void sub_2415EBF0C(uint64_t a1)
{
  sub_2415EF694(a1, &qword_25713B640, (uint64_t (*)(uint64_t))sub_2415EBF30, MEMORY[0x24BDEDBD8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
}

void sub_2415EBF30(uint64_t a1)
{
  sub_2415EBDB0(a1, &qword_25713B648, (uint64_t (*)(uint64_t))sub_2415EBF54, &qword_25713B660, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF46E0]);
}

void sub_2415EBF54(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713B650, (uint64_t (*)(uint64_t))sub_2415EBF70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_2415EBF70()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713B658)
  {
    sub_24159D7F0(255, &qword_25713B630, (uint64_t)&type metadata for ProfileImageView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    type metadata accessor for PersonInfoView(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713B658);
  }
}

uint64_t sub_2415EBFF4()
{
  return sub_24159CE88(&qword_25713B678, (uint64_t (*)(uint64_t))sub_2415EBF30, MEMORY[0x24BDF4700]);
}

uint64_t sub_2415EC010()
{
  return sub_24159CE88(&qword_25713B688, (uint64_t (*)(uint64_t))sub_2415EBCBC, (uint64_t)&unk_2416C0968);
}

unint64_t sub_2415EC02C()
{
  unint64_t result;

  result = qword_25713B698;
  if (!qword_25713B698)
  {
    result = MEMORY[0x2426994BC](&unk_2416BE94C, &type metadata for MedicalIDPlaceholderCell);
    atomic_store(result, (unint64_t *)&qword_25713B698);
  }
  return result;
}

void sub_2415EC070(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t, uint64_t);
  Swift::String_optional v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  void *v98;
  void *v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t KeyPath;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  void *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  Swift::String_optional v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char v121;
  uint64_t v122;
  void *v123;
  void *v124;
  char v125;
  char v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  void *v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  Swift::String_optional v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  char v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  void *v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  void (*v214)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  Swift::String_optional v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  char v227;

  v209 = a2;
  sub_2415EF990(0);
  v195 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v199 = (uint64_t *)((char *)&v186 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2415EF9AC(0);
  MEMORY[0x24BDAC7A8](v5);
  v197 = (char *)&v186 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415EF934();
  v194 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v198 = (char *)&v186 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415A39C0(0, &qword_25713B7A8, v9, (void (*)(uint64_t))sub_2415EF9C8);
  v196 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v200 = (uint64_t)&v186 - v11;
  sub_2415EF8A0();
  v201 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v202 = (uint64_t)&v186 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (void (*)(uint64_t))MEMORY[0x24BDF1088];
  sub_2415A39C0(0, &qword_25713B798, (void (*)(uint64_t))sub_2415EF8A0, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
  v207 = v15;
  v206 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v191 = (char *)&v186 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v190 = (uint64_t)&v186 - v18;
  sub_2415EF840(0, &qword_25713B790, &qword_25713B798, (void (*)(uint64_t))sub_2415EF8A0);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v208 = (uint64_t)&v186 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v219 = (uint64_t)&v186 - v22;
  v23 = sub_2416BA8C4();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v186 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_25713B7D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v27);
  v213 = (char *)&v186 - v28;
  v212 = sub_2416BA90C();
  v211 = *(_QWORD *)(v212 - 8);
  MEMORY[0x24BDAC7A8](v212);
  v210 = (char *)&v186 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415A39C0(0, (unint64_t *)&qword_25713B778, (void (*)(uint64_t))sub_2415EF7CC, v14);
  v31 = v30;
  v32 = *(_QWORD *)(v30 - 8);
  v33 = MEMORY[0x24BDAC7A8](v30);
  v193 = (char *)&v186 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x24BDAC7A8](v33);
  v192 = (uint64_t)&v186 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v204 = (char *)&v186 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v203 = (uint64_t)&v186 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v43 = (char *)&v186 - v42;
  MEMORY[0x24BDAC7A8](v41);
  v45 = (char *)&v186 - v44;
  sub_2415EF840(0, (unint64_t *)&qword_25713B770, (unint64_t *)&qword_25713B778, (void (*)(uint64_t))sub_2415EF7CC);
  v47 = MEMORY[0x24BDAC7A8](v46);
  v205 = (uint64_t)&v186 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = MEMORY[0x24BDAC7A8](v47);
  v217 = (uint64_t)&v186 - v50;
  v51 = MEMORY[0x24BDAC7A8](v49);
  v218 = (uint64_t)&v186 - v52;
  v53 = MEMORY[0x24BDAC7A8](v51);
  v220 = (uint64_t)&v186 - v54;
  v55 = MEMORY[0x24BDAC7A8](v53);
  v222 = (uint64_t)&v186 - v56;
  MEMORY[0x24BDAC7A8](v55);
  v58 = a1[1];
  v215 = v31;
  v216 = a1;
  v221 = (uint64_t)&v186 - v57;
  if (!v58)
    goto LABEL_7;
  v59 = *a1;
  v60 = HIBYTE(v58) & 0xF;
  if ((v58 & 0x2000000000000000) == 0)
    v60 = *a1 & 0xFFFFFFFFFFFFLL;
  if (!v60)
  {
LABEL_7:
    v90 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
    v90((char *)&v186 - v57, 1, 1, v31);
LABEL_8:
    v91 = MedicalIDPersonalInfoViewModel.localizedAgeDescription()();
    v214 = v90;
    if (v91.value._object)
    {
      v223 = v91;
      sub_2415C343C();
      v92 = sub_2416BA9D8();
      v94 = v93;
      v96 = v95 & 1;
      sub_2416BA87C();
      v97 = sub_2416BA9C0();
      v99 = v98;
      v101 = v100;
      v103 = v102;
      swift_release();
      sub_2415A431C(v92, v94, v96);
      swift_bridgeObjectRelease();
      KeyPath = swift_getKeyPath();
      v223.value._countAndFlagsBits = v97;
      v223.value._object = v99;
      v224 = v101 & 1;
      v189 = v103;
      v225 = v103;
      v226 = KeyPath;
      v227 = 0;
      sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v105 = swift_allocObject();
      *(_OWORD *)(v105 + 16) = xmmword_2416BCC80;
      v106 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
      v107 = v106[1];
      *(_QWORD *)(v105 + 32) = *v106;
      *(_QWORD *)(v105 + 40) = v107;
      *(_QWORD *)(v105 + 48) = 6645569;
      *(_QWORD *)(v105 + 56) = 0xE300000000000000;
      swift_bridgeObjectRetain();
      v108 = (void *)sub_2416BB1E8();
      swift_bridgeObjectRelease();
      v109 = (id)HKUIJoinStringsForAutomationIdentifier();

      if (!v109)
      {
        __break(1u);
        goto LABEL_22;
      }
      sub_2416BB128();

      sub_2415EF7CC();
      sub_2415EFC24((unint64_t *)&qword_25713B808, (uint64_t (*)(uint64_t))sub_2415EF7CC, (uint64_t (*)(void))sub_2415EFBC4);
      v110 = (uint64_t)v204;
      sub_2416BAB1C();
      swift_bridgeObjectRelease();
      sub_2415A431C(v97, (uint64_t)v99, v101 & 1);
      swift_release();
      swift_bridgeObjectRelease();
      v111 = v203;
      sub_2415EFC90(v110, v203, (unint64_t *)&qword_25713B778, (void (*)(uint64_t))sub_2415EF7CC);
      v112 = v111;
      v113 = v222;
      sub_2415EFC90(v112, v222, (unint64_t *)&qword_25713B778, (void (*)(uint64_t))sub_2415EF7CC);
      v114 = 0;
      v31 = v215;
      a1 = v216;
      v90 = v214;
    }
    else
    {
      v114 = 1;
      v113 = v222;
    }
    v115 = 1;
    v90((char *)v113, v114, 1, v31);
    v116 = MedicalIDPersonalInfoViewModel.spokenLanguageDescription()();
    if (!v116.value._object)
    {
      v138 = v220;
      goto LABEL_16;
    }
    v223 = v116;
    sub_2415C343C();
    v117 = sub_2416BA9D8();
    v119 = v118;
    v121 = v120 & 1;
    sub_2416BA87C();
    v122 = sub_2416BA9C0();
    v124 = v123;
    v126 = v125;
    v128 = v127;
    swift_release();
    sub_2415A431C(v117, v119, v121);
    swift_bridgeObjectRelease();
    v129 = swift_getKeyPath();
    v223.value._countAndFlagsBits = v122;
    v223.value._object = v124;
    v224 = v126 & 1;
    v204 = v128;
    v225 = (uint64_t)v128;
    v226 = v129;
    v227 = 0;
    sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v130 = swift_allocObject();
    *(_OWORD *)(v130 + 16) = xmmword_2416BCC80;
    v131 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
    v132 = v131[1];
    *(_QWORD *)(v130 + 32) = *v131;
    *(_QWORD *)(v130 + 40) = v132;
    *(_QWORD *)(v130 + 48) = 0x65676175676E614CLL;
    *(_QWORD *)(v130 + 56) = 0xE800000000000000;
    swift_bridgeObjectRetain();
    v133 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    v134 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v134)
    {
      sub_2416BB128();

      sub_2415EF7CC();
      sub_2415EFC24((unint64_t *)&qword_25713B808, (uint64_t (*)(uint64_t))sub_2415EF7CC, (uint64_t (*)(void))sub_2415EFBC4);
      v135 = (uint64_t)v193;
      sub_2416BAB1C();
      swift_bridgeObjectRelease();
      sub_2415A431C(v122, (uint64_t)v124, v126 & 1);
      swift_release();
      swift_bridgeObjectRelease();
      v136 = v192;
      sub_2415EFC90(v135, v192, (unint64_t *)&qword_25713B778, (void (*)(uint64_t))sub_2415EF7CC);
      v137 = v136;
      v138 = v220;
      sub_2415EFC90(v137, v220, (unint64_t *)&qword_25713B778, (void (*)(uint64_t))sub_2415EF7CC);
      v115 = 0;
      v31 = v215;
      a1 = v216;
      v90 = v214;
LABEL_16:
      v139 = 1;
      v90((char *)v138, v115, 1, v31);
      v140 = MedicalIDPersonalInfoViewModel.localizedOrganDonationDescription()();
      if (!v140.value._object)
      {
        v177 = v219;
        goto LABEL_20;
      }
      v223 = v140;
      sub_2415C343C();
      v141 = sub_2416BA9D8();
      v143 = v142;
      v145 = v144 & 1;
      v146 = v211;
      v147 = v210;
      v148 = v212;
      (*(void (**)(char *, _QWORD, uint64_t))(v211 + 104))(v210, *MEMORY[0x24BDF18E8], v212);
      v149 = sub_2416BA888();
      v150 = (uint64_t)v213;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 56))(v213, 1, 1, v149);
      sub_2416BA894();
      sub_2416BA8A0();
      v151 = a1;
      sub_2415EFA24(v150);
      (*(void (**)(char *, uint64_t))(v146 + 8))(v147, v148);
      v152 = sub_2416BA9C0();
      v154 = v153;
      LOBYTE(v147) = v155;
      v157 = v156;
      swift_release();
      v158 = v147 & 1;
      sub_2415A431C(v141, v143, v145);
      swift_bridgeObjectRelease();
      v159 = *MEMORY[0x24BDF1D90];
      v160 = sub_2416BA9A8();
      v161 = *(_QWORD *)(v160 - 8);
      v162 = (uint64_t)v197;
      (*(void (**)(char *, uint64_t, uint64_t))(v161 + 104))(v197, v159, v160);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v161 + 56))(v162, 0, 1, v160);
      v163 = swift_getKeyPath();
      v164 = v199;
      sub_2415BEF64(v162, (uint64_t)v199 + *(int *)(v195 + 28), (uint64_t (*)(_QWORD))sub_2415EF9AC);
      *v164 = v163;
      v165 = (uint64_t)v198;
      sub_2415BEF64((uint64_t)v164, (uint64_t)&v198[*(int *)(v194 + 36)], (uint64_t (*)(_QWORD))sub_2415EF990);
      *(_QWORD *)v165 = v152;
      *(_QWORD *)(v165 + 8) = v154;
      *(_BYTE *)(v165 + 16) = v158;
      *(_QWORD *)(v165 + 24) = v157;
      swift_bridgeObjectRetain();
      sub_2415A43C8(v152, v154, v158);
      sub_2415A6154((uint64_t)v164, (uint64_t (*)(_QWORD))sub_2415EF990);
      sub_2415A6154(v162, (uint64_t (*)(_QWORD))sub_2415EF9AC);
      sub_2415A431C(v152, v154, v158);
      swift_bridgeObjectRelease();
      LODWORD(v157) = sub_2416BA660();
      v166 = v200;
      sub_2415BEF64(v165, v200, (uint64_t (*)(_QWORD))sub_2415EF934);
      *(_DWORD *)(v166 + *(int *)(v196 + 36)) = v157;
      sub_2415A6154(v165, (uint64_t (*)(_QWORD))sub_2415EF934);
      v167 = swift_getKeyPath();
      v168 = v202;
      sub_2415C2920(v166, v202, (uint64_t)&qword_25713B7A8, (uint64_t)sub_2415EF934, (uint64_t)sub_2415EF9C8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_2415A39C0);
      v169 = v168 + *(int *)(v201 + 36);
      *(_QWORD *)v169 = v167;
      *(_BYTE *)(v169 + 8) = 0;
      sub_2415C2970(v166, (uint64_t)&qword_25713B7A8, (uint64_t)sub_2415EF934, (uint64_t)sub_2415EF9C8, (uint64_t (*)(_QWORD))sub_2415A39C0);
      sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v170 = swift_allocObject();
      *(_OWORD *)(v170 + 16) = xmmword_2416BCC80;
      v171 = (uint64_t *)((char *)v151 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
      v172 = v171[1];
      *(_QWORD *)(v170 + 32) = *v171;
      *(_QWORD *)(v170 + 40) = v172;
      *(_QWORD *)(v170 + 48) = 0xD000000000000010;
      *(_QWORD *)(v170 + 56) = 0x80000002416C4850;
      swift_bridgeObjectRetain();
      v173 = (void *)sub_2416BB1E8();
      swift_bridgeObjectRelease();
      v174 = (id)HKUIJoinStringsForAutomationIdentifier();

      if (v174)
      {
        sub_2416BB128();

        sub_2415EFA88();
        v175 = (uint64_t)v191;
        sub_2416BAB1C();
        swift_bridgeObjectRelease();
        sub_2415A6154(v168, (uint64_t (*)(_QWORD))sub_2415EF8A0);
        v176 = v190;
        sub_2415EFC90(v175, v190, &qword_25713B798, (void (*)(uint64_t))sub_2415EF8A0);
        v177 = v219;
        sub_2415EFC90(v176, v219, &qword_25713B798, (void (*)(uint64_t))sub_2415EF8A0);
        v139 = 0;
LABEL_20:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v206 + 56))(v177, v139, 1, v207);
        v178 = v218;
        sub_2415C2920(v221, v218, (uint64_t)&qword_25713B770, (uint64_t)&qword_25713B778, (uint64_t)sub_2415EF7CC, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_2415EF840);
        v179 = v217;
        sub_2415C2920(v222, v217, (uint64_t)&qword_25713B770, (uint64_t)&qword_25713B778, (uint64_t)sub_2415EF7CC, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_2415EF840);
        v180 = v220;
        v181 = v205;
        sub_2415C2920(v220, v205, (uint64_t)&qword_25713B770, (uint64_t)&qword_25713B778, (uint64_t)sub_2415EF7CC, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_2415EF840);
        v182 = v208;
        sub_2415C2920(v177, v208, (uint64_t)&qword_25713B790, (uint64_t)&qword_25713B798, (uint64_t)sub_2415EF8A0, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_2415EF840);
        v183 = v209;
        sub_2415C2920(v178, v209, (uint64_t)&qword_25713B770, (uint64_t)&qword_25713B778, (uint64_t)sub_2415EF7CC, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_2415EF840);
        sub_2415EF720();
        v185 = v184;
        sub_2415C2920(v179, v183 + *(int *)(v184 + 48), (uint64_t)&qword_25713B770, (uint64_t)&qword_25713B778, (uint64_t)sub_2415EF7CC, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_2415EF840);
        sub_2415C2920(v181, v183 + *(int *)(v185 + 64), (uint64_t)&qword_25713B770, (uint64_t)&qword_25713B778, (uint64_t)sub_2415EF7CC, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_2415EF840);
        sub_2415C2920(v182, v183 + *(int *)(v185 + 80), (uint64_t)&qword_25713B790, (uint64_t)&qword_25713B798, (uint64_t)sub_2415EF8A0, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_2415EF840);
        sub_2415C2970(v219, (uint64_t)&qword_25713B790, (uint64_t)&qword_25713B798, (uint64_t)sub_2415EF8A0, (uint64_t (*)(_QWORD))sub_2415EF840);
        sub_2415C2970(v180, (uint64_t)&qword_25713B770, (uint64_t)&qword_25713B778, (uint64_t)sub_2415EF7CC, (uint64_t (*)(_QWORD))sub_2415EF840);
        sub_2415C2970(v222, (uint64_t)&qword_25713B770, (uint64_t)&qword_25713B778, (uint64_t)sub_2415EF7CC, (uint64_t (*)(_QWORD))sub_2415EF840);
        sub_2415C2970(v221, (uint64_t)&qword_25713B770, (uint64_t)&qword_25713B778, (uint64_t)sub_2415EF7CC, (uint64_t (*)(_QWORD))sub_2415EF840);
        sub_2415C2970(v182, (uint64_t)&qword_25713B790, (uint64_t)&qword_25713B798, (uint64_t)sub_2415EF8A0, (uint64_t (*)(_QWORD))sub_2415EF840);
        sub_2415C2970(v181, (uint64_t)&qword_25713B770, (uint64_t)&qword_25713B778, (uint64_t)sub_2415EF7CC, (uint64_t (*)(_QWORD))sub_2415EF840);
        sub_2415C2970(v217, (uint64_t)&qword_25713B770, (uint64_t)&qword_25713B778, (uint64_t)sub_2415EF7CC, (uint64_t (*)(_QWORD))sub_2415EF840);
        sub_2415C2970(v218, (uint64_t)&qword_25713B770, (uint64_t)&qword_25713B778, (uint64_t)sub_2415EF7CC, (uint64_t (*)(_QWORD))sub_2415EF840);
        return;
      }
      goto LABEL_23;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v186 = v45;
  v187 = v43;
  v188 = v32;
  v223.value._countAndFlagsBits = v59;
  v223.value._object = (void *)v58;
  sub_2415C343C();
  swift_bridgeObjectRetain();
  v189 = sub_2416BA9D8();
  v62 = v61;
  v214 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v63;
  v65 = v64 & 1;
  v66 = v211;
  v67 = v210;
  v68 = v212;
  (*(void (**)(char *, _QWORD, uint64_t))(v211 + 104))(v210, *MEMORY[0x24BDF1890], v212);
  v69 = sub_2416BA888();
  v70 = (uint64_t)v213;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v213, 1, 1, v69);
  sub_2416BA894();
  sub_2416BA8A0();
  sub_2415EFA24(v70);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v68);
  (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v26, *MEMORY[0x24BDF17C8], v23);
  sub_2416BA8DC();
  swift_release();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  v71 = v189;
  v72 = sub_2416BA9C0();
  v74 = v73;
  LOBYTE(v66) = v75;
  v77 = v76;
  a1 = v216;
  swift_release();
  sub_2415A431C(v71, v62, v65);
  swift_bridgeObjectRelease();
  v78 = swift_getKeyPath();
  v214 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v72;
  v223.value._countAndFlagsBits = v72;
  v223.value._object = v74;
  v189 = (uint64_t)v74;
  v79 = v66 & 1;
  v224 = v66 & 1;
  v225 = v77;
  v226 = v78;
  v227 = 0;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = xmmword_2416BCC80;
  v81 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
  v82 = v81[1];
  *(_QWORD *)(v80 + 32) = *v81;
  *(_QWORD *)(v80 + 40) = v82;
  *(_QWORD *)(v80 + 48) = 1701667150;
  *(_QWORD *)(v80 + 56) = 0xE400000000000000;
  swift_bridgeObjectRetain();
  v83 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v84 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v84)
  {
    sub_2416BB128();

    sub_2415EF7CC();
    sub_2415EFC24((unint64_t *)&qword_25713B808, (uint64_t (*)(uint64_t))sub_2415EF7CC, (uint64_t (*)(void))sub_2415EFBC4);
    v85 = (uint64_t)v187;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C((uint64_t)v214, v189, v79);
    swift_release();
    swift_bridgeObjectRelease();
    v86 = v85;
    v87 = (uint64_t)v186;
    sub_2415EFC90(v86, (uint64_t)v186, (unint64_t *)&qword_25713B778, (void (*)(uint64_t))sub_2415EF7CC);
    v88 = v87;
    v89 = v221;
    sub_2415EFC90(v88, v221, (unint64_t *)&qword_25713B778, (void (*)(uint64_t))sub_2415EF7CC);
    v90 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v188 + 56);
    v31 = v215;
    v90((char *)v89, 0, 1, v215);
    goto LABEL_8;
  }
LABEL_24:
  __break(1u);
}

void sub_2415ED46C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(uint64_t *)((char *)v2 + *(int *)(a1 + 20));
  if (qword_2571393B0 != -1)
    swift_once();
  v5 = qword_2571476E0;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = 0;
  sub_2415ED870(0, &qword_25713B758, sub_2415EF704);
  sub_2415EC070(v2, a2 + *(int *)(v6 + 44));
}

void sub_2415ED508()
{
  qword_25713B538 = 0x4020000000000000;
}

void sub_2415ED518()
{
  qword_25713B540 = 0x4038000000000000;
}

uint64_t sub_2415ED52C()
{
  return sub_2415ED7D4((uint64_t (*)(uint64_t))sub_2415EB454);
}

uint64_t objectdestroyTm_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for MedicalIDPersonalInformationCellView(0);
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v3 = (int *)type metadata accessor for MedicalIDData();
  v4 = v2 + v3[13];
  v5 = sub_2416B9B50();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = v2 + v3[14];
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (uint64_t *)(v2 + v3[19]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_2415A0DAC(*v9, v10);
  v11 = v2 + v3[20];
  v12 = sub_2416B9A18();
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);

  v14 = v2 + v3[22];
  if (!v7(v14, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  v15 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v16 = v2 + v15[5];
  v17 = sub_2416B9C70();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = v2 + v15[6];
  v19 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);

  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_2415ED7C8()
{
  return sub_2415ED7D4((uint64_t (*)(uint64_t))sub_2415EB4F4);
}

uint64_t sub_2415ED7D4(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDPersonalInformationCellView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

void sub_2415ED820()
{
  qword_25713B548 = 0x4030000000000000;
}

void sub_2415ED830()
{
  qword_25713B550 = 0x4018000000000000;
}

uint64_t sub_2415ED848(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11)
    return sub_2415C357C(a1, a2);
  return a1;
}

uint64_t sub_2415ED85C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11)
    return sub_2415C3524(a1, a2);
  return a1;
}

void sub_2415ED870(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_2416BA0C0();
    if (!v5)
      atomic_store(v4, a2);
  }
}

_QWORD *sub_2415ED8D4(_QWORD *a1, char *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  id v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  void *v73;
  id v74;
  id v75;
  id v76;
  char *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  char *__dst;
  int *v83;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    v7 = *((_QWORD *)a2 + 3);
    a1[2] = *((_QWORD *)a2 + 2);
    a1[3] = v7;
    v8 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v8;
    v9 = *((_QWORD *)a2 + 7);
    a1[6] = *((_QWORD *)a2 + 6);
    a1[7] = v9;
    v10 = *((_QWORD *)a2 + 9);
    a1[8] = *((_QWORD *)a2 + 8);
    a1[9] = v10;
    v11 = *((_QWORD *)a2 + 11);
    a1[10] = *((_QWORD *)a2 + 10);
    a1[11] = v11;
    v79 = (void *)*((_QWORD *)a2 + 12);
    v80 = (void *)*((_QWORD *)a2 + 13);
    a1[12] = v79;
    a1[13] = v80;
    v12 = type metadata accessor for MedicalIDData();
    v13 = *(int *)(v12 + 52);
    __dst = (char *)v4 + v13;
    v83 = (int *)v12;
    v78 = &a2[v13];
    v14 = sub_2416B9B50();
    v81 = *(_QWORD *)(v14 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = v79;
    v17 = v80;
    if (v15(v78, 1, v14))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v78, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      v19 = v81;
    }
    else
    {
      v19 = v81;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(__dst, v78, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(__dst, 0, 1, v14);
    }
    v21 = v83[14];
    v22 = (char *)v4 + v21;
    v23 = &a2[v21];
    if (v15(&a2[v21], 1, v14))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v23, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v14);
    }
    v25 = v83[15];
    v26 = (_QWORD *)((char *)v4 + v25);
    v27 = &a2[v25];
    v28 = *((_QWORD *)v27 + 1);
    *v26 = *(_QWORD *)v27;
    v26[1] = v28;
    v29 = v83[16];
    v30 = (_QWORD *)((char *)v4 + v29);
    v31 = &a2[v29];
    v32 = *((_QWORD *)v31 + 1);
    *v30 = *(_QWORD *)v31;
    v30[1] = v32;
    *((_BYTE *)v4 + v83[17]) = a2[v83[17]];
    *((_BYTE *)v4 + v83[18]) = a2[v83[18]];
    v33 = v83[19];
    v34 = (char *)v4 + v33;
    v35 = (uint64_t *)&a2[v33];
    v36 = *(_QWORD *)&a2[v33 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v36 >> 60 == 15)
    {
      *(_OWORD *)v34 = *(_OWORD *)v35;
    }
    else
    {
      v37 = *v35;
      sub_2415A0A90(*v35, v36);
      *(_QWORD *)v34 = v37;
      *((_QWORD *)v34 + 1) = v36;
    }
    v38 = v15;
    v39 = v83[20];
    v40 = (char *)v4 + v39;
    v41 = &a2[v39];
    v42 = sub_2416B9A18();
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
    v45 = v83[21];
    v46 = *(void **)&a2[v45];
    *(_QWORD *)((char *)v4 + v45) = v46;
    v47 = v83[22];
    v48 = (char *)v4 + v47;
    v49 = &a2[v47];
    v50 = v46;
    if (v38(v49, 1, v14))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v48, v49, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v48, 0, 1, v14);
    }
    v52 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    v53 = v52[5];
    v54 = (char *)v4 + v53;
    v55 = &a2[v53];
    v56 = sub_2416B9C70();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v54, v55, v56);
    v57 = v52[6];
    v58 = (char *)v4 + v57;
    v59 = &a2[v57];
    v60 = sub_2416B9C10();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
    v61 = v52[7];
    v62 = *(void **)&a2[v61];
    *(_QWORD *)((char *)v4 + v61) = v62;
    v63 = v52[8];
    v64 = *(void **)&a2[v63];
    *(_QWORD *)((char *)v4 + v63) = v64;
    v65 = v52[9];
    v66 = (_QWORD *)((char *)v4 + v65);
    v67 = &a2[v65];
    v68 = *((_QWORD *)v67 + 1);
    *v66 = *(_QWORD *)v67;
    v66[1] = v68;
    v69 = *(int *)(a3 + 24);
    *(_QWORD *)((char *)v4 + *(int *)(a3 + 20)) = *(_QWORD *)&a2[*(int *)(a3 + 20)];
    v70 = (_QWORD *)((char *)v4 + v69);
    v71 = &a2[v69];
    v73 = *(void **)v71;
    v72 = *((_QWORD *)v71 + 1);
    *v70 = v73;
    v70[1] = v72;
    v74 = v62;
    v75 = v64;
    swift_bridgeObjectRetain();
    v76 = v73;
  }
  return v4;
}

void sub_2415EDD88(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = (int *)type metadata accessor for MedicalIDData();
  v5 = a1 + v4[13];
  v6 = sub_2416B9B50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + v4[14];
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)(a1 + v4[19]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_2415A0DAC(*v10, v11);
  v12 = a1 + v4[20];
  v13 = sub_2416B9A18();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);

  v15 = a1 + v4[22];
  if (!v8(v15, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  v16 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v17 = a1 + v16[5];
  v18 = sub_2416B9C70();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = a1 + v16[6];
  v20 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);

  swift_bridgeObjectRelease();
}

_QWORD *sub_2415EDFBC(_QWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  id v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  char *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  char *__dst;
  int *v81;

  v5 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *((_QWORD *)a2 + 3);
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = v6;
  v7 = *((_QWORD *)a2 + 5);
  a1[4] = *((_QWORD *)a2 + 4);
  a1[5] = v7;
  v8 = *((_QWORD *)a2 + 7);
  a1[6] = *((_QWORD *)a2 + 6);
  a1[7] = v8;
  v9 = *((_QWORD *)a2 + 9);
  a1[8] = *((_QWORD *)a2 + 8);
  a1[9] = v9;
  v10 = *((_QWORD *)a2 + 11);
  a1[10] = *((_QWORD *)a2 + 10);
  a1[11] = v10;
  v77 = (void *)*((_QWORD *)a2 + 12);
  v78 = (void *)*((_QWORD *)a2 + 13);
  a1[12] = v77;
  a1[13] = v78;
  v11 = type metadata accessor for MedicalIDData();
  v12 = *(int *)(v11 + 52);
  __dst = (char *)a1 + v12;
  v81 = (int *)v11;
  v76 = &a2[v12];
  v13 = sub_2416B9B50();
  v79 = *(_QWORD *)(v13 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = v77;
  v16 = v78;
  if (v14(v76, 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v76, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    v18 = v79;
  }
  else
  {
    v18 = v79;
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(__dst, v76, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(__dst, 0, 1, v13);
  }
  v19 = v81[14];
  v20 = (char *)a1 + v19;
  v21 = &a2[v19];
  if (v14(&a2[v19], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v20, v21, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v13);
  }
  v23 = v81[15];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = &a2[v23];
  v26 = *((_QWORD *)v25 + 1);
  *v24 = *(_QWORD *)v25;
  v24[1] = v26;
  v27 = v81[16];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = &a2[v27];
  v30 = *((_QWORD *)v29 + 1);
  *v28 = *(_QWORD *)v29;
  v28[1] = v30;
  *((_BYTE *)a1 + v81[17]) = a2[v81[17]];
  *((_BYTE *)a1 + v81[18]) = a2[v81[18]];
  v31 = v81[19];
  v32 = (char *)a1 + v31;
  v33 = (uint64_t *)&a2[v31];
  v34 = *(_QWORD *)&a2[v31 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v34 >> 60 == 15)
  {
    *(_OWORD *)v32 = *(_OWORD *)v33;
  }
  else
  {
    v35 = *v33;
    sub_2415A0A90(*v33, v34);
    *(_QWORD *)v32 = v35;
    *((_QWORD *)v32 + 1) = v34;
  }
  v36 = v14;
  v37 = v81[20];
  v38 = (char *)a1 + v37;
  v39 = &a2[v37];
  v40 = sub_2416B9A18();
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  v43 = v81[21];
  v44 = *(void **)&a2[v43];
  *(_QWORD *)((char *)a1 + v43) = v44;
  v45 = v81[22];
  v46 = (char *)a1 + v45;
  v47 = &a2[v45];
  v48 = v44;
  if (v36(v47, 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v46, v47, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v46, 0, 1, v13);
  }
  v50 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v51 = v50[5];
  v52 = (char *)a1 + v51;
  v53 = &a2[v51];
  v54 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
  v55 = v50[6];
  v56 = (char *)a1 + v55;
  v57 = &a2[v55];
  v58 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
  v59 = v50[7];
  v60 = *(void **)&a2[v59];
  *(_QWORD *)((char *)a1 + v59) = v60;
  v61 = v50[8];
  v62 = *(void **)&a2[v61];
  *(_QWORD *)((char *)a1 + v61) = v62;
  v63 = v50[9];
  v64 = (_QWORD *)((char *)a1 + v63);
  v65 = &a2[v63];
  v66 = *((_QWORD *)v65 + 1);
  *v64 = *(_QWORD *)v65;
  v64[1] = v66;
  v67 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v68 = (_QWORD *)((char *)a1 + v67);
  v69 = &a2[v67];
  v71 = *(void **)v69;
  v70 = *((_QWORD *)v69 + 1);
  *v68 = v71;
  v68[1] = v70;
  v72 = v60;
  v73 = v62;
  swift_bridgeObjectRetain();
  v74 = v71;
  return a1;
}

char *sub_2415EE444(char *a1, _QWORD *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void *v83;
  void *v84;
  id v85;
  uint64_t (*v87)(char *, uint64_t, uint64_t);
  uint64_t v88;

  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 3) = a2[3];
  *((_QWORD *)a1 + 4) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 7) = a2[7];
  *((_QWORD *)a1 + 8) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 9) = a2[9];
  *((_QWORD *)a1 + 10) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 11) = a2[11];
  v5 = (void *)*((_QWORD *)a1 + 12);
  v6 = (void *)a2[12];
  *((_QWORD *)a1 + 12) = v6;
  v7 = v6;

  v8 = (void *)*((_QWORD *)a1 + 13);
  v9 = (void *)a2[13];
  *((_QWORD *)a1 + 13) = v9;
  v10 = v9;

  v11 = (int *)type metadata accessor for MedicalIDData();
  v12 = v11[13];
  v13 = &a1[v12];
  v14 = (char *)a2 + v12;
  v15 = sub_2416B9B50();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  v21 = v11[14];
  v22 = &a1[v21];
  v23 = (char *)a2 + v21;
  v24 = v17(&a1[v21], 1, v15);
  v25 = v17(v23, 1, v15);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  v27 = v11[15];
  v28 = &a1[v27];
  v29 = (_QWORD *)((char *)a2 + v27);
  *(_QWORD *)v28 = *v29;
  *((_QWORD *)v28 + 1) = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = v11[16];
  v31 = &a1[v30];
  v32 = (_QWORD *)((char *)a2 + v30);
  *(_QWORD *)v31 = *v32;
  *((_QWORD *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v11[17]] = *((_BYTE *)a2 + v11[17]);
  a1[v11[18]] = *((_BYTE *)a2 + v11[18]);
  v33 = v11[19];
  v34 = (uint64_t *)&a1[v33];
  v35 = (_QWORD *)((char *)a2 + v33);
  v36 = *(_QWORD *)((char *)a2 + v33 + 8);
  v87 = v17;
  v88 = v16;
  if (*(_QWORD *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      v37 = *v35;
      sub_2415A0A90(v37, v36);
      *v34 = v37;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v34);
LABEL_18:
    *(_OWORD *)v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  v38 = *v35;
  sub_2415A0A90(v38, v36);
  v39 = *v34;
  v40 = v34[1];
  *v34 = v38;
  v34[1] = v36;
  sub_2415A0DAC(v39, v40);
LABEL_20:
  v41 = v11[20];
  v42 = &a1[v41];
  v43 = (char *)a2 + v41;
  v44 = sub_2416B9A18();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46(v43, 1, v44);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_26:
  v50 = v11[21];
  v51 = *(void **)&a1[v50];
  v52 = *(void **)((char *)a2 + v50);
  *(_QWORD *)&a1[v50] = v52;
  v53 = v52;

  v54 = v11[22];
  v55 = &a1[v54];
  v56 = (char *)a2 + v54;
  v57 = v87(&a1[v54], 1, v15);
  v58 = v87(v56, 1, v15);
  if (!v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v88 + 24))(v55, v56, v15);
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v88 + 8))(v55, v15);
    goto LABEL_31;
  }
  if (v58)
  {
LABEL_31:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v55, v56, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v55, 0, 1, v15);
LABEL_32:
  v60 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v61 = v60[5];
  v62 = &a1[v61];
  v63 = (char *)a2 + v61;
  v64 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 24))(v62, v63, v64);
  v65 = v60[6];
  v66 = &a1[v65];
  v67 = (char *)a2 + v65;
  v68 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 24))(v66, v67, v68);
  v69 = v60[7];
  v70 = *(void **)&a1[v69];
  v71 = *(void **)((char *)a2 + v69);
  *(_QWORD *)&a1[v69] = v71;
  v72 = v71;

  v73 = v60[8];
  v74 = *(void **)((char *)a2 + v73);
  v75 = *(void **)&a1[v73];
  *(_QWORD *)&a1[v73] = v74;
  v76 = v74;

  v77 = v60[9];
  v78 = &a1[v77];
  v79 = (_QWORD *)((char *)a2 + v77);
  *(_QWORD *)v78 = *v79;
  *((_QWORD *)v78 + 1) = v79[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  v80 = *(int *)(a3 + 24);
  v81 = &a1[v80];
  v82 = (char *)a2 + v80;
  v83 = *(void **)&a1[v80];
  v84 = *(void **)v82;
  *(_QWORD *)v81 = *(_QWORD *)v82;
  v85 = v84;

  *((_QWORD *)v81 + 1) = *((_QWORD *)v82 + 1);
  return a1;
}

uint64_t sub_2415EEADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = v5[13];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_2416B9B50();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = v5[14];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(_OWORD *)(a1 + v5[15]) = *(_OWORD *)(a2 + v5[15]);
  *(_OWORD *)(a1 + v5[16]) = *(_OWORD *)(a2 + v5[16]);
  *(_BYTE *)(a1 + v5[17]) = *(_BYTE *)(a2 + v5[17]);
  *(_BYTE *)(a1 + v5[18]) = *(_BYTE *)(a2 + v5[18]);
  *(_OWORD *)(a1 + v5[19]) = *(_OWORD *)(a2 + v5[19]);
  v17 = v5[20];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = sub_2416B9A18();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_QWORD *)(a1 + v5[21]) = *(_QWORD *)(a2 + v5[21]);
  v23 = v5[22];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  if (v11((const void *)(a2 + v23), 1, v9))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v24, v25, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
  }
  v27 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v28 = v27[5];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = sub_2416B9C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
  v32 = v27[6];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
  *(_QWORD *)(a1 + v27[7]) = *(_QWORD *)(a2 + v27[7]);
  *(_QWORD *)(a1 + v27[8]) = *(_QWORD *)(a2 + v27[8]);
  *(_OWORD *)(a1 + v27[9]) = *(_OWORD *)(a2 + v27[9]);
  v36 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v36) = *(_OWORD *)(a2 + v36);
  return a1;
}

char *sub_2415EEE98(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  void *v83;
  uint64_t (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;

  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  v6 = a2[4];
  *((_QWORD *)a1 + 3) = a2[3];
  *((_QWORD *)a1 + 4) = v6;
  swift_bridgeObjectRelease();
  v7 = a2[6];
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = v7;
  swift_bridgeObjectRelease();
  v8 = a2[8];
  *((_QWORD *)a1 + 7) = a2[7];
  *((_QWORD *)a1 + 8) = v8;
  swift_bridgeObjectRelease();
  v9 = a2[10];
  *((_QWORD *)a1 + 9) = a2[9];
  *((_QWORD *)a1 + 10) = v9;
  swift_bridgeObjectRelease();
  v10 = (void *)*((_QWORD *)a1 + 12);
  v11 = a2[12];
  *((_QWORD *)a1 + 11) = a2[11];
  *((_QWORD *)a1 + 12) = v11;

  v12 = (void *)*((_QWORD *)a1 + 13);
  *((_QWORD *)a1 + 13) = a2[13];

  v13 = (int *)type metadata accessor for MedicalIDData();
  v14 = v13[13];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = sub_2416B9B50();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  v23 = v13[14];
  v24 = &a1[v23];
  v25 = (char *)a2 + v23;
  v26 = v19(&a1[v23], 1, v17);
  v27 = v19(v25, 1, v17);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  v29 = v13[15];
  v30 = &a1[v29];
  v31 = (_QWORD *)((char *)a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *(_QWORD *)v30 = v33;
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  v34 = v13[16];
  v35 = &a1[v34];
  v36 = (_QWORD *)((char *)a2 + v34);
  v38 = *v36;
  v37 = v36[1];
  *(_QWORD *)v35 = v38;
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  a1[v13[17]] = *((_BYTE *)a2 + v13[17]);
  a1[v13[18]] = *((_BYTE *)a2 + v13[18]);
  v39 = v13[19];
  v40 = (uint64_t)&a1[v39];
  v41 = (char *)a2 + v39;
  v42 = *(_QWORD *)&a1[v39 + 8];
  v85 = v19;
  v86 = v18;
  if (v42 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v40 = *(_OWORD *)v41;
    goto LABEL_18;
  }
  v43 = *((_QWORD *)v41 + 1);
  if (v43 >> 60 == 15)
  {
    sub_2415A1B38(v40);
    goto LABEL_16;
  }
  v44 = *(_QWORD *)v40;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_QWORD *)(v40 + 8) = v43;
  sub_2415A0DAC(v44, v42);
LABEL_18:
  v45 = v13[20];
  v46 = &a1[v45];
  v47 = (char *)a2 + v45;
  v48 = sub_2416B9A18();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v46, 1, v48);
  v52 = v50(v47, 1, v48);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
LABEL_23:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 40))(v46, v47, v48);
LABEL_24:
  v54 = v13[21];
  v55 = *(void **)&a1[v54];
  *(_QWORD *)&a1[v54] = *(_QWORD *)((char *)a2 + v54);

  v56 = v13[22];
  v57 = &a1[v56];
  v58 = (char *)a2 + v56;
  v59 = v85(&a1[v56], 1, v17);
  v60 = v85(v58, 1, v17);
  if (!v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 40))(v57, v58, v17);
      goto LABEL_30;
    }
    (*(void (**)(char *, uint64_t))(v86 + 8))(v57, v17);
    goto LABEL_29;
  }
  if (v60)
  {
LABEL_29:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v57, v58, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v57, 0, 1, v17);
LABEL_30:
  v62 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v63 = v62[5];
  v64 = &a1[v63];
  v65 = (char *)a2 + v63;
  v66 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 40))(v64, v65, v66);
  v67 = v62[6];
  v68 = &a1[v67];
  v69 = (char *)a2 + v67;
  v70 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 40))(v68, v69, v70);
  v71 = v62[7];
  v72 = *(void **)&a1[v71];
  *(_QWORD *)&a1[v71] = *(_QWORD *)((char *)a2 + v71);

  v73 = v62[8];
  v74 = *(void **)&a1[v73];
  *(_QWORD *)&a1[v73] = *(_QWORD *)((char *)a2 + v73);

  v75 = v62[9];
  v76 = &a1[v75];
  v77 = (_QWORD *)((char *)a2 + v75);
  v79 = *v77;
  v78 = v77[1];
  *(_QWORD *)v76 = v79;
  *((_QWORD *)v76 + 1) = v78;
  swift_bridgeObjectRelease();
  v80 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  v81 = &a1[v80];
  v82 = (_QWORD *)((char *)a2 + v80);
  v83 = *(void **)&a1[v80];
  *(_QWORD *)&a1[v80] = *v82;

  *((_QWORD *)v81 + 1) = v82[1];
  return a1;
}

uint64_t sub_2415EF450()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415EF45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_2415EF4E4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415EF4F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDPersonalInfoViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = a2;
  return result;
}

uint64_t sub_2415EF568()
{
  return sub_2415EF578();
}

uint64_t sub_2415EF578()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MedicalIDPersonalInfoViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_2415EF5F4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713B748;
  if (!qword_25713B748)
  {
    sub_2415EF694(255, &qword_25713B750, (uint64_t (*)(uint64_t))sub_2415EBC18, (uint64_t)&type metadata for MedicalIDPlaceholderCell, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713B690, (uint64_t (*)(uint64_t))sub_2415EBC18, (uint64_t)&unk_2416C01F8);
    v3[1] = sub_2415EC02C();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713B748);
  }
  return result;
}

void sub_2415EF694(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a5(a1, v9, a4);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t sub_2415EF6F4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2415EF704(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713B760, (uint64_t (*)(uint64_t))sub_2415EF720, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_2415EF720()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!qword_25713B768)
  {
    sub_2415EF840(255, (unint64_t *)&qword_25713B770, (unint64_t *)&qword_25713B778, (void (*)(uint64_t))sub_2415EF7CC);
    sub_2415EF840(255, &qword_25713B790, &qword_25713B798, (void (*)(uint64_t))sub_2415EF8A0);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_25713B768);
  }
}

void sub_2415EF7CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B780)
  {
    sub_24159D7F0(255, &qword_25713B788, MEMORY[0x24BDEC3D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B780);
  }
}

void sub_2415EF840(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_2415A39C0(255, a3, a4, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
    v5 = sub_2416BB434();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_2415EF8A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B7A0)
  {
    sub_2415A39C0(255, &qword_25713B7A8, (void (*)(uint64_t))sub_2415EF934, (void (*)(uint64_t))sub_2415EF9C8);
    sub_24159D7F0(255, &qword_25713B788, MEMORY[0x24BDEC3D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B7A0);
  }
}

void sub_2415EF934()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B7B0)
  {
    sub_2415EF990(255);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B7B0);
  }
}

void sub_2415EF990(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713B7B8, (uint64_t (*)(uint64_t))sub_2415EF9AC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
}

void sub_2415EF9AC(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713B7C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1D98], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_2415EF9C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B7C8)
  {
    v0 = sub_2416BA690();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B7C8);
  }
}

uint64_t sub_2415EFA24(uint64_t a1)
{
  uint64_t v2;

  sub_24159D6B0(0, &qword_25713B7D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2415EFA88()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713B7D8;
  if (!qword_25713B7D8)
  {
    sub_2415EF8A0();
    v2 = v1;
    v3[0] = sub_2415EFAF0();
    v3[1] = sub_2415EFBC4();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713B7D8);
  }
  return result;
}

unint64_t sub_2415EFAF0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713B7E0;
  if (!qword_25713B7E0)
  {
    sub_2415A39C0(255, &qword_25713B7A8, (void (*)(uint64_t))sub_2415EF934, (void (*)(uint64_t))sub_2415EF9C8);
    v2 = v1;
    v3[0] = sub_2415EFC24((unint64_t *)&qword_25713B7E8, (uint64_t (*)(uint64_t))sub_2415EF934, sub_2415EFBA8);
    v3[1] = sub_24159CE88((unint64_t *)&qword_25713B7F8, (uint64_t (*)(uint64_t))sub_2415EF9C8, MEMORY[0x24BDF0710]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713B7E0);
  }
  return result;
}

uint64_t sub_2415EFBA8()
{
  return sub_24159CE88(&qword_25713B7F0, (uint64_t (*)(uint64_t))sub_2415EF990, MEMORY[0x24BDF1028]);
}

unint64_t sub_2415EFBC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713B800;
  if (!qword_25713B800)
  {
    sub_24159D7F0(255, &qword_25713B788, MEMORY[0x24BDEC3D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF1028], v1);
    atomic_store(result, (unint64_t *)&qword_25713B800);
  }
  return result;
}

uint64_t sub_2415EFC24(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7 = a3();
    v8[0] = MEMORY[0x24BDF1F80];
    v8[1] = v7;
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2415EFC90(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_2415A39C0(0, a3, a4, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_2415EFCE8()
{
  return sub_24159CE88(&qword_25713B810, (uint64_t (*)(uint64_t))sub_2415EFD14, MEMORY[0x24BDF4700]);
}

void sub_2415EFD14(uint64_t a1)
{
  sub_2415EBDB0(a1, &qword_25713B818, (uint64_t (*)(uint64_t))sub_2415EF704, &qword_25713B820, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF46E0]);
}

uint64_t sub_2415EFD38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (**v24)();
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  v30 = a1;
  v3 = (int *)type metadata accessor for MedicalIDEmergencyContactsCellView();
  v27 = *((_QWORD *)v3 - 1);
  MEMORY[0x24BDAC7A8](v3);
  v28 = v4;
  v29 = (uint64_t)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415F1754(0);
  v26[1] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2571394D0 != -1)
    swift_once();
  v8 = qword_2571477B0;
  v9 = *(_QWORD *)algn_2571477B8;
  v10 = v3[6];
  v11 = *(_QWORD *)(*(_QWORD *)(v2 + v3[5]) + 16);
  v13 = *(_QWORD *)(v2 + v10);
  v12 = *(_QWORD *)(v2 + v10 + 8);
  v14 = (uint64_t *)(v2 + v3[7]);
  v15 = *v14;
  v16 = v14[1];
  v17 = qword_257139500;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v17 != -1)
    swift_once();
  v18 = qword_25713D4D0;
  *(_QWORD *)v7 = v8;
  *((_QWORD *)v7 + 1) = v9;
  v7[16] = v11 != 0;
  v7[17] = 2;
  *((_QWORD *)v7 + 3) = v15;
  *((_QWORD *)v7 + 4) = v16;
  *((_QWORD *)v7 + 5) = v13;
  *((_QWORD *)v7 + 6) = v12;
  *((_QWORD *)v7 + 7) = v18;
  v7[64] = 1;
  sub_2415EFF90(v2);
  v19 = v29;
  sub_2415BEF64(v2, v29, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEmergencyContactsCellView);
  v20 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  v21 = swift_allocObject();
  sub_2415A85BC(v19, v21 + v20, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEmergencyContactsCellView);
  v22 = v30;
  sub_2415BEF64((uint64_t)v7, v30, (uint64_t (*)(_QWORD))sub_2415F1754);
  sub_2415EF694(0, &qword_25713B970, (uint64_t (*)(uint64_t))sub_2415F1754, MEMORY[0x24BDF0928], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  v24 = (uint64_t (**)())(v22 + *(int *)(v23 + 36));
  *v24 = sub_2415F1C10;
  v24[1] = (uint64_t (*)())v21;
  v24[2] = 0;
  v24[3] = 0;
  return sub_2415A6154((uint64_t)v7, (uint64_t (*)(_QWORD))sub_2415F1754);
}

uint64_t sub_2415EFF90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_2415EF694(0, &qword_25713B978, (uint64_t (*)(uint64_t))sub_2415F17D4, (uint64_t)&type metadata for MedicalIDCellPlaceholderText, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (uint64_t *)((char *)&v18 - v3);
  sub_2415F17D4();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MedicalIDEmergencyContactsCellView();
  if (*(_QWORD *)(*(_QWORD *)(a1 + *(int *)(v8 + 20)) + 16))
  {
    v9 = sub_2416BA51C();
    if (qword_257139430 != -1)
      swift_once();
    v10 = qword_25713B828;
    *(_QWORD *)v7 = v9;
    *((_QWORD *)v7 + 1) = v10;
    v7[16] = 0;
    sub_2415F1C3C();
    sub_2415F01F4(a1, &v7[*(int *)(v11 + 44)]);
    sub_2415BEF64((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))sub_2415F17D4);
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713B960, (uint64_t (*)(uint64_t))sub_2415F17D4, MEMORY[0x24BDF4700]);
    sub_2415F1BC8();
    sub_2416BA57C();
    return sub_2415A6154((uint64_t)v7, (uint64_t (*)(_QWORD))sub_2415F17D4);
  }
  else
  {
    v13 = v8;
    if (qword_257139440 != -1)
      swift_once();
    v14 = qword_25713B840;
    v15 = (uint64_t *)(a1 + *(int *)(v13 + 24));
    v16 = *v15;
    v17 = v15[1];
    *v4 = qword_25713B838;
    v4[1] = v14;
    v4[2] = v16;
    v4[3] = v17;
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713B960, (uint64_t (*)(uint64_t))sub_2415F17D4, MEMORY[0x24BDF4700]);
    sub_2415F1BC8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_2416BA57C();
  }
}

void sub_2415F01F4(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  _QWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;

  v89 = a2;
  v3 = type metadata accessor for MedicalIDEmergencyContactsCellView();
  v75 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v76 = v4;
  v79 = (uint64_t)v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2416BA0A8();
  v86 = *(_QWORD *)(v5 - 8);
  v87 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v83 = (char *)v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415F1A44();
  MEMORY[0x24BDAC7A8](v7);
  v77 = (char *)v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415F19C8();
  v74 = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v88 = (uint64_t)v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v78 = (char *)v73 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v85 = (uint64_t)v73 - v14;
  sub_2415F18B8();
  v81 = v15;
  v82 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v84 = (char *)v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v73 - v18;
  v20 = a1;
  v21 = *(_QWORD *)(a1 + *(int *)(v3 + 20));
  v90 = v3;
  v91 = v21;
  swift_getKeyPath();
  sub_24159D7F0(0, &qword_25713B0E0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  type metadata accessor for ContactLabelView();
  sub_2415F1968();
  sub_2415DF910();
  sub_24159CE88(&qword_25713B988, (uint64_t (*)(uint64_t))type metadata accessor for ContactLabelView, (uint64_t)&unk_2416C0B90);
  swift_bridgeObjectRetain();
  v80 = v19;
  sub_2416BAE7C();
  if (qword_257139448 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  sub_2416BA4C8();
  v22 = sub_2416BA9CC();
  v24 = v23;
  v26 = v25 & 1;
  sub_2416BA8F4();
  v27 = sub_2416BA9C0();
  v29 = v28;
  v31 = v30;
  swift_release();
  sub_2415A431C(v22, v24, v26);
  swift_bridgeObjectRelease();
  LODWORD(v91) = sub_2416BA660();
  v32 = sub_2416BA990();
  v34 = v33;
  v36 = v35;
  v38 = v37;
  sub_2415A431C(v27, v29, v31 & 1);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  v40 = sub_2416BA828();
  if (qword_257139438 != -1)
    swift_once();
  sub_2416B9EF8();
  v91 = v32;
  v92 = v34;
  v41 = v36 & 1;
  v93 = v41;
  v94 = v38;
  v95 = KeyPath;
  v96 = 0;
  v97 = v40;
  v98 = v42;
  v99 = v43;
  v100 = v44;
  v101 = v45;
  v102 = 0;
  v73[1] = KeyPath;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_2416BCC80;
  v47 = v20;
  v48 = (_QWORD *)(v20 + *(int *)(v90 + 24));
  v49 = v48[1];
  *(_QWORD *)(v46 + 32) = *v48;
  *(_QWORD *)(v46 + 40) = v49;
  *(_QWORD *)(v46 + 48) = 0x7265746F6F46;
  *(_QWORD *)(v46 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  v50 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v51 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v51)
  {
    sub_2416BB128();

    sub_2415EF694(0, &qword_25713B940, (uint64_t (*)(uint64_t))sub_2415EF7CC, MEMORY[0x24BDECC80], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    sub_2415F1D50();
    v52 = (uint64_t)v77;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v32, v34, v41);
    swift_release();
    swift_bridgeObjectRelease();
    v53 = swift_getKeyPath();
    v54 = v79;
    sub_2415BEF64(v47, v79, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEmergencyContactsCellView);
    v55 = (*(unsigned __int8 *)(v75 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
    v56 = swift_allocObject();
    sub_2415A85BC(v54, v56 + v55, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEmergencyContactsCellView);
    v57 = v83;
    sub_2416BA09C();
    v58 = (uint64_t)v78;
    v59 = (uint64_t *)&v78[*(int *)(v74 + 36)];
    sub_24159D6B0(0, &qword_25713B948, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    v62 = v86;
    v61 = v87;
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))((char *)v59 + *(int *)(v60 + 28), v57, v87);
    *v59 = v53;
    sub_2415BEF64(v52, v58, (uint64_t (*)(_QWORD))sub_2415F1A44);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v57, v61);
    sub_2415A6154(v52, (uint64_t (*)(_QWORD))sub_2415F1A44);
    v63 = v85;
    sub_2415A85BC(v58, v85, (uint64_t (*)(_QWORD))sub_2415F19C8);
    v64 = v82;
    v65 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
    v66 = v84;
    v67 = v80;
    v68 = v81;
    v65(v84, v80, v81);
    v69 = v88;
    sub_2415BEF64(v63, v88, (uint64_t (*)(_QWORD))sub_2415F19C8);
    v70 = v89;
    v65(v89, v66, v68);
    sub_2415F184C();
    sub_2415BEF64(v69, (uint64_t)&v70[*(int *)(v71 + 48)], (uint64_t (*)(_QWORD))sub_2415F19C8);
    sub_2415A6154(v63, (uint64_t (*)(_QWORD))sub_2415F19C8);
    v72 = *(void (**)(char *, uint64_t))(v64 + 8);
    v72(v67, v68);
    sub_2415A6154(v69, (uint64_t (*)(_QWORD))sub_2415F19C8);
    v72(v66, v68);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_2415F0978@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t KeyPath;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = a1[5];
  v17 = a1[4];
  v18 = v3;
  v4 = a1[7];
  v19 = a1[6];
  v20 = v4;
  v5 = a1[1];
  v13 = *a1;
  v14 = v5;
  v6 = a1[3];
  v15 = a1[2];
  v16 = v6;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)((char *)a2 + *(int *)(type metadata accessor for ContactLabelView() + 20)) = KeyPath;
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v8 = v18;
  a2[4] = v17;
  a2[5] = v8;
  v9 = v20;
  a2[6] = v19;
  a2[7] = v9;
  v10 = v14;
  *a2 = v13;
  a2[1] = v10;
  v11 = v16;
  a2[2] = v15;
  a2[3] = v11;
  return sub_2415DA4E0((uint64_t)&v13);
}

void sub_2415F0A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  void *v4;
  id v5;
  _BYTE v6[16];
  id v7;

  v0 = sub_2416BA7D4();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = (void *)sub_2416BB0F8();
  v5 = objc_msgSend((id)objc_opt_self(), sel_presenterForPrivacySplashWithIdentifier_, v4);

  sub_2415C107C((uint64_t)v3);
  v7 = v5;
  sub_2416BA7C8();
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  sub_2416BA090();

}

uint64_t sub_2415F0B40()
{
  uint64_t result;
  void *v1;
  char v2;

  type metadata accessor for MedicalIDEmergencyContactsCellView();
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  result = sub_2416BAD14();
  if (v2 == 1)
  {
    v1 = (void *)objc_opt_self();
    if ((objc_msgSend(v1, sel_isAllowedToMessageSOSContacts) & 1) == 0)
      objc_msgSend(v1, sel_setAllowedToMessageSOSContacts_, 1);
    return sub_2416BAD20();
  }
  return result;
}

uint64_t sub_2415F0C18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  char *v17;
  uint64_t result;
  char v19;
  uint64_t v20;

  v8 = 0xD000000000000011;
  *a4 = swift_getKeyPath();
  sub_24159D6B0(0, &qword_25713A5D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1310], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v9 = (int *)type metadata accessor for MedicalIDEmergencyContactsCellView();
  *(uint64_t *)((char *)a4 + v9[5]) = a1;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v10 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v10 + 40) = 0xE900000000000044;
  v11 = 0x80000002416C3F90;
  *(_QWORD *)(v10 + 48) = 0xD000000000000011;
  *(_QWORD *)(v10 + 56) = 0x80000002416C3F90;
  v12 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v13 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v13)
  {
    v8 = sub_2416BB128();
    v11 = v14;

  }
  v15 = (uint64_t *)((char *)a4 + v9[6]);
  *v15 = v8;
  v15[1] = v11;
  v16 = (uint64_t *)((char *)a4 + v9[7]);
  *v16 = a2;
  v16[1] = a3;
  v17 = (char *)a4 + v9[8];
  result = sub_2416BAD08();
  *v17 = v19;
  *((_QWORD *)v17 + 1) = v20;
  return result;
}

void sub_2415F0DCC()
{
  qword_25713B828 = 0x4030000000000000;
}

void sub_2415F0DDC()
{
  qword_25713B830 = 0x4000000000000000;
}

uint64_t sub_2415F0DEC(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0xD00000000000002DLL, 0x80000002416C4870, &qword_25713B838, &qword_25713B840);
}

uint64_t sub_2415F0E14(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0xD00000000000002ELL, 0x80000002416C48D0, &qword_25713B848, &qword_25713B850);
}

uint64_t sub_2415F0E3C()
{
  return sub_2416BA33C();
}

uint64_t type metadata accessor for MedicalIDEmergencyContactsCellView()
{
  uint64_t result;

  result = qword_25713B8B8;
  if (!qword_25713B8B8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t *sub_2415F0E98(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_24159D6B0(0, &qword_25713A5D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1310], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_2416BA7D4();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v10 = (uint64_t *)((char *)v4 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = a3[7];
    v14 = a3[8];
    v15 = (uint64_t *)((char *)v4 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (char *)v4 + v14;
    v19 = (char *)a2 + v14;
    *v18 = *v19;
    *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_2415F0FD8(uint64_t a1)
{
  uint64_t v2;

  sub_24159D6B0(0, &qword_25713A5D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1310], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = sub_2416BA7D4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

_QWORD *sub_2415F108C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;

  sub_24159D6B0(0, &qword_25713A5D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1310], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_2416BA7D4();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = a3[7];
  v12 = a3[8];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (char *)a1 + v12;
  v17 = (char *)a2 + v12;
  *v16 = *v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_2415F11A4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  if (a1 != a2)
  {
    sub_2415F1300((uint64_t)a1);
    sub_24159D6B0(0, &qword_25713A5D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1310], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_2416BA7D4();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a3[6];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[7];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  v14 = a3[8];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  *v15 = *v16;
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_2415F1300(uint64_t a1)
{
  uint64_t v2;

  sub_24159D6B0(0, &qword_25713A5D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1310], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_2415F1354(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_24159D6B0(0, &qword_25713A5D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1310], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_2416BA7D4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v9 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  return a1;
}

char *sub_2415F142C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  if (a1 != a2)
  {
    sub_2415F1300((uint64_t)a1);
    sub_24159D6B0(0, &qword_25713A5D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1310], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = sub_2416BA7D4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  swift_bridgeObjectRelease();
  v9 = a3[6];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v13 = *(_QWORD *)v11;
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = v13;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  swift_release();
  v14 = a3[8];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *v15 = *v16;
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_release();
  return a1;
}

uint64_t sub_2415F1558()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415F1564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_24159D6B0(0, qword_25713B858, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1310], MEMORY[0x24BDEB580]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_2415F15F8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_2415F1604(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_24159D6B0(0, qword_25713B858, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1310], MEMORY[0x24BDEB580]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
}

void sub_2415F1694()
{
  unint64_t v0;

  sub_24159D6B0(319, &qword_25713A5D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1310], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_2415F1744()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2415F1754(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_25713B900)
  {
    sub_2415EF694(255, &qword_25713B908, (uint64_t (*)(uint64_t))sub_2415F17D4, (uint64_t)&type metadata for MedicalIDCellPlaceholderText, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v3 = v2;
    v4 = sub_2415F1B28();
    v6 = type metadata accessor for MedicalIDCellView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713B900);
  }
}

void sub_2415F17D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B910)
  {
    sub_24159D6B0(255, &qword_25713B918, (uint64_t (*)(uint64_t))sub_2415F184C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2415F1AC8();
    v0 = sub_2416BADF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B910);
  }
}

void sub_2415F184C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713B920)
  {
    sub_2415F18B8();
    sub_2415F19C8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713B920);
  }
}

void sub_2415F18B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B928)
  {
    sub_24159D7F0(255, &qword_25713B0E0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for ContactLabelView();
    sub_2415F1968();
    sub_2415DF910();
    v0 = sub_2416BAE94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B928);
  }
}

unint64_t sub_2415F1968()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713B120;
  if (!qword_25713B120)
  {
    sub_24159D7F0(255, &qword_25713B0E0, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE12D8], v1);
    atomic_store(result, (unint64_t *)&qword_25713B120);
  }
  return result;
}

void sub_2415F19C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B930)
  {
    sub_2415F1A44();
    sub_24159D6B0(255, &qword_25713B948, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B930);
  }
}

void sub_2415F1A44()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B938)
  {
    sub_2415EF694(255, &qword_25713B940, (uint64_t (*)(uint64_t))sub_2415EF7CC, MEMORY[0x24BDECC80], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    sub_2416BA768();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B938);
  }
}

unint64_t sub_2415F1AC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713B950;
  if (!qword_25713B950)
  {
    sub_24159D6B0(255, &qword_25713B918, (uint64_t (*)(uint64_t))sub_2415F184C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v1);
    atomic_store(result, (unint64_t *)&qword_25713B950);
  }
  return result;
}

unint64_t sub_2415F1B28()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713B958;
  if (!qword_25713B958)
  {
    sub_2415EF694(255, &qword_25713B908, (uint64_t (*)(uint64_t))sub_2415F17D4, (uint64_t)&type metadata for MedicalIDCellPlaceholderText, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713B960, (uint64_t (*)(uint64_t))sub_2415F17D4, MEMORY[0x24BDF4700]);
    v3[1] = sub_2415F1BC8();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713B958);
  }
  return result;
}

unint64_t sub_2415F1BC8()
{
  unint64_t result;

  result = qword_25713B968;
  if (!qword_25713B968)
  {
    result = MEMORY[0x2426994BC](&unk_2416BF558, &type metadata for MedicalIDCellPlaceholderText);
    atomic_store(result, (unint64_t *)&qword_25713B968);
  }
  return result;
}

uint64_t sub_2415F1C10()
{
  type metadata accessor for MedicalIDEmergencyContactsCellView();
  return sub_2415F0B40();
}

void sub_2415F1C3C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B980)
  {
    sub_24159D6B0(255, &qword_25713B918, (uint64_t (*)(uint64_t))sub_2415F184C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B980);
  }
}

uint64_t sub_2415F1CB8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2416BA324();
  *a1 = result;
  return result;
}

uint64_t sub_2415F1CE0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2416BA324();
  *a1 = result;
  return result;
}

uint64_t sub_2415F1D08()
{
  return sub_2416BA330();
}

uint64_t sub_2415F1D2C()
{
  return sub_2416BA330();
}

unint64_t sub_2415F1D50()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713B990;
  if (!qword_25713B990)
  {
    sub_2415EF694(255, &qword_25713B940, (uint64_t (*)(uint64_t))sub_2415EF7CC, MEMORY[0x24BDECC80], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v2 = v1;
    v3[0] = sub_2415F1DD8();
    v3[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713B990);
  }
  return result;
}

unint64_t sub_2415F1DD8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_25713B808;
  if (!qword_25713B808)
  {
    sub_2415EF7CC();
    v2 = v1;
    v3 = sub_2415EFBC4();
    v4[0] = MEMORY[0x24BDF1F80];
    v4[1] = v3;
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713B808);
  }
  return result;
}

uint64_t objectdestroyTm_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDEmergencyContactsCellView() - 8) + 80);
  sub_24159D6B0(0, &qword_25713A5D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1310], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = sub_2416BA7D4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0 + ((v1 + 16) & ~v1), v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_2415F1F44()
{
  type metadata accessor for MedicalIDEmergencyContactsCellView();
  sub_2415F0A40();
}

id sub_2415F1F90(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  objc_msgSend(v2, sel_setPresentingViewController_, a1);
  return objc_msgSend(v2, sel_present);
}

unint64_t sub_2415F1FD8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713B998;
  if (!qword_25713B998)
  {
    sub_2415EF694(255, &qword_25713B970, (uint64_t (*)(uint64_t))sub_2415F1754, MEMORY[0x24BDF0928], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713B9A0, (uint64_t (*)(uint64_t))sub_2415F1754, (uint64_t)&unk_2416C01F8);
    v3[1] = MEMORY[0x24BDF0910];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713B998);
  }
  return result;
}

uint64_t sub_2415F2078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  _OWORD v17[8];
  _OWORD v18[8];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v3 = (_OWORD *)(a1 + 32);
      v4 = (_OWORD *)(a2 + 32);
      v5 = v2 - 1;
      do
      {
        v6 = v5;
        v7 = v3[5];
        v18[4] = v3[4];
        v18[5] = v7;
        v8 = v3[7];
        v18[6] = v3[6];
        v18[7] = v8;
        v9 = v3[1];
        v18[0] = *v3;
        v18[1] = v9;
        v10 = v3[3];
        v18[2] = v3[2];
        v18[3] = v10;
        v11 = v4[5];
        v17[4] = v4[4];
        v17[5] = v11;
        v12 = v4[7];
        v17[6] = v4[6];
        v17[7] = v12;
        v13 = v4[1];
        v17[0] = *v4;
        v17[1] = v13;
        v14 = v4[3];
        v17[2] = v4[2];
        v17[3] = v14;
        v15 = _s11MedicalIDUI0A18IDEmergencyContactV2eeoiySbAC_ACtFZ_0(v18, v17);
        if ((v15 & 1) == 0)
          break;
        v5 = v6 - 1;
        v4 += 8;
        v3 += 8;
      }
      while (v6);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_2415F2140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for BasicAlertModel.Action();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_2415A6100(a1 + v12, (uint64_t)v10);
        sub_2415A6100(a2 + v12, (uint64_t)v7);
        v15 = _s11MedicalIDUI15BasicAlertModelV6ActionV2eeoiySbAE_AEtFZ_0((uint64_t)v10, (uint64_t)v7);
        sub_2415F61D4((uint64_t)v7);
        sub_2415F61D4((uint64_t)v10);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t MedicalIDData.displayName.getter()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[1];
  if (!v1)
    return 0;
  v2 = *v0;
  v3 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v3 = v2 & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t MedicalIDData.init(name:emergencyContacts:medicalConditions:allergyInfo:medicalNotes:medicationInfo:bloodType:height:weight:pregnancyStartDate:pregnancyEstimatedDueDate:primaryLanguageCode:pregnancyStartDateTimeZoneID:isDisabled:shareDuringEmergency:pictureData:gregorianBirthday:isOrganDonor:dateSaved:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  int *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t);

  v27 = (int *)type metadata accessor for MedicalIDData();
  v28 = a9 + v27[13];
  v29 = sub_2416B9B50();
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v30(v28, 1, 1, v29);
  v31 = a9 + v27[14];
  v30(v31, 1, 1, v29);
  v32 = (_QWORD *)(a9 + v27[15]);
  *v32 = 0;
  v32[1] = 0;
  v33 = (_QWORD *)(a9 + v27[16]);
  *v33 = 0;
  v33[1] = 0;
  v34 = a9 + v27[19];
  *(_OWORD *)v34 = xmmword_2416BD3D0;
  v35 = a9 + v27[20];
  v36 = sub_2416B9A18();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
  v37 = v27[21];
  *(_QWORD *)(a9 + v37) = 0;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(_OWORD *)(a9 + 80) = a11;
  *(_QWORD *)(a9 + 96) = a12;
  *(_QWORD *)(a9 + 104) = a13;
  v38 = v28;
  v39 = (void (*)(uint64_t))MEMORY[0x24BDCE908];
  sub_2415F2574(a14, v38, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
  sub_2415F2574(a15, v31, &qword_257139BD0, v39);
  swift_bridgeObjectRelease();
  *v32 = a16;
  v32[1] = a17;
  swift_bridgeObjectRelease();
  *v33 = a18;
  v33[1] = a19;
  *(_BYTE *)(a9 + v27[17]) = a20;
  *(_BYTE *)(a9 + v27[18]) = a21;
  sub_2415C3524(*(_QWORD *)v34, *(_QWORD *)(v34 + 8));
  *(_QWORD *)v34 = a22;
  *(_QWORD *)(v34 + 8) = a23;
  sub_2415F2574(a24, v35, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);

  *(_QWORD *)(a9 + v37) = a25;
  return sub_2415A852C(a26, a9 + v27[22]);
}

uint64_t type metadata accessor for MedicalIDData()
{
  uint64_t result;

  result = qword_25713BA00;
  if (!qword_25713BA00)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2415F2574(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_2415A9F94(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t MedicalIDData.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDData.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MedicalIDData.name.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDData.emergencyContacts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MedicalIDData.emergencyContacts.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MedicalIDData.emergencyContacts.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDData.medicalConditions.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDData.medicalConditions.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*MedicalIDData.medicalConditions.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDData.allergyInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDData.allergyInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*MedicalIDData.allergyInfo.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDData.medicalNotes.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDData.medicalNotes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

uint64_t (*MedicalIDData.medicalNotes.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDData.medicationInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDData.medicationInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  return result;
}

uint64_t (*MedicalIDData.medicationInfo.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDData.bloodType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t MedicalIDData.bloodType.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = result;
  return result;
}

uint64_t (*MedicalIDData.bloodType.modify())()
{
  return nullsub_1;
}

void *MedicalIDData.height.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 96);
  v2 = v1;
  return v1;
}

void MedicalIDData.height.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = a1;
}

uint64_t (*MedicalIDData.height.modify())()
{
  return nullsub_1;
}

void *MedicalIDData.weight.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 104);
  v2 = v1;
  return v1;
}

void MedicalIDData.weight.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = a1;
}

uint64_t (*MedicalIDData.weight.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDData.pregnancyStartDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MedicalIDData();
  return sub_2415F2D90(v1 + *(int *)(v3 + 52), a1, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
}

uint64_t MedicalIDData.pregnancyStartDate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MedicalIDData();
  return sub_2415F2574(a1, v1 + *(int *)(v3 + 52), &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
}

uint64_t (*MedicalIDData.pregnancyStartDate.modify())(_QWORD)
{
  type metadata accessor for MedicalIDData();
  return nullsub_1;
}

uint64_t MedicalIDData.pregnancyEstimatedDueDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MedicalIDData();
  return sub_2415F2D90(v1 + *(int *)(v3 + 56), a1, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
}

uint64_t MedicalIDData.pregnancyEstimatedDueDate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MedicalIDData();
  return sub_2415F2574(a1, v1 + *(int *)(v3 + 56), &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
}

uint64_t (*MedicalIDData.pregnancyEstimatedDueDate.modify())(_QWORD)
{
  type metadata accessor for MedicalIDData();
  return nullsub_1;
}

uint64_t MedicalIDData.primaryLanguageCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MedicalIDData() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDData.primaryLanguageCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for MedicalIDData() + 60));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*MedicalIDData.primaryLanguageCode.modify())(_QWORD)
{
  type metadata accessor for MedicalIDData();
  return nullsub_1;
}

uint64_t MedicalIDData.pregnancyStartDateTimeZoneID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MedicalIDData() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDData.pregnancyStartDateTimeZoneID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for MedicalIDData() + 64));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*MedicalIDData.pregnancyStartDateTimeZoneID.modify())(_QWORD)
{
  type metadata accessor for MedicalIDData();
  return nullsub_1;
}

uint64_t MedicalIDData.isDisabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MedicalIDData() + 68));
}

uint64_t MedicalIDData.isDisabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MedicalIDData();
  *(_BYTE *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*MedicalIDData.isDisabled.modify())(_QWORD)
{
  type metadata accessor for MedicalIDData();
  return nullsub_1;
}

uint64_t MedicalIDData.shareDuringEmergency.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MedicalIDData() + 72));
}

uint64_t MedicalIDData.shareDuringEmergency.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MedicalIDData();
  *(_BYTE *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

uint64_t (*MedicalIDData.shareDuringEmergency.modify())(_QWORD)
{
  type metadata accessor for MedicalIDData();
  return nullsub_1;
}

uint64_t MedicalIDData.pictureData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for MedicalIDData() + 76);
  v2 = *(_QWORD *)v1;
  sub_2415C357C(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t MedicalIDData.pictureData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for MedicalIDData() + 76);
  result = sub_2415C3524(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*MedicalIDData.pictureData.modify())(_QWORD)
{
  type metadata accessor for MedicalIDData();
  return nullsub_1;
}

uint64_t MedicalIDData.gregorianBirthday.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MedicalIDData();
  return sub_2415F2D90(v1 + *(int *)(v3 + 80), a1, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
}

uint64_t sub_2415F2D90(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_2415A9F94(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t MedicalIDData.gregorianBirthday.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MedicalIDData();
  return sub_2415F2574(a1, v1 + *(int *)(v3 + 80), &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
}

uint64_t (*MedicalIDData.gregorianBirthday.modify())(_QWORD)
{
  type metadata accessor for MedicalIDData();
  return nullsub_1;
}

void *MedicalIDData.isOrganDonor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for MedicalIDData() + 84));
  v2 = v1;
  return v1;
}

void MedicalIDData.isOrganDonor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for MedicalIDData() + 84);

  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*MedicalIDData.isOrganDonor.modify())(_QWORD)
{
  type metadata accessor for MedicalIDData();
  return nullsub_1;
}

uint64_t MedicalIDData.dateSaved.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MedicalIDData();
  return sub_2415F2D90(v1 + *(int *)(v3 + 88), a1, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
}

BOOL MedicalIDData.hasEmergencyContacts.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16) != 0;
}

void sub_2415F2F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_2415F2F9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x2415F3180);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_2415F31A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_2415F2F3C((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_2415F3278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_2416B9958();
  v11 = result;
  if (result)
  {
    result = sub_2416B9970();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_2416B9964();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_2415F2F3C(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_2415F332C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_2415F3378()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_2415F33AC + dword_2415F3584[v0 >> 62]))();
}

uint64_t sub_2415F33BC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

BOOL _s11MedicalIDUI0A6IDDataV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  char v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  void (*v48)(uint64_t);
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  unint64_t *v53;
  unint64_t *v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  void (*v60)(uint64_t);
  uint64_t v61;
  int *v62;
  uint64_t v63;
  unint64_t v64;
  void (*v65)(uint64_t);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  void (*v80)(uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  void (*v84)(uint64_t);
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  void (*v87)(uint64_t);
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  char v107;
  int *v108;
  uint64_t v109;
  void (*v110)(uint64_t);
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(char *, uint64_t, uint64_t);
  uint64_t v123;
  void (*v124)(uint64_t);
  char *v125;
  uint64_t v126;
  void (*v127)(uint64_t);
  uint64_t v128;
  char *v129;
  void (*v130)(uint64_t);
  void (*v131)(char *, uint64_t);
  uint64_t v132;
  void *v133;
  void *v134;
  id v135;
  id v136;
  char v137;
  uint64_t v138;
  int *v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  void (*v143)(uint64_t);
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  void (*v156)(uint64_t);
  char v157;
  void (*v158)(char *, uint64_t);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t *v163;
  uint64_t (*v164)(char *, uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int *v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t *v172;

  v4 = a1[1];
  v5 = a2[1];
  if (!v4)
  {
    if (v5)
      return 0;
    goto LABEL_10;
  }
  if (!v5)
    return 0;
  v6 = *a1 == *a2 && v4 == v5;
  if (v6 || (v7 = sub_2416BB644(), result = 0, (v7 & 1) != 0))
  {
LABEL_10:
    if ((sub_2415F2078(a1[2], a2[2]) & 1) == 0)
      return 0;
    v9 = a1[4];
    v10 = a2[4];
    if (v9)
    {
      if (!v10)
        return 0;
      if (a1[3] != a2[3] || v9 != v10)
      {
        v11 = sub_2416BB644();
        result = 0;
        if ((v11 & 1) == 0)
          return result;
      }
    }
    else if (v10)
    {
      return 0;
    }
    v12 = a1[6];
    v13 = a2[6];
    if (v12)
    {
      if (!v13)
        return 0;
      if (a1[5] != a2[5] || v12 != v13)
      {
        v14 = sub_2416BB644();
        result = 0;
        if ((v14 & 1) == 0)
          return result;
      }
    }
    else if (v13)
    {
      return 0;
    }
    v15 = a1[8];
    v16 = a2[8];
    if (v15)
    {
      if (!v16)
        return 0;
      if (a1[7] != a2[7] || v15 != v16)
      {
        v17 = sub_2416BB644();
        result = 0;
        if ((v17 & 1) == 0)
          return result;
      }
    }
    else if (v16)
    {
      return 0;
    }
    v18 = a1[10];
    v19 = a2[10];
    if (v18)
    {
      if (!v19)
        return 0;
      if (a1[9] != a2[9] || v18 != v19)
      {
        v20 = sub_2416BB644();
        result = 0;
        if ((v20 & 1) == 0)
          return result;
      }
    }
    else if (v19)
    {
      return 0;
    }
    if (a1[11] != a2[11])
      return 0;
    v21 = (void *)a1[12];
    v22 = (void *)a2[12];
    if (v21)
    {
      if (!v22)
        return 0;
      sub_2415C0788(0, &qword_25713BAA0);
      v23 = v22;
      v24 = v21;
      v25 = sub_2416BB428();

      if ((v25 & 1) == 0)
        return 0;
    }
    else if (v22)
    {
      return 0;
    }
    v26 = (void *)a1[13];
    v27 = (void *)a2[13];
    if (v26)
    {
      if (!v27)
        return 0;
      sub_2415C0788(0, &qword_25713BAA0);
      v28 = v27;
      v29 = v26;
      v30 = sub_2416BB428();

      if ((v30 & 1) == 0)
        return 0;
    }
    else if (v27)
    {
      return 0;
    }
    v31 = type metadata accessor for MedicalIDData();
    v32 = (uint64_t)a1 + *(int *)(v31 + 52);
    v33 = (void (*)(uint64_t))MEMORY[0x24BDCE908];
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    v171 = &v159;
    v35 = *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64);
    MEMORY[0x24BDAC7A8](v34);
    v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF0;
    v37 = (char *)&v159 - v36;
    sub_2415F2D90(v32, (uint64_t)&v159 - v36, &qword_257139BD0, v33);
    v170 = &v159;
    v168 = (int *)v31;
    v38 = MEMORY[0x24BDAC7A8]((char *)a2 + *(int *)(v31 + 52));
    sub_2415F2D90(v38, (uint64_t)&v159 - v36, &qword_257139BD0, v33);
    sub_2415F60FC(0, &qword_25713BA80, &qword_257139BD0, v33);
    v169 = &v159;
    v165 = *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64);
    v40 = MEMORY[0x24BDAC7A8](v39);
    v42 = (char *)&v159 - v41;
    v166 = v40;
    v43 = (char *)&v159 + *(int *)(v40 + 48) - v41;
    sub_2415F2D90((uint64_t)&v159 - v36, (uint64_t)&v159 - v41, &qword_257139BD0, v33);
    v172 = (uint64_t *)v43;
    sub_2415F2D90((uint64_t)&v159 - v36, (uint64_t)v43, &qword_257139BD0, v33);
    v44 = sub_2416B9B50();
    v45 = *(_QWORD *)(v44 - 8);
    v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
    v47 = v46(v42, 1, v44);
    v167 = v35;
    if ((_DWORD)v47 == 1)
    {
      v161 = v45;
      v48 = (void (*)(uint64_t))MEMORY[0x24BDCE908];
      sub_2415F615C((uint64_t)&v159 - v36, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      sub_2415F615C((uint64_t)v37, &qword_257139BD0, v48);
      if (v46((char *)v172, 1, v44) == 1)
      {
        v160 = v44;
        v164 = v46;
        sub_2415F615C((uint64_t)v42, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
        goto LABEL_58;
      }
    }
    else
    {
      v162 = (unint64_t)&v159;
      v163 = (uint64_t *)((char *)&v159 - v36);
      MEMORY[0x24BDAC7A8](v47);
      v49 = (char *)&v159 - v36;
      sub_2415F2D90((uint64_t)v42, (uint64_t)&v159 - v36, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      v50 = v172;
      v164 = v46;
      v51 = v46((char *)v172, 1, v44);
      if ((_DWORD)v51 != 1)
      {
        v159 = (uint64_t)&v159;
        MEMORY[0x24BDAC7A8](v51);
        v57 = v45;
        v58 = (char *)&v159 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, uint64_t *, uint64_t))(v57 + 32))(v58, v50, v44);
        sub_24159CE88(&qword_25713BA90, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], MEMORY[0x24BDCE950]);
        LODWORD(v172) = sub_2416BB08C();
        v160 = v44;
        v161 = v57;
        v59 = *(void (**)(char *, uint64_t))(v57 + 8);
        v59(v58, v44);
        v60 = (void (*)(uint64_t))MEMORY[0x24BDCE908];
        sub_2415F615C((uint64_t)v163, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
        sub_2415F615C((uint64_t)v37, &qword_257139BD0, v60);
        v59(v49, v44);
        sub_2415F615C((uint64_t)v42, &qword_257139BD0, v60);
        if ((v172 & 1) == 0)
          return 0;
LABEL_58:
        v172 = &v159;
        v61 = v167;
        v62 = v168;
        v63 = MEMORY[0x24BDAC7A8]((char *)a1 + v168[14]);
        v64 = (v61 + 15) & 0xFFFFFFFFFFFFFFF0;
        v65 = (void (*)(uint64_t))MEMORY[0x24BDCE908];
        sub_2415F2D90(v63, (uint64_t)&v159 - v64, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
        v171 = &v159;
        v66 = MEMORY[0x24BDAC7A8]((char *)a2 + v62[14]);
        v67 = (char *)&v159 - v64;
        v68 = sub_2415F2D90(v66, (uint64_t)&v159 - v64, &qword_257139BD0, v65);
        v170 = &v159;
        MEMORY[0x24BDAC7A8](v68);
        v70 = (char *)&v159 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
        v71 = &v70[*(int *)(v166 + 48)];
        v169 = (uint64_t *)((char *)&v159 - v64);
        v72 = (uint64_t)v71;
        sub_2415F2D90((uint64_t)&v159 - v64, (uint64_t)v70, &qword_257139BD0, v65);
        sub_2415F2D90((uint64_t)&v159 - v64, v72, &qword_257139BD0, v65);
        v73 = v160;
        v74 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v164;
        v75 = v164(v70, 1, v160);
        if ((_DWORD)v75 == 1)
        {
          sub_2415F615C((uint64_t)&v159 - v64, &qword_257139BD0, v65);
          sub_2415F615C((uint64_t)v169, &qword_257139BD0, v65);
          v76 = v72;
          v77 = v73;
          if (v74(v76, 1, v73) == 1)
          {
            sub_2415F615C((uint64_t)v70, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
            goto LABEL_67;
          }
        }
        else
        {
          v163 = &v159;
          MEMORY[0x24BDAC7A8](v75);
          v78 = (char *)&v159 - v64;
          sub_2415F2D90((uint64_t)v70, (uint64_t)v78, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
          v162 = v72;
          v79 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v74)(v72, 1, v73);
          if ((_DWORD)v79 != 1)
          {
            v159 = (uint64_t)&v159;
            v81 = v161;
            MEMORY[0x24BDAC7A8](v79);
            v83 = (char *)&v159 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, unint64_t, uint64_t))(v81 + 32))(v83, v162, v73);
            v84 = (void (*)(uint64_t))MEMORY[0x24BDCE908];
            sub_24159CE88(&qword_25713BA90, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], MEMORY[0x24BDCE950]);
            LODWORD(v162) = sub_2416BB08C();
            v85 = v73;
            v86 = *(void (**)(char *, uint64_t))(v81 + 8);
            v86(v83, v85);
            v87 = v84;
            sub_2415F615C((uint64_t)v67, &qword_257139BD0, v84);
            sub_2415F615C((uint64_t)v169, &qword_257139BD0, v84);
            v77 = v85;
            v86(v78, v85);
            sub_2415F615C((uint64_t)v70, &qword_257139BD0, v87);
            if ((v162 & 1) == 0)
              return 0;
LABEL_67:
            v88 = v168[15];
            v89 = (_QWORD *)((char *)a1 + v88);
            v90 = *(_QWORD *)((char *)a1 + v88 + 8);
            v91 = (_QWORD *)((char *)a2 + v88);
            v92 = v91[1];
            if (v90)
            {
              if (!v92)
                return 0;
              if (*v89 != *v91 || v90 != v92)
              {
                v93 = sub_2416BB644();
                result = 0;
                if ((v93 & 1) == 0)
                  return result;
              }
            }
            else if (v92)
            {
              return 0;
            }
            v94 = v168[16];
            v95 = (_QWORD *)((char *)a1 + v94);
            v96 = *(_QWORD *)((char *)a1 + v94 + 8);
            v97 = (_QWORD *)((char *)a2 + v94);
            v98 = v97[1];
            if (v96)
            {
              if (!v98)
                return 0;
              if (*v95 != *v97 || v96 != v98)
              {
                v99 = sub_2416BB644();
                result = 0;
                if ((v99 & 1) == 0)
                  return result;
              }
            }
            else if (v98)
            {
              return 0;
            }
            if (*((unsigned __int8 *)a1 + v168[17]) != *((unsigned __int8 *)a2 + v168[17])
              || *((unsigned __int8 *)a1 + v168[18]) != *((unsigned __int8 *)a2 + v168[18]))
            {
              return 0;
            }
            v100 = v168[19];
            v101 = *(_QWORD *)((char *)a1 + v100);
            v102 = *(_QWORD *)((char *)a1 + v100 + 8);
            v103 = (_QWORD *)((char *)a2 + v100);
            v104 = *v103;
            v105 = v103[1];
            if (v102 >> 60 == 15)
            {
              if (v105 >> 60 == 15)
              {
LABEL_89:
                v108 = v168;
                v109 = (uint64_t)a1 + v168[20];
                v110 = (void (*)(uint64_t))MEMORY[0x24BDCBDE8];
                sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
                v171 = &v159;
                v112 = *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64);
                MEMORY[0x24BDAC7A8](v111);
                v113 = (char *)&v159 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0);
                sub_2415F2D90(v109, (uint64_t)v113, &qword_257139BD8, v110);
                v170 = &v159;
                v114 = MEMORY[0x24BDAC7A8]((char *)a2 + v108[20]);
                v162 = (v112 + 15) & 0xFFFFFFFFFFFFFFF0;
                v115 = (uint64_t)v113;
                sub_2415F2D90(v114, (uint64_t)v113, &qword_257139BD8, v110);
                sub_2415F60FC(0, &qword_25713BA88, &qword_257139BD8, v110);
                v169 = &v159;
                v117 = MEMORY[0x24BDAC7A8](v116);
                v42 = (char *)&v159 - v118;
                v119 = (char *)&v159 + *(int *)(v117 + 48) - v118;
                v163 = (uint64_t *)v113;
                sub_2415F2D90((uint64_t)v113, (uint64_t)&v159 - v118, &qword_257139BD8, v110);
                v172 = (uint64_t *)v119;
                sub_2415F2D90((uint64_t)v113, (uint64_t)v119, &qword_257139BD8, v110);
                v120 = sub_2416B9A18();
                v121 = *(_QWORD *)(v120 - 8);
                v122 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v121 + 48);
                v123 = v122(v42, 1, v120);
                if ((_DWORD)v123 == 1)
                {
                  v124 = (void (*)(uint64_t))MEMORY[0x24BDCBDE8];
                  sub_2415F615C(v115, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
                  sub_2415F615C((uint64_t)v163, &qword_257139BD8, v124);
                  if (v122((char *)v172, 1, v120) == 1)
                  {
                    sub_2415F615C((uint64_t)v42, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
LABEL_96:
                    v132 = v168[21];
                    v133 = *(void **)((char *)a1 + v132);
                    v134 = *(void **)((char *)a2 + v132);
                    if (v133)
                    {
                      if (!v134)
                        return 0;
                      sub_2415C0788(0, (unint64_t *)&qword_257139A90);
                      v135 = v134;
                      v136 = v133;
                      v137 = sub_2416BB428();

                      if ((v137 & 1) == 0)
                        return 0;
                    }
                    else if (v134)
                    {
                      return 0;
                    }
                    v172 = &v159;
                    v138 = v167;
                    v139 = v168;
                    v140 = MEMORY[0x24BDAC7A8]((char *)a1 + v168[22]);
                    v141 = (v138 + 15) & 0xFFFFFFFFFFFFFFF0;
                    v142 = (char *)&v159 - v141;
                    v143 = (void (*)(uint64_t))MEMORY[0x24BDCE908];
                    sub_2415F2D90(v140, (uint64_t)&v159 - v141, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
                    v171 = &v159;
                    v144 = MEMORY[0x24BDAC7A8]((char *)a2 + v139[22]);
                    v145 = (char *)&v159 - v141;
                    v146 = sub_2415F2D90(v144, (uint64_t)&v159 - v141, &qword_257139BD0, v143);
                    MEMORY[0x24BDAC7A8](v146);
                    v148 = (char *)&v159 - ((v147 + 15) & 0xFFFFFFFFFFFFFFF0);
                    v149 = (uint64_t)&v148[*(int *)(v166 + 48)];
                    sub_2415F2D90((uint64_t)&v159 - v141, (uint64_t)v148, &qword_257139BD0, v143);
                    sub_2415F2D90((uint64_t)&v159 - v141, v149, &qword_257139BD0, v143);
                    v150 = v164(v148, 1, v77);
                    if ((_DWORD)v150 == 1)
                    {
                      sub_2415F615C((uint64_t)&v159 - v141, &qword_257139BD0, v143);
                      sub_2415F615C((uint64_t)&v159 - v141, &qword_257139BD0, v143);
                      if (v164((char *)v149, 1, v77) == 1)
                      {
                        sub_2415F615C((uint64_t)v148, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
                        return 1;
                      }
                    }
                    else
                    {
                      v170 = &v159;
                      MEMORY[0x24BDAC7A8](v150);
                      v151 = (char *)&v159 - v141;
                      sub_2415F2D90((uint64_t)v148, (uint64_t)&v159 - v141, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
                      v152 = v164((char *)v149, 1, v77);
                      if ((_DWORD)v152 != 1)
                      {
                        v169 = &v159;
                        v153 = v161;
                        MEMORY[0x24BDAC7A8](v152);
                        v155 = (char *)&v159 - ((v154 + 15) & 0xFFFFFFFFFFFFFFF0);
                        (*(void (**)(char *, uint64_t, uint64_t))(v153 + 32))(v155, v149, v77);
                        v156 = (void (*)(uint64_t))MEMORY[0x24BDCE908];
                        sub_24159CE88(&qword_25713BA90, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], MEMORY[0x24BDCE950]);
                        v157 = sub_2416BB08C();
                        v158 = *(void (**)(char *, uint64_t))(v153 + 8);
                        v158(v155, v77);
                        sub_2415F615C((uint64_t)v145, &qword_257139BD0, v156);
                        sub_2415F615C((uint64_t)v142, &qword_257139BD0, v156);
                        v158(v151, v77);
                        sub_2415F615C((uint64_t)v148, &qword_257139BD0, v156);
                        return (v157 & 1) != 0;
                      }
                      sub_2415F615C((uint64_t)&v159 - v141, &qword_257139BD0, v143);
                      sub_2415F615C((uint64_t)&v159 - v141, &qword_257139BD0, v143);
                      (*(void (**)(char *, uint64_t))(v161 + 8))((char *)&v159 - v141, v77);
                    }
                    sub_2415F6198((uint64_t)v148, &qword_25713BA80, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
                    return 0;
                  }
                }
                else
                {
                  v159 = (uint64_t)&v159;
                  MEMORY[0x24BDAC7A8](v123);
                  v125 = (char *)&v159 - v162;
                  sub_2415F2D90((uint64_t)v42, (uint64_t)&v159 - v162, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
                  v126 = v122((char *)v172, 1, v120);
                  if ((_DWORD)v126 != 1)
                  {
                    v162 = (unint64_t)&v159;
                    MEMORY[0x24BDAC7A8](v126);
                    v129 = (char *)&v159 - ((v128 + 15) & 0xFFFFFFFFFFFFFFF0);
                    (*(void (**)(char *, uint64_t *, uint64_t))(v121 + 32))(v129, v172, v120);
                    v130 = (void (*)(uint64_t))MEMORY[0x24BDCBDE8];
                    sub_24159CE88(&qword_25713BA98, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], MEMORY[0x24BDCBE10]);
                    LODWORD(v172) = sub_2416BB08C();
                    v131 = *(void (**)(char *, uint64_t))(v121 + 8);
                    v131(v129, v120);
                    sub_2415F615C(v115, &qword_257139BD8, v130);
                    sub_2415F615C((uint64_t)v163, &qword_257139BD8, v130);
                    v131(v125, v120);
                    sub_2415F615C((uint64_t)v42, &qword_257139BD8, v130);
                    if ((v172 & 1) == 0)
                      return 0;
                    goto LABEL_96;
                  }
                  v127 = (void (*)(uint64_t))MEMORY[0x24BDCBDE8];
                  sub_2415F615C((uint64_t)v113, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
                  sub_2415F615C((uint64_t)v163, &qword_257139BD8, v127);
                  (*(void (**)(char *, uint64_t))(v121 + 8))(v125, v120);
                }
                v53 = &qword_25713BA88;
                v54 = &qword_257139BD8;
                v55 = (void (*)(uint64_t))MEMORY[0x24BDCBDE8];
LABEL_56:
                sub_2415F6198((uint64_t)v42, v53, v54, v55);
                return 0;
              }
            }
            else if (v105 >> 60 != 15)
            {
              sub_2415C357C(v101, v102);
              sub_2415C357C(v104, v105);
              sub_2415F332C(v101, v102);
              v107 = v106;
              sub_2415C3524(v104, v105);
              sub_2415C3524(v101, v102);
              if ((v107 & 1) == 0)
                return 0;
              goto LABEL_89;
            }
            sub_2415C357C(v101, v102);
            sub_2415C357C(v104, v105);
            sub_2415C3524(v101, v102);
            sub_2415C3524(v104, v105);
            return 0;
          }
          v80 = (void (*)(uint64_t))MEMORY[0x24BDCE908];
          sub_2415F615C((uint64_t)v67, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
          sub_2415F615C((uint64_t)v169, &qword_257139BD0, v80);
          (*(void (**)(char *, uint64_t))(v161 + 8))(v78, v73);
        }
        sub_2415F6198((uint64_t)v70, &qword_25713BA80, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
        return 0;
      }
      v52 = (void (*)(uint64_t))MEMORY[0x24BDCE908];
      sub_2415F615C((uint64_t)v163, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      sub_2415F615C((uint64_t)&v159 - v36, &qword_257139BD0, v52);
      (*(void (**)(char *, uint64_t))(v45 + 8))((char *)&v159 - v36, v44);
    }
    v53 = &qword_25713BA80;
    v54 = &qword_257139BD0;
    v55 = (void (*)(uint64_t))MEMORY[0x24BDCE908];
    goto LABEL_56;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MedicalIDData(_QWORD *a1, char *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char *v47;
  char *v48;
  id v49;
  uint64_t v50;
  char *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    v7 = *((_QWORD *)a2 + 3);
    a1[2] = *((_QWORD *)a2 + 2);
    a1[3] = v7;
    v8 = *((_QWORD *)a2 + 5);
    a1[4] = *((_QWORD *)a2 + 4);
    a1[5] = v8;
    v9 = *((_QWORD *)a2 + 7);
    a1[6] = *((_QWORD *)a2 + 6);
    a1[7] = v9;
    v10 = *((_QWORD *)a2 + 9);
    a1[8] = *((_QWORD *)a2 + 8);
    a1[9] = v10;
    v11 = *((_QWORD *)a2 + 11);
    a1[10] = *((_QWORD *)a2 + 10);
    a1[11] = v11;
    v53 = (void *)*((_QWORD *)a2 + 12);
    v54 = (void *)*((_QWORD *)a2 + 13);
    v12 = a3[13];
    __dst = (char *)a1 + v12;
    v52 = &a2[v12];
    a1[12] = v53;
    a1[13] = v54;
    v13 = sub_2416B9B50();
    v55 = *(_QWORD *)(v13 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v53;
    v16 = v54;
    if (v14(v52, 1, v13))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(__dst, v52, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      v18 = v55;
    }
    else
    {
      v18 = v55;
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(__dst, v52, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(__dst, 0, 1, v13);
    }
    v20 = a3[14];
    v21 = (char *)v4 + v20;
    v22 = &a2[v20];
    if (v14(&a2[v20], 1, v13))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v22, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v13);
    }
    v24 = a3[15];
    v25 = a3[16];
    v26 = (_QWORD *)((char *)v4 + v24);
    v27 = &a2[v24];
    v28 = *((_QWORD *)v27 + 1);
    *v26 = *(_QWORD *)v27;
    v26[1] = v28;
    v29 = (_QWORD *)((char *)v4 + v25);
    v30 = &a2[v25];
    v31 = *((_QWORD *)v30 + 1);
    *v29 = *(_QWORD *)v30;
    v29[1] = v31;
    v32 = a3[18];
    *((_BYTE *)v4 + a3[17]) = a2[a3[17]];
    *((_BYTE *)v4 + v32) = a2[v32];
    v33 = a3[19];
    v34 = (char *)v4 + v33;
    v35 = (uint64_t *)&a2[v33];
    v36 = *(_QWORD *)&a2[v33 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v36 >> 60 == 15)
    {
      *(_OWORD *)v34 = *(_OWORD *)v35;
    }
    else
    {
      v37 = *v35;
      sub_2415A0A90(*v35, v36);
      *(_QWORD *)v34 = v37;
      *((_QWORD *)v34 + 1) = v36;
    }
    v38 = a3[20];
    v39 = (char *)v4 + v38;
    v40 = &a2[v38];
    v41 = sub_2416B9A18();
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
    v44 = a3[21];
    v45 = a3[22];
    v46 = *(void **)&a2[v44];
    *(_QWORD *)((char *)v4 + v44) = v46;
    v47 = (char *)v4 + v45;
    v48 = &a2[v45];
    v49 = v46;
    if (v14(v48, 1, v13))
    {
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v47, v48, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v47, 0, 1, v13);
    }
  }
  return v4;
}

uint64_t destroy for MedicalIDData(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = a1 + a2[13];
  v5 = sub_2416B9B50();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + a2[14];
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (uint64_t *)(a1 + a2[19]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_2415A0DAC(*v9, v10);
  v11 = a1 + a2[20];
  v12 = sub_2416B9A18();
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);

  v14 = a1 + a2[22];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v14, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  return result;
}

_QWORD *initializeWithCopy for MedicalIDData(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  char *v46;
  id v47;
  uint64_t v48;
  char *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  char *__dst;

  v5 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *((_QWORD *)a2 + 3);
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = v6;
  v7 = *((_QWORD *)a2 + 5);
  a1[4] = *((_QWORD *)a2 + 4);
  a1[5] = v7;
  v8 = *((_QWORD *)a2 + 7);
  a1[6] = *((_QWORD *)a2 + 6);
  a1[7] = v8;
  v9 = *((_QWORD *)a2 + 9);
  a1[8] = *((_QWORD *)a2 + 8);
  a1[9] = v9;
  v10 = *((_QWORD *)a2 + 11);
  a1[10] = *((_QWORD *)a2 + 10);
  a1[11] = v10;
  v51 = (void *)*((_QWORD *)a2 + 12);
  v52 = (void *)*((_QWORD *)a2 + 13);
  v11 = a3[13];
  __dst = (char *)a1 + v11;
  v50 = &a2[v11];
  a1[12] = v51;
  a1[13] = v52;
  v12 = sub_2416B9B50();
  v53 = *(_QWORD *)(v12 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = v51;
  v15 = v52;
  if (v13(v50, 1, v12))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(__dst, v50, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    v17 = v53;
  }
  else
  {
    v17 = v53;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(__dst, v50, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(__dst, 0, 1, v12);
  }
  v18 = a3[14];
  v19 = (char *)a1 + v18;
  v20 = &a2[v18];
  if (v13(&a2[v18], 1, v12))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v20, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v12);
  }
  v22 = a3[15];
  v23 = a3[16];
  v24 = (_QWORD *)((char *)a1 + v22);
  v25 = &a2[v22];
  v26 = *((_QWORD *)v25 + 1);
  *v24 = *(_QWORD *)v25;
  v24[1] = v26;
  v27 = (_QWORD *)((char *)a1 + v23);
  v28 = &a2[v23];
  v29 = *((_QWORD *)v28 + 1);
  *v27 = *(_QWORD *)v28;
  v27[1] = v29;
  v30 = a3[18];
  *((_BYTE *)a1 + a3[17]) = a2[a3[17]];
  *((_BYTE *)a1 + v30) = a2[v30];
  v31 = a3[19];
  v32 = (char *)a1 + v31;
  v33 = (uint64_t *)&a2[v31];
  v34 = *(_QWORD *)&a2[v31 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v34 >> 60 == 15)
  {
    *(_OWORD *)v32 = *(_OWORD *)v33;
  }
  else
  {
    v35 = *v33;
    sub_2415A0A90(*v33, v34);
    *(_QWORD *)v32 = v35;
    *((_QWORD *)v32 + 1) = v34;
  }
  v36 = a3[20];
  v37 = (char *)a1 + v36;
  v38 = &a2[v36];
  v39 = sub_2416B9A18();
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  v42 = a3[21];
  v43 = a3[22];
  v44 = *(void **)&a2[v42];
  *(_QWORD *)((char *)a1 + v42) = v44;
  v45 = (char *)a1 + v43;
  v46 = &a2[v43];
  v47 = v44;
  if (v13(v46, 1, v12))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v45, v46, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v45, 0, 1, v12);
  }
  return a1;
}

char *assignWithCopy for MedicalIDData(char *a1, _QWORD *a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t (*v62)(char *, uint64_t, uint64_t);
  int *v63;

  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 3) = a2[3];
  *((_QWORD *)a1 + 4) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 7) = a2[7];
  *((_QWORD *)a1 + 8) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 9) = a2[9];
  *((_QWORD *)a1 + 10) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 11) = a2[11];
  v6 = (void *)*((_QWORD *)a1 + 12);
  v7 = (void *)a2[12];
  *((_QWORD *)a1 + 12) = v7;
  v8 = v7;

  v9 = (void *)*((_QWORD *)a1 + 13);
  v10 = (void *)a2[13];
  *((_QWORD *)a1 + 13) = v10;
  v11 = v10;

  v12 = a3[13];
  v13 = &a1[v12];
  v14 = (char *)a2 + v12;
  v15 = sub_2416B9B50();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  v21 = a3[14];
  v22 = &a1[v21];
  v23 = (char *)a2 + v21;
  v24 = v17(&a1[v21], 1, v15);
  v25 = v17(v23, 1, v15);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  v27 = a3[15];
  v28 = &a1[v27];
  v29 = (_QWORD *)((char *)a2 + v27);
  *(_QWORD *)v28 = *v29;
  *((_QWORD *)v28 + 1) = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = a3[16];
  v31 = &a1[v30];
  v32 = (_QWORD *)((char *)a2 + v30);
  *(_QWORD *)v31 = *v32;
  *((_QWORD *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[17]] = *((_BYTE *)a2 + a3[17]);
  a1[a3[18]] = *((_BYTE *)a2 + a3[18]);
  v33 = a3[19];
  v34 = (uint64_t *)&a1[v33];
  v35 = (_QWORD *)((char *)a2 + v33);
  v36 = *(_QWORD *)((char *)a2 + v33 + 8);
  v62 = v17;
  v37 = v16;
  if (*(_QWORD *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      v38 = *v35;
      sub_2415A0A90(v38, v36);
      *v34 = v38;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v34);
LABEL_18:
    *(_OWORD *)v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  v39 = *v35;
  sub_2415A0A90(v39, v36);
  v40 = *v34;
  v41 = v34[1];
  *v34 = v39;
  v34[1] = v36;
  sub_2415A0DAC(v40, v41);
LABEL_20:
  v63 = a3;
  v42 = a3[20];
  v43 = &a1[v42];
  v44 = (char *)a2 + v42;
  v45 = sub_2416B9A18();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  v48 = v47(v43, 1, v45);
  v49 = v47(v44, 1, v45);
  if (v48)
  {
    v50 = v37;
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v50 = v37;
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v43, v45);
LABEL_25:
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 24))(v43, v44, v45);
LABEL_26:
  v52 = v63[21];
  v53 = *(void **)&a1[v52];
  v54 = *(void **)((char *)a2 + v52);
  *(_QWORD *)&a1[v52] = v54;
  v55 = v54;

  v56 = v63[22];
  v57 = &a1[v56];
  v58 = (char *)a2 + v56;
  LODWORD(v53) = v62(&a1[v56], 1, v15);
  v59 = v62(v58, 1, v15);
  if (!(_DWORD)v53)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 24))(v57, v58, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v57, v15);
    goto LABEL_31;
  }
  if (v59)
  {
LABEL_31:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v57, v58, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v57, 0, 1, v15);
  return a1;
}

uint64_t initializeWithTake for MedicalIDData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v6 = a3[13];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v9 = sub_2416B9B50();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[14];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  v17 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v18 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  v22 = sub_2416B9A18();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v25 = a3[22];
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  v26 = (void *)(a1 + v25);
  v27 = (const void *)(a2 + v25);
  if (v11(v27, 1, v9))
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v26, v27, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v26, 0, 1, v9);
  }
  return a1;
}

char *assignWithTake for MedicalIDData(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;

  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  v7 = a2[4];
  *((_QWORD *)a1 + 3) = a2[3];
  *((_QWORD *)a1 + 4) = v7;
  swift_bridgeObjectRelease();
  v8 = a2[6];
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = v8;
  swift_bridgeObjectRelease();
  v9 = a2[8];
  *((_QWORD *)a1 + 7) = a2[7];
  *((_QWORD *)a1 + 8) = v9;
  swift_bridgeObjectRelease();
  v10 = a2[10];
  *((_QWORD *)a1 + 9) = a2[9];
  *((_QWORD *)a1 + 10) = v10;
  swift_bridgeObjectRelease();
  v11 = (void *)*((_QWORD *)a1 + 12);
  v12 = a2[12];
  *((_QWORD *)a1 + 11) = a2[11];
  *((_QWORD *)a1 + 12) = v12;

  v13 = (void *)*((_QWORD *)a1 + 13);
  *((_QWORD *)a1 + 13) = a2[13];

  v14 = a3[13];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = sub_2416B9B50();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  v23 = a3[14];
  v24 = &a1[v23];
  v25 = (char *)a2 + v23;
  v26 = v19(&a1[v23], 1, v17);
  v27 = v19(v25, 1, v17);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  v29 = a3[15];
  v30 = &a1[v29];
  v31 = (_QWORD *)((char *)a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *(_QWORD *)v30 = v33;
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  v34 = a3[16];
  v35 = &a1[v34];
  v36 = (_QWORD *)((char *)a2 + v34);
  v38 = *v36;
  v37 = v36[1];
  *(_QWORD *)v35 = v38;
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  v39 = a3[18];
  a1[a3[17]] = *((_BYTE *)a2 + a3[17]);
  a1[v39] = *((_BYTE *)a2 + v39);
  v40 = a3[19];
  v41 = (uint64_t)&a1[v40];
  v42 = (char *)a2 + v40;
  v43 = *(_QWORD *)&a1[v40 + 8];
  v64 = v19;
  v65 = v18;
  if (v43 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v41 = *(_OWORD *)v42;
    goto LABEL_18;
  }
  v44 = *((_QWORD *)v42 + 1);
  if (v44 >> 60 == 15)
  {
    sub_2415A1B38(v41);
    goto LABEL_16;
  }
  v45 = *(_QWORD *)v41;
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *(_QWORD *)(v41 + 8) = v44;
  sub_2415A0DAC(v45, v43);
LABEL_18:
  v46 = a3[20];
  v47 = &a1[v46];
  v48 = (char *)a2 + v46;
  v49 = sub_2416B9A18();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  v52 = v51(v47, 1, v49);
  v53 = v51(v48, 1, v49);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v49);
LABEL_23:
    sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v50 + 40))(v47, v48, v49);
LABEL_24:
  v55 = a3[21];
  v56 = *(void **)&a1[v55];
  *(_QWORD *)&a1[v55] = *(_QWORD *)((char *)a2 + v55);

  v57 = a3[22];
  v58 = &a1[v57];
  v59 = (char *)a2 + v57;
  v60 = v64(&a1[v57], 1, v17);
  v61 = v64(v59, 1, v17);
  if (!v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v65 + 40))(v58, v59, v17);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v65 + 8))(v58, v17);
    goto LABEL_29;
  }
  if (v61)
  {
LABEL_29:
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v58, v59, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v58, 0, 1, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415F5E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 52);
    }
    else
    {
      sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 80);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MedicalIDData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415F5F38(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 52);
    }
    else
    {
      sub_2415A9F94(0, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 80);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_2415F5FF4()
{
  unint64_t v0;
  unint64_t v1;

  sub_2415A9F94(319, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
  if (v0 <= 0x3F)
  {
    sub_2415A9F94(319, &qword_257139BD8, (void (*)(uint64_t))MEMORY[0x24BDCBDE8]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_2415F60FC(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    sub_2415A9F94(255, a3, a4);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_2415F615C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_2415A9F94(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_2415F6198(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v5;

  sub_2415F60FC(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_2415F61D4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BasicAlertModel.Action();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2415F6210()
{
  return sub_2416BA36C();
}

uint64_t static MIUIMedicalIDLearnMoreNavigationViewControllerFactory.makeViewController()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  Class v6;
  id v7;
  uint64_t v9;

  v0 = type metadata accessor for MedicalIDLearnMoreNavigationView();
  v1 = MEMORY[0x24BDAC7A8](v0);
  v3 = (uint64_t *)((char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v9 - v4;
  *v3 = swift_getKeyPath();
  sub_2415F630C();
  swift_storeEnumTagMultiPayload();
  sub_2415F6360((uint64_t)v3, (uint64_t)v5);
  sub_2415F63A4();
  v7 = objc_allocWithZone(v6);
  return sub_2416BA54C();
}

uint64_t sub_2415F62EC()
{
  return sub_2416BA36C();
}

void sub_2415F630C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713A4E0)
  {
    sub_2416BA06C();
    v0 = sub_2416B9FB8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713A4E0);
  }
}

uint64_t sub_2415F6360(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MedicalIDLearnMoreNavigationView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_2415F63A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713BAA8)
  {
    type metadata accessor for MedicalIDLearnMoreNavigationView();
    sub_2415F6404();
    v0 = sub_2416BA558();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713BAA8);
  }
}

unint64_t sub_2415F6404()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713BAB0;
  if (!qword_25713BAB0)
  {
    v1 = type metadata accessor for MedicalIDLearnMoreNavigationView();
    result = MEMORY[0x2426994BC](&unk_2416C0724, v1);
    atomic_store(result, (unint64_t *)&qword_25713BAB0);
  }
  return result;
}

MIUIMedicalIDLearnMoreNavigationViewControllerFactory __swiftcall MIUIMedicalIDLearnMoreNavigationViewControllerFactory.init()()
{
  return (MIUIMedicalIDLearnMoreNavigationViewControllerFactory)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

id MIUIMedicalIDLearnMoreNavigationViewControllerFactory.init()()
{
  objc_super v1;

  v1.super_class = (Class)MIUIMedicalIDLearnMoreNavigationViewControllerFactory;
  return objc_msgSendSuper2(&v1, sel_init);
}

unint64_t type metadata accessor for MIUIMedicalIDLearnMoreNavigationViewControllerFactory()
{
  unint64_t result;

  result = qword_25713BAE0;
  if (!qword_25713BAE0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25713BAE0);
  }
  return result;
}

uint64_t destroy for MedicalIDPlaceholderCell()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MedicalIDPlaceholderCell(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MedicalIDPlaceholderCell(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for MedicalIDPlaceholderCell(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDPlaceholderCell(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDPlaceholderCell(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDPlaceholderCell()
{
  return &type metadata for MedicalIDPlaceholderCell;
}

uint64_t sub_2415F68BC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2415F68CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v1[1];
  v4 = *((_BYTE *)v1 + 16);
  v15 = *((_BYTE *)v1 + 17);
  v6 = v1[3];
  v5 = v1[4];
  v8 = v1[5];
  v7 = v1[6];
  v9 = v1[8];
  v17 = v1[7];
  v18 = *v1;
  v10 = v1[9];
  v11 = v1[10];
  v16 = v10;
  v12 = qword_257139500;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12 != -1)
    swift_once();
  v13 = qword_25713D4D0;
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 17) = v15;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v13;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = v17;
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = v11;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t sub_2415F69C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713BAE8;
  if (!qword_25713BAE8)
  {
    sub_2415F6A10(255);
    result = MEMORY[0x2426994BC](&unk_2416C01F8, v1);
    atomic_store(result, (unint64_t *)&qword_25713BAE8);
  }
  return result;
}

void sub_2415F6A10(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_25713BAF0)
  {
    v2 = sub_2415F1BC8();
    v4 = type metadata accessor for MedicalIDCellView(a1, (uint64_t)&type metadata for MedicalIDCellPlaceholderText, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_25713BAF0);
  }
}

uint64_t sub_2415F6A68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v4 = (int *)type metadata accessor for MedicalIDEditPregnancyModalView();
  v5 = a2 + v4[6];
  sub_2415A0A74(0);
  v7 = *(_QWORD *)(v6 - 8);
  v32[1] = v6;
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = sub_2416B9B50();
  v11 = *(_QWORD *)(v10 - 8);
  v33 = v10;
  v34 = v11;
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))((char *)v32 - v9, 1, 1, v10);
  MEMORY[0x24BDAC7A8](v12);
  sub_2415BEF64((uint64_t)v32 - v9, (uint64_t)v32 - v9, (uint64_t (*)(_QWORD))sub_2415A0A74);
  sub_2416BAD08();
  sub_2415A6154((uint64_t)v32 - v9, (uint64_t (*)(_QWORD))sub_2415A0A74);
  v13 = (_OWORD *)(a2 + v4[7]);
  sub_24159D7F0(0, (unint64_t *)&qword_25713A918, (uint64_t)&type metadata for BasicAlertModel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  sub_2416BAD08();
  v14 = v40;
  *v13 = v39;
  v13[1] = v14;
  v15 = v42;
  v13[2] = v41;
  v13[3] = v15;
  v16 = a2 + v4[8];
  type metadata accessor for MedicalIDDataManager();
  sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  *(_QWORD *)v16 = sub_2416B9FC4();
  *(_BYTE *)(v16 + 8) = v17 & 1;
  v18 = (uint64_t *)(a2 + v4[9]);
  *v18 = swift_getKeyPath();
  v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v20 = (uint64_t *)(a2 + v4[10]);
  *v20 = swift_getKeyPath();
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], v19);
  swift_storeEnumTagMultiPayload();
  v21 = (uint64_t *)(a2 + v4[11]);
  sub_2415CA770();
  sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
  *v21 = sub_2416BA270();
  v21[1] = v22;
  sub_2415BEF64(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
  v23 = a1 + *(int *)(type metadata accessor for MedicalIDPregnancyViewModel() + 20);
  v24 = type metadata accessor for MedicalIDData();
  v25 = v23 + *(int *)(v24 + 56);
  MEMORY[0x24BDAC7A8](v24);
  sub_2415BEF64(v25, (uint64_t)v32 - v9, (uint64_t (*)(_QWORD))sub_2415A0A74);
  v26 = sub_2415CCAFC(v5, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  MEMORY[0x24BDAC7A8](v26);
  sub_2415BEF64((uint64_t)v32 - v9, (uint64_t)v32 - v9, (uint64_t (*)(_QWORD))sub_2415A0A74);
  sub_2416BAD08();
  v27 = sub_2415A6154((uint64_t)v32 - v9, (uint64_t (*)(_QWORD))sub_2415A0A74);
  MEMORY[0x24BDAC7A8](v27);
  v28 = (char *)v32 - v9;
  sub_2415BEF64(v25, (uint64_t)v32 - v9, (uint64_t (*)(_QWORD))sub_2415A0A74);
  LOBYTE(v9) = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))((char *)v32 - v9, 1, v33) != 1;
  sub_2415A6154((uint64_t)v28, (uint64_t (*)(_QWORD))sub_2415A0A74);
  v29 = a2 + v4[5];
  LOBYTE(v35) = v9;
  sub_2416BAD08();
  LOBYTE(a2) = v39;
  v30 = *((_QWORD *)&v39 + 1);
  result = sub_2415A6154(a1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
  *(_BYTE *)v29 = a2;
  *(_QWORD *)(v29 + 8) = v30;
  return result;
}

uint64_t type metadata accessor for MedicalIDEditPregnancyModalView()
{
  uint64_t result;

  result = qword_25713BB70;
  if (!qword_25713BB70)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2415F6E80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t (**v24)();
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v2 = v1;
  v43 = a1;
  v3 = type metadata accessor for MedicalIDEditPregnancyModalView();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415FC0B4(0);
  v8 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_257139450 != -1)
    swift_once();
  v11 = qword_25713BB00;
  v40 = qword_25713BAF8;
  sub_2415BEF64(v2, (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPregnancyModalView);
  v12 = *(unsigned __int8 *)(v4 + 80);
  v13 = (v12 + 16) & ~v12;
  v44 = v13 + v5;
  v41 = v12 | 7;
  v14 = swift_allocObject();
  sub_2415A85BC((uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPregnancyModalView);
  v15 = (__int128 *)(v2 + *(int *)(v3 + 28));
  v16 = v15[1];
  v46 = *v15;
  v47 = v16;
  v17 = v15[3];
  v48 = v15[2];
  v49 = v17;
  sub_2415DE314();
  v42 = v3;
  swift_bridgeObjectRetain();
  sub_2416BAD2C();
  v39 = v50;
  v38 = v51;
  v37 = v52;
  v36 = v53;
  v18 = v54;
  *v10 = swift_getKeyPath();
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v19 = (uint64_t *)((char *)v10 + v8[9]);
  *v19 = v40;
  v19[1] = v11;
  v20 = (uint64_t *)((char *)v10 + v8[10]);
  *v20 = &unk_25713BC30;
  v20[1] = v14;
  v21 = (char *)v10 + v8[11];
  v22 = v38;
  *(_OWORD *)v21 = v39;
  *((_OWORD *)v21 + 1) = v22;
  v23 = v36;
  *((_OWORD *)v21 + 2) = v37;
  *((_OWORD *)v21 + 3) = v23;
  *((_QWORD *)v21 + 8) = v18;
  v24 = (uint64_t (**)())((char *)v10 + v8[12]);
  sub_2415BEF64(v2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPregnancyModalView);
  v40 = (uint64_t)v8;
  v25 = swift_allocObject();
  sub_2415A85BC((uint64_t)v6, v25 + v13, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPregnancyModalView);
  sub_2415BEF64(v2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPregnancyModalView);
  v26 = swift_allocObject();
  sub_2415A85BC((uint64_t)v6, v26 + v13, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPregnancyModalView);
  *(_QWORD *)&v39 = v2;
  sub_2415BEF64(v2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPregnancyModalView);
  v27 = swift_allocObject();
  sub_2415A85BC((uint64_t)v6, v27 + v13, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPregnancyModalView);
  *v24 = sub_2415FC8C0;
  v24[1] = (uint64_t (*)())v25;
  v24[2] = (uint64_t (*)())sub_2415FC8D0;
  v24[3] = (uint64_t (*)())v26;
  v24[4] = sub_2415FC910;
  v24[5] = (uint64_t (*)())v27;
  v28 = (char *)v10 + *(int *)(v40 + 52);
  v45 = 0;
  v29 = MEMORY[0x24BEE1328];
  sub_2416BAD08();
  v30 = *((_QWORD *)&v46 + 1);
  *v28 = v46;
  *((_QWORD *)v28 + 1) = v30;
  v31 = v39;
  v32 = v39 + *(int *)(v42 + 20);
  LOBYTE(v30) = *(_BYTE *)v32;
  v33 = *(_QWORD *)(v32 + 8);
  LOBYTE(v50) = v30;
  *((_QWORD *)&v50 + 1) = v33;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, v29, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  LOBYTE(v50) = v46;
  sub_2415BEF64(v31, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPregnancyModalView);
  v34 = swift_allocObject();
  sub_2415A85BC((uint64_t)v6, v34 + v13, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPregnancyModalView);
  sub_24159CE88(&qword_25713BC38, (uint64_t (*)(uint64_t))sub_2415FC0B4, (uint64_t)&unk_2416BFE00);
  sub_2416BABE8();
  swift_release();
  return sub_2415A6154((uint64_t)v10, (uint64_t (*)(_QWORD))sub_2415FC0B4);
}

uint64_t sub_2415F7310()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2415C2834;
  return sub_2415F7358();
}

uint64_t sub_2415F7358()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[14] = v0;
  v2 = sub_2416BA06C();
  v1[15] = v2;
  v1[16] = *(_QWORD *)(v2 - 8);
  v1[17] = swift_task_alloc();
  sub_2415A6FC4(0);
  v1[18] = swift_task_alloc();
  type metadata accessor for MedicalIDData();
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = sub_2416BB290();
  v1[22] = sub_2416BB284();
  v1[23] = sub_2416BB254();
  v1[24] = v3;
  return swift_task_switch();
}

uint64_t sub_2415F7440()
{
  uint64_t v0;
  uint64_t (*v1)(char *, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v1 = *(uint64_t (**)(char *, uint64_t))(v0 + 160);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = type metadata accessor for MedicalIDEditPregnancyModalView();
  *(_QWORD *)(v0 + 200) = v4;
  v19 = v3 + *(int *)(v4 + 32);
  v5 = *(_BYTE *)(v19 + 8);
  v6 = swift_retain();
  v7 = sub_2415C0C54(v6, v5);
  swift_release();
  swift_getKeyPath();
  *(_QWORD *)(v0 + 88) = v7;
  *(_QWORD *)(v0 + 208) = sub_24159CE88(&qword_257139F28, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDDataManager, (uint64_t)&protocol conformance descriptor for MedicalIDDataManager);
  sub_2416B9CAC();
  swift_release();
  v8 = v7 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_2415BEF64(v8, v2, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  swift_release();
  LoadState<>.loadedValue.getter((uint64_t)v1);
  sub_2415A6154(v2, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  sub_2415A0A74(0);
  v9 = swift_task_alloc();
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  MedicalIDPregnancyViewModel.update(_:with:)((uint64_t)v1, v9);
  sub_2415A6154(v9, (uint64_t (*)(_QWORD))sub_2415A0A74);
  swift_task_dealloc();
  MedicalIDPregnancyViewModel.validationResult(for:)(v1, &v21);
  v10 = v22;
  if (v22)
  {
    v11 = v25;
    v18 = v23;
    v20 = v24;
    v12 = v21;
    swift_release();
    sub_2415A534C();
    swift_allocError();
    *(_QWORD *)v13 = v12;
    *(_QWORD *)(v13 + 8) = v10;
    *(_OWORD *)(v13 + 16) = v18;
    *(_OWORD *)(v13 + 32) = v20;
    *(_QWORD *)(v13 + 48) = v11;
    swift_willThrow();
    sub_2415A6154(*(_QWORD *)(v0 + 160), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(_BYTE *)(v19 + 8);
    v16 = swift_retain();
    *(_QWORD *)(v0 + 216) = sub_2415C0C54(v16, v15);
    swift_release();
    *(_QWORD *)(v0 + 224) = sub_2416BB284();
    *(_QWORD *)(v0 + 232) = sub_2416BB254();
    *(_QWORD *)(v0 + 240) = v17;
    return swift_task_switch();
  }
}

uint64_t sub_2415F772C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[27];
  v3 = v0[19];
  v2 = v0[20];
  v4 = v0[18];
  swift_getKeyPath();
  v0[12] = v1;
  sub_2416B9CAC();
  swift_release();
  v5 = v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_2415BEF64(v5, v4, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  LoadState<>.loadedValue.getter(v3);
  sub_2415A6154(v4, (uint64_t (*)(_QWORD))sub_2415A6FC4);
  sub_2415A6154(v3, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  swift_beginAccess();
  sub_2415BEF64(v2, v3, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  v6 = (_QWORD *)swift_task_alloc();
  v0[31] = v6;
  *v6 = v0;
  v6[1] = sub_2415F787C;
  return sub_24167239C(v0[19], (uint64_t)(v0 + 13));
}

uint64_t sub_2415F787C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2415F78DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_release();
  sub_2415A6154(v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  swift_release();
  return swift_task_switch();
}

uint64_t sub_2415F7930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  swift_release();
  sub_2415C0E10(v2);
  sub_2416BA060();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_2415A6154(v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2415F79E8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[19];
  swift_release();
  sub_2415A6154(v1, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  swift_release();
  v0[32] = v0[13];
  return swift_task_switch();
}

uint64_t sub_2415F7A44()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 256);
  swift_release();
  sub_2415CF224();
  swift_allocError();
  *v2 = v1;
  sub_2415A6154(*(_QWORD *)(v0 + 160), (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2415F7AE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char **v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t result;
  char *v71;
  uint64_t v72;
  char **v73;
  uint64_t v74;
  uint64_t v75;
  char **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v82 = a2;
  sub_2415A3D28(0, &qword_25713BBF8, MEMORY[0x24BDF5158], MEMORY[0x24BDF5138], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DatePickerEditView);
  v80 = v3;
  v78 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v75 = (uint64_t)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v74 = (uint64_t)&v71 - v6;
  sub_2415FC310();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v81 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v79 = (uint64_t)&v71 - v10;
  sub_2415A3D28(0, &qword_25713BBE8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], MEMORY[0x24BDF46B0]);
  v12 = v11;
  v76 = *(char ***)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v71 - v13;
  sub_2415FC28C();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v77 = (uint64_t)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v71 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v83 = (uint64_t)&v71 - v21;
  v22 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v22);
  v73 = v23;
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v24 = (void *)qword_25713A038;
  v25 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v25);
  v26 = v24;
  sub_2416B9C04();
  v71 = "l_id_disclaimer_text";
  v89 = sub_2416BB134();
  v90 = v27;
  v72 = type metadata accessor for MedicalIDEditPregnancyModalView();
  v28 = (char *)a1 + *(int *)(v72 + 20);
  v29 = *((_QWORD *)v28 + 1);
  v85 = *v28;
  v86 = v29;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  v84 = a1;
  sub_2415C343C();
  v30 = MEMORY[0x24BEE0D00];
  v31 = v84;
  sub_2416BADE0();
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, v30, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_2416BCC80;
  v33 = v31[1];
  *(_QWORD *)(v32 + 32) = *v31;
  *(_QWORD *)(v32 + 40) = v33;
  *(_QWORD *)(v32 + 48) = 0xD000000000000017;
  *(_QWORD *)(v32 + 56) = 0x80000002416C4990;
  swift_bridgeObjectRetain();
  v34 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v35 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v35)
  {
    sub_2416BB128();

    sub_2415FC998();
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v76[1])(v14, v12);
    v36 = v83;
    sub_2415A85BC((uint64_t)v20, v83, (uint64_t (*)(_QWORD))sub_2415FC28C);
    v37 = *((_QWORD *)v28 + 1);
    LOBYTE(v87) = *v28;
    v88 = v37;
    sub_2416BAD14();
    if (v89 != 1)
    {
      v64 = 1;
      v66 = (uint64_t)v81;
      v65 = v82;
      v63 = v79;
      v67 = v80;
      goto LABEL_8;
    }
    sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    v76 = &v71;
    MEMORY[0x24BDAC7A8](v38);
    v40 = (char *)&v71 - v39;
    v41 = v72;
    sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    v42 = sub_2416BAD2C();
    MEMORY[0x24BDAC7A8](v42);
    v43 = sub_2416BB098();
    v44 = (void *)qword_25713A038;
    MEMORY[0x24BDAC7A8](v43);
    v45 = v44;
    sub_2416B9C04();
    v46 = sub_2416BB134();
    v48 = v47;
    v49 = v84;
    v50 = sub_2416B9B50();
    v73 = &v71;
    MEMORY[0x24BDAC7A8](v50);
    v52 = (char *)&v71 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
    v53 = *(void **)((char *)v49 + *(int *)(v41 + 44));
    if (v53)
    {
      v54 = v53;
      MedicalIDPregnancyViewModel.defaultPregnancyDueDate(with:)(v54, (uint64_t)v52);

      sub_2415A0A74(0);
      v56 = *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64);
      MEMORY[0x24BDAC7A8](v55);
      v57 = (char *)&v71 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
      v58 = MedicalIDPregnancyViewModel.minimumSelectableDueDate.getter(v57);
      MEMORY[0x24BDAC7A8](v58);
      _s11MedicalIDUI0A20IDPregnancyViewModelV24maximumSelectableDueDate10Foundation0I0VSgvg_0((uint64_t)v57);
      v59 = *v49;
      v60 = swift_bridgeObjectRetain();
      v61 = v75;
      sub_2415F8354((uint64_t)v40, v46, v48, (uint64_t)v52, (uint64_t)v57, (uint64_t)v57, 0, 0, v75, 0, v59, v60, (uint64_t)nullsub_1, 0);
      v62 = v74;
      sub_2415FCA00(v61, v74);
      v63 = v79;
      sub_2415FCA00(v62, v79);
      v64 = 0;
      v66 = (uint64_t)v81;
      v65 = v82;
      v67 = v80;
      v36 = v83;
LABEL_8:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v63, v64, 1, v67);
      v68 = v77;
      sub_2415BEF64(v36, v77, (uint64_t (*)(_QWORD))sub_2415FC28C);
      sub_2415BEF64(v63, v66, (uint64_t (*)(_QWORD))sub_2415FC310);
      sub_2415BEF64(v68, v65, (uint64_t (*)(_QWORD))sub_2415FC28C);
      sub_2415FC220();
      sub_2415BEF64(v66, v65 + *(int *)(v69 + 48), (uint64_t (*)(_QWORD))sub_2415FC310);
      sub_2415A6154(v63, (uint64_t (*)(_QWORD))sub_2415FC310);
      sub_2415A6154(v36, (uint64_t (*)(_QWORD))sub_2415FC28C);
      sub_2415A6154(v66, (uint64_t (*)(_QWORD))sub_2415FC310);
      return sub_2415A6154(v68, (uint64_t (*)(_QWORD))sub_2415FC28C);
    }
  }
  else
  {
    __break(1u);
  }
  sub_2415CA770();
  sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
  result = sub_2416BA264();
  __break(1u);
  return result;
}

uint64_t sub_2415F8354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, char *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;

  v51 = a4;
  v52 = a8;
  v50 = a7;
  v46 = a6;
  v47 = a5;
  v48 = a13;
  v49 = a14;
  v53 = a11;
  v54 = a12;
  sub_2415A3D28(0, &qword_25713BBF8, MEMORY[0x24BDF5158], MEMORY[0x24BDF5138], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DatePickerEditView);
  v22 = v21;
  v23 = a9 + v21[18];
  v55 = 0;
  sub_2416BAD08();
  v24 = v57;
  *(_BYTE *)v23 = v56;
  *(_QWORD *)(v23 + 8) = v24;
  sub_2415FCA64(a1, a9);
  v25 = (_QWORD *)(a9 + v22[9]);
  *v25 = a2;
  v25[1] = a3;
  v26 = a9 + v22[10];
  v27 = sub_2416B9B50();
  v28 = *(_QWORD *)(v27 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v26, a4, v27);
  sub_2415BEF64(a5, a9 + v22[11], (uint64_t (*)(_QWORD))sub_2415A0A74);
  v29 = sub_2415BEF64(a6, a9 + v22[12], (uint64_t (*)(_QWORD))sub_2415A0A74);
  *(_BYTE *)(a9 + v22[13]) = v50;
  v30 = (_QWORD *)(a9 + v22[14]);
  *v30 = v52;
  v30[1] = a10;
  v31 = (_QWORD *)(a9 + v22[15]);
  v32 = v49;
  *v31 = v48;
  v31[1] = v32;
  v33 = *(_QWORD *)(v28 + 64);
  MEMORY[0x24BDAC7A8](v29);
  v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0;
  v52 = (char *)&v46 - v34;
  sub_2415A0A74(0);
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v46 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604]();
  sub_2415A6154(v46, (uint64_t (*)(_QWORD))sub_2415A0A74);
  sub_2415A6154(v47, (uint64_t (*)(_QWORD))sub_2415A0A74);
  v38 = sub_2415CCAFC(a1, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x24BDAC7A8](v38);
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
  v39((char *)&v46 - v34, v51, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v37, 1, v27) == 1)
  {
    v40 = v52;
    v39(v52, (uint64_t)&v46 - v34, v27);
    sub_2415A6154((uint64_t)v37, (uint64_t (*)(_QWORD))sub_2415A0A74);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))((char *)&v46 - v34, v27);
    v40 = v52;
    v39(v52, (uint64_t)v37, v27);
  }
  v41 = a9 + v22[17];
  sub_24159D6B0(0, &qword_25713BC48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)(v41 + *(int *)(v42 + 28)) = 0;
  result = ((uint64_t (*)(uint64_t, char *, uint64_t))v39)(v41, v40, v27);
  v44 = (_QWORD *)(a9 + v22[16]);
  v45 = v54;
  *v44 = v53;
  v44[1] = v45;
  return result;
}

uint64_t sub_2415F8678@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, char *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;

  v51 = a4;
  v52 = a8;
  v50 = a7;
  v46 = a6;
  v47 = a5;
  v48 = a13;
  v49 = a14;
  v53 = a11;
  v54 = a12;
  sub_2415FCB3C(0);
  v22 = v21;
  v23 = a9 + v21[18];
  v55 = 0;
  sub_2416BAD08();
  v24 = v57;
  *(_BYTE *)v23 = v56;
  *(_QWORD *)(v23 + 8) = v24;
  sub_2415FCA64(a1, a9);
  v25 = (_QWORD *)(a9 + v22[9]);
  *v25 = a2;
  v25[1] = a3;
  v26 = a9 + v22[10];
  v27 = sub_2416B9B50();
  v28 = *(_QWORD *)(v27 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v26, a4, v27);
  sub_2415BEF64(a5, a9 + v22[11], (uint64_t (*)(_QWORD))sub_2415A0A74);
  v29 = sub_2415BEF64(a6, a9 + v22[12], (uint64_t (*)(_QWORD))sub_2415A0A74);
  *(_BYTE *)(a9 + v22[13]) = v50;
  v30 = (_QWORD *)(a9 + v22[14]);
  *v30 = v52;
  v30[1] = a10;
  v31 = (_QWORD *)(a9 + v22[15]);
  v32 = v49;
  *v31 = v48;
  v31[1] = v32;
  v33 = *(_QWORD *)(v28 + 64);
  MEMORY[0x24BDAC7A8](v29);
  v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0;
  v52 = (char *)&v46 - v34;
  sub_2415A0A74(0);
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v46 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604]();
  sub_2415A6154(v46, (uint64_t (*)(_QWORD))sub_2415A0A74);
  sub_2415A6154(v47, (uint64_t (*)(_QWORD))sub_2415A0A74);
  v38 = sub_2415CCAFC(a1, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x24BDAC7A8](v38);
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
  v39((char *)&v46 - v34, v51, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v37, 1, v27) == 1)
  {
    v40 = v52;
    v39(v52, (uint64_t)&v46 - v34, v27);
    sub_2415A6154((uint64_t)v37, (uint64_t (*)(_QWORD))sub_2415A0A74);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))((char *)&v46 - v34, v27);
    v40 = v52;
    v39(v52, (uint64_t)v37, v27);
  }
  v41 = a9 + v22[17];
  sub_24159D6B0(0, &qword_25713BC48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)(v41 + *(int *)(v42 + 28)) = 0;
  result = ((uint64_t (*)(uint64_t, char *, uint64_t))v39)(v41, v40, v27);
  v44 = (_QWORD *)(a9 + v22[16]);
  v45 = v54;
  *v44 = v53;
  v44[1] = v45;
  return result;
}

uint64_t sub_2415F897C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (qword_2571394D8 != -1)
    swift_once();
  v5 = qword_2571477C0;
  v4 = *(_QWORD *)algn_2571477C8;
  v6 = qword_257139458;
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  v8 = qword_25713BB08;
  v7 = qword_25713BB10[0];
  v9 = *a1;
  v10 = a1[1];
  *a2 = v5;
  a2[1] = v4;
  a2[2] = v8;
  a2[3] = v7;
  a2[4] = v9;
  a2[5] = v10;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_2415F8A34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  char v7;

  type metadata accessor for MedicalIDEditPregnancyModalView();
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  if (v7 == 1)
  {
    sub_2415BEF64(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDPregnancyViewModel);
    v4 = type metadata accessor for MedicalIDPregnancyStatusLabelView();
    sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    sub_2416BAD2C();
    *(_BYTE *)(a2 + *(int *)(v4 + 20)) = 1;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 0, 1, v4);
  }
  else
  {
    v6 = type metadata accessor for MedicalIDPregnancyStatusLabelView();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, 1, 1, v6);
  }
}

uint64_t sub_2415F8B64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t result;
  _QWORD v27[3];
  char v28;
  uint64_t v29;
  unsigned __int8 v30;

  v2 = type metadata accessor for MedicalIDEditPregnancyModalView();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1 + *(int *)(v3 + 20);
  v7 = *(_BYTE *)v6;
  v8 = *(_QWORD *)(v6 + 8);
  v28 = v7;
  v29 = v8;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v9 = v30;
  sub_2415A0A74(0);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = (char *)v27 - v12;
  if (v9 != 1)
  {
    v22 = sub_2416B9B50();
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))((char *)v27 - v12, 1, 1, v22);
    MEMORY[0x24BDAC7A8](v23);
    v24 = (char *)v27 - v12;
LABEL_8:
    sub_2415BEF64((uint64_t)v13, (uint64_t)v24, (uint64_t (*)(_QWORD))sub_2415A0A74);
    sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    sub_2416BAD20();
    return sub_2415A6154((uint64_t)v13, (uint64_t (*)(_QWORD))sub_2415A0A74);
  }
  v14 = a1 + *(int *)(type metadata accessor for MedicalIDPregnancyViewModel() + 20);
  v15 = type metadata accessor for MedicalIDData();
  v27[2] = v27;
  v16 = MEMORY[0x24BDAC7A8](v14 + *(int *)(v15 + 56));
  v17 = (char *)v27 - v12;
  sub_2415BEF64(v16, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_2415A0A74);
  sub_2415BEF64(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPregnancyModalView);
  v18 = sub_2416B9B50();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
  {
    sub_2415A6154((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPregnancyModalView);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v13, v17, v18);
    goto LABEL_7;
  }
  v27[1] = v27;
  v20 = *(void **)&v5[*(int *)(v2 + 44)];
  if (v20)
  {
    v21 = v20;
    MedicalIDPregnancyViewModel.defaultPregnancyDueDate(with:)(v21, (uint64_t)v13);

    sub_2415A6154((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for MedicalIDEditPregnancyModalView);
    sub_2415A6154((uint64_t)v17, (uint64_t (*)(_QWORD))sub_2415A0A74);
LABEL_7:
    v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v13, 0, 1, v18);
    MEMORY[0x24BDAC7A8](v25);
    v24 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    goto LABEL_8;
  }
  sub_2415CA770();
  sub_24159CE88((unint64_t *)&qword_25713A4D8, (uint64_t (*)(uint64_t))sub_2415CA770, (uint64_t)&protocol conformance descriptor for MIUIDisplayConfiguration);
  result = sub_2416BA264();
  __break(1u);
  return result;
}

uint64_t sub_2415F8EAC(uint64_t a1)
{
  return sub_2415F8F04(a1, 0x6572502074696445, 0xEE0079636E616E67, &qword_25713BAF8, &qword_25713BB00);
}

uint64_t sub_2415F8EDC(uint64_t a1)
{
  return sub_2415F8F04(a1, 0xD000000000000029, 0x80000002416C4940, &qword_25713BB08, qword_25713BB10);
}

uint64_t sub_2415F8F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t result;
  uint64_t v12;

  v7 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v7);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v8 = (void *)qword_25713A038;
  v9 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v9);
  v10 = v8;
  sub_2416B9C04();
  result = sub_2416BB134();
  *a4 = result;
  *a5 = v12;
  return result;
}

_QWORD *sub_2415F9048(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  uint64_t v100;
  void *v101;
  id v102;
  int *v104;
  char *v105;
  void *v106;
  char *__dst;
  _QWORD *v108;
  _QWORD *v109;
  void *v110;
  uint64_t v111;
  int *v112;
  uint64_t v114;
  unsigned int (*v115)(char *, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    v24 = (_QWORD *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v114 = a2[1];
    *a1 = *a2;
    a1[1] = v114;
    v104 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
    v6 = v104[5];
    v108 = a2;
    v109 = a1;
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (char *)a2 + v6;
    v9 = *(_QWORD *)((char *)a2 + v6 + 8);
    *v7 = *(_QWORD *)((char *)a2 + v6);
    v7[1] = v9;
    v11 = *(_QWORD *)((char *)a2 + v6 + 16);
    v10 = *(_QWORD *)((char *)a2 + v6 + 24);
    v7[2] = v11;
    v7[3] = v10;
    v12 = *((_QWORD *)v8 + 5);
    v7[4] = *((_QWORD *)v8 + 4);
    v7[5] = v12;
    v13 = *((_QWORD *)v8 + 7);
    v7[6] = *((_QWORD *)v8 + 6);
    v7[7] = v13;
    v14 = *((_QWORD *)v8 + 9);
    v7[8] = *((_QWORD *)v8 + 8);
    v7[9] = v14;
    v15 = *((_QWORD *)v8 + 11);
    v7[10] = *((_QWORD *)v8 + 10);
    v7[11] = v15;
    v106 = (void *)*((_QWORD *)v8 + 12);
    v110 = (void *)*((_QWORD *)v8 + 13);
    v7[12] = v106;
    v7[13] = v110;
    v112 = (int *)type metadata accessor for MedicalIDData();
    v16 = v112[13];
    __dst = (char *)v7 + v16;
    v105 = &v8[v16];
    v17 = sub_2416B9B50();
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = v106;
    v21 = v110;
    v115 = v19;
    v111 = v18;
    if (v19(v105, 1, v17))
    {
      sub_2415A0A74(0);
      memcpy(__dst, v105, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v105, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    v25 = v112[14];
    v26 = (char *)v7 + v25;
    v27 = &v8[v25];
    if (v19(&v8[v25], 1, v17))
    {
      v28 = v17;
      sub_2415A0A74(0);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v26, v27, v17);
      v28 = v17;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v26, 0, 1, v17);
    }
    v30 = v112[15];
    v31 = (_QWORD *)((char *)v7 + v30);
    v32 = &v8[v30];
    v33 = *((_QWORD *)v32 + 1);
    *v31 = *(_QWORD *)v32;
    v31[1] = v33;
    v34 = v112[16];
    v35 = (_QWORD *)((char *)v7 + v34);
    v36 = &v8[v34];
    v37 = *((_QWORD *)v36 + 1);
    *v35 = *(_QWORD *)v36;
    v35[1] = v37;
    *((_BYTE *)v7 + v112[17]) = v8[v112[17]];
    *((_BYTE *)v7 + v112[18]) = v8[v112[18]];
    v38 = v112[19];
    v39 = (char *)v7 + v38;
    v40 = (uint64_t *)&v8[v38];
    v41 = *(_QWORD *)&v8[v38 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v41 >> 60 == 15)
    {
      *(_OWORD *)v39 = *(_OWORD *)v40;
    }
    else
    {
      v42 = *v40;
      sub_2415A0A90(*v40, v41);
      *(_QWORD *)v39 = v42;
      *((_QWORD *)v39 + 1) = v41;
    }
    v43 = v112[20];
    v44 = (char *)v7 + v43;
    v45 = &v8[v43];
    v46 = sub_2416B9A18();
    v47 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    v24 = v109;
    v49 = v112[21];
    v50 = *(void **)&v8[v49];
    *(_QWORD *)((char *)v7 + v49) = v50;
    v51 = v112[22];
    v52 = (char *)v7 + v51;
    v53 = &v8[v51];
    v54 = v50;
    if (v115(v53, 1, v28))
    {
      sub_2415A0A74(0);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v52, v53, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v52, 0, 1, v28);
    }
    v56 = v28;
    v57 = v104[6];
    v58 = (char *)v109 + v57;
    v59 = (char *)v108 + v57;
    v60 = sub_2416B9C70();
    v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
    v61(v58, v59, v60);
    v62 = v104[7];
    v63 = (char *)v109 + v62;
    v64 = (char *)v108 + v62;
    v65 = sub_2416B9C10();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v64, v65);
    *(_QWORD *)((char *)v109 + v104[8]) = *(_QWORD *)((char *)v108 + v104[8]);
    v66 = v104[9];
    v67 = (char *)v109 + v66;
    v68 = (char *)v108 + v66;
    swift_retain();
    if (v115(v68, 1, v56))
    {
      sub_2415A0A74(0);
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      v70 = v111;
    }
    else
    {
      v70 = v111;
      (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v67, v68, v56);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v67, 0, 1, v56);
    }
    v71 = a3[5];
    v72 = a3[6];
    v73 = (char *)v109 + v71;
    v74 = (char *)v108 + v71;
    *v73 = *v74;
    *((_QWORD *)v73 + 1) = *((_QWORD *)v74 + 1);
    v75 = (char *)v109 + v72;
    v76 = (char *)v108 + v72;
    swift_retain();
    if (v115(v76, 1, v56))
    {
      sub_2415A0A74(0);
      memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v75, v76, v56);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v75, 0, 1, v56);
    }
    sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    *(_QWORD *)&v75[*(int *)(v78 + 28)] = *(_QWORD *)&v76[*(int *)(v78 + 28)];
    v79 = a3[7];
    v80 = (_QWORD *)((char *)v109 + v79);
    v81 = (_QWORD *)((char *)v108 + v79);
    v82 = *(_QWORD *)((char *)v108 + v79 + 8);
    swift_retain();
    if (v82)
    {
      *v80 = *v81;
      v80[1] = v82;
      v83 = v81[3];
      v80[2] = v81[2];
      v80[3] = v83;
      v84 = v81[5];
      v80[4] = v81[4];
      v80[5] = v84;
      v80[6] = v81[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v85 = *((_OWORD *)v81 + 1);
      *(_OWORD *)v80 = *(_OWORD *)v81;
      *((_OWORD *)v80 + 1) = v85;
      *((_OWORD *)v80 + 2) = *((_OWORD *)v81 + 2);
      v80[6] = v81[6];
    }
    v80[7] = v81[7];
    v86 = a3[8];
    v87 = a3[9];
    v88 = (char *)v109 + v86;
    v89 = (char *)v108 + v86;
    v90 = *(_QWORD *)v89;
    LOBYTE(v89) = v89[8];
    *(_QWORD *)v88 = v90;
    v88[8] = (char)v89;
    v91 = (char *)v109 + v87;
    v92 = (char *)v108 + v87;
    sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    swift_retain();
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v61(v91, v92, v60);
    }
    else
    {
      *(_QWORD *)v91 = *(_QWORD *)v92;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v93 = a3[10];
    v94 = (_QWORD *)((char *)v109 + v93);
    v95 = (_QWORD *)((char *)v108 + v93);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v96 = sub_2416BA06C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v94, v95, v96);
    }
    else
    {
      *v94 = *v95;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v97 = a3[11];
    v98 = (_QWORD *)((char *)v109 + v97);
    v99 = (char *)v108 + v97;
    v101 = *(void **)v99;
    v100 = *((_QWORD *)v99 + 1);
    *v98 = v101;
    v98[1] = v100;
    v102 = v101;
  }
  return v24;
}

void sub_2415F97B4(uint64_t a1, int *a2)
{
  int *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  swift_bridgeObjectRelease();
  v3 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v4 = a1 + v3[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = v4 + v5[13];
  v7 = sub_2416B9B50();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v10 = v4 + v5[14];
  if (!v9(v10, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)(v4 + v5[19]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_2415A0DAC(*v11, v12);
  v13 = v4 + v5[20];
  v14 = sub_2416B9A18();
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);

  v16 = v4 + v5[22];
  if (!v9(v16, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v16, v7);
  v17 = a1 + v3[6];
  v18 = sub_2416B9C70();
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(v17, v18);
  v20 = a1 + v3[7];
  v21 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  swift_release();
  v22 = a1 + v3[9];
  if (!v9(v22, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v7);
  swift_release();
  v23 = a1 + a2[6];
  if (!v9(v23, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v23, v7);
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  swift_release();
  if (*(_QWORD *)(a1 + a2[7] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  v24 = a1 + a2[9];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v19(v24, v18);
  else
    swift_release();
  v25 = a1 + a2[10];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v26 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  }
  else
  {
    swift_release();
  }

}

_QWORD *sub_2415F9B7C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  uint64_t v100;
  void *v101;
  id v102;
  int *v104;
  void *v105;
  char *__dst;
  _QWORD *v107;
  _QWORD *v108;
  void *v110;
  uint64_t v111;
  int *v112;
  unsigned int (*v113)(char *, uint64_t, uint64_t);

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v104 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v6 = v104[5];
  v107 = a2;
  v108 = a1;
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (char *)a2 + v6;
  v9 = *(_QWORD *)((char *)a2 + v6 + 8);
  *v7 = *(_QWORD *)((char *)a2 + v6);
  v7[1] = v9;
  v11 = *(_QWORD *)((char *)a2 + v6 + 16);
  v10 = *(_QWORD *)((char *)a2 + v6 + 24);
  v7[2] = v11;
  v7[3] = v10;
  v12 = *((_QWORD *)v8 + 5);
  v7[4] = *((_QWORD *)v8 + 4);
  v7[5] = v12;
  v13 = *((_QWORD *)v8 + 7);
  v7[6] = *((_QWORD *)v8 + 6);
  v7[7] = v13;
  v14 = *((_QWORD *)v8 + 9);
  v7[8] = *((_QWORD *)v8 + 8);
  v7[9] = v14;
  v15 = *((_QWORD *)v8 + 11);
  v7[10] = *((_QWORD *)v8 + 10);
  v7[11] = v15;
  v105 = (void *)*((_QWORD *)v8 + 12);
  v110 = (void *)*((_QWORD *)v8 + 13);
  v7[12] = v105;
  v7[13] = v110;
  v112 = (int *)type metadata accessor for MedicalIDData();
  v16 = v112[13];
  __dst = (char *)v7 + v16;
  v17 = &v8[v16];
  v18 = sub_2416B9B50();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v105;
  v22 = v110;
  v113 = v20;
  v111 = v19;
  if (v20(v17, 1, v18))
  {
    sub_2415A0A74(0);
    memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(__dst, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
  }
  v24 = v112[14];
  v25 = (char *)v7 + v24;
  v26 = &v8[v24];
  if (v20(&v8[v24], 1, v18))
  {
    v27 = v18;
    sub_2415A0A74(0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
    v27 = v18;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
  }
  v29 = v112[15];
  v30 = (_QWORD *)((char *)v7 + v29);
  v31 = &v8[v29];
  v32 = *((_QWORD *)v31 + 1);
  *v30 = *(_QWORD *)v31;
  v30[1] = v32;
  v33 = v112[16];
  v34 = (_QWORD *)((char *)v7 + v33);
  v35 = &v8[v33];
  v36 = *((_QWORD *)v35 + 1);
  *v34 = *(_QWORD *)v35;
  v34[1] = v36;
  *((_BYTE *)v7 + v112[17]) = v8[v112[17]];
  *((_BYTE *)v7 + v112[18]) = v8[v112[18]];
  v37 = v112[19];
  v38 = (char *)v7 + v37;
  v39 = (uint64_t *)&v8[v37];
  v40 = *(_QWORD *)&v8[v37 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v40 >> 60 == 15)
  {
    *(_OWORD *)v38 = *(_OWORD *)v39;
  }
  else
  {
    v41 = *v39;
    sub_2415A0A90(*v39, v40);
    *(_QWORD *)v38 = v41;
    *((_QWORD *)v38 + 1) = v40;
  }
  v42 = a3;
  v43 = v112[20];
  v44 = (char *)v7 + v43;
  v45 = &v8[v43];
  v46 = sub_2416B9A18();
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  v49 = v112[21];
  v50 = *(void **)&v8[v49];
  *(_QWORD *)((char *)v7 + v49) = v50;
  v51 = v112[22];
  v52 = (char *)v7 + v51;
  v53 = &v8[v51];
  v54 = v50;
  if (v113(v53, 1, v27))
  {
    sub_2415A0A74(0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v52, v53, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v52, 0, 1, v27);
  }
  v56 = v27;
  v57 = v104[6];
  v58 = (char *)v108 + v57;
  v59 = (char *)v107 + v57;
  v60 = sub_2416B9C70();
  v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
  v61(v58, v59, v60);
  v62 = v104[7];
  v63 = (char *)v108 + v62;
  v64 = (char *)v107 + v62;
  v65 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v64, v65);
  *(_QWORD *)((char *)v108 + v104[8]) = *(_QWORD *)((char *)v107 + v104[8]);
  v66 = v104[9];
  v67 = (char *)v108 + v66;
  v68 = (char *)v107 + v66;
  swift_retain();
  if (v113(v68, 1, v56))
  {
    sub_2415A0A74(0);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    v70 = v111;
  }
  else
  {
    v70 = v111;
    (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v67, v68, v56);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v67, 0, 1, v56);
  }
  v71 = a3[5];
  v72 = a3[6];
  v73 = (char *)v108 + v71;
  v74 = (char *)v107 + v71;
  *v73 = *v74;
  *((_QWORD *)v73 + 1) = *((_QWORD *)v74 + 1);
  v75 = (char *)v108 + v72;
  v76 = (char *)v107 + v72;
  swift_retain();
  if (v113(v76, 1, v56))
  {
    sub_2415A0A74(0);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v75, v76, v56);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v75, 0, 1, v56);
  }
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v75[*(int *)(v78 + 28)] = *(_QWORD *)&v76[*(int *)(v78 + 28)];
  v79 = a3[7];
  v80 = (_QWORD *)((char *)v108 + v79);
  v81 = (_QWORD *)((char *)v107 + v79);
  v82 = *(_QWORD *)((char *)v107 + v79 + 8);
  swift_retain();
  if (v82)
  {
    *v80 = *v81;
    v80[1] = v82;
    v83 = v81[3];
    v80[2] = v81[2];
    v80[3] = v83;
    v84 = v81[5];
    v80[4] = v81[4];
    v80[5] = v84;
    v80[6] = v81[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42 = a3;
    swift_bridgeObjectRetain();
  }
  else
  {
    v85 = *((_OWORD *)v81 + 1);
    *(_OWORD *)v80 = *(_OWORD *)v81;
    *((_OWORD *)v80 + 1) = v85;
    *((_OWORD *)v80 + 2) = *((_OWORD *)v81 + 2);
    v80[6] = v81[6];
  }
  v80[7] = v81[7];
  v86 = v42[8];
  v87 = v42[9];
  v88 = (char *)v108 + v86;
  v89 = (char *)v107 + v86;
  v90 = *(_QWORD *)v89;
  LOBYTE(v89) = v89[8];
  *(_QWORD *)v88 = v90;
  v88[8] = (char)v89;
  v91 = (char *)v108 + v87;
  v92 = (char *)v107 + v87;
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_retain();
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v61(v91, v92, v60);
  }
  else
  {
    *(_QWORD *)v91 = *(_QWORD *)v92;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v93 = v42[10];
  v94 = (_QWORD *)((char *)v108 + v93);
  v95 = (_QWORD *)((char *)v107 + v93);
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v96 = sub_2416BA06C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v94, v95, v96);
  }
  else
  {
    *v94 = *v95;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v97 = v42[11];
  v98 = (_QWORD *)((char *)v108 + v97);
  v99 = (char *)v107 + v97;
  v101 = *(void **)v99;
  v100 = *((_QWORD *)v99 + 1);
  *v98 = v101;
  v98[1] = v100;
  v102 = v101;
  return v108;
}

char *sub_2415FA2BC(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  int v49;
  int v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  int v61;
  _QWORD *v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t (*v107)(uint64_t);
  uint64_t (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t (*v112)(uint64_t);
  uint64_t (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  void *v118;
  void *v119;
  id v120;
  int *v122;
  char *v124;
  char *v125;
  uint64_t (*v126)(char *, uint64_t, uint64_t);
  uint64_t v127;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v122 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v5 = v122[5];
  v6 = &a1[v5];
  v125 = a2;
  v7 = &a2[v5];
  *(_QWORD *)v6 = *(_QWORD *)&a2[v5];
  *((_QWORD *)v6 + 1) = *(_QWORD *)&a2[v5 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 2) = *((_QWORD *)v7 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 3) = *((_QWORD *)v7 + 3);
  *((_QWORD *)v6 + 4) = *((_QWORD *)v7 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 5) = *((_QWORD *)v7 + 5);
  *((_QWORD *)v6 + 6) = *((_QWORD *)v7 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 7) = *((_QWORD *)v7 + 7);
  *((_QWORD *)v6 + 8) = *((_QWORD *)v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 9) = *((_QWORD *)v7 + 9);
  *((_QWORD *)v6 + 10) = *((_QWORD *)v7 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 11) = *((_QWORD *)v7 + 11);
  v8 = (void *)*((_QWORD *)v6 + 12);
  v9 = (void *)*((_QWORD *)v7 + 12);
  *((_QWORD *)v6 + 12) = v9;
  v10 = v9;

  v11 = (void *)*((_QWORD *)v6 + 13);
  v12 = (void *)*((_QWORD *)v7 + 13);
  *((_QWORD *)v6 + 13) = v12;
  v13 = v12;

  v14 = (int *)type metadata accessor for MedicalIDData();
  v15 = v14[13];
  v16 = &v6[v15];
  v17 = &v7[v15];
  v18 = sub_2416B9B50();
  v127 = *(_QWORD *)(v18 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v127 + 48);
  v20 = v19(v16, 1, v18);
  v126 = v19;
  v21 = v19(v17, 1, v18);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v16, v18);
LABEL_6:
    sub_2415A0A74(0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 24))(v16, v17, v18);
LABEL_7:
  v23 = v14[14];
  v24 = &v6[v23];
  v25 = &v7[v23];
  v26 = v19(&v6[v23], 1, v18);
  v27 = v19(v25, 1, v18);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v24, v25, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v24, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v24, v18);
LABEL_12:
    sub_2415A0A74(0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 24))(v24, v25, v18);
LABEL_13:
  v29 = v14[15];
  v30 = &v6[v29];
  v31 = &v7[v29];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = v14[16];
  v33 = &v6[v32];
  v34 = &v7[v32];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6[v14[17]] = v7[v14[17]];
  v6[v14[18]] = v7[v14[18]];
  v35 = v14[19];
  v36 = (uint64_t *)&v6[v35];
  v37 = (uint64_t *)&v7[v35];
  v38 = *(_QWORD *)&v7[v35 + 8];
  v124 = a1;
  if (*(_QWORD *)&v6[v35 + 8] >> 60 == 15)
  {
    if (v38 >> 60 != 15)
    {
      v39 = *v37;
      sub_2415A0A90(*v37, v38);
      *v36 = v39;
      v36[1] = v38;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v38 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v36);
LABEL_18:
    *(_OWORD *)v36 = *(_OWORD *)v37;
    goto LABEL_20;
  }
  v40 = *v37;
  sub_2415A0A90(*v37, v38);
  v41 = *v36;
  v42 = v36[1];
  *v36 = v40;
  v36[1] = v38;
  sub_2415A0DAC(v41, v42);
LABEL_20:
  v43 = v14[20];
  v44 = &v6[v43];
  v45 = &v7[v43];
  v46 = sub_2416B9A18();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  v49 = v48(v44, 1, v46);
  v50 = v48(v45, 1, v46);
  if (v49)
  {
    v51 = v126;
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v51 = v126;
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v44, v46);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v47 + 24))(v44, v45, v46);
LABEL_26:
  v53 = v14[21];
  v54 = *(void **)&v6[v53];
  v55 = *(void **)&v7[v53];
  *(_QWORD *)&v6[v53] = v55;
  v56 = v55;

  v57 = v14[22];
  v58 = &v6[v57];
  v59 = &v7[v57];
  v60 = v51(&v6[v57], 1, v18);
  v61 = v51(v59, 1, v18);
  v62 = v125;
  if (v60)
  {
    v63 = a3;
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v58, v59, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v58, 0, 1, v18);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  v63 = a3;
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v58, v18);
LABEL_31:
    sub_2415A0A74(0);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 24))(v58, v59, v18);
LABEL_32:
  v65 = v122[6];
  v66 = &v124[v65];
  v67 = &v125[v65];
  v68 = sub_2416B9C70();
  v69 = *(_QWORD *)(v68 - 8);
  (*(void (**)(char *, char *, uint64_t))(v69 + 24))(v66, v67, v68);
  v70 = v122[7];
  v71 = &v124[v70];
  v72 = &v125[v70];
  v73 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 24))(v71, v72, v73);
  *(_QWORD *)&v124[v122[8]] = *(_QWORD *)&v125[v122[8]];
  swift_retain();
  swift_release();
  v74 = v122[9];
  v75 = &v124[v74];
  v76 = &v125[v74];
  LODWORD(v72) = v51(&v124[v74], 1, v18);
  v77 = v51(v76, 1, v18);
  if ((_DWORD)v72)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v75, v76, v18);
      v51 = v126;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v75, 0, 1, v18);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v75, v18);
LABEL_37:
    sub_2415A0A74(0);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 24))(v75, v76, v18);
LABEL_38:
  v79 = v63[5];
  v80 = &v124[v79];
  v81 = &v125[v79];
  *v80 = *v81;
  *((_QWORD *)v80 + 1) = *((_QWORD *)v81 + 1);
  swift_retain();
  swift_release();
  v82 = v63[6];
  v83 = &v124[v82];
  v84 = &v125[v82];
  v85 = v51(&v124[v82], 1, v18);
  v86 = v51(v84, 1, v18);
  if (v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v83, v84, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v83, 0, 1, v18);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v86)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v83, v18);
LABEL_43:
    sub_2415A0A74(0);
    memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 24))(v83, v84, v18);
LABEL_44:
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v83[*(int *)(v88 + 28)] = *(_QWORD *)&v84[*(int *)(v88 + 28)];
  swift_retain();
  swift_release();
  v89 = v63[7];
  v90 = &v124[v89];
  v91 = &v125[v89];
  v92 = *(_QWORD *)&v124[v89 + 8];
  v93 = *(_QWORD *)&v125[v89 + 8];
  if (v92)
  {
    if (v93)
    {
      *(_QWORD *)v90 = *(_QWORD *)v91;
      *((_QWORD *)v90 + 1) = *((_QWORD *)v91 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v90 + 2) = *((_QWORD *)v91 + 2);
      *((_QWORD *)v90 + 3) = *((_QWORD *)v91 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v90 + 4) = *((_QWORD *)v91 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v90 + 5) = *((_QWORD *)v91 + 5);
      *((_QWORD *)v90 + 6) = *((_QWORD *)v91 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2415CCAC8((uint64_t)v90);
      v95 = *((_OWORD *)v91 + 1);
      v94 = *((_OWORD *)v91 + 2);
      v96 = *(_OWORD *)v91;
      *((_QWORD *)v90 + 6) = *((_QWORD *)v91 + 6);
      *((_OWORD *)v90 + 1) = v95;
      *((_OWORD *)v90 + 2) = v94;
      *(_OWORD *)v90 = v96;
    }
  }
  else if (v93)
  {
    *(_QWORD *)v90 = *(_QWORD *)v91;
    *((_QWORD *)v90 + 1) = *((_QWORD *)v91 + 1);
    *((_QWORD *)v90 + 2) = *((_QWORD *)v91 + 2);
    *((_QWORD *)v90 + 3) = *((_QWORD *)v91 + 3);
    *((_QWORD *)v90 + 4) = *((_QWORD *)v91 + 4);
    *((_QWORD *)v90 + 5) = *((_QWORD *)v91 + 5);
    *((_QWORD *)v90 + 6) = *((_QWORD *)v91 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v97 = *(_OWORD *)v91;
    v98 = *((_OWORD *)v91 + 1);
    v99 = *((_OWORD *)v91 + 2);
    *((_QWORD *)v90 + 6) = *((_QWORD *)v91 + 6);
    *((_OWORD *)v90 + 1) = v98;
    *((_OWORD *)v90 + 2) = v99;
    *(_OWORD *)v90 = v97;
  }
  *((_QWORD *)v90 + 7) = *((_QWORD *)v91 + 7);
  swift_retain();
  swift_release();
  v100 = v63[8];
  v101 = &v124[v100];
  v102 = &v125[v100];
  v103 = *(_QWORD *)v102;
  LOBYTE(v102) = v102[8];
  *(_QWORD *)v101 = v103;
  v101[8] = (char)v102;
  swift_retain();
  swift_release();
  if (v124 != v125)
  {
    v104 = v63[9];
    v105 = &v124[v104];
    v106 = &v125[v104];
    v107 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0];
    v108 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&v124[v104], &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, &qword_25713A1C0, v107, v108);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v105, v106, v68);
    }
    else
    {
      *(_QWORD *)v105 = *(_QWORD *)v106;
      swift_retain();
    }
    v62 = v125;
    swift_storeEnumTagMultiPayload();
    v109 = v63[10];
    v110 = &v124[v109];
    v111 = &v125[v109];
    v112 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038];
    v113 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&v124[v109], (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, v112, v113);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v114 = sub_2416BA06C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 16))(v110, v111, v114);
    }
    else
    {
      *(_QWORD *)v110 = *(_QWORD *)v111;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v115 = v63[11];
  v116 = &v124[v115];
  v117 = (uint64_t)v62 + v115;
  v118 = *(void **)&v124[v115];
  v119 = *(void **)((char *)v62 + v115);
  *(_QWORD *)v116 = v119;
  v120 = v119;

  *((_QWORD *)v116 + 1) = *(_QWORD *)(v117 + 8);
  return v124;
}

_OWORD *sub_2415FADD4(_OWORD *a1, char *a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v67;
  uint64_t v68;
  unsigned int (*v70)(char *, uint64_t, uint64_t);

  *a1 = *(_OWORD *)a2;
  v67 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v5 = v67[5];
  v6 = (char *)a1 + v5;
  v7 = &a2[v5];
  *(_OWORD *)v6 = *(_OWORD *)&a2[v5];
  *((_QWORD *)v6 + 2) = *(_QWORD *)&a2[v5 + 16];
  *(_OWORD *)(v6 + 24) = *(_OWORD *)&a2[v5 + 24];
  *(_OWORD *)(v6 + 40) = *(_OWORD *)&a2[v5 + 40];
  *(_OWORD *)(v6 + 56) = *(_OWORD *)&a2[v5 + 56];
  *(_OWORD *)(v6 + 72) = *(_OWORD *)&a2[v5 + 72];
  *((_QWORD *)v6 + 11) = *(_QWORD *)&a2[v5 + 88];
  *((_OWORD *)v6 + 6) = *(_OWORD *)&a2[v5 + 96];
  v8 = (int *)type metadata accessor for MedicalIDData();
  v9 = v8[13];
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = sub_2416B9B50();
  v13 = *(_QWORD *)(v12 - 8);
  v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v70(v11, 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = v8[14];
  v16 = &v6[v15];
  v17 = &v7[v15];
  v68 = v13;
  if (v70(&v7[v15], 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v17, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  *(_OWORD *)&v6[v8[15]] = *(_OWORD *)&v7[v8[15]];
  *(_OWORD *)&v6[v8[16]] = *(_OWORD *)&v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  v6[v8[18]] = v7[v8[18]];
  *(_OWORD *)&v6[v8[19]] = *(_OWORD *)&v7[v8[19]];
  v19 = v8[20];
  v20 = &v6[v19];
  v21 = &v7[v19];
  v22 = sub_2416B9A18();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *(_QWORD *)&v6[v8[21]] = *(_QWORD *)&v7[v8[21]];
  v25 = v8[22];
  v26 = &v6[v25];
  v27 = &v7[v25];
  if (v70(&v7[v25], 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v26, v27, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v26, 0, 1, v12);
  }
  v29 = v67[6];
  v30 = (char *)a1 + v29;
  v31 = &a2[v29];
  v32 = sub_2416B9C70();
  v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
  v33(v30, v31, v32);
  v34 = v67[7];
  v35 = (char *)a1 + v34;
  v36 = &a2[v34];
  v37 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  *(_QWORD *)((char *)a1 + v67[8]) = *(_QWORD *)&a2[v67[8]];
  v38 = v67[9];
  v39 = (char *)a1 + v38;
  v40 = &a2[v38];
  if (v70(&a2[v38], 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v39, v40, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v39, 0, 1, v12);
  }
  v42 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)&a2[a3[5]];
  v43 = (char *)a1 + v42;
  v44 = &a2[v42];
  if (v70(&a2[v42], 1, v12))
  {
    sub_2415A0A74(0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v43, v44, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v43, 0, 1, v12);
  }
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v43[*(int *)(v46 + 28)] = *(_QWORD *)&v44[*(int *)(v46 + 28)];
  v47 = a3[7];
  v48 = a3[8];
  v49 = (_OWORD *)((char *)a1 + v47);
  v50 = &a2[v47];
  v51 = *((_OWORD *)v50 + 3);
  v49[2] = *((_OWORD *)v50 + 2);
  v49[3] = v51;
  v52 = *((_OWORD *)v50 + 1);
  *v49 = *(_OWORD *)v50;
  v49[1] = v52;
  v53 = (char *)a1 + v48;
  v54 = &a2[v48];
  v53[8] = v54[8];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  v55 = a3[9];
  v56 = (char *)a1 + v55;
  v57 = &a2[v55];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v59 = v58;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v33(v56, v57, v32);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  v60 = a3[10];
  v61 = (char *)a1 + v60;
  v62 = &a2[v60];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v64 = v63;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v65 = sub_2416BA06C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v61, v62, v65);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
  }
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)&a2[a3[11]];
  return a1;
}

char *sub_2415FB3A0(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t (*v105)(uint64_t);
  uint64_t (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t (*v112)(uint64_t);
  uint64_t (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  _QWORD *v119;
  void *v120;
  int *v122;
  uint64_t v123;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t (*v128)(char *, uint64_t, uint64_t);

  v5 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  v122 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v6 = v122[5];
  v7 = &a1[v6];
  v127 = a2;
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  *(_QWORD *)v7 = *(_QWORD *)&a2[v6];
  *((_QWORD *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
  swift_bridgeObjectRelease();
  v10 = *((_QWORD *)v8 + 4);
  *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
  *((_QWORD *)v7 + 4) = v10;
  swift_bridgeObjectRelease();
  v11 = *((_QWORD *)v8 + 6);
  *((_QWORD *)v7 + 5) = *((_QWORD *)v8 + 5);
  *((_QWORD *)v7 + 6) = v11;
  swift_bridgeObjectRelease();
  v12 = *((_QWORD *)v8 + 8);
  *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
  *((_QWORD *)v7 + 8) = v12;
  swift_bridgeObjectRelease();
  v13 = *((_QWORD *)v8 + 10);
  *((_QWORD *)v7 + 9) = *((_QWORD *)v8 + 9);
  *((_QWORD *)v7 + 10) = v13;
  swift_bridgeObjectRelease();
  v14 = (void *)*((_QWORD *)v7 + 12);
  v15 = *((_QWORD *)v8 + 12);
  *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
  *((_QWORD *)v7 + 12) = v15;

  v16 = (void *)*((_QWORD *)v7 + 13);
  *((_QWORD *)v7 + 13) = *((_QWORD *)v8 + 13);

  v17 = (int *)type metadata accessor for MedicalIDData();
  v18 = v17[13];
  v19 = &v7[v18];
  v20 = &v8[v18];
  v21 = sub_2416B9B50();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v128 = v23;
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    sub_2415A0A74(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  v27 = v17[14];
  v28 = &v7[v27];
  v29 = &v8[v27];
  v30 = v23(&v7[v27], 1, v21);
  v31 = v23(v29, 1, v21);
  v123 = v22;
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v28, v29, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v28, v21);
LABEL_12:
    sub_2415A0A74(0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v28, v29, v21);
LABEL_13:
  v33 = v17[15];
  v34 = &v7[v33];
  v35 = (uint64_t *)&v8[v33];
  v37 = *v35;
  v36 = v35[1];
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v38 = v17[16];
  v39 = &v7[v38];
  v40 = (uint64_t *)&v8[v38];
  v42 = *v40;
  v41 = v40[1];
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v7[v17[17]] = v8[v17[17]];
  v7[v17[18]] = v8[v17[18]];
  v43 = v17[19];
  v44 = (uint64_t)&v7[v43];
  v45 = &v8[v43];
  v46 = *(_QWORD *)&v7[v43 + 8];
  v126 = a1;
  if (v46 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v44 = *(_OWORD *)v45;
    goto LABEL_18;
  }
  v47 = *((_QWORD *)v45 + 1);
  if (v47 >> 60 == 15)
  {
    sub_2415A1B38(v44);
    goto LABEL_16;
  }
  v48 = *(_QWORD *)v44;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_QWORD *)(v44 + 8) = v47;
  sub_2415A0DAC(v48, v46);
LABEL_18:
  v49 = v17[20];
  v50 = &v7[v49];
  v51 = &v8[v49];
  v52 = sub_2416B9A18();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v50, 1, v52);
  v56 = v54(v51, 1, v52);
  if (v55)
  {
    v57 = a3;
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v50, v51, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  v57 = a3;
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
LABEL_23:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v50, v51, v52);
LABEL_24:
  v59 = v17[21];
  v60 = *(void **)&v7[v59];
  *(_QWORD *)&v7[v59] = *(_QWORD *)&v8[v59];

  v61 = v17[22];
  v62 = &v7[v61];
  v63 = &v8[v61];
  v64 = v128(&v7[v61], 1, v21);
  v65 = v128(v63, 1, v21);
  v66 = v127;
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v62, v63, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v62, 0, 1, v21);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v123 + 8))(v62, v21);
LABEL_29:
    sub_2415A0A74(0);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v123 + 40))(v62, v63, v21);
LABEL_30:
  v68 = v122[6];
  v69 = &v126[v68];
  v70 = &v127[v68];
  v71 = sub_2416B9C70();
  v125 = *(_QWORD *)(v71 - 8);
  (*(void (**)(char *, char *, uint64_t))(v125 + 40))(v69, v70, v71);
  v72 = v122[7];
  v73 = &v126[v72];
  v74 = &v127[v72];
  v75 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 40))(v73, v74, v75);
  *(_QWORD *)&v126[v122[8]] = *(_QWORD *)&v127[v122[8]];
  swift_release();
  v76 = v122[9];
  v77 = &v126[v76];
  v78 = &v127[v76];
  LODWORD(v74) = v128(&v126[v76], 1, v21);
  v79 = v128(v78, 1, v21);
  if ((_DWORD)v74)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v77, v78, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v77, 0, 1, v21);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v123 + 8))(v77, v21);
LABEL_35:
    sub_2415A0A74(0);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v123 + 40))(v77, v78, v21);
LABEL_36:
  v81 = v57[5];
  v82 = &v126[v81];
  v83 = &v127[v81];
  *v82 = *v83;
  *((_QWORD *)v82 + 1) = *((_QWORD *)v83 + 1);
  swift_release();
  v84 = v57[6];
  v85 = &v126[v84];
  v86 = &v127[v84];
  v87 = v128(&v126[v84], 1, v21);
  v88 = v128(v86, 1, v21);
  if (v87)
  {
    if (!v88)
    {
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v85, v86, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v85, 0, 1, v21);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v88)
  {
    (*(void (**)(char *, uint64_t))(v123 + 8))(v85, v21);
LABEL_41:
    sub_2415A0A74(0);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v123 + 40))(v85, v86, v21);
LABEL_42:
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  *(_QWORD *)&v85[*(int *)(v90 + 28)] = *(_QWORD *)&v86[*(int *)(v90 + 28)];
  swift_release();
  v91 = v57[7];
  v92 = &v126[v91];
  v93 = &v127[v91];
  if (*(_QWORD *)&v126[v91 + 8])
  {
    v94 = *((_QWORD *)v93 + 1);
    if (v94)
    {
      *(_QWORD *)v92 = *(_QWORD *)v93;
      *((_QWORD *)v92 + 1) = v94;
      swift_bridgeObjectRelease();
      v95 = *((_QWORD *)v93 + 3);
      *((_QWORD *)v92 + 2) = *((_QWORD *)v93 + 2);
      *((_QWORD *)v92 + 3) = v95;
      swift_bridgeObjectRelease();
      *((_QWORD *)v92 + 4) = *((_QWORD *)v93 + 4);
      swift_bridgeObjectRelease();
      v96 = *((_QWORD *)v93 + 6);
      *((_QWORD *)v92 + 5) = *((_QWORD *)v93 + 5);
      *((_QWORD *)v92 + 6) = v96;
      swift_bridgeObjectRelease();
      goto LABEL_47;
    }
    sub_2415CCAC8((uint64_t)v92);
  }
  v97 = *((_OWORD *)v93 + 1);
  *(_OWORD *)v92 = *(_OWORD *)v93;
  *((_OWORD *)v92 + 1) = v97;
  *((_OWORD *)v92 + 2) = *((_OWORD *)v93 + 2);
  *((_QWORD *)v92 + 6) = *((_QWORD *)v93 + 6);
LABEL_47:
  *((_QWORD *)v92 + 7) = *((_QWORD *)v93 + 7);
  swift_release();
  v98 = v57[8];
  v99 = &v126[v98];
  v100 = &v127[v98];
  v101 = *(_QWORD *)v100;
  LOBYTE(v100) = v100[8];
  *(_QWORD *)v99 = v101;
  v99[8] = (char)v100;
  swift_release();
  if (v126 != v127)
  {
    v102 = v57[9];
    v103 = &v126[v102];
    v104 = &v127[v102];
    v105 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0];
    v106 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&v126[v102], &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, &qword_25713A1C0, v105, v106);
    v108 = v107;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v103, v104, v71);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    }
    v66 = v127;
    v109 = v57[10];
    v110 = &v126[v109];
    v111 = &v127[v109];
    v112 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038];
    v113 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415CCAFC((uint64_t)&v126[v109], (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, v112, v113);
    v115 = v114;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v116 = sub_2416BA06C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 32))(v110, v111, v116);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
    }
  }
  v117 = v57[11];
  v118 = &v126[v117];
  v119 = (_QWORD *)((char *)v66 + v117);
  v120 = *(void **)&v126[v117];
  *(_QWORD *)v118 = *v119;

  *((_QWORD *)v118 + 1) = v119[1];
  return v126;
}

uint64_t sub_2415FBCEC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415FBCF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for MedicalIDPregnancyViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + a3[5] + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v13 = v11;
      v14 = a3[6];
    }
    else
    {
      sub_24159D6B0(0, &qword_25713A1D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], MEMORY[0x24BDEB580]);
      v12 = *(_QWORD *)(v15 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v13 = v15;
        v14 = a3[9];
      }
      else
      {
        sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
        v13 = v16;
        v12 = *(_QWORD *)(v16 - 8);
        v14 = a3[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1 + v14, a2, v13);
  }
}

uint64_t sub_2415FBE40()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2415FBE4C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = type metadata accessor for MedicalIDPregnancyViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + a4[5] + 8) = a2;
      return result;
    }
    sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      sub_24159D6B0(0, &qword_25713A1D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], MEMORY[0x24BDEB580]);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[9];
      }
      else
      {
        sub_24159D6B0(0, qword_25713A930, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], MEMORY[0x24BDEB580]);
        v10 = v17;
        v14 = *(_QWORD *)(v17 - 8);
        v15 = a4[10];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_2415FBF84()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for MedicalIDPregnancyViewModel();
  if (v0 <= 0x3F)
  {
    sub_24159D6B0(319, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    if (v1 <= 0x3F)
    {
      sub_24159D6B0(319, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
      if (v2 <= 0x3F)
      {
        sub_24159D6B0(319, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_2415FC0A4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2415FC0B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_25713BBC0)
  {
    v2 = sub_2415FC12C();
    v3 = sub_24159CE88(&qword_25713BC20, (uint64_t (*)(uint64_t))sub_2415FC12C, (uint64_t)&unk_2416BFFF0);
    v5 = type metadata accessor for MedicalIDEditModal(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25713BBC0);
  }
}

uint64_t sub_2415FC12C()
{
  uint64_t result;

  result = qword_25713BBC8;
  if (!qword_25713BBC8)
  {
    sub_2415FC204(255);
    sub_24159D6B0(255, &qword_25713BC00, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDPregnancyStatusLabelView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_24159CE88(&qword_25713BC08, (uint64_t (*)(uint64_t))sub_2415FC204, MEMORY[0x24BDF5428]);
    sub_2415DFB54();
    sub_2415FC384();
    type metadata accessor for EditingScrollView();
  }
  return result;
}

void sub_2415FC204(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713BBD0, (uint64_t (*)(uint64_t))sub_2415FC220, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_2415FC220()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713BBD8)
  {
    sub_2415FC28C();
    sub_2415FC310();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713BBD8);
  }
}

void sub_2415FC28C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713BBE0)
  {
    sub_2415A3D28(255, &qword_25713BBE8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], MEMORY[0x24BDF46B0]);
    sub_2416BA768();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713BBE0);
  }
}

void sub_2415FC310()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713BBF0)
  {
    sub_2415A3D28(255, &qword_25713BBF8, MEMORY[0x24BDF5158], MEMORY[0x24BDF5138], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DatePickerEditView);
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713BBF0);
  }
}

unint64_t sub_2415FC384()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_25713BC10;
  if (!qword_25713BC10)
  {
    sub_24159D6B0(255, &qword_25713BC00, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDPregnancyStatusLabelView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v2 = v1;
    v3 = sub_24159CE88(&qword_25713BC18, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDPregnancyStatusLabelView, (uint64_t)&unk_2416BCEB0);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5578], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713BC10);
  }
  return result;
}

uint64_t sub_2415FC418()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  type metadata accessor for MedicalIDEditPregnancyModalView();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2415C2834;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_2415C2834;
  return sub_2415F7358();
}

uint64_t objectdestroyTm_5()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v1 = (int *)type metadata accessor for MedicalIDEditPregnancyModalView();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  v3 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v4 = v2 + v3[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = (int *)type metadata accessor for MedicalIDData();
  v6 = v4 + v5[13];
  v7 = sub_2416B9B50();
  v27 = *(_QWORD *)(v7 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (!v8(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v6, v7);
  v9 = v4 + v5[14];
  if (!v8(v9, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v9, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)(v4 + v5[19]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_2415A0DAC(*v10, v11);
  v12 = v4 + v5[20];
  v13 = sub_2416B9A18();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);

  v15 = v4 + v5[22];
  if (!v8(v15, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v15, v7);
  v16 = v2 + v3[6];
  v17 = sub_2416B9C70();
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v18(v16, v17);
  v19 = v2 + v3[7];
  v20 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  swift_release();
  v21 = v2 + v3[9];
  if (!v8(v21, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v21, v7);
  swift_release();
  v22 = v2 + v1[6];
  if (!v8(v22, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v22, v7);
  sub_24159D6B0(0, &qword_25713A928, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  swift_release();
  if (*(_QWORD *)(v2 + v1[7] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  v23 = v2 + v1[9];
  sub_24159D6B0(0, &qword_25713A1C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v18(v23, v17);
  else
    swift_release();
  v24 = v2 + v1[10];
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v25 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_2415FC8C0()
{
  return sub_2415FC91C((uint64_t (*)(uint64_t))sub_2415F7AE4);
}

uint64_t sub_2415FC8D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDEditPregnancyModalView() - 8) + 80);
  return sub_2415F897C((uint64_t *)(v1 + ((v3 + 16) & ~v3)), a1);
}

uint64_t sub_2415FC910()
{
  return sub_2415FC91C((uint64_t (*)(uint64_t))sub_2415F8A34);
}

uint64_t sub_2415FC91C(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDEditPregnancyModalView() - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_2415FC96C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDEditPregnancyModalView() - 8) + 80);
  return sub_2415F8B64(v0 + ((v1 + 16) & ~v1));
}

unint64_t sub_2415FC998()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713BC40;
  if (!qword_25713BC40)
  {
    sub_2415A3D28(255, &qword_25713BBE8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], MEMORY[0x24BDF46B0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF46D0], v1);
    atomic_store(result, (unint64_t *)&qword_25713BC40);
  }
  return result;
}

uint64_t sub_2415FCA00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415A3D28(0, &qword_25713BBF8, MEMORY[0x24BDF5158], MEMORY[0x24BDF5138], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DatePickerEditView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415FCA64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, qword_257139BE0, (uint64_t (*)(uint64_t))sub_2415A0A74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2415FCAC8()
{
  sub_2415FC0B4(255);
  sub_24159CE88(&qword_25713BC38, (uint64_t (*)(uint64_t))sub_2415FC0B4, (uint64_t)&unk_2416BFE00);
  return swift_getOpaqueTypeConformance2();
}

void sub_2415FCB3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_25713BC58)
  {
    sub_2415E40F8();
    v3 = v2;
    v4 = sub_2415E419C();
    v6 = type metadata accessor for DatePickerEditView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713BC58);
  }
}

uint64_t sub_2415FCB9C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 16) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2415FCBF8()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_2415FCC2C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_2415FCC70())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t MedicalIDSpokenLanguagePickerViewModel.allSpokenLanguages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t (*sub_2415FCCB4())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_2415FCCF0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_getKeyPath();
  sub_2415FCEB8();
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 40);
  *a2 = *(_QWORD *)(v3 + 32);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2415FCD7C()
{
  swift_getKeyPath();
  sub_2415FCEB8();
  swift_bridgeObjectRetain();
  sub_2416B9CA0();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2415FCE20()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath();
  sub_2415FCEB8();
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t sub_2415FCEB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713BC68;
  if (!qword_25713BC68)
  {
    v1 = type metadata accessor for MedicalIDSpokenLanguagePickerViewModel();
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDSpokenLanguagePickerViewModel, v1);
    atomic_store(result, (unint64_t *)&qword_25713BC68);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDSpokenLanguagePickerViewModel()
{
  uint64_t result;

  result = qword_25713BCA0;
  if (!qword_25713BCA0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2415FCF3C()
{
  swift_getKeyPath();
  sub_2415FCEB8();
  sub_2416B9CA0();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2415FCFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2415FD040()
{
  uint64_t *v0;

  return sub_2415FCFD8(v0[2], v0[3], v0[4]);
}

void (*sub_2415FD05C(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  v4[5] = OBJC_IVAR____TtC11MedicalIDUI38MedicalIDSpokenLanguagePickerViewModel___observationRegistrar;
  *v4 = v2;
  v4[6] = sub_2415FCEB8();
  sub_2416B9CAC();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  sub_2416B9CC4();
  swift_release();
  v4[7] = sub_2415FCCB4();
  return sub_2415FD12C;
}

void sub_2415FD12C(_QWORD *a1)
{
  sub_2415FD674(a1);
}

uint64_t sub_2415FD138()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_2415FCEB8();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  if (*(_QWORD *)(v0 + 88))
    swift_bridgeObjectRetain();
  sub_2415FFE44();
  sub_2416BAE1C();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_2415FD240(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_2415FD280;
}

uint64_t sub_2415FD280(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return sub_2415FD138();
  return result;
}

uint64_t sub_2415FD2B0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_getKeyPath();
  sub_2415FCEB8();
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 88);
  *a2 = *(_QWORD *)(v3 + 80);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2415FD33C()
{
  swift_getKeyPath();
  sub_2415FCEB8();
  swift_bridgeObjectRetain();
  sub_2416B9CA0();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2415FD3E0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  swift_getKeyPath();
  sub_2415FCEB8();
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 88);
  *a1 = *(_QWORD *)(v1 + 80);
  a1[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2415FD474()
{
  swift_getKeyPath();
  sub_2415FCEB8();
  sub_2416B9CA0();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2415FD50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return sub_2415FD138();
}

uint64_t sub_2415FD57C()
{
  uint64_t *v0;

  return sub_2415FD50C(v0[2], v0[3], v0[4]);
}

void (*sub_2415FD598(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  v4[5] = OBJC_IVAR____TtC11MedicalIDUI38MedicalIDSpokenLanguagePickerViewModel___observationRegistrar;
  *v4 = v2;
  v4[6] = sub_2415FCEB8();
  sub_2416B9CAC();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  sub_2416B9CC4();
  swift_release();
  v4[7] = sub_2415FD240((uint64_t)v4);
  return sub_2415FD668;
}

void sub_2415FD668(_QWORD *a1)
{
  sub_2415FD674(a1);
}

void sub_2415FD674(_QWORD *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  *v1 = v1[4];
  swift_getKeyPath();
  sub_2416B9CB8();
  swift_release();
  free(v1);
}

uint64_t MedicalIDSpokenLanguagePickerViewModel.__allocating_init(primaryLanguageCode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  MedicalIDSpokenLanguagePickerViewModel.init(primaryLanguageCode:)(a1, a2, a3, a4);
  return v8;
}

int64_t MedicalIDSpokenLanguagePickerViewModel.init(primaryLanguageCode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4;
  int64_t v5;
  unint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  BOOL v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD **v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58[5];

  v5 = v4;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0xE000000000000000;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  sub_2416B9CD0();
  *(_QWORD *)(v5 + 48) = a1;
  *(_QWORD *)(v5 + 56) = a2;
  v50 = a3;
  *(_QWORD *)(v5 + 64) = a3;
  *(_QWORD *)(v5 + 72) = a4;
  v10 = objc_opt_self();
  v52 = a4;
  swift_bridgeObjectRetain();
  v53 = a1;
  swift_retain();
  v54 = a2;
  swift_retain();
  sub_2416B9BD4();
  v11 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend((id)v10, sel_spokenLanguagesForLanguages_includeLanguagesForRegion_, v11, 1);

  v13 = sub_2416BB1F4();
  v14 = *(_QWORD *)(v13 + 16);
  v15 = MEMORY[0x24BEE4AF8];
  v51 = v5;
  if (v14)
  {
    v58[0] = MEMORY[0x24BEE4AF8];
    sub_2415FE570(0, v14, 0);
    v16 = v15;
    v17 = (uint64_t *)(v13 + 40);
    do
    {
      v19 = *(v17 - 1);
      v18 = *v17;
      v58[0] = v16;
      v21 = *(_QWORD *)(v16 + 16);
      v20 = *(_QWORD *)(v16 + 24);
      swift_bridgeObjectRetain();
      if (v21 >= v20 >> 1)
      {
        sub_2415FE570(v20 > 1, v21 + 1, 1);
        v16 = v58[0];
      }
      v17 += 2;
      *(_QWORD *)(v16 + 16) = v21 + 1;
      v22 = v16 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v19;
      *(_QWORD *)(v22 + 40) = v18;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    v5 = v51;
    v15 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v16 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(v5 + 16) = v16;
  v23 = objc_msgSend((id)v10, sel_availableSpokenLanguages, v5 + 16);
  v24 = sub_2416BB2C0();

  v25 = *(_QWORD *)(v24 + 16);
  if (v25)
  {
    v58[0] = v15;
    sub_2415FE570(0, v25, 0);
    v26 = (_QWORD *)v15;
    v5 = sub_2415FFCB4(v24);
    v28 = v27;
    v30 = v29 & 1;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(v24 + 32))
    {
      if (((*(_QWORD *)(v24 + 56 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
        goto LABEL_36;
      if (*(_DWORD *)(v24 + 36) != (_DWORD)v28)
        goto LABEL_37;
      v55 = v30;
      v31 = (uint64_t *)(*(_QWORD *)(v24 + 48) + 16 * v5);
      v32 = *v31;
      v33 = v31[1];
      v58[0] = (uint64_t)v26;
      v34 = v26[2];
      v10 = v26[3];
      swift_bridgeObjectRetain();
      if (v34 >= v10 >> 1)
      {
        sub_2415FE570(v10 > 1, v34 + 1, 1);
        v26 = (_QWORD *)v58[0];
      }
      v26[2] = v34 + 1;
      v35 = &v26[2 * v34];
      v35[4] = v32;
      v35[5] = v33;
      v36 = sub_2415FFD54(v5, v28, v55 & 1, v24);
      v5 = v36;
      v28 = v37;
      v30 = v38 & 1;
      if (!--v25)
      {
        sub_2415FFE38(v36, v37, v30);
        swift_bridgeObjectRelease();
        v5 = v51;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();
  v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_19:
  v58[0] = (uint64_t)v26;
  swift_bridgeObjectRetain();
  sub_2415FEEF8(v58);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 24) = v58[0];
  v58[0] = v53;
  v58[1] = v54;
  v58[2] = v50;
  v58[3] = v52;
  sub_2415FFE44();
  MEMORY[0x242698604](&v56);
  v28 = v57;
  if (!v57)
  {
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_34;
  }
  v25 = v56;
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  v58[0] = v5;
  sub_2415FCEB8();
  swift_bridgeObjectRetain();
  sub_2416B9CA0();
  swift_release();
  v10 = (unint64_t)v49;
  swift_beginAccess();
  v40 = *(_QWORD *)(v5 + 16);
  v41 = *(_QWORD *)(v40 + 16);
  if (!v41)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v26 = *v49;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v49 = v26;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
LABEL_29:
      v46 = v26[2];
      v45 = v26[3];
      if (v46 >= v45 >> 1)
      {
        v26 = sub_2415FE2A4((_QWORD *)(v45 > 1), v46 + 1, 1, v26);
        *v49 = v26;
      }
      v26[2] = v46 + 1;
      v47 = &v26[2 * v46];
      v47[4] = v25;
      v47[5] = v28;
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_34;
    }
LABEL_38:
    v26 = sub_2415FE2A4(0, v26[2] + 1, 1, v26);
    *(_QWORD *)v10 = v26;
    goto LABEL_29;
  }
  v42 = (_QWORD *)(v40 + 40);
  while (1)
  {
    v43 = *(v42 - 1) == v25 && v28 == *v42;
    if (v43 || (sub_2416BB644() & 1) != 0)
      break;
    v42 += 2;
    if (!--v41)
      goto LABEL_28;
  }
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
LABEL_34:
  swift_release();
  return v5;
}

uint64_t sub_2415FDCD8()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_getKeyPath();
  sub_2415FCEB8();
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v1 = v0[5];
  v2 = v0[4] & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0)
    v2 = HIBYTE(v1) & 0xF;
  if (v2)
  {
    swift_beginAccess();
    swift_retain();
    v3 = swift_bridgeObjectRetain();
    v4 = sub_2416000C0(v3);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_beginAccess();
    v4 = v0[2];
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_2415FDDDC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  swift_getKeyPath();
  sub_2415FCEB8();
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  if ((v2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(v2) & 0xF;
  else
    v4 = *(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    swift_retain();
    v5 = swift_bridgeObjectRetain();
    v6 = sub_2416000C0(v5);
    swift_bridgeObjectRelease();
    swift_release();
    return v6;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t MedicalIDSpokenLanguagePickerViewModel.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI38MedicalIDSpokenLanguagePickerViewModel___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MedicalIDSpokenLanguagePickerViewModel.__deallocating_deinit()
{
  MedicalIDSpokenLanguagePickerViewModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_2415FDF68(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  size_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_24159D6B0(0, &qword_25713BE00, (uint64_t (*)(uint64_t))sub_2415B11B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  sub_2415B11B0(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = (_QWORD *)swift_allocObject();
  v15 = _swift_stdlib_malloc_size(v14);
  if (!v12 || (v15 - v13 == 0x8000000000000000 ? (v16 = v12 == -1) : (v16 = 0), v16))
  {
LABEL_29:
    result = sub_2416BB59C();
    __break(1u);
    return result;
  }
  v14[2] = v8;
  v14[3] = 2 * ((uint64_t)(v15 - v13) / v12);
LABEL_19:
  sub_2415B11B0(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (unint64_t)v14 + v19;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v14 < a4 || v20 >= a4 + v19 + *(_QWORD *)(v18 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v14 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_2415FFEB0(0, v8, v20, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v14;
}

_QWORD *sub_2415FE184(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_24159D7F0(0, &qword_25713BE08, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 95;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 7);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_241600504(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2415FE2A4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_24159D7F0(0, &qword_25713BE20, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2416005F4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2415FE3C4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2416006E4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_2415FE4E4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2415FE58C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2415FE500(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2415FE6FC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2415FE51C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2415FE8F0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2415FE538(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2415FEA6C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2415FE554(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2415FEC1C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2415FE570(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2415FED7C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2415FE58C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24159D7F0(0, &qword_25713BDF8, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2416BB5FC();
  __break(1u);
  return result;
}

uint64_t sub_2415FE6FC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_24159D6B0(0, &qword_25713BDF0, (uint64_t (*)(uint64_t))_s15SectionGridItemVMa, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v10 = *(_QWORD *)(_s15SectionGridItemVMa() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(_s15SectionGridItemVMa() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_2416BB5FC();
  __break(1u);
  return result;
}

uint64_t sub_2415FE8F0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24159D7F0(0, &qword_25713BE08, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 95;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 7);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[128 * v8])
      memmove(v13, v14, v8 << 7);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[128 * v8] || v13 >= &v14[128 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2416BB5FC();
  __break(1u);
  return result;
}

uint64_t sub_2415FEA6C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_24159D6B0(0, (unint64_t *)&qword_25713BE10, (uint64_t (*)(uint64_t))sub_2416007D4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 136);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 136 * v8)
      memmove(v10 + 4, a4 + 4, 136 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 136 * v8 || v12 >= v13 + 136 * v8)
  {
    sub_2416007D4(0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2416BB5FC();
  __break(1u);
  return result;
}

uint64_t sub_2415FEC1C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24159D7F0(0, &qword_25713BE18, (uint64_t)&type metadata for OrganDonationStatus, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2416BB5FC();
  __break(1u);
  return result;
}

uint64_t sub_2415FED7C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24159D7F0(0, &qword_25713BE20, (uint64_t)&type metadata for MedicalIDSpokenLanguage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2416BB5FC();
  __break(1u);
  return result;
}

uint64_t sub_2415FEEF8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_241627620(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_2415FEF60(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_2415FEF60(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;

  v3 = a1[1];
  result = sub_2416BB620();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_129;
    if (v3)
      return sub_2415FF778(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_137;
  v87 = result;
  v84 = a1;
  if (v3 < 2)
  {
    v8 = (char *)MEMORY[0x24BEE4AF8];
    v93 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    v86 = MEMORY[0x24BEE4AF8];
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_95:
      if (v11 >= 2)
      {
        v78 = *v84;
        do
        {
          v79 = v11 - 2;
          if (v11 < 2)
            goto LABEL_124;
          if (!v78)
            goto LABEL_136;
          v80 = *(_QWORD *)&v8[16 * v79 + 32];
          v81 = *(_QWORD *)&v8[16 * v11 + 24];
          sub_2415FF8CC((char *)(v78 + 16 * v80), (char *)(v78 + 16 * *(_QWORD *)&v8[16 * v11 + 16]), v78 + 16 * v81, v93);
          if (v1)
            break;
          if (v81 < v80)
            goto LABEL_125;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v8 = sub_241625B80((uint64_t)v8);
          if (v79 >= *((_QWORD *)v8 + 2))
            goto LABEL_126;
          v82 = &v8[16 * v79 + 32];
          *(_QWORD *)v82 = v80;
          *((_QWORD *)v82 + 1) = v81;
          v83 = *((_QWORD *)v8 + 2);
          if (v11 > v83)
            goto LABEL_127;
          memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v83 - v11));
          *((_QWORD *)v8 + 2) = v83 - 1;
          v11 = v83 - 1;
        }
        while (v83 > 2);
      }
LABEL_106:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v86 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_2416BB224();
    *(_QWORD *)(v7 + 16) = v6;
    v86 = v7;
    v93 = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v85 = *a1 + 24;
  v8 = (char *)MEMORY[0x24BEE4AF8];
  v90 = v3;
  v94 = *a1;
  while (1)
  {
    v12 = v9++;
    v89 = v12;
    if (v9 < v3)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
      MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
      sub_2415C343C();
      v91 = sub_2416BB47C();
      swift_bridgeObjectRelease();
      v3 = v90;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v12 + 2;
      if (v12 + 2 < v90)
      {
        v13 = v85 + 16 * v12;
        while (1)
        {
          v13 += 16;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
          MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
          v14 = sub_2416BB47C();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v91 == -1) == (v14 != -1))
            break;
          ++v9;
          v3 = v90;
          if (v90 == v9)
          {
            v9 = v90;
            goto LABEL_22;
          }
        }
        v3 = v90;
      }
LABEL_22:
      v10 = v94;
      if (v91 == -1)
      {
        if (v9 < v12)
          goto LABEL_132;
        if (v12 < v9)
        {
          v15 = 16 * v9;
          v16 = 16 * v12;
          v17 = v9;
          v18 = v12;
          do
          {
            if (v18 != --v17)
            {
              if (!v94)
                goto LABEL_135;
              v19 = v94 + v15;
              v20 = *(_QWORD *)(v94 + v16);
              v21 = *(_QWORD *)(v94 + v16 + 8);
              *(_OWORD *)(v94 + v16) = *(_OWORD *)(v94 + v15 - 16);
              *(_QWORD *)(v19 - 16) = v20;
              *(_QWORD *)(v19 - 8) = v21;
            }
            ++v18;
            v15 -= 16;
            v16 += 16;
          }
          while (v18 < v17);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v12))
        goto LABEL_128;
      if (v9 - v12 < v87)
        break;
    }
LABEL_46:
    if (v9 < v12)
      goto LABEL_123;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = sub_241625914(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
    v28 = *((_QWORD *)v8 + 2);
    v27 = *((_QWORD *)v8 + 3);
    v11 = v28 + 1;
    v10 = v94;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_241625914((char *)(v27 > 1), v28 + 1, 1, v8);
      v10 = v94;
      v8 = v77;
    }
    *((_QWORD *)v8 + 2) = v11;
    v29 = v8 + 32;
    v30 = &v8[16 * v28 + 32];
    *(_QWORD *)v30 = v12;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v11 - 1;
        if (v11 >= 4)
        {
          v36 = &v29[16 * v11];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_112;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_113;
          v43 = v11 - 2;
          v44 = &v29[16 * v11 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_115;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_118;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_122;
            v59 = v34 < v69;
            goto LABEL_83;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v60 = *((_QWORD *)v8 + 4);
            v61 = *((_QWORD *)v8 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_77;
          }
          v33 = *((_QWORD *)v8 + 4);
          v32 = *((_QWORD *)v8 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_114;
        v43 = v11 - 2;
        v49 = &v29[16 * v11 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_117;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_120;
        if (__OFADD__(v53, v58))
          goto LABEL_121;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_83:
          if (v59)
            v31 = v43;
          goto LABEL_85;
        }
LABEL_77:
        if ((v54 & 1) != 0)
          goto LABEL_116;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_119;
        if (v65 < v53)
          goto LABEL_14;
LABEL_85:
        v70 = v31 - 1;
        if (v31 - 1 >= v11)
        {
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
          goto LABEL_131;
        }
        if (!v10)
          goto LABEL_134;
        v71 = v8;
        v72 = &v29[16 * v70];
        v73 = *(_QWORD *)v72;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        sub_2415FF8CC((char *)(v10 + 16 * *(_QWORD *)v72), (char *)(v10 + 16 * *(_QWORD *)v74), v10 + 16 * v75, v93);
        if (v1)
          goto LABEL_106;
        if (v75 < v73)
          goto LABEL_109;
        if (v31 > *((_QWORD *)v71 + 2))
          goto LABEL_110;
        *(_QWORD *)v72 = v73;
        *(_QWORD *)&v29[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v71 + 2);
        if (v31 >= v76)
          goto LABEL_111;
        v8 = v71;
        v11 = v76 - 1;
        memmove(&v29[16 * v31], v74 + 16, 16 * (v76 - 1 - v31));
        *((_QWORD *)v71 + 2) = v76 - 1;
        v10 = v94;
        if (v76 <= 2)
          goto LABEL_14;
      }
    }
    v11 = 1;
LABEL_14:
    v3 = v90;
    if (v9 >= v90)
      goto LABEL_95;
  }
  v22 = v12 + v87;
  if (__OFADD__(v12, v87))
    goto LABEL_130;
  if (v22 >= v3)
    v22 = v3;
  if (v22 >= v12)
  {
    if (v9 != v22)
    {
      v88 = v22;
      v23 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v92 = v23;
        do
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
          MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
          sub_2415C343C();
          v24 = sub_2416BB47C();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v24 != -1)
            break;
          if (!v94)
            goto LABEL_133;
          v25 = *v23;
          v26 = v23[1];
          *(_OWORD *)v23 = *((_OWORD *)v23 - 1);
          *(v23 - 1) = v26;
          *(v23 - 2) = v25;
          v23 -= 2;
          ++v12;
        }
        while (v9 != v12);
        ++v9;
        v23 = v92 + 2;
        v12 = v89;
      }
      while (v9 != v88);
      v9 = v88;
    }
    goto LABEL_46;
  }
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  result = sub_2416BB59C();
  __break(1u);
  return result;
}

uint64_t sub_2415FF778(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v11 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v13 = *a4;
    v5 = (_QWORD *)(*a4 + 16 * a3);
LABEL_5:
    v6 = v11;
    v12 = v5;
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
      MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
      sub_2415C343C();
      v7 = sub_2416BB47C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v7 != -1)
      {
LABEL_4:
        ++v4;
        v5 = v12 + 2;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v13)
        break;
      v8 = *v5;
      v9 = v5[1];
      *(_OWORD *)v5 = *((_OWORD *)v5 - 1);
      *(v5 - 1) = v9;
      *(v5 - 2) = v8;
      v5 -= 2;
      if (v4 == ++v6)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2415FF8CC(char *__src, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  char *v23;
  char *v25;
  char *v26;
  char *v27;
  char *v28;

  v4 = a2;
  v5 = __src;
  v6 = a2 - __src;
  v7 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v7 = a2 - __src;
  v8 = v7 >> 4;
  v9 = a3 - (_QWORD)a2;
  v10 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v10 = a3 - (_QWORD)a2;
  v11 = v10 >> 4;
  v28 = __src;
  v27 = a4;
  if (v8 >= v10 >> 4)
  {
    if (v9 >= -15)
    {
      if (a4 != a2 || &a2[16 * v11] <= a4)
        memmove(a4, a2, 16 * v11);
      v15 = &a4[16 * v11];
      v26 = v15;
      v28 = v4;
      if (v5 < v4 && v9 >= 16)
      {
        v16 = (char *)(a3 - 16);
        v17 = v4;
        while (1)
        {
          v23 = v16 + 16;
          v25 = v4;
          v18 = v15 - 16;
          v17 -= 16;
          v19 = (unint64_t)v15;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
          MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
          sub_2415C343C();
          v20 = sub_2416BB47C();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v20 == -1)
          {
            if (v23 != v25 || v16 >= v25)
              *(_OWORD *)v16 = *(_OWORD *)v17;
            v28 = v17;
            v15 = (char *)v19;
            if (v17 <= v5)
              goto LABEL_45;
          }
          else
          {
            v26 = v18;
            if ((unint64_t)v23 < v19 || (unint64_t)v16 >= v19)
            {
              *(_OWORD *)v16 = *(_OWORD *)v18;
              v17 = v25;
              v15 = v18;
              if (v25 <= v5)
                goto LABEL_45;
            }
            else
            {
              if (v23 != (char *)v19)
                *(_OWORD *)v16 = *(_OWORD *)v18;
              v17 = v25;
              v15 = v18;
              if (v25 <= v5)
                goto LABEL_45;
            }
          }
          v16 -= 16;
          v4 = v17;
          if (v15 <= a4)
            goto LABEL_45;
        }
      }
      goto LABEL_45;
    }
  }
  else if (v6 >= -15)
  {
    if (a4 != __src || &__src[16 * v8] <= a4)
      memmove(a4, __src, 16 * v8);
    v26 = &a4[16 * v8];
    if ((unint64_t)v4 < a3 && v6 >= 16)
    {
      v12 = a4;
      do
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
        MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
        sub_2415C343C();
        v13 = sub_2416BB47C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v13 == -1)
        {
          v14 = v4 + 16;
          if (v5 < v4 || v5 >= v14 || v5 != v4)
            *(_OWORD *)v5 = *(_OWORD *)v4;
        }
        else
        {
          if (v5 != v12)
            *(_OWORD *)v5 = *(_OWORD *)v12;
          v12 += 16;
          v27 = v12;
          v14 = v4;
        }
        v5 += 16;
        if (v12 >= &a4[16 * v8])
          break;
        v4 = v14;
      }
      while ((unint64_t)v14 < a3);
      v28 = v5;
    }
LABEL_45:
    sub_241625AD8((void **)&v28, (const void **)&v27, &v26);
    return 1;
  }
  result = sub_2416BB5FC();
  __break(1u);
  return result;
}

uint64_t sub_2415FFCB4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_2415FFD54(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2415FFE38(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

void sub_2415FFE44()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713BC70)
  {
    sub_24159D7F0(255, (unint64_t *)&qword_25713A910, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v0 = sub_2416BAE58();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713BC70);
  }
}

uint64_t sub_2415FFEB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    sub_2415B11B0(0);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v4;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_2416BB5FC();
  __break(1u);
  return result;
}

uint64_t sub_2415FFFC8()
{
  char v0;
  char v1;

  MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
  sub_2415C343C();
  v0 = sub_2416BB488();
  swift_bridgeObjectRelease();
  if ((v0 & 1) != 0)
  {
    v1 = 1;
  }
  else
  {
    MedicalIDSpokenLanguage.languageInLanguageLocale.getter();
    v1 = sub_2416BB488();
    swift_bridgeObjectRelease();
  }
  return v1 & 1;
}

uint64_t sub_2416000AC(uint64_t a1)
{
  return sub_2416000C0(a1);
}

uint64_t sub_2416000C0(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v2 = *(_QWORD *)(a1 + 16);
  result = swift_beginAccess();
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v4 = 0;
  v5 = a1 + 40;
  v23 = -(uint64_t)v2;
  v6 = MEMORY[0x24BEE4AF8];
  v7 = MEMORY[0x24BEE0D00];
  v20 = a1 + 40;
  v21 = v2;
  do
  {
    v22 = v6;
    if (v4 <= v2)
      v8 = v2;
    else
      v8 = v4;
    v24 = -(uint64_t)v8;
    v9 = (uint64_t *)(v5 + 16 * v4);
    v10 = v4 + 1;
    while (1)
    {
      if (v24 + v10 == 1)
      {
        __break(1u);
        return result;
      }
      v25 = v10;
      v12 = *(v9 - 1);
      v11 = *v9;
      swift_getKeyPath();
      sub_2415FCEB8();
      swift_bridgeObjectRetain();
      sub_2416B9CAC();
      swift_release();
      swift_bridgeObjectRetain();
      MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
      sub_2415C343C();
      v13 = sub_2416BB488();
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        break;
      MedicalIDSpokenLanguage.languageInLanguageLocale.getter();
      v14 = sub_2416BB488();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
        goto LABEL_13;
      result = swift_bridgeObjectRelease();
      v10 = v25 + 1;
      v9 += 2;
      if (v23 + v25 + 1 == 1)
        return v22;
    }
    swift_bridgeObjectRelease();
LABEL_13:
    result = swift_isUniquelyReferenced_nonNull_native();
    v6 = v22;
    v15 = v7;
    if ((result & 1) == 0)
    {
      result = sub_2415FE570(0, *(_QWORD *)(v22 + 16) + 1, 1);
      v6 = v22;
    }
    v5 = v20;
    v2 = v21;
    v16 = v12;
    v18 = *(_QWORD *)(v6 + 16);
    v17 = *(_QWORD *)(v6 + 24);
    if (v18 >= v17 >> 1)
    {
      result = sub_2415FE570(v17 > 1, v18 + 1, 1);
      v16 = v12;
      v6 = v22;
    }
    *(_QWORD *)(v6 + 16) = v18 + 1;
    v19 = v6 + 16 * v18;
    *(_QWORD *)(v19 + 32) = v16;
    *(_QWORD *)(v19 + 40) = v11;
    v4 = v25;
    v7 = v15;
  }
  while (v23 + v25);
  return v6;
}

uint64_t sub_241600370@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_2416003BC()
{
  return type metadata accessor for MedicalIDSpokenLanguagePickerViewModel();
}

uint64_t sub_2416003C4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2416B9CDC();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for MedicalIDSpokenLanguagePickerViewModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.preferredLanguages.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.preferredLanguages.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.preferredLanguages.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.searchText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.searchText.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.searchText.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.currentlySelectedLanguage.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.currentlySelectedLanguage.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.currentlySelectedLanguage.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.__allocating_init(primaryLanguageCode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.filteredPreferredLanguages.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.filteredAllLanguages.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.languageContainsSearchText(_:searchText:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t sub_241600504(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 7) + 32;
    v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2416BB5FC();
  __break(1u);
  return result;
}

uint64_t sub_2416005F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2416BB5FC();
  __break(1u);
  return result;
}

uint64_t sub_2416006E4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2416BB5FC();
  __break(1u);
  return result;
}

void sub_2416007D4(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_25713D0D0)
  {
    v2 = sub_2415DF910();
    v4 = _s14OrderedElementVMa(a1, (uint64_t)&type metadata for MedicalIDEmergencyContact, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_25713D0D0);
  }
}

uint64_t sub_24160082C()
{
  return sub_2415FD57C();
}

uint64_t sub_241600840()
{
  return sub_2415FD040();
}

uint64_t MedicalIDHeightFormatter.init(locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t result;

  v4 = sub_2416B9C10();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  v6 = sub_2416017BC(a1, 2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  result = type metadata accessor for MedicalIDHeightFormatter();
  *(_QWORD *)(a2 + *(int *)(result + 20)) = v6;
  return result;
}

Swift::String __swiftcall MedicalIDHeightFormatter.localizedUnitDescription()()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  Swift::String result;
  uint64_t v14;

  v1 = sub_2416017BC(v0, 1);
  sub_2415C0788(0, (unint64_t *)&qword_25713A188);
  v2 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *))(v4 + 16))((char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_241601CC8(0, &qword_25713BE28, (unint64_t *)&qword_25713A188, 0x24BDD1928, MEMORY[0x24BDCD578]);
  MEMORY[0x24BDAC7A8](v5);
  sub_2416B9A84();
  v6 = (void *)sub_2416BB35C();
  v7 = objc_msgSend(v1, sel_stringFromUnit_, v6);

  v8 = sub_2416BB128();
  v10 = v9;

  v11 = v8;
  v12 = v10;
  result._object = v12;
  result._countAndFlagsBits = v11;
  return result;
}

void sub_241600A2C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  sub_2415C0788(0, (unint64_t *)&qword_25713A188);
  v5 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_241601CC8(0, &qword_25713BE28, (unint64_t *)&qword_25713A188, 0x24BDD1928, MEMORY[0x24BDCD578]);
  MEMORY[0x24BDAC7A8](v8);
  sub_2416B9A84();
  v9 = (void *)sub_2416BB35C();
  sub_241600E44(a1, (uint64_t)v9, &qword_25713A180, (unint64_t *)&qword_25713A188, 0x24BDD1928, a2);

}

void sub_241600E18(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_241600E44(a1, a2, (unint64_t *)&qword_25713BEE0, &qword_25713BEE8, 0x24BDD1930, a3);
}

void sub_241600E44(void *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  char *v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  _QWORD v33[4];
  id v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;

  if (a1)
  {
    v37 = a6;
    v38 = a4;
    v36 = a2;
    sub_241601CC8(0, &qword_25713BEC8, &qword_25713BED0, 0x24BDD18A0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
    v12 = *(_QWORD *)(v11 - 8);
    v39 = v11;
    v40 = v12;
    v13 = *(_QWORD *)(v12 + 64);
    MEMORY[0x24BDAC7A8](v11);
    v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v41 = (char *)v33 - v14;
    v15 = a1;
    v16 = objc_msgSend(v15, sel__foundationMeasurement);
    v17 = (char *)v33 - v14;
    if (MEMORY[0x24BDAC7A8](v16))
    {
      v34 = v15;
      v35 = v33;
      v33[1] = v6;
      sub_2415C0788(0, &qword_25713BED0);
      sub_2416B98C8();

      v18 = v39;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v41, v17, v39);
      v19 = v38;
      sub_241601CC8(0, a3, v38, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
      v21 = v20;
      v33[3] = v33;
      v22 = *(_QWORD *)(v20 - 8);
      v23 = MEMORY[0x24BDAC7A8](v20);
      v25 = (char *)v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      v33[2] = v33;
      MEMORY[0x24BDAC7A8](v23);
      v27 = (char *)v33 - v26;
      v28 = (void *)sub_2416B98D4();
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
      {
        sub_2416B98EC();
        sub_2415C0788(0, v19);
        sub_2416B98E0();
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v25, v27, v21);
        v29 = v37;
        sub_2416B9910();

        (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v18);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v29, 0, 1, v21);
      }
      else
      {

        sub_241601D28();
        swift_allocError();
        *v32 = 1;
        swift_willThrow();

        (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v18);
      }
    }
    else
    {
      sub_241601D28();
      swift_allocError();
      *v31 = 0;
      swift_willThrow();

    }
  }
  else
  {
    sub_241601CC8(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a6, 1, 1, v30);
  }
}

uint64_t sub_2416011E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t (*v9)(char *, uint64_t);
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  id v18;
  double v19;
  long double v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  _QWORD v41[4];
  uint64_t v42;

  v2 = v1;
  v42 = a1;
  v3 = sub_2416B9BBC();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = sub_2416B9BC8();
  MEMORY[0x24BDAC7A8](v7);
  sub_2416B9BA4();
  sub_2415B1168();
  v8 = sub_2416BB08C();
  v9 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  v10 = v9((char *)v41 - v6, v3);
  if ((v8 & 1) != 0)
  {
    v9((char *)v41 - v6, v3);
  }
  else
  {
    MEMORY[0x24BDAC7A8](v10);
    sub_2416B9B98();
    v11 = sub_2416BB08C();
    v9((char *)v41 - v6, v3);
    v9((char *)v41 - v6, v3);
    if ((v11 & 1) == 0)
    {
      sub_241601CC8(0, &qword_25713A180, (unint64_t *)&qword_25713A188, 0x24BDD1928, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
      v35 = v34;
      v36 = *(_QWORD *)(v34 - 8);
      MEMORY[0x24BDAC7A8](v34);
      v38 = (char *)v41 - v37;
      v39 = objc_msgSend((id)objc_opt_self(), sel_centimeters);
      sub_2416B9910();

      type metadata accessor for MedicalIDHeightFormatter();
      sub_2415C0788(0, (unint64_t *)&qword_25713A188);
      v33 = sub_2416BB3E0();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
      return v33;
    }
  }
  sub_241601CC8(0, &qword_25713A180, (unint64_t *)&qword_25713A188, 0x24BDD1928, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDCB590]);
  v13 = v12;
  v41[2] = v2;
  v14 = *(_QWORD *)(v12 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v17 = (void *)objc_opt_self();
  v18 = objc_msgSend(v17, sel_inches);
  sub_2416B9910();

  sub_2416B98EC();
  v20 = v19;
  v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21((char *)v41 - v16, v13);
  v22 = type metadata accessor for MedicalIDHeightFormatter();
  v41[1] = v41;
  MEMORY[0x24BDAC7A8](v22);
  v23 = objc_msgSend(v17, sel_feet);
  sub_2415C0788(0, (unint64_t *)&qword_25713A188);
  sub_2416B98E0();
  v24 = sub_2416BB3E0();
  v41[3] = v25;
  v42 = v24;
  v21((char *)v41 - v16, v13);
  fmod(v20, 12.0);
  MEMORY[0x24BDAC7A8](v26);
  v27 = objc_msgSend(v17, sel_inches);
  sub_2416B98E0();
  sub_2416BB3E0();
  v21((char *)v41 - v16, v13);
  v28 = sub_2416BB0D4();
  MEMORY[0x24BDAC7A8](v28);
  sub_2416BB0C8();
  sub_2416BB0BC();
  sub_2416BB0B0();
  swift_bridgeObjectRelease();
  sub_2416BB0BC();
  sub_2416BB0B0();
  swift_bridgeObjectRelease();
  sub_2416BB0BC();
  v29 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v29);
  sub_2416BB0E0();
  if (qword_257139300 != -1)
    swift_once();
  v30 = (void *)qword_25713A038;
  v31 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v31);
  v32 = v30;
  sub_2416B9C04();
  return sub_2416BB134();
}

id sub_2416017BC(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  id result;
  void *v6;
  void *v7;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1668]), sel_init);
  v4 = (void *)sub_2416B9BE0();
  objc_msgSend(v3, sel_setLocale_, v4);

  objc_msgSend(v3, sel_setUnitStyle_, a2);
  objc_msgSend(v3, sel_setUnitOptions_, 1);
  result = objc_msgSend(v3, sel_numberFormatter);
  if (result)
  {
    v6 = result;
    sub_2415C0788(0, (unint64_t *)&qword_257139A90);
    v7 = (void *)sub_2416BB41C();
    objc_msgSend(v6, sel_setRoundingIncrement_, v7);

    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDHeightFormatter()
{
  uint64_t result;

  result = qword_25713BE88;
  if (!qword_25713BE88)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MedicalIDHeightFormatter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_2416B9C10();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    v10 = v9;
  }
  return a1;
}

void destroy for MedicalIDHeightFormatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t initializeWithCopy for MedicalIDHeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = v8;
  return a1;
}

uint64_t assignWithCopy for MedicalIDHeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  return a1;
}

uint64_t initializeWithTake for MedicalIDHeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for MedicalIDHeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = sub_2416B9C10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDHeightFormatter()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_241601B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_2416B9C10();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDHeightFormatter()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_241601BDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_2416B9C10();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_241601C54()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2416B9C10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_241601CC8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_2415C0788(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t sub_241601D28()
{
  unint64_t result;

  result = qword_25713BED8;
  if (!qword_25713BED8)
  {
    result = MEMORY[0x2426994BC](&unk_2416C0A9C, &type metadata for MeasurementError);
    atomic_store(result, (unint64_t *)&qword_25713BED8);
  }
  return result;
}

MedicalIDUI::MedicalIDSpokenLanguage __swiftcall MedicalIDSpokenLanguage.init(id:)(MedicalIDUI::MedicalIDSpokenLanguage id)
{
  MedicalIDUI::MedicalIDSpokenLanguage *v1;

  *v1 = id;
  return id;
}

uint64_t MedicalIDSpokenLanguage.languageInCurrentLocale.getter()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void (*v7)(_BYTE *, uint64_t);
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE v23[4];
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *v0;
  v1 = v0[1];
  v3 = sub_2416B9C10();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  sub_2416B9C04();
  v6 = (void *)sub_2416B9BE0();
  v7 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v7(&v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], v3);
  v8 = (void *)sub_2416BB0F8();
  v9 = objc_msgSend(v6, sel_localizedStringForLanguage_context_, v8, 3);

  if (v9)
  {
    v10 = sub_2416BB128();

  }
  else
  {
    if (qword_2571395C0 != -1)
      swift_once();
    v11 = sub_2416B9D6C();
    __swift_project_value_buffer(v11, (uint64_t)qword_257147810);
    swift_bridgeObjectRetain_n();
    v12 = sub_2416B9D54();
    v13 = sub_2416BB380();
    v14 = v13;
    if (os_log_type_enabled(v12, v13))
    {
      v15 = swift_slowAlloc();
      v25 = swift_slowAlloc();
      v27 = v25;
      *(_DWORD *)v15 = 136315650;
      v24 = v14;
      v26 = sub_2415A8600(0xD000000000000017, 0x80000002416BEC20, &v27);
      sub_2416BB44C();
      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain();
      v26 = sub_2415A8600(v2, v1, &v27);
      sub_2416BB44C();
      v16 = swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 22) = 2080;
      MEMORY[0x24BDAC7A8](v16);
      v17 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
      sub_2416B9C04();
      v18 = sub_2416B9B8C();
      v20 = v19;
      v7(v17, v3);
      v26 = sub_2415A8600(v18, v20, &v27);
      sub_2416BB44C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_241599000, v12, (os_log_type_t)v24, "%s spoken language for %s returned nil for localizing in current locale %s.", (uint8_t *)v15, 0x20u);
      v21 = v25;
      swift_arrayDestroy();
      MEMORY[0x242699570](v21, -1, -1);
      MEMORY[0x242699570](v15, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  return v10;
}

uint64_t MedicalIDSpokenLanguage.languageInLanguageLocale.getter()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = *v0;
  v1 = v0[1];
  v3 = objc_allocWithZone(MEMORY[0x24BDBCEA0]);
  swift_bridgeObjectRetain();
  v4 = (void *)sub_2416BB0F8();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_initWithLocaleIdentifier_, v4);

  v6 = (void *)sub_2416BB0F8();
  v7 = objc_msgSend(v5, sel_localizedStringForLanguage_context_, v6, 3);

  if (v7)
  {
    v8 = sub_2416BB128();

  }
  else
  {
    if (qword_2571395C0 != -1)
      swift_once();
    v9 = sub_2416B9D6C();
    __swift_project_value_buffer(v9, (uint64_t)qword_257147810);
    swift_bridgeObjectRetain_n();
    v10 = sub_2416B9D54();
    v11 = sub_2416BB380();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v15 = v13;
      *(_DWORD *)v12 = 136315394;
      sub_2415A8600(0xD000000000000017, 0x80000002416BEC20, &v15);
      sub_2416BB44C();
      *(_WORD *)(v12 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_2415A8600(v2, v1, &v15);
      sub_2416BB44C();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_241599000, v10, v11, "%s spoken language for %s returned nil for localizing in that languages locale.", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242699570](v13, -1, -1);
      MEMORY[0x242699570](v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  return v8;
}

uint64_t MedicalIDSpokenLanguage.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDSpokenLanguage.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MedicalIDSpokenLanguage.id.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDSpokenLanguage.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_2416BB164();
  return swift_bridgeObjectRelease();
}

uint64_t static MedicalIDSpokenLanguage.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_2416BB644();
}

uint64_t MedicalIDSpokenLanguage.hashValue.getter()
{
  sub_2416BB6BC();
  swift_bridgeObjectRetain();
  sub_2416BB164();
  swift_bridgeObjectRelease();
  return sub_2416BB6EC();
}

uint64_t sub_24160246C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_241602478()
{
  sub_2416BB6BC();
  swift_bridgeObjectRetain();
  sub_2416BB164();
  swift_bridgeObjectRelease();
  return sub_2416BB6EC();
}

uint64_t sub_2416024D0()
{
  swift_bridgeObjectRetain();
  sub_2416BB164();
  return swift_bridgeObjectRelease();
}

uint64_t sub_241602514()
{
  sub_2416BB6BC();
  swift_bridgeObjectRetain();
  sub_2416BB164();
  swift_bridgeObjectRelease();
  return sub_2416BB6EC();
}

uint64_t sub_241602568(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_2416BB644();
}

uint64_t sub_241602598()
{
  return MEMORY[0x24BEE0D10];
}

unint64_t sub_2416025A8()
{
  unint64_t result;

  result = qword_25713BEF0;
  if (!qword_25713BEF0)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDSpokenLanguage, &type metadata for MedicalIDSpokenLanguage);
    atomic_store(result, (unint64_t *)&qword_25713BEF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDSpokenLanguage()
{
  return &type metadata for MedicalIDSpokenLanguage;
}

uint64_t sub_2416025FC(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aOngoing_1[8 * a1] == *(_QWORD *)&aOngoing_1[8 * a2]
    && *(_QWORD *)&aDidregisdidnot[8 * a1 + 16] == *(_QWORD *)&aDidregisdidnot[8 * a2 + 16])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2416BB644();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_241602680(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2416026CC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_241602730 + 4 * byte_2416BED04[a2]))(0x746553746F6ELL);
}

uint64_t sub_241602730(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x746553746F6ELL && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_2416BB644();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_2416027D4(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000015;
  else
    v3 = 0xD000000000000013;
  if (v2)
    v4 = 0x80000002416C3B50;
  else
    v4 = 0x80000002416C3B70;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000015;
  else
    v5 = 0xD000000000000013;
  if ((a2 & 1) != 0)
    v6 = 0x80000002416C3B70;
  else
    v6 = 0x80000002416C3B50;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2416BB644();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_24160287C(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2416028C8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2416029B0 + 4 * byte_2416BED10[a2]))(0x6C616E6F73726570);
}

uint64_t sub_2416029B0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C616E6F73726570 && v1 == 0xEC0000006F666E49)
    v2 = 1;
  else
    v2 = sub_2416BB644();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_241602AF4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_241602B40(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_241602B98 + 4 * byte_2416BED1C[a2]))(0x64656C62616E65);
}

uint64_t sub_241602B98(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x64656C62616E65 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_2416BB644();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t EditOrganDonationCellViewModel.__allocating_init(outOrganDonationStatus:hasStoredRegistrant:medicalIDDonorStatusProvider:organDonationRegistrationAvailable:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;

  v14 = swift_allocObject();
  EditOrganDonationCellViewModel.init(outOrganDonationStatus:hasStoredRegistrant:medicalIDDonorStatusProvider:organDonationRegistrationAvailable:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t sub_241602CA8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CAC();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 64);
  return result;
}

uint64_t sub_241602D1C()
{
  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CA0();
  return swift_release();
}

uint64_t sub_241602DAC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CAC();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

uint64_t sub_241602E20()
{
  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CA0();
  return swift_release();
}

void (*sub_241602EB0(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v1;
  return sub_241602ECC;
}

void sub_241602ECC(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(v2 + 16);
  *(_BYTE *)(v2 + 16) = *(_BYTE *)(a1 + 16);
  if (v3)
  {
    swift_getKeyPath();
    *(_QWORD *)a1 = v2;
    sub_241603D28();
    sub_2416B9CAC();
    swift_release();
    if ((*(_BYTE *)(v2 + 16) & 1) == 0)
      sub_241604570();
  }
}

uint64_t sub_241602F50()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CAC();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_241602FBC()
{
  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CA0();
  return swift_release();
}

void sub_24160304C(uint64_t a1, char a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = a2;
  if (v2 == 1)
  {
    swift_getKeyPath();
    sub_241603D28();
    sub_2416B9CAC();
    swift_release();
    if ((*(_BYTE *)(a1 + 16) & 1) == 0)
      sub_241604570();
  }
}

void (*sub_2416030DC(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  v4[5] = OBJC_IVAR____TtC11MedicalIDUI30EditOrganDonationCellViewModel___observationRegistrar;
  *v4 = v2;
  v4[6] = sub_241603D28();
  sub_2416B9CAC();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  sub_2416B9CC4();
  swift_release();
  v4[7] = sub_241602EB0((uint64_t)v4);
  return sub_2416031AC;
}

void sub_2416031AC(_QWORD *a1)
{
  sub_2415FD674(a1);
}

uint64_t sub_2416031B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CAC();
  result = swift_release();
  *a1 = *(_BYTE *)(v1 + 41);
  return result;
}

uint64_t sub_24160322C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CAC();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 41);
  return result;
}

uint64_t sub_2416032A0()
{
  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CA0();
  return swift_release();
}

void sub_241603330(char *a1)
{
  char v1;
  char v2;
  uint64_t KeyPath;

  v1 = *a1;
  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CAC();
  swift_release();
  sub_241602680(v1);
  if ((v2 & 1) == 0)
  {
    swift_getKeyPath();
    sub_2416B9CAC();
    swift_release();
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    sub_2416B9CA0();
    swift_release();
  }
}

void sub_241603458()
{
  uint64_t v0;
  char v1;

  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CAC();
  swift_release();
  sub_241602680(*(_BYTE *)(v0 + 64));
  if ((v1 & 1) == 0)
  {
    swift_getKeyPath();
    swift_retain();
    swift_retain();
    sub_2416B9CAC();
    swift_release();
    sub_241603DD0();
    sub_2416BAE1C();
    swift_release();
    swift_release();
    swift_getKeyPath();
    sub_2416B9CAC();
    swift_release();
    __asm { BR              X10 }
  }
}

void (*sub_241603714(uint64_t a1))(_BYTE *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 64);
  return sub_241603730;
}

void sub_241603730(_BYTE *a1, char a2)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5[2];
  char v6[2];

  v2 = *(_QWORD *)a1;
  v3 = a1[8];
  v4 = *(_BYTE *)(*(_QWORD *)a1 + 64);
  if ((a2 & 1) != 0)
  {
    v5[0] = a1[8];
    sub_241603330(v5);
    *(_BYTE *)(v2 + 64) = v3;
    v5[1] = v4;
  }
  else
  {
    v6[0] = a1[8];
    sub_241603330(v6);
    *(_BYTE *)(v2 + 64) = v3;
    v6[1] = v4;
  }
  sub_241603458();
}

uint64_t sub_2416037A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CAC();
  result = swift_release();
  *a1 = *(_BYTE *)(v1 + 64);
  return result;
}

uint64_t sub_241603814()
{
  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CA0();
  return swift_release();
}

void (*sub_2416038A4(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  v4[5] = OBJC_IVAR____TtC11MedicalIDUI30EditOrganDonationCellViewModel___observationRegistrar;
  *v4 = v2;
  v4[6] = sub_241603D28();
  sub_2416B9CAC();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  sub_2416B9CC4();
  swift_release();
  v4[7] = sub_241603714((uint64_t)v4);
  return sub_241603974;
}

void sub_241603974(_QWORD *a1)
{
  sub_2415FD674(a1);
}

uint64_t sub_241603980@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CAC();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 65);
  return result;
}

uint64_t sub_2416039F4()
{
  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CA0();
  return swift_release();
}

uint64_t sub_241603A84@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CAC();
  result = swift_release();
  *a1 = *(_BYTE *)(v1 + 65);
  return result;
}

void EditOrganDonationCellViewModel.DonateLifeFlowState.id.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

MedicalIDUI::EditOrganDonationCellViewModel::DonateLifeFlowState_optional __swiftcall EditOrganDonationCellViewModel.DonateLifeFlowState.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  MedicalIDUI::EditOrganDonationCellViewModel::DonateLifeFlowState_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2416BB614();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t EditOrganDonationCellViewModel.DonateLifeFlowState.rawValue.getter()
{
  char *v0;

  return *(_QWORD *)&aOngoing_1[8 * *v0];
}

uint64_t sub_241603B80(char *a1, char *a2)
{
  return sub_2416025FC(*a1, *a2);
}

uint64_t sub_241603B8C()
{
  return sub_24168227C();
}

uint64_t sub_241603B94()
{
  return sub_2416824F0();
}

uint64_t sub_241603B9C()
{
  return sub_241682AD8();
}

MedicalIDUI::EditOrganDonationCellViewModel::DonateLifeFlowState_optional sub_241603BA4(Swift::String *a1)
{
  return EditOrganDonationCellViewModel.DonateLifeFlowState.init(rawValue:)(*a1);
}

uint64_t sub_241603BB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EditOrganDonationCellViewModel.DonateLifeFlowState.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id sub_241603BD4()
{
  return objc_msgSend((id)objc_opt_self(), sel_hasStoredRegistrant);
}

id sub_241603BFC(uint64_t a1)
{
  return objc_msgSend((id)objc_opt_self(), sel_medicalIDOrganDonorStatus_, a1);
}

id sub_241603C38()
{
  return objc_msgSend((id)objc_opt_self(), sel_isOrganDonationRegistrationAvailable);
}

uint64_t EditOrganDonationCellViewModel.init(outOrganDonationStatus:hasStoredRegistrant:medicalIDDonorStatusProvider:organDonationRegistrationAvailable:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;

  v8 = v7;
  v15 = *a1;
  v16 = a1[1];
  v17 = *((_BYTE *)a1 + 16);
  *(_BYTE *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 41) = 0;
  *(_BYTE *)(v8 + 65) = 3;
  sub_2416B9CD0();
  *(_QWORD *)(v8 + 24) = v15;
  *(_QWORD *)(v8 + 32) = v16;
  *(_BYTE *)(v8 + 40) = v17;
  sub_241603DD0();
  MEMORY[0x242698604](&v19);
  *(_BYTE *)(v8 + 64) = v19;
  *(_QWORD *)(v8 + 72) = a2;
  *(_QWORD *)(v8 + 80) = a3;
  *(_QWORD *)(v8 + 48) = a4;
  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 88) = a6;
  *(_QWORD *)(v8 + 96) = a7;
  return v8;
}

unint64_t sub_241603D28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713B518;
  if (!qword_25713B518)
  {
    v1 = type metadata accessor for EditOrganDonationCellViewModel();
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for EditOrganDonationCellViewModel, v1);
    atomic_store(result, (unint64_t *)&qword_25713B518);
  }
  return result;
}

uint64_t type metadata accessor for EditOrganDonationCellViewModel()
{
  uint64_t result;

  result = qword_25713BF40;
  if (!qword_25713BF40)
    return swift_getSingletonMetadata();
  return result;
}

void sub_241603DB4()
{
  sub_24160500C();
}

void sub_241603DD0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713BF00)
  {
    v0 = sub_2416BAE58();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713BF00);
  }
}

uint64_t sub_241603E24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  if (((*(uint64_t (**)(void))(v0 + 88))() & 1) != 0)
  {
    if (((*(uint64_t (**)(void))(v0 + 72))() & 1) != 0)
    {
      return sub_2416041BC();
    }
    else
    {
      KeyPath = swift_getKeyPath();
      MEMORY[0x24BDAC7A8](KeyPath);
      sub_241603D28();
      sub_2416B9CA0();
      swift_release();
      v12 = swift_getKeyPath();
      MEMORY[0x24BDAC7A8](v12);
      sub_2416B9CA0();
      return swift_release();
    }
  }
  else
  {
    if (qword_2571395C0 != -1)
      swift_once();
    v3 = sub_2416B9D6C();
    __swift_project_value_buffer(v3, (uint64_t)qword_257147810);
    v4 = sub_2416B9D54();
    v5 = sub_2416BB38C();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc();
      v7 = swift_slowAlloc();
      v13 = v7;
      *(_DWORD *)v6 = 136315394;
      v8 = sub_2416BB704();
      sub_2415A8600(v8, v9, &v13);
      sub_2416BB44C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      sub_2415A8600(0xD00000000000001BLL, 0x80000002416C4D80, &v13);
      sub_2416BB44C();
      _os_log_impl(&dword_241599000, v4, v5, "[%s] %s Organ donation registration is not available.", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242699570](v7, -1, -1);
      MEMORY[0x242699570](v6, -1, -1);
    }

    swift_getKeyPath();
    v13 = v1;
    sub_241603D28();
    sub_2416B9CAC();
    swift_release();
    v10 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v10);
    v13 = v1;
    sub_2416B9CA0();
    return swift_release();
  }
}

uint64_t sub_2416041BC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t KeyPath;
  uint64_t v18;

  v1 = v0;
  v2 = (void *)(*(uint64_t (**)(uint64_t))(v0 + 48))(3);
  v3 = v2;
  if (v2 && (unint64_t)objc_msgSend(v2, sel_integerValue) > 2)
  {
    if (qword_2571395C0 != -1)
      swift_once();
    v5 = sub_2416B9D6C();
    __swift_project_value_buffer(v5, (uint64_t)qword_257147810);
    v6 = v3;
    v7 = sub_2416B9D54();
    v8 = sub_2416BB374();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v18 = v10;
      *(_DWORD *)v9 = 136315650;
      v11 = sub_2416BB704();
      sub_2415A8600(v11, v12, &v18);
      sub_2416BB44C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      sub_2415A8600(0xD000000000000023, 0x80000002416C4D50, &v18);
      sub_2416BB44C();
      *(_WORD *)(v9 + 22) = 2080;
      sub_241604FA8();
      v13 = v6;
      v14 = sub_2416BB140();
      sub_2415A8600(v14, v15, &v18);
      sub_2416BB44C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_241599000, v7, v8, "[%s] %s Could not create organ donation status from %s", (uint8_t *)v9, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x242699570](v10, -1, -1);
      MEMORY[0x242699570](v9, -1, -1);

    }
    else
    {

    }
    swift_getKeyPath();
    v18 = v1;
    sub_241603D28();
    sub_2416B9CAC();
    swift_release();
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    v18 = v1;
    sub_2416B9CA0();

  }
  else
  {
    v4 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v4);
    v18 = v0;
    sub_241603D28();
    sub_2416B9CA0();

  }
  return swift_release();
}

void sub_241604570()
{
  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CAC();
  swift_release();
  __asm { BR              X10 }
}

uint64_t sub_2416045F8()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath();
  *(_QWORD *)(v1 - 72) = v0;
  sub_2416B9CAC();
  swift_release();
  return ((uint64_t (*)(unint64_t))((char *)sub_241604658
                                                   + 4 * byte_2416BED2C[*(unsigned __int8 *)(v0 + 64)]))(0xD000000000000011);
}

uint64_t sub_241604658()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t KeyPath;
  uint64_t v4;

  v2 = sub_2416BB644();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_getKeyPath();
    *(_QWORD *)(v1 - 72) = v0;
    sub_2416B9CAC();
    swift_release();
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    *(_QWORD *)(v1 - 72) = v0;
    sub_2416B9CA0();
    swift_release();
  }
  v4 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v4);
  *(_QWORD *)(v1 - 72) = v0;
  sub_2416B9CA0();
  return swift_release();
}

uint64_t sub_2416047D4()
{
  uint64_t v0;
  uint64_t v1;

  swift_retain();
  v1 = sub_241604BF8((uint64_t)&unk_251193A08, v0);
  swift_release();
  return v1;
}

uint64_t sub_241604828(char a1)
{
  uint64_t KeyPath;
  uint64_t v3;

  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CA0();
  if ((a1 & 1) == 0)
  {
    swift_release();
    swift_getKeyPath();
    sub_2416B9CAC();
  }
  swift_release();
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  sub_2416B9CA0();
  swift_release();
  v3 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v3);
  sub_241603D28();
  sub_2416B9CA0();
  return swift_release();
}

uint64_t sub_241604A88()
{
  swift_getKeyPath();
  sub_241603D28();
  sub_2416B9CA0();
  return swift_release();
}

uint64_t EditOrganDonationCellViewModel.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI30EditOrganDonationCellViewModel___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t EditOrganDonationCellViewModel.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI30EditOrganDonationCellViewModel___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_241604BF8(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;

  v3 = 0;
  v4 = *(_QWORD *)(result + 16);
  v5 = result + 32;
  v6 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v3 <= v4)
    v7 = v4;
  else
    v7 = v3;
  while (1)
  {
    if (v4 == v3)
      return v6;
    v8 = v3;
    if (v7 == v3)
      break;
    v9 = *(unsigned __int8 *)(v5 + v3);
    if (v9 == 3)
    {
      result = (*(uint64_t (**)(void))(a2 + 88))();
      v3 = v8 + 1;
      if ((result & 1) == 0)
        continue;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      result = sub_2415FE554(0, *(_QWORD *)(v6 + 16) + 1, 1);
    v11 = *(_QWORD *)(v6 + 16);
    v10 = *(_QWORD *)(v6 + 24);
    if (v11 >= v10 >> 1)
      result = sub_2415FE554(v10 > 1, v11 + 1, 1);
    v3 = v8 + 1;
    *(_QWORD *)(v6 + 16) = v11 + 1;
    *(_BYTE *)(v6 + v11 + 32) = v9;
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

void sub_241604D00()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 65) = *(_BYTE *)(v0 + 24);
}

unint64_t sub_241604D1C()
{
  unint64_t result;

  result = qword_25713BF08;
  if (!qword_25713BF08)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for EditOrganDonationCellViewModel.DonateLifeFlowState, &type metadata for EditOrganDonationCellViewModel.DonateLifeFlowState);
    atomic_store(result, (unint64_t *)&qword_25713BF08);
  }
  return result;
}

unint64_t sub_241604D64()
{
  unint64_t result;

  result = qword_25713BF10;
  if (!qword_25713BF10)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for EditOrganDonationCellViewModel.DonateLifeFlowState, &type metadata for EditOrganDonationCellViewModel.DonateLifeFlowState);
    atomic_store(result, (unint64_t *)&qword_25713BF10);
  }
  return result;
}

uint64_t sub_241604DA8()
{
  return type metadata accessor for EditOrganDonationCellViewModel();
}

uint64_t sub_241604DB0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2416B9CDC();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for EditOrganDonationCellViewModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.isDonateLifeFlowPresented.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.isDonateLifeFlowPresented.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.isDonateLifeFlowPresented.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.organDonationStatus.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.organDonationStatus.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.organDonationStatus.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.donateLifeFlowState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.__allocating_init(outOrganDonationStatus:hasStoredRegistrant:medicalIDDonorStatusProvider:organDonationRegistrationAvailable:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.organDonationOptions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.registrationCompleted(registered:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.cancelButtonTapped()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t storeEnumTagSinglePayload for EditOrganDonationCellViewModel.DonateLifeFlowState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_241604F28 + 4 * byte_2416BED35[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_241604F5C + 4 * byte_2416BED30[v4]))();
}

uint64_t sub_241604F5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_241604F64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x241604F6CLL);
  return result;
}

uint64_t sub_241604F78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x241604F80);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_241604F84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_241604F8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EditOrganDonationCellViewModel.DonateLifeFlowState()
{
  return &type metadata for EditOrganDonationCellViewModel.DonateLifeFlowState;
}

void sub_241604FA8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C108)
  {
    sub_24159F618();
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C108);
  }
}

void sub_241604FFC()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 41) = *(_BYTE *)(v0 + 24);
}

void sub_24160500C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;

  v1 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v2 = v3;
  sub_241603330(&v3);
  *(_BYTE *)(v1 + 64) = v2;
  sub_241603458();
}

uint64_t sub_241605068()
{
  return sub_2415E8E28();
}

void sub_24160507C()
{
  sub_241604D00();
}

void sub_241605090()
{
  sub_241604FFC();
}

uint64_t sub_2416050A4@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[8];

  v3 = (_OWORD *)*a1;
  swift_getKeyPath();
  *(_QWORD *)&v16[0] = v3;
  sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v4 = v3[1];
  v5 = v3[2];
  v6 = v3[4];
  v16[2] = v3[3];
  v16[3] = v6;
  v7 = v3[5];
  v8 = v3[6];
  v9 = v3[8];
  v16[6] = v3[7];
  v16[7] = v9;
  v16[4] = v7;
  v16[5] = v8;
  v16[0] = v4;
  v16[1] = v5;
  v10 = v3[1];
  v11 = v3[2];
  v12 = v3[4];
  a2[2] = v3[3];
  a2[3] = v12;
  *a2 = v10;
  a2[1] = v11;
  v13 = v3[5];
  v14 = v3[6];
  a2[6] = v3[7];
  a2[7] = v9;
  a2[4] = v13;
  a2[5] = v14;
  return sub_2415DA4E0((uint64_t)v16);
}

uint64_t sub_241605184(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[8];

  v1 = a1[5];
  v6[4] = a1[4];
  v6[5] = v1;
  v2 = a1[7];
  v6[6] = a1[6];
  v6[7] = v2;
  v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  v4 = a1[3];
  v6[2] = a1[2];
  v6[3] = v4;
  swift_getKeyPath();
  sub_2415DA4E0((uint64_t)v6);
  sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CA0();
  sub_2415DA580((uint64_t)v6);
  return swift_release();
}

uint64_t sub_241605258@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  swift_getKeyPath();
  *(_QWORD *)&v11[0] = v1;
  sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v4 = v1[6];
  v14 = v1[5];
  v3 = v14;
  v15 = v4;
  v6 = v1[8];
  v16 = v1[7];
  v5 = v16;
  v17 = v6;
  v7 = v1[2];
  v11[0] = v1[1];
  v11[1] = v7;
  v9 = v1[4];
  v12 = v1[3];
  v8 = v12;
  v13 = v9;
  *a1 = v11[0];
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v3;
  a1[5] = v4;
  a1[6] = v5;
  a1[7] = v6;
  return sub_2415DA4E0((uint64_t)v11);
}

uint64_t type metadata accessor for ContactLabelEditViewModel(uint64_t a1)
{
  return sub_2415C5864(a1, qword_25713C150);
}

uint64_t sub_241605344(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[8];

  v1 = a1[5];
  v6[4] = a1[4];
  v6[5] = v1;
  v2 = a1[7];
  v6[6] = a1[6];
  v6[7] = v2;
  v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  v4 = a1[3];
  v6[2] = a1[2];
  v6[3] = v4;
  swift_getKeyPath();
  sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CA0();
  sub_2415DA580((uint64_t)v6);
  return swift_release();
}

uint64_t sub_241605410(_OWORD *a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[8];

  swift_beginAccess();
  v4 = a1[6];
  v15[4] = a1[5];
  v15[5] = v4;
  v5 = a1[8];
  v15[6] = a1[7];
  v15[7] = v5;
  v6 = a1[2];
  v15[0] = a1[1];
  v15[1] = v6;
  v7 = a1[4];
  v15[2] = a1[3];
  v15[3] = v7;
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[3];
  a1[3] = a2[2];
  a1[4] = v10;
  a1[1] = v8;
  a1[2] = v9;
  v11 = a2[4];
  v12 = a2[5];
  v13 = a2[7];
  a1[7] = a2[6];
  a1[8] = v13;
  a1[5] = v11;
  a1[6] = v12;
  sub_2415DA4E0((uint64_t)a2);
  return sub_2415DA580((uint64_t)v15);
}

uint64_t sub_2416054AC()
{
  uint64_t v0;

  return sub_241605410(*(_OWORD **)(v0 + 16), *(__int128 **)(v0 + 24));
}

void (*sub_2416054C4(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  v4[5] = OBJC_IVAR____TtC11MedicalIDUI25ContactLabelEditViewModel___observationRegistrar;
  *v4 = v2;
  v4[6] = sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CAC();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  sub_2416B9CC4();
  swift_release();
  v4[7] = sub_2415C38E8();
  return sub_2416055AC;
}

void sub_2416055AC(_QWORD *a1)
{
  sub_2415FD674(a1);
}

uint64_t (*sub_2416055B8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_2416055F4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CAC();
  swift_release();
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 144);
  return result;
}

uint64_t sub_241605694()
{
  swift_getKeyPath();
  sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CA0();
  return swift_release();
}

uint64_t sub_24160573C()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 144);
}

uint64_t sub_2416057DC()
{
  swift_getKeyPath();
  sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CA0();
  return swift_release();
}

uint64_t sub_241605884()
{
  return sub_241608CD0();
}

void (*sub_241605898(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  v4[5] = OBJC_IVAR____TtC11MedicalIDUI25ContactLabelEditViewModel___observationRegistrar;
  *v4 = v2;
  v4[6] = sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CAC();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  sub_2416B9CC4();
  swift_release();
  v4[7] = sub_2416055B8();
  return sub_241605980;
}

void sub_241605980(_QWORD *a1)
{
  sub_2415FD674(a1);
}

uint64_t ContactLabelEditViewModel.__allocating_init(medicalIDEmergencyContact:)(_OWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = swift_allocObject();
  *(_BYTE *)(v2 + 144) = 0;
  sub_2416B9CD0();
  v3 = a1[5];
  *(_OWORD *)(v2 + 80) = a1[4];
  *(_OWORD *)(v2 + 96) = v3;
  v4 = a1[7];
  *(_OWORD *)(v2 + 112) = a1[6];
  *(_OWORD *)(v2 + 128) = v4;
  v5 = a1[1];
  *(_OWORD *)(v2 + 16) = *a1;
  *(_OWORD *)(v2 + 32) = v5;
  v6 = a1[3];
  *(_OWORD *)(v2 + 48) = a1[2];
  *(_OWORD *)(v2 + 64) = v6;
  return v2;
}

uint64_t ContactLabelEditViewModel.init(medicalIDEmergencyContact:)(_OWORD *a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_BYTE *)(v1 + 144) = 0;
  sub_2416B9CD0();
  v3 = a1[5];
  *(_OWORD *)(v1 + 80) = a1[4];
  *(_OWORD *)(v1 + 96) = v3;
  v4 = a1[7];
  *(_OWORD *)(v1 + 112) = a1[6];
  *(_OWORD *)(v1 + 128) = v4;
  v5 = a1[1];
  *(_OWORD *)(v1 + 16) = *a1;
  *(_OWORD *)(v1 + 32) = v5;
  v6 = a1[3];
  *(_OWORD *)(v1 + 48) = a1[2];
  *(_OWORD *)(v1 + 64) = v6;
  return v1;
}

uint64_t sub_241605A48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_getKeyPath();
  sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v2 = v0[2];
  v1 = v0[3];
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  sub_2416B9CAC();
  swift_release();
  if (v0[9])
    v3 = v0[8];
  else
    v3 = 0;
  if (v1)
    v4 = v2;
  else
    v4 = v3;
  swift_bridgeObjectRetain();
  return v4;
}

_OWORD *ContactLabelEditViewModel.deinit()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  char *v5;
  uint64_t v6;
  _OWORD v8[8];

  v1 = v0[6];
  v8[4] = v0[5];
  v8[5] = v1;
  v2 = v0[8];
  v8[6] = v0[7];
  v8[7] = v2;
  v3 = v0[2];
  v8[0] = v0[1];
  v8[1] = v3;
  v4 = v0[4];
  v8[2] = v0[3];
  v8[3] = v4;
  sub_2415DA580((uint64_t)v8);
  v5 = (char *)v0 + OBJC_IVAR____TtC11MedicalIDUI25ContactLabelEditViewModel___observationRegistrar;
  v6 = sub_2416B9CDC();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return v0;
}

uint64_t ContactLabelEditViewModel.__deallocating_deinit()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  char *v5;
  uint64_t v6;
  _OWORD v8[8];

  v1 = v0[6];
  v8[4] = v0[5];
  v8[5] = v1;
  v2 = v0[8];
  v8[6] = v0[7];
  v8[7] = v2;
  v3 = v0[2];
  v8[0] = v0[1];
  v8[1] = v3;
  v4 = v0[4];
  v8[2] = v0[3];
  v8[3] = v4;
  sub_2415DA580((uint64_t)v8);
  v5 = (char *)v0 + OBJC_IVAR____TtC11MedicalIDUI25ContactLabelEditViewModel___observationRegistrar;
  v6 = sub_2416B9CDC();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance();
}

uint64_t sub_241605C4C()
{
  return type metadata accessor for ContactLabelEditViewModel(0);
}

uint64_t sub_241605C54()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2416B9CDC();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ContactLabelEditViewModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ContactLabelEditViewModel.medicalIDEmergencyContact.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ContactLabelEditViewModel.medicalIDEmergencyContact.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ContactLabelEditViewModel.medicalIDEmergencyContact.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ContactLabelEditViewModel.isSheetViewPresented.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of ContactLabelEditViewModel.isSheetViewPresented.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of ContactLabelEditViewModel.isSheetViewPresented.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of ContactLabelEditViewModel.__allocating_init(medicalIDEmergencyContact:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of ContactLabelEditViewModel.titleAndSubtitle.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t sub_241605D3C(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[8];

  v1 = a1[5];
  v6[4] = a1[4];
  v6[5] = v1;
  v2 = a1[7];
  v6[6] = a1[6];
  v6[7] = v2;
  v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  v4 = a1[3];
  v6[2] = a1[2];
  v6[3] = v4;
  sub_2415DA4E0((uint64_t)v6);
  sub_24159D7F0(0, &qword_25713B128, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF4870]);
  return sub_2416BAE1C();
}

uint64_t sub_241605E00(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[3];
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a1 + 24) = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (_QWORD *)(a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    swift_retain();
    swift_retain();
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_2416BA144();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v5;
}

uint64_t sub_241605F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  swift_release();
  swift_release();
  v4 = a1 + *(int *)(a2 + 24);
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v5 = sub_2416BA144();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_241605FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (_QWORD *)(a1 + v5);
  v7 = (_QWORD *)(a2 + v5);
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_retain();
  swift_retain();
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_2416BA144();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    *v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *sub_2416060BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 24);
    v8 = (_QWORD *)((char *)a1 + v7);
    v9 = (_QWORD *)((char *)a2 + v7);
    v10 = (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50];
    v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415C2970((uint64_t)a1 + v7, (uint64_t)&qword_25713A5E0, (uint64_t)MEMORY[0x24BDECF50], (uint64_t)MEMORY[0x24BDEB560], (uint64_t (*)(_QWORD))sub_24159D6B0);
    sub_24159D6B0(0, &qword_25713A5E0, v10, v11);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = sub_2416BA144();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v9, v12);
    }
    else
    {
      *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_2416061F4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v9 = v8;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_2416BA144();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v6, v7, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t sub_2416062B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 24);
    v7 = (void *)(a1 + v6);
    v8 = (const void *)(a2 + v6);
    v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50];
    v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_2415C2970(a1 + v6, (uint64_t)&qword_25713A5E0, (uint64_t)MEMORY[0x24BDECF50], (uint64_t)MEMORY[0x24BDEB560], (uint64_t (*)(_QWORD))sub_24159D6B0);
    sub_24159D6B0(0, &qword_25713A5E0, v9, v10);
    v12 = v11;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v13 = sub_2416BA144();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v7, v8, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_2416063D4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416063E0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_24159D6B0(0, qword_25713C260, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], MEMORY[0x24BDEB580]);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_241606474()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_241606480(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_24159D6B0(0, qword_25713C260, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], MEMORY[0x24BDEB580]);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ContactLabelEditView(uint64_t a1)
{
  return sub_2415C5864(a1, qword_25713C2C0);
}

void sub_241606520()
{
  unint64_t v0;

  sub_24159D6B0(319, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_2416065B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2416065C8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  v45 = a1;
  v2 = type metadata accessor for ContactLabelEditView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  sub_241608140();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24160878C(0);
  v46 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416087A8(0);
  v14 = *(_QWORD *)(v13 - 8);
  v43 = v13;
  v44 = v14;
  MEMORY[0x24BDAC7A8](v13);
  v51 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BEF64((uint64_t)v1, v47, type metadata accessor for ContactLabelEditView);
  v16 = *(unsigned __int8 *)(v3 + 80);
  v49 = ((v16 + 16) & ~v16) + v4;
  v50 = (v16 + 16) & ~v16;
  v17 = v50;
  v48 = v16 | 7;
  v18 = swift_allocObject();
  sub_2415A85BC((uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, type metadata accessor for ContactLabelEditView);
  v52 = v1;
  sub_2415A39C0(0, &qword_25713C308, sub_2416081B8, (void (*)(uint64_t))sub_2415EF9C8);
  sub_24160868C();
  sub_2416BAD50();
  LODWORD(v4) = sub_2416BA654();
  v19 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v40 = v12;
  v19(v12, v9, v6);
  *(_DWORD *)&v12[*(int *)(v46 + 36)] = v4;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v20 = v1[1];
  v21 = v1;
  *(_QWORD *)&v61 = *v1;
  *((_QWORD *)&v61 + 1) = v20;
  sub_24159D6B0(0, &qword_25713C3B8, type metadata accessor for ContactLabelEditViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD2C();
  v22 = v69;
  v23 = v70;
  swift_getKeyPath();
  v69 = v22;
  *(_QWORD *)&v70 = v23;
  sub_24159D6B0(0, &qword_25713C3C0, type metadata accessor for ContactLabelEditViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  sub_2416BAE28();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v24 = v47;
  sub_2415BEF64((uint64_t)v1, v47, type metadata accessor for ContactLabelEditView);
  v25 = swift_allocObject();
  sub_2415A85BC(v24, v25 + v50, type metadata accessor for ContactLabelEditView);
  v41 = type metadata accessor for RelationshipPickerView();
  v26 = sub_241608860();
  v42 = sub_24159CE88(&qword_25713C3B0, (uint64_t (*)(uint64_t))type metadata accessor for RelationshipPickerView, (uint64_t)&unk_2416C3610);
  v27 = v46;
  v28 = (uint64_t)v40;
  sub_2416BAB70();
  swift_release();
  swift_release();
  swift_release();
  sub_2415A6154(v28, (uint64_t (*)(_QWORD))sub_24160878C);
  v29 = v21[1];
  *(_QWORD *)&v69 = *v21;
  *((_QWORD *)&v69 + 1) = v29;
  sub_2416BAD14();
  v30 = (_OWORD *)v61;
  swift_getKeyPath();
  *(_QWORD *)&v69 = v30;
  sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v31 = v30[6];
  v65 = v30[5];
  v66 = v31;
  v32 = v30[8];
  v67 = v30[7];
  v68 = v32;
  v33 = v30[2];
  v61 = v30[1];
  v62 = v33;
  v34 = v30[4];
  v63 = v30[3];
  v64 = v34;
  sub_2415DA4E0((uint64_t)&v61);
  swift_release();
  v57 = v65;
  v58 = v66;
  v59 = v67;
  v60 = v68;
  v53 = v61;
  v54 = v62;
  v55 = v63;
  v56 = v64;
  v35 = v47;
  sub_2415BEF64((uint64_t)v21, v47, type metadata accessor for ContactLabelEditView);
  v36 = swift_allocObject();
  sub_2415A85BC(v35, v36 + v50, type metadata accessor for ContactLabelEditView);
  *(_QWORD *)&v69 = v27;
  *((_QWORD *)&v69 + 1) = v41;
  *(_QWORD *)&v70 = v26;
  *((_QWORD *)&v70 + 1) = v42;
  swift_getOpaqueTypeConformance2();
  sub_2415DAAD0();
  v37 = v43;
  v38 = v51;
  sub_2416BABDC();
  swift_release();
  v73 = v57;
  v74 = v58;
  v75 = v59;
  v76 = v60;
  v69 = v53;
  v70 = v54;
  v71 = v55;
  v72 = v56;
  sub_2415DA580((uint64_t)&v69);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v38, v37);
}

uint64_t sub_241606B38()
{
  sub_24159D6B0(0, &qword_25713C3B8, type metadata accessor for ContactLabelEditViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  swift_getKeyPath();
  sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CA0();
  swift_release();
  return swift_release();
}

uint64_t sub_241606C24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v17;

  v2 = sub_2416BA1B0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241608270(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416081B8(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241606DD8((uint64_t)v8);
  sub_2416BA1A4();
  sub_241608524();
  sub_24159CE88(&qword_25713C380, (uint64_t (*)(uint64_t))MEMORY[0x24BDED868], MEMORY[0x24BDED858]);
  sub_2416BAA14();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_2415A6154((uint64_t)v8, (uint64_t (*)(_QWORD))sub_241608270);
  v14 = sub_2416BA654();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(a1, v13, v10);
  sub_2415A39C0(0, &qword_25713C308, sub_2416081B8, (void (*)(uint64_t))sub_2415EF9C8);
  *(_DWORD *)(a1 + *(int *)(v15 + 36)) = v14;
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void sub_241606DD8(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  _OWORD v60[7];
  __int128 v61;
  _QWORD *v62;

  v2 = v1;
  v56 = a1;
  sub_241608AB4(0, &qword_25713C3C8, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x24BDEF380]);
  v54 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v55 = (char **)((char *)&v44 - v4);
  v50 = sub_2416BA6B4();
  v49 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24160832C();
  v51 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416082A0(0);
  v46 = v10;
  v45 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v52 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241608284(0);
  v53 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v44 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v47 = (uint64_t)&v44 - v15;
  v16 = v1[1];
  *(_QWORD *)&v60[0] = *v1;
  *((_QWORD *)&v60[0] + 1) = v16;
  sub_24159D6B0(0, &qword_25713C3B8, type metadata accessor for ContactLabelEditViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v48 = v17;
  sub_2416BAD14();
  v18 = v62;
  swift_getKeyPath();
  *(_QWORD *)&v60[0] = v18;
  sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v20 = v18[2];
  v19 = v18[3];
  swift_getKeyPath();
  *(_QWORD *)&v60[0] = v18;
  swift_bridgeObjectRetain();
  sub_2416B9CAC();
  swift_release();
  v22 = v18[8];
  v21 = v18[9];
  if (v19)
  {
    swift_bridgeObjectRetain();
    v23 = v21;
  }
  else
  {
    if (!v21)
    {
      swift_release();
      v43 = v55;
      *v55 = 0xD000000000000051;
      v43[1] = 0x80000002416C4E10;
      swift_storeEnumTagMultiPayload();
      sub_24160858C();
      sub_241608648();
      sub_2416BA57C();
      return;
    }
    swift_bridgeObjectRetain();
    v23 = 0;
    v20 = v22;
    v19 = v21;
    v22 = 0;
  }
  swift_release();
  v24 = sub_2416BA51C();
  if (qword_257139460 != -1)
    swift_once();
  v25 = qword_25713C110;
  *(_QWORD *)v9 = v24;
  *((_QWORD *)v9 + 1) = v25;
  v9[16] = 0;
  sub_241608B98();
  sub_2416077E4(v20, v19, v2, v22, v23, (uint64_t)&v9[*(int *)(v26 + 44)]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2416BA69C();
  v27 = sub_24159CE88(&qword_25713C360, (uint64_t (*)(uint64_t))sub_24160832C, MEMORY[0x24BDF4700]);
  v28 = v52;
  v29 = v51;
  sub_2416BAB04();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v6, v50);
  sub_2415A6154((uint64_t)v9, (uint64_t (*)(_QWORD))sub_24160832C);
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_2416BCF30;
  v31 = v2[1];
  *(_QWORD *)&v60[0] = *v2;
  *((_QWORD *)&v60[0] + 1) = v31;
  sub_2416BAD14();
  v32 = v59;
  swift_getKeyPath();
  *(_QWORD *)&v60[0] = v32;
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v33 = v32[6];
  v60[4] = v32[5];
  v60[5] = v33;
  v34 = v32[8];
  v60[6] = v32[7];
  v61 = v34;
  v35 = v32[2];
  v60[0] = v32[1];
  v60[1] = v35;
  v36 = v32[4];
  v60[2] = v32[3];
  v60[3] = v36;
  sub_2415DA4E0((uint64_t)v60);
  swift_release();
  v37 = v61;
  swift_bridgeObjectRetain();
  sub_2415DA580((uint64_t)v60);
  *(_OWORD *)(v30 + 32) = v37;
  v38 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v39 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v39)
  {
    sub_2416BB128();

    v57 = v29;
    v58 = v27;
    swift_getOpaqueTypeConformance2();
    v40 = (uint64_t)v44;
    v41 = v46;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v28, v41);
    v42 = v47;
    sub_2415A85BC(v40, v47, (uint64_t (*)(_QWORD))sub_241608284);
    sub_2415BEF64(v42, (uint64_t)v55, (uint64_t (*)(_QWORD))sub_241608284);
    swift_storeEnumTagMultiPayload();
    sub_24160858C();
    sub_241608648();
    sub_2416BA57C();
    sub_2415A6154(v42, (uint64_t (*)(_QWORD))sub_241608284);
  }
  else
  {
    __break(1u);
  }
}

void sub_24160747C(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  id v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[6];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  *((_QWORD *)&v49 + 1) = a1[1];
  sub_24159D6B0(0, &qword_25713C3B8, type metadata accessor for ContactLabelEditViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  swift_getKeyPath();
  *(_QWORD *)&v49 = v37;
  sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v3 = *(_OWORD *)(v37 + 96);
  v46[4] = *(_OWORD *)(v37 + 80);
  v46[5] = v3;
  v4 = *(_OWORD *)(v37 + 128);
  v47 = *(_OWORD *)(v37 + 112);
  v48 = v4;
  v5 = *(_OWORD *)(v37 + 32);
  v46[0] = *(_OWORD *)(v37 + 16);
  v46[1] = v5;
  v6 = *(_OWORD *)(v37 + 64);
  v46[2] = *(_OWORD *)(v37 + 48);
  v46[3] = v6;
  sub_2415DA4E0((uint64_t)v46);
  swift_release();
  v21 = (void *)*((_QWORD *)&v47 + 1);
  v7 = *((id *)&v47 + 1);
  sub_2415DA580((uint64_t)v46);
  v8 = a1[1];
  *(_QWORD *)&v37 = *a1;
  *((_QWORD *)&v37 + 1) = v8;
  sub_2416BAD2C();
  v9 = v49;
  v10 = v50;
  swift_getKeyPath();
  v49 = v9;
  *(_QWORD *)&v50 = v10;
  v11 = MEMORY[0x24BDF4870];
  sub_24159D6B0(0, &qword_25713C3C0, type metadata accessor for ContactLabelEditViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  sub_2416BAE28();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v55 = v43;
  v56 = v44;
  v57 = v45;
  v51 = v39;
  v52 = v40;
  v53 = v41;
  v54 = v42;
  v49 = v37;
  v50 = v38;
  swift_getKeyPath();
  v31 = v56;
  v32 = v57;
  v26 = v51;
  v27 = v52;
  v29 = v54;
  v30 = v55;
  v28 = v53;
  v24 = v49;
  v25 = v50;
  sub_24159D7F0(0, &qword_25713B128, (uint64_t)&type metadata for MedicalIDEmergencyContact, (uint64_t (*)(_QWORD, uint64_t))v11);
  sub_2416BAE28();
  swift_release();
  sub_2415E0520((uint64_t)&v49);
  v12 = v33;
  v13 = v34;
  v15 = v35;
  v14 = v36;
  *((_QWORD *)&v24 + 1) = a1[1];
  sub_2416BAD14();
  swift_getKeyPath();
  *(_QWORD *)&v24 = v23;
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v16 = v23[6];
  v28 = v23[5];
  v29 = v16;
  v17 = v23[8];
  v30 = v23[7];
  v31 = v17;
  v18 = v23[2];
  v24 = v23[1];
  v25 = v18;
  v19 = v23[4];
  v26 = v23[3];
  v27 = v19;
  sub_2415DA4E0((uint64_t)&v24);
  swift_release();
  v20 = v31;
  swift_bridgeObjectRetain();
  sub_2415DA580((uint64_t)&v24);
  sub_2416AC924(v21, v12, v13, v15, v14, v20, *((uint64_t *)&v20 + 1), a2);
}

void sub_2416077E4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  void *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t (*v104)(void);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _OWORD *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _OWORD v142[7];
  __int128 v143;

  v119 = a5;
  v111 = a4;
  v121 = a3;
  v116 = a6;
  sub_241608458();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v117 = (uint64_t)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v114 = (uint64_t)&v106 - v11;
  sub_241608F0C(0, (unint64_t *)&qword_25713B320, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
  v112 = *(_QWORD *)(v12 - 8);
  v113 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v115 = (uint64_t)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v108 = (char *)&v106 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v107 = (uint64_t)&v106 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v118 = (char *)&v106 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v123 = (uint64_t)&v106 - v21;
  *(_QWORD *)&v142[0] = a1;
  *((_QWORD *)&v142[0] + 1) = a2;
  v22 = sub_2415C343C();
  swift_bridgeObjectRetain();
  v109 = v22;
  v23 = sub_2416BA9D8();
  v25 = v24;
  v27 = v26 & 1;
  sub_2416BA87C();
  v28 = sub_2416BA9C0();
  v30 = v29;
  v32 = v31;
  v34 = v33;
  swift_release();
  sub_2415A431C(v23, v25, v27);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v134 = v28;
  *((_QWORD *)&v134 + 1) = v30;
  LOBYTE(v135) = v32 & 1;
  *((_QWORD *)&v135 + 1) = v34;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v36 = v35;
  v37 = swift_allocObject();
  v110 = xmmword_2416BCC80;
  *(_OWORD *)(v37 + 16) = xmmword_2416BCC80;
  v38 = v121[1];
  *(_QWORD *)&v142[0] = *v121;
  *((_QWORD *)&v142[0] + 1) = v38;
  sub_24159D6B0(0, &qword_25713C3B8, type metadata accessor for ContactLabelEditViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v122 = v39;
  sub_2416BAD14();
  v40 = (_OWORD *)v125;
  swift_getKeyPath();
  *(_QWORD *)&v142[0] = v40;
  v41 = sub_24159CE88(&qword_25713C120, type metadata accessor for ContactLabelEditViewModel, (uint64_t)&protocol conformance descriptor for ContactLabelEditViewModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v42 = v40[6];
  v142[4] = v40[5];
  v142[5] = v42;
  v43 = v40[8];
  v142[6] = v40[7];
  v143 = v43;
  v44 = v40[2];
  v142[0] = v40[1];
  v142[1] = v44;
  v45 = v40[4];
  v142[2] = v40[3];
  v142[3] = v45;
  sub_2415DA4E0((uint64_t)v142);
  swift_release();
  v46 = v143;
  swift_bridgeObjectRetain();
  sub_2415DA580((uint64_t)v142);
  *(_OWORD *)(v37 + 32) = v46;
  *(_QWORD *)(v37 + 48) = 1701667150;
  *(_QWORD *)(v37 + 56) = 0xE400000000000000;
  v47 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v48 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v48)
  {
    __break(1u);
    goto LABEL_11;
  }
  v120 = v41;
  sub_2416BB128();

  v49 = v118;
  sub_2416BAB1C();
  swift_bridgeObjectRelease();
  sub_2415A431C(v134, *((uint64_t *)&v134 + 1), v135);
  swift_bridgeObjectRelease();
  v50 = (uint64_t)v49;
  v51 = v123;
  sub_2415E4154(v50, v123);
  if (!v119)
  {
    v82 = v114;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v112 + 56))(v114, 1, 1, v113);
    v83 = v116;
    v70 = v121;
    goto LABEL_6;
  }
  *(_QWORD *)&v134 = v111;
  *((_QWORD *)&v134 + 1) = v119;
  swift_bridgeObjectRetain();
  v52 = sub_2416BA9D8();
  v54 = v53;
  v56 = v55 & 1;
  sub_2416BA870();
  v119 = v36;
  v57 = sub_2416BA9C0();
  v59 = v58;
  v61 = v60;
  swift_release();
  sub_2415A431C(v52, v54, v56);
  swift_bridgeObjectRelease();
  LODWORD(v134) = sub_2416BA660();
  v62 = sub_2416BA990();
  v64 = v63;
  v66 = v65;
  v68 = v67;
  sub_2415A431C(v57, v59, v61 & 1);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v125 = v62;
  *((_QWORD *)&v125 + 1) = v64;
  LOBYTE(v126) = v66 & 1;
  *((_QWORD *)&v126 + 1) = v68;
  v69 = swift_allocObject();
  *(_OWORD *)(v69 + 16) = v110;
  v70 = v121;
  v71 = v121[1];
  *(_QWORD *)&v134 = *v121;
  *((_QWORD *)&v134 + 1) = v71;
  sub_2416BAD14();
  v72 = v133;
  swift_getKeyPath();
  *(_QWORD *)&v134 = v72;
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v73 = v72[6];
  v138 = v72[5];
  v139 = v73;
  v74 = v72[8];
  v140 = v72[7];
  v141 = v74;
  v75 = v72[2];
  v134 = v72[1];
  v135 = v75;
  v76 = v72[4];
  v136 = v72[3];
  v137 = v76;
  sub_2415DA4E0((uint64_t)&v134);
  swift_release();
  v77 = v141;
  swift_bridgeObjectRetain();
  sub_2415DA580((uint64_t)&v134);
  *(_OWORD *)(v69 + 32) = v77;
  *(_QWORD *)(v69 + 48) = 0x7265626D754ELL;
  *(_QWORD *)(v69 + 56) = 0xE600000000000000;
  v78 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v79 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v79)
  {
LABEL_11:
    __break(1u);
    return;
  }
  sub_2416BB128();

  v80 = (uint64_t)v108;
  sub_2416BAB1C();
  swift_bridgeObjectRelease();
  sub_2415A431C(v125, *((uint64_t *)&v125 + 1), v126);
  swift_bridgeObjectRelease();
  v81 = v107;
  sub_2415E4154(v80, v107);
  v82 = v114;
  sub_2415E4154(v81, v114);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v112 + 56))(v82, 0, 1, v113);
  v83 = v116;
  v51 = v123;
LABEL_6:
  v84 = v70[1];
  *(_QWORD *)&v134 = *v70;
  *((_QWORD *)&v134 + 1) = v84;
  sub_2416BAD14();
  v85 = (_OWORD *)v125;
  swift_getKeyPath();
  *(_QWORD *)&v134 = v85;
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v86 = v85[6];
  v138 = v85[5];
  v139 = v86;
  v87 = v85[8];
  v140 = v85[7];
  v141 = v87;
  v88 = v85[2];
  v134 = v85[1];
  v135 = v88;
  v89 = v85[4];
  v136 = v85[3];
  v137 = v89;
  sub_2415DA4E0((uint64_t)&v134);
  swift_release();
  v90 = v139;
  swift_bridgeObjectRetain();
  sub_2415DA580((uint64_t)&v134);
  if (*((_QWORD *)&v90 + 1))
  {
    v91 = v70[1];
    *(_QWORD *)&v125 = *v70;
    *((_QWORD *)&v125 + 1) = v91;
    v121 = (_QWORD *)v90;
    sub_2416BAD14();
    v92 = v124;
    swift_getKeyPath();
    *(_QWORD *)&v125 = v92;
    sub_2416B9CAC();
    swift_release();
    swift_beginAccess();
    v93 = v92[6];
    v129 = v92[5];
    v130 = v93;
    v94 = v92[8];
    v131 = v92[7];
    v132 = v94;
    v95 = v92[2];
    v125 = v92[1];
    v126 = v95;
    v96 = v92[4];
    v127 = v92[3];
    v128 = v96;
    sub_2415DA4E0((uint64_t)&v125);
    swift_release();
    v97 = *((_QWORD *)&v132 + 1);
    swift_bridgeObjectRetain();
    sub_2415DA580((uint64_t)&v125);
  }
  else
  {
    v121 = 0;
    v97 = 0;
  }
  v98 = v115;
  sub_241608C14(v51, v115);
  v99 = v117;
  sub_2415BEF64(v82, v117, (uint64_t (*)(_QWORD))sub_241608458);
  sub_241608C14(v98, v83);
  sub_2416083A4();
  v101 = v100;
  sub_2415BEF64(v99, v83 + *(int *)(v100 + 48), (uint64_t (*)(_QWORD))sub_241608458);
  v102 = (_QWORD *)(v83 + *(int *)(v101 + 64));
  v103 = (uint64_t)v121;
  *v102 = v121;
  v102[1] = *((_QWORD *)&v90 + 1);
  v102[2] = v90;
  v102[3] = v97;
  sub_241608C70(v103, *((uint64_t *)&v90 + 1));
  sub_2415A6154(v82, (uint64_t (*)(_QWORD))sub_241608458);
  v104 = MEMORY[0x24BDF1088];
  v105 = MEMORY[0x24BDF1FA8];
  sub_2415C2970(v123, (uint64_t)&qword_25713B320, (uint64_t)MEMORY[0x24BDF1088], MEMORY[0x24BDF1FA8], (uint64_t (*)(_QWORD))sub_241608F0C);
  sub_241608CA0(v103, *((uint64_t *)&v90 + 1));
  sub_2415A6154(v99, (uint64_t (*)(_QWORD))sub_241608458);
  sub_2415C2970(v98, (uint64_t)&qword_25713B320, (uint64_t)v104, v105, (uint64_t (*)(_QWORD))sub_241608F0C);
}

void sub_241608140()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C300)
  {
    sub_2415A39C0(255, &qword_25713C308, sub_2416081B8, (void (*)(uint64_t))sub_2415EF9C8);
    sub_24160868C();
    v0 = sub_2416BAD74();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C300);
  }
}

void sub_2416081B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_25713C310)
  {
    sub_241608270(255);
    v3 = v2;
    v4 = sub_2416BA1B0();
    v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
    v8[0] = v3;
    v8[1] = v4;
    v8[2] = sub_241608524();
    v8[3] = sub_24159CE88(&qword_25713C380, v5, MEMORY[0x24BDED858]);
    v6 = MEMORY[0x242699480](a1, v8, MEMORY[0x24BDF22B8], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713C310);
  }
}

void sub_241608270(uint64_t a1)
{
  sub_241608AB4(a1, &qword_25713C318, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x24BDEF3B8]);
}

void sub_241608284(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_25713C320, sub_2416082A0, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
}

void sub_2416082A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_25713C328)
  {
    sub_24160832C();
    v5[0] = v2;
    v5[1] = sub_24159CE88(&qword_25713C360, (uint64_t (*)(uint64_t))sub_24160832C, MEMORY[0x24BDF4700]);
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF2F10], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713C328);
  }
}

void sub_24160832C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C330)
  {
    sub_24159D6B0(255, &qword_25713C338, (uint64_t (*)(uint64_t))sub_2416083A4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2416084C4();
    v0 = sub_2416BADF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C330);
  }
}

void sub_2416083A4()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713C340)
  {
    sub_241608F0C(255, (unint64_t *)&qword_25713B320, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
    sub_241608458();
    sub_24159D7F0(255, &qword_25713C350, (uint64_t)&type metadata for RelationshipView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713C340);
  }
}

void sub_241608458()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C348)
  {
    sub_241608F0C(255, (unint64_t *)&qword_25713B320, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C348);
  }
}

unint64_t sub_2416084C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713C358;
  if (!qword_25713C358)
  {
    sub_24159D6B0(255, &qword_25713C338, (uint64_t (*)(uint64_t))sub_2416083A4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5428], v1);
    atomic_store(result, (unint64_t *)&qword_25713C358);
  }
  return result;
}

unint64_t sub_241608524()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713C368;
  if (!qword_25713C368)
  {
    sub_241608270(255);
    v2 = v1;
    v3[0] = sub_24160858C();
    v3[1] = sub_241608648();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713C368);
  }
  return result;
}

unint64_t sub_24160858C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  result = qword_25713C370;
  if (!qword_25713C370)
  {
    sub_241608284(255);
    v2 = v1;
    sub_24160832C();
    v4[2] = v3;
    v4[3] = sub_24159CE88(&qword_25713C360, (uint64_t (*)(uint64_t))sub_24160832C, MEMORY[0x24BDF4700]);
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = sub_24159CE88(&qword_257139D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_25713C370);
  }
  return result;
}

unint64_t sub_241608648()
{
  unint64_t result;

  result = qword_25713C378;
  if (!qword_25713C378)
  {
    result = MEMORY[0x2426994BC](&unk_2416BE334, &type metadata for MedicalIDErrorView);
    atomic_store(result, (unint64_t *)&qword_25713C378);
  }
  return result;
}

unint64_t sub_24160868C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  _QWORD v7[6];

  result = qword_25713C388;
  if (!qword_25713C388)
  {
    sub_2415A39C0(255, &qword_25713C308, sub_2416081B8, (void (*)(uint64_t))sub_2415EF9C8);
    v2 = v1;
    sub_241608270(255);
    v4 = v3;
    v5 = sub_2416BA1B0();
    v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
    v7[2] = v4;
    v7[3] = v5;
    v7[4] = sub_241608524();
    v7[5] = sub_24159CE88(&qword_25713C380, v6, MEMORY[0x24BDED858]);
    v7[0] = swift_getOpaqueTypeConformance2();
    v7[1] = sub_24159CE88((unint64_t *)&qword_25713B7F8, (uint64_t (*)(uint64_t))sub_2415EF9C8, MEMORY[0x24BDF0710]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v7);
    atomic_store(result, (unint64_t *)&qword_25713C388);
  }
  return result;
}

void sub_24160878C(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_25713C390, (void (*)(uint64_t))sub_241608140, (void (*)(uint64_t))sub_2415EF9C8);
}

void sub_2416087A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_25713C398)
  {
    sub_24160878C(255);
    v5[0] = v2;
    v5[1] = type metadata accessor for RelationshipPickerView();
    v5[2] = sub_241608860();
    v5[3] = sub_24159CE88(&qword_25713C3B0, (uint64_t (*)(uint64_t))type metadata accessor for RelationshipPickerView, (uint64_t)&unk_2416C3610);
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF3650], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713C398);
  }
}

unint64_t sub_241608860()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713C3A0;
  if (!qword_25713C3A0)
  {
    sub_24160878C(255);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713C3A8, (uint64_t (*)(uint64_t))sub_241608140, MEMORY[0x24BDF43B0]);
    v3[1] = sub_24159CE88((unint64_t *)&qword_25713B7F8, (uint64_t (*)(uint64_t))sub_2415EF9C8, MEMORY[0x24BDF0710]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713C3A0);
  }
  return result;
}

uint64_t sub_2416088FC()
{
  type metadata accessor for ContactLabelEditView(0);
  return sub_241606B38();
}

uint64_t sub_241608928@<X0>(uint64_t a1@<X8>)
{
  return sub_241606C24(a1);
}

uint64_t objectdestroyTm_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for ContactLabelEditView(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_release();
  swift_release();
  swift_release();
  v3 = v0 + ((v2 + 16) & ~v2) + *(int *)(v1 + 24);
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_2416BA144();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

void sub_241608A08(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ContactLabelEditView(0) - 8) + 80);
  sub_24160747C((_QWORD *)(v1 + ((v3 + 16) & ~v3)), a1);
}

uint64_t sub_241608A48(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[8];

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ContactLabelEditView(0) - 8) + 80);
  v5 = a2[5];
  v10[4] = a2[4];
  v10[5] = v5;
  v6 = a2[7];
  v10[6] = a2[6];
  v10[7] = v6;
  v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  v8 = a2[3];
  v10[2] = a2[2];
  v10[3] = v8;
  return (*(uint64_t (**)(_OWORD *))(v2 + ((v4 + 16) & ~v4) + 16))(v10);
}

void sub_241608AB4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, ValueMetadata *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_241608284(255);
    v7 = a3(a1, v6, &type metadata for MedicalIDErrorView);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_241608B14@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t result;

  v4 = *v1;
  v3 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = sub_2416BA870();
  KeyPath = swift_getKeyPath();
  result = sub_2416BA0FC();
  *a1 = v4;
  a1[1] = v3;
  a1[2] = v6;
  a1[3] = v5;
  a1[4] = KeyPath;
  a1[5] = v7;
  return result;
}

void sub_241608B88()
{
  qword_25713C110 = 0x4000000000000000;
}

void sub_241608B98()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C3D0)
  {
    sub_24159D6B0(255, &qword_25713C338, (uint64_t (*)(uint64_t))sub_2416083A4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C3D0);
  }
}

uint64_t sub_241608C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_241608F0C(0, (unint64_t *)&qword_25713B320, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_241608C70(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_241608CA0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_241608CD0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 144) = v2;
  return result;
}

ValueMetadata *type metadata accessor for RelationshipView()
{
  return &type metadata for RelationshipView;
}

uint64_t sub_241608D30()
{
  sub_2416087A8(255);
  sub_24160878C(255);
  type metadata accessor for RelationshipPickerView();
  sub_241608860();
  sub_24159CE88(&qword_25713C3B0, (uint64_t (*)(uint64_t))type metadata accessor for RelationshipPickerView, (uint64_t)&unk_2416C3610);
  swift_getOpaqueTypeConformance2();
  sub_2415DAAD0();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_241608DF4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_241608E10()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713C3D8;
  if (!qword_25713C3D8)
  {
    sub_241608E90();
    v2 = v1;
    v3[0] = sub_241609004();
    v3[1] = sub_24159CE88(&qword_25713C410, (uint64_t (*)(uint64_t))sub_241608F68, MEMORY[0x24BDF0710]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713C3D8);
  }
  return result;
}

void sub_241608E90()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C3E0)
  {
    sub_241608F0C(255, &qword_25713C3E8, (void (*)(uint64_t))sub_2415A3F74);
    sub_241608F68();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C3E0);
  }
}

void sub_241608F0C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_2416BA150();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_241608F68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C3F0)
  {
    sub_241608FC0();
    v0 = sub_2416BA690();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C3F0);
  }
}

unint64_t sub_241608FC0()
{
  unint64_t result;

  result = qword_25713C3F8;
  if (!qword_25713C3F8)
  {
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEC7F8], MEMORY[0x24BDEC810]);
    atomic_store(result, (unint64_t *)&qword_25713C3F8);
  }
  return result;
}

unint64_t sub_241609004()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713C400;
  if (!qword_25713C400)
  {
    sub_241608F0C(255, &qword_25713C3E8, (void (*)(uint64_t))sub_2415A3F74);
    v2 = v1;
    v3[0] = sub_2416090A4();
    v3[1] = sub_24159CE88(&qword_257139D40, (uint64_t (*)(uint64_t))sub_2415A3F74, MEMORY[0x24BDF1028]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713C400);
  }
  return result;
}

unint64_t sub_2416090A4()
{
  unint64_t result;

  result = qword_25713C408;
  if (!qword_25713C408)
  {
    result = MEMORY[0x2426994BC](&unk_2416BE248, &type metadata for ContactRelationTextView);
    atomic_store(result, (unint64_t *)&qword_25713C408);
  }
  return result;
}

uint64_t sub_2416090E8()
{
  return sub_2416054AC();
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CellAccessoryButton()
{
  return &type metadata for CellAccessoryButton;
}

uint64_t sub_241609138()
{
  return swift_getOpaqueTypeConformance2();
}

BOOL sub_241609148(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void sub_241609160(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  void *v15;
  id v16;
  _BYTE v17[16];
  uint64_t v18;
  _BYTE v19[24];
  __int128 v20;

  sub_241609510();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24160956C();
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_OWORD *)v19 = *(_OWORD *)v1;
  *(_QWORD *)&v19[16] = *(_QWORD *)(v1 + 16);
  v20 = *(_OWORD *)&v19[8];
  v11 = swift_allocObject();
  v12 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 48) = *(_QWORD *)(v1 + 32);
  v18 = v1;
  sub_241609624((uint64_t)&v20);
  swift_retain();
  sub_2416BAD50();
  sub_24159F83C();
  v13 = swift_allocObject();
  v14 = v20;
  *(_OWORD *)(v13 + 16) = xmmword_2416BCC80;
  *(_OWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 48) = 0x6E6F74747542;
  *(_QWORD *)(v13 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  v15 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v16 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v16)
  {
    sub_2416BB128();

    sub_24159CE88((unint64_t *)&qword_25713B4E0, (uint64_t (*)(uint64_t))sub_241609510, MEMORY[0x24BDF43B0]);
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    sub_24160964C((uint64_t)v10, a1);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_241609380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;

  v21 = *(_BYTE *)(a1 + 1);
  sub_241609690();
  sub_2415C343C();
  v3 = sub_2416BA9D8();
  v5 = v4;
  v7 = v6 & 1;
  sub_2416BA870();
  v8 = sub_2416BA9C0();
  v10 = v9;
  v12 = v11;
  swift_release();
  sub_2415A431C(v3, v5, v7);
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
    sub_2416BAC18();
  else
    sub_2416BAC30();
  v13 = sub_2416BA990();
  v15 = v14;
  v17 = v16;
  v19 = v18;
  sub_2415A431C(v8, v10, v12 & 1);
  swift_release();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v15;
  *(_BYTE *)(a2 + 16) = v17 & 1;
  *(_QWORD *)(a2 + 24) = v19;
  return result;
}

void sub_2416094D8(uint64_t a1@<X8>)
{
  sub_241609160(a1);
}

void sub_241609510()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713B4D8)
  {
    v0 = sub_2416BAD74();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713B4D8);
  }
}

void sub_24160956C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C418)
  {
    sub_241609510();
    sub_2416BA768();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C418);
  }
}

uint64_t sub_2416095D0()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2416095FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_24160961C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_241609380(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_241609624(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_24160964C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24160956C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_241609690()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  v0 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v0);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v1 = (void *)qword_25713A038;
  v2 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v2);
  v3 = v1;
  sub_2416B9C04();
  return sub_2416BB134();
}

uint64_t destroy for TextFieldClearButtonView()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t _s11MedicalIDUI19CellAccessoryButtonV9ViewModelVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t _s11MedicalIDUI19CellAccessoryButtonV9ViewModelVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s11MedicalIDUI19CellAccessoryButtonV9ViewModelVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextFieldClearButtonView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextFieldClearButtonView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CellAccessoryButton.ViewModel()
{
  return &type metadata for CellAccessoryButton.ViewModel;
}

unint64_t sub_2416099CC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713C420;
  if (!qword_25713C420)
  {
    sub_24160956C();
    v2 = v1;
    v3[0] = sub_24159CE88((unint64_t *)&qword_25713B4E0, (uint64_t (*)(uint64_t))sub_241609510, MEMORY[0x24BDF43B0]);
    v3[1] = sub_24159CE88(&qword_257139D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713C420);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CellAccessoryButton.Kind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CellAccessoryButton.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_241609B40 + 4 * byte_2416BF225[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_241609B74 + 4 * byte_2416BF220[v4]))();
}

uint64_t sub_241609B74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_241609B7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x241609B84);
  return result;
}

uint64_t sub_241609B90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x241609B98);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_241609B9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_241609BA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_241609BB0(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CellAccessoryButton.Kind()
{
  return &type metadata for CellAccessoryButton.Kind;
}

unint64_t sub_241609BD0()
{
  unint64_t result;

  result = qword_25713C428;
  if (!qword_25713C428)
  {
    result = MEMORY[0x2426994BC](&unk_2416BF2E4, &type metadata for CellAccessoryButton.Kind);
    atomic_store(result, (unint64_t *)&qword_25713C428);
  }
  return result;
}

uint64_t destroy for BasicAlertModifier(uint64_t a1)
{
  uint64_t result;

  swift_release();
  swift_release();
  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for BasicAlertModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  swift_retain();
  swift_retain();
  if (v5)
  {
    a1[2] = a2[2];
    a1[3] = v5;
    v6 = a2[5];
    a1[4] = a2[4];
    a1[5] = v6;
    v7 = a2[7];
    a1[6] = a2[6];
    a1[7] = v7;
    a1[8] = a2[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + 2) = v8;
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    a1[8] = a2[8];
  }
  return a1;
}

_QWORD *assignWithCopy for BasicAlertModifier(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v4 = a1 + 2;
  v5 = (__int128 *)(a2 + 2);
  v6 = a2[3];
  if (a1[3])
  {
    if (v6)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[7] = a2[7];
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2415CCAC8((uint64_t)(a1 + 2));
      v8 = *((_OWORD *)a2 + 2);
      v7 = *((_OWORD *)a2 + 3);
      v9 = *v5;
      a1[8] = a2[8];
      *((_OWORD *)a1 + 2) = v8;
      *((_OWORD *)a1 + 3) = v7;
      *v4 = v9;
    }
  }
  else if (v6)
  {
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v5;
    v11 = *((_OWORD *)a2 + 2);
    v12 = *((_OWORD *)a2 + 3);
    a1[8] = a2[8];
    *((_OWORD *)a1 + 2) = v11;
    *((_OWORD *)a1 + 3) = v12;
    *v4 = v10;
  }
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for BasicAlertModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
  {
    sub_2415CCAC8(a1 + 16);
LABEL_5:
    v7 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    return a1;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BasicAlertModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BasicAlertModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BasicAlertModifier()
{
  return &type metadata for BasicAlertModifier;
}

uint64_t sub_24160A040()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24160A050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _DWORD v24[4];
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v28 = a1;
  v30 = a2;
  v3 = v2[3];
  v40 = v2[2];
  v41 = v3;
  v42 = *((_QWORD *)v2 + 8);
  v4 = v2[1];
  v38 = *v2;
  v39 = v4;
  sub_24160A8EC(0);
  v29 = v5;
  v27 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v26 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v2[3];
  v33 = v2[2];
  v34 = v7;
  v35 = *((_QWORD *)v2 + 8);
  v8 = *v2;
  v32 = v2[1];
  v31 = v8;
  sub_24160AC7C();
  MEMORY[0x242698604](&v36);
  v9 = v37;
  if (v37)
  {
    v10 = v36;
    swift_bridgeObjectRetain();
    sub_24160AD24(v10, v9);
  }
  else
  {
    v10 = 0;
    v9 = 0xE000000000000000;
  }
  v36 = v10;
  v37 = v9;
  sub_2416BB290();
  sub_24160AD74((uint64_t)&v38);
  sub_24160AD74((uint64_t)&v38);
  v11 = sub_2416BB284();
  v12 = swift_allocObject();
  v13 = MEMORY[0x24BEE6930];
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = v13;
  v14 = v41;
  *(_OWORD *)(v12 + 64) = v40;
  *(_OWORD *)(v12 + 80) = v14;
  *(_QWORD *)(v12 + 96) = v42;
  v15 = v39;
  *(_OWORD *)(v12 + 32) = v38;
  *(_OWORD *)(v12 + 48) = v15;
  sub_24160AD74((uint64_t)&v38);
  v16 = sub_2416BB284();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v13;
  v18 = v41;
  *(_OWORD *)(v17 + 64) = v40;
  *(_OWORD *)(v17 + 80) = v18;
  *(_QWORD *)(v17 + 96) = v42;
  v19 = v39;
  *(_OWORD *)(v17 + 32) = v38;
  *(_OWORD *)(v17 + 48) = v19;
  sub_2416BAE40();
  v20 = sub_24160AEBC((uint64_t)&v38);
  v25 = v24;
  v24[3] = v32;
  v21 = MEMORY[0x24BDAC7A8](v20);
  MEMORY[0x24BDAC7A8](v21);
  sub_24160A9E8();
  sub_24160AA84();
  sub_24160ACE0(0, &qword_257139CF8);
  sub_24159CE88(&qword_25713C460, (uint64_t (*)(uint64_t))sub_24160A9E8, MEMORY[0x24BDEFB78]);
  sub_2415C343C();
  sub_24160AB9C();
  sub_24160AC14();
  v22 = v26;
  sub_2416BAB64();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v30, v22, v29);
}

uint64_t sub_24160A3E4@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_24160AA84();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v19 = a1[2];
  v20 = v9;
  v21 = *((_QWORD *)a1 + 8);
  v10 = a1[1];
  v17 = *a1;
  v18 = v10;
  sub_24160AC7C();
  MEMORY[0x242698604](&v22);
  v11 = v23;
  if (v23)
  {
    v12 = v22;
    v13 = v24;
    v16 = v8;
    swift_bridgeObjectRetain();
    v8 = v16;
    sub_24160AD24(v12, v11);
  }
  else
  {
    v13 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)&v17 = v13;
  sub_24159D6B0(0, &qword_25713C450, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_2416B9B80();
  sub_241609510();
  sub_24160AB3C();
  sub_24159CE88((unint64_t *)&qword_25713B4E0, (uint64_t (*)(uint64_t))sub_241609510, MEMORY[0x24BDF43B0]);
  sub_24159CE88(&qword_25713C480, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, (uint64_t)&protocol conformance descriptor for BasicAlertModel.Action);
  sub_2416BAE88();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
}

uint64_t sub_24160A5CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v2 = type metadata accessor for BasicAlertModel.Action();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  sub_24159D6B0(0, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - v6;
  v8 = *(int *)(v2 + 24);
  v9 = (_QWORD *)(a1 + *(int *)(v2 + 20));
  v10 = v9[1];
  v14[0] = *v9;
  v14[1] = v10;
  sub_2415A477C(a1 + v8, (uint64_t)v7);
  sub_2415A6100(a1, (uint64_t)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v12 = swift_allocObject();
  sub_2415A519C((uint64_t)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11);
  sub_2415C343C();
  swift_bridgeObjectRetain();
  return sub_2416BAD5C();
}

uint64_t sub_24160A71C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_24160AC7C();
  MEMORY[0x242698604](&v10);
  v2 = v11;
  if (v11 && (v3 = v12, v4 = v10, swift_bridgeObjectRetain(), sub_24160AD24(v4, v2), v3))
  {
    sub_2415C343C();
    result = sub_2416BA9D8();
    v9 = v8 & 1;
  }
  else
  {
    result = 0;
    v6 = 0;
    v9 = 0;
    v7 = 0;
  }
  *a1 = result;
  a1[1] = v6;
  a1[2] = v9;
  a1[3] = v7;
  return result;
}

_QWORD *sub_24160A804@<X0>(BOOL *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_24160AC7C();
  result = MEMORY[0x242698604](&v4);
  v3 = v5;
  if (v5)
    result = (_QWORD *)sub_24160AD24(v4, v5);
  *a1 = v3 != 0;
  return result;
}

_BYTE *sub_24160A880(_BYTE *result)
{
  if ((*result & 1) == 0)
  {
    sub_24160AC7C();
    return (_BYTE *)sub_2416BAE1C();
  }
  return result;
}

void sub_24160A8EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[8];

  if (!qword_25713C430)
  {
    sub_24160A9E8();
    v3 = v2;
    sub_24160AA84();
    v5 = v4;
    sub_24160ACE0(255, &qword_257139CF8);
    v7 = v6;
    v8 = sub_24159CE88(&qword_25713C460, (uint64_t (*)(uint64_t))sub_24160A9E8, MEMORY[0x24BDEFB78]);
    v9 = sub_2415C343C();
    v10 = sub_24160AB9C();
    v11 = sub_24160AC14();
    v14[0] = v3;
    v14[1] = MEMORY[0x24BEE0D00];
    v14[2] = v5;
    v14[3] = v7;
    v14[4] = v8;
    v14[5] = v9;
    v14[6] = v10;
    v14[7] = v11;
    v12 = MEMORY[0x242699480](a1, v14, MEMORY[0x24BDF35B8], 0);
    if (!v13)
      atomic_store(v12, (unint64_t *)&qword_25713C430);
  }
}

void sub_24160A9E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C438)
  {
    sub_24160AA40();
    v0 = sub_2416BA648();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C438);
  }
}

unint64_t sub_24160AA40()
{
  unint64_t result;

  result = qword_25713C440;
  if (!qword_25713C440)
  {
    result = MEMORY[0x2426994BC](&unk_2416BF324, &type metadata for BasicAlertModifier);
    atomic_store(result, (unint64_t *)&qword_25713C440);
  }
  return result;
}

void sub_24160AA84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C448)
  {
    sub_24159D6B0(255, &qword_25713C450, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_2416B9B80();
    sub_241609510();
    sub_24160AB3C();
    sub_2415A5300();
    v0 = sub_2416BAE94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C448);
  }
}

unint64_t sub_24160AB3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713C458;
  if (!qword_25713C458)
  {
    sub_24159D6B0(255, &qword_25713C450, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE12D8], v1);
    atomic_store(result, (unint64_t *)&qword_25713C458);
  }
  return result;
}

unint64_t sub_24160AB9C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_25713C468;
  if (!qword_25713C468)
  {
    sub_24160AA84();
    v2 = v1;
    v3 = sub_24159CE88((unint64_t *)&qword_25713B4E0, (uint64_t (*)(uint64_t))sub_241609510, MEMORY[0x24BDF43B0]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF4A08], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713C468);
  }
  return result;
}

unint64_t sub_24160AC14()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_25713C470;
  if (!qword_25713C470)
  {
    sub_24160ACE0(255, &qword_257139CF8);
    v2 = MEMORY[0x24BDF1F80];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF5578], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_25713C470);
  }
  return result;
}

void sub_24160AC7C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C478)
  {
    sub_24160ACE0(255, (unint64_t *)&qword_25713A918);
    v0 = sub_2416BAE58();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C478);
  }
}

void sub_24160ACE0(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_2416BB434();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_24160AD24(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24160AD74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  swift_retain();
  swift_retain();
  sub_24160ADF4(v2, v3);
  return a1;
}

uint64_t sub_24160ADF4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

_QWORD *sub_24160AE48@<X0>(BOOL *a1@<X8>)
{
  return sub_24160A804(a1);
}

uint64_t objectdestroyTm_7()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 56))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

_BYTE *sub_24160AEB0(_BYTE *result)
{
  return sub_24160A880(result);
}

uint64_t sub_24160AEBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  swift_release();
  swift_release();
  sub_24160AD24(v2, v3);
  return a1;
}

uint64_t sub_24160AF3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24160A3E4(*(__int128 **)(v1 + 16), a1);
}

uint64_t sub_24160AF44@<X0>(uint64_t *a1@<X8>)
{
  return sub_24160A71C(a1);
}

uint64_t sub_24160AF4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for BasicAlertModel.Action();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = sub_2416B9B80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  v5 = v3 + *(int *)(v1 + 24);
  v6 = sub_2416B9EBC();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  if (*(_QWORD *)(v3 + *(int *)(v1 + 28)))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_24160B038()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t (**v3)(void);

  result = type metadata accessor for BasicAlertModel.Action();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
  v3 = (uint64_t (**)(void))(v0 + *(int *)(result + 28) + ((v2 + 16) & ~v2));
  if (*v3)
    return (*v3)();
  return result;
}

uint64_t sub_24160B084()
{
  sub_24160A9E8();
  sub_24160AA84();
  sub_24160ACE0(255, &qword_257139CF8);
  sub_24159CE88(&qword_25713C460, (uint64_t (*)(uint64_t))sub_24160A9E8, MEMORY[0x24BDEFB78]);
  sub_2415C343C();
  sub_24160AB9C();
  sub_24160AC14();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24160B14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD v7[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 64);
  v7[0] = *(_QWORD *)a1;
  v7[1] = v3;
  v5 = *(_OWORD *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 16);
  v9 = v5;
  v10 = *(_OWORD *)(a1 + 48);
  v11 = v4;
  return MEMORY[0x2426983C4](v7, a2, &type metadata for BasicAlertModifier, a3);
}

BOOL MedicalIDEditingState.isEditingAvailable.getter()
{
  _BYTE *v0;

  return *v0 == 0;
}

MedicalIDUI::MedicalIDEditingState_optional __swiftcall MedicalIDEditingState.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  MedicalIDUI::MedicalIDEditingState_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2416BB614();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static MedicalIDEditingState.allCases.getter()
{
  return &unk_251193AD8;
}

uint64_t MedicalIDEditingState.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24160B244 + 4 * byte_2416BF380[*v0]))(0xD00000000000001BLL, 0x80000002416C3AF0);
}

uint64_t sub_24160B244()
{
  return 0x64656C62616E65;
}

void sub_24160B280(char *a1)
{
  sub_241602AF4(*a1);
}

unint64_t sub_24160B290()
{
  unint64_t result;

  result = qword_25713C488;
  if (!qword_25713C488)
  {
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for MedicalIDEditingState, &type metadata for MedicalIDEditingState);
    atomic_store(result, (unint64_t *)&qword_25713C488);
  }
  return result;
}

void sub_24160B2D4()
{
  char *v0;

  sub_2416822E4(*v0);
}

void sub_24160B2DC(uint64_t a1)
{
  char *v1;

  sub_2416826F4(a1, *v1);
}

void sub_24160B2E4(uint64_t a1)
{
  char *v1;

  sub_241682788(a1, *v1);
}

MedicalIDUI::MedicalIDEditingState_optional sub_24160B2EC(Swift::String *a1)
{
  return MedicalIDEditingState.init(rawValue:)(*a1);
}

uint64_t sub_24160B2F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MedicalIDEditingState.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_24160B320()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713C490;
  if (!qword_25713C490)
  {
    sub_24160B368();
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_25713C490);
  }
  return result;
}

void sub_24160B368()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C498)
  {
    v0 = sub_2416BB23C();
    if (!v1)
      atomic_store(v0, &qword_25713C498);
  }
}

void sub_24160B3BC(_QWORD *a1@<X8>)
{
  *a1 = &unk_251193B00;
}

uint64_t getEnumTagSinglePayload for OrganDonationStatus(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDEditingState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_24160B4A8 + 4 * byte_2416BF389[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_24160B4DC + 4 * byte_2416BF384[v4]))();
}

uint64_t sub_24160B4DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24160B4E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24160B4ECLL);
  return result;
}

uint64_t sub_24160B4F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24160B500);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_24160B504(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24160B50C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDEditingState()
{
  return &type metadata for MedicalIDEditingState;
}

uint64_t PregnancySampleDataProvider.__allocating_init(healthStore:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  sub_2415A9F94(0, &qword_25713A560, (void (*)(uint64_t))MEMORY[0x24BEE6990]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - v4;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = v1;
  v7 = swift_allocObject();
  v8 = v7 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate;
  v9 = sub_2416B9B50();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  sub_2416B9CD0();
  *(_QWORD *)(v7 + 16) = &unk_25713C4A8;
  *(_QWORD *)(v7 + 24) = v6;
  v10 = sub_2416BB2A8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v7;
  swift_retain();
  sub_24160B674((uint64_t)v5, (uint64_t)&unk_25713C4C8, (uint64_t)v11);
  swift_release();
  return v7;
}

uint64_t sub_24160B674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_2416BB2A8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_2416BB29C();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_2415F615C(a1, &qword_25713A560, (void (*)(uint64_t))MEMORY[0x24BEE6990]);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_2416BB254();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_24160B7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_2416BB2A8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_2416BB29C();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_2415F615C(a1, &qword_25713A560, (void (*)(uint64_t))MEMORY[0x24BEE6990]);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_2416BB254();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  sub_24160CF6C();
  return swift_task_create();
}

uint64_t PregnancySampleDataProvider.ongoingEstimatedDueDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  swift_getKeyPath();
  sub_24160C244();
  sub_2416B9CAC();
  swift_release();
  v3 = v1 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate;
  swift_beginAccess();
  return sub_24160C2C8(v3, a1);
}

uint64_t PregnancySampleDataProvider.ongoingEstimatedDueDate.setter(uint64_t a1)
{
  swift_getKeyPath();
  sub_24160C244();
  sub_2416B9CA0();
  swift_release();
  return sub_2415F615C(a1, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
}

uint64_t sub_24160BA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate;
  swift_beginAccess();
  sub_24160D114(a2, v3);
  return swift_endAccess();
}

void (*PregnancySampleDataProvider.ongoingEstimatedDueDate.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  swift_getKeyPath();
  v4[4] = OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider___observationRegistrar;
  *v4 = v2;
  v4[5] = sub_24160C244();
  sub_2416B9CAC();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  sub_2416B9CC4();
  swift_release();
  swift_beginAccess();
  return sub_24160BBA8;
}

void sub_24160BBA8(_QWORD **a1)
{
  _QWORD *v1;

  v1 = *a1;
  swift_endAccess();
  *v1 = v1[3];
  swift_getKeyPath();
  sub_2416B9CB8();
  swift_release();
  free(v1);
}

uint64_t sub_24160BC10(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24160BC28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[3];
  v2 = swift_task_alloc();
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[5] = v3;
  sub_24160CA3C();
  *v3 = v0;
  v3[1] = sub_24160BCD4;
  return sub_2416BB650();
}

uint64_t sub_24160BCD4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24160BD40()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t static PregnancySampleDataProvider.defaultPregnancyModelProvider(with:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24160BD64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[3];
  v2 = swift_task_alloc();
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[5] = v3;
  sub_24160CA3C();
  *v3 = v0;
  v3[1] = sub_24160BE10;
  return sub_2416BB650();
}

uint64_t sub_24160BE10()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24160BE7C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PregnancySampleDataProvider.__allocating_init(modelProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  sub_2415A9F94(0, &qword_25713A560, (void (*)(uint64_t))MEMORY[0x24BEE6990]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - v5;
  v7 = swift_allocObject();
  v8 = v7 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate;
  v9 = sub_2416B9B50();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  sub_2416B9CD0();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v10 = sub_2416BB2A8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 1, 1, v10);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v7;
  swift_retain();
  sub_24160B674((uint64_t)v6, (uint64_t)&unk_25713C4E8, (uint64_t)v11);
  swift_release();
  return v7;
}

uint64_t PregnancySampleDataProvider.init(modelProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  sub_2415A9F94(0, &qword_25713A560, (void (*)(uint64_t))MEMORY[0x24BEE6990]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v13 - v6;
  v8 = v2 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate;
  v9 = sub_2416B9B50();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  sub_2416B9CD0();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  v10 = sub_2416BB2A8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v2;
  swift_retain();
  sub_24160B674((uint64_t)v7, (uint64_t)&unk_25713C4F0, (uint64_t)v11);
  swift_release();
  return v2;
}

uint64_t sub_24160C104()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_24160C128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_2415A7120;
  v3[3] = v2;
  return swift_task_switch();
}

uint64_t sub_24160C188()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24160D1DC;
  return PregnancySampleDataProvider.fetchData()();
}

uint64_t sub_24160C1D4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24160D1DC;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_24160D1DC;
  return PregnancySampleDataProvider.fetchData()();
}

unint64_t sub_24160C244()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713C4D0;
  if (!qword_25713C4D0)
  {
    v1 = type metadata accessor for PregnancySampleDataProvider();
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for PregnancySampleDataProvider, v1);
    atomic_store(result, (unint64_t *)&qword_25713C4D0);
  }
  return result;
}

uint64_t type metadata accessor for PregnancySampleDataProvider()
{
  uint64_t result;

  result = qword_25713C528;
  if (!qword_25713C528)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24160C2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24160C31C()
{
  uint64_t v0;

  return sub_24160BA5C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t PregnancySampleDataProvider.fetchData()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[7] = v0;
  v1[8] = *v0;
  v2 = sub_2416B9D6C();
  v1[9] = v2;
  v1[10] = *(_QWORD *)(v2 - 8);
  v1[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24160C39C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)(v0 + 56) + 16) + *(_QWORD *)(*(_QWORD *)(v0 + 56) + 16));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v1;
  *v1 = v0;
  v1[1] = sub_24160C3F4;
  return v3();
}

uint64_t sub_24160C3F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 104) = a1;
  *(_QWORD *)(v3 + 112) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24160C460()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;

  v1 = *(void **)(v0 + 104);
  if (v1)
  {
    if (objc_msgSend(*(id *)(v0 + 104), sel_state) == (id)1)
    {
      v2 = objc_msgSend(v1, sel_estimatedDueDate);
      sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
      v3 = swift_task_alloc();
      if (v2)
      {
        sub_2416B9B2C();

        v4 = 0;
      }
      else
      {
        v4 = 1;
      }
      v5 = *(_QWORD *)(v0 + 56);
      v6 = sub_2416B9B50();
      v7 = (void (*)(uint64_t))MEMORY[0x24BDCE908];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, v4, 1, v6);
      swift_getKeyPath();
      v8 = swift_task_alloc();
      *(_QWORD *)(v8 + 16) = v5;
      *(_QWORD *)(v8 + 24) = v3;
      *(_QWORD *)(v0 + 48) = v5;
      sub_24160C244();
      sub_2416B9CA0();
      swift_release();
      swift_task_dealloc();
      sub_2415F615C(v3, &qword_257139BD0, v7);

      swift_task_dealloc();
    }
    else
    {

    }
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24160C608()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (qword_2571395C0 != -1)
    swift_once();
  v1 = *(void **)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_257147810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  v6 = v1;
  v7 = v1;
  v8 = sub_2416B9D54();
  v9 = sub_2416BB374();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(void **)(v0 + 112);
  v13 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 72);
  if (v10)
  {
    v24 = *(_QWORD *)(v0 + 72);
    v23 = *(_QWORD *)(v0 + 80);
    v15 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v25 = v16;
    *(_DWORD *)v15 = 136315650;
    v17 = sub_2416BB704();
    *(_QWORD *)(v0 + 16) = sub_2415A8600(v17, v18, &v25);
    sub_2416BB44C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    *(_QWORD *)(v0 + 24) = sub_2415A8600(0x7461446863746566, 0xEB00000000292861, &v25);
    sub_2416BB44C();
    *(_WORD *)(v15 + 22) = 2080;
    *(_QWORD *)(v0 + 32) = v11;
    v19 = v11;
    sub_24159F0B8();
    v20 = sub_2416BB14C();
    *(_QWORD *)(v0 + 40) = sub_2415A8600(v20, v21, &v25);
    sub_2416BB44C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_241599000, v8, v9, "%s %s Error: %s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x242699570](v16, -1, -1);
    MEMORY[0x242699570](v15, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v12, v24);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_24160C8D0(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  _QWORD aBlock[6];

  sub_24160CFC4();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9 + v8, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v10 = objc_allocWithZone(MEMORY[0x24BDD3CB8]);
  aBlock[4] = sub_24160D0A4;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_24160CCCC;
  aBlock[3] = &block_descriptor_2;
  v11 = _Block_copy(aBlock);
  v12 = a2;
  v13 = objc_msgSend(v10, sel_initWithUpdateHandler_, v11);
  _Block_release(v11);
  swift_release();
  objc_msgSend(v12, sel_executeQuery_, v13);

}

void sub_24160CA34(uint64_t a1)
{
  uint64_t v1;

  sub_24160C8D0(a1, *(void **)(v1 + 16));
}

unint64_t sub_24160CA3C()
{
  unint64_t result;

  result = qword_25713C4E0;
  if (!qword_25713C4E0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25713C4E0);
  }
  return result;
}

uint64_t sub_24160CA7C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2415C2834;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_24160D1DC;
  return PregnancySampleDataProvider.fetchData()();
}

uint64_t objectdestroy_3Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

id sub_24160CB14(uint64_t a1, void *a2, id a3, void *a4)
{
  id v7;
  id v9;
  id v10;

  if (a2)
  {
    sub_24160CFC4();
    v7 = a2;
    sub_2416BB26C();
  }
  else
  {
    if (!a3)
      v9 = objc_msgSend((id)objc_opt_self(), sel_hk_error_userInfo_, 0, 0);
    v10 = a3;
    sub_24160CFC4();
    sub_2416BB260();
  }
  return objc_msgSend(a4, sel_stopQuery_, a1);
}

uint64_t PregnancySampleDataProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  sub_2415F615C(v0 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t PregnancySampleDataProvider.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  sub_2415F615C(v0 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

void sub_24160CCCC(uint64_t a1, void *a2, void *a3, void *a4)
{
  void (*v7)(id, void *, void *);
  id v8;
  id v9;
  id v10;

  v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  v10 = a2;
  v8 = a3;
  v9 = a4;
  v7(v10, a3, a4);
  swift_release();

}

uint64_t sub_24160CD5C()
{
  return type metadata accessor for PregnancySampleDataProvider();
}

void sub_24160CD64()
{
  unint64_t v0;
  unint64_t v1;

  sub_2415A9F94(319, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
  if (v0 <= 0x3F)
  {
    sub_2416B9CDC();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for PregnancySampleDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PregnancySampleDataProvider.__allocating_init(modelProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_24160CE20(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_24160CE88;
  return v5(v2 + 32);
}

uint64_t sub_24160CE88()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc();
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_24160CED8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24160CEFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_2415C2834;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_25713C5C0 + dword_25713C5C0))(a1, v4);
}

void sub_24160CF6C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C5D0)
  {
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C5D0);
  }
}

void sub_24160CFC4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C5D8)
  {
    sub_24160CA3C();
    sub_24159F0B8();
    v0 = sub_2416BB278();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C5D8);
  }
}

uint64_t sub_24160D030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  sub_24160CFC4();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);

  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v2);
  return swift_deallocObject();
}

id sub_24160D0A4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;

  sub_24160CFC4();
  return sub_24160CB14(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_24160D114(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415A9F94(0, &qword_257139BD0, (void (*)(uint64_t))MEMORY[0x24BDCE908]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_24160D168(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_24160D1DC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_25713C988 + dword_25713C988))(a1, v4);
}

uint64_t sub_24160D1E8()
{
  return sub_24160C31C();
}

ValueMetadata *type metadata accessor for MedicalIDCellPlaceholderText()
{
  return &type metadata for MedicalIDCellPlaceholderText;
}

uint64_t destroy for MedicalIDCellBodyText()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MedicalIDCellBodyText(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MedicalIDCellBodyText(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for MedicalIDCellBodyText(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDCellBodyText(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDCellBodyText(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDCellBodyText()
{
  return &type metadata for MedicalIDCellBodyText;
}

uint64_t sub_24160D428()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_24160D438(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *__ptr32 *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;

  v64 = a2;
  sub_24160EAF0(0, &qword_25713C610, &qword_25713C618);
  v4 = v3;
  v5 = *(_QWORD **)(v3 - 8);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v59 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v60 = (uint64_t)&v55 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v55 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v55 - v13;
  sub_24160E5FC();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v63 = (uint64_t)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v62 = (uint64_t)&v55 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v61 = (uint64_t)&v55 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v55 - v22;
  v24 = a1[1];
  v25 = &off_2416BC000;
  v65 = (char *)&v55 - v22;
  v66 = v4;
  if (v24)
  {
    v58 = v5;
    v67 = *a1;
    v68 = v24;
    sub_2415C343C();
    swift_bridgeObjectRetain();
    v26 = sub_2416BA9D8();
    v55 = v27;
    v56 = v26;
    v67 = v26;
    v68 = v27;
    v29 = v28 & 1;
    v69 = v28 & 1;
    v57 = v30;
    v70 = v30;
    sub_24160E998(0, (unint64_t *)&qword_25713EB50, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE3598]);
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_2416BCC80;
    v32 = a1[5];
    *(_QWORD *)(v31 + 32) = a1[4];
    *(_QWORD *)(v31 + 40) = v32;
    *(_QWORD *)(v31 + 48) = 0x656C746954;
    *(_QWORD *)(v31 + 56) = 0xE500000000000000;
    swift_bridgeObjectRetain();
    v33 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    v34 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (!v34)
    {
      __break(1u);
      goto LABEL_11;
    }
    sub_2416BB128();

    sub_24160EB5C(0, &qword_25713C618);
    sub_24160EBA4(&qword_25713C660, &qword_25713C618, (uint64_t)&type metadata for MedicalIDCellBodyTextStyle, (uint64_t (*)(void))sub_24160E9E0);
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v56, v55, v29);
    swift_bridgeObjectRelease();
    sub_24160EA24((uint64_t)v12, (uint64_t)v14, &qword_25713C610, &qword_25713C618);
    v23 = v65;
    sub_24160EA24((uint64_t)v14, (uint64_t)v65, &qword_25713C610, &qword_25713C618);
    v35 = (_QWORD *)v58[7];
    v4 = v66;
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v35)(v23, 0, 1, v66);
    v25 = &off_2416BC000;
  }
  else
  {
    v35 = (_QWORD *)v5[7];
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v35)((char *)&v55 - v22, 1, 1, v4);
  }
  v36 = a1[3];
  if (!v36)
  {
    v49 = v61;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v35)(v61, 1, 1, v4);
    goto LABEL_9;
  }
  v58 = v35;
  v67 = a1[2];
  v68 = v36;
  sub_2415C343C();
  swift_bridgeObjectRetain();
  v37 = sub_2416BA9D8();
  v39 = v38;
  v67 = v37;
  v68 = v38;
  v41 = v40 & 1;
  v69 = v40 & 1;
  v57 = v42;
  v70 = v42;
  sub_24160E998(0, (unint64_t *)&qword_25713EB50, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE3598]);
  v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = *((_OWORD *)v25 + 200);
  v44 = a1[5];
  *(_QWORD *)(v43 + 32) = a1[4];
  *(_QWORD *)(v43 + 40) = v44;
  *(_QWORD *)(v43 + 48) = 0x65756C6156;
  *(_QWORD *)(v43 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  v45 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v46 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v46)
  {
    sub_2416BB128();

    sub_24160EB5C(0, &qword_25713C618);
    sub_24160EBA4(&qword_25713C660, &qword_25713C618, (uint64_t)&type metadata for MedicalIDCellBodyTextStyle, (uint64_t (*)(void))sub_24160E9E0);
    v47 = (uint64_t)v59;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v37, v39, v41);
    swift_bridgeObjectRelease();
    v48 = v60;
    sub_24160EA24(v47, v60, &qword_25713C610, &qword_25713C618);
    v49 = v61;
    sub_24160EA24(v48, v61, &qword_25713C610, &qword_25713C618);
    v23 = v65;
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v58)(v49, 0, 1, v66);
LABEL_9:
    v50 = v62;
    sub_24160E918((uint64_t)v23, v62);
    v51 = v63;
    sub_24160E918(v49, v63);
    v52 = v64;
    sub_24160E918(v50, v64);
    sub_24160E594();
    v54 = v52 + *(int *)(v53 + 48);
    *(_QWORD *)v54 = 0;
    *(_BYTE *)(v54 + 8) = 1;
    sub_24160E918(v51, v52 + *(int *)(v53 + 64));
    sub_24160E95C(v49);
    sub_24160E95C((uint64_t)v23);
    sub_24160E95C(v51);
    sub_24160E95C(v50);
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t sub_24160DA08@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(_QWORD)@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = a2();
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 16) = 1;
  a3(0);
  return a4(a1);
}

void sub_24160DA60(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  v62 = a2;
  sub_24160EAF0(0, &qword_25713C610, &qword_25713C618);
  v4 = v3;
  v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 - 8);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v57 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v58 = (uint64_t)&v53 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v53 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v53 - v13;
  sub_24160E5FC();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v61 = (uint64_t)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v60 = (uint64_t)&v53 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v59 = (char *)&v53 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v53 - v22;
  v24 = a1[1];
  v63 = (char *)&v53 - v22;
  v64 = v4;
  if (!v24)
  {
    v34 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v5 + 7);
    v34((char *)&v53 - v22, 1, 1, v4);
    v35 = a1[3];
    if (v35)
      goto LABEL_4;
LABEL_7:
    v48 = (uint64_t)v59;
    v34(v59, 1, 1, v4);
    goto LABEL_8;
  }
  v56 = v5;
  v65 = *a1;
  v66 = v24;
  sub_2415C343C();
  swift_bridgeObjectRetain();
  v25 = sub_2416BA9D8();
  v53 = v26;
  v54 = v25;
  v65 = v25;
  v66 = v26;
  v28 = v27 & 1;
  v67 = v27 & 1;
  v55 = v29;
  v68 = v29;
  sub_24160E998(0, (unint64_t *)&qword_25713EB50, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE3598]);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_2416BCC80;
  v31 = a1[5];
  *(_QWORD *)(v30 + 32) = a1[4];
  *(_QWORD *)(v30 + 40) = v31;
  *(_QWORD *)(v30 + 48) = 0x656C746954;
  *(_QWORD *)(v30 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  v32 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v33 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v33)
  {
    __break(1u);
    goto LABEL_10;
  }
  sub_2416BB128();

  sub_24160EB5C(0, &qword_25713C618);
  sub_24160EBA4(&qword_25713C660, &qword_25713C618, (uint64_t)&type metadata for MedicalIDCellBodyTextStyle, (uint64_t (*)(void))sub_24160E9E0);
  sub_2416BAB1C();
  swift_bridgeObjectRelease();
  sub_2415A431C(v54, v53, v28);
  swift_bridgeObjectRelease();
  sub_24160EA24((uint64_t)v12, (uint64_t)v14, &qword_25713C610, &qword_25713C618);
  v23 = v63;
  sub_24160EA24((uint64_t)v14, (uint64_t)v63, &qword_25713C610, &qword_25713C618);
  v34 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v56 + 7);
  v4 = v64;
  v34(v23, 0, 1, v64);
  v35 = a1[3];
  if (!v35)
    goto LABEL_7;
LABEL_4:
  v56 = v34;
  v65 = a1[2];
  v66 = v35;
  sub_2415C343C();
  swift_bridgeObjectRetain();
  v36 = sub_2416BA9D8();
  v38 = v37;
  v65 = v36;
  v66 = v37;
  v40 = v39 & 1;
  v67 = v39 & 1;
  v55 = v41;
  v68 = v41;
  sub_24160E998(0, (unint64_t *)&qword_25713EB50, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE3598]);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_2416BCC80;
  v43 = a1[5];
  *(_QWORD *)(v42 + 32) = a1[4];
  *(_QWORD *)(v42 + 40) = v43;
  *(_QWORD *)(v42 + 48) = 0x65756C6156;
  *(_QWORD *)(v42 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  v44 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v45 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v45)
  {
    sub_2416BB128();

    sub_24160EB5C(0, &qword_25713C618);
    sub_24160EBA4(&qword_25713C660, &qword_25713C618, (uint64_t)&type metadata for MedicalIDCellBodyTextStyle, (uint64_t (*)(void))sub_24160E9E0);
    v46 = (uint64_t)v57;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v36, v38, v40);
    swift_bridgeObjectRelease();
    v47 = v58;
    sub_24160EA24(v46, v58, &qword_25713C610, &qword_25713C618);
    v48 = (uint64_t)v59;
    sub_24160EA24(v47, (uint64_t)v59, &qword_25713C610, &qword_25713C618);
    v23 = v63;
    v56((char *)v48, 0, 1, v64);
LABEL_8:
    v49 = v60;
    sub_24160E918((uint64_t)v23, v60);
    v50 = v61;
    sub_24160E918(v48, v61);
    v51 = v62;
    sub_24160E918(v49, v62);
    sub_24160E700();
    sub_24160E918(v50, v51 + *(int *)(v52 + 48));
    sub_24160E95C(v48);
    sub_24160E95C((uint64_t)v23);
    sub_24160E95C(v50);
    sub_24160E95C(v49);
    return;
  }
LABEL_10:
  __break(1u);
}

uint64_t sub_24160E01C@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  int *v3;
  uint64_t v4;
  uint64_t *v5;
  __int128 v6;
  uint64_t (*v7)@<X0>(uint64_t@<X8>);
  __int128 v8;
  uint64_t (*v9)@<X0>(uint64_t@<X8>);
  __int128 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)@<X0>(uint64_t@<X8>);
  uint64_t (**v15)@<X0>(uint64_t@<X8>);
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[16];
  _BYTE v21[16];
  __int128 v22;

  v3 = (int *)sub_24160E434();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (uint64_t *)((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = v1[1];
  v17 = *v1;
  v18 = v6;
  v19 = v1[2];
  sub_24160E760((uint64_t)&v17, (uint64_t)v20);
  sub_24160E760((uint64_t)&v18, (uint64_t)v21);
  v22 = v19;
  v7 = (uint64_t (*)@<X0>(uint64_t@<X8>))swift_allocObject();
  v8 = v18;
  *((_OWORD *)v7 + 1) = v17;
  *((_OWORD *)v7 + 2) = v8;
  *((_OWORD *)v7 + 3) = v19;
  v9 = (uint64_t (*)@<X0>(uint64_t@<X8>))swift_allocObject();
  v10 = v18;
  *((_OWORD *)v9 + 1) = v17;
  *((_OWORD *)v9 + 2) = v10;
  *((_OWORD *)v9 + 3) = v19;
  *v5 = swift_getKeyPath();
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v11 = (char *)v5 + v3[13];
  v12 = *MEMORY[0x24BDECEA0];
  v13 = sub_2416BA144();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v11, v12, v13);
  v14 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v5 + v3[14]);
  *v14 = sub_24160E7B8;
  v14[1] = v7;
  v15 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v5 + v3[15]);
  *v15 = sub_24160E820;
  v15[1] = v9;
  sub_24160E858((uint64_t)v5, a1);
  sub_241609624((uint64_t)v20);
  sub_241609624((uint64_t)v21);
  sub_241609624((uint64_t)&v22);
  sub_241609624((uint64_t)v20);
  sub_241609624((uint64_t)v21);
  return sub_241609624((uint64_t)&v22);
}

void sub_24160E1F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v22 = a5;
  sub_24160EAF0(0, &qword_25713C678, (unint64_t *)&qword_25713C680);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v21 - v10;
  v23 = a1;
  v24 = a2;
  sub_2415C343C();
  swift_bridgeObjectRetain();
  v12 = sub_2416BA9D8();
  v14 = v13;
  v23 = v12;
  v24 = v13;
  v16 = v15 & 1;
  v25 = v15 & 1;
  v21 = v17;
  v26 = v17;
  sub_24160E998(0, (unint64_t *)&qword_25713EB50, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE3598]);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v18 + 32) = a3;
  *(_QWORD *)(v18 + 40) = a4;
  *(_QWORD *)(v18 + 48) = 0x6C6F686563616C50;
  *(_QWORD *)(v18 + 56) = 0xEB00000000726564;
  swift_bridgeObjectRetain();
  v19 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v20 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v20)
  {
    sub_2416BB128();

    sub_24160EB5C(0, (unint64_t *)&qword_25713C680);
    sub_24160EBA4((unint64_t *)&qword_25713C688, (unint64_t *)&qword_25713C680, (uint64_t)&type metadata for MedicalIDCellPlaceholderTextStyle, (uint64_t (*)(void))sub_24160EC10);
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v12, v14, v16);
    swift_bridgeObjectRelease();
    sub_24160EA24((uint64_t)v11, v22, &qword_25713C678, (unint64_t *)&qword_25713C680);
  }
  else
  {
    __break(1u);
  }
}

void sub_24160E418(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_24160E1F0(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t sub_24160E424()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24160E434()
{
  uint64_t result;

  result = qword_25713C5E8;
  if (!qword_25713C5E8)
  {
    sub_24160E4FC();
    sub_24160E668();
    sub_24159CE88(&qword_25713C648, (uint64_t (*)(uint64_t))sub_24160E4FC, MEMORY[0x24BDF4498]);
    sub_24159CE88(&qword_25713C650, (uint64_t (*)(uint64_t))sub_24160E668, MEMORY[0x24BDF4700]);
    type metadata accessor for MedicalIDAXLayoutView();
  }
  return result;
}

void sub_24160E4FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C5F0)
  {
    sub_24159D6B0(255, &qword_25713C5F8, (uint64_t (*)(uint64_t))sub_24160E594, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2415A3F2C(&qword_25713C620, &qword_25713C5F8, (uint64_t (*)(uint64_t))sub_24160E594);
    v0 = sub_2416BAD8C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C5F0);
  }
}

void sub_24160E594()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713C600)
  {
    sub_24160E5FC();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713C600);
  }
}

void sub_24160E5FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C608)
  {
    sub_24160EAF0(255, &qword_25713C610, &qword_25713C618);
    v0 = sub_2416BB434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C608);
  }
}

void sub_24160E668()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C628)
  {
    sub_24159D6B0(255, &qword_25713C630, (uint64_t (*)(uint64_t))sub_24160E700, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2415A3F2C(&qword_25713C640, &qword_25713C630, (uint64_t (*)(uint64_t))sub_24160E700);
    v0 = sub_2416BADF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C628);
  }
}

void sub_24160E700()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713C638)
  {
    sub_24160E5FC();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713C638);
  }
}

uint64_t sub_24160E760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24160E998(0, (unint64_t *)&qword_25713A910, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24160E7B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24160DA08(v1 + 16, MEMORY[0x24BDEE730], (void (*)(_QWORD))sub_24160EA74, (uint64_t (*)(uint64_t))sub_24160D438, a1);
}

uint64_t objectdestroyTm_8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24160E820@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24160DA08(v1 + 16, MEMORY[0x24BDEEF78], (void (*)(_QWORD))sub_24160E89C, (uint64_t (*)(uint64_t))sub_24160DA60, a1);
}

uint64_t sub_24160E858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24160E434();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_24160E89C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C658)
  {
    sub_24159D6B0(255, &qword_25713C630, (uint64_t (*)(uint64_t))sub_24160E700, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C658);
  }
}

uint64_t sub_24160E918(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24160E5FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24160E95C(uint64_t a1)
{
  uint64_t v2;

  sub_24160E5FC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_24160E998(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x24BEE0D00]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_24160E9E0()
{
  unint64_t result;

  result = qword_25713C668;
  if (!qword_25713C668)
  {
    result = MEMORY[0x2426994BC](&unk_2416C0F8C, &type metadata for MedicalIDCellBodyTextStyle);
    atomic_store(result, (unint64_t *)&qword_25713C668);
  }
  return result;
}

uint64_t sub_24160EA24(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6;

  sub_24160EAF0(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void sub_24160EA74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C670)
  {
    sub_24159D6B0(255, &qword_25713C5F8, (uint64_t (*)(uint64_t))sub_24160E594, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C670);
  }
}

void sub_24160EAF0(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_24160EB5C(255, a3);
    sub_2416BA768();
    v4 = sub_2416BA150();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_24160EB5C(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_2416BA150();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_24160EBA4(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    sub_24160EB5C(255, a2);
    v8 = v7;
    v9 = a4();
    v10[0] = MEMORY[0x24BDF1F80];
    v10[1] = v9;
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v8, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24160EC10()
{
  unint64_t result;

  result = qword_25713C690;
  if (!qword_25713C690)
  {
    result = MEMORY[0x2426994BC](&unk_2416C0E54, &type metadata for MedicalIDCellPlaceholderTextStyle);
    atomic_store(result, (unint64_t *)&qword_25713C690);
  }
  return result;
}

uint64_t sub_24160EC54()
{
  return sub_24159CE88(&qword_25713C698, (uint64_t (*)(uint64_t))sub_24160E434, (uint64_t)&unk_2416C0968);
}

unint64_t sub_24160EC84()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713C6A0;
  if (!qword_25713C6A0)
  {
    sub_24160EAF0(255, &qword_25713C678, (unint64_t *)&qword_25713C680);
    v2 = v1;
    v3[0] = sub_24160EBA4((unint64_t *)&qword_25713C688, (unint64_t *)&qword_25713C680, (uint64_t)&type metadata for MedicalIDCellPlaceholderTextStyle, (uint64_t (*)(void))sub_24160EC10);
    v3[1] = sub_24159CE88(&qword_257139D68, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713C6A0);
  }
  return result;
}

uint64_t EditPhotoCellView.body.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v42 = a1;
  sub_24160F2A4();
  *(_QWORD *)&v37 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24160F54C(0);
  v41 = v5;
  v40 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415BE730(0, &qword_25713C720, v8);
  v39 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v38 = (char *)&v33 - v10;
  v11 = v1[1];
  v50 = *v1;
  v51 = v11;
  v52 = v1[2];
  *(_QWORD *)v4 = sub_2416BA468();
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 1;
  sub_24160FB68();
  sub_24160F698(&v50, &v4[*(int *)(v12 + 44)]);
  v53 = v50;
  v43 = v50;
  sub_24159D6B0(0, &qword_25713C730, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v36 = v13;
  sub_2416BAD2C();
  v14 = v45;
  v15 = v46;
  swift_getKeyPath();
  v45 = v14;
  *(_QWORD *)&v46 = v15;
  sub_24159D6B0(0, &qword_25713C738, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  sub_2416BAE28();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v16 = (_OWORD *)swift_allocObject();
  v17 = v51;
  v16[1] = v50;
  v16[2] = v17;
  v16[3] = v52;
  sub_241610398((uint64_t)&v50);
  sub_24160F5FC(0);
  sub_24159CE88(&qword_25713C708, (uint64_t (*)(uint64_t))sub_24160F2A4, MEMORY[0x24BDF4498]);
  sub_24160F618();
  sub_2416BAAA4();
  swift_release();
  swift_release();
  swift_release();
  sub_2415A6154((uint64_t)v4, (uint64_t (*)(_QWORD))sub_24160F2A4);
  v43 = v53;
  sub_2416BAD2C();
  v18 = v45;
  v19 = v46;
  swift_getKeyPath();
  v43 = v18;
  v44 = v19;
  sub_2416BAE28();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v37 = v45;
  v35 = v46;
  v34 = v47;
  v33 = v48;
  v20 = v49;
  v21 = v40;
  v22 = (uint64_t)v38;
  v23 = v41;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v38, v7, v41);
  v24 = v22 + *(int *)(v39 + 36);
  v25 = v35;
  *(_OWORD *)v24 = v37;
  *(_OWORD *)(v24 + 16) = v25;
  v26 = v33;
  *(_OWORD *)(v24 + 32) = v34;
  *(_OWORD *)(v24 + 48) = v26;
  *(_QWORD *)(v24 + 64) = v20;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v23);
  v45 = v53;
  sub_2416BAD14();
  v27 = v43;
  swift_getKeyPath();
  *(_QWORD *)&v45 = v27;
  sub_24159CE88((unint64_t *)&qword_25713C740, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t)&protocol conformance descriptor for EditPhotoCellView.ViewModel);
  sub_2416B9CAC();
  swift_release();
  v28 = *(_QWORD *)(v27 + 64);
  v29 = *(_QWORD *)(v27 + 72);
  sub_2415C357C(v28, v29);
  swift_release();
  *(_QWORD *)&v45 = v28;
  *((_QWORD *)&v45 + 1) = v29;
  v30 = (_OWORD *)swift_allocObject();
  v31 = v51;
  v30[1] = v50;
  v30[2] = v31;
  v30[3] = v52;
  sub_241610398((uint64_t)&v50);
  sub_2415CA708();
  sub_2416119AC();
  sub_241611A8C();
  sub_2416BABDC();
  swift_release();
  sub_2415C3524(v45, *((unint64_t *)&v45 + 1));
  return sub_2415C2970(v22, (uint64_t)&qword_25713C720, (uint64_t)sub_24160F54C, (uint64_t)&type metadata for BasicAlertModifier, (uint64_t (*)(_QWORD))sub_2415BE730);
}

void sub_24160F2A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C6A8)
  {
    sub_24159D6B0(255, &qword_25713C6B0, (uint64_t (*)(uint64_t))sub_24160F33C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2415A3F2C(&qword_25713C6F0, &qword_25713C6B0, (uint64_t (*)(uint64_t))sub_24160F33C);
    v0 = sub_2416BAD8C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C6A8);
  }
}

void sub_24160F33C()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713C6B8)
  {
    sub_24160F3A4(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713C6B8);
  }
}

void sub_24160F3A4(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_25713C6C0, sub_24160F3C0, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
}

void sub_24160F3C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_25713C6C8)
  {
    sub_24160F44C();
    v5[0] = v2;
    v5[1] = sub_24159CE88(&qword_25713C6E8, (uint64_t (*)(uint64_t))sub_24160F44C, MEMORY[0x24BDF1A70]);
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF2F10], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713C6C8);
  }
}

void sub_24160F44C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C6D0)
  {
    sub_24160F4C4();
    sub_24160F508();
    v0 = sub_2416BA978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C6D0);
  }
}

unint64_t sub_24160F4C4()
{
  unint64_t result;

  result = qword_25713C6D8;
  if (!qword_25713C6D8)
  {
    result = MEMORY[0x2426994BC](&unk_2416BF790, &type metadata for PhotoEditView);
    atomic_store(result, (unint64_t *)&qword_25713C6D8);
  }
  return result;
}

unint64_t sub_24160F508()
{
  unint64_t result;

  result = qword_25713C6E0;
  if (!qword_25713C6E0)
  {
    result = MEMORY[0x2426994BC](&unk_2416BF740, &type metadata for PhotoEditMenuView);
    atomic_store(result, (unint64_t *)&qword_25713C6E0);
  }
  return result;
}

void sub_24160F54C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_25713C6F8)
  {
    sub_24160F2A4();
    v3 = v2;
    sub_24160F5FC(255);
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_24159CE88(&qword_25713C708, (uint64_t (*)(uint64_t))sub_24160F2A4, MEMORY[0x24BDF4498]);
    v7[3] = sub_24160F618();
    v5 = MEMORY[0x242699480](a1, v7, MEMORY[0x24BDF2838], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25713C6F8);
  }
}

void sub_24160F5FC(uint64_t a1)
{
  sub_2415BE730(a1, &qword_25713C700, (void (*)(uint64_t))type metadata accessor for ImagePickerView);
}

unint64_t sub_24160F618()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713C710;
  if (!qword_25713C710)
  {
    sub_24160F5FC(255);
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713C718, type metadata accessor for ImagePickerView, (uint64_t)&unk_2416C17DC);
    v3[1] = MEMORY[0x24BDF1050];
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713C710);
  }
  return result;
}

uint64_t sub_24160F698@<X0>(_OWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _OWORD *v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;

  v46 = a2;
  v3 = sub_2416BA6B4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24160F44C();
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24160F3C0(0);
  v43 = *(_QWORD *)(v12 - 8);
  v44 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24160F3A4(0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v45 = (uint64_t)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v42 = (char *)&v41 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v41 - v20;
  v48 = a1;
  v47 = a1;
  sub_24160F4C4();
  sub_24160F508();
  sub_2416BA96C();
  sub_2416BA69C();
  v22 = sub_24159CE88(&qword_25713C6E8, (uint64_t (*)(uint64_t))sub_24160F44C, MEMORY[0x24BDF1A70]);
  sub_2416BAB04();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v51 = *a1;
  sub_24159D6B0(0, &qword_25713C730, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v23 = v49;
  swift_getKeyPath();
  *(_QWORD *)&v51 = v23;
  sub_24159CE88((unint64_t *)&qword_25713C740, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t)&protocol conformance descriptor for EditPhotoCellView.ViewModel);
  sub_2416B9CAC();
  swift_release();
  v24 = *(_QWORD *)(v23 + 64);
  v25 = *(_QWORD *)(v23 + 72);
  sub_2415C357C(v24, v25);
  swift_release();
  v26 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v26);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v27 = (void *)qword_25713A038;
  v28 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v28);
  v29 = v27;
  sub_2416B9C04();
  v30 = sub_2416BB134();
  v32 = v31;
  sub_2415C3524(v24, v25);
  *(_QWORD *)&v51 = v30;
  *((_QWORD *)&v51 + 1) = v32;
  v49 = v8;
  v50 = v22;
  swift_getOpaqueTypeConformance2();
  sub_2415C343C();
  v33 = (uint64_t)v42;
  v34 = v44;
  sub_2416BAAE0();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v34);
  sub_2415A85BC(v33, (uint64_t)v21, (uint64_t (*)(_QWORD))sub_24160F3A4);
  v35 = v45;
  sub_2415BEF64((uint64_t)v21, v45, (uint64_t (*)(_QWORD))sub_24160F3A4);
  v36 = v46;
  *v46 = 0;
  *((_BYTE *)v36 + 8) = 1;
  sub_24160F33C();
  v38 = v37;
  sub_2415BEF64(v35, (uint64_t)v36 + *(int *)(v37 + 48), (uint64_t (*)(_QWORD))sub_24160F3A4);
  v39 = (char *)v36 + *(int *)(v38 + 64);
  *(_QWORD *)v39 = 0;
  v39[8] = 1;
  sub_2415A6154((uint64_t)v21, (uint64_t (*)(_QWORD))sub_24160F3A4);
  return sub_2415A6154(v35, (uint64_t (*)(_QWORD))sub_24160F3A4);
}

void sub_24160FB68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C728)
  {
    sub_24159D6B0(255, &qword_25713C6B0, (uint64_t (*)(uint64_t))sub_24160F33C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C728);
  }
}

void sub_24160FBE4(Swift::Void (__swiftcall **a1)()@<X8>)
{
  uint64_t (*v2)();
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;

  sub_24159D6B0(0, &qword_25713C730, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  sub_2416BAD14();
  sub_2416BAD14();
  swift_getKeyPath();
  sub_24159CE88((unint64_t *)&qword_25713C740, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t)&protocol conformance descriptor for EditPhotoCellView.ViewModel);
  sub_2416B9CAC();
  swift_release();
  if (*(_QWORD *)(v10 + 72) >> 60 == 15)
  {
    swift_release();
    v2 = 0;
    v3 = 0;
  }
  else
  {
    v3 = swift_allocObject();
    swift_weakInit();
    swift_release();
    v2 = sub_241612BEC;
  }
  v4 = 0x6369506F746F6850;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2416BCC80;
  *(_QWORD *)(v5 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v5 + 40) = 0xE900000000000044;
  v6 = 0xEB0000000072656BLL;
  *(_QWORD *)(v5 + 48) = 0x6369506F746F6850;
  *(_QWORD *)(v5 + 56) = 0xEB0000000072656BLL;
  v7 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v8 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v8)
  {
    v4 = sub_2416BB128();
    v6 = v9;

  }
  *a1 = j___s11MedicalIDUI17EditPhotoCellViewV0F5ModelC22cameraMenuButtonTappedyyF;
  a1[1] = (Swift::Void (__swiftcall *)())v10;
  a1[2] = (Swift::Void (__swiftcall *)())sub_241612BC0;
  a1[3] = (Swift::Void (__swiftcall *)())v10;
  a1[4] = (Swift::Void (__swiftcall *)())v2;
  a1[5] = (Swift::Void (__swiftcall *)())v3;
  a1[6] = (Swift::Void (__swiftcall *)())v4;
  a1[7] = (Swift::Void (__swiftcall *)())v6;
}

uint64_t sub_24160FE30()
{
  swift_getKeyPath();
  sub_24159CE88((unint64_t *)&qword_25713C740, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t)&protocol conformance descriptor for EditPhotoCellView.ViewModel);
  sub_2416B9CA0();
  return swift_release();
}

void sub_24160FED4(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;

  v2 = 0x746F685074696445;
  sub_24159D6B0(0, &qword_25713C730, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  swift_getKeyPath();
  sub_24159CE88((unint64_t *)&qword_25713C740, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t)&protocol conformance descriptor for EditPhotoCellView.ViewModel);
  sub_2416B9CAC();
  swift_release();
  v3 = *(_QWORD *)(v10 + 64);
  v4 = *(_QWORD *)(v10 + 72);
  sub_2415C357C(v3, v4);
  swift_release();
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2416BCC80;
  v6 = 0xE90000000000006FLL;
  *(_QWORD *)(v5 + 32) = 0x496C61636964654DLL;
  *(_QWORD *)(v5 + 40) = 0xE900000000000044;
  *(_QWORD *)(v5 + 48) = 0x746F685074696445;
  *(_QWORD *)(v5 + 56) = 0xE90000000000006FLL;
  v7 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v8 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v8)
  {
    v2 = sub_2416BB128();
    v6 = v9;

  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v2;
  a1[3] = v6;
}

uint64_t sub_241610074@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_24159CE88((unint64_t *)&qword_25713C740, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t)&protocol conformance descriptor for EditPhotoCellView.ViewModel);
  sub_2416B9CAC();
  result = swift_release();
  *a2 = (*(_BYTE *)(v3 + 88) & 1) == 0;
  return result;
}

void sub_24161010C(char *a1)
{
  EditPhotoCellView.ViewModel.imagePickerSheetOpen.setter(*a1);
}

void sub_241610130(char *a1)
{
  EditPhotoCellView.ViewModel.imagePickerSheetOpen.setter(*a1);
}

uint64_t sub_241610154@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Void (__swiftcall *v11)(UIImage);
  uint64_t v12;
  int v13;
  uint64_t v14;
  Swift::Void (__swiftcall *v15)(UIImage);
  Swift::Void (__swiftcall **v16)(UIImage);
  uint64_t v17;
  char v18;
  char *v19;
  __int128 v21;
  Swift::Void (__swiftcall *v22)(UIImage);
  __int128 v23;

  v4 = type metadata accessor for ImagePickerView(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24160F5FC(0);
  v8 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  v21 = *a1;
  sub_24159D6B0(0, &qword_25713C730, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v11 = v22;
  swift_getKeyPath();
  *(_QWORD *)&v21 = v11;
  sub_24159CE88((unint64_t *)&qword_25713C740, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t)&protocol conformance descriptor for EditPhotoCellView.ViewModel);
  sub_2416B9CAC();
  swift_release();
  v12 = *((_QWORD *)v11 + 10);
  v13 = *((unsigned __int8 *)v11 + 88);
  swift_release();
  if (v13)
    v14 = 1;
  else
    v14 = v12;
  v21 = v23;
  sub_2416BAD14();
  v15 = v22;
  *v6 = swift_getKeyPath();
  sub_24159D6B0(0, &qword_25713A5B8, (uint64_t (*)(uint64_t))sub_2415C3694, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  *(uint64_t *)((char *)v6 + *(int *)(v4 + 20)) = v14;
  v16 = (Swift::Void (__swiftcall **)(UIImage))((char *)v6 + *(int *)(v4 + 24));
  *v16 = j___s11MedicalIDUI17EditPhotoCellViewV0F5ModelC8selected5imageySo7UIImageC_tF;
  v16[1] = v15;
  v17 = sub_2416BA174();
  v18 = sub_2416BA81C();
  sub_2415BEF64((uint64_t)v6, (uint64_t)v10, type metadata accessor for ImagePickerView);
  v19 = &v10[*(int *)(v8 + 36)];
  *(_QWORD *)v19 = v17;
  v19[8] = v18;
  sub_2415A6154((uint64_t)v6, type metadata accessor for ImagePickerView);
  return sub_2415A85BC((uint64_t)v10, a2, (uint64_t (*)(_QWORD))sub_24160F5FC);
}

uint64_t sub_241610390@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_241610154((__int128 *)(v1 + 16), a1);
}

uint64_t sub_241610398(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_2415C357C(v2, v3);
  return a1;
}

uint64_t sub_241610400@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*a1;
  swift_getKeyPath();
  sub_24159CE88((unint64_t *)&qword_25713C740, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t)&protocol conformance descriptor for EditPhotoCellView.ViewModel);
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v4 = v3[12];
  v5 = v3[13];
  v6 = v3[14];
  v7 = v3[15];
  v8 = v3[16];
  v9 = v3[17];
  v10 = v3[18];
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  return sub_24160ADF4(v4, v5);
}

uint64_t sub_2416104C0(uint64_t a1)
{
  _QWORD v2[7];

  sub_241612AD4(a1, (uint64_t)v2);
  swift_getKeyPath();
  sub_241612B48(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24160ADF4);
  sub_24159CE88((unint64_t *)&qword_25713C740, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t)&protocol conformance descriptor for EditPhotoCellView.ViewModel);
  sub_2416B9CA0();
  sub_241612B48(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24160AD24);
  return swift_release();
}

uint64_t sub_241610594(uint64_t a1, uint64_t a2)
{
  sub_2415C357C(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  sub_24159D6B0(0, &qword_25713AB30, (uint64_t (*)(uint64_t))sub_2415CA708, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  return sub_2416BAE1C();
}

uint64_t sub_2416105FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t *v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v79 = a3;
  v5 = sub_2416BA258();
  v77 = *(_QWORD *)(v5 - 8);
  v78 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v76 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_2416B9FAC();
  v72 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v71 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2416BA504();
  v65 = *(_QWORD *)(v8 - 8);
  v66 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241609510();
  v64 = v11;
  v63 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416125F0(0);
  v68 = *(_QWORD *)(v14 - 8);
  v69 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416125CC(0);
  v62 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416125A8(0);
  v67 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24161258C(0);
  v70 = v23;
  v24 = MEMORY[0x24BDAC7A8](v23);
  v75 = (uint64_t)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v62 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v73 = (uint64_t)&v62 - v29;
  v30 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v30);
  if (a2 >> 60 != 15)
    sub_2415C357C(a1, a2);
  sub_2416BB098();
  v80 = a1;
  v81 = a2;
  if (qword_257139300 != -1)
    swift_once();
  v31 = (void *)qword_25713A038;
  v32 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v32);
  v33 = v31;
  sub_2416B9C04();
  v82 = sub_2416BB134();
  v83 = v34;
  sub_2415C343C();
  sub_2416BAD68();
  sub_2416BA4F8();
  sub_24159CE88((unint64_t *)&qword_25713B4E0, (uint64_t (*)(uint64_t))sub_241609510, MEMORY[0x24BDF43B0]);
  sub_24159CE88(&qword_25713C798, (uint64_t (*)(uint64_t))MEMORY[0x24BDEEDC8], MEMORY[0x24BDEEDB8]);
  v35 = v64;
  v36 = v66;
  sub_2416BAA14();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v10, v36);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v13, v35);
  v38 = v71;
  v37 = v72;
  v39 = v74;
  (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v71, *MEMORY[0x24BDEB490], v74);
  KeyPath = swift_getKeyPath();
  v41 = (uint64_t *)&v19[*(int *)(v62 + 36)];
  v42 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008];
  sub_24159D6B0(0, &qword_25713C7A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB4A0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))((char *)v41 + *(int *)(v43 + 28), v38, v39);
  *v41 = KeyPath;
  v45 = v68;
  v44 = v69;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v19, v16, v69);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v44);
  v46 = v76;
  sub_2416BA24C();
  v47 = swift_getKeyPath();
  v48 = (uint64_t *)&v22[*(int *)(v67 + 36)];
  sub_24159D6B0(0, &qword_25713C7A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDEDCA8], v42);
  v51 = v77;
  v50 = v78;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))((char *)v48 + *(int *)(v49 + 28), v46, v78);
  *v48 = v47;
  sub_2415BEF64((uint64_t)v19, (uint64_t)v22, (uint64_t (*)(_QWORD))sub_2416125CC);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v46, v50);
  sub_2415A6154((uint64_t)v19, (uint64_t (*)(_QWORD))sub_2416125CC);
  v52 = sub_2416BAC18();
  v53 = swift_getKeyPath();
  sub_2415BEF64((uint64_t)v22, (uint64_t)v28, (uint64_t (*)(_QWORD))sub_2416125A8);
  v54 = (uint64_t *)&v28[*(int *)(v70 + 36)];
  *v54 = v53;
  v54[1] = v52;
  sub_2415A6154((uint64_t)v22, (uint64_t (*)(_QWORD))sub_2416125A8);
  v55 = v73;
  sub_2415A85BC((uint64_t)v28, v73, (uint64_t (*)(_QWORD))sub_24161258C);
  v56 = v75;
  sub_2415BEF64(v55, v75, (uint64_t (*)(_QWORD))sub_24161258C);
  v58 = v79;
  v57 = v80;
  v59 = v81;
  *v79 = v80;
  v58[1] = v59;
  sub_241612528();
  sub_2415BEF64(v56, (uint64_t)v58 + *(int *)(v60 + 48), (uint64_t (*)(_QWORD))sub_24161258C);
  sub_2415C357C(v57, v59);
  sub_2415A6154(v55, (uint64_t (*)(_QWORD))sub_24161258C);
  sub_2415A6154(v56, (uint64_t (*)(_QWORD))sub_24161258C);
  return sub_2415C3524(v57, v59);
}

uint64_t sub_241610C74@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v4 = v1[1];
  *(_QWORD *)a1 = sub_2416BA510();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  sub_2416124AC();
  return sub_2416105FC(v3, v4, (uint64_t *)(a1 + *(int *)(v5 + 44)));
}

void sub_241610CDC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  void *v62;
  id v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(void);
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  _OWORD v113[2];

  v2 = v1;
  v100 = a1;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_24159D6B0(0, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v93 = (char *)&v90 - v5;
  sub_24159D6B0(0, &qword_25713C7C0, (uint64_t (*)(uint64_t))sub_24161283C, v3);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v99 = (uint64_t)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v98 = (uint64_t)&v90 - v9;
  sub_241612858();
  v112 = v10;
  v106 = *(char **)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v102 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v108 = (char *)&v90 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v90 - v15;
  sub_24161283C(0);
  v95 = v17;
  v94 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v97 = (uint64_t)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v96 = (uint64_t)&v90 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v92 = (char *)&v90 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v91 = (uint64_t)&v90 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v101 = (char *)&v90 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v103 = (uint64_t)&v90 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v90 - v31;
  MEMORY[0x24BDAC7A8](v30);
  v34 = (char *)&v90 - v33;
  v35 = *(_QWORD *)(v2 + 8);
  v37 = *(_QWORD *)(v2 + 24);
  v36 = *(_QWORD *)(v2 + 32);
  v38 = *(_QWORD *)(v2 + 40);
  v113[0] = *(_OWORD *)(v2 + 48);
  v39 = (_OWORD *)swift_allocObject();
  v40 = *(_OWORD *)(v2 + 16);
  v39[1] = *(_OWORD *)v2;
  v39[2] = v40;
  v41 = *(_OWORD *)(v2 + 48);
  v39[3] = *(_OWORD *)(v2 + 32);
  v39[4] = v41;
  v104 = v35;
  swift_retain();
  v105 = v37;
  swift_retain();
  sub_241609624((uint64_t)v113);
  v109 = v36;
  v107 = v38;
  sub_2415A4818(v36);
  sub_2416128D0();
  v43 = v42;
  v44 = sub_24159CE88(&qword_25713C7E0, (uint64_t (*)(uint64_t))sub_2416128D0, MEMORY[0x24BDF41A8]);
  v111 = v43;
  sub_2416BAD50();
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v46 = v45;
  v47 = swift_allocObject();
  v48 = v113[0];
  v110 = xmmword_2416BCC80;
  *(_OWORD *)(v47 + 16) = xmmword_2416BCC80;
  *(_OWORD *)(v47 + 32) = v48;
  v49 = *((_QWORD *)&v113[0] + 1);
  *(_QWORD *)(v47 + 48) = 0x6172656D6143;
  *(_QWORD *)(v47 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  v50 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v51 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v51)
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_2416BB128();

  sub_24159CE88(&qword_25713C7E8, (uint64_t (*)(uint64_t))sub_241612858, MEMORY[0x24BDF43B0]);
  v52 = v112;
  sub_2416BAB1C();
  swift_bridgeObjectRelease();
  v53 = (void (*)(char *, uint64_t))*((_QWORD *)v106 + 1);
  v53(v16, v52);
  v106 = v34;
  sub_2415A85BC((uint64_t)v32, (uint64_t)v34, (uint64_t (*)(_QWORD))sub_24161283C);
  v54 = (_OWORD *)swift_allocObject();
  v55 = *(_OWORD *)(v2 + 16);
  v54[1] = *(_OWORD *)v2;
  v54[2] = v55;
  v56 = *(_OWORD *)(v2 + 48);
  v54[3] = *(_OWORD *)(v2 + 32);
  v54[4] = v56;
  swift_retain();
  swift_retain();
  sub_241609624((uint64_t)v113);
  v57 = v109;
  v58 = v107;
  sub_2415A4818(v109);
  v59 = v108;
  v105 = v44;
  sub_2416BAD50();
  v104 = v46;
  v60 = swift_allocObject();
  v61 = v113[0];
  *(_OWORD *)(v60 + 16) = v110;
  *(_OWORD *)(v60 + 32) = v61;
  *(_QWORD *)(v60 + 48) = 0x7972617262694CLL;
  *(_QWORD *)(v60 + 56) = 0xE700000000000000;
  v90 = v49;
  swift_bridgeObjectRetain();
  v62 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v63 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v63)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  sub_2416BB128();

  v64 = v101;
  v65 = v112;
  sub_2416BAB1C();
  swift_bridgeObjectRelease();
  v53(v59, v65);
  v66 = (uint64_t)v64;
  v67 = v103;
  sub_2415A85BC(v66, v103, (uint64_t (*)(_QWORD))sub_24161283C);
  v68 = v102;
  if (!v57)
  {
    v81 = 1;
    v80 = v98;
    v76 = (uint64_t)v106;
    goto LABEL_7;
  }
  swift_retain();
  v69 = v93;
  sub_2416B9EA4();
  v70 = sub_2416B9EBC();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v69, 0, 1, v70);
  v71 = swift_allocObject();
  *(_QWORD *)(v71 + 16) = v57;
  *(_QWORD *)(v71 + 24) = v58;
  swift_retain();
  sub_2416BAD44();
  v72 = swift_allocObject();
  v73 = v113[0];
  *(_OWORD *)(v72 + 16) = v110;
  *(_OWORD *)(v72 + 32) = v73;
  *(_QWORD *)(v72 + 48) = 0x6574656C6544;
  *(_QWORD *)(v72 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  v74 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v75 = (id)HKUIJoinStringsForAutomationIdentifier();

  v76 = (uint64_t)v106;
  if (v75)
  {
    sub_2416BB128();

    v77 = (uint64_t)v92;
    v78 = v112;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A6144(v109);
    v53(v68, v78);
    v79 = v91;
    sub_2415A85BC(v77, v91, (uint64_t (*)(_QWORD))sub_24161283C);
    v80 = v98;
    sub_2415A85BC(v79, v98, (uint64_t (*)(_QWORD))sub_24161283C);
    v81 = 0;
LABEL_7:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v80, v81, 1, v95);
    v82 = v96;
    sub_2415BEF64(v76, v96, (uint64_t (*)(_QWORD))sub_24161283C);
    v83 = v97;
    sub_2415BEF64(v67, v97, (uint64_t (*)(_QWORD))sub_24161283C);
    v84 = v76;
    v85 = v99;
    sub_2416129B0(v80, v99);
    v86 = v100;
    sub_2415BEF64(v82, v100, (uint64_t (*)(_QWORD))sub_24161283C);
    sub_241612A0C();
    v88 = v87;
    sub_2415BEF64(v83, v86 + *(int *)(v87 + 48), (uint64_t (*)(_QWORD))sub_24161283C);
    sub_2416129B0(v85, v86 + *(int *)(v88 + 64));
    v89 = MEMORY[0x24BEE1C68];
    sub_2415C2970(v80, (uint64_t)&qword_25713C7C0, (uint64_t)sub_24161283C, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_24159D6B0);
    sub_2415A6154(v67, (uint64_t (*)(_QWORD))sub_24161283C);
    sub_2415A6154(v84, (uint64_t (*)(_QWORD))sub_24161283C);
    sub_2415C2970(v85, (uint64_t)&qword_25713C7C0, (uint64_t)sub_24161283C, (uint64_t)v89, (uint64_t (*)(_QWORD))sub_24159D6B0);
    sub_2415A6154(v83, (uint64_t (*)(_QWORD))sub_24161283C);
    sub_2415A6154(v82, (uint64_t (*)(_QWORD))sub_24161283C);
    return;
  }
LABEL_10:
  __break(1u);
}

uint64_t sub_2416115C4()
{
  return sub_241611658();
}

uint64_t sub_2416115F0()
{
  return sub_241611658();
}

uint64_t sub_241611628()
{
  return sub_241611658();
}

uint64_t sub_241611658()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  v0 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v0);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v1 = (void *)qword_25713A038;
  v2 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v2);
  v3 = v1;
  sub_2416B9C04();
  sub_2416BB134();
  sub_2415C343C();
  return sub_2416BACF0();
}

void sub_2416117B4(uint64_t a1@<X8>)
{
  sub_241610CDC(a1);
}

uint64_t sub_2416117EC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *a1;
  swift_getKeyPath();
  sub_24159CE88((unint64_t *)&qword_25713C740, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t)&protocol conformance descriptor for EditPhotoCellView.ViewModel);
  sub_2416B9CAC();
  swift_release();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v3 + 72);
  *a2 = v4;
  a2[1] = v5;
  return sub_2415C357C(v4, v5);
}

uint64_t sub_241611880(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_getKeyPath();
  sub_2415C357C(v1, v2);
  sub_24159CE88((unint64_t *)&qword_25713C740, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, (uint64_t)&protocol conformance descriptor for EditPhotoCellView.ViewModel);
  sub_2416B9CA0();
  sub_2415C3524(v1, v2);
  return swift_release();
}

uint64_t objectdestroyTm_9()
{
  uint64_t v0;
  unint64_t v1;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 56);
  if (v1 >> 60 != 15)
    sub_2415A0DAC(*(_QWORD *)(v0 + 48), v1);
  return swift_deallocObject();
}

uint64_t sub_2416119A4(uint64_t a1, uint64_t a2)
{
  return sub_241610594(a1, a2);
}

unint64_t sub_2416119AC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[6];

  result = qword_25713C748;
  if (!qword_25713C748)
  {
    sub_2415BE730(255, &qword_25713C720, sub_24160F54C);
    v2 = v1;
    sub_24160F2A4();
    v4 = v3;
    sub_24160F5FC(255);
    v6[2] = v4;
    v6[3] = v5;
    v6[4] = sub_24159CE88(&qword_25713C708, (uint64_t (*)(uint64_t))sub_24160F2A4, MEMORY[0x24BDF4498]);
    v6[5] = sub_24160F618();
    v6[0] = swift_getOpaqueTypeConformance2();
    v6[1] = sub_24160AA40();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v6);
    atomic_store(result, (unint64_t *)&qword_25713C748);
  }
  return result;
}

unint64_t sub_241611A8C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_25713C750;
  if (!qword_25713C750)
  {
    sub_2415CA708();
    v2 = v1;
    v3 = sub_241611AEC();
    result = MEMORY[0x2426994BC](MEMORY[0x24BEE4AB8], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_25713C750);
  }
  return result;
}

unint64_t sub_241611AEC()
{
  unint64_t result;

  result = qword_25713C758;
  if (!qword_25713C758)
  {
    result = MEMORY[0x2426994BC](MEMORY[0x24BDCDE18], MEMORY[0x24BDCDDF0]);
    atomic_store(result, (unint64_t *)&qword_25713C758);
  }
  return result;
}

uint64_t sub_241611B30()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for EditPhotoCellView(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >> 60 != 15)
    return sub_2415A0DAC(*(_QWORD *)(a1 + 32), v3);
  return result;
}

uint64_t initializeWithCopy for EditPhotoCellView(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v4;
  v5 = a2 + 4;
  v6 = a2[5];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v5;
  }
  else
  {
    v7 = *v5;
    sub_2415A0A90(*v5, v6);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v6;
  }
  return a1;
}

_QWORD *assignWithCopy for EditPhotoCellView(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  v4 = a2 + 4;
  v5 = a2[5];
  if (a1[5] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_2415A0A90(*v4, v5);
      v8 = a1[4];
      v9 = a1[5];
      a1[4] = v7;
      a1[5] = v5;
      sub_2415A0DAC(v8, v9);
      return a1;
    }
    sub_2415A1B38((uint64_t)(a1 + 4));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 2) = *(_OWORD *)v4;
    return a1;
  }
  v6 = *v4;
  sub_2415A0A90(*v4, v5);
  a1[4] = v6;
  a1[5] = v5;
  return a1;
}

_QWORD *assignWithTake for EditPhotoCellView(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  v4 = a2 + 4;
  v5 = a1[5];
  if (v5 >> 60 != 15)
  {
    v6 = a2[5];
    if (v6 >> 60 != 15)
    {
      v7 = a1[4];
      a1[4] = *v4;
      a1[5] = v6;
      sub_2415A0DAC(v7, v5);
      return a1;
    }
    sub_2415A1B38((uint64_t)(a1 + 4));
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for EditPhotoCellView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EditPhotoCellView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EditPhotoCellView()
{
  return &type metadata for EditPhotoCellView;
}

uint64_t sub_241611E94()
{
  sub_2415BE730(255, &qword_25713C720, sub_24160F54C);
  sub_2415CA708();
  sub_2416119AC();
  sub_241611A8C();
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for PhotoEditMenuView(uint64_t a1)
{
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 32))
    swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PhotoEditMenuView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  v6 = (_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_retain();
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v6;
  }
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PhotoEditMenuView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  v6 = a2[4];
  if (!a1[4])
  {
    if (v6)
    {
      v8 = a2[5];
      a1[4] = v6;
      a1[5] = v8;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    goto LABEL_8;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  v7 = a2[5];
  a1[4] = v6;
  a1[5] = v7;
  swift_retain();
  swift_release();
LABEL_8:
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PhotoEditMenuView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v4)
    {
      v6 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a1 + 40) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
LABEL_8:
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PhotoEditMenuView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhotoEditMenuView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotoEditMenuView()
{
  return &type metadata for PhotoEditMenuView;
}

uint64_t destroy for PhotoEditView(uint64_t *a1)
{
  unint64_t v1;

  v1 = a1[1];
  if (v1 >> 60 != 15)
    sub_2415A0DAC(*a1, v1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PhotoEditView(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    sub_2415A0A90(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for PhotoEditView(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *a2;
      sub_2415A0A90(*a2, a2[1]);
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_2415A0DAC(v7, v8);
      goto LABEL_8;
    }
    sub_2415A1B38((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v5 = *a2;
  sub_2415A0A90(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *assignWithTake for PhotoEditView(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_2415A0DAC(v6, v4);
      goto LABEL_6;
    }
    sub_2415A1B38((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PhotoEditView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhotoEditView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotoEditView()
{
  return &type metadata for PhotoEditView;
}

uint64_t sub_24161248C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24161249C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_2416124AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C760)
  {
    sub_24159D6B0(255, &qword_25713C768, (uint64_t (*)(uint64_t))sub_241612528, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_2416BA0C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C760);
  }
}

void sub_241612528()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713C770)
  {
    sub_24161258C(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713C770);
  }
}

void sub_24161258C(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_25713C778, sub_2416125A8, (void (*)(uint64_t))sub_2416126C4);
}

void sub_2416125A8(uint64_t a1)
{
  sub_2415DF1F8(a1, &qword_25713C780, sub_2416125CC, &qword_25713C7A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDEDCA8]);
}

void sub_2416125CC(uint64_t a1)
{
  sub_2415DF1F8(a1, &qword_25713C788, sub_2416125F0, &qword_25713C7A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB4A0]);
}

void sub_2416125F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_25713C790)
  {
    sub_241609510();
    v3 = v2;
    v4 = sub_2416BA504();
    v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEEDC8];
    v8[0] = v3;
    v8[1] = v4;
    v8[2] = sub_24159CE88((unint64_t *)&qword_25713B4E0, (uint64_t (*)(uint64_t))sub_241609510, MEMORY[0x24BDF43B0]);
    v8[3] = sub_24159CE88(&qword_25713C798, v5, MEMORY[0x24BDEEDB8]);
    v6 = MEMORY[0x242699480](a1, v8, MEMORY[0x24BDF22B8], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713C790);
  }
}

void sub_2416126C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C7B0)
  {
    sub_24159D7F0(255, &qword_25713C7B8, MEMORY[0x24BDF3E48], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v0 = sub_2416BA75C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C7B0);
  }
}

uint64_t sub_241612730()
{
  return sub_2416BA2AC();
}

uint64_t sub_241612750()
{
  return sub_2416BA2AC();
}

uint64_t sub_241612770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2415E240C(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDEB4A0], MEMORY[0x24BDEDF10]);
}

uint64_t sub_241612784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2415E240C(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDEB4A0], MEMORY[0x24BDEDF10]);
}

uint64_t sub_2416127A8()
{
  return sub_2416BA30C();
}

uint64_t sub_2416127C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2415E240C(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDEDCA8], MEMORY[0x24BDEE140]);
}

uint64_t sub_2416127EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_2416BA3F0();
  *a1 = result;
  return result;
}

uint64_t sub_241612814()
{
  swift_retain();
  return sub_2416BA3FC();
}

void sub_24161283C(uint64_t a1)
{
  sub_2415A39C0(a1, &qword_25713C7C8, (void (*)(uint64_t))sub_241612858, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
}

void sub_241612858()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C7D0)
  {
    sub_2416128D0();
    sub_24159CE88(&qword_25713C7E0, (uint64_t (*)(uint64_t))sub_2416128D0, MEMORY[0x24BDF41A8]);
    v0 = sub_2416BAD74();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C7D0);
  }
}

void sub_2416128D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C7D8)
  {
    v0 = sub_2416BACFC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C7D8);
  }
}

uint64_t objectdestroy_26Tm()
{
  uint64_t v0;

  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 48))
    swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_241612990()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_2416129B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, &qword_25713C7C0, (uint64_t (*)(uint64_t))sub_24161283C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_241612A0C()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713C7F0)
  {
    sub_24161283C(255);
    sub_24159D6B0(255, &qword_25713C7C0, (uint64_t (*)(uint64_t))sub_24161283C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713C7F0);
  }
}

uint64_t sub_241612A94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_241612AB8()
{
  uint64_t v0;

  return sub_241614F74(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_241612AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D7F0(0, (unint64_t *)&qword_25713A918, (uint64_t)&type metadata for BasicAlertModel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_241612B30()
{
  uint64_t v0;

  return sub_2416150DC(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

_QWORD *sub_241612B48(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

uint64_t sub_241612B8C()
{
  return sub_2416BA300();
}

void sub_241612BAC(Swift::Void (__swiftcall **a1)()@<X8>)
{
  sub_24160FBE4(a1);
}

void sub_241612BB4(uint64_t *a1@<X8>)
{
  sub_24160FED4(a1);
}

uint64_t sub_241612BC0()
{
  return sub_24160FE30();
}

uint64_t sub_241612BC8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_241612BEC()
{
  return sub_241615CE8();
}

uint64_t sub_241612BF4()
{
  uint64_t v0;

  return sub_2416150CC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_241612C10()
{
  return sub_24159CE88(&qword_25713C7F8, (uint64_t (*)(uint64_t))sub_241612C3C, MEMORY[0x24BDF4700]);
}

void sub_241612C3C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713C800)
  {
    sub_24159D6B0(255, &qword_25713C768, (uint64_t (*)(uint64_t))sub_241612528, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_2415A3F2C(&qword_25713C808, &qword_25713C768, (uint64_t (*)(uint64_t))sub_241612528);
    v0 = sub_2416BADF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713C800);
  }
}

uint64_t sub_241612CD4()
{
  return sub_2415A3F2C(&qword_25713C810, qword_25713C818, (uint64_t (*)(uint64_t))sub_241612A0C);
}

id _HKMedicalIDData.displayName.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;

  v1 = objc_msgSend(v0, sel_name);
  if (v1)
  {
    v2 = sub_2416BB128();
    v4 = v3;

    swift_bridgeObjectRelease();
    v5 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0)
      v5 = v2 & 0xFFFFFFFFFFFFLL;
    if (v5 && (v6 = objc_msgSend(v0, sel_name)) != 0)
    {
      v7 = v6;
      v1 = (id)sub_2416BB128();

    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t _HKMedicalIDData.typedCopy.getter()
{
  void *v0;
  uint64_t v2;

  swift_getObjectType();
  objc_msgSend(v0, sel_copy);
  sub_2416BB494();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  return v2;
}

void **sub_241612E2C(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    v7 = a1;
    v8 = type metadata accessor for MedicalIDMedicalInfoViewModel();
    v9 = *(int *)(v8 + 20);
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_2416B9C70();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v14 = v4;
    v13(v10, v11, v12);
    v15 = *(int *)(v8 + 24);
    v16 = (char *)v7 + v15;
    v17 = (char *)a2 + v15;
    v18 = sub_2416B9C10();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = *(int *)(a3 + 20);
    v20 = (void **)((char *)v7 + v19);
    v21 = (void **)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
  }
  swift_retain();
  return v7;
}

uint64_t sub_241612F24(id *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v3 = (char *)a1 + *(int *)(v2 + 20);
  v4 = sub_2416B9C70();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (char *)a1 + *(int *)(v2 + 24);
  v6 = sub_2416B9C10();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_release();
}

void **sub_241612FB4(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v6 = *a2;
  *a1 = *a2;
  v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v8 = *(int *)(v7 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2416B9C70();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v13 = v6;
  v12(v9, v10, v11);
  v14 = *(int *)(v7 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = *(int *)(a3 + 20);
  v19 = (void **)((char *)a1 + v18);
  v20 = (void **)((char *)a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_retain();
  return a1;
}

void **sub_241613088(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v10 = *(int *)(v9 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = *(int *)(v9 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = *(int *)(a3 + 20);
  v19 = (void **)((char *)a1 + v18);
  v20 = (void **)((char *)a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_24161315C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v7 = *(int *)(v6 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(v6 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void **sub_24161320C(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = *a1;
  *a1 = *a2;

  v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v8 = *(int *)(v7 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(v7 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_2416132D0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416132DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_241613358()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_241613364(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MedicalIDMedicationsCellView()
{
  uint64_t result;

  result = qword_25713C878;
  if (!qword_25713C878)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_241613418()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24161348C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24161349C@<X0>(uint64_t a1@<X8>)
{
  void **v1;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  if (qword_257139490 != -1)
    swift_once();
  v3 = *(_QWORD *)algn_257147738;
  v21 = qword_257147730;
  v4 = *v1;
  swift_bridgeObjectRetain();
  v5 = objc_msgSend(v4, sel_medicationInfo);
  if (v5)
  {
    v6 = v5;
    v7 = sub_2416BB128();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v10);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v11 = (void *)qword_25713A038;
  v12 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v12);
  v13 = v11;
  sub_2416B9C04();
  v14 = sub_2416BB134();
  v16 = v15;
  v17 = (uint64_t *)((char *)v1 + *(int *)(type metadata accessor for MedicalIDMedicationsCellView() + 20));
  v19 = *v17;
  v18 = v17[1];
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 64) = v18;
  return swift_retain();
}

__n128 sub_241613690@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  _QWORD v8[2];
  char v9;
  __int128 v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;

  sub_24161349C((uint64_t)v8);
  v2 = v8[1];
  v3 = v9;
  v4 = v11;
  v5 = v13;
  result = v12;
  v7 = v10;
  *(_QWORD *)a1 = v8[0];
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 40) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_QWORD *)(a1 + 64) = v5;
  return result;
}

unint64_t sub_2416136F0()
{
  unint64_t result;

  result = qword_25713C8B0;
  if (!qword_25713C8B0)
  {
    result = MEMORY[0x2426994BC](&unk_2416C1D1C, &type metadata for MedicalIDMedicalInfoCell);
    atomic_store(result, (unint64_t *)&qword_25713C8B0);
  }
  return result;
}

uint64_t MedicalIDMedicalInfoViewModel.init(data:calendar:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  *a4 = a1;
  v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v8 = (char *)a4 + *(int *)(v7 + 20);
  v9 = sub_2416B9C70();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a2, v9);
  v10 = (char *)a4 + *(int *)(v7 + 24);
  v11 = sub_2416B9C10();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a3, v11);
}

uint64_t type metadata accessor for MedicalIDMedicalInfoViewModel()
{
  uint64_t result;

  result = qword_25713C910;
  if (!qword_25713C910)
    return swift_getSingletonMetadata();
  return result;
}

Swift::String_optional __swiftcall MedicalIDMedicalInfoViewModel.medicationsInfoDescription()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = sub_241613C40((SEL *)&selRef_medicationInfo);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall MedicalIDMedicalInfoViewModel.syncWarningFooterText(for:)(MedicalIDUI::MedicalIDListProperty a1)
{
  id *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  Swift::String_optional result;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 == 1)
    {
      v2 = objc_msgSend(*v1, sel_allergiesListVersion);
      if (!v2)
      {
LABEL_4:
        v3 = 0;
        goto LABEL_11;
      }
    }
    else
    {
      v2 = objc_msgSend(*v1, sel_conditionsListVersion);
      if (!v2)
        goto LABEL_4;
    }
  }
  else
  {
    v2 = objc_msgSend(*v1, sel_medicationsListVersion);
    if (!v2)
      goto LABEL_4;
  }

  v4 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v4);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v5 = (void *)qword_25713A038;
  v6 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v6);
  v7 = v5;
  sub_2416B9C04();
  v2 = (id)sub_2416BB134();
LABEL_11:
  result.value._object = v3;
  result.value._countAndFlagsBits = (uint64_t)v2;
  return result;
}

id MedicalIDMedicalInfoViewModel.data.getter()
{
  id *v0;

  return *v0;
}

uint64_t MedicalIDMedicalInfoViewModel.calendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MedicalIDMedicalInfoViewModel() + 20);
  v4 = sub_2416B9C70();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MedicalIDMedicalInfoViewModel.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MedicalIDMedicalInfoViewModel() + 24);
  v4 = sub_2416B9C10();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MedicalIDMedicalInfoViewModel.locale.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MedicalIDMedicalInfoViewModel() + 24);
  v4 = sub_2416B9C10();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*MedicalIDMedicalInfoViewModel.locale.modify())(_QWORD)
{
  type metadata accessor for MedicalIDMedicalInfoViewModel();
  return nullsub_1;
}

Swift::Bool __swiftcall MedicalIDMedicalInfoViewModel.medicationsListVersionExists()()
{
  id *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*v0, sel_medicationsListVersion);
  v2 = v1;
  if (v1)

  return v2 != 0;
}

Swift::Bool __swiftcall MedicalIDMedicalInfoViewModel.allergiesListVersionExists()()
{
  id *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*v0, sel_allergiesListVersion);
  v2 = v1;
  if (v1)

  return v2 != 0;
}

Swift::Bool __swiftcall MedicalIDMedicalInfoViewModel.conditionsListVersionExists()()
{
  id *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*v0, sel_conditionsListVersion);
  v2 = v1;
  if (v1)

  return v2 != 0;
}

Swift::Bool __swiftcall MedicalIDMedicalInfoViewModel.hasAllergyInfo()()
{
  return sub_241613BC4((SEL *)&selRef_allergyInfo);
}

Swift::String_optional __swiftcall MedicalIDMedicalInfoViewModel.allergyInfoDescription()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = sub_241613C40((SEL *)&selRef_allergyInfo);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Bool __swiftcall MedicalIDMedicalInfoViewModel.hasMedicationInfo()()
{
  return sub_241613BC4((SEL *)&selRef_medicationInfo);
}

Swift::Bool __swiftcall MedicalIDMedicalInfoViewModel.hasMedicalConditions()()
{
  return sub_241613BC4((SEL *)&selRef_medicalConditions);
}

Swift::String_optional __swiftcall MedicalIDMedicalInfoViewModel.medicalConditionsDescription()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = sub_241613C40((SEL *)&selRef_medicalConditions);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Bool __swiftcall MedicalIDMedicalInfoViewModel.hasMedicalNotes()()
{
  return sub_241613BC4((SEL *)&selRef_medicalNotes);
}

id sub_241613BC4(SEL *a1)
{
  id *v1;
  id result;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  result = objc_msgSend(*v1, *a1);
  if (result)
  {
    v3 = result;
    v4 = sub_2416BB128();
    v6 = v5;

    swift_bridgeObjectRelease();
    v7 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0)
      v7 = v4 & 0xFFFFFFFFFFFFLL;
    return (id)(v7 != 0);
  }
  return result;
}

Swift::String_optional __swiftcall MedicalIDMedicalInfoViewModel.medicalNotesDescription()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = sub_241613C40((SEL *)&selRef_medicalNotes);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

uint64_t sub_241613C40(SEL *a1)
{
  id *v1;
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(*v1, *a1);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = sub_2416BB128();

  return v4;
}

void **initializeBufferWithCopyOfBuffer for MedicalIDMedicalInfoViewModel(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_2416B9C70();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v13 = v4;
    v12(v9, v10, v11);
    v14 = *(int *)(a3 + 24);
    v15 = (char *)v7 + v14;
    v16 = (char *)a2 + v14;
    v17 = sub_2416B9C10();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return v7;
}

uint64_t destroy for MedicalIDMedicalInfoViewModel(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = sub_2416B9C70();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 24);
  v7 = sub_2416B9C10();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

void **initializeWithCopy for MedicalIDMedicalInfoViewModel(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  id v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = *a2;
  *a1 = *a2;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2416B9C70();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12 = v6;
  v11(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

void **assignWithCopy for MedicalIDMedicalInfoViewModel(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

_QWORD *initializeWithTake for MedicalIDMedicalInfoViewModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

void **assignWithTake for MedicalIDMedicalInfoViewModel(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2416B9C70();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_2416B9C10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDMedicalInfoViewModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_241614078(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2416B9C70();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_2416B9C10();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MedicalIDMedicalInfoViewModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_241614124(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_2416B9C70();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_2416B9C10();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_2416141C0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_2416B9C70();
  if (v1 <= 0x3F)
  {
    result = sub_2416B9C10();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_241614254@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  sub_241614290();
  result = sub_2416B9DD8();
  *a1 = result;
  return result;
}

unint64_t sub_241614290()
{
  unint64_t result;

  result = qword_25713A460;
  if (!qword_25713A460)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25713A460);
  }
  return result;
}

uint64_t sub_2416142CC(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t EditPhotoCellView.ViewModel.__allocating_init(initialPictureData:openSettings:authorizationStatusFor:requestAccess:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;

  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 80) = 0;
  *(_BYTE *)(v16 + 88) = 1;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 112) = 0u;
  *(_OWORD *)(v16 + 128) = 0u;
  *(_QWORD *)(v16 + 144) = 0;
  sub_2416B9CD0();
  *(_QWORD *)(v16 + 64) = a1;
  *(_QWORD *)(v16 + 72) = a2;
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  *(_QWORD *)(v16 + 32) = a5;
  *(_QWORD *)(v16 + 40) = a6;
  *(_QWORD *)(v16 + 48) = a7;
  *(_QWORD *)(v16 + 56) = a8;
  return v16;
}

Swift::Void __swiftcall EditPhotoCellView.ViewModel.cameraMenuButtonTapped()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  void (*v4)(uint64_t, uint64_t (*)(char), uint64_t);
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;

  v1 = *MEMORY[0x24BDB1D50];
  v2 = (*(uint64_t (**)(_QWORD))(v0 + 32))(*MEMORY[0x24BDB1D50]);
  if ((unint64_t)(v2 - 1) < 2)
  {
    sub_241615900();
  }
  else if (v2)
  {
    if (v2 == 3)
    {
      KeyPath = swift_getKeyPath();
      MEMORY[0x24BDAC7A8](KeyPath);
      v15 = v0;
      sub_241616404();
      sub_2416B9CA0();
      swift_release();
    }
    else
    {
      if (qword_2571395C0 != -1)
        swift_once();
      v6 = sub_2416B9D6C();
      __swift_project_value_buffer(v6, (uint64_t)qword_257147810);
      v14 = sub_2416B9D54();
      v7 = sub_2416BB374();
      if (os_log_type_enabled(v14, v7))
      {
        v8 = swift_slowAlloc();
        v9 = swift_slowAlloc();
        v15 = v9;
        *(_DWORD *)v8 = 136315394;
        v10 = sub_2416BB704();
        sub_2415A8600(v10, v11, &v15);
        sub_2416BB44C();
        swift_bridgeObjectRelease();
        *(_WORD *)(v8 + 12) = 2080;
        type metadata accessor for AVAuthorizationStatus(0);
        v12 = sub_2416BB140();
        sub_2415A8600(v12, v13, &v15);
        sub_2416BB44C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_241599000, v14, v7, "[%s]: Encountered unkown media authorization status: %s", (uint8_t *)v8, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242699570](v9, -1, -1);
        MEMORY[0x242699570](v8, -1, -1);

      }
      else
      {

      }
    }
  }
  else
  {
    v4 = *(void (**)(uint64_t, uint64_t (*)(char), uint64_t))(v0 + 48);
    v5 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    v4(v1, sub_2416163E0, v5);
    swift_release_n();
  }
}

Swift::Void __swiftcall EditPhotoCellView.ViewModel.photoLibraryMenuButtonTapped()()
{
  swift_getKeyPath();
  sub_241616404();
  sub_2416B9CA0();
  swift_release();
}

uint64_t (*EditPhotoCellView.ViewModel.deleteMenuButtonTapped.getter())()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_241616404();
  sub_2416B9CAC();
  swift_release();
  if (*(_QWORD *)(v0 + 72) >> 60 == 15)
    return 0;
  swift_allocObject();
  swift_weakInit();
  return sub_241612BEC;
}

uint64_t EditPhotoCellView.ViewModel.pictureData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_getKeyPath();
  v3 = v0;
  sub_241616404();
  sub_2416B9CAC();
  swift_release();
  v1 = *(_QWORD *)(v0 + 64);
  sub_2415C357C(v1, *(_QWORD *)(v3 + 72));
  return v1;
}

BOOL EditPhotoCellView.ViewModel.imagePickerSheetOpen.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_241616404();
  sub_2416B9CAC();
  swift_release();
  return (*(_BYTE *)(v0 + 88) & 1) == 0;
}

void EditPhotoCellView.ViewModel.imagePickerSheetOpen.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t KeyPath;
  NSObject *v9;
  uint64_t v10;

  if ((a1 & 1) != 0)
  {
    if (qword_2571395C0 != -1)
      swift_once();
    v2 = sub_2416B9D6C();
    __swift_project_value_buffer(v2, (uint64_t)qword_257147810);
    v9 = sub_2416B9D54();
    v3 = sub_2416BB374();
    if (os_log_type_enabled(v9, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = swift_slowAlloc();
      v10 = v5;
      *(_DWORD *)v4 = 136315138;
      v6 = sub_2416BB704();
      sub_2415A8600(v6, v7, &v10);
      sub_2416BB44C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_241599000, v9, v3, "[%s]: Didn't expect the sheet to be opened directly", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v5, -1, -1);
      MEMORY[0x242699570](v4, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    v10 = v1;
    sub_241616404();
    sub_2416B9CA0();
    swift_release();
  }
}

uint64_t EditPhotoCellView.ViewModel.imagePickerSource.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_241616404();
  sub_2416B9CAC();
  swift_release();
  return *(_QWORD *)(v0 + 80);
}

Swift::Void __swiftcall EditPhotoCellView.ViewModel.selected(image:)(UIImage image)
{
  uint64_t v1;
  NSData *v2;
  NSData *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;

  v2 = UIImagePNGRepresentation((UIImage *)image.super.isa);
  if (v2)
  {
    v3 = v2;
    v4 = sub_2416B9ACC();
    v6 = v5;

    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    v15 = v1;
    sub_2415A0A90(v4, v6);
    sub_241616404();
    sub_2416B9CA0();
    sub_2415A0DAC(v4, v6);
    swift_release();
    sub_2415A0DAC(v4, v6);
  }
  else
  {
    if (qword_2571395C0 != -1)
      swift_once();
    v8 = sub_2416B9D6C();
    __swift_project_value_buffer(v8, (uint64_t)qword_257147810);
    v14 = sub_2416B9D54();
    v9 = sub_2416BB374();
    if (os_log_type_enabled(v14, v9))
    {
      v10 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      v15 = v11;
      *(_DWORD *)v10 = 136315394;
      v12 = sub_2416BB704();
      sub_2415A8600(v12, v13, &v15);
      sub_2416BB44C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      sub_2415A8600(0xD000000000000010, 0x80000002416C4FC0, &v15);
      sub_2416BB44C();
      _os_log_impl(&dword_241599000, v14, v9, "%s %s Error: could not extract png data from image", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242699570](v11, -1, -1);
      MEMORY[0x242699570](v10, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t EditPhotoCellView.ViewModel.deniedPermissionsAlert.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_getKeyPath();
  sub_241616404();
  sub_2416B9CAC();
  swift_release();
  swift_beginAccess();
  v3 = v1[12];
  v4 = v1[13];
  v5 = v1[14];
  v6 = v1[15];
  v7 = v1[16];
  v8 = v1[17];
  v9 = v1[18];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return sub_24160ADF4(v3, v4);
}

uint64_t EditPhotoCellView.ViewModel.deniedPermissionsAlert.setter(uint64_t a1)
{
  _QWORD v2[7];

  sub_241612AD4(a1, (uint64_t)v2);
  swift_getKeyPath();
  sub_241616404();
  sub_2416B9CA0();
  sub_241612B48(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24160AD24);
  return swift_release();
}

uint64_t sub_241614F74(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 72) = a3;
  sub_2415C357C(a2, a3);
  return sub_2415C3524(v3, v4);
}

uint64_t sub_241614FBC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1;
  swift_getKeyPath();
  sub_241616404();
  sub_2416B9CAC();
  result = swift_release();
  v5 = *(_BYTE *)(v3 + 88);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 80);
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_241615038()
{
  swift_getKeyPath();
  sub_241616404();
  sub_2416B9CA0();
  return swift_release();
}

uint64_t sub_2416150CC(uint64_t result, uint64_t a2, char a3)
{
  *(_QWORD *)(result + 80) = a2;
  *(_BYTE *)(result + 88) = a3 & 1;
  return result;
}

uint64_t sub_2416150DC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + 96;
  swift_beginAccess();
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  sub_241612AD4((uint64_t)a2, v4);
  sub_241612B48(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24160ADF4);
  return sub_24160AD24(v5, v6);
}

void (*EditPhotoCellView.ViewModel.deniedPermissionsAlert.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  swift_getKeyPath();
  v4[4] = OBJC_IVAR____TtCV11MedicalIDUI17EditPhotoCellView9ViewModel___observationRegistrar;
  *v4 = v2;
  v4[5] = sub_241616404();
  sub_2416B9CAC();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  sub_2416B9CC4();
  swift_release();
  swift_beginAccess();
  return sub_241615264;
}

void sub_241615264(_QWORD **a1)
{
  _QWORD *v1;

  v1 = *a1;
  swift_endAccess();
  *v1 = v1[3];
  swift_getKeyPath();
  sub_2416B9CB8();
  swift_release();
  free(v1);
}

uint64_t sub_2416152CC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  sub_24159D6B0(0, &qword_25713A560, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)v11 - v1;
  v3 = sub_2416BB2A8();
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_241616634((uint64_t)v2, &qword_25713A560, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990]);
    v6 = 0;
    v7 = 0;
  }
  else
  {
    sub_2416BB29C();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
    if (*(_QWORD *)(v5 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v6 = sub_2416BB254();
      v7 = v8;
      swift_unknownObjectRelease();
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
  }
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = &unk_25713CA70;
  *(_QWORD *)(v9 + 24) = v5;
  if (v7 | v6)
  {
    v11[0] = 0;
    v11[1] = 0;
    v11[2] = v6;
    v11[3] = v7;
  }
  swift_task_create();
  return swift_release();
}

uint64_t static EditPhotoCellView.ViewModel._openSettings@Sendable ()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  sub_24159D6B0(0, &qword_25713A560, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)v11 - v1;
  v3 = sub_2416BB2A8();
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_241616634((uint64_t)v2, &qword_25713A560, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990]);
    v6 = 0;
    v7 = 0;
  }
  else
  {
    sub_2416BB29C();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
    if (*(_QWORD *)(v5 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v6 = sub_2416BB254();
      v7 = v8;
      swift_unknownObjectRelease();
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
  }
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = &unk_25713C980;
  *(_QWORD *)(v9 + 24) = v5;
  if (v7 | v6)
  {
    v11[0] = 0;
    v11[1] = 0;
    v11[2] = v6;
    v11[3] = v7;
  }
  swift_task_create();
  return swift_release();
}

id sub_241615674(uint64_t a1)
{
  return objc_msgSend((id)objc_opt_self(), sel_authorizationStatusForMediaType_, a1);
}

id static EditPhotoCellView.ViewModel._authorizationStatus@Sendable (_:)(uint64_t a1)
{
  return objc_msgSend((id)objc_opt_self(), sel_authorizationStatusForMediaType_, a1);
}

void sub_2416156DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  _QWORD v8[6];

  v6 = (void *)objc_opt_self();
  v8[4] = a2;
  v8[5] = a3;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1107296256;
  v8[2] = sub_2416142CC;
  v8[3] = &block_descriptor_34;
  v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_requestAccessForMediaType_completionHandler_, a1, v7);
  _Block_release(v7);
}

void static EditPhotoCellView.ViewModel._requestAccess@Sendable (_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  _QWORD v8[6];

  v6 = (void *)objc_opt_self();
  v8[4] = a2;
  v8[5] = a3;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1107296256;
  v8[2] = sub_2416142CC;
  v8[3] = &block_descriptor_3;
  v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_requestAccessForMediaType_completionHandler_, a1, v7);
  _Block_release(v7);
}

uint64_t EditPhotoCellView.ViewModel.init(initialPictureData:openSettings:authorizationStatusFor:requestAccess:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_OWORD *)(v8 + 64) = xmmword_2416BD3D0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_BYTE *)(v8 + 88) = 1;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_QWORD *)(v8 + 144) = 0;
  sub_2416B9CD0();
  sub_2415C3524(*(_QWORD *)(v8 + 64), *(_QWORD *)(v8 + 72));
  *(_QWORD *)(v8 + 64) = a1;
  *(_QWORD *)(v8 + 72) = a2;
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  *(_QWORD *)(v8 + 32) = a5;
  *(_QWORD *)(v8 + 40) = a6;
  *(_QWORD *)(v8 + 48) = a7;
  *(_QWORD *)(v8 + 56) = a8;
  return v8;
}

uint64_t sub_241615900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t (**v19)();
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  _QWORD v30[3];
  _QWORD v31[7];

  v1 = v0;
  sub_24159D6B0(0, &qword_257139D70, (uint64_t (*)(uint64_t))MEMORY[0x24BDEAFA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v30 - v3;
  v5 = (int *)type metadata accessor for BasicAlertModel.Action();
  v6 = *((_QWORD *)v5 - 1);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v9);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v10 = (void *)qword_25713A038;
  v11 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v11);
  v12 = v10;
  sub_2416B9C04();
  v13 = sub_2416BB134();
  v15 = v14;
  v16 = sub_2416B9EBC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v4, 1, 1, v16);
  v17 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_2416B9B74();
  v18 = (uint64_t *)&v8[v5[5]];
  *v18 = v13;
  v18[1] = v15;
  sub_2415A48A8((uint64_t)v4, (uint64_t)&v8[v5[6]]);
  swift_release();
  v19 = (uint64_t (**)())&v8[v5[7]];
  *v19 = sub_2416166C0;
  v19[1] = (uint64_t (*)())v17;
  if (qword_257139468 != -1)
    swift_once();
  v21 = qword_25713C950;
  v20 = *(_QWORD *)algn_25713C958;
  v22 = qword_257139470;
  swift_bridgeObjectRetain();
  if (v22 != -1)
    swift_once();
  v24 = qword_25713C960;
  v23 = *(_QWORD *)algn_25713C968;
  sub_24159D6B0(0, &qword_257139D78, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v25 = *(_QWORD *)(v6 + 72);
  v26 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_2416BCC80;
  sub_2415A6100((uint64_t)v8, v27 + v26);
  swift_bridgeObjectRetain();
  sub_24169065C(v27 + v26 + v25);
  v31[0] = v21;
  v31[1] = v20;
  v31[2] = v24;
  v31[3] = v23;
  v31[5] = 0;
  v31[6] = 0;
  v31[4] = v27;
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  v30[-2] = v1;
  v30[-1] = v31;
  v30[1] = v1;
  sub_241616404();
  sub_2416B9CA0();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_2415F61D4((uint64_t)v8);
}

uint64_t sub_241615CE8()
{
  uint64_t result;
  uint64_t KeyPath;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    sub_241616404();
    sub_2416B9CA0();
    swift_release();
    return swift_release();
  }
  return result;
}

void (*EditPhotoCellView.ViewModel.imagePickerSheetOpen.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  swift_getKeyPath();
  *(_QWORD *)a1 = v1;
  sub_241616404();
  sub_2416B9CAC();
  swift_release();
  *(_BYTE *)(a1 + 16) = (*(_BYTE *)(v1 + 88) & 1) == 0;
  return sub_241615E58;
}

void sub_241615E58(uint64_t a1)
{
  EditPhotoCellView.ViewModel.imagePickerSheetOpen.setter(*(_BYTE *)(a1 + 16));
}

uint64_t EditPhotoCellView.ViewModel.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  swift_release();
  sub_2415C3524(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_24160AD24(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  v1 = v0 + OBJC_IVAR____TtCV11MedicalIDUI17EditPhotoCellView9ViewModel___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t EditPhotoCellView.ViewModel.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  swift_release();
  sub_2415C3524(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_24160AD24(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  v1 = v0 + OBJC_IVAR____TtCV11MedicalIDUI17EditPhotoCellView9ViewModel___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_241615F78()
{
  return swift_task_switch();
}

uint64_t sub_241615F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = sub_2416B9AB4();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAB8];
  v3 = *(_QWORD *)(v1 - 8);
  v4 = swift_task_alloc();
  sub_24159D6B0(0, (unint64_t *)&qword_25713ADA8, v2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = swift_task_alloc();
  sub_2416B9AA8();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v1) == 1)
  {
    sub_241616634(v5, (unint64_t *)&qword_25713ADA8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAB8]);
    swift_task_dealloc();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v4, v5, v1);
    swift_task_dealloc();
    v6 = objc_msgSend((id)objc_opt_self(), sel_defaultWorkspace);
    if (v6)
    {
      v7 = v6;
      v8 = (void *)sub_2416B9A90();
      sub_24166CDAC(MEMORY[0x24BEE4AF8]);
      v9 = (void *)sub_2416BB038();
      swift_bridgeObjectRelease();
      objc_msgSend(v7, sel_openSensitiveURL_withOptions_, v8, v9);

    }
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v1);
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_241616150()
{
  uint64_t result;
  void (*v1)(uint64_t);
  uint64_t v2;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = *(void (**)(uint64_t))(result + 16);
    v2 = swift_retain();
    v1(v2);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_2416161C0(char a1)
{
  uint64_t result;
  uint64_t KeyPath;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if ((a1 & 1) != 0)
    {
      KeyPath = swift_getKeyPath();
      MEMORY[0x24BDAC7A8](KeyPath);
      sub_241616404();
      sub_2416B9CA0();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_2416162BC(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0xD000000000000029, 0x80000002416C5120, &qword_25713C950, algn_25713C958);
}

uint64_t sub_2416162E4(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0xD00000000000002FLL, 0x80000002416C50F0, &qword_25713C960, algn_25713C968);
}

uint64_t sub_24161630C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_241616370;
  return v6(a1);
}

uint64_t sub_241616370()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2416163BC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_2416163E0(char a1)
{
  return sub_2416161C0(a1);
}

void sub_2416163F0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 32);
  *(_QWORD *)(v1 + 80) = *(_QWORD *)(v0 + 24);
  *(_BYTE *)(v1 + 88) = v2;
}

unint64_t sub_241616404()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713C740;
  if (!qword_25713C740)
  {
    v1 = type metadata accessor for EditPhotoCellView.ViewModel();
    result = MEMORY[0x2426994BC](&protocol conformance descriptor for EditPhotoCellView.ViewModel, v1);
    atomic_store(result, (unint64_t *)&qword_25713C740);
  }
  return result;
}

uint64_t type metadata accessor for EditPhotoCellView.ViewModel()
{
  uint64_t result;

  result = qword_25713C9B8;
  if (!qword_25713C9B8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_241616490()
{
  return sub_241616678();
}

uint64_t sub_2416164AC()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2416164D0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24160D1DC;
  return swift_task_switch();
}

uint64_t sub_241616528()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_24161657C()
{
  return type metadata accessor for EditPhotoCellView.ViewModel();
}

uint64_t sub_241616584()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2416B9CDC();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for EditPhotoCellView.ViewModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EditPhotoCellView.ViewModel.__allocating_init(initialPictureData:openSettings:authorizationStatusFor:requestAccess:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_241616634(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_24159D6B0(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_241616678()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = v0[2];
  v1 = v0[3];
  v3 = v0[4];
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v2 + 64) = v1;
  *(_QWORD *)(v2 + 72) = v3;
  sub_2415C357C(v1, v3);
  return sub_2415C3524(v4, v5);
}

uint64_t sub_2416166C0()
{
  return sub_241616150();
}

uint64_t sub_2416166C8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2415C2834;
  return swift_task_switch();
}

uint64_t sub_241616720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_2415C2834;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_25713C988 + dword_25713C988))(a1, v4);
}

uint64_t sub_2416167A0()
{
  return sub_241612B30();
}

void sub_2416167B4()
{
  sub_2416163F0();
}

uint64_t sub_2416167C8(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0x65696772656C6C41, 0xE900000000000073, &qword_257147700, algn_257147708);
}

uint64_t sub_2416167F0(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0x6F697469646E6F43, 0xEA0000000000736ELL, &qword_257147710, algn_257147718);
}

uint64_t sub_241616818(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0x7365746F4ELL, 0xE500000000000000, &qword_257147720, algn_257147728);
}

uint64_t sub_241616838(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0x697461636964654DLL, 0xEB00000000736E6FLL, &qword_257147730, algn_257147738);
}

uint64_t sub_241616864(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0xD000000000000016, 0x80000002416C5150, &qword_257147740, algn_257147748);
}

uint64_t sub_24161688C(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0x746867696548, 0xE600000000000000, &qword_257147750, algn_257147758);
}

uint64_t sub_2416168AC(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0x3A746867696548, 0xE700000000000000, &qword_257147760, algn_257147768);
}

uint64_t sub_2416168D0(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0x746867696557, 0xE600000000000000, &qword_257147770, algn_257147778);
}

uint64_t sub_2416168F0(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0x3A746867696557, 0xE700000000000000, &qword_257147780, algn_257147788);
}

uint64_t sub_241616914(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0x795420646F6F6C42, 0xEA00000000006570, &qword_257147790, algn_257147798);
}

uint64_t sub_24161693C(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0x795420646F6F6C42, 0xEB000000003A6570, &qword_2571477A0, algn_2571477A8);
}

uint64_t sub_241616968(uint64_t a1)
{
  return sub_2415DE3DC(a1, 0xD000000000000012, 0x80000002416C5170, &qword_2571477B0, algn_2571477B8);
}

uint64_t sub_241616990()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t result;
  uint64_t v5;

  v0 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v0);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v1 = (void *)qword_25713A038;
  v2 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v2);
  v3 = v1;
  sub_2416B9C04();
  result = sub_2416BB134();
  qword_2571477C0 = result;
  *(_QWORD *)algn_2571477C8 = v5;
  return result;
}

uint64_t sub_241616AC4()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath();
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  sub_2416B9CAC();
  swift_release();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_241616B58@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_getKeyPath();
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  sub_2416B9CAC();
  swift_release();
  v4 = *(_QWORD *)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_241616BE8()
{
  swift_getKeyPath();
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  swift_bridgeObjectRetain();
  sub_2416B9CA0();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_241616CA4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  swift_getKeyPath();
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  sub_2416B9CAC();
  swift_release();
  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0)
    v2 = HIBYTE(v1) & 0xF;
  if (v2)
    return 1;
  swift_getKeyPath();
  sub_2416B9CAC();
  swift_release();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t sub_241616D78()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  sub_2416B9CAC();
  swift_release();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t sub_241616DFC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  sub_2416B9CAC();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 32);
  return result;
}

uint64_t sub_241616E88()
{
  swift_getKeyPath();
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  sub_2416B9CA0();
  return swift_release();
}

uint64_t sub_241616F30()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath();
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  sub_2416B9CAC();
  swift_release();
  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_241616FC4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_getKeyPath();
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  sub_2416B9CAC();
  swift_release();
  v4 = *(_QWORD *)(v3 + 48);
  *a2 = *(_QWORD *)(v3 + 40);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_241617054()
{
  swift_getKeyPath();
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  swift_bridgeObjectRetain();
  sub_2416B9CA0();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_241617110()
{
  swift_getKeyPath();
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  sub_2416B9CA0();
  swift_release();
  swift_getKeyPath();
  sub_2416B9CA0();
  return swift_release();
}

uint64_t sub_24161720C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;

  swift_getKeyPath();
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  sub_2416B9CAC();
  swift_release();
  if (*(_QWORD *)(v0 + 48))
  {
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    swift_bridgeObjectRetain();
    sub_2416B9CA0();
    swift_release();
    swift_bridgeObjectRelease();
  }
  v2 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v2);
  sub_2416B9CA0();
  return swift_release();
}

uint64_t sub_241617398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC11MedicalIDUIP33_D4BBDB7E727832FA87D2B563116D5DE45Model___observationRegistrar;
  v2 = sub_2416B9CDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_2416173F8()
{
  return type metadata accessor for Model();
}

uint64_t type metadata accessor for Model()
{
  uint64_t result;

  result = qword_25713CAB8;
  if (!qword_25713CAB8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24161743C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2416B9CDC();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void sub_2416174D8()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 32) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_2416174F0()
{
  return sub_24161B2E4();
}

uint64_t sub_241617504()
{
  return sub_24161A14C();
}

uint64_t sub_241617518@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (**v30)@<X0>(uint64_t@<X8>);
  uint64_t (**v31)@<X0>(uint64_t@<X8>);
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t OpaqueTypeConformance2;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _QWORD v64[2];
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;

  v2 = v1;
  v72 = a1;
  v3 = (int *)sub_24161A58C();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (_QWORD *)((char *)v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v64 - v7;
  sub_24161AEB8(0);
  v10 = v9;
  v66 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24161AF58(0);
  v14 = *(_QWORD *)(v13 - 8);
  v68 = v13;
  v69 = v14;
  MEMORY[0x24BDAC7A8](v13);
  v65 = (char *)v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24161B030(0);
  v17 = *(_QWORD *)(v16 - 8);
  v70 = v16;
  v71 = v17;
  MEMORY[0x24BDAC7A8](v16);
  v67 = (char *)v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject();
  v20 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v19 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v19 + 96) = v20;
  *(_OWORD *)(v19 + 112) = *(_OWORD *)(v2 + 96);
  *(_QWORD *)(v19 + 128) = *(_QWORD *)(v2 + 112);
  v21 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v19 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v19 + 32) = v21;
  v22 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v19 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v19 + 64) = v22;
  v23 = swift_allocObject();
  v24 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v23 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v23 + 96) = v24;
  *(_OWORD *)(v23 + 112) = *(_OWORD *)(v2 + 96);
  *(_QWORD *)(v23 + 128) = *(_QWORD *)(v2 + 112);
  v25 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v23 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v23 + 32) = v25;
  v26 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v23 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v23 + 64) = v26;
  *v6 = swift_getKeyPath();
  sub_24159D6B0(0, &qword_25713A5E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v27 = (char *)v6 + v3[13];
  v28 = *MEMORY[0x24BDECEA0];
  v29 = sub_2416BA144();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v27, v28, v29);
  v30 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v6 + v3[14]);
  *v30 = sub_24161B140;
  v30[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v19;
  v31 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v6 + v3[15]);
  *v31 = sub_24161B174;
  v31[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v23;
  sub_2415A85BC((uint64_t)v6, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_24161A58C);
  v32 = *(_OWORD *)(v2 + 72);
  v75 = *(_OWORD *)(v2 + 56);
  v76 = v32;
  sub_24161B1AC(v2);
  sub_24161B1AC(v2);
  sub_24159D7F0(0, &qword_25713CC20, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604](&v77);
  v75 = v77;
  v33 = swift_allocObject();
  v34 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v33 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v33 + 96) = v34;
  *(_OWORD *)(v33 + 112) = *(_OWORD *)(v2 + 96);
  *(_QWORD *)(v33 + 128) = *(_QWORD *)(v2 + 112);
  v35 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v33 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v33 + 32) = v35;
  v36 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v33 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v33 + 64) = v36;
  sub_24161B1AC(v2);
  v37 = sub_24159CE88(&qword_25713CD50, (uint64_t (*)(uint64_t))sub_24161A58C, (uint64_t)&unk_2416C0968);
  sub_2416BABDC();
  swift_release();
  swift_bridgeObjectRelease();
  sub_2415A6154((uint64_t)v8, (uint64_t (*)(_QWORD))sub_24161A58C);
  v77 = *(_OWORD *)(v2 + 40);
  v75 = *(_OWORD *)(v2 + 40);
  sub_24159D6B0(0, &qword_25713CD68, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v64[1] = v38;
  sub_2416BAD14();
  v39 = v73;
  swift_getKeyPath();
  *(_QWORD *)&v75 = v39;
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  sub_2416B9CAC();
  swift_release();
  v41 = *(_QWORD *)(v39 + 16);
  v40 = *(_QWORD *)(v39 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  v73 = v41;
  v74 = v40;
  v42 = swift_allocObject();
  v43 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v42 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v42 + 96) = v43;
  *(_OWORD *)(v42 + 112) = *(_OWORD *)(v2 + 96);
  *(_QWORD *)(v42 + 128) = *(_QWORD *)(v2 + 112);
  v44 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v42 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v42 + 32) = v44;
  v45 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v42 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v42 + 64) = v45;
  sub_24161B1AC(v2);
  *(_QWORD *)&v75 = v3;
  *((_QWORD *)&v75 + 1) = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v76 = v37;
  *((_QWORD *)&v76 + 1) = MEMORY[0x24BEE0D28];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v47 = v65;
  sub_2416BABDC();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v10);
  v75 = *(_OWORD *)(v2 + 16);
  LOBYTE(v76) = *(_BYTE *)(v2 + 32);
  v48 = MEMORY[0x24BEE1328];
  sub_2415A3D28(0, &qword_25713CC28, MEMORY[0x24BEE1328], MEMORY[0x24BEE1338], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDEB0F0]);
  sub_2416B9F04();
  v49 = swift_allocObject();
  v50 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v49 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v49 + 96) = v50;
  *(_OWORD *)(v49 + 112) = *(_OWORD *)(v2 + 96);
  *(_QWORD *)(v49 + 128) = *(_QWORD *)(v2 + 112);
  v51 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v49 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v49 + 32) = v51;
  v52 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v49 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v49 + 64) = v52;
  sub_24161B1AC(v2);
  *(_QWORD *)&v75 = v10;
  *((_QWORD *)&v75 + 1) = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v76 = OpaqueTypeConformance2;
  *((_QWORD *)&v76 + 1) = MEMORY[0x24BEE0D28];
  v53 = swift_getOpaqueTypeConformance2();
  v54 = MEMORY[0x24BEE1340];
  v56 = v67;
  v55 = v68;
  sub_2416BABDC();
  swift_release();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v47, v55);
  v75 = v77;
  sub_2416BAD14();
  v57 = v73;
  swift_getKeyPath();
  *(_QWORD *)&v75 = v57;
  sub_2416B9CAC();
  swift_release();
  LOBYTE(v40) = *(_BYTE *)(v57 + 32);
  swift_release();
  LOBYTE(v73) = v40;
  v58 = swift_allocObject();
  v59 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v58 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v58 + 96) = v59;
  *(_OWORD *)(v58 + 112) = *(_OWORD *)(v2 + 96);
  *(_QWORD *)(v58 + 128) = *(_QWORD *)(v2 + 112);
  v60 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v58 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v58 + 32) = v60;
  v61 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v58 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v58 + 64) = v61;
  sub_24161B1AC(v2);
  *(_QWORD *)&v75 = v55;
  *((_QWORD *)&v75 + 1) = v48;
  *(_QWORD *)&v76 = v53;
  *((_QWORD *)&v76 + 1) = v54;
  swift_getOpaqueTypeConformance2();
  v62 = v70;
  sub_2416BABDC();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v56, v62);
}

uint64_t sub_241617C68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39[3];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;

  v42 = a2;
  sub_24161AC10(0);
  v41 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24161AC90(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v39[0] = (uint64_t)v39 - v10;
  sub_2415D8800(0, &qword_25713CDA0, (uint64_t (*)(uint64_t))sub_24161A6B0, (uint64_t (*)(uint64_t))sub_24161AC10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
  v39[1] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v39 - v12;
  sub_24161A6B0(0);
  v39[2] = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415D8800(0, &qword_25713CC50, (uint64_t (*)(uint64_t))sub_24161A6B0, (uint64_t (*)(uint64_t))sub_24161AC10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v40 = (uint64_t)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v39 - v20;
  sub_2415E40F8();
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v39 - v26;
  sub_241618184((uint64_t)v39 - v26);
  v43 = *(_OWORD *)(a1 + 40);
  sub_24159D6B0(0, &qword_25713CD68, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v28 = sub_241616CA4();
  swift_release();
  if ((v28 & 1) != 0)
  {
    *(_QWORD *)v16 = sub_2416BA468();
    *((_QWORD *)v16 + 1) = 0;
    v16[16] = 1;
    sub_2415ED870(0, &qword_25713CD90, sub_24161A6D4);
    sub_241619328(a1, 2, (uint64_t)&v16[*(int *)(v29 + 44)]);
    sub_2415BEF64((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_24161A6B0);
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713CD80, (uint64_t (*)(uint64_t))sub_24161A6B0, MEMORY[0x24BDF4498]);
    sub_24159CE88(&qword_25713CDA8, (uint64_t (*)(uint64_t))sub_24161AC10, MEMORY[0x24BDF5428]);
    sub_2416BA57C();
    v30 = (uint64_t)v16;
    v31 = sub_24161A6B0;
  }
  else
  {
    v32 = v39[0];
    sub_241618344(v39[0]);
    sub_2415BEF64(v32, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_24161AC90);
    *(_QWORD *)v5 = 0;
    v5[8] = 1;
    sub_24161AC2C();
    sub_2415BEF64((uint64_t)v9, (uint64_t)&v5[*(int *)(v33 + 48)], (uint64_t (*)(_QWORD))sub_24161AC90);
    sub_2415A6154((uint64_t)v9, (uint64_t (*)(_QWORD))sub_24161AC90);
    sub_2415BEF64((uint64_t)v5, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_24161AC10);
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713CD80, (uint64_t (*)(uint64_t))sub_24161A6B0, MEMORY[0x24BDF4498]);
    sub_24159CE88(&qword_25713CDA8, (uint64_t (*)(uint64_t))sub_24161AC10, MEMORY[0x24BDF5428]);
    sub_2416BA57C();
    sub_2415A6154((uint64_t)v5, (uint64_t (*)(_QWORD))sub_24161AC10);
    v30 = v32;
    v31 = sub_24161AC90;
  }
  sub_2415A6154(v30, (uint64_t (*)(_QWORD))v31);
  sub_2415BEF64((uint64_t)v27, (uint64_t)v25, (uint64_t (*)(_QWORD))sub_2415E40F8);
  v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8];
  v35 = v40;
  sub_24161B4BC((uint64_t)v21, v40, &qword_25713CC50, (uint64_t (*)(uint64_t))sub_24161A6B0, (uint64_t (*)(uint64_t))sub_24161AC10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
  v36 = v42;
  sub_2415BEF64((uint64_t)v25, v42, (uint64_t (*)(_QWORD))sub_2415E40F8);
  sub_24161A694(0);
  sub_24161B4BC(v35, v36 + *(int *)(v37 + 48), &qword_25713CC50, (uint64_t (*)(uint64_t))sub_24161A6B0, (uint64_t (*)(uint64_t))sub_24161AC10, v34);
  sub_24161B5C0((uint64_t)v21, &qword_25713CC50, (uint64_t (*)(uint64_t))sub_24161A6B0, (uint64_t (*)(uint64_t))sub_24161AC10, v34);
  sub_2415A6154((uint64_t)v27, (uint64_t (*)(_QWORD))sub_2415E40F8);
  sub_24161B5C0(v35, &qword_25713CC50, (uint64_t (*)(uint64_t))sub_24161A6B0, (uint64_t (*)(uint64_t))sub_24161AC10, v34);
  return sub_2415A6154((uint64_t)v25, (uint64_t (*)(_QWORD))sub_2415E40F8);
}

void sub_241618184(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  sub_2415E40F8();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1[1];
  v18 = *v1;
  v19 = v6;
  sub_2415C343C();
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x24BEE0D00];
  v8 = sub_2416BA9D8();
  v10 = v9;
  v18 = v8;
  v19 = v9;
  v12 = v11 & 1;
  v20 = v11 & 1;
  v21 = v13;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, v7, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_2416BCC80;
  v15 = v1[14];
  *(_QWORD *)(v14 + 32) = v1[13];
  *(_QWORD *)(v14 + 40) = v15;
  *(_QWORD *)(v14 + 48) = 0x656C746954;
  *(_QWORD *)(v14 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  v16 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v17 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v17)
  {
    sub_2416BB128();

    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    sub_2415A431C(v8, v10, v12);
    swift_bridgeObjectRelease();
    sub_2415A85BC((uint64_t)v5, a1, (uint64_t (*)(_QWORD))sub_2415E40F8);
  }
  else
  {
    __break(1u);
  }
}

void sub_241618344(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  ValueMetadata *v29;
  uint64_t v30;
  unint64_t v31;

  v2 = v1;
  v27 = a1;
  sub_2415A3D28(0, (unint64_t *)&qword_25713B4D8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF4398]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v26 - v6;
  sub_24161ACB4(0);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24161AC90(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject();
  v17 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v16 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v16 + 96) = v17;
  *(_OWORD *)(v16 + 112) = *(_OWORD *)(v2 + 96);
  *(_QWORD *)(v16 + 128) = *(_QWORD *)(v2 + 112);
  v18 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v16 + 32) = v18;
  v19 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v16 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v16 + 64) = v19;
  sub_24161B1AC(v2);
  sub_2416BAD50();
  v20 = sub_24161A9EC((unint64_t *)&qword_25713B4E0, (unint64_t *)&qword_25713B4D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF4398], MEMORY[0x24BDF43B0]);
  v21 = sub_24161AD84();
  sub_2416BAA14();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_2416BCC80;
  v23 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v22 + 32) = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v22 + 40) = v23;
  *(_QWORD *)(v22 + 48) = 0x6E6F74747542;
  *(_QWORD *)(v22 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  v24 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v25 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v25)
  {
    sub_2416BB128();

    v28 = v4;
    v29 = &type metadata for NoTapAnimationButtonStyle;
    v30 = v20;
    v31 = v21;
    swift_getOpaqueTypeConformance2();
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    sub_2415A85BC((uint64_t)v15, v27, (uint64_t (*)(_QWORD))sub_24161AC90);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24161863C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[3];
  uint64_t v33;
  __int128 v34;

  v33 = a2;
  sub_24161AC90(0);
  v32[2] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415D8800(0, &qword_25713CD78, (uint64_t (*)(uint64_t))sub_24161A6B0, (uint64_t (*)(uint64_t))sub_24161AC90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380]);
  v32[0] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v32 - v7;
  sub_24161A6B0(0);
  v32[1] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415D8800(0, &qword_25713CD28, (uint64_t (*)(uint64_t))sub_24161A6B0, (uint64_t (*)(uint64_t))sub_24161AC90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v32 - v16;
  sub_2415E40F8();
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)v32 - v22;
  sub_241618184((uint64_t)v32 - v22);
  v34 = *(_OWORD *)(a1 + 40);
  sub_24159D6B0(0, &qword_25713CD68, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v24 = sub_241616CA4();
  swift_release();
  if ((v24 & 1) != 0)
  {
    *(_QWORD *)v11 = sub_2416BA468();
    *((_QWORD *)v11 + 1) = 0;
    v11[16] = 1;
    sub_2415ED870(0, &qword_25713CD90, sub_24161A6D4);
    sub_241619328(a1, 0, (uint64_t)&v11[*(int *)(v25 + 44)]);
    v26 = sub_24161A6B0;
    sub_2415BEF64((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_24161A6B0);
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713CD80, (uint64_t (*)(uint64_t))sub_24161A6B0, MEMORY[0x24BDF4498]);
    sub_24161B344();
    sub_2416BA57C();
    v27 = (uint64_t)v11;
  }
  else
  {
    sub_241618344((uint64_t)v5);
    v26 = sub_24161AC90;
    sub_2415BEF64((uint64_t)v5, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_24161AC90);
    swift_storeEnumTagMultiPayload();
    sub_24159CE88(&qword_25713CD80, (uint64_t (*)(uint64_t))sub_24161A6B0, MEMORY[0x24BDF4498]);
    sub_24161B344();
    sub_2416BA57C();
    v27 = (uint64_t)v5;
  }
  sub_2415A6154(v27, (uint64_t (*)(_QWORD))v26);
  sub_2415BEF64((uint64_t)v23, (uint64_t)v21, (uint64_t (*)(_QWORD))sub_2415E40F8);
  v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8];
  sub_24161B4BC((uint64_t)v17, (uint64_t)v15, &qword_25713CD28, (uint64_t (*)(uint64_t))sub_24161A6B0, (uint64_t (*)(uint64_t))sub_24161AC90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
  v29 = v33;
  sub_2415BEF64((uint64_t)v21, v33, (uint64_t (*)(_QWORD))sub_2415E40F8);
  sub_24161AE08(0);
  sub_24161B4BC((uint64_t)v15, v29 + *(int *)(v30 + 48), &qword_25713CD28, (uint64_t (*)(uint64_t))sub_24161A6B0, (uint64_t (*)(uint64_t))sub_24161AC90, v28);
  sub_24161B5C0((uint64_t)v17, &qword_25713CD28, (uint64_t (*)(uint64_t))sub_24161A6B0, (uint64_t (*)(uint64_t))sub_24161AC90, v28);
  sub_2415A6154((uint64_t)v23, (uint64_t (*)(_QWORD))sub_2415E40F8);
  sub_24161B5C0((uint64_t)v15, &qword_25713CD28, (uint64_t (*)(uint64_t))sub_24161A6B0, (uint64_t (*)(uint64_t))sub_24161AC90, v28);
  return sub_2415A6154((uint64_t)v21, (uint64_t (*)(_QWORD))sub_2415E40F8);
}

uint64_t sub_241618A68()
{
  sub_24159D6B0(0, &qword_25713CD68, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  swift_getKeyPath();
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  swift_bridgeObjectRetain();
  sub_2416B9CA0();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_241618B68()
{
  sub_24159D7F0(0, &qword_25713CC20, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF4870]);
  swift_bridgeObjectRetain();
  return sub_2416BAE1C();
}

uint64_t sub_241618BE0()
{
  sub_24159D6B0(0, &qword_25713CD68, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  swift_getKeyPath();
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  sub_2416B9CA0();
  swift_release();
  return swift_release();
}

void sub_241618CCC(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;

  v2 = v1;
  sub_2415BE640();
  v5 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24161AB7C(0);
  v9 = v8;
  v10 = MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v10);
  v14 = *(_QWORD *)(v2 + 96);
  if (v14)
  {
    v46 = v7;
    v47 = v13;
    v48 = (char *)&v46 - v11;
    v49 = v12;
    v50 = v5;
    v51 = a1;
    v53 = *(_QWORD *)(v2 + 88);
    v54 = v14;
    sub_2415C343C();
    swift_bridgeObjectRetain();
    v15 = sub_2416BA9D8();
    v17 = v16;
    v19 = v18 & 1;
    v53 = sub_2416BAC18();
    v20 = sub_2416BA990();
    v52 = v21;
    v23 = v22;
    v25 = v24;
    sub_2415A431C(v15, v17, v19);
    swift_release();
    swift_bridgeObjectRelease();
    v26 = sub_2416BA840();
    if (qword_2571394E0 != -1)
      swift_once();
    sub_2416B9EF8();
    v53 = v20;
    v54 = v52;
    v27 = v23 & 1;
    v55 = v23 & 1;
    v56 = v25;
    v57 = v26;
    v58 = v28;
    v59 = v29;
    v60 = v30;
    v61 = v31;
    v62 = 0;
    sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_2416BCC80;
    v33 = *(_QWORD *)(v2 + 112);
    *(_QWORD *)(v32 + 32) = *(_QWORD *)(v2 + 104);
    *(_QWORD *)(v32 + 40) = v33;
    *(_QWORD *)(v32 + 48) = 1953066581;
    *(_QWORD *)(v32 + 56) = 0xE400000000000000;
    swift_bridgeObjectRetain();
    v34 = (void *)sub_2416BB1E8();
    swift_bridgeObjectRelease();
    v35 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v35)
    {
      sub_2416BB128();

      sub_2415A3D28(0, &qword_257139CE0, MEMORY[0x24BDF1FA8], MEMORY[0x24BDECC80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
      sub_2415C3480();
      v36 = (uint64_t)v46;
      sub_2416BAB1C();
      swift_bridgeObjectRelease();
      sub_2415A431C(v20, v52, v27);
      swift_bridgeObjectRelease();
      v37 = swift_allocObject();
      v38 = *(_OWORD *)(v2 + 80);
      *(_OWORD *)(v37 + 80) = *(_OWORD *)(v2 + 64);
      *(_OWORD *)(v37 + 96) = v38;
      *(_OWORD *)(v37 + 112) = *(_OWORD *)(v2 + 96);
      *(_QWORD *)(v37 + 128) = *(_QWORD *)(v2 + 112);
      v39 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)(v37 + 16) = *(_OWORD *)v2;
      *(_OWORD *)(v37 + 32) = v39;
      v40 = *(_OWORD *)(v2 + 48);
      *(_OWORD *)(v37 + 48) = *(_OWORD *)(v2 + 32);
      *(_OWORD *)(v37 + 64) = v40;
      sub_24161B1AC(v2);
      sub_2415A40A4(&qword_25713CCD0, (uint64_t (*)(uint64_t))sub_2415BE640, (uint64_t (*)(void))sub_2415C3480, sub_2415A4680);
      v41 = v49;
      sub_2416BAA80();
      swift_release();
      sub_2415A6154(v36, (uint64_t (*)(_QWORD))sub_2415BE640);
      v43 = v47;
      v42 = v48;
      v44 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 32);
      v44(v48, v41, v9);
      v45 = v51;
      v44(v51, (uint64_t)v42, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v45, 0, 1, v9);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(a1, 1, 1, v9);
  }
}

uint64_t sub_2416190F0()
{
  sub_24159D6B0(0, &qword_25713CD68, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  swift_getKeyPath();
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  sub_2416B9CA0();
  swift_release();
  return swift_release();
}

uint64_t sub_2416191DC@<X0>(uint64_t a1@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  sub_2416BA4C8();
  if (qword_257139300 != -1)
    swift_once();
  v2 = (id)qword_25713A038;
  v3 = sub_2416BA9CC();
  v5 = v4;
  v7 = v6 & 1;
  sub_2416BAC18();
  v8 = sub_2416BA990();
  v10 = v9;
  v12 = v11;
  v14 = v13;
  sub_2415A431C(v3, v5, v7);
  swift_release();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = v12 & 1;
  *(_QWORD *)(a1 + 24) = v14;
  return result;
}

void sub_241619328(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t (*v62)(uint64_t);
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;

  v95 = a2;
  v80 = a3;
  sub_24159D6B0(0, &qword_25713CCC0, (uint64_t (*)(uint64_t))sub_24161AB7C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v81 = (uint64_t)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v79 = (char *)&v74 - v7;
  v8 = sub_2416B9FDC();
  v92 = *(_QWORD *)(v8 - 8);
  v93 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v91 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415A3D28(0, (unint64_t *)&qword_25713CC98, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF53C0]);
  v87 = v10;
  v90 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v84 = (char *)&v74 - v11;
  sub_24161A930(0);
  v88 = *(_QWORD *)(v12 - 8);
  v89 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v85 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24161A8AC();
  v86 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24161A830();
  v82 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24161A79C(0);
  v77 = v20;
  v76 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v83 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415D8800(0, &qword_25713CC70, v22, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v78 = (uint64_t)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v75 = (char *)&v74 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v94 = (uint64_t)&v74 - v28;
  v30 = *(_QWORD *)a1;
  v29 = *(_QWORD *)(a1 + 8);
  v31 = *(_OWORD *)(a1 + 72);
  v100 = *(_OWORD *)(a1 + 56);
  v101 = v31;
  v32 = *(_OWORD *)(a1 + 72);
  v96 = *(_OWORD *)(a1 + 56);
  v97 = v32;
  sub_24159D7F0(0, &qword_25713CC20, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF4870]);
  v34 = v33;
  swift_bridgeObjectRetain();
  v74 = v34;
  sub_2416BAE34();
  *(_QWORD *)&v98 = v30;
  *((_QWORD *)&v98 + 1) = v29;
  sub_2415C343C();
  v35 = v84;
  v36 = v82;
  sub_2416BAF84();
  v96 = *(_OWORD *)(a1 + 16);
  LOBYTE(v97) = *(_BYTE *)(a1 + 32);
  sub_2415A3D28(0, &qword_25713CC28, MEMORY[0x24BEE1328], MEMORY[0x24BEE1338], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDEB0F0]);
  sub_2416B9F1C();
  sub_24161A9EC(&qword_25713CCA0, (unint64_t *)&qword_25713CC98, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF53C0], MEMORY[0x24BDF53E0]);
  v37 = v85;
  v38 = v87;
  sub_2416BABA0();
  v39 = v83;
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v35, v38);
  v40 = sub_2416BAC18();
  v42 = v88;
  v41 = v89;
  (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v16, v37, v89);
  *(_QWORD *)&v16[*(int *)(v86 + 36)] = v40;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v37, v41);
  KeyPath = swift_getKeyPath();
  sub_2415BEF64((uint64_t)v16, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_24161A8AC);
  v44 = &v19[*(int *)(v36 + 36)];
  *(_QWORD *)v44 = KeyPath;
  v44[8] = v95;
  sub_2415A6154((uint64_t)v16, (uint64_t (*)(_QWORD))sub_24161A8AC);
  v45 = v91;
  sub_2416B9FD0();
  v46 = sub_2415A40A4(&qword_25713CCA8, (uint64_t (*)(uint64_t))sub_24161A830, (uint64_t (*)(void))sub_24161AA40, (uint64_t (*)(void))sub_2415EFBC4);
  sub_2416BAA50();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v45, v93);
  sub_2415A6154((uint64_t)v19, (uint64_t (*)(_QWORD))sub_24161A830);
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_2416BCC80;
  v48 = *(_QWORD *)(a1 + 112);
  v92 = *(_QWORD *)(a1 + 104);
  v93 = v48;
  *(_QWORD *)(v47 + 32) = v92;
  *(_QWORD *)(v47 + 40) = v48;
  *(_QWORD *)(v47 + 48) = 0x65756C6156;
  *(_QWORD *)(v47 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  v49 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v50 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v50)
  {
    sub_2416BB128();

    *(_QWORD *)&v98 = v36;
    *((_QWORD *)&v98 + 1) = v46;
    swift_getOpaqueTypeConformance2();
    v51 = (uint64_t)v75;
    v52 = v77;
    sub_2416BAB1C();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v39, v52);
    v53 = v94;
    sub_24161B434(v51, v94);
    v54 = v79;
    sub_241618CCC(v79);
    v98 = v100;
    v99 = v101;
    MEMORY[0x242698604](&v96, v74);
    v55 = v96;
    swift_bridgeObjectRelease();
    v56 = HIBYTE(*((_QWORD *)&v55 + 1)) & 0xFLL;
    if ((*((_QWORD *)&v55 + 1) & 0x2000000000000000) == 0)
      v56 = v55 & 0xFFFFFFFFFFFFLL;
    LODWORD(v91) = v56 == 0;
    v98 = *(_OWORD *)(a1 + 40);
    sub_24159D6B0(0, &qword_25713CD68, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
    sub_2416BAD14();
    v57 = v96;
    swift_getKeyPath();
    *(_QWORD *)&v98 = v57;
    sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
    sub_2416B9CAC();
    swift_release();
    LODWORD(v90) = *(unsigned __int8 *)(v57 + 32);
    swift_release();
    v58 = swift_allocObject();
    v59 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v58 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v58 + 96) = v59;
    *(_OWORD *)(v58 + 112) = *(_OWORD *)(a1 + 96);
    *(_QWORD *)(v58 + 128) = *(_QWORD *)(a1 + 112);
    v60 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v58 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v58 + 32) = v60;
    v61 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v58 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v58 + 64) = v61;
    v62 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
    v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0];
    v64 = v78;
    sub_24161B4BC(v53, v78, &qword_25713CC70, (uint64_t (*)(uint64_t))sub_24161A79C, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v65 = (uint64_t)v54;
    v66 = (uint64_t)v54;
    v67 = v81;
    sub_24161B510(v65, v81);
    v68 = v80;
    sub_24161B4BC(v64, v80, &qword_25713CC70, (uint64_t (*)(uint64_t))sub_24161A79C, v62, v63);
    sub_24161A6F0();
    v70 = v69;
    sub_24161B510(v67, v68 + *(int *)(v69 + 48));
    v71 = v68 + *(int *)(v70 + 64);
    *(_BYTE *)v71 = (_BYTE)v91;
    *(_BYTE *)(v71 + 1) = v90;
    *(_BYTE *)(v71 + 2) = v95;
    v72 = v93;
    *(_QWORD *)(v71 + 8) = v92;
    *(_QWORD *)(v71 + 16) = v72;
    *(_QWORD *)(v71 + 24) = sub_24161B49C;
    *(_QWORD *)(v71 + 32) = v58;
    swift_bridgeObjectRetain_n();
    swift_retain();
    sub_24161B1AC(a1);
    sub_24161B56C(v66);
    v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0];
    sub_24161B5C0(v94, &qword_25713CC70, (uint64_t (*)(uint64_t))sub_24161A79C, v62, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    swift_release();
    swift_bridgeObjectRelease();
    sub_24161B56C(v67);
    sub_24161B5C0(v64, &qword_25713CC70, (uint64_t (*)(uint64_t))sub_24161A79C, v62, v73);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_241619C60(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  sub_24159D6B0(0, &qword_25713CD68, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF42C0]);
  v3 = sub_2416BAD14();
  a2(v3);
  return swift_release();
}

uint64_t sub_241619CC8@<X0>(uint64_t a1@<X8>)
{
  return sub_241617518(a1);
}

void sub_241619D18()
{
  qword_25713CA80 = 0x4010000000000000;
}

uint64_t sub_241619D28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v33;
  uint64_t v35;
  char v36;
  _QWORD v40[3];

  v16 = sub_2416B9F28();
  v18 = v17;
  v20 = v19;
  sub_24159D7F0(0, (unint64_t *)&qword_25713EB50, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_2416BCC80;
  v35 = a3;
  *(_QWORD *)(v21 + 32) = a3;
  *(_QWORD *)(v21 + 40) = a4;
  *(_QWORD *)(v21 + 48) = a1;
  *(_QWORD *)(v21 + 56) = a2;
  swift_retain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v22 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v23 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v23)
  {
    v35 = sub_2416BB128();
    v25 = v24;
    swift_bridgeObjectRelease();

  }
  else
  {
    v25 = a4;
  }
  v33 = v25;
  v36 = v16 & 1;
  sub_24159D7F0(0, &qword_25713CC20, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF4870]);
  v27 = v26;
  swift_bridgeObjectRetain();
  MEMORY[0x242698604](v40, v27);
  v28 = v40[0];
  v29 = v40[1];
  type metadata accessor for Model();
  v30 = swift_allocObject();
  *(_BYTE *)(v30 + 32) = 0;
  *(_QWORD *)(v30 + 40) = 0;
  *(_QWORD *)(v30 + 48) = 0;
  sub_2416B9CD0();
  *(_QWORD *)(v30 + 16) = v28;
  *(_QWORD *)(v30 + 24) = v29;
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  sub_24159CE88(&qword_25713CC18, (uint64_t (*)(uint64_t))type metadata accessor for Model, (uint64_t)&unk_2416BFB88);
  sub_2416B9CA0();
  swift_release();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_2416B9CAC();
  swift_release();
  LOBYTE(v40[0]) = *(_BYTE *)(v30 + 32);
  sub_2415A3D28(0, &qword_25713CC28, MEMORY[0x24BEE1328], MEMORY[0x24BEE1338], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDEB0F0]);
  swift_retain();
  sub_2416B9F10();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  result = swift_release();
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = v36;
  *(_QWORD *)(a9 + 24) = v18;
  *(_BYTE *)(a9 + 32) = v20 & 1;
  *(_QWORD *)(a9 + 40) = v30;
  *(_QWORD *)(a9 + 48) = 0;
  *(_QWORD *)(a9 + 56) = a5;
  *(_QWORD *)(a9 + 64) = a6;
  *(_QWORD *)(a9 + 72) = a7;
  *(_QWORD *)(a9 + 80) = a8;
  *(_QWORD *)(a9 + 88) = a10;
  *(_QWORD *)(a9 + 96) = a11;
  *(_QWORD *)(a9 + 104) = v35;
  *(_QWORD *)(a9 + 112) = v33;
  return result;
}

uint64_t sub_24161A14C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v2 = v0[4];
  *(_QWORD *)(v1 + 40) = v0[3];
  *(_QWORD *)(v1 + 48) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t destroy for ClearableAddableTextField()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ClearableAddableTextField(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClearableAddableTextField(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ClearableAddableTextField(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClearableAddableTextField(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClearableAddableTextField(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClearableAddableTextField()
{
  return &type metadata for ClearableAddableTextField;
}

uint64_t sub_24161A57C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24161A58C()
{
  uint64_t result;

  result = qword_25713CC30;
  if (!qword_25713CC30)
  {
    sub_24161A654(255);
    sub_24161ADC8(255);
    sub_24159CE88(&qword_25713CD38, (uint64_t (*)(uint64_t))sub_24161A654, MEMORY[0x24BDF4498]);
    sub_24159CE88(&qword_25713CD40, (uint64_t (*)(uint64_t))sub_24161ADC8, MEMORY[0x24BDF4700]);
    type metadata accessor for MedicalIDAXLayoutView();
  }
  return result;
}

void sub_24161A654(uint64_t a1)
{
  sub_2415EBDB0(a1, &qword_25713CC38, (uint64_t (*)(uint64_t))sub_24161A678, &qword_25713CD08, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF4480]);
}

void sub_24161A678(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713CC40, (uint64_t (*)(uint64_t))sub_24161A694, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_24161A694(uint64_t a1)
{
  sub_24161AE24(a1, &qword_25713CC48, &qword_25713CC50, (uint64_t (*)(uint64_t))sub_24161AC10);
}

void sub_24161A6B0(uint64_t a1)
{
  sub_2415EBDB0(a1, &qword_25713CC58, (uint64_t (*)(uint64_t))sub_24161A6D4, &qword_25713CCD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF4480]);
}

void sub_24161A6D4(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713CC60, (uint64_t (*)(uint64_t))sub_24161A6F0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_24161A6F0()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713CC68)
  {
    sub_2415D8800(255, &qword_25713CC70, (uint64_t (*)(uint64_t))sub_24161A79C, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    sub_24159D6B0(255, &qword_25713CCC0, (uint64_t (*)(uint64_t))sub_24161AB7C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713CC68);
  }
}

void sub_24161A79C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_25713CC78)
  {
    sub_24161A830();
    v5[0] = v2;
    v5[1] = sub_2415A40A4(&qword_25713CCA8, (uint64_t (*)(uint64_t))sub_24161A830, (uint64_t (*)(void))sub_24161AA40, (uint64_t (*)(void))sub_2415EFBC4);
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF2448], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713CC78);
  }
}

void sub_24161A830()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713CC80)
  {
    sub_24161A8AC();
    sub_24159D7F0(255, &qword_25713B788, MEMORY[0x24BDEC3D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713CC80);
  }
}

void sub_24161A8AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713CC88)
  {
    sub_24161A930(255);
    sub_2415A3D28(255, (unint64_t *)&qword_257139CD0, MEMORY[0x24BDF3E48], MEMORY[0x24BDF3E18], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF06F8]);
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713CC88);
  }
}

void sub_24161A930(uint64_t a1)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  if (!qword_25713CC90)
  {
    v2 = MEMORY[0x24BDF53C0];
    sub_2415A3D28(255, (unint64_t *)&qword_25713CC98, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF53C0]);
    v6[0] = v3;
    v6[1] = sub_24161A9EC(&qword_25713CCA0, (unint64_t *)&qword_25713CC98, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v2, MEMORY[0x24BDF53E0]);
    v4 = MEMORY[0x242699480](a1, v6, MEMORY[0x24BDF3758], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_25713CC90);
  }
}

uint64_t sub_24161A9EC(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_2415A3D28(255, a2, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], a3);
    result = MEMORY[0x2426994BC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24161AA40()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  _QWORD v5[4];

  result = qword_25713CCB0;
  if (!qword_25713CCB0)
  {
    sub_24161A8AC();
    v2 = v1;
    v3 = MEMORY[0x24BDF53C0];
    sub_2415A3D28(255, (unint64_t *)&qword_25713CC98, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF53C0]);
    v5[2] = v4;
    v5[3] = sub_24161A9EC(&qword_25713CCA0, (unint64_t *)&qword_25713CC98, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v3, MEMORY[0x24BDF53E0]);
    v5[0] = swift_getOpaqueTypeConformance2();
    v5[1] = sub_24161AB14();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v5);
    atomic_store(result, (unint64_t *)&qword_25713CCB0);
  }
  return result;
}

unint64_t sub_24161AB14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713CCB8;
  if (!qword_25713CCB8)
  {
    sub_2415A3D28(255, (unint64_t *)&qword_257139CD0, MEMORY[0x24BDF3E48], MEMORY[0x24BDF3E18], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF06F8]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF0710], v1);
    atomic_store(result, (unint64_t *)&qword_25713CCB8);
  }
  return result;
}

void sub_24161AB7C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_25713CCC8)
  {
    sub_2415BE640();
    v5[0] = v2;
    v5[1] = sub_2415A40A4(&qword_25713CCD0, (uint64_t (*)(uint64_t))sub_2415BE640, (uint64_t (*)(void))sub_2415C3480, sub_2415A4680);
    v3 = MEMORY[0x242699480](a1, v5, MEMORY[0x24BDF2550], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25713CCC8);
  }
}

void sub_24161AC10(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713CCE0, (uint64_t (*)(uint64_t))sub_24161AC2C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_24161AC2C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25713CCE8)
  {
    sub_24161AC90(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25713CCE8);
  }
}

void sub_24161AC90(uint64_t a1)
{
  sub_2415D8800(a1, &qword_25713CCF0, (uint64_t (*)(uint64_t))sub_24161ACB4, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
}

void sub_24161ACB4(uint64_t a1)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_25713CCF8)
  {
    v2 = MEMORY[0x24BDF4398];
    sub_2415A3D28(255, (unint64_t *)&qword_25713B4D8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF4398]);
    v6[0] = v3;
    v6[1] = &type metadata for NoTapAnimationButtonStyle;
    v6[2] = sub_24161A9EC((unint64_t *)&qword_25713B4E0, (unint64_t *)&qword_25713B4D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v2, MEMORY[0x24BDF43B0]);
    v6[3] = sub_24161AD84();
    v4 = MEMORY[0x242699480](a1, v6, MEMORY[0x24BDF22B8], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_25713CCF8);
  }
}

unint64_t sub_24161AD84()
{
  unint64_t result;

  result = qword_25713CD00;
  if (!qword_25713CD00)
  {
    result = MEMORY[0x2426994BC](&unk_2416BFD0C, &type metadata for NoTapAnimationButtonStyle);
    atomic_store(result, (unint64_t *)&qword_25713CD00);
  }
  return result;
}

void sub_24161ADC8(uint64_t a1)
{
  sub_2415EBDB0(a1, &qword_25713CD10, (uint64_t (*)(uint64_t))sub_24161ADEC, &qword_25713CD30, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF46E0]);
}

void sub_24161ADEC(uint64_t a1)
{
  sub_24159D6B0(a1, &qword_25713CD18, (uint64_t (*)(uint64_t))sub_24161AE08, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_24161AE08(uint64_t a1)
{
  sub_24161AE24(a1, &qword_25713CD20, &qword_25713CD28, (uint64_t (*)(uint64_t))sub_24161AC90);
}

void sub_24161AE24(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v8;

  if (!*a2)
  {
    sub_2415E40F8();
    sub_2415D8800(255, a3, (uint64_t (*)(uint64_t))sub_24161A6B0, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v8)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_24161AEB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_25713CD48)
  {
    v2 = sub_24161A58C();
    v3 = sub_24159CE88(&qword_25713CD50, (uint64_t (*)(uint64_t))sub_24161A58C, (uint64_t)&unk_2416C0968);
    v6[0] = v2;
    v6[1] = MEMORY[0x24BEE0D00];
    v6[2] = v3;
    v6[3] = MEMORY[0x24BEE0D28];
    v4 = MEMORY[0x242699480](a1, v6, MEMORY[0x24BDF38E8], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_25713CD48);
  }
}

void sub_24161AF58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_25713CD58)
  {
    sub_24161AEB8(255);
    v3 = v2;
    sub_24161A58C();
    sub_24159CE88(&qword_25713CD50, (uint64_t (*)(uint64_t))sub_24161A58C, (uint64_t)&unk_2416C0968);
    v4 = MEMORY[0x24BEE0D28];
    v5 = MEMORY[0x24BDF38E8];
    v8[0] = v3;
    v8[1] = MEMORY[0x24BEE0D00];
    v8[2] = swift_getOpaqueTypeConformance2();
    v8[3] = v4;
    v6 = MEMORY[0x242699480](a1, v8, v5, 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713CD58);
  }
}

void sub_24161B030(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_25713CD60)
  {
    sub_24161AF58(255);
    v3 = v2;
    sub_24161AEB8(255);
    sub_24161A58C();
    sub_24159CE88(&qword_25713CD50, (uint64_t (*)(uint64_t))sub_24161A58C, (uint64_t)&unk_2416C0968);
    v4 = MEMORY[0x24BDF38E8];
    swift_getOpaqueTypeConformance2();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v8[0] = v3;
    v8[1] = MEMORY[0x24BEE1328];
    v8[2] = OpaqueTypeConformance2;
    v8[3] = MEMORY[0x24BEE1340];
    v6 = MEMORY[0x242699480](a1, v8, v4, 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713CD60);
  }
}

uint64_t sub_24161B140@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24160DA08(v1 + 16, MEMORY[0x24BDEE730], sub_24161B690, (uint64_t (*)(uint64_t))sub_241617C68, a1);
}

uint64_t sub_24161B174@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24160DA08(v1 + 16, MEMORY[0x24BDEEF78], sub_24161B320, (uint64_t (*)(uint64_t))sub_24161863C, a1);
}

uint64_t sub_24161B1AC(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_24161B250()
{
  return sub_241618A68();
}

uint64_t sub_24161B25C()
{
  return sub_241618B68();
}

uint64_t sub_24161B268()
{
  return sub_241618BE0();
}

uint64_t sub_24161B274()
{
  sub_2415A3D28(0, &qword_25713CC28, MEMORY[0x24BEE1328], MEMORY[0x24BEE1338], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDEB0F0]);
  return sub_2416B9F10();
}

uint64_t sub_24161B2E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v2 = v0[4];
  *(_QWORD *)(v1 + 16) = v0[3];
  *(_QWORD *)(v1 + 24) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void sub_24161B320(uint64_t a1)
{
  sub_2415ED870(a1, &qword_25713CD70, sub_24161ADEC);
}

unint64_t sub_24161B344()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  _QWORD v5[6];

  result = qword_25713CD88;
  if (!qword_25713CD88)
  {
    sub_24161AC90(255);
    v2 = v1;
    v3 = MEMORY[0x24BDF4398];
    sub_2415A3D28(255, (unint64_t *)&qword_25713B4D8, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF4398]);
    v5[2] = v4;
    v5[3] = &type metadata for NoTapAnimationButtonStyle;
    v5[4] = sub_24161A9EC((unint64_t *)&qword_25713B4E0, (unint64_t *)&qword_25713B4D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v3, MEMORY[0x24BDF43B0]);
    v5[5] = sub_24161AD84();
    v5[0] = swift_getOpaqueTypeConformance2();
    v5[1] = sub_2415A4680();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v5);
    atomic_store(result, (unint64_t *)&qword_25713CD88);
  }
  return result;
}

uint64_t sub_24161B434(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2415D8800(0, &qword_25713CC70, (uint64_t (*)(uint64_t))sub_24161A79C, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24161B49C()
{
  uint64_t v0;

  return sub_241619C60(v0 + 16, (void (*)(uint64_t))sub_241617110);
}

uint64_t sub_24161B4BC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  sub_2415D8800(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_24161B510(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24159D6B0(0, &qword_25713CCC0, (uint64_t (*)(uint64_t))sub_24161AB7C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24161B56C(uint64_t a1)
{
  uint64_t v2;

  sub_24159D6B0(0, &qword_25713CCC0, (uint64_t (*)(uint64_t))sub_24161AB7C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24161B5C0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  sub_2415D8800(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_24161B600()
{
  return sub_2416190F0();
}

uint64_t objectdestroyTm_10()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24161B670()
{
  uint64_t v0;

  return sub_241619C60(v0 + 16, (void (*)(uint64_t))sub_24161720C);
}

void sub_24161B690(uint64_t a1)
{
  sub_2415ED870(a1, &qword_25713CD98, sub_24161A678);
}

uint64_t sub_24161B6B4()
{
  sub_24161B030(255);
  sub_24161AF58(255);
  sub_24161AEB8(255);
  sub_24161A58C();
  sub_24159CE88(&qword_25713CD50, (uint64_t (*)(uint64_t))sub_24161A58C, (uint64_t)&unk_2416C0968);
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

void sub_24161B7B8()
{
  sub_2416174D8();
}

ValueMetadata *type metadata accessor for NoTapAnimationButtonStyle()
{
  return &type metadata for NoTapAnimationButtonStyle;
}

uint64_t sub_24161B7DC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24161B7EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[1] = a2;
  v3 = sub_2416BA7BC();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = sub_2416BA798();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24161B994();
  v11 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416BA7A4();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v9, v6);
  v13[*(int *)(v11 + 36)] = 0;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  sub_24161BAE8();
  sub_2416BAA80();
  swift_release();
  return sub_24161BB80((uint64_t)v13);
}

void sub_24161B994()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713CDB0)
  {
    sub_2416BA798();
    sub_24161B9F8();
    v0 = sub_2416BA150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713CDB0);
  }
}

void sub_24161B9F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713CDB8)
  {
    sub_2415BE1DC();
    v0 = sub_2416BA630();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713CDB8);
  }
}

uint64_t sub_24161BA50()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_2416BA7BC();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_24161BAB0()
{
  sub_2416BA7BC();
  return sub_2416BA7B0();
}

unint64_t sub_24161BAE8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_25713CDC0;
  if (!qword_25713CDC0)
  {
    sub_24161B994();
    v2 = v1;
    v3[0] = sub_24159CE88(&qword_25713CDC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF12C8], MEMORY[0x24BDF12C0]);
    v3[1] = sub_24159CE88(qword_25713CDD0, (uint64_t (*)(uint64_t))sub_24161B9F8, MEMORY[0x24BDEFAD8]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_25713CDC0);
  }
  return result;
}

uint64_t sub_24161BB80(uint64_t a1)
{
  uint64_t v2;

  sub_24161B994();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24161BBBC()
{
  sub_24161B994();
  sub_24161BAE8();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24161BC04()
{
  return swift_allocateGenericValueMetadata();
}

void sub_24161BC0C()
{
  unint64_t v0;
  unint64_t v1;

  sub_24159D6B0(319, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *sub_24161BCD4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;

  v6 = sub_2416BA06C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 + 72;
  v12 = *(_QWORD *)(v9 + 64) + 7;
  v13 = v10 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v13 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v12
       + ((v10 + 72 + (((((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v10)) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
  }
  else
  {
    v17 = *((unsigned __int8 *)a2 + v8);
    v36 = *(_QWORD *)(a3 + 16);
    if (v17 >= 2)
    {
      if (v8 <= 3)
        v18 = v8;
      else
        v18 = 4;
      __asm { BR              X13 }
    }
    v19 = v8 + 1;
    if (v17 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      v20 = 1;
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      v20 = 0;
    }
    v35 = ~v10;
    *((_BYTE *)a1 + v8) = v20;
    v21 = (_QWORD *)(((unint64_t)a1 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)(((unint64_t)a2 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v22;
    v21[1] = v22[1];
    v23 = (_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = (_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
    v27 = (_QWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v26 = *v27;
    v26[1] = v27[1];
    v28 = v27[3];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v28)
    {
      v26[2] = v27[2];
      v26[3] = v27[3];
      v26[4] = v27[4];
      v26[5] = v27[5];
      v26[6] = v27[6];
      v26[7] = v27[7];
      v26[8] = v27[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v29 = *((_OWORD *)v27 + 1);
      v30 = *((_OWORD *)v27 + 2);
      v31 = *((_OWORD *)v27 + 3);
      v26[8] = v27[8];
      *((_OWORD *)v26 + 2) = v30;
      *((_OWORD *)v26 + 3) = v31;
      *((_OWORD *)v26 + 1) = v29;
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)v26 + v11) & v35, ((unint64_t)v27 + v11) & v35, v36);
    v32 = (v12 + (((unint64_t)v26 + v11) & v35)) & 0xFFFFFFFFFFFFFFF8;
    v33 = (v12 + (((unint64_t)v27 + v11) & v35)) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v32 = *(_BYTE *)v33;
    *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
  }
  swift_retain();
  return a1;
}

uint64_t sub_24161BFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;

  v4 = sub_2416BA06C();
  v5 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a1 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  else
    swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v9 = (((((a1 + v6 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  if (*(_QWORD *)(v9 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v9
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 72) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return swift_release();
}

_QWORD *sub_24161C148(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v6 = sub_2416BA06C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    v11 = 0;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = (_QWORD *)(((unint64_t)a1 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)a2 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v12[1] = v13[1];
  v14 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v17[1] = v18[1];
  v19 = v18[3];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v19)
  {
    v17[2] = v18[2];
    v17[3] = v18[3];
    v17[4] = v18[4];
    v17[5] = v18[5];
    v17[6] = v18[6];
    v17[7] = v18[7];
    v17[8] = v18[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = *((_OWORD *)v18 + 1);
    v21 = *((_OWORD *)v18 + 2);
    v22 = *((_OWORD *)v18 + 3);
    v17[8] = v18[8];
    *((_OWORD *)v17 + 2) = v21;
    *((_OWORD *)v17 + 3) = v22;
    *((_OWORD *)v17 + 1) = v20;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = ((unint64_t)v17 + v24 + 72) & ~v24;
  v26 = ((unint64_t)v18 + v24 + 72) & ~v24;
  (*(void (**)(uint64_t, uint64_t))(v23 + 16))(v25, v26);
  v27 = *(_QWORD *)(v23 + 64) + 7;
  v28 = (v27 + v25) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v27 + v26) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v28 = *(_BYTE *)v29;
  *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
  swift_retain();
  return a1;
}

_QWORD *sub_24161C3C0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;

  if (a1 != a2)
  {
    v6 = sub_2416BA06C();
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release();
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v8) = 0;
      swift_retain();
    }
  }
  v13 = *(_QWORD *)(*(_QWORD *)(sub_2416BA06C() - 8) + 64);
  if (v13 <= 8)
    v13 = 8;
  v14 = v13 + 8;
  v15 = (_QWORD *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = (_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_retain();
  swift_release();
  v20 = (_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  swift_retain();
  swift_release();
  v20[1] = v21[1];
  swift_retain();
  swift_release();
  v22 = v20 + 2;
  v23 = (__int128 *)(v21 + 2);
  v24 = v21[3];
  if (v20[3])
  {
    if (v24)
    {
      v20[2] = v21[2];
      v20[3] = v21[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v20[4] = v21[4];
      v20[5] = v21[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v20[6] = v21[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v20[7] = v21[7];
      v20[8] = v21[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2415CCAC8((uint64_t)(v20 + 2));
      v26 = *((_OWORD *)v21 + 2);
      v25 = *((_OWORD *)v21 + 3);
      v27 = *v23;
      v20[8] = v21[8];
      *((_OWORD *)v20 + 2) = v26;
      *((_OWORD *)v20 + 3) = v25;
      *v22 = v27;
    }
  }
  else if (v24)
  {
    v20[2] = v21[2];
    v20[3] = v21[3];
    v20[4] = v21[4];
    v20[5] = v21[5];
    v20[6] = v21[6];
    v20[7] = v21[7];
    v20[8] = v21[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v28 = *v23;
    v29 = *((_OWORD *)v21 + 2);
    v30 = *((_OWORD *)v21 + 3);
    v20[8] = v21[8];
    *((_OWORD *)v20 + 2) = v29;
    *((_OWORD *)v20 + 3) = v30;
    *v22 = v28;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v32 = *(unsigned __int8 *)(v31 + 80);
  v33 = ((unint64_t)v20 + v32 + 72) & ~v32;
  v34 = ((unint64_t)v21 + v32 + 72) & ~v32;
  (*(void (**)(uint64_t, uint64_t))(v31 + 24))(v33, v34);
  v35 = *(_QWORD *)(v31 + 64) + 7;
  v36 = (v35 + v33) & 0xFFFFFFFFFFFFFFF8;
  v37 = (v35 + v34) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v36 = *(_BYTE *)v37;
  *(_QWORD *)(v36 + 8) = *(_QWORD *)(v37 + 8);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_24161C7E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = sub_2416BA06C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = (_OWORD *)(((unint64_t)a1 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)(((unint64_t)a2 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v14;
  v16 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  v18 = *(_OWORD *)(v17 + 16);
  v19 = *(_OWORD *)(v17 + 32);
  v20 = *(_OWORD *)(v17 + 48);
  *(_QWORD *)(v16 + 64) = *(_QWORD *)(v17 + 64);
  *(_OWORD *)(v16 + 32) = v19;
  *(_OWORD *)(v16 + 48) = v20;
  *(_OWORD *)(v16 + 16) = v18;
  v21 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (v22 + 72 + v16) & ~v22;
  v24 = (v22 + 72 + v17) & ~v22;
  (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v23, v24);
  *(_OWORD *)((*(_QWORD *)(v21 + 64) + 7 + v23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v21 + 64) + 7 + v24) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_24161C998(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD *v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  if (a1 != a2)
  {
    v6 = sub_2416BA06C();
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release();
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
      v13 = 1;
    }
    else
    {
      v13 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v13;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(sub_2416BA06C() - 8) + 64);
  if (v14 <= 8)
    v14 = 8;
  v15 = v14 + 8;
  v16 = (_QWORD *)(((unint64_t)a1 + v15) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)a2 + v15) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRelease();
  v18 = (_OWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_OWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8);
  *v18 = *v19;
  swift_release();
  v20 = (_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  swift_release();
  v20[1] = v21[1];
  swift_release();
  v22 = v20 + 2;
  v23 = (__int128 *)(v21 + 2);
  if (v20[3])
  {
    if (v21[3])
    {
      v20[2] = v21[2];
      v20[3] = v21[3];
      swift_bridgeObjectRelease();
      v20[4] = v21[4];
      v20[5] = v21[5];
      swift_bridgeObjectRelease();
      v20[6] = v21[6];
      swift_bridgeObjectRelease();
      v20[7] = v21[7];
      v20[8] = v21[8];
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2415CCAC8((uint64_t)(v20 + 2));
      v28 = *((_OWORD *)v21 + 2);
      v27 = *((_OWORD *)v21 + 3);
      v29 = *v23;
      v20[8] = v21[8];
      *((_OWORD *)v20 + 2) = v28;
      *((_OWORD *)v20 + 3) = v27;
      *v22 = v29;
    }
  }
  else
  {
    v24 = *v23;
    v25 = *((_OWORD *)v21 + 2);
    v26 = *((_OWORD *)v21 + 3);
    v20[8] = v21[8];
    *((_OWORD *)v20 + 2) = v25;
    *((_OWORD *)v20 + 3) = v26;
    *v22 = v24;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v31 = *(unsigned __int8 *)(v30 + 80);
  v32 = ((unint64_t)v20 + v31 + 72) & ~v31;
  v33 = ((unint64_t)v21 + v31 + 72) & ~v31;
  (*(void (**)(uint64_t, uint64_t))(v30 + 40))(v32, v33);
  v34 = *(_QWORD *)(v30 + 64) + 7;
  v35 = (v34 + v32) & 0xFFFFFFFFFFFFFFF8;
  v36 = (v34 + v33) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v35 = *(_BYTE *)v36;
  *(_QWORD *)(v35 + 8) = *(_QWORD *)(v36 + 8);
  swift_release();
  return a1;
}

uint64_t sub_24161CD0C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;

  v6 = sub_2416BA06C();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = v11 + 72;
  if (v10 < a2)
  {
    if (((((*(_QWORD *)(v8 + 64)
           + ((v12 + (((((v7 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v11)
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v10 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    __asm { BR              X17 }
  }
  v17 = (a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8;
  if ((v9 & 0x80000000) != 0)
    return (*(uint64_t (**)(unint64_t))(v8 + 48))((v12
                                                                  + ((((v17 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v11);
  v18 = *(_QWORD *)(v17 + 8);
  if (v18 >= 0xFFFFFFFF)
    LODWORD(v18) = -1;
  return (v18 + 1);
}

void sub_24161CE9C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v8 = sub_2416BA06C();
  v9 = 8;
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > 8uLL)
    v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v10 + 84) <= 0x7FFFFFFFu)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v10 + 84);
  if (v11 >= a3)
  {
    v14 = 0;
    if (a2 <= v11)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v10 + 64)
         + ((*(unsigned __int8 *)(v10 + 80) + 72 + (((((v9 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v10 + 80))
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v12 = a3 - v11 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (a2 <= v11)
LABEL_19:
      __asm { BR              X14 }
  }
  if (((*(_DWORD *)(v10 + 64)
       + ((*(unsigned __int8 *)(v10 + 80) + 72 + (((((v9 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v10 + 80))
       + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v15 = ~v11 + a2;
    bzero(a1, ((*(_QWORD *)(v10 + 64)+ ((*(unsigned __int8 *)(v10 + 80)+ 72+ (((((v9 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v15;
  }
  __asm { BR              X10 }
}

void sub_24161CFE0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x24161D068);
}

void sub_24161CFE8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x24161CFF0);
  JUMPOUT(0x24161D068);
}

void sub_24161D010()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x24161D068);
}

void sub_24161D018()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x24161D068);
}

void sub_24161D020(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (v5)
  {
    v3 = (v6 + v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (a3 < 0)
      JUMPOUT(0x24161D02CLL);
    if (v5 < 0)
      JUMPOUT(0x24161D060);
    *(_QWORD *)(v3 + 8) = (v5 - 1);
  }
  JUMPOUT(0x24161D068);
}

uint64_t type metadata accessor for MedicalIDEditModal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MedicalIDEditModal);
}

uint64_t sub_24161D08C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_24161D0C0()
{
  sub_24160AC7C();
  return sub_2416BAE1C();
}

uint64_t sub_24161D13C()
{
  sub_24160AC7C();
  return sub_2416BAE34();
}

uint64_t sub_24161D1A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t OpaqueTypeConformance2;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  _QWORD v43[3];
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[9];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v51 = a2;
  sub_2416BA108();
  v50 = a1;
  v4 = *(_QWORD *)(a1 + 24);
  v59 = *(_QWORD *)(a1 + 16);
  v3 = v59;
  v60 = v4;
  v5 = MEMORY[0x242699480](255, &v59, MEMORY[0x24BDF33A8], 0);
  sub_24159D6B0(255, &qword_25713CE58, (uint64_t (*)(uint64_t))sub_24161E460, MEMORY[0x24BDEF158]);
  v7 = v6;
  v59 = v3;
  v60 = v4;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v9 = sub_24161E538();
  v59 = v5;
  v60 = v7;
  v61 = OpaqueTypeConformance2;
  v62 = v9;
  v43[2] = MEMORY[0x242699480](255, &v59, MEMORY[0x24BDF3858], 0);
  v59 = v5;
  v60 = v7;
  v61 = OpaqueTypeConformance2;
  v62 = v9;
  v43[1] = swift_getOpaqueTypeConformance2();
  v10 = sub_2416BA168();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v43 - v12;
  v14 = MEMORY[0x2426994BC](MEMORY[0x24BDED358], v10);
  v59 = v10;
  v60 = v14;
  v15 = MEMORY[0x242699480](0, &v59, MEMORY[0x24BDF32F0], 0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v43 - v17;
  sub_24159D7F0(255, &qword_25713CE78, MEMORY[0x24BEE1328], MEMORY[0x24BDF1230]);
  v19 = sub_2416BA150();
  v20 = *(_QWORD *)(v19 - 8);
  v52 = v19;
  v48 = v20;
  MEMORY[0x24BDAC7A8](v19);
  v43[0] = (char *)v43 - v21;
  v47 = sub_2416BA150();
  v49 = *(_QWORD *)(v47 - 8);
  v22 = MEMORY[0x24BDAC7A8](v47);
  v44 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v46 = (uint64_t)v43 - v24;
  v53 = v3;
  v54 = v4;
  v25 = v45;
  v55 = v45;
  sub_2416BA15C();
  sub_2416BAB34();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v26 = (char *)(v25 + *(int *)(v50 + 52));
  v27 = *v26;
  v28 = *((_QWORD *)v26 + 1);
  LOBYTE(v59) = v27;
  v60 = v28;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v59 = v10;
  v60 = v14;
  v29 = swift_getOpaqueTypeConformance2();
  sub_2416BABC4();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  sub_24161D13C();
  v31 = v61;
  v30 = v62;
  v50 = v66;
  v45 = v67;
  v58[0] = v59;
  v58[1] = v60;
  v58[2] = v61;
  v58[3] = v62;
  v58[4] = v63;
  v58[5] = v64;
  v58[6] = v65;
  v58[7] = v66;
  v58[8] = v67;
  v32 = sub_24161E5A4();
  v57[0] = v29;
  v57[1] = v32;
  v33 = v52;
  v34 = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v52, v57);
  v35 = (uint64_t)v44;
  v36 = v33;
  v37 = v43[0];
  sub_24160B14C((uint64_t)v58, v36, v34);
  swift_release();
  swift_release();
  sub_24160AD24(v31, v30);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v37, v52);
  v38 = sub_24160AA40();
  v56[0] = v34;
  v56[1] = v38;
  v39 = v47;
  MEMORY[0x2426994BC](MEMORY[0x24BDED308], v47, v56);
  v40 = v46;
  sub_2415E3D20(v35, v39, v46);
  v41 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
  v41(v35, v39);
  sub_2415E07B8(v40, v39, v51);
  return ((uint64_t (*)(uint64_t, uint64_t))v41)(v40, v39);
}

uint64_t sub_24161D6B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t OpaqueTypeConformance2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;

  v43 = a4;
  v41 = sub_2416BA450();
  v7 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = a2;
  v48 = a3;
  v10 = a3;
  v11 = MEMORY[0x242699480](0, &v47, MEMORY[0x24BDF33A8], 0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = v11;
  v38 = v11;
  v42 = v12;
  MEMORY[0x24BDAC7A8](v11);
  v39 = (char *)&v34 - v14;
  sub_24159D6B0(255, &qword_25713CE58, (uint64_t (*)(uint64_t))sub_24161E460, MEMORY[0x24BDEF158]);
  v16 = v15;
  v34 = v15;
  v47 = a2;
  v48 = a3;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v37 = OpaqueTypeConformance2;
  v36 = sub_24161E538();
  v47 = v13;
  v48 = v16;
  v49 = OpaqueTypeConformance2;
  v50 = v36;
  v18 = MEMORY[0x242699480](0, &v47, MEMORY[0x24BDF3858], 0);
  v40 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v35 = (uint64_t)&v34 - v22;
  v23 = v10;
  type metadata accessor for MedicalIDEditModal(0, a2, v10, v24);
  v25 = v41;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BDEE5F0], v41);
  v26 = v39;
  sub_2416BAB4C();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  v44 = a2;
  v45 = v23;
  v46 = a1;
  v27 = swift_checkMetadataState();
  v29 = v37;
  v28 = v38;
  v30 = v36;
  sub_2416BABAC();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v28);
  v47 = v28;
  v48 = v27;
  v49 = v29;
  v50 = v30;
  swift_getOpaqueTypeConformance2();
  v31 = v35;
  sub_2415E3D20((uint64_t)v21, v18, v35);
  v32 = *(void (**)(char *, uint64_t))(v40 + 8);
  v32(v21, v18);
  sub_2415E07B8(v31, v18, v43);
  return ((uint64_t (*)(uint64_t, uint64_t))v32)(v31, v18);
}

uint64_t sub_24161D98C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v37 = a4;
  sub_24161E460();
  v38 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v34 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24161E4D0();
  v35 = *(_QWORD *)(v9 - 8);
  v36 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v32 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2416BA5E8();
  MEMORY[0x24BDAC7A8](v11);
  sub_2415E88A8();
  v33 = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v31 - v17;
  sub_2416BA5C4();
  v45 = a2;
  v46 = a3;
  v47 = a1;
  sub_241609510();
  sub_2415E8934();
  sub_2416B9FE8();
  sub_2416BA5DC();
  v42 = a2;
  v43 = a3;
  v44 = a1;
  v19 = v32;
  sub_2416B9FE8();
  sub_2416BA5D0();
  v39 = a2;
  v40 = a3;
  v41 = a1;
  sub_2416B9FE8();
  v20 = &v34[*(int *)(v38 + 48)];
  v21 = &v34[*(int *)(v38 + 64)];
  v22 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v23 = v33;
  v22(v34, v18, v33);
  v24 = v35;
  v25 = v20;
  v26 = v36;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v25, v19, v36);
  v27 = v21;
  v28 = v23;
  v22(v27, v16, v23);
  sub_2416BA534();
  v29 = *(void (**)(char *, uint64_t))(v13 + 8);
  v29(v16, v28);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v19, v26);
  return ((uint64_t (*)(char *, uint64_t))v29)(v18, v28);
}

uint64_t sub_24161DC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = sub_2416BA06C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2415C0E10((uint64_t)v3);
  sub_2416BA060();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_24161DCBC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  type metadata accessor for MedicalIDEditModal(0, a1, a2, a3);
  sub_2415C343C();
  swift_bridgeObjectRetain();
  v5 = sub_2416BA9D8();
  v7 = v6;
  v9 = v8 & 1;
  v10 = sub_2416BA9B4();
  v12 = v11;
  v14 = v13;
  v16 = v15;
  sub_2415A431C(v5, v7, v9);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v10;
  *(_QWORD *)(a4 + 8) = v12;
  *(_BYTE *)(a4 + 16) = v14 & 1;
  *(_QWORD *)(a4 + 24) = v16;
  return result;
}

uint64_t sub_24161DD90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v23 = a7;
  v24 = a6;
  v21[0] = a1;
  v21[1] = a5;
  v22 = a3;
  v8 = type metadata accessor for MedicalIDEditModal(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v21 - v10;
  v12 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v12);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v13 = (void *)qword_25713A038;
  v14 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v14);
  v15 = v13;
  sub_2416B9C04();
  v25 = sub_2416BB134();
  v26 = v16;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 16))(v11, v21[0], v8);
  v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v18 = swift_allocObject();
  v19 = v22;
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v18 + v17, v11, v8);
  sub_2415C343C();
  return sub_2416BAD68();
}

uint64_t sub_24161DF7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24159D6B0(0, &qword_25713A560, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - v7;
  v9 = sub_2416BB2A8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  sub_2416BB290();
  v10 = sub_2416BB284();
  v11 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v12 = swift_allocObject();
  v13 = MEMORY[0x24BEE6930];
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v13;
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(a1 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v12 + v11, v5, a1);
  sub_24160B674((uint64_t)v8, (uint64_t)&unk_25713CE90, v12);
  return swift_release();
}

uint64_t sub_24161E0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[13] = a5;
  v6[14] = a6;
  v6[12] = a4;
  sub_2416BB290();
  v6[15] = sub_2416BB284();
  v6[16] = sub_2416BB254();
  v6[17] = v7;
  return swift_task_switch();
}

uint64_t sub_24161E148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(void);

  v5 = *(_QWORD *)(v4 + 96);
  v6 = type metadata accessor for MedicalIDEditModal(0, *(_QWORD *)(v4 + 104), *(_QWORD *)(v4 + 112), a4);
  *(_QWORD *)(v4 + 144) = v6;
  v7 = (char *)(v5 + *(int *)(v6 + 52));
  v8 = *v7;
  v9 = *((_QWORD *)v7 + 1);
  *(_BYTE *)(v4 + 72) = v8;
  *(_QWORD *)(v4 + 80) = v9;
  *(_BYTE *)(v4 + 168) = 1;
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  sub_2416BAD20();
  v12 = (uint64_t (*)(void))(**(int **)(v5 + *(int *)(v6 + 40)) + *(_QWORD *)(v5 + *(int *)(v6 + 40)));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 152) = v10;
  *v10 = v4;
  v10[1] = sub_24161E21C;
  return v12();
}

uint64_t sub_24161E21C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24161E27C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  sub_24161E3E4(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24161E2B8()
{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v11[2];
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;

  v1 = *(void **)(v0 + 160);
  swift_release();
  *(_QWORD *)(v0 + 88) = v1;
  v2 = v1;
  sub_24159F0B8();
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 160);
  if ((v3 & 1) != 0)
  {

    v5 = *(_QWORD *)(v0 + 24);
    v6 = *(_QWORD *)(v0 + 48);
    v15 = *(_QWORD *)(v0 + 16);
    v16 = v5;
    v17 = *(_OWORD *)(v0 + 32);
    v18 = v6;
    v19 = *(_OWORD *)(v0 + 56);
    sub_24161D0C0();
    v7 = *(void **)(v0 + 88);
  }
  else
  {

    v8 = v4;
    sub_241690678(v4, v11);

    v15 = v11[0];
    v16 = v11[1];
    v17 = v12;
    v18 = v13;
    v19 = v14;
    sub_24161D0C0();
    v7 = v4;
  }

  sub_24161E3E4(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24161E3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for MedicalIDEditModal(0, a2, a3, a4);
  sub_24159D7F0(0, (unint64_t *)&qword_25713A528, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF42C0]);
  return sub_2416BAD20();
}

void sub_24161E460()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_25713CE60)
  {
    sub_2415E88A8();
    sub_24161E4D0();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_25713CE60);
  }
}

void sub_24161E4D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713CE68)
  {
    v0 = sub_2416B9FF4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713CE68);
  }
}

unint64_t sub_24161E538()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713CE70;
  if (!qword_25713CE70)
  {
    sub_24159D6B0(255, &qword_25713CE58, (uint64_t (*)(uint64_t))sub_24161E460, MEMORY[0x24BDEF158]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDEF170], v1);
    atomic_store(result, (unint64_t *)&qword_25713CE70);
  }
  return result;
}

uint64_t sub_24161E598@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_24161D6B8(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_24161E5A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713CE80;
  if (!qword_25713CE80)
  {
    sub_24159D7F0(255, &qword_25713CE78, MEMORY[0x24BEE1328], MEMORY[0x24BDF1230]);
    result = MEMORY[0x2426994BC](MEMORY[0x24BDF1248], v1);
    atomic_store(result, &qword_25713CE80);
  }
  return result;
}

uint64_t sub_24161E604@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_24161D98C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_24161E610@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_24161DD90(v1[4], v1[2], v1[3], 0x6C65636E6143, (uint64_t)&unk_251196BF0, (uint64_t)sub_24161EA1C, a1);
}

uint64_t sub_24161E64C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_24161DCBC(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t sub_24161E658@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_24161DD90(v1[4], v1[2], v1[3], 1701736260, (uint64_t)&unk_251196BA0, (uint64_t)sub_24161E694, a1);
}

uint64_t sub_24161E694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for MedicalIDEditModal(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return sub_24161DF7C(v5);
}

uint64_t sub_24161E6D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v4 + 32);
  v6 = type metadata accessor for MedicalIDEditModal(0, v5, *(_QWORD *)(v4 + 40), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = (v7 + 48) & ~v7;
  swift_unknownObjectRelease();
  v9 = v4 + v8;
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v4 + v8, v10);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  v11 = v9 + *(int *)(v6 + 44);
  swift_release();
  swift_release();
  if (*(_QWORD *)(v11 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v9 + *(int *)(v6 + 48), v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24161E828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MedicalIDEditModal(0, v7, v8, a4) - 8) + 80);
  v10 = v4[2];
  v11 = v4[3];
  v12 = (uint64_t)v4 + ((v9 + 48) & ~v9);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v13;
  *v13 = v5;
  v13[1] = sub_2415C2834;
  return sub_24161E0D8(a1, v10, v11, v12, v7, v8);
}

uint64_t objectdestroyTm_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for MedicalIDEditModal(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v4 + v8;
  sub_24159D6B0(0, (unint64_t *)&qword_25713A4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC038], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_2416BA06C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v4 + v8, v10);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  v11 = v9 + *(int *)(v6 + 44);
  swift_release();
  swift_release();
  if (*(_QWORD *)(v11 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v9 + *(int *)(v6 + 48), v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24161EA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for MedicalIDEditModal(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return sub_24161DC3C();
}

uint64_t sub_24161EA6C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v1 = *a1;
  v2 = a1[1];
  sub_2416BA108();
  v16 = v1;
  v17 = v2;
  v3 = MEMORY[0x242699480](255, &v16, MEMORY[0x24BDF33A8], 0);
  sub_24159D6B0(255, &qword_25713CE58, (uint64_t (*)(uint64_t))sub_24161E460, MEMORY[0x24BDEF158]);
  v5 = v4;
  v16 = v1;
  v17 = v2;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v7 = sub_24161E538();
  v16 = v3;
  v17 = v5;
  v18 = OpaqueTypeConformance2;
  v19 = v7;
  MEMORY[0x242699480](255, &v16, MEMORY[0x24BDF3858], 0);
  v16 = v3;
  v17 = v5;
  v18 = OpaqueTypeConformance2;
  v19 = v7;
  swift_getOpaqueTypeConformance2();
  v8 = sub_2416BA168();
  v9 = MEMORY[0x2426994BC](MEMORY[0x24BDED358], v8);
  v16 = v8;
  v17 = v9;
  MEMORY[0x242699480](255, &v16, MEMORY[0x24BDF32F0], 0);
  sub_24159D7F0(255, &qword_25713CE78, MEMORY[0x24BEE1328], MEMORY[0x24BDF1230]);
  v10 = sub_2416BA150();
  v11 = sub_2416BA150();
  v16 = v8;
  v17 = v9;
  v15[0] = swift_getOpaqueTypeConformance2();
  v15[1] = sub_24161E5A4();
  v12 = MEMORY[0x24BDED308];
  v14[0] = MEMORY[0x2426994BC](MEMORY[0x24BDED308], v10, v15);
  v14[1] = sub_24160AA40();
  return MEMORY[0x2426994BC](v12, v11, v14);
}

char *sub_24161EC4C(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int (*v86)(char *, uint64_t, uint64_t);
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  void *v102;
  id v103;
  unsigned int (*v105)(char *, uint64_t, uint64_t);
  void *v106;
  void *v107;
  char *__dst;
  int *v109;
  uint64_t v110;
  int *v111;
  void (*v112)(char *, char *, uint64_t);
  char *v114;
  char *v115;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v25 = (char *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v6;
    v109 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    v7 = v109[5];
    v114 = a2;
    v115 = a1;
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = *(_QWORD *)&a2[v7 + 8];
    *(_QWORD *)v8 = *(_QWORD *)&a2[v7];
    *((_QWORD *)v8 + 1) = v10;
    v12 = *(_QWORD *)&a2[v7 + 16];
    v11 = *(_QWORD *)&a2[v7 + 24];
    *((_QWORD *)v8 + 2) = v12;
    *((_QWORD *)v8 + 3) = v11;
    v13 = *((_QWORD *)v9 + 5);
    *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
    *((_QWORD *)v8 + 5) = v13;
    v14 = *((_QWORD *)v9 + 7);
    *((_QWORD *)v8 + 6) = *((_QWORD *)v9 + 6);
    *((_QWORD *)v8 + 7) = v14;
    v15 = *((_QWORD *)v9 + 9);
    *((_QWORD *)v8 + 8) = *((_QWORD *)v9 + 8);
    *((_QWORD *)v8 + 9) = v15;
    v16 = *((_QWORD *)v9 + 11);
    *((_QWORD *)v8 + 10) = *((_QWORD *)v9 + 10);
    *((_QWORD *)v8 + 11) = v16;
    v106 = (void *)*((_QWORD *)v9 + 12);
    v107 = (void *)*((_QWORD *)v9 + 13);
    *((_QWORD *)v8 + 12) = v106;
    *((_QWORD *)v8 + 13) = v107;
    v111 = (int *)type metadata accessor for MedicalIDData();
    v17 = v111[13];
    __dst = &v8[v17];
    v18 = &v9[v17];
    v19 = sub_2416B9B50();
    v110 = *(_QWORD *)(v19 - 8);
    v105 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = v106;
    v21 = v107;
    if (v105(v18, 1, v19))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      v23 = v110;
    }
    else
    {
      v23 = v110;
      (*(void (**)(char *, char *, uint64_t))(v110 + 16))(__dst, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(__dst, 0, 1, v19);
    }
    v26 = v111[14];
    v27 = &v8[v26];
    v28 = &v9[v26];
    if (v105(&v9[v26], 1, v19))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v27, v28, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v27, 0, 1, v19);
    }
    v30 = v111[15];
    v31 = &v8[v30];
    v32 = &v9[v30];
    v33 = *((_QWORD *)v32 + 1);
    *v31 = *(_QWORD *)v32;
    v31[1] = v33;
    v34 = v111[16];
    v35 = &v8[v34];
    v36 = &v9[v34];
    v37 = *((_QWORD *)v36 + 1);
    *v35 = *(_QWORD *)v36;
    v35[1] = v37;
    v8[v111[17]] = v9[v111[17]];
    v8[v111[18]] = v9[v111[18]];
    v38 = v111[19];
    v39 = &v8[v38];
    v40 = (uint64_t *)&v9[v38];
    v41 = *(_QWORD *)&v9[v38 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v41 >> 60 == 15)
    {
      *(_OWORD *)v39 = *(_OWORD *)v40;
    }
    else
    {
      v42 = *v40;
      sub_2415A0A90(*v40, v41);
      *(_QWORD *)v39 = v42;
      *((_QWORD *)v39 + 1) = v41;
    }
    v43 = v111[20];
    v44 = &v8[v43];
    v45 = &v9[v43];
    v46 = sub_2416B9A18();
    v47 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    v49 = v111[21];
    v50 = *(void **)&v9[v49];
    *(_QWORD *)&v8[v49] = v50;
    v51 = v111[22];
    v52 = &v8[v51];
    v53 = &v9[v51];
    v54 = v50;
    if (v105(v53, 1, v19))
    {
      sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v52, v53, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v52, 0, 1, v19);
    }
    v56 = v109[6];
    v57 = &v115[v56];
    v58 = &v114[v56];
    v59 = sub_2416B9C10();
    v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
    v60(v57, v58, v59);
    v61 = v109[7];
    v62 = &v115[v61];
    v63 = &v114[v61];
    v60(&v115[v61], &v114[v61], v59);
    v64 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    v65 = *(void **)&v63[v64];
    *(_QWORD *)&v62[v64] = v65;
    v66 = v109[8];
    v67 = &v115[v66];
    v68 = &v114[v66];
    v69 = v65;
    v112 = v60;
    v60(v67, v68, v59);
    v70 = type metadata accessor for MedicalIDWeightFormatter();
    v71 = *(int *)(v70 + 20);
    v72 = *(void **)&v68[v71];
    *(_QWORD *)&v67[v71] = v72;
    v73 = *(int *)(v70 + 24);
    v74 = *(void **)&v68[v73];
    *(_QWORD *)&v67[v73] = v74;
    v75 = a3[5];
    v76 = &v115[v75];
    v77 = &v114[v75];
    v78 = *(_QWORD *)&v114[v75 + 8];
    *(_QWORD *)v76 = *(_QWORD *)&v114[v75];
    *((_QWORD *)v76 + 1) = v78;
    sub_24159D6B0(0, &qword_25713CE98, (uint64_t (*)(uint64_t))sub_24161F2E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    v80 = *(int *)(v79 + 32);
    v81 = &v76[v80];
    v82 = &v77[v80];
    sub_24161F2FC();
    v84 = v83;
    v85 = *(_QWORD *)(v83 - 8);
    v86 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48);
    v87 = v72;
    v88 = v74;
    swift_retain();
    swift_retain();
    if (v86(v82, 1, v84))
    {
      sub_24161F2E0(0);
      memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v81, v82, v84);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v81, 0, 1, v84);
    }
    v90 = a3[7];
    v25 = v115;
    *(_QWORD *)&v115[a3[6]] = *(_QWORD *)&v114[a3[6]];
    *(_QWORD *)&v115[v90] = *(_QWORD *)&v114[v90];
    v91 = a3[8];
    v92 = a3[9];
    v93 = &v115[v91];
    v94 = &v114[v91];
    v95 = *((_QWORD *)v94 + 1);
    *(_QWORD *)v93 = *(_QWORD *)v94;
    *((_QWORD *)v93 + 1) = v95;
    *((_QWORD *)v93 + 2) = *((_QWORD *)v94 + 2);
    v96 = &v115[v92];
    v97 = &v114[v92];
    sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v112(v96, v97, v59);
    }
    else
    {
      *(_QWORD *)v96 = *(_QWORD *)v97;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v98 = a3[10];
    v99 = &v115[v98];
    v100 = &v114[v98];
    v102 = *(void **)v100;
    v101 = *((_QWORD *)v100 + 1);
    *(_QWORD *)v99 = v102;
    *((_QWORD *)v99 + 1) = v101;
    v103 = v102;
  }
  return v25;
}

void sub_24161F2E0(uint64_t a1)
{
  sub_24159D6B0(a1, qword_25713CEA0, (uint64_t (*)(uint64_t))sub_24161F2FC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_24161F2FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25713BEE0)
  {
    sub_2415C0788(255, &qword_25713BEE8);
    v0 = sub_2416B9928();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25713BEE0);
  }
}

void sub_24161F360(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;

  swift_bridgeObjectRelease();
  v4 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v5 = a1 + v4[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v6 = (int *)type metadata accessor for MedicalIDData();
  v7 = v5 + v6[13];
  v8 = sub_2416B9B50();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v11 = v5 + v6[14];
  if (!v10(v11, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  v31 = a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = (uint64_t *)(v5 + v6[19]);
  v13 = v12[1];
  if (v13 >> 60 != 15)
    sub_2415A0DAC(*v12, v13);
  v14 = v5 + v6[20];
  v15 = sub_2416B9A18();
  v16 = *(_QWORD *)(v15 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);

  v17 = v5 + v6[22];
  if (!v10(v17, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v17, v8);
  v18 = a1 + v4[6];
  v19 = sub_2416B9C10();
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(v18, v19);
  v21 = a1 + v4[7];
  v20(v21, v19);

  v22 = a1 + v4[8];
  v20(v22, v19);
  v23 = type metadata accessor for MedicalIDWeightFormatter();

  v24 = a1 + v31[5];
  swift_release();
  swift_release();
  sub_24159D6B0(0, &qword_25713CE98, (uint64_t (*)(uint64_t))sub_24161F2E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v26 = v24 + *(int *)(v25 + 32);
  sub_24161F2FC();
  v28 = v27;
  v29 = *(_QWORD *)(v27 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v26, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v26, v28);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v30 = a1 + v31[9];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v20(v30, v19);
  else
    swift_release();

}

char *sub_24161F6BC(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int (*v85)(char *, uint64_t, uint64_t);
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  void *v101;
  id v102;
  char *v104;
  void *v105;
  void *v106;
  uint64_t v107;
  char *__dst;
  int *v109;
  int *v110;
  void (*v111)(char *, char *, uint64_t);
  char *v113;
  char *v114;

  v5 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v5;
  v109 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v6 = v109[5];
  v113 = a2;
  v114 = a1;
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  *(_QWORD *)v7 = *(_QWORD *)&a2[v6];
  *((_QWORD *)v7 + 1) = v9;
  v11 = *(_QWORD *)&a2[v6 + 16];
  v10 = *(_QWORD *)&a2[v6 + 24];
  *((_QWORD *)v7 + 2) = v11;
  *((_QWORD *)v7 + 3) = v10;
  v12 = *((_QWORD *)v8 + 5);
  *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
  *((_QWORD *)v7 + 5) = v12;
  v13 = *((_QWORD *)v8 + 7);
  *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
  *((_QWORD *)v7 + 7) = v13;
  v14 = *((_QWORD *)v8 + 9);
  *((_QWORD *)v7 + 8) = *((_QWORD *)v8 + 8);
  *((_QWORD *)v7 + 9) = v14;
  v15 = *((_QWORD *)v8 + 11);
  *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
  *((_QWORD *)v7 + 11) = v15;
  v105 = (void *)*((_QWORD *)v8 + 12);
  v106 = (void *)*((_QWORD *)v8 + 13);
  *((_QWORD *)v7 + 12) = v105;
  *((_QWORD *)v7 + 13) = v106;
  v110 = (int *)type metadata accessor for MedicalIDData();
  v16 = v110[13];
  __dst = &v7[v16];
  v104 = &v8[v16];
  v17 = sub_2416B9B50();
  v107 = *(_QWORD *)(v17 - 8);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = v105;
  v20 = v106;
  if (v18(v104, 1, v17))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v104, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    v22 = v107;
  }
  else
  {
    v22 = v107;
    (*(void (**)(char *, char *, uint64_t))(v107 + 16))(__dst, v104, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(__dst, 0, 1, v17);
  }
  v23 = v110[14];
  v24 = &v7[v23];
  v25 = &v8[v23];
  v26 = v18;
  if (v18(&v8[v23], 1, v17))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v25, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v17);
  }
  v28 = v110[15];
  v29 = &v7[v28];
  v30 = &v8[v28];
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = v31;
  v32 = v110[16];
  v33 = &v7[v32];
  v34 = &v8[v32];
  v35 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = v35;
  v7[v110[17]] = v8[v110[17]];
  v7[v110[18]] = v8[v110[18]];
  v36 = v110[19];
  v37 = &v7[v36];
  v38 = (uint64_t *)&v8[v36];
  v39 = *(_QWORD *)&v8[v36 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v39 >> 60 == 15)
  {
    *(_OWORD *)v37 = *(_OWORD *)v38;
  }
  else
  {
    v40 = *v38;
    sub_2415A0A90(*v38, v39);
    *(_QWORD *)v37 = v40;
    *((_QWORD *)v37 + 1) = v39;
  }
  v41 = v26;
  v42 = v110[20];
  v43 = &v7[v42];
  v44 = &v8[v42];
  v45 = sub_2416B9A18();
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  v48 = v110[21];
  v49 = *(void **)&v8[v48];
  *(_QWORD *)&v7[v48] = v49;
  v50 = v110[22];
  v51 = &v7[v50];
  v52 = &v8[v50];
  v53 = v49;
  if (v41(v52, 1, v17))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v51, v52, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v51, 0, 1, v17);
  }
  v55 = v109[6];
  v56 = &v114[v55];
  v57 = &v113[v55];
  v58 = sub_2416B9C10();
  v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
  v59(v56, v57, v58);
  v60 = v109[7];
  v61 = &v114[v60];
  v62 = &v113[v60];
  v59(&v114[v60], &v113[v60], v58);
  v63 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v64 = *(void **)&v62[v63];
  *(_QWORD *)&v61[v63] = v64;
  v65 = v109[8];
  v66 = &v114[v65];
  v67 = &v113[v65];
  v68 = v64;
  v111 = v59;
  v59(v66, v67, v58);
  v69 = type metadata accessor for MedicalIDWeightFormatter();
  v70 = *(int *)(v69 + 20);
  v71 = *(void **)&v67[v70];
  *(_QWORD *)&v66[v70] = v71;
  v72 = *(int *)(v69 + 24);
  v73 = *(void **)&v67[v72];
  *(_QWORD *)&v66[v72] = v73;
  v74 = a3[5];
  v75 = &v114[v74];
  v76 = &v113[v74];
  v77 = *(_QWORD *)&v113[v74 + 8];
  *(_QWORD *)v75 = *(_QWORD *)&v113[v74];
  *((_QWORD *)v75 + 1) = v77;
  sub_24159D6B0(0, &qword_25713CE98, (uint64_t (*)(uint64_t))sub_24161F2E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v79 = *(int *)(v78 + 32);
  v80 = &v75[v79];
  v81 = &v76[v79];
  sub_24161F2FC();
  v83 = v82;
  v84 = *(_QWORD *)(v82 - 8);
  v85 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
  v86 = v71;
  v87 = v73;
  swift_retain();
  swift_retain();
  if (v85(v81, 1, v83))
  {
    sub_24161F2E0(0);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v80, v81, v83);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v80, 0, 1, v83);
  }
  v89 = a3[7];
  *(_QWORD *)&v114[a3[6]] = *(_QWORD *)&v113[a3[6]];
  *(_QWORD *)&v114[v89] = *(_QWORD *)&v113[v89];
  v90 = a3[8];
  v91 = a3[9];
  v92 = &v114[v90];
  v93 = &v113[v90];
  v94 = *((_QWORD *)v93 + 1);
  *(_QWORD *)v92 = *(_QWORD *)v93;
  *((_QWORD *)v92 + 1) = v94;
  *((_QWORD *)v92 + 2) = *((_QWORD *)v93 + 2);
  v95 = &v114[v91];
  v96 = &v113[v91];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v111(v95, v96, v58);
  }
  else
  {
    *(_QWORD *)v95 = *(_QWORD *)v96;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v97 = a3[10];
  v98 = &v114[v97];
  v99 = &v113[v97];
  v101 = *(void **)v99;
  v100 = *((_QWORD *)v99 + 1);
  *(_QWORD *)v98 = v101;
  *((_QWORD *)v98 + 1) = v100;
  v102 = v101;
  return v114;
}

char *sub_24161FD20(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  id v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  id v83;
  uint64_t v84;
  void *v85;
  void *v86;
  id v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  void *v111;
  void *v112;
  id v113;
  uint64_t (*v115)(char *, uint64_t, uint64_t);
  uint64_t v116;
  int *v117;
  char *v118;
  char *v119;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v117 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v5 = v117[5];
  v119 = a1;
  v6 = &a1[v5];
  v7 = &a2[v5];
  *(_QWORD *)v6 = *(_QWORD *)&a2[v5];
  *((_QWORD *)v6 + 1) = *(_QWORD *)&a2[v5 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 2) = *((_QWORD *)v7 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 3) = *((_QWORD *)v7 + 3);
  *((_QWORD *)v6 + 4) = *((_QWORD *)v7 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 5) = *((_QWORD *)v7 + 5);
  *((_QWORD *)v6 + 6) = *((_QWORD *)v7 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 7) = *((_QWORD *)v7 + 7);
  *((_QWORD *)v6 + 8) = *((_QWORD *)v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 9) = *((_QWORD *)v7 + 9);
  *((_QWORD *)v6 + 10) = *((_QWORD *)v7 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 11) = *((_QWORD *)v7 + 11);
  v8 = (void *)*((_QWORD *)v6 + 12);
  v9 = (void *)*((_QWORD *)v7 + 12);
  *((_QWORD *)v6 + 12) = v9;
  v10 = v9;

  v11 = (void *)*((_QWORD *)v6 + 13);
  v12 = (void *)*((_QWORD *)v7 + 13);
  *((_QWORD *)v6 + 13) = v12;
  v13 = v12;

  v14 = (int *)type metadata accessor for MedicalIDData();
  v15 = v14[13];
  v16 = &v6[v15];
  v17 = &v7[v15];
  v18 = sub_2416B9B50();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  v24 = v14[14];
  v25 = &v6[v24];
  v26 = &v7[v24];
  v27 = v20(&v6[v24], 1, v18);
  v28 = v20(v26, 1, v18);
  v115 = v20;
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v25, v26, v18);
LABEL_13:
  v30 = v14[15];
  v31 = &v6[v30];
  v32 = &v7[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = v14[16];
  v34 = &v6[v33];
  v35 = &v7[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6[v14[17]] = v7[v14[17]];
  v6[v14[18]] = v7[v14[18]];
  v36 = v14[19];
  v37 = (uint64_t *)&v6[v36];
  v38 = (uint64_t *)&v7[v36];
  v39 = *(_QWORD *)&v7[v36 + 8];
  v118 = a2;
  v116 = v19;
  if (*(_QWORD *)&v6[v36 + 8] >> 60 == 15)
  {
    if (v39 >> 60 != 15)
    {
      v40 = *v38;
      sub_2415A0A90(*v38, v39);
      *v37 = v40;
      v37[1] = v39;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v39 >> 60 == 15)
  {
    sub_2415A1B38((uint64_t)v37);
LABEL_18:
    *(_OWORD *)v37 = *(_OWORD *)v38;
    goto LABEL_20;
  }
  v41 = *v38;
  sub_2415A0A90(*v38, v39);
  v42 = *v37;
  v43 = v37[1];
  *v37 = v41;
  v37[1] = v39;
  sub_2415A0DAC(v42, v43);
LABEL_20:
  v44 = v14[20];
  v45 = &v6[v44];
  v46 = &v7[v44];
  v47 = sub_2416B9A18();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v47);
LABEL_25:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 24))(v45, v46, v47);
LABEL_26:
  v53 = v14[21];
  v54 = *(void **)&v6[v53];
  v55 = *(void **)&v7[v53];
  *(_QWORD *)&v6[v53] = v55;
  v56 = v55;

  v57 = v14[22];
  v58 = &v6[v57];
  v59 = &v7[v57];
  v60 = v115(&v6[v57], 1, v18);
  v61 = v115(v59, 1, v18);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v116 + 16))(v58, v59, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v58, 0, 1, v18);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v58, v18);
LABEL_31:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v116 + 24))(v58, v59, v18);
LABEL_32:
  v63 = v117[6];
  v64 = &v119[v63];
  v65 = &v118[v63];
  v66 = sub_2416B9C10();
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(void (**)(char *, char *, uint64_t))(v67 + 24);
  v68(v64, v65, v66);
  v69 = v117[7];
  v70 = &v119[v69];
  v71 = &v118[v69];
  v68(&v119[v69], &v118[v69], v66);
  v72 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v73 = *(void **)&v71[v72];
  v74 = *(void **)&v70[v72];
  *(_QWORD *)&v70[v72] = v73;
  v75 = v73;

  v76 = v117[8];
  v77 = &v119[v76];
  v78 = &v118[v76];
  v68(&v119[v76], &v118[v76], v66);
  v79 = type metadata accessor for MedicalIDWeightFormatter();
  v80 = *(int *)(v79 + 20);
  v81 = *(void **)&v78[v80];
  v82 = *(void **)&v77[v80];
  *(_QWORD *)&v77[v80] = v81;
  v83 = v81;

  v84 = *(int *)(v79 + 24);
  v85 = *(void **)&v78[v84];
  v86 = *(void **)&v77[v84];
  *(_QWORD *)&v77[v84] = v85;
  v87 = v85;

  v88 = a3[5];
  v89 = &v119[v88];
  v90 = &v118[v88];
  *(_QWORD *)&v119[v88] = *(_QWORD *)&v118[v88];
  swift_retain();
  swift_release();
  *((_QWORD *)v89 + 1) = *((_QWORD *)v90 + 1);
  swift_retain();
  swift_release();
  sub_24159D6B0(0, &qword_25713CE98, (uint64_t (*)(uint64_t))sub_24161F2E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v92 = *(int *)(v91 + 32);
  v93 = &v89[v92];
  v94 = &v90[v92];
  sub_24161F2FC();
  v96 = v95;
  v97 = *(_QWORD *)(v95 - 8);
  v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
  v99 = v98(v93, 1, v95);
  v100 = v98(v94, 1, v96);
  if (v99)
  {
    if (!v100)
    {
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v93, v94, v96);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v93, 0, 1, v96);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v100)
  {
    (*(void (**)(char *, uint64_t))(v97 + 8))(v93, v96);
LABEL_37:
    sub_24161F2E0(0);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v97 + 24))(v93, v94, v96);
LABEL_38:
  *(_QWORD *)&v119[a3[6]] = *(_QWORD *)&v118[a3[6]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v119[a3[7]] = *(_QWORD *)&v118[a3[7]];
  v102 = a3[8];
  v103 = &v119[v102];
  v104 = &v118[v102];
  *(_QWORD *)v103 = *(_QWORD *)&v118[v102];
  *((_QWORD *)v103 + 1) = *(_QWORD *)&v118[v102 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v103 + 2) = *((_QWORD *)v104 + 2);
  swift_retain();
  swift_release();
  if (v119 != v118)
  {
    v105 = a3[9];
    v106 = &v119[v105];
    v107 = &v118[v105];
    sub_24162061C((uint64_t)&v119[v105]);
    sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v106, v107, v66);
    }
    else
    {
      *(_QWORD *)v106 = *(_QWORD *)v107;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v108 = a3[10];
  v109 = &v119[v108];
  v110 = &v118[v108];
  v111 = *(void **)&v119[v108];
  v112 = *(void **)&v118[v108];
  *(_QWORD *)v109 = v112;
  v113 = v112;

  *((_QWORD *)v109 + 1) = *((_QWORD *)v110 + 1);
  return v119;
}

uint64_t sub_24162061C(uint64_t a1)
{
  uint64_t v2;

  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_241620670(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  int *v67;
  int *v68;
  unsigned int (*v69)(char *, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v67 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v6 = v67[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  *(_OWORD *)v7 = *(_OWORD *)&a2[v6];
  *((_QWORD *)v7 + 2) = *(_QWORD *)&a2[v6 + 16];
  *(_OWORD *)(v7 + 24) = *(_OWORD *)&a2[v6 + 24];
  *(_OWORD *)(v7 + 40) = *(_OWORD *)&a2[v6 + 40];
  *(_OWORD *)(v7 + 56) = *(_OWORD *)&a2[v6 + 56];
  *(_OWORD *)(v7 + 72) = *(_OWORD *)&a2[v6 + 72];
  *((_QWORD *)v7 + 11) = *(_QWORD *)&a2[v6 + 88];
  *((_OWORD *)v7 + 6) = *(_OWORD *)&a2[v6 + 96];
  v9 = (int *)type metadata accessor for MedicalIDData();
  v10 = v9[13];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_2416B9B50();
  v14 = *(_QWORD *)(v13 - 8);
  v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v69(v12, 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = v9[14];
  v17 = &v7[v16];
  v18 = &v8[v16];
  v68 = a3;
  v66 = v14;
  if (v69(&v8[v16], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v18, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
  }
  *(_OWORD *)&v7[v9[15]] = *(_OWORD *)&v8[v9[15]];
  *(_OWORD *)&v7[v9[16]] = *(_OWORD *)&v8[v9[16]];
  v7[v9[17]] = v8[v9[17]];
  v7[v9[18]] = v8[v9[18]];
  *(_OWORD *)&v7[v9[19]] = *(_OWORD *)&v8[v9[19]];
  v20 = v9[20];
  v21 = &v7[v20];
  v22 = &v8[v20];
  v23 = sub_2416B9A18();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(_QWORD *)&v7[v9[21]] = *(_QWORD *)&v8[v9[21]];
  v26 = v9[22];
  v27 = &v7[v26];
  v28 = &v8[v26];
  if (v69(&v8[v26], 1, v13))
  {
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v27, v28, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v27, 0, 1, v13);
  }
  v30 = v67[6];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = sub_2416B9C10();
  v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
  v34(v31, v32, v33);
  v35 = v67[7];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v34(&a1[v35], &a2[v35], v33);
  v38 = type metadata accessor for MedicalIDHeightFormatter();
  *(_QWORD *)&v36[*(int *)(v38 + 20)] = *(_QWORD *)&v37[*(int *)(v38 + 20)];
  v39 = v67[8];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v34(&a1[v39], &a2[v39], v33);
  v42 = type metadata accessor for MedicalIDWeightFormatter();
  *(_QWORD *)&v40[*(int *)(v42 + 20)] = *(_QWORD *)&v41[*(int *)(v42 + 20)];
  *(_QWORD *)&v40[*(int *)(v42 + 24)] = *(_QWORD *)&v41[*(int *)(v42 + 24)];
  v43 = v68[5];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v46 = *(_QWORD *)&a2[v43 + 8];
  *(_QWORD *)v44 = *(_QWORD *)&a2[v43];
  *((_QWORD *)v44 + 1) = v46;
  sub_24159D6B0(0, &qword_25713CE98, (uint64_t (*)(uint64_t))sub_24161F2E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v48 = *(int *)(v47 + 32);
  v49 = &v44[v48];
  v50 = &v45[v48];
  sub_24161F2FC();
  v52 = v51;
  v53 = *(_QWORD *)(v51 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v50, 1, v51))
  {
    sub_24161F2E0(0);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v49, v50, v52);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v49, 0, 1, v52);
  }
  v55 = v68[7];
  *(_QWORD *)&a1[v68[6]] = *(_QWORD *)&a2[v68[6]];
  *(_QWORD *)&a1[v55] = *(_QWORD *)&a2[v55];
  v56 = v68[8];
  v57 = v68[9];
  v58 = &a1[v56];
  v59 = &a2[v56];
  v60 = *(_OWORD *)v59;
  *((_QWORD *)v58 + 2) = *((_QWORD *)v59 + 2);
  *(_OWORD *)v58 = v60;
  v61 = &a1[v57];
  v62 = &a2[v57];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v64 = v63;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v34(v61, v62, v33);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
  }
  *(_OWORD *)&a1[v68[10]] = *(_OWORD *)&a2[v68[10]];
  return a1;
}

char *sub_241620BCC(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(char *, uint64_t, uint64_t);
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  void *v112;
  uint64_t (*v114)(char *, uint64_t, uint64_t);
  uint64_t v115;
  int *v116;
  char *v117;
  char *v118;

  v5 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  v116 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v6 = v116[5];
  v118 = a1;
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  *(_QWORD *)v7 = *(_QWORD *)&a2[v6];
  *((_QWORD *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
  swift_bridgeObjectRelease();
  v10 = *((_QWORD *)v8 + 4);
  *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
  *((_QWORD *)v7 + 4) = v10;
  swift_bridgeObjectRelease();
  v11 = *((_QWORD *)v8 + 6);
  *((_QWORD *)v7 + 5) = *((_QWORD *)v8 + 5);
  *((_QWORD *)v7 + 6) = v11;
  swift_bridgeObjectRelease();
  v12 = *((_QWORD *)v8 + 8);
  *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
  *((_QWORD *)v7 + 8) = v12;
  swift_bridgeObjectRelease();
  v13 = *((_QWORD *)v8 + 10);
  *((_QWORD *)v7 + 9) = *((_QWORD *)v8 + 9);
  *((_QWORD *)v7 + 10) = v13;
  swift_bridgeObjectRelease();
  v14 = (void *)*((_QWORD *)v7 + 12);
  v15 = *((_QWORD *)v8 + 12);
  *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
  *((_QWORD *)v7 + 12) = v15;

  v16 = (void *)*((_QWORD *)v7 + 13);
  *((_QWORD *)v7 + 13) = *((_QWORD *)v8 + 13);

  v17 = (int *)type metadata accessor for MedicalIDData();
  v18 = v17[13];
  v19 = &v7[v18];
  v20 = &v8[v18];
  v21 = sub_2416B9B50();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  v27 = v17[14];
  v28 = &v7[v27];
  v29 = &v8[v27];
  v30 = v23(&v7[v27], 1, v21);
  v31 = v23(v29, 1, v21);
  v114 = v23;
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v28, v29, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v28, v21);
LABEL_12:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v28, v29, v21);
LABEL_13:
  v33 = v17[15];
  v34 = &v7[v33];
  v35 = (uint64_t *)&v8[v33];
  v37 = *v35;
  v36 = v35[1];
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v38 = v17[16];
  v39 = &v7[v38];
  v40 = (uint64_t *)&v8[v38];
  v42 = *v40;
  v41 = v40[1];
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v7[v17[17]] = v8[v17[17]];
  v7[v17[18]] = v8[v17[18]];
  v43 = v17[19];
  v44 = (uint64_t)&v7[v43];
  v45 = &v8[v43];
  v46 = *(_QWORD *)&v7[v43 + 8];
  v117 = a2;
  v115 = v22;
  if (v46 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v44 = *(_OWORD *)v45;
    goto LABEL_18;
  }
  v47 = *((_QWORD *)v45 + 1);
  if (v47 >> 60 == 15)
  {
    sub_2415A1B38(v44);
    goto LABEL_16;
  }
  v48 = *(_QWORD *)v44;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_QWORD *)(v44 + 8) = v47;
  sub_2415A0DAC(v48, v46);
LABEL_18:
  v49 = v17[20];
  v50 = &v7[v49];
  v51 = &v8[v49];
  v52 = sub_2416B9A18();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v50, 1, v52);
  v56 = v54(v51, 1, v52);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v50, v51, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
LABEL_23:
    sub_24159D6B0(0, &qword_257139BD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v50, v51, v52);
LABEL_24:
  v58 = v17[21];
  v59 = *(void **)&v7[v58];
  *(_QWORD *)&v7[v58] = *(_QWORD *)&v8[v58];

  v60 = v17[22];
  v61 = &v7[v60];
  v62 = &v8[v60];
  v63 = v114(&v7[v60], 1, v21);
  v64 = v114(v62, 1, v21);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v61, v62, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v61, 0, 1, v21);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v115 + 8))(v61, v21);
LABEL_29:
    sub_24159D6B0(0, &qword_257139BD0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE908], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v115 + 40))(v61, v62, v21);
LABEL_30:
  v66 = v116[6];
  v67 = &v118[v66];
  v68 = &v117[v66];
  v69 = sub_2416B9C10();
  v70 = *(_QWORD *)(v69 - 8);
  v71 = *(void (**)(char *, char *, uint64_t))(v70 + 40);
  v71(v67, v68, v69);
  v72 = v116[7];
  v73 = &v118[v72];
  v74 = &v117[v72];
  v71(&v118[v72], &v117[v72], v69);
  v75 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v76 = *(void **)&v73[v75];
  *(_QWORD *)&v73[v75] = *(_QWORD *)&v74[v75];

  v77 = v116[8];
  v78 = &v118[v77];
  v79 = &v117[v77];
  v71(&v118[v77], &v117[v77], v69);
  v80 = type metadata accessor for MedicalIDWeightFormatter();
  v81 = *(int *)(v80 + 20);
  v82 = *(void **)&v78[v81];
  *(_QWORD *)&v78[v81] = *(_QWORD *)&v79[v81];

  v83 = *(int *)(v80 + 24);
  v84 = *(void **)&v78[v83];
  *(_QWORD *)&v78[v83] = *(_QWORD *)&v79[v83];

  v85 = a3[5];
  v86 = &v118[v85];
  v87 = &v117[v85];
  *(_QWORD *)&v118[v85] = *(_QWORD *)&v117[v85];
  swift_release();
  *((_QWORD *)v86 + 1) = *((_QWORD *)v87 + 1);
  swift_release();
  sub_24159D6B0(0, &qword_25713CE98, (uint64_t (*)(uint64_t))sub_24161F2E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v89 = *(int *)(v88 + 32);
  v90 = &v86[v89];
  v91 = &v87[v89];
  sub_24161F2FC();
  v93 = v92;
  v94 = *(_QWORD *)(v92 - 8);
  v95 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v94 + 48);
  v96 = v95(v90, 1, v92);
  v97 = v95(v91, 1, v93);
  if (v96)
  {
    if (!v97)
    {
      (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v90, v91, v93);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v90, 0, 1, v93);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v97)
  {
    (*(void (**)(char *, uint64_t))(v94 + 8))(v90, v93);
LABEL_35:
    sub_24161F2E0(0);
    memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v94 + 40))(v90, v91, v93);
LABEL_36:
  *(_QWORD *)&v118[a3[6]] = *(_QWORD *)&v117[a3[6]];
  swift_release();
  v99 = a3[8];
  *(_QWORD *)&v118[a3[7]] = *(_QWORD *)&v117[a3[7]];
  v100 = &v118[v99];
  v101 = &v117[v99];
  v102 = *(_QWORD *)&v117[v99];
  v103 = *(_QWORD *)&v117[v99 + 8];
  *(_QWORD *)v100 = v102;
  *((_QWORD *)v100 + 1) = v103;
  swift_bridgeObjectRelease();
  *((_QWORD *)v100 + 2) = *((_QWORD *)v101 + 2);
  swift_release();
  if (v118 != v117)
  {
    v104 = a3[9];
    v105 = &v118[v104];
    v106 = &v117[v104];
    sub_24162061C((uint64_t)&v118[v104]);
    sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v108 = v107;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v105, v106, v69);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    }
  }
  v109 = a3[10];
  v110 = &v118[v109];
  v111 = &v117[v109];
  v112 = *(void **)&v118[v109];
  *(_QWORD *)v110 = *(_QWORD *)v111;

  *((_QWORD *)v110 + 1) = *((_QWORD *)v111 + 1);
  return v118;
}

uint64_t sub_2416213BC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2416213C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v6 = type metadata accessor for MedicalIDBiometricsViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  sub_24159D6B0(0, &qword_25713CE98, (uint64_t (*)(uint64_t))sub_24161F2E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
    v8 = v16;
    v12 = *(_QWORD *)(v16 - 8);
    v13 = a3[9];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[6]);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_2416214C4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_2416214D0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for MedicalIDBiometricsViewModel();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_24159D6B0(0, &qword_25713CE98, (uint64_t (*)(uint64_t))sub_24161F2E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
        return;
      }
      sub_24159D6B0(0, &qword_25713A1E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], MEMORY[0x24BDEB580]);
      v10 = v16;
      v14 = *(_QWORD *)(v16 - 8);
      v15 = a4[9];
    }
    v12 = a1 + v15;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for EditWeightCellView()
{
  uint64_t result;

  result = qword_25713CF00;
  if (!qword_25713CF00)
    return swift_getSingletonMetadata();
  return result;
}

void sub_241621604()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for MedicalIDBiometricsViewModel();
  if (v0 <= 0x3F)
  {
    sub_24159D6B0(319, &qword_25713CE98, (uint64_t (*)(uint64_t))sub_24161F2E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
    if (v1 <= 0x3F)
    {
      sub_24159D6B0(319, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t sub_241621700()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_241621710@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  char *v43;
  uint64_t OpaqueTypeConformance2;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;

  v98 = a1;
  v97 = sub_2416BA120();
  v2 = *(_QWORD *)(v97 - 8);
  MEMORY[0x24BDAC7A8](v97);
  v4 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for EditWeightCellView();
  v99 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v100 = v5;
  v91 = (uint64_t)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241622810(0);
  v83 = v6;
  v81 = *(uint64_t **)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v80 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416228C4(0);
  v86 = v8;
  v84 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v101 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241622958(0);
  v93 = *(_QWORD *)(v10 - 8);
  v94 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v92 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241622A94(0);
  v89 = *(_QWORD *)(v12 - 8);
  v90 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v88 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_241622BAC(0);
  v87 = v14;
  v85 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v102 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2571394B0 != -1)
    swift_once();
  v16 = *(_QWORD *)algn_257147778;
  v77 = qword_257147770;
  sub_24160E998(0, (unint64_t *)&qword_25713EB50, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE3598]);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_2416BCC80;
  v18 = v1[1];
  v19 = v1;
  *(_QWORD *)(v17 + 32) = *v1;
  *(_QWORD *)(v17 + 40) = v18;
  v20 = 0xE600000000000000;
  *(_QWORD *)(v17 + 48) = 0x746867696557;
  *(_QWORD *)(v17 + 56) = 0xE600000000000000;
  v78 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = (void *)sub_2416BB1E8();
  swift_bridgeObjectRelease();
  v22 = (id)HKUIJoinStringsForAutomationIdentifier();

  v95 = v4;
  v96 = v2;
  if (v22)
  {
    v23 = sub_2416BB128();
    v20 = v24;

    v25 = (int *)v82;
  }
  else
  {
    v25 = (int *)v82;
    v23 = 0x746867696557;
  }
  v76 = v23;
  v26 = (uint64_t)v19;
  v27 = (uint64_t)v19 + v25[8];
  v28 = *(_OWORD *)v27;
  v82 = v27;
  v29 = *(_QWORD *)(v27 + 16);
  v103 = v28;
  *(_QWORD *)&v104 = v29;
  sub_24160E998(0, &qword_25713CF88, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BDF42C0]);
  v79 = v30;
  sub_2416BAD2C();
  v74 = *((_QWORD *)&v111 + 1);
  v75 = v111;
  v72 = *((_QWORD *)&v112 + 1);
  v73 = v112;
  type metadata accessor for MedicalIDBiometricsViewModel();
  sub_2416389E4(1);
  v32 = v31;
  v33 = sub_241638B50();
  v34 = objc_msgSend(v32, sel_stringFromUnit_, v33);

  v35 = sub_2416BB128();
  v37 = v36;

  v38 = *(void **)(v26 + v25[10]);
  if (v38)
  {
    v39 = v26;
    v40 = *(_QWORD *)(v26 + v25[6]);
    v41 = v38;
    sub_24167C888(v41, v40);

    sub_241619D28(v77, v78, v76, v20, v75, v74, v73, v72, (uint64_t)&v111, v35, v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v107 = v115;
    v108 = v116;
    v109 = v117;
    v110 = v118;
    v103 = v111;
    v104 = v112;
    v105 = v113;
    v106 = v114;
    v42 = sub_241622880();
    v43 = v80;
    MEMORY[0x242698304](1, &type metadata for ClearableAddableTextField, v42);
    sub_241622CCC((uint64_t)&v111);
    *(_QWORD *)&v103 = &type metadata for ClearableAddableTextField;
    *((_QWORD *)&v103 + 1) = v42;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v45 = v83;
    sub_2416BAA74();
    ((void (*)(char *, uint64_t))v81[1])(v43, v45);
    v46 = sub_2416B9C10();
    v81 = &v71;
    v78 = *(_QWORD *)(v46 - 8);
    MEMORY[0x24BDAC7A8](v46);
    v48 = (char *)&v71 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
    v71 = v39;
    sub_2415C12E0((uint64_t)v48);
    v49 = v91;
    sub_2415BEF64(v39, v91, (uint64_t (*)(_QWORD))type metadata accessor for EditWeightCellView);
    v50 = *(unsigned __int8 *)(v99 + 80);
    v51 = (v50 + 16) & ~v50;
    v80 = (char *)v51;
    v99 = v50 | 7;
    v100 += v51;
    v52 = swift_allocObject();
    sub_241622D70(v49, v52 + v51);
    *(_QWORD *)&v103 = v45;
    *((_QWORD *)&v103 + 1) = OpaqueTypeConformance2;
    v53 = swift_getOpaqueTypeConformance2();
    v54 = sub_241622C84();
    v55 = v101;
    v56 = v86;
    sub_2416BABE8();
    swift_release();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v48, v46);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v55, v56);
    v57 = *(_QWORD *)(v82 + 16);
    v103 = *(_OWORD *)v82;
    *(_QWORD *)&v104 = v57;
    sub_2416BAD14();
    v58 = v71;
    sub_2415BEF64(v71, v49, (uint64_t (*)(_QWORD))type metadata accessor for EditWeightCellView);
    v59 = swift_allocObject();
    v60 = v80;
    sub_241622D70(v49, (uint64_t)&v80[v59]);
    *(_QWORD *)&v103 = v56;
    *((_QWORD *)&v103 + 1) = v46;
    *(_QWORD *)&v104 = v53;
    *((_QWORD *)&v104 + 1) = v54;
    v61 = swift_getOpaqueTypeConformance2();
    v62 = v87;
    v63 = v88;
    v64 = MEMORY[0x24BEE0D00];
    v65 = v102;
    sub_2416BABE8();
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v85 + 8))(v65, v62);
    sub_2415BEF64(v58, v49, (uint64_t (*)(_QWORD))type metadata accessor for EditWeightCellView);
    v66 = swift_allocObject();
    sub_241622D70(v49, (uint64_t)&v60[v66]);
    v67 = v95;
    sub_2416BA114();
    *(_QWORD *)&v103 = v62;
    *((_QWORD *)&v103 + 1) = v64;
    *(_QWORD *)&v104 = v61;
    *((_QWORD *)&v104 + 1) = MEMORY[0x24BEE0D28];
    swift_getOpaqueTypeConformance2();
    v68 = v92;
    v69 = v90;
    sub_2416BABF4();
    swift_release();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v67, v97);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v63, v69);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v93 + 32))(v98, v68, v94);
  }
  else
  {
    sub_2415C0788(0, (unint64_t *)&qword_25713A430);
    sub_2415BEF08();
    result = sub_2416BA264();
    __break(1u);
  }
  return result;
}

uint64_t sub_241621F3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;

  sub_24161F2E0(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for EditWeightCellView();
  sub_24159D6B0(0, &qword_25713CE98, (uint64_t (*)(uint64_t))sub_24161F2E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  MEMORY[0x242698604]();
  v6 = MedicalIDBiometricsViewModel.formattedWeightText(for:)((uint64_t)v4);
  v8 = v7;
  sub_2416231D0((uint64_t)v4);
  v9 = (__int128 *)(a1 + *(int *)(v5 + 32));
  v10 = *v9;
  v11 = *((_QWORD *)v9 + 2);
  v14 = v10;
  v15 = v11;
  v13[1] = v6;
  v13[2] = v8;
  sub_24160E998(0, &qword_25713CF88, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BDF42C0]);
  return sub_2416BAD20();
}

uint64_t sub_241622044(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];

  v2 = type metadata accessor for EditWeightCellView();
  v3 = (uint64_t *)(a1 + *(int *)(v2 + 32));
  v4 = v3[1];
  v5 = v3[2];
  v37 = *v3;
  v38 = v4;
  v39 = v5;
  sub_24160E998(0, &qword_25713CF88, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v35 = v2;
  v6 = sub_241623224(*(_QWORD *)(a1 + *(int *)(v2 + 28)));
  v8 = v7;
  v10 = v9;
  v12 = v11;
  swift_bridgeObjectRelease();
  v13 = MEMORY[0x24269894C](v6, v8, v10, v12);
  v15 = v14;
  swift_bridgeObjectRelease();
  v40[0] = v13;
  v40[1] = v15;
  sub_2416BAD20();
  v38 = v4;
  v39 = v5;
  sub_2416BAD14();
  sub_24161F2E0(0);
  v17 = *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64);
  MEMORY[0x24BDAC7A8](v16);
  v18 = type metadata accessor for MedicalIDBiometricsViewModel();
  v19 = HIBYTE(v15) & 0xF;
  v20 = v13 & 0xFFFFFFFFFFFFLL;
  if ((v15 & 0x2000000000000000) == 0)
    v19 = v13 & 0xFFFFFFFFFFFFLL;
  if (!v19)
    goto LABEL_15;
  v40[0] = 0;
  v21 = MEMORY[0x24BDAC7A8](v18);
  *(&v33 - 2) = (uint64_t)v40;
  if ((v15 & 0x1000000000000000) != 0 || !(v15 & 0x2000000000000000 | v13 & 0x1000000000000000))
  {
    v34 = v22;
    swift_bridgeObjectRetain();
    sub_2416BB4DC();
    swift_bridgeObjectRelease();
    if ((v36 & 1) == 0)
      goto LABEL_15;
  }
  else
  {
    MEMORY[0x24BDAC7A8](v21);
    *(&v33 - 2) = (uint64_t)sub_2416233D0;
    *(&v33 - 1) = (uint64_t)(&v33 - 4);
    if ((v15 & 0x2000000000000000) == 0)
    {
      v34 = v23;
      if ((v13 & 0x1000000000000000) != 0)
      {
        v24 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else
      {
        v24 = sub_2416BB518();
        v20 = v32;
      }
      swift_bridgeObjectRetain();
      v25 = sub_24167E2B8(v24, v20, (void (*)(uint64_t *__return_ptr))sub_2416233BC);
      swift_bridgeObjectRelease();
      if ((v25 & 1) != 0)
        goto LABEL_10;
LABEL_15:
      sub_24161F2FC();
      v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))((char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v28);
      goto LABEL_16;
    }
    v37 = v13;
    v38 = v15 & 0xFFFFFFFFFFFFFFLL;
    if (v13 <= 0x20u && ((1 << v13) & 0x100003E01) != 0)
    {
      swift_bridgeObjectRetain();
LABEL_14:
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    v34 = v23;
    swift_bridgeObjectRetain();
    v30 = (unsigned __int8 *)_swift_stdlib_strtod_clocale();
    if (!v30)
      goto LABEL_14;
    v31 = *v30;
    swift_bridgeObjectRelease();
    if (v31)
      goto LABEL_15;
  }
LABEL_10:
  sub_241638B50();
  sub_2415C0788(0, &qword_25713BEE8);
  sub_2416B98E0();
  sub_24161F2FC();
  v27 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))((char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v26);
LABEL_16:
  MEMORY[0x24BDAC7A8](v27);
  sub_2415BEF64((uint64_t)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))sub_24161F2E0);
  sub_24159D6B0(0, &qword_25713CE98, (uint64_t (*)(uint64_t))sub_24161F2E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  sub_2416BAE1C();
  sub_2416231D0((uint64_t)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  return swift_bridgeObjectRelease();
}

uint64_t sub_241622468(uint64_t a1)
{
  __int128 *v1;
  __int128 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v1 = (__int128 *)(a1 + *(int *)(type metadata accessor for EditWeightCellView() + 32));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 2);
  v27 = v2;
  v28 = v3;
  sub_24160E998(0, &qword_25713CF88, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BDF42C0]);
  sub_2416BAD14();
  v5 = v29;
  v4 = v30;
  sub_24161F2E0(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  MEMORY[0x24BDAC7A8](v6);
  v8 = type metadata accessor for MedicalIDBiometricsViewModel();
  v9 = HIBYTE(v30) & 0xF;
  v10 = v29 & 0xFFFFFFFFFFFFLL;
  if ((v30 & 0x2000000000000000) == 0)
    v9 = v29 & 0xFFFFFFFFFFFFLL;
  if (!v9)
    goto LABEL_15;
  v29 = 0;
  v11 = MEMORY[0x24BDAC7A8](v8);
  *(&v23 - 2) = (uint64_t)&v29;
  if ((v4 & 0x1000000000000000) != 0 || !(v4 & 0x2000000000000000 | v5 & 0x1000000000000000))
  {
    v24 = v12;
    swift_bridgeObjectRetain();
    sub_2416BB4DC();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
      goto LABEL_15;
  }
  else
  {
    v25 = &v23;
    MEMORY[0x24BDAC7A8](v11);
    *(&v23 - 2) = (uint64_t)sub_2416231B8;
    *(&v23 - 1) = (uint64_t)(&v23 - 4);
    if ((v4 & 0x2000000000000000) == 0)
    {
      v24 = v13;
      if ((v5 & 0x1000000000000000) != 0)
      {
        v14 = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else
      {
        v14 = sub_2416BB518();
        v10 = v22;
      }
      swift_bridgeObjectRetain();
      v15 = sub_24167E2B8(v14, v10, (void (*)(uint64_t *__return_ptr))sub_24162320C);
      swift_bridgeObjectRelease();
      if ((v15 & 1) != 0)
        goto LABEL_10;
LABEL_15:
      sub_24161F2FC();
      v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v18);
      goto LABEL_16;
    }
    *(_QWORD *)&v27 = v5;
    *((_QWORD *)&v27 + 1) = v4 & 0xFFFFFFFFFFFFFFLL;
    if (v5 <= 0x20u && ((1 << v5) & 0x100003E01) != 0)
    {
      swift_bridgeObjectRetain();
LABEL_14:
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    v24 = v13;
    swift_bridgeObjectRetain();
    v20 = (unsigned __int8 *)_swift_stdlib_strtod_clocale();
    if (!v20)
      goto LABEL_14;
    v21 = *v20;
    swift_bridgeObjectRelease();
    if (v21)
      goto LABEL_15;
  }
LABEL_10:
  sub_241638B50();
  sub_2415C0788(0, &qword_25713BEE8);
  sub_2416B98E0();
  sub_24161F2FC();
  v17 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v16);
LABEL_16:
  MEMORY[0x24BDAC7A8](v17);
  sub_2415BEF64((uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))sub_24161F2E0);
  sub_24159D6B0(0, &qword_25713CE98, (uint64_t (*)(uint64_t))sub_24161F2E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  sub_2416BAE1C();
  sub_2416231D0((uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  return swift_bridgeObjectRelease();
}

void sub_241622810(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_25713CF50)
  {
    v4[0] = &type metadata for ClearableAddableTextField;
    v4[1] = sub_241622880();
    v2 = MEMORY[0x242699480](a1, v4, MEMORY[0x24BDF3038], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_25713CF50);
  }
}

unint64_t sub_241622880()
{
  unint64_t result;

  result = qword_25713CF58;
  if (!qword_25713CF58)
  {
    result = MEMORY[0x2426994BC](&unk_2416BFC3C, &type metadata for ClearableAddableTextField);
    atomic_store(result, (unint64_t *)&qword_25713CF58);
  }
  return result;
}

void sub_2416228C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  if (!qword_25713CF60)
  {
    sub_241622810(255);
    v3 = v2;
    sub_241622880();
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x242699480](a1, v6, MEMORY[0x24BDF2508], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_25713CF60);
  }
}

void sub_241622958(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_25713CF68)
  {
    sub_241622A94(255);
    v3 = v2;
    sub_241622BAC(255);
    sub_2416228C4(255);
    sub_2416B9C10();
    sub_241622810(255);
    sub_241622880();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_241622C84();
    v6[2] = swift_getOpaqueTypeConformance2();
    v6[3] = MEMORY[0x24BEE0D28];
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x242699480](a1, v6, MEMORY[0x24BDF3928], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_25713CF68);
  }
}

void sub_241622A94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_25713CF70)
  {
    sub_241622BAC(255);
    v3 = v2;
    sub_2416228C4(255);
    sub_2416B9C10();
    sub_241622810(255);
    sub_241622880();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_241622C84();
    v4 = MEMORY[0x24BDF3908];
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v8[0] = v3;
    v8[1] = MEMORY[0x24BEE0D00];
    v8[2] = OpaqueTypeConformance2;
    v8[3] = MEMORY[0x24BEE0D28];
    v6 = MEMORY[0x242699480](a1, v8, v4, 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_25713CF70);
  }
}

void sub_241622BAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_25713CF78)
  {
    sub_2416228C4(255);
    v3 = v2;
    v4 = sub_2416B9C10();
    sub_241622810(255);
    sub_241622880();
    swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = swift_getOpaqueTypeConformance2();
    v7[3] = sub_241622C84();
    v5 = MEMORY[0x242699480](a1, v7, MEMORY[0x24BDF3908], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25713CF78);
  }
}

unint64_t sub_241622C84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25713CF80;
  if (!qword_25713CF80)
  {
    v1 = sub_2416B9C10();
    result = MEMORY[0x2426994BC](MEMORY[0x24BDCEED8], v1);
    atomic_store(result, (unint64_t *)&qword_25713CF80);
  }
  return result;
}

uint64_t sub_241622CCC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_241622D70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EditWeightCellView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_241622DB4()
{
  return sub_24162317C(sub_241621F3C);
}

uint64_t sub_241622DC4()
{
  return sub_24162317C(sub_241622044);
}

uint64_t objectdestroyTm_12()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v30;

  v30 = (int *)type metadata accessor for EditWeightCellView();
  v1 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v30 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v30 - 1) + 80));
  swift_bridgeObjectRelease();
  v2 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v3 = v1 + v2[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = (int *)type metadata accessor for MedicalIDData();
  v5 = v3 + v4[13];
  v6 = sub_2416B9B50();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = v3 + v4[14];
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)(v3 + v4[19]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_2415A0DAC(*v10, v11);
  v12 = v3 + v4[20];
  v13 = sub_2416B9A18();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);

  v15 = v3 + v4[22];
  if (!v8(v15, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  v16 = v1 + v2[6];
  v17 = sub_2416B9C10();
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v18(v16, v17);
  v19 = v1 + v2[7];
  v18(v19, v17);

  v20 = v1 + v2[8];
  v18(v20, v17);
  v21 = type metadata accessor for MedicalIDWeightFormatter();

  v22 = v1 + v30[5];
  swift_release();
  swift_release();
  sub_24159D6B0(0, &qword_25713CE98, (uint64_t (*)(uint64_t))sub_24161F2E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF4870]);
  v24 = v22 + *(int *)(v23 + 32);
  sub_24161F2FC();
  v26 = v25;
  v27 = *(_QWORD *)(v25 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v24, v26);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v28 = v1 + v30[9];
  sub_24159D6B0(0, &qword_25713A1C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
    v18(v28, v17);
  else
    swift_release();

  return swift_deallocObject();
}

uint64_t sub_241623170()
{
  return sub_24162317C(sub_241622468);
}

uint64_t sub_24162317C(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EditWeightCellView() - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

_BYTE *sub_2416231B8@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_24167E250(a1, a2);
}

uint64_t sub_2416231D0(uint64_t a1)
{
  uint64_t v2;

  sub_24161F2E0(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_24162320C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_24167E30C(*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_241623224(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_2416BB170();
    return sub_2416BB1A0();
  }
  return result;
}

uint64_t sub_2416232AC()
{
  sub_241622A94(255);
  sub_241622BAC(255);
  sub_2416228C4(255);
  sub_2416B9C10();
  sub_241622810(255);
  sub_241622880();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  sub_241622C84();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

_QWORD *sub_2416233BC@<X0>(_BYTE *a1@<X8>)
{
  return sub_24162320C(a1);
}

_BYTE *sub_2416233D0@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_2416231B8(a1, a2);
}

uint64_t MedicalIDEmergencyContactProvider.__allocating_init(medicalIDStore:healthStore:contactStore:)(void *a1, void *a2, void *a3)
{
  uint64_t v6;

  swift_allocObject();
  v6 = sub_2416277A4(a2, a3);

  return v6;
}

uint64_t MedicalIDEmergencyContactProvider.init(medicalIDStore:healthStore:contactStore:)(void *a1, void *a2, void *a3)
{
  uint64_t v6;

  v6 = sub_2416277A4(a2, a3);

  return v6;
}

uint64_t sub_241623490()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = swift_allocObject();
  swift_weakInit();
  v3 = v1[5];
  v4 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v3);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  swift_retain_n();
  if ((v5(v3, v4) & 1) != 0)
  {
    v6 = v1 + 7;
    v7 = v1[10];
    v8 = v1[11];
    __swift_project_boxed_opaque_existential_1(v6, v7);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = sub_241628734;
    *(_QWORD *)(v9 + 24) = v2;
    v10 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v8 + 8);
    swift_retain();
    v10(sub_241628760, v9, v7, v8);
    swift_release();
  }
  else
  {
    sub_2416235A0(0);
  }
  swift_release();
  return swift_release_n();
}

uint64_t sub_2416235A0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = *(_QWORD *)(result + 32);
    swift_retain();
    swift_release();
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 16) = a1;
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
    return swift_release();
  }
  return result;
}

uint64_t MedicalIDEmergencyContactProvider.medicalIDEmergencyContacts(for:)(void *a1)
{
  sub_241623678(a1);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

void sub_241623678(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  _QWORD *v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _BYTE v27[128];
  _BYTE v28[128];
  _BYTE v29[128];
  _OWORD v30[8];

  v3 = objc_msgSend(a1, sel_emergencyContacts);
  if (v3)
  {
    v4 = v3;
    sub_2415C0788(0, &qword_25713D0C8);
    v5 = sub_2416BB1F4();

    swift_retain();
    v6 = sub_241627634(v5);
    swift_bridgeObjectRelease();
    swift_release();
    v7 = sub_241623B8C(1, v6);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v1 + 40) = v7;
  }
  else
  {
    swift_beginAccess();
    *(_QWORD *)(v1 + 40) = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v1 + 56) & 1) == 0)
  {
    if (objc_msgSend(a1, sel_isEmpty))
    {
      v8 = objc_msgSend(*(id *)(v1 + 48), sel_profileIdentifier);
      v9 = objc_msgSend(v8, sel_type);

      if (v9 == (id)3)
      {
        sub_241623E78((uint64_t)v28);
        sub_2416279E0((uint64_t)v28, (uint64_t)v29);
        sub_2416279E0((uint64_t)v29, (uint64_t)v30);
        if (sub_241627A3C((uint64_t)v30) != 1)
        {
          v10 = (_QWORD *)(v1 + 40);
          swift_beginAccess();
          v11 = *(_QWORD **)(v1 + 40);
          sub_2416279E0((uint64_t)v29, (uint64_t)v27);
          sub_2415DA4E0((uint64_t)v27);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v1 + 40) = v11;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v11 = sub_2415FE184(0, v11[2] + 1, 1, v11);
            *v10 = v11;
          }
          v13 = v11[2];
          v14 = v11[3];
          v15 = v13 + 1;
          if (v13 >= v14 >> 1)
          {
            v26 = v13 + 1;
            v23 = v11;
            v24 = v11[2];
            v25 = sub_2415FE184((_QWORD *)(v14 > 1), v13 + 1, 1, v23);
            v13 = v24;
            v15 = v26;
            v11 = v25;
            *v10 = v25;
          }
          v11[2] = v15;
          v16 = &v11[16 * v13];
          v17 = v30[0];
          v18 = v30[1];
          v19 = v30[3];
          v16[4] = v30[2];
          v16[5] = v19;
          v16[2] = v17;
          v16[3] = v18;
          v20 = v30[4];
          v21 = v30[5];
          v22 = v30[7];
          v16[8] = v30[6];
          v16[9] = v22;
          v16[6] = v20;
          v16[7] = v21;
          swift_endAccess();
          sub_241627A54((uint64_t)v29);
          *(_BYTE *)(v1 + 56) = 1;
        }
      }
    }
  }
}

double sub_2416238EC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  double result;
  id v19;

  if (objc_msgSend((id)objc_opt_self(), sel_authorizationStatusForEntityType_, 0) != (id)3)
    return MedicalIDEmergencyContact.init(hkEmergencyContact:contact:)(a1, 0, a2);
  v4 = sub_2416245B4(a1);
  if (!v4)
    return MedicalIDEmergencyContact.init(hkEmergencyContact:contact:)(a1, 0, a2);
  v5 = v4;
  sub_241628228(a1, v4);
  v7 = v6;
  if (v6)
  {
    sub_2416BB128();
    v8 = v5;
    v9 = (void *)sub_2416BB0F8();
    swift_bridgeObjectRelease();
    v10 = (void *)sub_2416BB0F8();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend((id)objc_opt_self(), sel_contactPropertyWithContact_propertyKey_identifier_, v8, v9, v10);

  }
  v19 = objc_msgSend((id)objc_opt_self(), sel_emergencyContactWithContact_property_, v5, v7);
  v11 = (void *)sub_24169261C();
  v12 = objc_msgSend(v19, sel_name);
  objc_msgSend(v11, sel_setName_, v12);

  v13 = objc_msgSend(v19, sel_nameContactIdentifier);
  objc_msgSend(v11, sel_setNameContactIdentifier_, v13);

  v14 = objc_msgSend(v19, sel_phoneNumberPropertyID);
  objc_msgSend(v11, sel_setPhoneNumberPropertyID_, v14);

  v15 = objc_msgSend(v19, sel_phoneNumberLabel);
  objc_msgSend(v11, sel_setPhoneNumberLabel_, v15);

  v16 = objc_msgSend(v19, sel_phoneNumber);
  objc_msgSend(v11, sel_setPhoneNumber_, v16);

  v17 = v5;
  MedicalIDEmergencyContact.init(hkEmergencyContact:contact:)(v11, v5, a2);

  return result;
}

uint64_t sub_241623B8C(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t j;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  if ((a1 & 1) != 0)
  {
    v3 = MEMORY[0x24BEE4AF8];
    v64 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2415FE538(0, 0, 0);
    v4 = v64;
    v5 = *(_QWORD *)(a2 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain();
      v6 = 0;
      for (i = 32; ; i += 128)
      {
        v8 = *(_OWORD *)(a2 + i + 80);
        v51 = *(_OWORD *)(a2 + i + 64);
        v52 = v8;
        v9 = *(_OWORD *)(a2 + i + 112);
        v53 = *(_OWORD *)(a2 + i + 96);
        v54 = v9;
        v10 = *(_OWORD *)(a2 + i + 16);
        v47 = *(_OWORD *)(a2 + i);
        v48 = v10;
        v11 = *(_OWORD *)(a2 + i + 48);
        v49 = *(_OWORD *)(a2 + i + 32);
        v50 = v11;
        sub_2415DA4E0((uint64_t)&v47);
        v64 = v4;
        v13 = *(_QWORD *)(v4 + 16);
        v12 = *(_QWORD *)(v4 + 24);
        if (v13 >= v12 >> 1)
        {
          sub_2415FE538(v12 > 1, v13 + 1, 1);
          v4 = v64;
        }
        v60 = v51;
        v61 = v52;
        v62 = v53;
        v63 = v54;
        v58 = v49;
        v59 = v50;
        v14 = v47;
        v56 = v47;
        v57 = v48;
        *(_QWORD *)(v4 + 16) = v13 + 1;
        v15 = v4 + 136 * v13;
        v17 = v62;
        v16 = v63;
        v18 = v61;
        *(_OWORD *)(v15 + 96) = v60;
        *(_OWORD *)(v15 + 112) = v18;
        *(_OWORD *)(v15 + 128) = v17;
        *(_OWORD *)(v15 + 144) = v16;
        v19 = v59;
        v20 = v57;
        *(_OWORD *)(v15 + 64) = v58;
        *(_OWORD *)(v15 + 80) = v19;
        *(_OWORD *)(v15 + 32) = v14;
        *(_OWORD *)(v15 + 48) = v20;
        *(_QWORD *)(v15 + 160) = v6;
        if (v5 - 1 == v6)
          break;
        ++v6;
      }
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_241627B6C(v4);
    swift_release();
    v25 = swift_bridgeObjectRetain();
    v26 = sub_24165C0A4(v25);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v47 = v26;
    sub_241624DD8((_QWORD **)&v47);
    swift_bridgeObjectRelease();
    v27 = v47;
    v28 = *(_QWORD *)(v47 + 16);
    if (v28)
    {
      *(_QWORD *)&v56 = v3;
      sub_2415FE51C(0, v28, 0);
      v29 = v56;
      v30 = v28 - 1;
      for (j = 32; ; j += 136)
      {
        v47 = *(_OWORD *)(v27 + j);
        v32 = *(_OWORD *)(v27 + j + 16);
        v33 = *(_OWORD *)(v27 + j + 32);
        v34 = *(_OWORD *)(v27 + j + 64);
        v50 = *(_OWORD *)(v27 + j + 48);
        v51 = v34;
        v48 = v32;
        v49 = v33;
        v35 = *(_OWORD *)(v27 + j + 80);
        v36 = *(_OWORD *)(v27 + j + 96);
        v37 = *(_OWORD *)(v27 + j + 112);
        v55 = *(_QWORD *)(v27 + j + 128);
        v53 = v36;
        v54 = v37;
        v52 = v35;
        sub_2415DA4E0((uint64_t)&v47);
        *(_QWORD *)&v56 = v29;
        v39 = *(_QWORD *)(v29 + 16);
        v38 = *(_QWORD *)(v29 + 24);
        if (v39 >= v38 >> 1)
        {
          sub_2415FE51C(v38 > 1, v39 + 1, 1);
          v29 = v56;
        }
        *(_QWORD *)(v29 + 16) = v39 + 1;
        v40 = (_OWORD *)(v29 + (v39 << 7));
        v41 = v47;
        v42 = v48;
        v43 = v50;
        v40[4] = v49;
        v40[5] = v43;
        v40[2] = v41;
        v40[3] = v42;
        v44 = v51;
        v45 = v52;
        v46 = v54;
        v40[8] = v53;
        v40[9] = v46;
        v40[6] = v44;
        v40[7] = v45;
        if (!v30)
          break;
        --v30;
      }
      swift_release();
      return v29;
    }
    else
    {
      swift_release();
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v21 = swift_bridgeObjectRetain();
    v22 = sub_241627C74(v21);
    swift_bridgeObjectRelease();
    v23 = sub_24165BFB4(v22);
    swift_bridgeObjectRelease();
    return v23;
  }
}

uint64_t sub_241623E78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _OWORD v44[8];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (objc_msgSend((id)objc_opt_self(), sel_authorizationStatusForEntityType_, 0) != (id)3)
  {
    if (qword_2571395C0 != -1)
      swift_once();
    v16 = sub_2416B9D6C();
    __swift_project_value_buffer(v16, (uint64_t)qword_257147810);
    v17 = sub_2416B9D54();
    v18 = sub_2416BB374();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      *(_QWORD *)&v44[0] = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = sub_2416BB704();
      sub_2415A8600(v21, v22, (uint64_t *)v44);
      sub_2416BB44C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_241599000, v17, v18, "%s: Not authorized to fetch me contact", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v20, -1, -1);
      MEMORY[0x242699570](v19, -1, -1);
    }

    goto LABEL_12;
  }
  v3 = *(void **)(v1 + 24);
  sub_2416285C4();
  v4 = (void *)sub_2416BB1E8();
  *(_QWORD *)&v44[0] = 0;
  v5 = objc_msgSend(v3, sel__ios_meContactWithKeysToFetch_error_, v4, v44);

  v6 = *(void **)&v44[0];
  if (!v5)
  {
    v24 = *(id *)&v44[0];
    v25 = (void *)sub_2416B9A60();

    swift_willThrow();
    if (qword_2571395C0 != -1)
      swift_once();
    v26 = sub_2416B9D6C();
    __swift_project_value_buffer(v26, (uint64_t)qword_257147810);
    v27 = v25;
    v28 = v25;
    v29 = sub_2416B9D54();
    v30 = sub_2416BB374();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc();
      v32 = swift_slowAlloc();
      *(_QWORD *)&v44[0] = v32;
      *(_DWORD *)v31 = 136315394;
      v33 = sub_2416BB704();
      sub_2415A8600(v33, v34, (uint64_t *)v44);
      sub_2416BB44C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2080;
      swift_getErrorValue();
      v35 = sub_2416BB674();
      sub_2415A8600(v35, v36, (uint64_t *)v44);
      sub_2416BB44C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_241599000, v29, v30, "%s: unable to fetch me contact with error: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242699570](v32, -1, -1);
      MEMORY[0x242699570](v31, -1, -1);

    }
    else
    {

    }
    goto LABEL_12;
  }
  v7 = (void *)objc_opt_self();
  v8 = v6;
  v9 = objc_msgSend(v7, sel_emergencyContactUsingSimCardNumberWithContact_property_, v5, 0);
  v10 = objc_msgSend(v9, sel_phoneNumber);
  if (!v10)
  {
    if (qword_2571395C0 != -1)
      swift_once();
    v37 = sub_2416B9D6C();
    __swift_project_value_buffer(v37, (uint64_t)qword_257147810);
    v38 = sub_2416B9D54();
    v39 = sub_2416BB374();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = swift_slowAlloc();
      *(_QWORD *)&v44[0] = v41;
      *(_DWORD *)v40 = 136315138;
      v42 = sub_2416BB704();
      sub_2415A8600(v42, v43, (uint64_t *)v44);
      sub_2416BB44C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_241599000, v38, v39, "%s: Me contact did not have a phone number available to use", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242699570](v41, -1, -1);
      MEMORY[0x242699570](v40, -1, -1);

    }
    else
    {

    }
LABEL_12:
    sub_241628618(v44);
    return sub_2416279E0((uint64_t)v44, a1);
  }

  v11 = sub_2416BB0EC();
  MEMORY[0x24BDAC7A8](v11);
  sub_2416BB098();
  if (qword_257139300 != -1)
    swift_once();
  v12 = (void *)qword_25713A038;
  v13 = sub_2416B9C10();
  MEMORY[0x24BDAC7A8](v13);
  v14 = v12;
  sub_2416B9C04();
  sub_2416BB134();
  v15 = (void *)sub_2416BB0F8();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setRelationship_, v15);

  MedicalIDEmergencyContact.init(hkEmergencyContact:contact:)(v9, v5, v44);
  nullsub_1(v44);
  return sub_2416279E0((uint64_t)v44, a1);
}

uint64_t sub_241624598@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

id sub_2416245B4(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t v16;

  v3 = objc_msgSend(a1, sel_nameContactIdentifier);
  if (v3)
  {
    v4 = v3;
    v5 = *(void **)(v1 + 24);
    sub_2416285C4();
    v6 = (void *)sub_2416BB1E8();
    v7 = objc_msgSend(v5, sel_contactForIdentifier_keysToFetch_, v4, v6);

    if (v7)
    {
      v8 = objc_msgSend(v7, sel_phoneNumbers);
      sub_2415C0788(0, &qword_25713D120);
      v9 = sub_2416BB1F4();

      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        v10 = sub_2416BB5C0();
        swift_bridgeObjectRelease();
      }
      else
      {
        v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v10)
        return v7;

    }
  }
  v7 = objc_msgSend(a1, sel_phoneNumber);
  if (v7)
  {
    v11 = sub_2416BB128();
    v13 = v12;

    v7 = (id)sub_2416247CC(v11, v13);
    swift_bridgeObjectRelease();
    if (v7)
    {
      v14 = objc_msgSend(v7, sel_phoneNumbers);
      sub_2415C0788(0, &qword_25713D120);
      v15 = sub_2416BB1F4();

      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        v16 = sub_2416BB5C0();
        swift_bridgeObjectRelease();
      }
      else
      {
        v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (!v16)
      {

        return 0;
      }
    }
  }
  return v7;
}

uint64_t sub_2416247CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  v2 = sub_2416B994C();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = sub_2416B9934();
  MEMORY[0x24BDAC7A8](v5);
  v6 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2416B9940();
  v7 = *(void (**)(char *, uint64_t))(v3 + 8);
  v7(v6, v2);
  sub_2415C343C();
  v8 = MEMORY[0x24BEE0D00];
  v9 = sub_2416BB464();
  v7(v6, v2);
  v17[0] = v9;
  sub_24159D7F0(0, &qword_25713D110, v8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_241628564();
  sub_2416BB068();
  swift_bridgeObjectRelease();
  v10 = (void *)objc_opt_self();
  v11 = objc_allocWithZone(MEMORY[0x24BDBAD88]);
  v12 = (void *)sub_2416BB0F8();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v11, sel_initWithStringValue_, v12);

  v14 = objc_msgSend(v10, sel_predicateForContactsMatchingPhoneNumber_, v13);
  v15 = sub_241624990((uint64_t)v14);

  return v15;
}

uint64_t sub_241624990(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  id v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  id *v13;
  id *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  id *v21;
  uint64_t v22;
  unint64_t v23;
  id v25[2];

  v25[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *(void **)(v1 + 24);
  sub_2416285C4();
  v4 = (void *)sub_2416BB1E8();
  v25[0] = 0;
  v5 = objc_msgSend(v3, sel_unifiedContactsMatchingPredicate_keysToFetch_error_, a1, v4, v25);

  v6 = v25[0];
  if (v5)
  {
    sub_2415C0788(0, &qword_25713EB60);
    v7 = sub_2416BB1F4();
    v8 = v6;

    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      v9 = sub_2416BB5C0();
      swift_bridgeObjectRelease();
      if (!v9)
        goto LABEL_8;
    }
    else
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v9)
      {
LABEL_8:
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    if ((v7 & 0xC000000000000001) != 0)
    {
      v10 = (id)MEMORY[0x242698CF4](0, v7);
      goto LABEL_7;
    }
    if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v10 = *(id *)(v7 + 32);
LABEL_7:
      v9 = (uint64_t)v10;
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_19;
  }
  v11 = v25[0];
  v7 = sub_2416B9A60();

  swift_willThrow();
  if (qword_2571395C0 != -1)
LABEL_19:
    swift_once();
  v12 = sub_2416B9D6C();
  __swift_project_value_buffer(v12, (uint64_t)qword_257147810);
  v13 = (id *)(id)v7;
  v14 = (id *)(id)v7;
  v15 = sub_2416B9D54();
  v16 = sub_2416BB374();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v18 = (void *)swift_slowAlloc();
    v25[0] = v18;
    *(_DWORD *)v17 = 136315394;
    v19 = sub_2416BB704();
    sub_2415A8600(v19, v20, (uint64_t *)v25);
    sub_2416BB44C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    v21 = (id *)(id)v7;
    sub_24159F0B8();
    v22 = sub_2416BB14C();
    sub_2415A8600(v22, v23, (uint64_t *)v25);
    sub_2416BB44C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_241599000, v15, v16, "%s Contact Fetch Error: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242699570](v18, -1, -1);
    MEMORY[0x242699570](v17, -1, -1);

  }
  else
  {

  }
  return 0;
}

