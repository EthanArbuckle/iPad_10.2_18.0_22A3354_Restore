uint64_t IMDChatRecordCopyChatsSortedByLastMessageDateAndFilteredUsingPredicateWithLimitQuery(int a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v5;
  const __CFString *v6;
  id v7;
  const __CFString *v8;

  if (a3)
    v5 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("AND (%@)"), a3);
  else
    v5 = &stru_1E5AC1D70;
  if (a1)
    v6 = CFSTR("ASC");
  else
    v6 = CFSTR("DESC");
  v7 = objc_alloc(MEMORY[0x1E0CB3940]);
  if (a2)
    v8 = CFSTR("SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat LEFT OUTER JOIN chat_message_join ON    chat_message_join.chat_id == chat.rowid    AND chat_message_join.message_date = (SELECT MAX(message_date) FROM chat_message_join WHERE chat_message_join.chat_id = chat.rowid) WHERE    chat.is_archived = 0 %@ GROUP BY    chat.rowid HAVING    chat_message_join.message_date < ? ORDER BY    chat_message_join.message_date %@ LIMIT    ?;");
  else
    v8 = CFSTR("SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat LEFT OUTER JOIN chat_message_join ON    chat_message_join.chat_id == chat.rowid    AND chat_message_join.message_date = (SELECT MAX(message_date) FROM chat_message_join WHERE chat_message_join.chat_id = chat.rowid) WHERE    chat.is_archived = 0 %@ GROUP BY    chat.rowid ORDER BY    chat_message_join.message_date %@ LIMIT    ?;");
  return objc_msgSend(v7, "initWithFormat:", v8, v5, v6);
}

BOOL IMDRunSqlOperation(uint64_t a1)
{
  NSObject *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a1)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v4 = 0u;
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)&v4);
    (*(void (**)(uint64_t, __int128 *))(a1 + 16))(a1, &v4);
  }
  else
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC5800C();
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v4 = 0u;
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)&v4);
  }
  return IMDSqlOperationRelease((uint64_t)&v4, 0);
}

BOOL IMDSqlOperationRelease(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  NSObject *v9;
  const void *v10;
  const void *v11;
  void *v12;

  if (a1)
  {
    sub_1ABB69FD0(a1);
    v4 = *(_QWORD *)(a1 + 168);
    v5 = v4 == 0;
    if (v4)
      IMDSqlOperationGetError(a1, a2);
    if (*(_QWORD *)(a1 + 16))
    {
      v6 = *(_QWORD *)(a1 + 168);
      v7 = IMLogHandleForCategory();
      v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
      if (v6)
      {
        if (v8)
          sub_1ABC5D2B4(a1);
        IMDSqlOperationRevertTransaction((_QWORD *)a1);
      }
      else
      {
        if (v8)
          sub_1ABC5D274(v7);
        IMDSqlOperationCommitTransaction((_QWORD *)a1);
      }
      v10 = *(const void **)(a1 + 16);
      if (v10)
      {
        CFRelease(v10);
        *(_QWORD *)(a1 + 16) = 0;
      }
    }
    if (*(_QWORD *)(a1 + 8))
    {
      CSDBSqliteDatabaseReleaseSqliteConnection();
      *(_QWORD *)(a1 + 8) = 0;
    }
    v11 = *(const void **)(a1 + 168);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(a1 + 168) = 0;
    }
    v12 = *(void **)(a1 + 24);
    if (v12)
    {
      *(_QWORD *)(a1 + 24) = 0;

    }
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1ABC5D1D8();
    return 0;
  }
  return v5;
}

void IMDSqlOperationInitWithSharedCSDBDatabase(uint64_t a1@<X8>)
{
  uint64_t v2;
  NSObject *v3;

  IMDEnsureSharedRecordStoreInitialized();
  v2 = IMDSharedSqliteDatabase();
  if (!v2)
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC598AC();
  }
  IMDSqlOperationInitWithCSDBDatabase(v2, a1);
}

void IMDSqlStatementIterateRow(sqlite3_stmt **a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  sqlite3_stmt *v6;
  int v7;
  const char *v8;
  void (*v9)(uint64_t, _QWORD *, char *);
  NSObject *v10;
  _QWORD v11[2];
  int v12;
  int v13;
  char v14;

  if (!a2 && (v4 = IMLogHandleForCategory(), os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC570A0();
    if (a1)
    {
LABEL_4:
      if (*a1)
        goto LABEL_6;
    }
  }
  else if (a1)
  {
    goto LABEL_4;
  }
  v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_1ABC57004();
    if (!a1)
      return;
    goto LABEL_7;
  }
LABEL_6:
  if (!a1)
    return;
LABEL_7:
  if (a2)
  {
    v6 = *a1;
    if (*a1)
    {
      v14 = 0;
      if (sqlite3_column_count(v6) >= 1)
      {
        v7 = 0;
        do
        {
          v8 = sqlite3_column_name(v6, v7);
          v9 = *(void (**)(uint64_t, _QWORD *, char *))(a2 + 16);
          v11[0] = a1;
          v11[1] = v8;
          v12 = v7;
          v13 = 0;
          v9(a2, v11, &v14);
          if (v14)
            break;
          ++v7;
        }
        while (v7 < sqlite3_column_count(v6));
      }
    }
    else
    {
      v10 = IMLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1ABC56F68();
    }
  }
}

uint64_t __IMDPersistenceCheckGreaterEntitlements(void *a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFBoolean *v7;
  const __CFBoolean *v8;
  CFTypeID v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (qword_1ED0D3A58 != -1)
    dispatch_once(&qword_1ED0D3A58, &unk_1E5ABF990);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = (void *)qword_1ED0D3A68;
  result = objc_msgSend((id)qword_1ED0D3A68, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = (const __CFBoolean *)objc_msgSend(a1, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v6));
        if (v7)
        {
          v8 = v7;
          v9 = CFGetTypeID(v7);
          if (v9 == CFBooleanGetTypeID())
          {
            if (CFBooleanGetValue(v8))
              return 1;
          }
        }
        ++v6;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      v4 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

void __XPCIMDMessageStoreSendXPCMessage(void *a1, void (**a2)(void), int a3)
{
  NSObject *v5;
  IMDPersistenceServiceClient *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _xpc_connection_s *v13;
  _xpc_connection_s *v14;
  xpc_object_t v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  xpc_object_t v23;
  void *v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t v30;
  _BYTE v31[15];
  uint8_t v32;
  _BYTE v33[15];
  __int128 buf;
  uint64_t (*v35)(uint64_t, void *);
  void *v36;
  void (**v37)(void);
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance"), "isInternalInstall")
      && IMIsRunningInUnitTesting())
    {
      v26 = IMLogHandleForCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        sub_1ABC619BC(v26, v27, v28);
      objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("IMDPersistenceXPCNotAllowedInTest"), CFSTR("Called into IMDPersistence XPC layer while in a test"), 0));
    }
    if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags"), "isModernPersistenceXPCEnabled"))
    {
      if (IMOSLoggingEnabled())
      {
        v5 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Sending legacy command", (uint8_t *)&buf, 2u);
        }
      }
      v6 = +[IMDPersistenceServiceClient sharedClient](IMDPersistenceServiceClient, "sharedClient");
      if (a3)
        v7 = -[IMDPersistenceServiceClient remoteProxy](v6, "remoteProxy");
      else
        v7 = -[IMDPersistenceServiceClient synchronousRemoteProxy](v6, "synchronousRemoteProxy");
      v24 = (void *)v7;
      v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D39BA8]), "initWithXPCObject:", a1);
      *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
      *((_QWORD *)&buf + 1) = 3221225472;
      v35 = sub_1ABC02D24;
      v36 = &unk_1E5ABBB58;
      v37 = a2;
      objc_msgSend(v24, "sendLegacyXPCCommandWithObject:reply:", v25, &buf);

      return;
    }
    xpc_dictionary_set_int64(a1, "__xpc_wants_reply__", 1);
    v11 = 0;
    v12 = MEMORY[0x1E0C81310];
    while (1)
    {
      v13 = (_xpc_connection_s *)_IMDPersistenceIPCCopyConnectionWithForceNew(v11 != 0);
      v14 = v13;
      if (!v13)
      {
        v18 = IMLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          sub_1ABC61A58(&v32, v33, v18);
        goto LABEL_24;
      }
      if (a3)
      {
        xpc_connection_send_message_with_reply(v13, a1, MEMORY[0x1E0C80D38], a2);
        xpc_release(v14);
        return;
      }
      v15 = xpc_connection_send_message_with_reply_sync(v13, a1);
      v16 = v15;
      if (v15 && MEMORY[0x1AF435D98](v15) != v12)
      {
        if (a2)
          a2[2]();
        xpc_release(v16);
        xpc_release(v14);
        return;
      }
      v17 = IMLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134217984;
        *(_QWORD *)((char *)&buf + 4) = v11 + 1;
        _os_log_error_impl(&dword_1ABB60000, v17, OS_LOG_TYPE_ERROR, "__syncXPCIMDMessageStoreSendXPCMessage has failed %lu time(s)!", (uint8_t *)&buf, 0xCu);
        if (!v16)
        {
LABEL_23:
          xpc_release(v14);
          goto LABEL_24;
        }
      }
      else if (!v16)
      {
        goto LABEL_23;
      }
      xpc_release(v16);
      xpc_release(v14);
LABEL_24:
      if (v11 >= 3)
      {
        v19 = IMLogHandleForCategory();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          sub_1ABC61A24(&v30, v31, v19);
        sleep(0xBu);
      }
      sleep(1u);
      if (++v11 == 5)
      {
        v20 = IMLogHandleForCategory();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          sub_1ABC619F0(v20, v21, v22);
        if (a2)
        {
          v23 = xpc_dictionary_create(0, 0, 0);
          ((void (*)(void (**)(void), xpc_object_t))a2[2])(a2, v23);
          if (v23)
            xpc_release(v23);
        }
        return;
      }
    }
  }
  v8 = IMLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    sub_1ABC61988(v8, v9, v10);
}

uint64_t IMDSharedThreadedRecordStore()
{
  NSObject *v0;
  const __CFString *v1;
  uint64_t v2;
  uint64_t block;
  uint64_t v5;
  void (*v6)(uint64_t);
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint8_t buf[40];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!IMDIsRunningInDatabaseServerProcess())
    return 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  block = MEMORY[0x1E0C809B0];
  v5 = 3221225472;
  v6 = sub_1ABBF4978;
  v7 = &unk_1E5AB0C88;
  v8 = &v9;
  if (qword_1ED0D3A48 != -1)
    dispatch_once(&qword_1ED0D3A48, &block);
  if (!qword_1ED0D3A50)
  {
    v0 = IMLogHandleForCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    {
      if (*((_BYTE *)v10 + 24))
        v1 = CFSTR("YES");
      else
        v1 = CFSTR("NO");
      sub_1ABC60124(objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("CSDBCreateThreadedRecordStore should not be nil. Did attempt to init: %@"), v1, block, v5, v6, v7, v8, v9), buf, v0);
    }
  }
  v2 = qword_1ED0D3A50;
  _Block_object_dispose(&v9, 8);
  return v2;
}

void sub_1ABB62F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t IMDIsRunningInDatabaseServerProcess()
{
  return byte_1ED0D3AC0;
}

sqlite3_int64 IMDInt64FromSqlColumn(uint64_t a1)
{
  sqlite3_stmt **v2;
  NSObject *v3;
  NSObject *v5;

  v2 = *(sqlite3_stmt ***)a1;
  if (*(_QWORD *)a1)
    goto LABEL_12;
  v3 = IMLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1ABC56C5C();
  v2 = *(sqlite3_stmt ***)a1;
  if (*(_QWORD *)a1)
  {
LABEL_12:
    if (*v2)
      return sqlite3_column_int64(*v2, *(_DWORD *)(a1 + 16));
    v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1ABC56BC0();
  }
  return 0;
}

uint64_t _IMDPersistenceIPCCopyConnectionWithForceNew(int a1)
{
  void *v2;

  if (qword_1ED0D3CE0 != -1)
  {
    dispatch_once(&qword_1ED0D3CE0, &unk_1E5AAF0C8);
    if (!a1)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (a1)
LABEL_3:
    sub_1ABB9B338();
LABEL_4:
  pthread_mutex_lock(&stru_1ED0D36E8);
  v2 = (void *)qword_1ED0D3CD0;
  if (qword_1ED0D3CD0
    || (qword_1ED0D3CD0 = IMXPCCreateConnectionForServiceWithQueue(),
        IMXPCConfigureConnection(),
        (v2 = (void *)qword_1ED0D3CD0) != 0))
  {
    qword_1ED0D3CE8 = (uint64_t)xpc_retain(v2);
  }
  pthread_mutex_unlock(&stru_1ED0D36E8);
  return qword_1ED0D3CE8;
}

void IMDPersistencePerformBlock(void *a1, int a2)
{
  id v3;
  id v4;

  if (a1)
  {
    if (byte_1ED0D3AC0)
    {
      IMDSharedThreadedRecordStore();
      CSDBPerformBlock();
    }
    else
    {
      v3 = (id)objc_msgSend(a1, "copy");
      if (qword_1EEC406C0 != -1)
      {
        v4 = v3;
        dispatch_once(&qword_1EEC406C0, &unk_1E5AC0158);
        v3 = v4;
      }
      if (qword_1EEC406B8)
      {
        if (a2)
          dispatch_sync((dispatch_queue_t)qword_1EEC406B8, v3);
        else
          dispatch_async((dispatch_queue_t)qword_1EEC406B8, v3);
      }
    }
  }
}

BOOL IMDSqlOperationHasRows(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _BOOL8 result;
  NSObject *v6;
  void *ErrorCode;
  const void *v8;

  if (a1)
  {
    if (!*(_QWORD *)(a1 + 48) || !*(_QWORD *)(a1 + 32))
    {
      v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        sub_1ABC5CB24();
      if (!*(_QWORD *)(a1 + 32))
        return 0;
    }
    if (!*(_DWORD *)(a1 + 72) || (v3 = *(_DWORD *)(a1 + 40), v3 == 100))
    {
      v3 = CSDBSqliteStepWithConnection();
      *(_DWORD *)(a1 + 40) = v3;
      ++*(_DWORD *)(a1 + 72);
      if ((v3 - 100) >= 2 && v3 != 0)
      {
        ErrorCode = IMDCreateCFErrorWithQueryErrorCode(v3, *(sqlite3 **)(a1 + 56), *(_QWORD *)(a1 + 48));
        if (ErrorCode)
        {
          v8 = ErrorCode;
          IMDSqlOperationSetError(a1, ErrorCode);
          CFRelease(v8);
          return 0;
        }
        v3 = *(_DWORD *)(a1 + 40);
      }
    }
    return v3 == 100;
  }
  v6 = IMLogHandleForCategory();
  result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  if (!result)
    return result;
  sub_1ABC5CA88();
  return 0;
}

uint64_t _IMDPerformLockedStatementBlockWithQuery(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  if (!a2 && (v3 = IMLogHandleForCategory(), os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC591F0();
    if (a1)
      goto LABEL_6;
  }
  else if (a1)
  {
    goto LABEL_6;
  }
  v4 = IMLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1ABC59154();
LABEL_6:
  IMDEnsureSharedRecordStoreInitialized();
  IMDSharedThreadedRecordStore();
  return CSDBPerformLockedSectionForQueryForReading();
}

uint64_t _IMDSMSRecordStoreInitializeSharedThreadedRecordStore()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];
  char v4;

  result = IMDIsRunningInDatabaseServerProcess();
  if ((_DWORD)result)
  {
    v1 = IMDSMSRecordStoreUseProtectedDatabase();
    v2 = IMDSharedThreadedRecordStore();
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1ABBF593C;
    v3[3] = &unk_1E5AB9EB8;
    v4 = v1;
    return _IMDInitializeMessagesRecordStoreWithVersion(v2, v3, v1, 18016);
  }
  return result;
}

BOOL _IMDInitializeMessagesRecordStore(uint64_t a1, uint64_t a2, int a3)
{
  return _IMDInitializeMessagesRecordStoreWithVersion(a1, a2, a3);
}

uint64_t _IMDAllowLocalMigration()
{
  return byte_1EEC3FA50;
}

uint64_t IMDSMSRecordStoreUseProtectedDatabase()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance"), "isUnderFirstDataProtectionLock") ^ 1;
}

void IMDEnsureSharedRecordStoreInitialized()
{
  NSObject *v0;

  IMDPersistenceCheckDatabaseThread();
  if (IMDSharedThreadedRecordStore())
  {
    _IMDSMSRecordStoreInitializeSharedThreadedRecordStore();
  }
  else
  {
    v0 = IMLogHandleForCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
      sub_1ABC60374();
  }
}

BOOL IMDPersistenceCheckDatabaseThread()
{
  _BOOL8 result;
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12[16];
  uint8_t v13[16];
  uint8_t buf[16];

  if (!byte_1ED0D3AC0)
    return 1;
  IMDSharedThreadedRecordStore();
  if ((CSDBThreadedRecordStoreOwnsCurrentThread() & 1) != 0)
    return 1;
  if (IMOSLoggingEnabled())
  {
    v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_INFO, "**************************************************************************", buf, 2u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "****** Database access off the database thread, please file a radar ******", v13, 2u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "**************************************************************************", v12, 2u);
    }
  }
  if (qword_1EEC406A8 != -1)
    dispatch_once(&qword_1EEC406A8, &unk_1E5AAEA40);
  v4 = qword_1EEC406B0;
  result = os_log_type_enabled((os_log_t)qword_1EEC406B0, OS_LOG_TYPE_FAULT);
  if (result)
  {
    sub_1ABC64220(v4, v5, v6, v7, v8, v9, v10, v11);
    return 0;
  }
  return result;
}

void _IMDChatRecordCopyChatsToXPCArray(const __CFArray *a1, void *a2, char a3, char a4, char a5, int a6)
{
  CFIndex Count;
  CFIndex v12;
  CFIndex i;
  void *v14;
  const void *ValueAtIndex;
  xpc_object_t v16;
  void *v17;

  if (a1)
  {
    if (a2)
    {
      Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        v12 = Count;
        for (i = 0; i != v12; ++i)
        {
          v14 = (void *)MEMORY[0x1AF435474]();
          ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          v16 = xpc_dictionary_create(0, 0, 0);
          if (v16)
          {
            v17 = v16;
            _IMDChatRecordBulkCopyXPCDictionary((uint64_t)ValueAtIndex, (uint64_t)v16, a3, a4, a5, a6);
            xpc_array_append_value(a2, v17);
            xpc_release(v17);
          }
          objc_autoreleasePoolPop(v14);
        }
      }
    }
  }
}

id _IMDChatRecordCopyChatsFromXPCArray(void *a1)
{
  uint64_t v2;
  _QWORD applier[5];

  if (!a1)
    return objc_alloc_init(MEMORY[0x1E0C99D20]);
  v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", xpc_array_get_count(a1));
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3221225472;
  applier[2] = sub_1ABBD401C;
  applier[3] = &unk_1E5AB60D8;
  applier[4] = v2;
  xpc_array_apply(a1, applier);
  return (id)v2;
}

id _IMDChatRecordCopyChatsFromRecords(void *a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  int ID;
  _OWORD *v6;
  const void *v7;

  if (!a1)
    return objc_alloc_init(MEMORY[0x1E0C99D20]);
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(a1, "count"));
  if (objc_msgSend(a1, "count"))
  {
    v3 = 0;
    v4 = *MEMORY[0x1E0C9AE00];
    do
    {
      objc_msgSend(a1, "objectAtIndex:", v3);
      ID = CSDBRecordGetID();
      v6 = sub_1ABBD0848(v4, ID, 0);
      if (v6)
      {
        v7 = v6;
        objc_msgSend(v2, "addObject:", v6);
        CFRelease(v7);
      }
      ++v3;
    }
    while (v3 < objc_msgSend(a1, "count"));
  }
  return v2;
}

const unsigned __int8 *IMDStringFromSqlColumn(uint64_t a1)
{
  sqlite3_stmt **v2;
  NSObject *v3;
  const unsigned __int8 *result;
  NSObject *v5;

  v2 = *(sqlite3_stmt ***)a1;
  if (!*(_QWORD *)a1)
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC56D94();
    v2 = *(sqlite3_stmt ***)a1;
    if (!*(_QWORD *)a1)
      return 0;
  }
  if (!*v2)
  {
    v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1ABC56CF8();
    return 0;
  }
  result = sqlite3_column_text(*v2, *(_DWORD *)(a1 + 16));
  if (result)
    return (const unsigned __int8 *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)result, 0x8000100u);
  return result;
}

void IMDSqlOperationIterateRow(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;

  if (!a1 && (v4 = IMLogHandleForCategory(), os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC5D45C();
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_1ABC5D3C0();
LABEL_6:
  IMDSqlStatementIterateRow((sqlite3_stmt **)(a1 + 32), a2);
}

BOOL _IMDSqlOperationRunQuery(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;

  if (!a1 && (v8 = IMLogHandleForCategory(), os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC57F70();
    if (theString)
      goto LABEL_6;
  }
  else if (theString)
  {
    goto LABEL_6;
  }
  v9 = IMLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    sub_1ABC57ED4();
LABEL_6:
  if (!a1)
    return 0;
  _IMDSqlOperationBeginQuery(a1, theString);
  v10 = *(_QWORD *)(a1 + 168);
  if (a3 && !v10)
  {
    (*(void (**)(uint64_t))(a3 + 16))(a3);
    v10 = *(_QWORD *)(a1 + 168);
  }
  if (a4 && !v10)
    (*(void (**)(uint64_t))(a4 + 16))(a4);
  IMDSqlOperationFinishQuery(a1);
  if (*(_QWORD *)(a1 + 168))
  {
    v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1ABC57E4C(a1, v11);
  }
  return *(_QWORD *)(a1 + 168) == 0;
}

BOOL _IMDSqlOperationBeginQuery(uint64_t a1, CFStringRef theString)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  const void *v9;
  uint64_t v10;
  const __CFString *v11;
  NSObject *v12;
  const void *v13;
  CFIndex Length;
  void *v15;
  NSObject *v17;
  NSObject *v18;
  char *v19;
  int v20;
  int v21;
  BOOL v22;
  sqlite3_stmt *v23;
  NSObject *v24;
  void *ErrorCode;
  const void *v26;
  sqlite3_stmt *ppStmt;

  if (!a1 && (v4 = IMLogHandleForCategory(), os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC5C8B4();
    if (theString)
      goto LABEL_6;
  }
  else if (theString)
  {
    goto LABEL_6;
  }
  v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_1ABC5C818();
LABEL_6:
  if (!a1)
    return 0;
  if (*(_QWORD *)(a1 + 32))
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5C77C();
  }
  if (!*(_QWORD *)(a1 + 8))
  {
    v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC5C6E0();
    if (!*(_QWORD *)(a1 + 8))
      return 0;
  }
  if (*(_QWORD *)(a1 + 168))
  {
    v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1ABC5C670(a1);
    v9 = *(const void **)(a1 + 168);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 168) = 0;
    }
  }
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 40) = 100;
  *(_DWORD *)(a1 + 72) = 0;
  if (theString)
  {
    v11 = *(const __CFString **)(a1 + 48);
    if (v11 != theString)
    {
      if (v11)
      {
        v12 = IMLogHandleForCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          sub_1ABC5C5D4();
        v13 = *(const void **)(a1 + 48);
        if (v13)
        {
          CFRelease(v13);
          *(_QWORD *)(a1 + 48) = 0;
        }
      }
      Length = CFStringGetLength(theString);
      if (CFStringGetCharacterAtIndex(theString, Length - 1) == 59)
        v15 = (void *)CFRetain(theString);
      else
        v15 = (void *)CFStringCreateWithFormat(0, 0, CFSTR("%@;"), theString);
      *(_QWORD *)(a1 + 48) = v15;
      if (!v15)
      {
        v18 = IMLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          sub_1ABC5C538();
      }
    }
  }
  else
  {
    v17 = IMLogHandleForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_1ABC5C49C();
  }
  v19 = (char *)CSDBCreateUTF8StringFromCFString();
  ppStmt = 0;
  do
    v20 = sqlite3_prepare_v2(*(sqlite3 **)(v10 + 8), v19, -1, &ppStmt, 0);
  while ((v20 - 5) < 2);
  v21 = v20;
  if (v19)
    free(v19);
  v22 = (v21 - 100) < 2 || v21 == 0;
  if (v22 || (ErrorCode = IMDCreateCFErrorWithQueryErrorCode(v21, *(sqlite3 **)(a1 + 56), *(_QWORD *)(a1 + 48))) == 0)
  {
    v23 = ppStmt;
    *(_QWORD *)(a1 + 32) = ppStmt;
    if (!v23)
    {
      v24 = IMLogHandleForCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        sub_1ABC5C400();
    }
  }
  else
  {
    v26 = ErrorCode;
    IMDSqlOperationSetError(a1, ErrorCode);
    CFRelease(v26);
  }
  return *(_QWORD *)(a1 + 168) == 0;
}

void IMDSqlOperationInitWithCSDBDatabase(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("database"), "IMDSqlOperation IMDSqlOperationInitWithCSDBDatabase(CSDBSqliteDatabase *)", IMFileLocationTrimFileName(), 89, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v10 = v4;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  v7 = CSDBSqliteDatabaseConnectionForWriting();
  if (!v7)
  {
    v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1ABC5980C();
  }
  IMDSqlOperationInitWithCSDBConnection(v7, a1, a2);
}

void IMDSqlOperationInitWithCSDBConnection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void (*v7)(uint64_t);
  NSObject *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  NSObject *v11;
  uint8_t buf[4];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("db"), "IMDSqlOperation IMDSqlOperationInitWithCSDBConnection(CSDBSqliteConnection *, CSDBSqliteDatabase *)", IMFileLocationTrimFileName(), 74, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v13 = v6;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (!a1)
  {
    v9 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("connection"), "IMDSqlOperation IMDSqlOperationInitWithCSDBConnection(CSDBSqliteConnection *, CSDBSqliteDatabase *)", IMFileLocationTrimFileName(), 75, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v10 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v10)
    {
      v10(v9);
    }
    else if (IMOSLoggingEnabled())
    {
      v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v13 = v9;
        _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = a1;
  IMDSqlOperationWasInitialized((_QWORD *)a3);
}

void IMDSqlOperationWasInitialized(_QWORD *a1)
{
  NSObject *v1;

  if (!a1 || !a1[1] || !*a1)
  {
    v1 = IMLogHandleForCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1ABC58A18(v1);
  }
}

BOOL IMDSqlOperationFinishQuery(uint64_t a1)
{
  _BOOL8 result;
  NSObject *v3;

  if (a1)
  {
    if (!*(_QWORD *)(a1 + 168) && *(_QWORD *)(a1 + 32))
    {
      while (IMDSqlOperationHasRows(a1))
        ;
    }
    sub_1ABB69FD0(a1);
    return *(_QWORD *)(a1 + 168) == 0;
  }
  else
  {
    v3 = IMLogHandleForCategory();
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1ABC5C9EC();
      return 0;
    }
  }
  return result;
}

uint64_t IMDSharedSqliteDatabase()
{
  return sub_1ABB6A050(0);
}

void __IMDPersistenceIPCServer_peer_event_handler(_xpc_connection_s *a1, void *a2)
{
  uint64_t v4;
  int64_t int64;
  int64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  pid_t pid;
  NSObject *v13;
  const __CFString *v14;
  uint64_t v15;
  _BOOL4 v16;
  void (**v17)(_QWORD);
  _QWORD v18[8];
  uint8_t v19[32];
  uint8_t buf[16];
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1AF435D98](a2);
  if (v4 == MEMORY[0x1E0C81310])
  {
    if (a2 == (void *)MEMORY[0x1E0C81260])
    {
      if (IMOSLoggingEnabled())
      {
        v11 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = xpc_connection_get_pid(a1);
          _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "peer(%d) received XPC_ERROR_CONNECTION_INVALID", buf, 8u);
        }
      }
      xpc_connection_cancel(a1);
      goto LABEL_28;
    }
    if (a2 == (void *)MEMORY[0x1E0C81258])
    {
      if (!IMOSLoggingEnabled())
        goto LABEL_28;
      v9 = OSLogHandleForIMFoundationCategory();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        goto LABEL_28;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = xpc_connection_get_pid(a1);
      v10 = "peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED";
    }
    else
    {
      if (a2 != (void *)MEMORY[0x1E0C81288])
        goto LABEL_28;
      if (!IMOSLoggingEnabled())
        goto LABEL_28;
      v9 = OSLogHandleForIMFoundationCategory();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        goto LABEL_28;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = xpc_connection_get_pid(a1);
      v10 = "peer(%d) received XPC_ERROR_TERMINATION_IMMINENT";
    }
    _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, v10, buf, 8u);
LABEL_28:
    if ((byte_1ED0D38D8 & 1) == 0)
    {
      byte_1ED0D38D8 = 1;
      IMDPersistencePerformBlockAfterDelay(&unk_1E5ABF9D0, 3.0);
    }
    return;
  }
  if (v4 != MEMORY[0x1E0C812F8])
    goto LABEL_28;
  int64 = xpc_dictionary_get_int64(a2, "__xpc__event_code__");
  *(_OWORD *)buf = 0u;
  v21 = 0u;
  xpc_connection_get_audit_token();
  memset(v19, 0, sizeof(v19));
  if ((__IMDPersistenceCheckEntitlements((uint64_t)v19, int64) & 1) != 0)
  {
    v6 = xpc_dictionary_get_int64(a2, "__xpc_wants_reply__");
    xpc_retain(a2);
    xpc_retain(a1);
    v7 = os_transaction_create();
    if (v6)
      reply = xpc_dictionary_create_reply(a2);
    else
      reply = 0;
    v16 = v6 != 0;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = sub_1ABB69790;
    v18[3] = &unk_1E5AB7CB8;
    v18[4] = reply;
    v18[5] = a1;
    v18[6] = a2;
    v18[7] = v7;
    v17 = (void (**)(_QWORD))objc_msgSend(v18, "copy");
    __IMDPersistenceIPCServer_command_dispatcher(int64, (uint64_t)a1, a2, v16, (uint64_t)reply, (uint64_t)v17);
    if (!v16)
      v17[2](v17);

    goto LABEL_28;
  }
  pid = xpc_connection_get_pid(a1);
  if (IMOSLoggingEnabled())
  {
    v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = sub_1ABC4D464(int64);
      v15 = IMProcessNameForPid();
      *(_DWORD *)v19 = 138412802;
      *(_QWORD *)&v19[4] = v14;
      *(_WORD *)&v19[12] = 2112;
      *(_QWORD *)&v19[14] = v15;
      *(_WORD *)&v19[22] = 1024;
      *(_DWORD *)&v19[24] = pid;
      _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "Denying xpc connection, task does not have entitlement for message: %@  (%@:%d)", v19, 0x1Cu);
    }
  }
  xpc_connection_cancel(a1);
}

void sub_1ABB64650(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABB645F8);
  }
  _Unwind_Resume(a1);
}

uint64_t __IMDPersistenceIPCServer_command_dispatcher(uint64_t a1, uint64_t a2, xpc_object_t xdict, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BOOL8 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  int64_t v118;
  int64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  int64_t v144;
  uint64_t v145;
  int64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  NSObject *v177;
  id v178;
  uint64_t v179;
  uint64_t v180;
  int64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  NSObject *v185;
  int64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int64_t v199;
  int64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _BOOL8 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  id v225;
  uint64_t v226;
  uint64_t v227;
  id v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int64_t v248;
  int64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int64_t v253;
  int64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  NSObject *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  double v282;
  uint64_t v283;
  uint64_t v284;
  _BOOL8 v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  id v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  NSObject *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  id v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  id v340;
  uint64_t v341;
  uint64_t v342;
  NSObject *v343;
  int64_t v344;
  int64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  id v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  int64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  int64_t v365;
  uint64_t v366;
  uint64_t v367;
  int64_t v368;
  int64_t v369;
  int64_t v370;
  int64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  id v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  int64_t v390;
  int64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  int64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  int64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  id v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  NSObject *v432;
  int64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  NSObject *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  int64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  id v450;
  uint64_t v451;
  uint64_t v452;
  int64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  id v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  int64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  int64_t v475;
  int64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  id v484;
  uint64_t v485;
  uint64_t v486;
  id v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  id v497;
  uint64_t v498;
  uint64_t v499;
  int64_t v500;
  int64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  id v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  _BOOL8 v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  NSObject *v526;
  uint64_t v527;
  uint64_t v528;
  id v529;
  uint64_t v530;
  uint64_t v531;
  id v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int64_t v544;
  uint64_t v545;
  uint64_t v546;
  int64_t v547;
  int64_t v548;
  int64_t v549;
  int64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  id v554;
  uint64_t v555;
  uint64_t v556;
  int64_t v557;
  int64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  id v562;
  uint64_t v563;
  uint64_t v564;
  int64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  id v569;
  uint64_t v570;
  uint64_t v571;
  id v572;
  uint64_t v573;
  uint64_t v574;
  int64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  id v579;
  uint64_t v580;
  uint64_t v581;
  int64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  int64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  int64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  id v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  id v608;
  uint64_t v609;
  uint64_t v610;
  id v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  id v619;
  uint64_t v620;
  uint64_t v621;
  id v622;
  uint64_t v623;
  uint64_t v624;
  id v625;
  uint64_t v626;
  uint64_t v627;
  id v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  char v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  int64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  id v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  int64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  id v657;
  uint64_t v658;
  uint64_t v659;
  int64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  int64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  int64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  id v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  int64_t v689;
  uint64_t v690;
  uint64_t v691;
  BOOL v692;
  BOOL v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  int64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  id v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  int64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  id v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  int64_t v732;
  int64_t v733;
  int64_t v734;
  uint64_t v735;
  uint64_t v736;
  int64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  int v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  int64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  id v756;
  uint64_t v757;
  uint64_t v758;
  int64_t v759;
  int64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  int64_t v771;
  int64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  int64_t v776;
  int64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  NSObject *v793;
  int64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  int64_t v799;
  int64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  int64_t v808;
  int64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  int64_t v813;
  int64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  int64_t v818;
  int64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  int64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  id v827;
  uint64_t v828;
  uint64_t v829;
  id v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  int64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  int64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  id v849;
  uint64_t v850;
  uint64_t v851;
  NSObject *v852;
  int64_t v853;
  int64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  id v858;
  uint64_t v859;
  uint64_t v860;
  int64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  id v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  int64_t v872;
  int64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  int64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  int64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  id v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  id v903;
  uint64_t v904;
  uint64_t v905;
  id v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  char v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  double v929;
  uint64_t v930;
  uint64_t v931;
  id v932;
  uint64_t v933;
  uint64_t v934;
  id v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  int64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  int64_t v950;
  int64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  id v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  NSObject *v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  id v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  int64_t v984;
  int64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  int64_t v991;
  int64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  NSObject *v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  int64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  double v1012;
  uint64_t v1013;
  uint64_t v1014;
  int64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  id v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  NSObject *v1030;
  id v1031;
  uint64_t v1032;
  uint64_t v1033;
  int64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  int64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  NSObject *v1053;
  id v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  int64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  int64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  int64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  __int128 v1078;
  __int128 v1079;
  __int128 v1080;
  __int128 v1081;
  __int128 v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  __int128 v1088;
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  __int128 v1092;
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  __int128 v1099;
  __int128 v1100;
  __int128 v1101;
  __int128 v1102;
  __int128 v1103;
  __int128 v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  __int128 v1113;
  __int128 v1114;
  __int128 v1115;
  __int128 v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  int64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  int64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  int64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  int64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  int64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  int64_t v1147;
  int64_t v1148;
  int64_t v1149;
  int64_t v1150;
  int64_t v1151;
  int64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  int64_t v1155;
  int64_t v1156;
  int64_t v1157;
  uint64_t v1158;
  int64_t v1159;
  int64_t v1160;
  int64_t v1161;
  int64_t v1162;
  uint64_t v1163;
  int64_t v1164;
  int64_t v1165;
  uint64_t v1166;
  int64_t v1167;
  int64_t v1168;
  uint64_t v1169;
  int64_t v1170;
  int64_t v1171;
  uint64_t v1172;
  int64_t v1173;
  uint64_t v1174;
  int64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  int64_t v1182;
  int64_t v1183;
  uint64_t v1184;
  int64_t v1185;
  int64_t v1186;
  int64_t v1187;
  char v1188;
  uint64_t v1189;
  int64_t v1190;
  int64_t v1191;
  char v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  int64_t v1196;
  int64_t v1197;
  uint64_t v1198;
  int64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  int64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  char v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  char v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  char v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  char v1228;
  uint64_t v1229;
  int v1230;
  int64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  int v1234;
  uint64_t v1235;
  uint64_t v1236;
  int64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  int64_t v1241;
  uint64_t v1242;
  int64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  int64_t v1247;
  uint64_t v1248;
  int64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  int64_t v1253;
  uint64_t v1254;
  int64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  int64_t v1259;
  int v1260;
  int64_t v1261;
  uint64_t v1262;
  int64_t v1263;
  int v1264;
  uint64_t v1265;
  int int64;
  int64_t v1267;
  int64_t v1268;
  int64_t v1269;
  int v1270;
  int64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  int64_t v1274;
  int64_t v1275;
  uint64_t v1276;
  int64_t v1277;
  uint8_t buf[8];
  uint64_t v1279;
  void *v1280;
  void *v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  int64_t v1288;
  BOOL v1289;
  BOOL v1290;

  result = -1;
  switch(a1)
  {
    case 0:
      if (a4)
        v13 = a5;
      else
        v13 = 0;
      if (a4)
        v14 = a6;
      else
        v14 = 0;
      __XPCServerIMDMessageStoreSave_IPCAction(-1, a2, v13, v14);
      return 0;
    case 1:
      if (a4)
        v970 = a5;
      else
        v970 = 0;
      if (a4)
        v971 = a6;
      else
        v971 = 0;
      __XPCServerIMDMessageStoreIsFull_IPCAction(-1, a2, v970, v971);
      return 1;
    case 2:
      if (a4)
        v19 = a5;
      else
        v19 = 0;
      if (a4)
        v20 = a6;
      else
        v20 = 0;
      __XPCServerIMDMessageStoreSchemaVersion_IPCAction(-1, a2, v19, v20);
      return 2;
    case 3:
      if (a4)
        v963 = a5;
      else
        v963 = 0;
      if (a4)
        v964 = a6;
      else
        v964 = 0;
      __XPCServerIMDMessageStoreSchema_IPCAction(-1, a2, v963, v964);
      return 3;
    case 4:
      v1272 = IMGetXPCStringFromDictionary();
      int64 = xpc_dictionary_get_int64(xdict, "createdDate");
      v1260 = xpc_dictionary_get_int64(xdict, "startDate");
      v1254 = IMGetXPCStringFromDictionary();
      v1248 = IMGetXPCStringFromDictionary();
      v1242 = IMGetXPCStringFromDictionary();
      v1236 = IMGetXPCStringFromDictionary();
      v1230 = xpc_dictionary_get_int64(xdict, "transferState");
      v1224 = xpc_dictionary_get_BOOL(xdict, "isOutgoing");
      v1218 = IMGetXPCDictionaryFromDictionary();
      v1212 = IMGetXPCIntFromDictionary();
      v1206 = xpc_dictionary_get_BOOL(xdict, "isSticker");
      v1200 = IMGetXPCDictionaryFromDictionary();
      v1194 = IMGetXPCDictionaryFromDictionary();
      v1188 = xpc_dictionary_get_BOOL(xdict, "hideAttachment");
      v74 = xpc_dictionary_get_int64(xdict, "cloudKitSyncState");
      v75 = IMGetXPCDataFromDictionary();
      v76 = IMGetXPCStringFromDictionary();
      v77 = IMGetXPCStringFromDictionary();
      v78 = xpc_dictionary_get_int64(xdict, "isCommSafetySensitive");
      v79 = IMGetXPCStringFromDictionary();
      v80 = IMGetXPCStringFromDictionary();
      if (a4)
        v82 = a5;
      else
        v82 = 0;
      if (a4)
        v83 = a6;
      else
        v83 = 0;
      *(_QWORD *)&v1097 = v75;
      *((_QWORD *)&v1097 + 1) = v76;
      *((_QWORD *)&v1078 + 1) = v1242;
      *(_QWORD *)&v1078 = v1248;
      __XPCServerIMDAttachmentRecordCreate_IPCAction(v80, v81, v82, v83, v1272, int64, v1260, v1254, v1078, v1236, v1230, v1224, v1212, v1218, v1206, v1200, v1194, v1188, v74,
        v1097,
        v77,
        v78,
        v79,
        v80);
      return 4;
    case 5:
      v63 = IMGetXPCStringFromDictionary();
      if (a4)
        v65 = a5;
      else
        v65 = 0;
      if (a4)
        v66 = a6;
      else
        v66 = 0;
      __XPCServerIMDAttachmentRecordRIDForGUID_IPCAction(v63, v64, v65, v66, v63);
      return 5;
    case 6:
      v213 = IMGetXPCStringFromDictionary();
      v214 = xpc_dictionary_get_BOOL(xdict, "isLegacyGUID");
      if (a4)
        v216 = a5;
      else
        v216 = 0;
      if (a4)
        v217 = a6;
      else
        v217 = 0;
      __XPCServerIMDAttachmentRecordCopyAttachmentForGUID_IPCAction(v214, v215, v216, v217, v213, v214);
      return 6;
    case 7:
      v381 = IMGetXPCStringFromDictionary();
      if (a4)
        v383 = a5;
      else
        v383 = 0;
      if (a4)
        v384 = a6;
      else
        v384 = 0;
      __XPCServerIMDAttachmentRecordCopyStickerAttachmentForStickerCachePath_IPCAction(v381, v382, v383, v384, v381);
      return 7;
    case 8:
      v173 = IMGetXPCStringFromDictionary();
      if (a4)
        v175 = a5;
      else
        v175 = 0;
      if (a4)
        v176 = a6;
      else
        v176 = 0;
      __XPCServerIMDAttachmentRecordDeleteAttachmentForGUID_IPCAction(v173, v174, v175, v176, v173);
      return 8;
    case 9:
      v1034 = xpc_dictionary_get_int64(xdict, "days");
      if (a4)
        v1036 = a5;
      else
        v1036 = 0;
      if (a4)
        v1037 = a6;
      else
        v1037 = 0;
      __XPCServerIMDAttachmentRecordDeleteAttachmentsOlderThanDays_IPCAction(v1034, v1035, v1036, v1037, v1034);
      return 9;
    case 10:
      v1057 = IMGetXPCStringFromDictionary();
      if (a4)
        v1059 = a5;
      else
        v1059 = 0;
      if (a4)
        v1060 = a6;
      else
        v1060 = 0;
      __XPCServerIMDAttachmentRecordDoesAttachmentWithGUIDExist_IPCAction(v1057, v1058, v1059, v1060, v1057);
      return 10;
    case 11:
      v881 = IMGetXPCStringFromDictionary();
      if (a4)
        v883 = a5;
      else
        v883 = 0;
      if (a4)
        v884 = a6;
      else
        v884 = 0;
      __XPCServerIMDAttachmentRecordDoesStickerPathHaveAttachments_IPCAction(v881, v882, v883, v884, v881);
      return 11;
    case 12:
      v15 = xpc_dictionary_get_int64(xdict, "numRecents");
      if (a4)
        v17 = a5;
      else
        v17 = 0;
      if (a4)
        v18 = a6;
      else
        v18 = 0;
      __XPCServerIMDAttachmentRecordCopyRecentFilenames_IPCAction(v15, v16, v17, v18, v15);
      return 12;
    case 13:
      if (IMOSLoggingEnabled())
      {
        v143 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v143, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v143, OS_LOG_TYPE_INFO, "IMDAttachmentRecordCopyAttachmentsForQueryWithLimit_IPCAction", buf, 2u);
        }
      }
      v144 = xpc_dictionary_get_int64(xdict, "queryType");
      if (xpc_dictionary_get_value(xdict, "afterRow"))
        v145 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", xpc_dictionary_get_int64(xdict, "afterRow"));
      else
        v145 = 0;
      v1066 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v1068 = a5;
      else
        v1068 = 0;
      if (a4)
        v1069 = a6;
      else
        v1069 = 0;
      __XPCServerIMDAttachmentRecordCopyAttachmentsForQueryWithLimit_IPCAction(v1066, v1067, v1068, v1069, v144, v145, v1066);
      return 13;
    case 14:
      if (IMOSLoggingEnabled())
      {
        v852 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v852, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v852, OS_LOG_TYPE_INFO, "IMDAttachmentRecordMarkAttachmentWithROWIDWithSyncState_IPCAction", buf, 2u);
        }
      }
      v853 = xpc_dictionary_get_int64(xdict, "rowid");
      v854 = xpc_dictionary_get_int64(xdict, "syncState");
      if (a4)
        v856 = a5;
      else
        v856 = 0;
      if (a4)
        v857 = a6;
      else
        v857 = 0;
      __XPCServerIMDAttachmentRecordMarkAttachmentWithROWIDWithSyncState_IPCAction(v854, v855, v856, v857, v853, v854);
      return 14;
    case 15:
      if (IMOSLoggingEnabled())
      {
        v185 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v185, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v185, OS_LOG_TYPE_INFO, "IMDAttachmentRecordMarkAttachmentWithROWIDAsSyncedWithCloudKit_IPCAction", buf, 2u);
        }
      }
      v186 = xpc_dictionary_get_int64(xdict, "rowid");
      if (a4)
        v188 = a5;
      else
        v188 = 0;
      if (a4)
        v189 = a6;
      else
        v189 = 0;
      __XPCServerIMDAttachmentRecordMarkAttachmentWithROWIDAsSyncedWithCloudKit_IPCAction(v186, v187, v188, v189, v186);
      return 15;
    case 16:
      v996 = IMOSLoggingEnabled();
      if ((_DWORD)v996)
      {
        v998 = OSLogHandleForIMFoundationCategory();
        v996 = os_log_type_enabled(v998, OS_LOG_TYPE_INFO);
        if ((_DWORD)v996)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v998, OS_LOG_TYPE_INFO, "IMDAttachmentRecordMarkAllAttachmentsAsNeedingCloudKitSync_IPCAction", buf, 2u);
        }
      }
      if (a4)
        v999 = a5;
      else
        v999 = 0;
      if (a4)
        v1000 = a6;
      else
        v1000 = 0;
      __XPCServerIMDAttachmentRecordMarkAllAttachmentsAsNeedingCloudKitSync_IPCAction(v996, v997, v999, v1000);
      return 16;
    case 17:
      v273 = IMOSLoggingEnabled();
      if ((_DWORD)v273)
      {
        v275 = OSLogHandleForIMFoundationCategory();
        v273 = os_log_type_enabled(v275, OS_LOG_TYPE_INFO);
        if ((_DWORD)v273)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v275, OS_LOG_TYPE_INFO, "IMDAttachmentResetAllAttachmentsInFailedCloudDownloadState_IPCAction", buf, 2u);
        }
      }
      if (a4)
        v276 = a5;
      else
        v276 = 0;
      if (a4)
        v277 = a6;
      else
        v277 = 0;
      __XPCServerIMDAttachmentResetAllAttachmentsInFailedCloudDownloadState_IPCAction(v273, v274, v276, v277);
      return 17;
    case 18:
      if (IMOSLoggingEnabled())
      {
        v972 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v972, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v972, OS_LOG_TYPE_INFO, "IMDAttachmentRecordCopyMessageForAttachmentGUID_IPCAction", buf, 2u);
        }
      }
      v973 = IMGetXPCStringFromDictionary();
      if (a4)
        v975 = a5;
      else
        v975 = 0;
      if (a4)
        v976 = a6;
      else
        v976 = 0;
      __XPCServerIMDAttachmentRecordCopyMessageForAttachmentGUID_IPCAction(v973, v974, v975, v976, v973);
      return 18;
    case 19:
      if (IMOSLoggingEnabled())
      {
        v311 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v311, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v311, OS_LOG_TYPE_INFO, "IMDAttachmentRecordUpdateAttachmentGUIDWithGUID_IPCAction", buf, 2u);
        }
      }
      v312 = IMGetXPCStringFromDictionary();
      v313 = IMGetXPCStringFromDictionary();
      if (a4)
        v315 = a5;
      else
        v315 = 0;
      if (a4)
        v316 = a6;
      else
        v316 = 0;
      __XPCServerIMDAttachmentRecordUpdateAttachmentGUIDWithGUID_IPCAction(v313, v314, v315, v316, v312, v313);
      return 19;
    case 20:
      v21 = IMOSLoggingEnabled();
      if ((_DWORD)v21)
      {
        v23 = OSLogHandleForIMFoundationCategory();
        v21 = os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
        if ((_DWORD)v21)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v23, OS_LOG_TYPE_INFO, "IMDAttachmentRecordGetPurgeableDiskSpace_IPCAction", buf, 2u);
        }
      }
      if (a4)
        v24 = a5;
      else
        v24 = 0;
      if (a4)
        v25 = a6;
      else
        v25 = 0;
      __XPCServerIMDAttachmentRecordGetPurgeableDiskSpace_IPCAction(v21, v22, v24, v25);
      return 20;
    case 21:
      v524 = IMOSLoggingEnabled();
      if ((_DWORD)v524)
      {
        v526 = OSLogHandleForIMFoundationCategory();
        v524 = os_log_type_enabled(v526, OS_LOG_TYPE_INFO);
        if ((_DWORD)v524)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v526, OS_LOG_TYPE_INFO, "IMDAttachmentRecordGetNonSyncedAttachmentDiskSpace_IPCAction", buf, 2u);
        }
      }
      if (a4)
        v527 = a5;
      else
        v527 = 0;
      if (a4)
        v528 = a6;
      else
        v528 = 0;
      __XPCServerIMDAttachmentRecordGetNonSyncedAttachmentDiskSpace_IPCAction(v524, v525, v527, v528);
      return 21;
    case 22:
      if (IMOSLoggingEnabled())
      {
        v793 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v793, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v793, OS_LOG_TYPE_INFO, "IMDAttachmentRecordCopyAttachmentsToMetricForDiskSpace_IPCAction", buf, 2u);
        }
      }
      v794 = xpc_dictionary_get_int64(xdict, "bytesToFreeUp");
      if (a4)
        v796 = a5;
      else
        v796 = 0;
      if (a4)
        v797 = a6;
      else
        v797 = 0;
      __XPCServerIMDAttachmentRecordCopyAttachmentsToMetricForDiskSpace_IPCAction(v794, v795, v796, v797, v794);
      return 22;
    case 23:
      if (IMOSLoggingEnabled())
      {
        v117 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v117, OS_LOG_TYPE_INFO, "IMDAttachmentRecordCopyMostRecentAttachmentsInMostRecentChats_IPCAction", buf, 2u);
        }
      }
      v118 = xpc_dictionary_get_int64(xdict, "chatLimit");
      v119 = xpc_dictionary_get_int64(xdict, "attachmentLimit");
      if (a4)
        v121 = a5;
      else
        v121 = 0;
      if (a4)
        v122 = a6;
      else
        v122 = 0;
      __XPCServerIMDAttachmentRecordCopyMostRecentAttachmentsInMostRecentChats_IPCAction(v119, v120, v121, v122, v118, v119);
      return 23;
    case 24:
      if (IMOSLoggingEnabled())
      {
        v432 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v432, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v432, OS_LOG_TYPE_INFO, "IMDAttachmentUpdateAttachmentFileSizeWithRowIDGreaterThanWatermark_IPCAction", buf, 2u);
        }
      }
      v433 = xpc_dictionary_get_int64(xdict, "watermark");
      if (a4)
        v435 = a5;
      else
        v435 = 0;
      if (a4)
        v436 = a6;
      else
        v436 = 0;
      __XPCServerIMDAttachmentUpdateAttachmentFileSizeWithRowIDGreaterThanWatermark_IPCAction(v433, v434, v435, v436, v433);
      return 24;
    case 25:
      if (IMOSLoggingEnabled())
      {
        v343 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v343, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v343, OS_LOG_TYPE_INFO, "IMDAttachmentRecordCopyAttachmentsToPurgeForDiskSpace_IPCAction", buf, 2u);
        }
      }
      v344 = xpc_dictionary_get_int64(xdict, "bytesToFreeUp");
      v345 = xpc_dictionary_get_int64(xdict, "startingOffset");
      if (a4)
        v347 = a5;
      else
        v347 = 0;
      if (a4)
        v348 = a6;
      else
        v348 = 0;
      __XPCServerIMDAttachmentRecordCopyAttachmentsToPurgeForDiskSpace_IPCAction(v345, v346, v347, v348, v344, v345);
      return 25;
    case 26:
      v146 = xpc_dictionary_get_int64(xdict, "numRecents");
      if (a4)
        v148 = a5;
      else
        v148 = 0;
      if (a4)
        v149 = a6;
      else
        v149 = 0;
      __XPCServerIMDAttachmentRecordDeleteAttachmentPreviewsOlderThan_IPCAction(v146, v147, v148, v149, v146);
      return 26;
    case 27:
      v268 = IMGetXPCArrayFromDictionary();
      v269 = IMGetXPCArrayFromDictionary();
      if (a4)
        v271 = a5;
      else
        v271 = 0;
      if (a4)
        v272 = a6;
      else
        v272 = 0;
      __XPCServerIMDAttachmentRecordCopyAttachmentGUIDsAndPathsForChatIdentifiersOnServices_IPCAction(v269, v270, v271, v272, v268, v269);
      return 27;
    case 28:
      v44 = IMGetXPCArrayFromDictionary();
      v45 = IMGetXPCArrayFromDictionary();
      v46 = IMGetXPCIntFromDictionary();
      if (a4)
        v48 = a5;
      else
        v48 = 0;
      if (a4)
        v49 = a6;
      else
        v49 = 0;
      __XPCServerIMDAttachmentRecordCopyPurgedAttachmentsForChatIdentifiersOnServices_IPCAction(v46, v47, v48, v49, v44, v45, v46);
      return 28;
    case 29:
      v1061 = IMGetXPCArrayFromDictionary();
      v1062 = IMGetXPCArrayFromDictionary();
      if (a4)
        v1064 = a5;
      else
        v1064 = 0;
      if (a4)
        v1065 = a6;
      else
        v1065 = 0;
      __XPCServerIMDAttachmentRecordCopyPurgedAttachmentsCountForChatIdentifiersOnServices_IPCAction(v1062, v1063, v1064, v1065, v1061, v1062);
      return 29;
    case 30:
      v675 = xpc_dictionary_get_int64(xdict, "numRecents");
      if (a4)
        v677 = a5;
      else
        v677 = 0;
      if (a4)
        v678 = a6;
      else
        v678 = 0;
      __XPCServerIMDAttachmentRecordCopyStickers_IPCAction(v675, v676, v677, v678, v675);
      return 30;
    case 31:
      v1276 = IMGetXPCStringFromDictionary();
      v1270 = xpc_dictionary_get_int64(xdict, "createdDate");
      v1264 = xpc_dictionary_get_int64(xdict, "startDate");
      v1258 = IMGetXPCStringFromDictionary();
      v1252 = IMGetXPCStringFromDictionary();
      v1246 = IMGetXPCStringFromDictionary();
      v1240 = IMGetXPCStringFromDictionary();
      v1234 = xpc_dictionary_get_int64(xdict, "transferState");
      v1228 = xpc_dictionary_get_BOOL(xdict, "isOutgoing");
      v1222 = IMGetXPCDictionaryFromDictionary();
      v1216 = IMGetXPCIntFromDictionary();
      v1210 = xpc_dictionary_get_BOOL(xdict, "isSticker");
      v1204 = IMGetXPCDictionaryFromDictionary();
      v1198 = IMGetXPCDictionaryFromDictionary();
      v1192 = xpc_dictionary_get_BOOL(xdict, "hideAttachment");
      v741 = xpc_dictionary_get_int64(xdict, "cloudKitSyncState");
      v742 = IMGetXPCDataFromDictionary();
      v743 = IMGetXPCStringFromDictionary();
      v744 = IMGetXPCStringFromDictionary();
      v745 = xpc_dictionary_get_int64(xdict, "isCommSafetySensitive");
      v746 = IMGetXPCStringFromDictionary();
      v747 = IMGetXPCStringFromDictionary();
      if (a4)
        v749 = a5;
      else
        v749 = 0;
      if (a4)
        v750 = a6;
      else
        v750 = 0;
      *(_QWORD *)&v1098 = v742;
      *((_QWORD *)&v1098 + 1) = v743;
      *((_QWORD *)&v1082 + 1) = v1246;
      *(_QWORD *)&v1082 = v1252;
      __XPCServerIMDAttachmentRecordBulkUpdate_IPCAction(v747, v748, v749, v750, v1276, v1270, v1264, v1258, v1082, v1240, v1234, v1228, v1216, v1222, v1210, v1204, v1198, v1192, v741,
        v1098,
        v744,
        v745,
        v746,
        v747);
      return 31;
    case 32:
      if (IMOSLoggingEnabled())
      {
        v1030 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v1030, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v1030, OS_LOG_TYPE_INFO, "In server for IMDAttachmentRecordDeleteAttachmentsDirectWithPredicate_IPCAction", buf, 2u);
        }
      }
      v1031 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v1032 = a5;
      else
        v1032 = 0;
      if (a4)
        v1033 = a6;
      else
        v1033 = 0;
      objc_msgSend(v1031, "handleDeleteAttachmentsDirectWithPredicate_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v1032, v1033);
      return 32;
    case 33:
      if (IMOSLoggingEnabled())
      {
        v177 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v177, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v177, OS_LOG_TYPE_INFO, "In server for IMDAttachmentRecordCopyAttachmentsDirectWithPredicate_IPCAction", buf, 2u);
        }
      }
      v178 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v179 = a5;
      else
        v179 = 0;
      if (a4)
        v180 = a6;
      else
        v180 = 0;
      objc_msgSend(v178, "handleIMDAttachmentRecordCopyFilteredUsingPredicateWithLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v179, v180);
      return 33;
    case 34:
      if (IMOSLoggingEnabled())
      {
        v1053 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v1053, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v1053, OS_LOG_TYPE_INFO, "In server for IMDAttachmentRecordCopySortedAttachmentsFilteredUsingPredicateWithLimit_IPCAction", buf, 2u);
        }
      }
      v1054 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v1055 = a5;
      else
        v1055 = 0;
      if (a4)
        v1056 = a6;
      else
        v1056 = 0;
      objc_msgSend(v1054, "handleIMDAttachmentRecordCopySortedAttachmentsFilteredUsingPredicateWithLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v1055, v1056);
      return 34;
    case 35:
      v1047 = IMGetXPCArrayFromDictionary();
      if (a4)
        v1049 = a5;
      else
        v1049 = 0;
      if (a4)
        v1050 = a6;
      else
        v1050 = 0;
      __XPCServerIMDCNRecordIDAndHistoryTokenForAliases_IPAction(v1047, v1048, v1049, v1050, v1047);
      return 35;
    case 36:
      v466 = IMGetXPCDictionaryFromDictionary();
      v467 = IMGetXPCDataFromDictionary();
      if (a4)
        v469 = a5;
      else
        v469 = 0;
      if (a4)
        v470 = a6;
      else
        v470 = 0;
      __XPCServerIMDCNRecordIDAndHistoryTokenForAliases_asyncIPAction(v467, v468, v469, v470, v466, v467);
      return 36;
    case 37:
      v35 = IMGetXPCArrayFromDictionary();
      if (a4)
        v37 = a5;
      else
        v37 = 0;
      if (a4)
        v38 = a6;
      else
        v38 = 0;
      __XPCServerIMDCNRecordIDForAliases_IPAction(v35, v36, v37, v38, v35);
      return 37;
    case 38:
      v59 = IMGetXPCStringFromDictionary();
      if (a4)
        v61 = a5;
      else
        v61 = 0;
      if (a4)
        v62 = a6;
      else
        v62 = 0;
      __XPCServerIMDIsFavoritedContact_IPCAction(v59, v60, v61, v62, v59);
      return 38;
    case 39:
      v156 = IMGetXPCStringFromDictionary();
      v157 = IMGetXPCStringFromDictionary();
      v158 = IMGetXPCStringFromDictionary();
      v159 = IMGetXPCStringFromDictionary();
      v160 = IMGetXPCStringFromDictionary();
      if (a4)
        v162 = a5;
      else
        v162 = 0;
      if (a4)
        v163 = a6;
      else
        v163 = 0;
      __XPCServerIMDHandleRecordCreate_IPCAction(v160, v161, v162, v163, v156, v157, v158, v159, v160);
      return 39;
    case 40:
      v190 = xpc_dictionary_get_int64(xdict, "handleID");
      v191 = IMGetXPCStringFromDictionary();
      v192 = IMGetXPCStringFromDictionary();
      v193 = IMGetXPCStringFromDictionary();
      v194 = IMGetXPCStringFromDictionary();
      v195 = IMGetXPCStringFromDictionary();
      if (a4)
        v197 = a5;
      else
        v197 = 0;
      if (a4)
        v198 = a6;
      else
        v198 = 0;
      __XPCServerIMDHandleRecordBulkUpdate_IPCAction(v195, v196, v197, v198, v190, v191, v192, v193, v194, v195);
      return 40;
    case 41:
      v39 = IMGetXPCStringFromDictionary();
      v40 = IMGetXPCStringFromDictionary();
      if (a4)
        v42 = a5;
      else
        v42 = 0;
      if (a4)
        v43 = a6;
      else
        v43 = 0;
      __XPCServerIMDHandleRecordCopyHandleForIDOnService_IPCAction(v40, v41, v42, v43, v39, v40);
      return 41;
    case 42:
      v786 = IMGetXPCStringFromDictionary();
      v787 = IMGetXPCStringFromDictionary();
      if (a4)
        v789 = a5;
      else
        v789 = 0;
      if (a4)
        v790 = a6;
      else
        v790 = 0;
      __XPCServerIMDMessageRecordUnassociateMessageWithGUIDFromAttachmentWithGUID_IPCAction(v787, v788, v789, v790, v786, v787);
      return 42;
    case 43:
      v30 = IMGetXPCStringFromDictionary();
      v31 = IMGetXPCStringFromDictionary();
      if (a4)
        v33 = a5;
      else
        v33 = 0;
      if (a4)
        v34 = a6;
      else
        v34 = 0;
      __XPCServerIMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID_IPCAction(v31, v32, v33, v34, v30, v31);
      return 43;
    case 44:
      v940 = IMGetXPCArrayFromDictionary();
      if (a4)
        v942 = a5;
      else
        v942 = 0;
      if (a4)
        v943 = a6;
      else
        v943 = 0;
      __XPCServerIMDMessageRecordCopyMessagesForGUIDs_IPCAction(v940, v941, v942, v943, v940);
      return 44;
    case 45:
      v26 = IMGetXPCStringFromDictionary();
      if (a4)
        v28 = a5;
      else
        v28 = 0;
      if (a4)
        v29 = a6;
      else
        v29 = 0;
      __XPCServerIMDMessageRecordCopyMessagesForAssociatedGUID_IPCAction(v26, v27, v28, v29, v26);
      return 45;
    case 46:
      v808 = xpc_dictionary_get_int64(xdict, "lowerRowID");
      v809 = xpc_dictionary_get_int64(xdict, "maxRowID");
      if (a4)
        v811 = a5;
      else
        v811 = 0;
      if (a4)
        v812 = a6;
      else
        v812 = 0;
      __XPCServerIMDMessageRecordCopyMessagesBetweenRowIDs_IPCAction(v809, v810, v811, v812, v808, v809);
      return 46;
    case 47:
      v88 = IMGetXPCStringFromDictionary();
      if (a4)
        v90 = a5;
      else
        v90 = 0;
      if (a4)
        v91 = a6;
      else
        v91 = 0;
      __XPCServerIMDMessageRecordCopyMessageForGUID_IPCAction(v88, v89, v90, v91, v88);
      return 47;
    case 48:
      v756 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v757 = a5;
      else
        v757 = 0;
      if (a4)
        v758 = a6;
      else
        v758 = 0;
      objc_msgSend(v756, "handleIMDMessageRecordCopyLastMessageForChatWithRowID_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v757, v758);
      return 48;
    case 49:
      if (a4)
        v1051 = a5;
      else
        v1051 = 0;
      if (a4)
        v1052 = a6;
      else
        v1052 = 0;
      __XPCServerIMDMessageRecordCopyLastReceivedMessage_IPCAction(-1, a2, v1051, v1052);
      return 49;
    case 50:
      v401 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v403 = a5;
      else
        v403 = 0;
      if (a4)
        v404 = a6;
      else
        v404 = 0;
      __XPCServerIMDMessageRecordCopyLastReceivedMessageLimit_IPCAction(v401, v402, v403, v404, v401);
      return 50;
    case 51:
      v453 = xpc_dictionary_get_int64(xdict, "rowID");
      if (a4)
        v455 = a5;
      else
        v455 = 0;
      if (a4)
        v456 = a6;
      else
        v456 = 0;
      __XPCServerIMDMessageRecordCopyMessageForRowID_IPCAction(v453, v454, v455, v456, v453);
      return 51;
    case 52:
      v804 = IMGetXPCArrayFromDictionary();
      if (a4)
        v806 = a5;
      else
        v806 = 0;
      if (a4)
        v807 = a6;
      else
        v807 = 0;
      __XPCServerIMDMessageRecordCopyMessagesForRowIDs_IPCAction(v804, v805, v806, v807, v804);
      return 52;
    case 53:
      v671 = IMGetXPCArrayFromDictionary();
      if (a4)
        v673 = a5;
      else
        v673 = 0;
      if (a4)
        v674 = a6;
      else
        v674 = 0;
      __XPCServerIMDMessageRecordCopyNewMessagesForKnownRowIDs_IPCAction(v671, v672, v673, v674, v671);
      return 53;
    case 54:
      v123 = IMGetXPCArrayFromDictionary();
      if (a4)
        v125 = a5;
      else
        v125 = 0;
      if (a4)
        v126 = a6;
      else
        v126 = 0;
      __XPCServerIMDMessageRecordDeleteMessagesForGUIDs_IPCAction(v123, v124, v125, v126, v123);
      return 54;
    case 55:
      v944 = xpc_dictionary_get_int64(xdict, "days");
      if (a4)
        v946 = a5;
      else
        v946 = 0;
      if (a4)
        v947 = a6;
      else
        v947 = 0;
      __XPCServerIMDMessageRecordDeleteMessagesOlderThanDays_IPCAction(v944, v945, v946, v947, v944);
      return 55;
    case 56:
      v235 = IMGetXPCStringFromDictionary();
      v236 = IMGetXPCStringFromDictionary();
      v237 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v239 = a5;
      else
        v239 = 0;
      if (a4)
        v240 = a6;
      else
        v240 = 0;
      __XPCServerIMDMessageRecordCopyMessagesWithRoomnameOnServiceLimit_IPCAction(v237, v238, v239, v240, v235, v236, v237);
      return 56;
    case 57:
      v687 = IMGetXPCArrayFromDictionary();
      v688 = IMGetXPCArrayFromDictionary();
      v689 = xpc_dictionary_get_int64(xdict, "limit");
      v690 = IMGetXPCStringFromDictionary();
      v691 = IMGetXPCStringFromDictionary();
      v692 = xpc_dictionary_get_BOOL(xdict, "only_messages");
      v693 = xpc_dictionary_get_BOOL(xdict, "only_unread");
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      if (a4)
        v694 = a5;
      else
        v694 = 0;
      v1279 = 3221225472;
      if (a4)
        v695 = a6;
      else
        v695 = 0;
      v1280 = sub_1ABC2FA5C;
      v1281 = &unk_1E5ABF700;
      v1282 = v687;
      v1283 = v688;
      v1284 = v690;
      v1285 = v691;
      v1289 = v692;
      v1290 = v693;
      v1287 = v695;
      v1288 = v689;
      v1286 = v694;
      IMDPersistencePerformBlock(buf, 1);
      return 57;
    case 58:
      v50 = IMGetXPCArrayFromDictionary();
      v51 = IMGetXPCArrayFromDictionary();
      v52 = xpc_dictionary_get_int64(xdict, "numberOfMessagesBefore");
      v53 = xpc_dictionary_get_int64(xdict, "numberOfMessagesAfter");
      v54 = IMGetXPCStringFromDictionary();
      v55 = IMGetXPCStringFromDictionary();
      if (a4)
        v57 = a5;
      else
        v57 = 0;
      if (a4)
        v58 = a6;
      else
        v58 = 0;
      __XPCServerIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifier_IPCAction(v55, v56, v57, v58, v50, v51, v54, v55, v52, v53);
      return 58;
    case 59:
      v932 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v933 = a5;
      else
        v933 = 0;
      if (a4)
        v934 = a6;
      else
        v934 = 0;
      objc_msgSend(v932, "handleIMDMessageRecordCopySortedMessagesForChatGUIDFilteredUsingPredicateWithLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v933, v934);
      return 59;
    case 60:
      v849 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v850 = a5;
      else
        v850 = 0;
      if (a4)
        v851 = a6;
      else
        v851 = 0;
      objc_msgSend(v849, "handleIMDMessageRecordCopyMessageWithGUIDExcludingRecoverableMessages_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v850, v851);
      return 60;
    case 61:
      v100 = IMGetXPCArrayFromDictionary();
      v101 = IMGetXPCArrayFromDictionary();
      v102 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v104 = a5;
      else
        v104 = 0;
      if (a4)
        v105 = a6;
      else
        v105 = 0;
      __XPCServerIMDMessageRecordCopyFrequentRepliesForChatIdentifiersOnServicesLimit_IPCAction(v102, v103, v104, v105, v100, v101, v102);
      return 61;
    case 62:
      v965 = IMGetXPCArrayFromDictionary();
      v966 = IMGetXPCArrayFromDictionary();
      if (a4)
        v968 = a5;
      else
        v968 = 0;
      if (a4)
        v969 = a6;
      else
        v969 = 0;
      __XPCServerIMDMessageRecordCopyGUIDsForMessagesWithChatIdentifiersOnServices_IPCAction(v966, v967, v968, v969, v965, v966);
      return 62;
    case 63:
      v207 = IMGetXPCArrayFromDictionary();
      v208 = IMGetXPCArrayFromDictionary();
      v209 = IMGetXPCArrayFromDictionary();
      if (a4)
        v211 = a5;
      else
        v211 = 0;
      if (a4)
        v212 = a6;
      else
        v212 = 0;
      __XPCServerIMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServices_IPCAction(v209, v210, v211, v212, v207, v208, v209);
      return 63;
    case 64:
      v899 = IMGetXPCStringFromDictionary();
      if (a4)
        v901 = a5;
      else
        v901 = 0;
      if (a4)
        v902 = a6;
      else
        v902 = 0;
      __XPCServerIMDChatGetChatsThatContainRecipient_IPCAction(v899, v900, v901, v902, v899);
      return 64;
    case 65:
      v127 = IMGetXPCStringFromDictionary();
      v128 = IMGetXPCStringFromDictionary();
      v129 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v131 = a5;
      else
        v131 = 0;
      if (a4)
        v132 = a6;
      else
        v132 = 0;
      __XPCServerIMDMessageRecordCopyMessagesWithHandleOnServiceLimit_IPCAction(v129, v130, v131, v132, v127, v128, v129);
      return 65;
    case 66:
      v278 = IMGetXPCStringFromDictionary();
      v279 = IMGetXPCStringFromDictionary();
      v280 = IMGetXPCArrayFromDictionary();
      v281 = IMGetXPCArrayFromDictionary();
      v282 = xpc_dictionary_get_double(xdict, "searchAfter");
      v283 = IMGetXPCArrayFromDictionary();
      v284 = IMGetXPCArrayFromDictionary();
      v285 = xpc_dictionary_get_BOOL(xdict, "includeFromMe");
      if (a4)
        v287 = a5;
      else
        v287 = 0;
      if (a4)
        v288 = a6;
      else
        v288 = 0;
      __XPCServerIMDMessageRecordCopyMessageMatchingBodyStringWithChatIdentifiersServicesSkippingGUIDs_IPCAction(v282, v285, v286, v287, v288, v278, v279, v280, v281, v285, v283, v284);
      return 66;
    case 67:
      v1006 = IMGetXPCStringFromDictionary();
      v1007 = IMGetXPCStringFromDictionary();
      v1008 = IMGetXPCArrayFromDictionary();
      v1009 = IMGetXPCArrayFromDictionary();
      v1012 = xpc_dictionary_get_double(xdict, "searchAfter");
      if (a4)
        v1013 = a5;
      else
        v1013 = 0;
      if (a4)
        v1014 = a6;
      else
        v1014 = 0;
      __XPCServerIMDMessageRecordCopyMessageMatchingBodyStringWithHandleSkippingServicesSkippingGUIDs_IPCAction(v1012, v1010, v1011, v1013, v1014, v1006, v1007, v1008, v1009);
      return 67;
    case 68:
      v922 = IMGetXPCStringFromDictionary();
      v923 = IMGetXPCStringFromDictionary();
      v924 = IMGetXPCStringFromDictionary();
      v925 = xpc_dictionary_get_BOOL(xdict, "matchingIsSOS");
      v926 = IMGetXPCStringFromDictionary();
      v929 = xpc_dictionary_get_double(xdict, "searchAfter");
      if (a4)
        v930 = a5;
      else
        v930 = 0;
      if (a4)
        v931 = a6;
      else
        v931 = 0;
      __XPCServerIMDMessageRecordCopyMessageMatchingBodyStringWithHandleMatchingServiceMatchingSOSSkippingGUID_IPCAction(v929, v927, v928, v930, v931, v922, v923, v924, v925, v926);
      return 68;
    case 69:
      v167 = IMGetXPCStringFromDictionary();
      v168 = IMGetXPCStringFromDictionary();
      v169 = xpc_dictionary_get_int64(xdict, "replaceID");
      if (a4)
        v171 = a5;
      else
        v171 = 0;
      if (a4)
        v172 = a6;
      else
        v172 = 0;
      __XPCServerIMDMessageRecordCopyMessageWithHandleOnServiceWithReplaceID_IPCAction(v169, v170, v171, v172, v167, v168, v169);
      return 69;
    case 70:
      v1040 = xpc_dictionary_get_int64(xdict, "limit");
      v1041 = IMGetXPCArrayFromDictionary();
      v1042 = IMGetXPCArrayFromDictionary();
      v1043 = IMGetXPCStringFromDictionary();
      if (a4)
        v1045 = a5;
      else
        v1045 = 0;
      if (a4)
        v1046 = a6;
      else
        v1046 = 0;
      __XPCServerIMDMessageRecordCopyUnreadIncomingMessagesWithChatIdentifiersOnServicesToLimitFallbackGUID_IPCAction(v1043, v1044, v1045, v1046, v1041, v1042, v1040, v1043);
      return 70;
    case 71:
      v896 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v897 = a5;
      else
        v897 = 0;
      if (a4)
        v898 = a6;
      else
        v898 = 0;
      objc_msgSend(v896, "handleIMDMessageRecordCopyScheduledMessagesForChatGUIDToLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v897, v898);
      return 71;
    case 72:
      v727 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v728 = a5;
      else
        v728 = 0;
      if (a4)
        v729 = a6;
      else
        v729 = 0;
      objc_msgSend(v727, "handleIMDMessageRecordCopyScheduledMessagesToDeleteFromCloudKitToLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v728, v729);
      return 72;
    case 73:
      v67 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v68 = a5;
      else
        v68 = 0;
      if (a4)
        v69 = a6;
      else
        v69 = 0;
      objc_msgSend(v67, "handleIMDMessageRecordAddScheduledMessageGUIDandCKRecordToDeleteFromCloudKit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v68, v69);
      return 73;
    case 74:
      v1021 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v1022 = a5;
      else
        v1022 = 0;
      if (a4)
        v1023 = a6;
      else
        v1023 = 0;
      objc_msgSend(v1021, "handleIMDMessageDeleteTombstonedScheduledMessagesWithRecordIDs_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v1022, v1023);
      return 74;
    case 75:
      v84 = xpc_dictionary_get_int64(xdict, "afterRowID");
      if (a4)
        v86 = a5;
      else
        v86 = 0;
      if (a4)
        v87 = a6;
      else
        v87 = 0;
      __XPCServerIMDMessageRecordCopyUndeliveredOneToOneiMessages_IPCAction(v84, v85, v86, v87, v84);
      return 75;
    case 76:
      v70 = xpc_dictionary_get_int64(xdict, "afterRowID");
      if (a4)
        v72 = a5;
      else
        v72 = 0;
      if (a4)
        v73 = a6;
      else
        v73 = 0;
      __XPCServerIMDMessageRecordCopyExpiringOrExpiredMessages_IPCAction(v70, v71, v72, v73, v70);
      return 76;
    case 77:
      v586 = xpc_dictionary_get_int64(xdict, "afterRowID");
      if (a4)
        v588 = a5;
      else
        v588 = 0;
      if (a4)
        v589 = a6;
      else
        v589 = 0;
      __XPCServerIMDMessageRecordCopyUnsentUnfailedMessages_IPCAction(v586, v587, v588, v589, v586);
      return 77;
    case 78:
      v701 = IMGetXPCStringFromDictionary();
      if (a4)
        v703 = a5;
      else
        v703 = 0;
      if (a4)
        v704 = a6;
      else
        v704 = 0;
      __XPCServerIMDMessageRecordCopyMessageActionItemsForOriginalMessageGUID_IPCAction(v701, v702, v703, v704, v701);
      return 78;
    case 79:
      v766 = IMGetXPCArrayFromDictionary();
      v767 = IMGetXPCArrayFromDictionary();
      if (a4)
        v769 = a5;
      else
        v769 = 0;
      if (a4)
        v770 = a6;
      else
        v770 = 0;
      __XPCServerIMDChatGetMessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles_IPCAction(v767, v768, v769, v770, v766, v767);
      return 79;
    case 80:
      v385 = IMGetXPCArrayFromDictionary();
      v386 = IMGetXPCArrayFromDictionary();
      if (a4)
        v388 = a5;
      else
        v388 = 0;
      if (a4)
        v389 = a6;
      else
        v389 = 0;
      __XPCServerIMDChatGetMessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs_IPCAction(v386, v387, v388, v389, v385, v386);
      return 80;
    case 81:
      v150 = IMGetXPCStringFromDictionary();
      v151 = IMGetXPCStringFromDictionary();
      v152 = IMGetXPCStringFromDictionary();
      if (a4)
        v154 = a5;
      else
        v154 = 0;
      if (a4)
        v155 = a6;
      else
        v155 = 0;
      __XPCServerIMDChatRemapChatsWithLastAddressedSIMIDToNewLastAddressedIDs_IPCAction(v152, v153, v154, v155, v150, v151, v152);
      return 81;
    case 82:
      if (a4)
        v599 = a5;
      else
        v599 = 0;
      if (a4)
        v600 = a6;
      else
        v600 = 0;
      __XPCServerIMDMessageRecordCountAllUnreadMessages_IPCAction(-1, a2, v599, v600);
      return 82;
    case 83:
      v336 = IMGetXPCStringFromDictionary();
      if (a4)
        v338 = a5;
      else
        v338 = 0;
      if (a4)
        v339 = a6;
      else
        v339 = 0;
      __XPCServerIMDMessageRecordCountAllUnreadMessagesForChatGUID_IPCAction(v336, v337, v338, v339, v336);
      return 83;
    case 84:
      v96 = xpc_dictionary_get_int64(xdict, "chatID");
      if (a4)
        v98 = a5;
      else
        v98 = 0;
      if (a4)
        v99 = a6;
      else
        v99 = 0;
      __XPCServerIMDMessageRecordCountAllUnreadMessagesForChatRowID_IPCAction(v96, v97, v98, v99, v96);
      return 84;
    case 85:
      v511 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v512 = a5;
      else
        v512 = 0;
      if (a4)
        v513 = a6;
      else
        v513 = 0;
      objc_msgSend(v511, "handleIMDMessageRecordCopyAllUnreadMessages_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v512, v513);
      return 48;
    case 86:
      if (a4)
        v1019 = a5;
      else
        v1019 = 0;
      if (a4)
        v1020 = a6;
      else
        v1020 = 0;
      __XPCServerIMDMessageRecordLastFailedMessageRowID_IPCAction(-1, a2, v1019, v1020);
      return 86;
    case 87:
      if (a4)
        v1028 = a5;
      else
        v1028 = 0;
      if (a4)
        v1029 = a6;
      else
        v1029 = 0;
      __XPCServerIMDMessageRecordLastSyncedMessageRowID_IPCAction(-1, a2, v1028, v1029);
      return 87;
    case 88:
      if (a4)
        v989 = a5;
      else
        v989 = 0;
      if (a4)
        v990 = a6;
      else
        v990 = 0;
      __XPCServerIMDMessageRecordLastFailedMessageDate_IPCAction(-1, a2, v989, v990);
      return 88;
    case 89:
      if (a4)
        v223 = a5;
      else
        v223 = 0;
      if (a4)
        v224 = a6;
      else
        v224 = 0;
      __XPCServerIMDMessageRecordGetMostRecentMessageDate_IPCAction(-1, a2, v223, v224);
      return 89;
    case 90:
      v303 = IMGetXPCStringFromDictionary();
      if (a4)
        v305 = a5;
      else
        v305 = 0;
      if (a4)
        v306 = a6;
      else
        v306 = 0;
      __XPCServerIMDMessageRecordGetIndentifierForMessageWithGUID_IPCAction(v303, v304, v305, v306, v303);
      return 90;
    case 91:
      if (a4)
        v938 = a5;
      else
        v938 = 0;
      if (a4)
        v939 = a6;
      else
        v939 = 0;
      __XPCServerIMDMessageRecordMaxMessageIDFromChatMessageJoin_IPCAction(-1, a2, v938, v939);
      return 91;
    case 92:
      if (a4)
        v914 = a5;
      else
        v914 = 0;
      if (a4)
        v915 = a6;
      else
        v915 = 0;
      __XPCServerIMDMessageRecordGetMessagesSequenceNumber_IPCAction(-1, a2, v914, v915);
      return 92;
    case 93:
      v92 = IMGetXPCStringFromDictionary();
      if (a4)
        v94 = a5;
      else
        v94 = 0;
      if (a4)
        v95 = a6;
      else
        v95 = 0;
      __XPCServerIMDMessageRecordMarkMessageGUIDAsDeduplicated_IPCAction(v92, v93, v94, v95, v92);
      return 93;
    case 94:
      if (a4)
        v1038 = a5;
      else
        v1038 = 0;
      if (a4)
        v1039 = a6;
      else
        v1039 = 0;
      __XPCServerIMDMessageRecordMarkFailedAllUnsentUnfailedMessages_IPCAction(-1, a2, v1038, v1039);
      return 94;
    case 95:
      if (a4)
        v490 = a5;
      else
        v490 = 0;
      if (a4)
        v491 = a6;
      else
        v491 = 0;
      __XPCServerIMDMessageRecordDeleteOrphanedMessages_IPCAction(-1, a2, v490, v491);
      return 95;
    case 96:
      v110 = IMGetXPCStringFromDictionary();
      v111 = IMGetXPCArrayFromDictionary();
      v112 = IMGetXPCCodableFromDictionaryWithStandardAllowlist();
      v113 = xpc_dictionary_get_BOOL(xdict, "fromMe");
      if (a4)
        v115 = a5;
      else
        v115 = 0;
      if (a4)
        v116 = a6;
      else
        v116 = 0;
      __XPCServerIMDMessageRecordCopyAndMarkAsReadMessagesPriorToGuidMatchingChatGUIDs_IPCAction(v113, v114, v115, v116, v110, v111, v112, v113);
      return 96;
    case 97:
      v980 = IMGetXPCStringFromDictionary();
      if (a4)
        v982 = a5;
      else
        v982 = 0;
      if (a4)
        v983 = a6;
      else
        v983 = 0;
      __XPCServerIMDMessageRecordCopyAllUnplayedMessageGUIDsForChatGUID_IPCAction(v980, v981, v982, v983, v980);
      return 97;
    case 98:
      v813 = xpc_dictionary_get_int64(xdict, "limit");
      v814 = xpc_dictionary_get_int64(xdict, "rowID");
      if (a4)
        v816 = a5;
      else
        v816 = 0;
      if (a4)
        v817 = a6;
      else
        v817 = 0;
      __XPCServerIMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID_IPCAction(v814, v815, v816, v817, v813, v814);
      return 98;
    case 99:
      v984 = xpc_dictionary_get_int64(xdict, "limit");
      v985 = xpc_dictionary_get_int64(xdict, "date");
      if (a4)
        v987 = a5;
      else
        v987 = 0;
      if (a4)
        v988 = a6;
      else
        v988 = 0;
      __XPCServerIMDMessageRecordCopyNewestFailedOutgoingMessagesToLimitAfterDate_IPCAction(v985, v986, v987, v988, v984, v985);
      return 99;
    case 100:
      v872 = xpc_dictionary_get_int64(xdict, "limit");
      v873 = xpc_dictionary_get_int64(xdict, "rowID");
      if (a4)
        v875 = a5;
      else
        v875 = 0;
      if (a4)
        v876 = a6;
      else
        v876 = 0;
      __XPCServerIMDMessageRecordCopyMessagesDataDetectionResults_IPCAction(v873, v874, v875, v876, v872, v873);
      return 100;
    case 101:
      v1024 = IMGetXPCArrayFromDictionary();
      if (a4)
        v1026 = a5;
      else
        v1026 = 0;
      if (a4)
        v1027 = a6;
      else
        v1027 = 0;
      __XPCServerIMDMessageRecordCopyMostRecentUseageOfAddresses_IPCAction(v1024, v1025, v1026, v1027, v1024);
      return 101;
    case 102:
      v1273 = IMGetXPCStringFromDictionary();
      v1267 = xpc_dictionary_get_int64(xdict, "date");
      v1261 = xpc_dictionary_get_int64(xdict, "dateRead");
      v1255 = xpc_dictionary_get_int64(xdict, "dateDelivered");
      v1249 = xpc_dictionary_get_int64(xdict, "datePlayed");
      v1243 = xpc_dictionary_get_int64(xdict, "error");
      v1237 = xpc_dictionary_get_int64(xdict, "type");
      v1231 = xpc_dictionary_get_int64(xdict, "replaceID");
      v1225 = IMGetXPCCodableFromDictionaryWithStandardAllowlist();
      v1219 = IMGetXPCStringFromDictionary();
      v1213 = IMGetXPCDataFromDictionary();
      v1207 = IMGetXPCStringFromDictionary();
      v1201 = IMGetXPCStringFromDictionary();
      v1195 = IMGetXPCStringFromDictionary();
      v1189 = IMGetXPCStringFromDictionary();
      v1184 = IMGetXPCStringFromDictionary();
      v1180 = IMGetXPCStringFromDictionary();
      v1176 = IMGetXPCStringFromDictionary();
      v1172 = IMGetXPCStringFromDictionary();
      v1168 = xpc_dictionary_get_int64(xdict, "groupActionType");
      v1165 = xpc_dictionary_get_int64(xdict, "itemType");
      v1163 = IMGetXPCStringFromDictionary();
      v1161 = xpc_dictionary_get_int64(xdict, "shareStatus");
      v1159 = xpc_dictionary_get_int64(xdict, "shareDirection");
      v1157 = xpc_dictionary_get_int64(xdict, "expireState");
      v1155 = xpc_dictionary_get_int64(xdict, "messageActionType");
      v1153 = IMGetXPCStringFromDictionary();
      v1151 = xpc_dictionary_get_int64(xdict, "associatedMessageType");
      v1149 = xpc_dictionary_get_int64(xdict, "associatedMessageRangeLocation");
      v1147 = xpc_dictionary_get_int64(xdict, "associatedMessageRangeLength");
      v1145 = IMGetXPCStringFromDictionary();
      v1143 = IMGetXPCDataFromDictionary();
      v1141 = IMGetXPCStringFromDictionary();
      v1139 = xpc_dictionary_get_int64(xdict, "timeExpressiveSendPlayed");
      v1137 = IMGetXPCDataFromDictionary();
      v1135 = xpc_dictionary_get_int64(xdict, "cloudKitSyncState");
      v1133 = IMGetXPCStringFromDictionary();
      v1131 = IMGetXPCDataFromDictionary();
      v1129 = IMGetXPCStringFromDictionary();
      v1127 = IMGetXPCDictionaryFromDictionary();
      v1125 = IMGetXPCStringFromDictionary();
      v1123 = IMGetXPCStringFromDictionary();
      v1121 = xpc_dictionary_get_int64(xdict, "sortID");
      v1120 = IMGetXPCStringFromDictionary();
      v1119 = IMGetXPCStringFromDictionary();
      v1118 = IMGetXPCStringFromDictionary();
      v1117 = IMGetXPCStringFromDictionary();
      v248 = xpc_dictionary_get_int64(xdict, "partCount");
      v249 = xpc_dictionary_get_int64(xdict, "dateEdited");
      v250 = IMGetXPCStringFromDictionary();
      v251 = IMGetXPCStringFromDictionary();
      v252 = IMGetXPCStringFromDictionary();
      v253 = xpc_dictionary_get_int64(xdict, "scheduleType");
      v254 = xpc_dictionary_get_int64(xdict, "scheduleState");
      if (a4)
        v256 = a5;
      else
        v256 = 0;
      if (a4)
        v257 = a6;
      else
        v257 = 0;
      *((_QWORD *)&v1116 + 1) = v251;
      *(_QWORD *)&v1116 = v250;
      *((_QWORD *)&v1114 + 1) = v1119;
      *(_QWORD *)&v1114 = v1120;
      *(_QWORD *)&v1112 = v1133;
      *((_QWORD *)&v1112 + 1) = v1131;
      *(_QWORD *)&v1109 = v1145;
      *((_QWORD *)&v1109 + 1) = v1143;
      *((_QWORD *)&v1108 + 1) = v1149;
      *(_QWORD *)&v1108 = v1151;
      *(_QWORD *)&v1102 = v1168;
      *((_QWORD *)&v1102 + 1) = v1161;
      *((_QWORD *)&v1095 + 1) = v1189;
      *((_QWORD *)&v1092 + 1) = v1201;
      *(_QWORD *)&v1095 = v1195;
      *(_QWORD *)&v1092 = v1207;
      *((_QWORD *)&v1079 + 1) = v1243;
      *(_QWORD *)&v1079 = v1249;
      __XPCServerIMDMessageRecordCreate_IPCAction(v254, v255, v256, v257, v1273, v1267, v1261, v1255, v1079, v1237, v1231, v1225, v1219, v1213, v1092, v1095, v1184, v1180, v1176,
        v1165,
        v1163,
        v1102,
        v1159,
        v1172,
        v1157,
        v1155,
        v1153,
        v1108,
        v1147,
        v1109,
        v1141,
        v1139,
        v1137,
        v1135,
        v1112,
        v1129,
        v1127,
        v1125,
        v1123,
        v1121,
        v1114,
        v1118,
        v1117,
        v248,
        v249,
        v1116,
        v252,
        v253,
        v254);
      return 102;
    case 103:
      v106 = xpc_dictionary_get_int64(xdict, "messageID");
      if (a4)
        v108 = a5;
      else
        v108 = 0;
      if (a4)
        v109 = a6;
      else
        v109 = 0;
      __XPCServerIMDMessageRecordCopyChats_IPCAction(v106, v107, v108, v109, v106);
      return 103;
    case 104:
      v352 = IMGetXPCStringFromDictionary();
      if (a4)
        v354 = a5;
      else
        v354 = 0;
      if (a4)
        v355 = a6;
      else
        v355 = 0;
      __XPCServerIMDMessageRecordChatForMessageGUID_IPCAction(v352, v353, v354, v355, v352);
      return 104;
    case 105:
      v204 = xpc_dictionary_get_int64(xdict, "messageID");
      if (a4)
        v205 = a5;
      else
        v205 = 0;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v1279 = 3221225472;
      if (a4)
        v206 = a6;
      else
        v206 = 0;
      v1280 = sub_1ABC34A48;
      v1281 = &unk_1E5ABF4F8;
      v1283 = v206;
      v1284 = v204;
      v1282 = v205;
      IMDPersistencePerformBlock(buf, 1);
      return 105;
    case 106:
      v390 = xpc_dictionary_get_int64(xdict, "messageID");
      v391 = xpc_dictionary_get_int64(xdict, "handleID");
      if (a4)
        v393 = a5;
      else
        v393 = 0;
      if (a4)
        v394 = a6;
      else
        v394 = 0;
      __XPCServerIMDMessageRecordSetHandle_IPCAction(v391, v392, v393, v394, v390, v391);
      return 106;
    case 107:
      v823 = xpc_dictionary_get_int64(xdict, "messageID");
      if (a4)
        v825 = a5;
      else
        v825 = 0;
      if (a4)
        v826 = a6;
      else
        v826 = 0;
      __XPCServerIMDMessageRecordCopyHandle_IPCAction(v823, v824, v825, v826, v823);
      return 107;
    case 108:
      v582 = xpc_dictionary_get_int64(xdict, "messageID");
      if (a4)
        v584 = a5;
      else
        v584 = 0;
      if (a4)
        v585 = a6;
      else
        v585 = 0;
      __XPCServerIMDMessageRecordCopyOtherHandle_IPCAction(v582, v583, v584, v585, v582);
      return 108;
    case 109:
      v1277 = xpc_dictionary_get_int64(xdict, "messageID");
      v1271 = xpc_dictionary_get_int64(xdict, "replaceID");
      v1265 = IMGetXPCStringFromDictionary();
      v1259 = xpc_dictionary_get_int64(xdict, "fzDate");
      v1253 = xpc_dictionary_get_int64(xdict, "fzDateRead");
      v1247 = xpc_dictionary_get_int64(xdict, "fzDateDelivered");
      v1241 = xpc_dictionary_get_int64(xdict, "fzDatePlayed");
      v1235 = IMGetXPCStringFromDictionary();
      v1229 = IMGetXPCDataFromDictionary();
      v1223 = IMGetXPCCodableFromDictionaryWithStandardAllowlist();
      v1217 = IMGetXPCStringFromDictionary();
      v1211 = IMGetXPCStringFromDictionary();
      v1205 = IMGetXPCStringFromDictionary();
      v1199 = xpc_dictionary_get_int64(xdict, "handleID");
      v1193 = IMGetXPCStringFromDictionary();
      v1187 = xpc_dictionary_get_int64(xdict, "fzError");
      v1183 = xpc_dictionary_get_int64(xdict, "fzType");
      v1179 = IMGetXPCStringFromDictionary();
      v1175 = xpc_dictionary_get_int64(xdict, "groupActionType");
      v1171 = xpc_dictionary_get_int64(xdict, "otherHandleID");
      v1167 = xpc_dictionary_get_int64(xdict, "shareStatus");
      v1164 = xpc_dictionary_get_int64(xdict, "shareDirection");
      v1162 = xpc_dictionary_get_int64(xdict, "expireState");
      v1160 = xpc_dictionary_get_int64(xdict, "messageActionType");
      v1158 = IMGetXPCStringFromDictionary();
      v1156 = xpc_dictionary_get_int64(xdict, "associatedMessageType");
      v1154 = IMGetXPCStringFromDictionary();
      v1152 = xpc_dictionary_get_int64(xdict, "timePlayedExpressiveSend");
      v1150 = xpc_dictionary_get_int64(xdict, "associatedMessageRangeLocation");
      v1148 = xpc_dictionary_get_int64(xdict, "associatedMessageRangeLength");
      v1146 = IMGetXPCDataFromDictionary();
      v1144 = IMGetXPCDataFromDictionary();
      v1142 = xpc_dictionary_get_int64(xdict, "cloudKitSyncState");
      v1140 = IMGetXPCStringFromDictionary();
      v1138 = IMGetXPCDataFromDictionary();
      v1136 = IMGetXPCStringFromDictionary();
      v1134 = IMGetXPCStringFromDictionary();
      v1132 = IMGetXPCStringFromDictionary();
      v1130 = xpc_dictionary_get_int64(xdict, "sortID");
      v1128 = IMGetXPCStringFromDictionary();
      v1126 = IMGetXPCStringFromDictionary();
      v1124 = IMGetXPCStringFromDictionary();
      v1122 = IMGetXPCStringFromDictionary();
      v771 = xpc_dictionary_get_int64(xdict, "partCount");
      v772 = xpc_dictionary_get_int64(xdict, "dateEdited");
      v773 = IMGetXPCStringFromDictionary();
      v774 = IMGetXPCStringFromDictionary();
      v775 = IMGetXPCStringFromDictionary();
      v776 = xpc_dictionary_get_int64(xdict, "scheduleType");
      v777 = xpc_dictionary_get_int64(xdict, "scheduleState");
      if (a4)
        v779 = a5;
      else
        v779 = 0;
      if (a4)
        v780 = a6;
      else
        v780 = 0;
      *((_QWORD *)&v1115 + 1) = v774;
      *(_QWORD *)&v1115 = v773;
      *((_QWORD *)&v1113 + 1) = v1126;
      *(_QWORD *)&v1113 = v1128;
      *((_QWORD *)&v1111 + 1) = v1134;
      *((_QWORD *)&v1110 + 1) = v1138;
      *(_QWORD *)&v1111 = v1136;
      *(_QWORD *)&v1110 = v1140;
      *((_QWORD *)&v1107 + 1) = v1150;
      *(_QWORD *)&v1107 = v1156;
      *(_QWORD *)&v1101 = v1175;
      *((_QWORD *)&v1101 + 1) = v1167;
      *((_QWORD *)&v1100 + 1) = v1183;
      *(_QWORD *)&v1100 = v1187;
      *((_QWORD *)&v1093 + 1) = v1205;
      *((_QWORD *)&v1089 + 1) = v1217;
      *(_QWORD *)&v1093 = v1211;
      *((_QWORD *)&v1086 + 1) = v1229;
      *(_QWORD *)&v1089 = v1223;
      *(_QWORD *)&v1086 = v1235;
      *((_QWORD *)&v1083 + 1) = v1247;
      *(_QWORD *)&v1083 = v1253;
      __XPCServerIMDMessageRecordBulkUpdate_IPCAction(v777, v778, v779, v780, v1277, v1271, v1265, v1259, v1083, v1241, v1086, v1089, v1093, v1199, v1193, v1100, v1171, v1101, v1164,
        v1179,
        v1162,
        v1160,
        v1158,
        v1107,
        v1148,
        v1146,
        v1154,
        v1152,
        v1144,
        v1142,
        v1110,
        v1111,
        v1132,
        v1130,
        v1113,
        v1124,
        v1122,
        v771,
        v772,
        v1115,
        v775,
        v776,
        v777);
      return 109;
    case 110:
      v419 = IMGetXPCStringFromDictionary();
      v420 = xpc_dictionary_get_int64(xdict, "task_flags");
      if (a4)
        v422 = a5;
      else
        v422 = 0;
      if (a4)
        v423 = a6;
      else
        v423 = 0;
      __XPCServerIMDMessagePTaskInsertRow_IPCAction(v420, v421, v422, v423, v419, v420);
      return 110;
    case 111:
      v446 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v448 = a5;
      else
        v448 = 0;
      if (a4)
        v449 = a6;
      else
        v449 = 0;
      __XPCServerIMDMessagePTaskSelectWithLimit_IPCAction(v446, v447, v448, v449, v446);
      return 111;
    case 112:
      v328 = IMGetXPCStringFromDictionary();
      v329 = xpc_dictionary_get_int64(xdict, "task_flags");
      if (a4)
        v331 = a5;
      else
        v331 = 0;
      if (a4)
        v332 = a6;
      else
        v332 = 0;
      __XPCServerIMDMessagePTaskUpdateTaskFlagsForGUID_IPCAction(v329, v330, v331, v332, v328, v329);
      return 112;
    case 113:
      if (a4)
        v865 = a5;
      else
        v865 = 0;
      if (a4)
        v866 = a6;
      else
        v866 = 0;
      __XPCServerIMDMessagePTaskDeleteAllCompletedTask_IPCAction(-1, a2, v865, v866);
      return 113;
    case 114:
      v1274 = xpc_dictionary_get_int64(xdict, "style");
      v1268 = xpc_dictionary_get_int64(xdict, "state");
      v1262 = IMGetXPCStringFromDictionary();
      v1256 = IMGetXPCDataFromDictionary();
      v1250 = IMGetXPCStringFromDictionary();
      v1244 = IMGetXPCStringFromDictionary();
      v1238 = IMGetXPCStringFromDictionary();
      v1232 = IMGetXPCStringFromDictionary();
      v1226 = IMGetXPCStringFromDictionary();
      v1220 = IMGetXPCStringFromDictionary();
      v1214 = IMGetXPCStringFromDictionary();
      v1208 = IMGetXPCStringFromDictionary();
      v1202 = xpc_dictionary_get_int64(xdict, "isArchived");
      v1196 = xpc_dictionary_get_int64(xdict, "isFiltered");
      v1185 = xpc_dictionary_get_int64(xdict, "isBlackholed");
      v1190 = xpc_dictionary_get_int64(xdict, "hasHadSuccessfulQuery");
      v1181 = IMGetXPCStringFromDictionary();
      v1177 = IMGetXPCStringFromDictionary();
      v1173 = xpc_dictionary_get_int64(xdict, "ckSyncState");
      v1169 = IMGetXPCStringFromDictionary();
      v365 = xpc_dictionary_get_int64(xdict, "lastReadMessageTimeStamp");
      v366 = IMGetXPCStringFromDictionary();
      v367 = IMGetXPCStringFromDictionary();
      v368 = xpc_dictionary_get_int64(xdict, "syndicationType");
      v369 = xpc_dictionary_get_int64(xdict, "syndicationDate");
      v370 = xpc_dictionary_get_int64(xdict, "isRecovered");
      v371 = xpc_dictionary_get_int64(xdict, "isDeletingIncomingMessages");
      if (a4)
        v373 = a5;
      else
        v373 = 0;
      if (a4)
        v374 = a6;
      else
        v374 = 0;
      *((_QWORD *)&v1105 + 1) = v370;
      *((_QWORD *)&v1103 + 1) = v368;
      *(_QWORD *)&v1105 = v369;
      *(_QWORD *)&v1103 = v1185;
      *(_QWORD *)&v1099 = v1181;
      *((_QWORD *)&v1099 + 1) = v1177;
      *((_QWORD *)&v1094 + 1) = v1196;
      *((_QWORD *)&v1090 + 1) = v1208;
      *(_QWORD *)&v1094 = v1202;
      *((_QWORD *)&v1087 + 1) = v1220;
      *(_QWORD *)&v1090 = v1214;
      *((_QWORD *)&v1084 + 1) = v1232;
      *(_QWORD *)&v1087 = v1226;
      *(_QWORD *)&v1084 = v1238;
      *((_QWORD *)&v1080 + 1) = v1244;
      *(_QWORD *)&v1080 = v1250;
      __XPCServerIMDChatRecordCreate_IPCAction(v371, v372, v373, v374, v1274, v1268, v1262, v1256, v1080, v1084, v1087, v1090, v1094, v1190, v1099, v1173, v1169, v365, v366,
        v367,
        v1103,
        v1105,
        v371);
      return 114;
    case 115:
      v264 = xpc_dictionary_get_int64(xdict, "chatRowID");
      if (a4)
        v266 = a5;
      else
        v266 = 0;
      if (a4)
        v267 = a6;
      else
        v267 = 0;
      __XPCServerIMDChatRecordCopyHandles_IPCAction(v264, v265, v266, v267, v264);
      return 115;
    case 116:
      v818 = xpc_dictionary_get_int64(xdict, "chatRowID");
      v819 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v821 = a5;
      else
        v821 = 0;
      if (a4)
        v822 = a6;
      else
        v822 = 0;
      __XPCServerIMDChatRecordCopyMessagesWithLimit_IPCAction(v819, v820, v821, v822, v818, v819);
      return 116;
    case 117:
      v991 = xpc_dictionary_get_int64(xdict, "chatRowID");
      v992 = xpc_dictionary_get_int64(xdict, "isArchived");
      if (a4)
        v994 = a5;
      else
        v994 = 0;
      if (a4)
        v995 = a6;
      else
        v995 = 0;
      __XPCServerIMDChatRecordSetIsArchived_IPCAction(v992, v993, v994, v995, v991, v992);
      return 117;
    case 118:
      v950 = xpc_dictionary_get_int64(xdict, "chatRowID");
      v951 = xpc_dictionary_get_int64(xdict, "handleID");
      if (a4)
        v953 = a5;
      else
        v953 = 0;
      if (a4)
        v954 = a6;
      else
        v954 = 0;
      __XPCServerIMDChatRecordAddHandle_IPCAction(v951, v952, v953, v954, v950, v951);
      return 118;
    case 119:
      v557 = xpc_dictionary_get_int64(xdict, "chatRowID");
      v558 = xpc_dictionary_get_int64(xdict, "handleID");
      if (a4)
        v560 = a5;
      else
        v560 = 0;
      if (a4)
        v561 = a6;
      else
        v561 = 0;
      __XPCServerIMDChatRecordRemoveHandle_IPCAction(v558, v559, v560, v561, v557, v558);
      return 119;
    case 120:
      v1275 = xpc_dictionary_get_int64(xdict, "identifier");
      v1269 = xpc_dictionary_get_int64(xdict, "style");
      v1263 = xpc_dictionary_get_int64(xdict, "state");
      v1257 = IMGetXPCStringFromDictionary();
      v1251 = IMGetXPCDataFromDictionary();
      v1245 = IMGetXPCStringFromDictionary();
      v1239 = IMGetXPCStringFromDictionary();
      v1233 = IMGetXPCStringFromDictionary();
      v1227 = IMGetXPCStringFromDictionary();
      v1221 = IMGetXPCStringFromDictionary();
      v1215 = IMGetXPCStringFromDictionary();
      v1209 = IMGetXPCStringFromDictionary();
      v1203 = IMGetXPCStringFromDictionary();
      v1197 = xpc_dictionary_get_int64(xdict, "isArchived");
      v1191 = xpc_dictionary_get_int64(xdict, "isFiltered");
      v1182 = xpc_dictionary_get_int64(xdict, "isBlackholed");
      v1186 = xpc_dictionary_get_int64(xdict, "hasHadSuccessfulQuery");
      v1178 = IMGetXPCStringFromDictionary();
      v1174 = IMGetXPCStringFromDictionary();
      v1170 = xpc_dictionary_get_int64(xdict, "ckSyncState");
      v1166 = IMGetXPCStringFromDictionary();
      v544 = xpc_dictionary_get_int64(xdict, "lastReadMessageTimeStamp");
      v545 = IMGetXPCStringFromDictionary();
      v546 = IMGetXPCStringFromDictionary();
      v547 = xpc_dictionary_get_int64(xdict, "syndicationType");
      v548 = xpc_dictionary_get_int64(xdict, "syndicationDate");
      v549 = xpc_dictionary_get_int64(xdict, "isRecovered");
      v550 = xpc_dictionary_get_int64(xdict, "isDeletingIncomingMessages");
      if (a4)
        v552 = a5;
      else
        v552 = 0;
      if (a4)
        v553 = a6;
      else
        v553 = 0;
      *((_QWORD *)&v1106 + 1) = v549;
      *((_QWORD *)&v1104 + 1) = v547;
      *(_QWORD *)&v1106 = v548;
      *(_QWORD *)&v1104 = v1182;
      *((_QWORD *)&v1096 + 1) = v1191;
      *(_QWORD *)&v1096 = v1197;
      *(_QWORD *)&v1091 = v1215;
      *((_QWORD *)&v1091 + 1) = v1209;
      *(_QWORD *)&v1088 = v1227;
      *((_QWORD *)&v1088 + 1) = v1221;
      *(_QWORD *)&v1085 = v1239;
      *((_QWORD *)&v1085 + 1) = v1233;
      *((_QWORD *)&v1081 + 1) = v1245;
      *(_QWORD *)&v1081 = v1251;
      __XPCServerIMDChatRecordBulkUpdate_IPCAction(v550, v551, v552, v553, v1275, v1269, v1263, v1257, v1081, v1085, v1088, v1091, v1203, v1096, v1186, v1178, v1174, v1170, v1166,
        v544,
        v545,
        v546,
        v1104,
        v1106,
        v550);
      return 120;
    case 121:
      if (a4)
        v948 = a5;
      else
        v948 = 0;
      if (a4)
        v949 = a6;
      else
        v949 = 0;
      __XPCServerIMDChatRecordCopyAllChats_IPCAction(-1, a2, v948, v949);
      return 121;
    case 122:
      v1015 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v1017 = a5;
      else
        v1017 = 0;
      if (a4)
        v1018 = a6;
      else
        v1018 = 0;
      __XPCServerIMDChatRecordCopyAllActiveChatsWithLimit_IPCAction(v1015, v1016, v1017, v1018, v1015);
      return 122;
    case 123:
      v199 = xpc_dictionary_get_int64(xdict, "request");
      v200 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v202 = a5;
      else
        v202 = 0;
      if (a4)
        v203 = a6;
      else
        v203 = 0;
      __XPCServerIMDChatRecordCopyAllActiveChatsProgressivelyWithLimit_IPCAction(v200, v201, v202, v203, v199, v200);
      return 123;
    case 124:
      v138 = xpc_dictionary_get_int64(xdict, "knownSenderLimit");
      v139 = xpc_dictionary_get_int64(xdict, "otherFilterLimit");
      if (a4)
        v141 = a5;
      else
        v141 = 0;
      if (a4)
        v142 = a6;
      else
        v142 = 0;
      __XPCServerIMDChatRecordCopyAllUnreadChatsAndRecentChatsWithLimit_IPCAction(v139, v140, v141, v142, v138, v139);
      return 124;
    case 125:
      v289 = IMGetXPCStringFromDictionary();
      v290 = xpc_dictionary_get_int64(xdict, "reason");
      if (a4)
        v292 = a5;
      else
        v292 = 0;
      if (a4)
        v293 = a6;
      else
        v293 = 0;
      __XPCServerIMDCoreSpotlightAddMessageGUID_IPCAction(v290, v291, v292, v293, v289, v290);
      return 125;
    case 126:
      v133 = IMGetXPCArrayFromDictionary();
      v134 = xpc_dictionary_get_int64(xdict, "reason");
      if (a4)
        v136 = a5;
      else
        v136 = 0;
      if (a4)
        v137 = a6;
      else
        v137 = 0;
      __XPCServerIMDCoreSpotlightAddMessageGUIDs_IPCAction(v134, v135, v136, v137, v133, v134);
      return 126;
    case 127:
      v696 = IMGetXPCArrayFromDictionary();
      v697 = xpc_dictionary_get_int64(xdict, "reason");
      if (a4)
        v699 = a5;
      else
        v699 = 0;
      if (a4)
        v700 = a6;
      else
        v700 = 0;
      __XPCServerIMDCoreSpotlightDeleteMessageGUIDs_IPCAction(v697, v698, v699, v700, v696, v697);
      return 127;
    case 128:
      v1001 = IMGetXPCStringFromDictionary();
      v1002 = xpc_dictionary_get_int64(xdict, "reason");
      if (a4)
        v1004 = a5;
      else
        v1004 = 0;
      if (a4)
        v1005 = a6;
      else
        v1005 = 0;
      __XPCServerIMDCoreSpotlightAddChatGUID_IPCAction(v1002, v1003, v1004, v1005, v1001, v1002);
      return 128;
    case 129:
      v414 = IMGetXPCStringFromDictionary();
      v415 = xpc_dictionary_get_int64(xdict, "reason");
      if (a4)
        v417 = a5;
      else
        v417 = 0;
      if (a4)
        v418 = a6;
      else
        v418 = 0;
      __XPCServerIMDCoreSpotlightDeleteChatGUID_IPCAction(v415, v416, v417, v418, v414, v415);
      return 129;
    case 130:
      v181 = xpc_dictionary_get_int64(xdict, "reason");
      if (a4)
        v183 = a5;
      else
        v183 = 0;
      if (a4)
        v184 = a6;
      else
        v184 = 0;
      __XPCServerIMDCoreSpotlightSetNeedsMessageReindex_IPCAction(v181, v182, v183, v184, v181);
      return 130;
    case 131:
      v650 = IMGetXPCIntFromDictionary();
      v651 = xpc_dictionary_get_int64(xdict, "reason");
      if (a4)
        v653 = a5;
      else
        v653 = 0;
      if (a4)
        v654 = a6;
      else
        v654 = 0;
      __XPCServerIMDCoreSpotlightIndexNextMessageBatchIfNeeded_IPCAction(v651, v652, v653, v654, v650, v651);
      return 131;
    case 132:
      v594 = IMGetXPCArrayFromDictionary();
      v595 = xpc_dictionary_get_int64(xdict, "reason");
      if (a4)
        v597 = a5;
      else
        v597 = 0;
      if (a4)
        v598 = a6;
      else
        v598 = 0;
      __XPCServerIMDCoreSpotlightReindexMessages_IPCAction(v595, v596, v597, v598, v594, v595);
      return 132;
    case 133:
      v241 = IMGetXPCArrayFromDictionary();
      v242 = IMGetXPCDataFromDictionary();
      v243 = xpc_dictionary_get_int64(xdict, "reason");
      v244 = objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v242, 0);
      if (a4)
        v246 = a5;
      else
        v246 = 0;
      if (a4)
        v247 = a6;
      else
        v247 = 0;
      __XPCServerIMDCoreSpotlightReindexMessagesWithCollaborationMetadata_IPCAction(v244, v245, v246, v247, v241, v244, v243);
      return 133;
    case 134:
      v340 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v341 = a5;
      else
        v341 = 0;
      if (a4)
        v342 = a6;
      else
        v342 = 0;
      objc_msgSend(v340, "handleIMDCoreSpotlightDeleteAttachment_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v341, v342);
      return 134;
    case 135:
      v164 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v165 = a5;
      else
        v165 = 0;
      if (a4)
        v166 = a6;
      else
        v166 = 0;
      objc_msgSend(v164, "handleIMDCoreSpotlightCheckIndexCount_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v165, v166);
      return 135;
    case 136:
      v657 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v658 = a5;
      else
        v658 = 0;
      if (a4)
        v659 = a6;
      else
        v659 = 0;
      objc_msgSend(v657, "handleIMDCoreSpotlightValidateClientState_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v658, v659);
      return 136;
    case 137:
      v827 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v828 = a5;
      else
        v828 = 0;
      if (a4)
        v829 = a6;
      else
        v829 = 0;
      objc_msgSend(v827, "handleIMDCoreSpotlightFetchClientState_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v828, v829);
      return 137;
    case 138:
      v376 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v377 = a5;
      else
        v377 = 0;
      if (a4)
        v378 = a6;
      else
        v378 = 0;
      objc_msgSend(v376, "handleIMDCoreSpotlightInvalidateSpotlightClientStateVersioning_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v377, v378);
      return 138;
    case 139:
      v631 = IMGetXPCStringFromDictionary();
      v632 = IMGetXPCStringFromDictionary();
      v633 = IMGetXPCArrayFromDictionary();
      v634 = IMGetXPCBoolFromDictionary();
      v636 = IMGetXPCStringFromDictionary();
      if (a4)
        v637 = a5;
      else
        v637 = 0;
      if (a4)
        v638 = a6;
      else
        v638 = 0;
      __XPCServerIMDCoreSpotlightMarkAttachment_IPCAction(a2, v635, v637, v638, v631, v636, v632, v633, v634);
      return 139;
    case 140:
      v716 = IMGetXPCStringFromDictionary();
      if (a4)
        v718 = a5;
      else
        v718 = 0;
      if (a4)
        v719 = a6;
      else
        v719 = 0;
      __XPCServerIMDChatRecordCopyChatForGUID_IPCAction(v716, v717, v718, v719, v716);
      return 140;
    case 141:
      v294 = xpc_dictionary_get_int64(xdict, "messageID");
      if (a4)
        v296 = a5;
      else
        v296 = 0;
      if (a4)
        v297 = a6;
      else
        v297 = 0;
      __XPCServerIMDChatRecordCopyChatForMessageID_IPCAction(v294, v295, v296, v297, v294);
      return 141;
    case 142:
      v885 = IMGetXPCStringFromDictionary();
      v886 = IMGetXPCStringFromDictionary();
      if (a4)
        v888 = a5;
      else
        v888 = 0;
      if (a4)
        v889 = a6;
      else
        v889 = 0;
      __XPCServerIMDChatRecordCopyChatsWithHandleOnService_IPCAction(v886, v887, v888, v889, v885, v886);
      return 142;
    case 143:
      v349 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v350 = a5;
      else
        v350 = 0;
      if (a4)
        v351 = a6;
      else
        v351 = 0;
      objc_msgSend(v349, "handleIMDChatRecordCopyChatsWithHandlesOnServiceWithDisplayNameGroupIDStyle_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v350, v351);
      return 143;
    case 144:
      v906 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v907 = a5;
      else
        v907 = 0;
      if (a4)
        v908 = a6;
      else
        v908 = 0;
      objc_msgSend(v906, "handleIMDChatRecordCopyChatsWithAtLeastHandlesOnServiceWithStyle_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v907, v908);
      return 144;
    case 145:
      v529 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v530 = a5;
      else
        v530 = 0;
      if (a4)
        v531 = a6;
      else
        v531 = 0;
      objc_msgSend(v529, "handleIMDChatRecordCopyChatsFilteredUsingPredicate_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v530, v531);
      return 145;
    case 146:
      v935 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v936 = a5;
      else
        v936 = 0;
      if (a4)
        v937 = a6;
      else
        v937 = 0;
      objc_msgSend(v935, "handleIMDChatRecordCopySortedChatsFilteredUsingPredicateWithLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v936, v937);
      return 146;
    case 147:
      v977 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v978 = a5;
      else
        v978 = 0;
      if (a4)
        v979 = a6;
      else
        v979 = 0;
      objc_msgSend(v977, "handleIMDChatRecordCopyChatsSortedByLastMessageDateAndFilteredUsingPredicateWithLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v978, v979);
      return 147;
    case 148:
      v858 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v859 = a5;
      else
        v859 = 0;
      if (a4)
        v860 = a6;
      else
        v860 = 0;
      objc_msgSend(v858, "handleIMDChatRecordCopyChatsWithIdentifier_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v859, v860);
      return 148;
    case 149:
      v958 = IMGetXPCStringFromDictionary();
      v959 = IMGetXPCStringFromDictionary();
      if (a4)
        v961 = a5;
      else
        v961 = 0;
      if (a4)
        v962 = a6;
      else
        v962 = 0;
      __XPCServerIMDChatRecordCopyChatsWithIdentifierOnService_IPCAction(v959, v960, v961, v962, v958, v959);
      return 149;
    case 150:
      v903 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v904 = a5;
      else
        v904 = 0;
      if (a4)
        v905 = a6;
      else
        v905 = 0;
      objc_msgSend(v903, "handleIMDChatRecordCopyChatsWithPinningIdentifier_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v904, v905);
      return 150;
    case 151:
      v218 = IMGetXPCStringFromDictionary();
      v219 = IMGetXPCStringFromDictionary();
      if (a4)
        v221 = a5;
      else
        v221 = 0;
      if (a4)
        v222 = a6;
      else
        v222 = 0;
      __XPCServerIMDChatRecordCopyChatsWithRoomnameOnService_IPCAction(v219, v220, v221, v222, v218, v219);
      return 151;
    case 152:
      v361 = IMGetXPCStringFromDictionary();
      if (a4)
        v363 = a5;
      else
        v363 = 0;
      if (a4)
        v364 = a6;
      else
        v364 = 0;
      __XPCServerIMDChatRecordCopyChatsWithGroupID_IPCAction(v361, v362, v363, v364, v361);
      return 152;
    case 153:
      v300 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v301 = a5;
      else
        v301 = 0;
      if (a4)
        v302 = a6;
      else
        v302 = 0;
      objc_msgSend(v300, "handleIMDChatRecordCopyDuplicateGroupChatRecords_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v301, v302);
      return 153;
    case 154:
      v225 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v226 = a5;
      else
        v226 = 0;
      if (a4)
        v227 = a6;
      else
        v227 = 0;
      objc_msgSend(v225, "handleIMDChatRecordCopyGroupPhotoPaths_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v226, v227);
      return 154;
    case 155:
      v955 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v956 = a5;
      else
        v956 = 0;
      if (a4)
        v957 = a6;
      else
        v957 = 0;
      objc_msgSend(v955, "handleIMDChatRecordResolveInconsistentGUID_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v956, v957);
      return 155;
    case 156:
      v258 = IMGetXPCStringFromDictionary();
      v259 = IMGetXPCStringFromDictionary();
      v260 = IMGetXPCBoolFromDictionary();
      if (a4)
        v262 = a5;
      else
        v262 = 0;
      if (a4)
        v263 = a6;
      else
        v263 = 0;
      __XPCServerIMDChatRecordCopyNewestChatForGroupIDOnService_IPCAction(v260, v261, v262, v263, v258, v259, v260);
      return 156;
    case 157:
      v705 = IMGetXPCStringFromDictionary();
      if (a4)
        v707 = a5;
      else
        v707 = 0;
      if (a4)
        v708 = a6;
      else
        v708 = 0;
      __XPCServerIMDChatRecordDeleteChatForGUID_IPCAction(v705, v706, v707, v708, v705);
      return 157;
    case 158:
      v333 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v334 = a5;
      else
        v334 = 0;
      if (a4)
        v335 = a6;
      else
        v335 = 0;
      objc_msgSend(v333, "handleIMDChatRecordMoveMessagesToRecoverableMessage_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v334, v335);
      return 158;
    case 159:
      v484 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v485 = a5;
      else
        v485 = 0;
      if (a4)
        v486 = a6;
      else
        v486 = 0;
      objc_msgSend(v484, "handleIMDChatRecordRecoverMessages_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v485, v486);
      return 159;
    case 160:
      v867 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v868 = a5;
      else
        v868 = 0;
      if (a4)
        v869 = a6;
      else
        v869 = 0;
      objc_msgSend(v867, "handleIMDChatRecordPermanentlyDeleteRecoverableMessagesInChatsWithGUIDs_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v868, v869);
      return 160;
    case 161:
      v228 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v229 = a5;
      else
        v229 = 0;
      if (a4)
        v230 = a6;
      else
        v230 = 0;
      objc_msgSend(v228, "handleIMDChatRecordLoadRecoverableMessages_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v229, v230);
      return 161;
    case 162:
      v409 = IMGetXPCStringFromDictionary();
      v410 = IMGetXPCStringFromDictionary();
      if (a4)
        v412 = a5;
      else
        v412 = 0;
      if (a4)
        v413 = a6;
      else
        v413 = 0;
      __XPCServerIMDChatRecordAssociateMessageWithGUIDToChatWithGUIDIfNeeded_IPCAction(v410, v411, v412, v413, v409, v410);
      return 162;
    case 163:
      v321 = IMGetXPCStringFromDictionary();
      v322 = IMGetXPCStringFromDictionary();
      if (a4)
        v324 = a5;
      else
        v324 = 0;
      if (a4)
        v325 = a6;
      else
        v325 = 0;
      __XPCServerIMDChatRecordDisassociateMessageWithGUIDFromChatWithGUIDIfNeeded_IPCAction(v322, v323, v324, v325, v321, v322);
      return 163;
    case 164:
      if (a4)
        v669 = a5;
      else
        v669 = 0;
      if (a4)
        v670 = a6;
      else
        v670 = 0;
      __XPCServerIMDChatRecordCopyChatGUIDsWithUnplayedAudioMessages_IPCAction(-1, a2, v669, v670);
      return 164;
    case 165:
      v427 = IMGetXPCStringFromDictionary();
      v428 = xpc_dictionary_get_int64(xdict, "isFiltered");
      if (a4)
        v430 = a5;
      else
        v430 = 0;
      if (a4)
        v431 = a6;
      else
        v431 = 0;
      __XPCServerIMDChatRecordSetIsFiltered_IPCAction(v428, v429, v430, v431, v427, v428);
      return 165;
    case 166:
      if (a4)
        v298 = a5;
      else
        v298 = 0;
      if (a4)
        v299 = a6;
      else
        v299 = 0;
      __XPCServerIMDChatRecordDeleteEmptyChats_IPCAction(-1, a2, v298, v299);
      return 166;
    case 167:
      v231 = IMGetXPCArrayFromDictionary();
      if (a4)
        v233 = a5;
      else
        v233 = 0;
      if (a4)
        v234 = a6;
      else
        v234 = 0;
      __XPCServerIMDChatRecordCopyChatIdentitiesForMessageWithGUIDs_IPCAction(v231, v232, v233, v234, v231);
      return 167;
    case 168:
      v487 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v488 = a5;
      else
        v488 = 0;
      if (a4)
        v489 = a6;
      else
        v489 = 0;
      objc_msgSend(v487, "handleIMDChatRecordsUpdateSyncStatusForGUIDs_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v488, v489);
      return 168;
    case 169:
      v307 = IMGetXPCStringFromDictionary();
      if (a4)
        v309 = a5;
      else
        v309 = 0;
      if (a4)
        v310 = a6;
      else
        v310 = 0;
      __XPCServerIMDMessageRecordCopyLastReadMessageForChatIdentifier_IPCAction(v307, v308, v309, v310, v307);
      return 169;
    case 170:
      v916 = IMGetXPCStringFromDictionary();
      v917 = IMGetXPCArrayFromDictionary();
      v918 = IMGetXPCStringFromDictionary();
      if (a4)
        v920 = a5;
      else
        v920 = 0;
      if (a4)
        v921 = a6;
      else
        v921 = 0;
      __XPCServerIMDChatRecordRepairDuplicateChats_IPCAction(v918, v919, v920, v921, v917, v916, v918);
      return 170;
    case 171:
      v356 = IMGetXPCStringFromDictionary();
      v357 = xpc_dictionary_get_int64(xdict, "days");
      if (a4)
        v359 = a5;
      else
        v359 = 0;
      if (a4)
        v360 = a6;
      else
        v360 = 0;
      __XPCServerIMDChatRecordSplitDatabaseByDays_IPCAction(v357, v358, v359, v360, v357, v356);
      return 171;
    case 172:
      v664 = IMGetXPCStringFromDictionary();
      v665 = xpc_dictionary_get_int64(xdict, "message_count");
      if (a4)
        v667 = a5;
      else
        v667 = 0;
      if (a4)
        v668 = a6;
      else
        v668 = 0;
      __XPCServerIMDChatRecordSplitDatabaseByRecentCount_IPCAction(v665, v666, v667, v668, v665, v664);
      return 172;
    case 173:
      v459 = IMGetXPCStringFromDictionary();
      if (a4)
        v461 = a5;
      else
        v461 = 0;
      if (a4)
        v462 = a6;
      else
        v462 = 0;
      __XPCServerIMDSwitchDatabase_IPCAction(v459, v460, v461, v462, v459);
      return 173;
    case 174:
      if (a4)
        v326 = a5;
      else
        v326 = 0;
      if (a4)
        v327 = a6;
      else
        v327 = 0;
      __XPCServerIMDChatRecordCopyAllNamedChats_IPCAction(-1, a2, v326, v327);
      return 174;
    case 175:
      v751 = IMGetXPCStringFromDictionary();
      v752 = IMGetXPCStringFromDictionary();
      if (a4)
        v754 = a5;
      else
        v754 = 0;
      if (a4)
        v755 = a6;
      else
        v755 = 0;
      __XPCServerIMDMessageRecordCopyArrayOfAssociatedMessagesForMessageGUIDFromSender_IPCAction(v752, v753, v754, v755, v751, v752);
      return 175;
    case 176:
      v890 = IMGetXPCStringFromDictionary();
      v891 = IMGetXPCStringFromDictionary();
      v892 = xpc_dictionary_get_int64(xdict, "version");
      if (a4)
        v894 = a5;
      else
        v894 = 0;
      if (a4)
        v895 = a6;
      else
        v895 = 0;
      __XPCServerIMDDowngradeDatabase_IPCAction(v892, v893, v894, v895, v890, v891, v892);
      return 176;
    case 177:
      v565 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v567 = a5;
      else
        v567 = 0;
      if (a4)
        v568 = a6;
      else
        v568 = 0;
      __XPCServerIMDMessageRecordCopyMessagesToUploadToCloudKit_IPCAction(v565, v566, v567, v568, v565);
      return 177;
    case 178:
      v861 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v863 = a5;
      else
        v863 = 0;
      if (a4)
        v864 = a6;
      else
        v864 = 0;
      __XPCServerIMDMessageRecordCopyMessagesPendingUpdateT1ToCloudKit_IPCAction(v861, v862, v863, v864, v861);
      return 178;
    case 179:
      v841 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v843 = a5;
      else
        v843 = 0;
      if (a4)
        v844 = a6;
      else
        v844 = 0;
      __XPCServerIMDMessageRecordCopyMessagesPendingUpdateT2ToCloudKit_IPCAction(v841, v842, v843, v844, v841);
      return 179;
    case 180:
      v317 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v319 = a5;
      else
        v319 = 0;
      if (a4)
        v320 = a6;
      else
        v320 = 0;
      __XPCServerIMDMessageRecordCopyMessagesPendingUpdateT3ToCloudKit_IPCAction(v317, v318, v319, v320, v317);
      return 180;
    case 181:
      if (a4)
        v791 = a5;
      else
        v791 = 0;
      if (a4)
        v792 = a6;
      else
        v792 = 0;
      __XPCServerIMDMessageRecordMarkAllMessagesAsNeedingCloudKitSync_IPCAction(-1, a2, v791, v792);
      return 181;
    case 182:
      v471 = xpc_dictionary_get_int64(xdict, "days");
      if (a4)
        v473 = a5;
      else
        v473 = 0;
      if (a4)
        v474 = a6;
      else
        v474 = 0;
      __XPCServerIMDAttachmentRecordEstimateSpaceTakenByAttachmentsOlderThanDays_IPCAction(v471, v472, v473, v474, v471);
      return 182;
    case 183:
      v737 = xpc_dictionary_get_int64(xdict, "options");
      if (a4)
        v739 = a5;
      else
        v739 = 0;
      if (a4)
        v740 = a6;
      else
        v740 = 0;
      __XPCServerIMDAttachmentRecordFindLargestConversations_IPCAction(v737, v738, v739, v740, v737);
      return 183;
    case 184:
      v732 = xpc_dictionary_get_int64(xdict, "options");
      v733 = xpc_dictionary_get_int64(xdict, "limit");
      v734 = xpc_dictionary_get_int64(xdict, "offset");
      if (a4)
        v735 = a5;
      else
        v735 = 0;
      if (a4)
        v736 = a6;
      else
        v736 = 0;
      __XPCServerIMDAttachmentRecordFindLargestAttachmentGUIDsWithLimitAndOffset_IPCAction(v734, (uint64_t)xdict, v735, v736, v732, v733, v734);
      return 184;
    case 185:
      v877 = xpc_dictionary_get_int64(xdict, "options");
      if (a4)
        v879 = a5;
      else
        v879 = 0;
      if (a4)
        v880 = a6;
      else
        v880 = 0;
      __XPCServerIMDAttachmentRecordSpaceTakenByAttachmentClass_IPCAction(v877, v878, v879, v880, v877);
      return 185;
    case 186:
      v845 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v847 = a5;
      else
        v847 = 0;
      if (a4)
        v848 = a6;
      else
        v848 = 0;
      __XPCServerIMDMessageRecordCopyMessagesToDeleteFromCloudKit_IPCAction(v845, v846, v847, v848, v845);
      return 186;
    case 187:
      v909 = IMGetXPCStringFromDictionary();
      v910 = IMGetXPCStringFromDictionary();
      if (a4)
        v912 = a5;
      else
        v912 = 0;
      if (a4)
        v913 = a6;
      else
        v913 = 0;
      __XPCServerIMDMessageRecordAddGUIDAndCKRecordIDToDeleteFromCloudKit_IPCAction(v910, v911, v912, v913, v909, v910);
      return 187;
    case 188:
      if (a4)
        v730 = a5;
      else
        v730 = 0;
      if (a4)
        v731 = a6;
      else
        v731 = 0;
      __XPCServerIMDAddIncompatibleGroupPhotoChangedMessagesToDeleteFromCloudKit_IPCAction(-1, a2, v730, v731);
      return 188;
    case 189:
      if (a4)
        v764 = a5;
      else
        v764 = 0;
      if (a4)
        v765 = a6;
      else
        v765 = 0;
      __XPCServerIMDMessageRecordMarkDeletedTombStonedMessages_IPCAction(-1, a2, v764, v765);
      return 189;
    case 190:
      v395 = IMGetXPCArrayFromDictionary();
      if (a4)
        v397 = a5;
      else
        v397 = 0;
      if (a4)
        v398 = a6;
      else
        v398 = 0;
      __XPCServerIMDMessageRecordDeleteTombStonedMessagesWithRecordIDs_IPCAction(v395, v396, v397, v398, v395);
      return 190;
    case 191:
      v720 = IMGetXPCStringFromDictionary();
      v721 = IMGetXPCStringFromDictionary();
      v722 = xpc_dictionary_get_int64(xdict, "timeStamp");
      if (a4)
        v724 = a5;
      else
        v724 = 0;
      if (a4)
        v725 = a6;
      else
        v725 = 0;
      __XPCServerInsertIntoDeletedChatsTable_IPCAction(v722, v723, v724, v725, v720, v721, v722);
      return 191;
    case 192:
      v660 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v662 = a5;
      else
        v662 = 0;
      if (a4)
        v663 = a6;
      else
        v663 = 0;
      __XPCServerIMDChatRecordCopyChatRecordIDsAndGUIDsToDeleteFromCloudKitWithLimit_IPCAction(v660, v661, v662, v663, v660);
      return -1;
    case 193:
      if (a4)
        v399 = a5;
      else
        v399 = 0;
      if (a4)
        v400 = a6;
      else
        v400 = 0;
      __XPCServerIMDChatClearPendingDeleteChatsTable_IPCAction(-1, a2, v399, v400);
      return -1;
    case 194:
      v798 = IMGetXPCArrayFromDictionary();
      v799 = xpc_dictionary_get_int64(xdict, "fromError");
      v800 = xpc_dictionary_get_int64(xdict, "toError");
      if (a4)
        v802 = a5;
      else
        v802 = 0;
      if (a4)
        v803 = a6;
      else
        v803 = 0;
      __XPCServerIMDChatRemapMessagesWithErrorCodeToErrorCode_IPCAction(v800, v801, v802, v803, v798, v799, v800);
      return -1;
    case 195:
      if (a4)
        v870 = a5;
      else
        v870 = 0;
      if (a4)
        v871 = a6;
      else
        v871 = 0;
      __XPCServerIMDMessageRecordCalculateLocalCloudKitStatistics_IPCAction(-1, a2, v870, v871);
      return -1;
    case 196:
      if (a4)
        v379 = a5;
      else
        v379 = 0;
      if (a4)
        v380 = a6;
      else
        v380 = 0;
      __XPCServerIMDMessageRecordCalculateTotalCounts_IPCAction(-1, a2, v379, v380);
      return -1;
    case 197:
      v405 = xpc_dictionary_get_int64(xdict, "rowID");
      if (a4)
        v407 = a5;
      else
        v407 = 0;
      if (a4)
        v408 = a6;
      else
        v408 = 0;
      __XPCServerIMDMessageRecordMarkMessageWithROWIDAsSyncedWithCloudKit_IPCAction(v405, v406, v407, v408, v405);
      return -1;
    case 198:
      v639 = xpc_dictionary_get_int64(xdict, "rowID");
      if (a4)
        v641 = a5;
      else
        v641 = 0;
      if (a4)
        v642 = a6;
      else
        v642 = 0;
      __XPCServerIMDMessageRecordMarkMessageWithROWIDAsIgnoreButNeedingSyncWithCloudKit_IPCAction(v639, v640, v641, v642, v639);
      return -1;
    case 199:
      v837 = IMGetXPCDictionaryFromDictionary();
      if (a4)
        v839 = a5;
      else
        v839 = 0;
      if (a4)
        v840 = a6;
      else
        v840 = 0;
      __XPCServerIMDMessageRecordSetCloudKitSyncCounts_IPCAction(v837, v838, v839, v840, v837);
      return -1;
    case 200:
      v647 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v648 = a5;
      else
        v648 = 0;
      if (a4)
        v649 = a6;
      else
        v649 = 0;
      objc_msgSend(v647, "handleIMDMessageRecordsUpdateSyncStatusForGUIDs_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v648, v649);
      return 168;
    case 201:
      v628 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v629 = a5;
      else
        v629 = 0;
      if (a4)
        v630 = a6;
      else
        v630 = 0;
      objc_msgSend(v628, "handleIMDMessageRecordsUpdateSyncedSyndicationRangesForGUIDsToStatus_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v629, v630);
      return 201;
    case 202:
      if (a4)
        v457 = a5;
      else
        v457 = 0;
      if (a4)
        v458 = a6;
      else
        v458 = 0;
      __XPCServerIMDAttachmentRecordMarkFailedAttachmentsAsNeedingSync_IPCAction(-1, a2, v457, v458);
      return 202;
    case 203:
      if (xpc_dictionary_get_value(xdict, "afterRow"))
        v375 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", xpc_dictionary_get_int64(xdict, "afterRow"));
      else
        v375 = 0;
      v1070 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v1072 = a5;
      else
        v1072 = 0;
      if (a4)
        v1073 = a6;
      else
        v1073 = 0;
      __XPCServerIMDAttachmentRecordCopyAttachmentsToDeleteFromCloudKit(v1070, v1071, v1072, v1073, v375, v1070);
      return 203;
    case 204:
      if (xpc_dictionary_get_value(xdict, "afterRow"))
        v726 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", xpc_dictionary_get_int64(xdict, "afterRow"));
      else
        v726 = 0;
      v1074 = xpc_dictionary_get_int64(xdict, "limit");
      if (a4)
        v1076 = a5;
      else
        v1076 = 0;
      if (a4)
        v1077 = a6;
      else
        v1077 = 0;
      __XPCServerIMDAttachmentRecordCopyAttachmentGUIDs(v1074, v1075, v1076, v1077, v726, v1074);
      return 204;
    case 205:
      v590 = IMGetXPCArrayFromDictionary();
      if (a4)
        v592 = a5;
      else
        v592 = 0;
      if (a4)
        v593 = a6;
      else
        v593 = 0;
      __XPCServerIMDAttachmentRecordDeleteTombStonedAttachmentsWithRecordIDs_IPCAction(v590, v591, v592, v593, v590);
      return 205;
    case 206:
      if (a4)
        v505 = a5;
      else
        v505 = 0;
      if (a4)
        v506 = a6;
      else
        v506 = 0;
      __XPCServerIMDAttachmentRecordDeleteTombStonedAttachmentsToDeleteFromCloudKit_IPCAction(-1, a2, v505, v506);
      return 206;
    case 207:
      v424 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v425 = a5;
      else
        v425 = 0;
      if (a4)
        v426 = a6;
      else
        v426 = 0;
      objc_msgSend(v424, "handleIMDAttachmentRecordsUpdateSyncStatusForGUIDs_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v425, v426);
      return 207;
    case 208:
      v437 = IMOSLoggingEnabled();
      if ((_DWORD)v437)
      {
        v439 = OSLogHandleForIMFoundationCategory();
        v437 = os_log_type_enabled(v439, OS_LOG_TYPE_INFO);
        if ((_DWORD)v437)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v439, OS_LOG_TYPE_INFO, "Clean database requested", buf, 2u);
        }
      }
      if (a4)
        v440 = a5;
      else
        v440 = 0;
      if (a4)
        v441 = a6;
      else
        v441 = 0;
      __XPCServerIMDDatabaseClean_IPCAction(v437, v438, v440, v441);
      return 208;
    case 209:
      if (a4)
        v655 = a5;
      else
        v655 = 0;
      if (a4)
        v656 = a6;
      else
        v656 = 0;
      __XPCServerIMDMessageRecordMarkAllUnsuccessFullSyncMessagesAsNeedingSync_IPCAction(-1, a2, v655, v656);
      return 209;
    case 210:
      v442 = IMGetXPCStringFromDictionary();
      if (a4)
        v444 = a5;
      else
        v444 = 0;
      if (a4)
        v445 = a6;
      else
        v445 = 0;
      __XPCServerIMDKVValueForKey_IPCAction(v442, v443, v444, v445, v442);
      return 210;
    case 211:
      v830 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v831 = a5;
      else
        v831 = 0;
      if (a4)
        v832 = a6;
      else
        v832 = 0;
      objc_msgSend(v830, "handleIMDKVIntegerForKey_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v831, v832);
      return 211;
    case 212:
      v682 = IMGetXPCStringFromDictionary();
      v683 = IMGetXPCDataFromDictionary();
      if (a4)
        v685 = a5;
      else
        v685 = 0;
      if (a4)
        v686 = a6;
      else
        v686 = 0;
      __XPCServerIMDKVPersistValueForKey_IPCAction(v683, v684, v685, v686, v682, v683);
      return 210;
    case 213:
      v480 = IMGetXPCDictionaryFromDictionary();
      if (a4)
        v482 = a5;
      else
        v482 = 0;
      if (a4)
        v483 = a6;
      else
        v483 = 0;
      __XPCServerIMDNotificationsPostNotifications_asyncIPCAction(v480, v481, v482, v483, v480);
      return 213;
    case 214:
      v833 = IMGetXPCStringFromDictionary();
      if (a4)
        v835 = a5;
      else
        v835 = 0;
      if (a4)
        v836 = a6;
      else
        v836 = 0;
      __XPCServerIMDMessageRecordCopyMessagesWithReplyToGUIDs(v833, v834, v835, v836, v833);
      return 214;
    case 215:
      v540 = IMGetXPCArrayFromDictionary();
      if (a4)
        v542 = a5;
      else
        v542 = 0;
      if (a4)
        v543 = a6;
      else
        v543 = 0;
      __XPCServerIMDNotificationsRetractNotificationsForReadMessages_asyncIPCAction(v540, v541, v542, v543, v540);
      return 215;
    case 216:
      v643 = IMGetXPCDictionaryFromDictionary();
      if (a4)
        v645 = a5;
      else
        v645 = 0;
      if (a4)
        v646 = a6;
      else
        v646 = 0;
      __XPCServerIMDNotificationsRetractNotificationsFromFirstUnlock_IPCAction(v643, v644, v645, v646, v643);
      return 216;
    case 217:
      v535 = IMGetXPCArrayFromDictionary();
      v536 = IMGetXPCDictionaryFromDictionary();
      if (a4)
        v538 = a5;
      else
        v538 = 0;
      if (a4)
        v539 = a6;
      else
        v539 = 0;
      __XPCServerIMDNotificationsPostUrgentNotificationsForMessages_IPCAction(v536, v537, v538, v539, v535, v536);
      goto LABEL_1262;
    case 218:
      v492 = IMGetXPCArrayFromDictionary();
      v493 = IMGetXPCDictionaryFromDictionary();
      if (a4)
        v495 = a5;
      else
        v495 = 0;
      if (a4)
        v496 = a6;
      else
        v496 = 0;
      __XPCServerIMDNotificationsUpdatePostedNotificationsForMessages_IPCAction(v493, v494, v495, v496, v492, v493);
      goto LABEL_1262;
    case 219:
      v781 = IMGetXPCStringFromDictionary();
      v782 = IMGetXPCStringFromDictionary();
      if (a4)
        v784 = a5;
      else
        v784 = 0;
      if (a4)
        v785 = a6;
      else
        v785 = 0;
      __XPCServerIMDNotificationsPostFirstUnlockMessage_IPCAction(v782, v783, v784, v785, v781, v782);
LABEL_1262:
      result = 217;
      break;
    case 221:
      v759 = xpc_dictionary_get_int64(xdict, "chatRowID");
      v760 = xpc_dictionary_get_int64(xdict, "isBlackholed");
      if (a4)
        v762 = a5;
      else
        v762 = 0;
      if (a4)
        v763 = a6;
      else
        v763 = 0;
      __XPCServerIMDChatRecordSetIsBlackholed_IPCAction(v760, v761, v762, v763, v759, v760);
      result = 221;
      break;
    case 222:
      v514 = IMGetXPCStringFromDictionary();
      if (a4)
        v516 = a5;
      else
        v516 = 0;
      if (a4)
        v517 = a6;
      else
        v517 = 0;
      __XPCServerIMDMessageRecordMarkMessageGUIDUnread_IPCAction(v514, v515, v516, v517, v514);
      result = 222;
      break;
    case 223:
      v518 = IMGetXPCStringFromDictionary();
      v519 = IMGetXPCStringFromDictionary();
      v520 = xpc_dictionary_get_BOOL(xdict, "fromMe");
      if (a4)
        v522 = a5;
      else
        v522 = 0;
      if (a4)
        v523 = a6;
      else
        v523 = 0;
      __XPCServerIMDMessageRecordMarkMessagesAsUnreadWithChatGUIDUpToGUIDFromMe_IPCAction(v520, v521, v522, v523, v518, v519, v520);
      result = 223;
      break;
    case 224:
      v712 = IMGetXPCStringFromDictionary();
      if (a4)
        v714 = a5;
      else
        v714 = 0;
      if (a4)
        v715 = a6;
      else
        v715 = 0;
      __XPCServerIMDChatRecordPurgeAttachments_IPCAction(v712, v713, v714, v715, v712);
      result = 224;
      break;
    case 225:
      v679 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v680 = a5;
      else
        v680 = 0;
      if (a4)
        v681 = a6;
      else
        v681 = 0;
      objc_msgSend(v679, "handleIMDMessageRecordUpdateAttachmentSyndicationRanges_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v680, v681);
      result = 225;
      break;
    case 226:
      v608 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v609 = a5;
      else
        v609 = 0;
      if (a4)
        v610 = a6;
      else
        v610 = 0;
      objc_msgSend(v608, "handleIMDMessageRecordMoveToRecoverableMessage_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v609, v610);
      result = 226;
      break;
    case 227:
      v601 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v602 = a5;
      else
        v602 = 0;
      if (a4)
        v603 = a6;
      else
        v603 = 0;
      objc_msgSend(v601, "handleIMDMessageRecordDeleteRecoverableMessagesOlderThanDays_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v602, v603);
      result = 227;
      break;
    case 229:
      v709 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v710 = a5;
      else
        v710 = 0;
      if (a4)
        v711 = a6;
      else
        v711 = 0;
      objc_msgSend(v709, "handleIMDMessageRecordLoadRecoverableMessagesPendingCloudKitUpdate_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v710, v711);
      result = 229;
      break;
    case 230:
      v619 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v620 = a5;
      else
        v620 = 0;
      if (a4)
        v621 = a6;
      else
        v621 = 0;
      objc_msgSend(v619, "handleIMDMessageRecordUpdateRecoverableMessageSyncState_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v620, v621);
      result = 230;
      break;
    case 231:
      v579 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v580 = a5;
      else
        v580 = 0;
      if (a4)
        v581 = a6;
      else
        v581 = 0;
      objc_msgSend(v579, "handleIMDMessageRecordStoreRecoverableMessagePartBody_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v580, v581);
      result = 231;
      break;
    case 232:
      v450 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v451 = a5;
      else
        v451 = 0;
      if (a4)
        v452 = a6;
      else
        v452 = 0;
      objc_msgSend(v450, "handleIMDMessageRecordLoadRecoverableMessagesPendingCloudKitDelete_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v451, v452);
      result = 232;
      break;
    case 233:
      v554 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v555 = a5;
      else
        v555 = 0;
      if (a4)
        v556 = a6;
      else
        v556 = 0;
      objc_msgSend(v554, "handleIMDMessageRecordClearUnsyncedRemovedRecoverableMessages_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v555, v556);
      result = 233;
      break;
    case 234:
      v463 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v464 = a5;
      else
        v464 = 0;
      if (a4)
        v465 = a6;
      else
        v465 = 0;
      objc_msgSend(v463, "handleIMDNotificationsPostSharePlayNotification_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v464, v465);
      result = 234;
      break;
    case 235:
      v611 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v612 = a5;
      else
        v612 = 0;
      if (a4)
        v613 = a6;
      else
        v613 = 0;
      objc_msgSend(v611, "handleIMDMessageRecordUpdateMessagesSyndicationRanges_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v612, v613);
      result = 235;
      break;
    case 236:
      v500 = xpc_dictionary_get_int64(xdict, "chatRowID");
      v501 = xpc_dictionary_get_int64(xdict, "isRecovered");
      if (a4)
        v503 = a5;
      else
        v503 = 0;
      if (a4)
        v504 = a6;
      else
        v504 = 0;
      __XPCServerIMDChatRecordSetIsRecovered_IPCAction(v501, v502, v503, v504, v500, v501);
      result = 236;
      break;
    case 237:
      v475 = xpc_dictionary_get_int64(xdict, "chatRowID");
      v476 = xpc_dictionary_get_int64(xdict, "isDeletingIncomingMessages");
      if (a4)
        v478 = a5;
      else
        v478 = 0;
      if (a4)
        v479 = a6;
      else
        v479 = 0;
      __XPCServerIMDChatRecordSetIsDeletingIncomingMessages_IPCAction(v476, v477, v478, v479, v475, v476);
      result = 237;
      break;
    case 238:
      v622 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v623 = a5;
      else
        v623 = 0;
      if (a4)
        v624 = a6;
      else
        v624 = 0;
      objc_msgSend(v622, "handleIMDMessageRecordDeleteJunkMessagesOlderThanDays_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v623, v624);
      result = 238;
      break;
    case 239:
      v507 = IMGetXPCArrayFromDictionary();
      if (a4)
        v509 = a5;
      else
        v509 = 0;
      if (a4)
        v510 = a6;
      else
        v510 = 0;
      __XPCServerIMDMessageRecordRetractNotificationsForChatGuids_asyncIPCAction(v507, v508, v509, v510, v507);
      result = 239;
      break;
    case 240:
      v625 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v626 = a5;
      else
        v626 = 0;
      if (a4)
        v627 = a6;
      else
        v627 = 0;
      objc_msgSend(v625, "handleIMDMessageRecordUpdateRecoverableMessageSyncStateForMessageGUIDs_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v626, v627);
      result = 240;
      break;
    case 241:
      v569 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v570 = a5;
      else
        v570 = 0;
      if (a4)
        v571 = a6;
      else
        v571 = 0;
      objc_msgSend(v569, "notifyFirstUnlockComplete_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v570, v571);
      result = 241;
      break;
    case 242:
      v614 = IMGetXPCStringFromDictionary();
      v615 = IMGetXPCStringFromDictionary();
      if (a4)
        v617 = a5;
      else
        v617 = 0;
      if (a4)
        v618 = a6;
      else
        v618 = 0;
      __XPCServerIMDUpdateWallpaperForCNContact_IPCAction(v615, v616, v617, v618, v614, v615);
      result = 242;
      break;
    case 243:
      v604 = IMGetXPCStringFromDictionary();
      if (a4)
        v606 = a5;
      else
        v606 = 0;
      if (a4)
        v607 = a6;
      else
        v607 = 0;
      __XPCServerIMDCNGivenNameAndBirthdayForHandleID_IPCAction(v604, v605, v606, v607, v604);
      result = 243;
      break;
    case 244:
      v497 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v498 = a5;
      else
        v498 = 0;
      if (a4)
        v499 = a6;
      else
        v499 = 0;
      objc_msgSend(v497, "handleIMDCountOfRecordType_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v498, v499);
      result = 244;
      break;
    case 245:
      v562 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v563 = a5;
      else
        v563 = 0;
      if (a4)
        v564 = a6;
      else
        v564 = 0;
      objc_msgSend(v562, "handleIMDHandleRecordCopyHandlesFilteredUsingPredicate_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v563, v564);
      result = 245;
      break;
    case 246:
      v532 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v533 = a5;
      else
        v533 = 0;
      if (a4)
        v534 = a6;
      else
        v534 = 0;
      objc_msgSend(v532, "handleIMDHandleRecordCopySortedHandlesFilteredUsingPredicateWithLimit_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v533, v534);
      result = 246;
      break;
    case 247:
      v572 = +[IMDDatabaseServer sharedServer](IMDDatabaseServer, "sharedServer");
      if (a4)
        v573 = a5;
      else
        v573 = 0;
      if (a4)
        v574 = a6;
      else
        v574 = 0;
      objc_msgSend(v572, "handleIMDMessageRecordMarkGUIDsAsRead_IPCActionWithXPCConnection:requestMessage:responseMessage:completionHandler:", a2, xdict, v573, v574);
      result = 247;
      break;
    case 248:
      v575 = xpc_dictionary_get_int64(xdict, "identifier");
      if (a4)
        v577 = a5;
      else
        v577 = 0;
      if (a4)
        v578 = a6;
      else
        v578 = 0;
      __XPCServerIMDChatRecordCopyChatRecordForIdentifier_IPCAction(v575, v576, v577, v578, v575);
      result = 248;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t __IMDPersistenceCheckEntitlements(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  if (qword_1ED0D3A58 != -1)
    dispatch_once(&qword_1ED0D3A58, &unk_1E5ABF990);
  v3 = IMDAuditTokenTaskCopyValuesForEntitlements();
  if (!v3)
    return 0;
  v4 = (void *)v3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if ((__IMDPersistenceCheckGreaterEntitlements(v4) & 1) != 0)
      v5 = 1;
    else
      v5 = __IMDPersistenceCheckLesserEntitlements(v4, a2);
  }
  else
  {
    v5 = 0;
  }
  CFRelease(v4);
  return v5;
}

void IMDPersistencePerformBlockAfterDelay(void *a1, double a2)
{
  id v3;
  NSObject *v4;
  dispatch_time_t v5;
  _QWORD block[5];

  if (a1)
  {
    if (byte_1ED0D3AC0)
    {
      IMDSharedThreadedRecordStore();
      CSDBPerformBlockAfterDelay();
    }
    else
    {
      v3 = (id)objc_msgSend(a1, "copy");
      if (qword_1EEC406C0 != -1)
        dispatch_once(&qword_1EEC406C0, &unk_1E5AC0158);
      v4 = qword_1EEC406B8;
      if (qword_1EEC406B8)
      {
        v5 = dispatch_time(0, (uint64_t)(a2 * 1000000000.0));
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = sub_1ABC4AAA8;
        block[3] = &unk_1E5AB43E8;
        block[4] = v3;
        dispatch_after(v5, v4, block);
      }
    }
  }
}

void sub_1ABB69790(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), v2);
    xpc_release(*(xpc_object_t *)(a1 + 32));
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  xpc_release(*(xpc_object_t *)(a1 + 48));

}

BOOL sub_1ABB697D8(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[9];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t);
  id v38;
  _QWORD v39[4];
  _QWORD v40[4];
  uint8_t buf[4];
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  for (result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40)); result; result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40)))
  {
    v33 = 0;
    v34 = &v33;
    v35 = 0x3032000000;
    v36 = sub_1ABC052F4;
    v37 = sub_1ABC05304;
    v38 = 0;
    v29 = 0;
    v30 = &v29;
    v31 = 0x2020000000;
    v32 = 0;
    v25 = 0;
    v26 = &v25;
    v27 = 0x2020000000;
    v28 = 0;
    v21 = 0;
    v22 = &v21;
    v23 = 0x2020000000;
    v24 = 0;
    v17 = 0;
    v18 = &v17;
    v19 = 0x2020000000;
    v20 = 0;
    v3 = *(_QWORD *)(a1 + 40);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = sub_1ABC094B8;
    v16[3] = &unk_1E5AB2270;
    v16[4] = &v33;
    v16[5] = &v29;
    v16[6] = &v25;
    v16[7] = &v21;
    v16[8] = &v17;
    IMDSqlOperationIterateRow(v3, (uint64_t)v16);
    if (objc_msgSend((id)v34[5], "length") && (v4 = v30[3]) != 0 && v22[3] && v18[3])
    {
      v5 = v26[3];
      v39[0] = CFSTR("recoverableMessagesCount");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v40[0] = v6;
      v39[1] = CFSTR("unreadRecoverableMessagesCount");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v4 - v5);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v40[1] = v7;
      v39[2] = CFSTR("earliestDeleteDateInterval");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v22[3]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v40[2] = v8;
      v39[3] = CFSTR("latestDeleteDateInterval");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v18[3]);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v40[3] = v9;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v40, v39, 4);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v10, v34[5]);
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = v34[5];
        v13 = v30[3];
        v14 = v22[3];
        v15 = v18[3];
        *(_DWORD *)buf = 138413058;
        v42 = v12;
        v43 = 2048;
        v44 = v13;
        v45 = 2048;
        v46 = v14;
        v47 = 2048;
        v48 = v15;
        _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "Error in column values returned: %@|%llu|%llu|%llu", buf, 0x2Au);
      }

    }
    _Block_object_dispose(&v17, 8);
    _Block_object_dispose(&v21, 8);
    _Block_object_dispose(&v25, 8);
    _Block_object_dispose(&v29, 8);
    _Block_object_dispose(&v33, 8);

  }
  return result;
}

void sub_1ABB69B6C()
{
  JUMPOUT(0x1ABB69B74);
}

BOOL sub_1ABB69BC4(uint64_t a1, uint64_t a2)
{
  _QWORD v3[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABB697D8;
  v3[3] = &unk_1E5AB2298;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = a2;
  return _IMDSqlOperationRunQuery(a2, CFSTR("WITH recoverable_tables_union_all (chat_guid, message_id, delete_date) as( SELECT c.guid, crmj.message_id, crmj.delete_date  FROM chat_recoverable_message_join AS crmj  JOIN chat AS c  ON c.ROWID = crmj.chat_id   UNION ALL  SELECT c.guid, rmp.message_id, rmp.delete_date  FROM recoverable_message_part AS rmp  JOIN chat AS c  ON c.ROWID = rmp.chat_id) SELECT chat_guid, COUNT(message_id), SUM(m.is_read), MIN(delete_date), MAX(delete_date)  FROM recoverable_tables_union_all AS rtua  JOIN message as m  ON rtua.message_id = m.ROWID  WHERE m.item_type == 0 AND NOT (m.group_action_type IN (1,3) AND (m.ROWID IN (SELECT message_id FROM message_attachment_join)))  GROUP BY rtua.chat_guid;"),
           (uint64_t)&unk_1E5AAE758,
           (uint64_t)v3);
}

void sub_1ABB69C34(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  xpc_dictionary_get_value(xdict, "recoverableMessagesMetadataDictionary");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "_codableDictionaryCopiedFromXPCDictionary:objectClass:", v6, objc_opt_class());
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
}

uint64_t sub_1ABB69CB4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_respondWithChatRecords:responseMessage:completionHandler:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1ABB69CC8(uint64_t a1)
{
  void *v2;
  _BOOL8 v3;
  void *v4;
  int64_t int64;
  void *v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  id v10;

  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = xpc_dictionary_get_BOOL(*(xpc_object_t *)(a1 + 32), "ascending");
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  objc_msgSend(*(id *)(a1 + 40), "database");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABB69CB4;
  v8[3] = &unk_1E5AB1D80;
  v7 = *(void **)(a1 + 48);
  v8[4] = *(_QWORD *)(a1 + 40);
  v9 = v7;
  v10 = *(id *)(a1 + 56);
  objc_msgSend(v6, "fetchChatRecordsFilteredUsingPredicate:sortedUsingLastMessageDateAscending:olderThan:limit:completionHandler:", v2, v3, v4, int64, v8);

}

void sub_1ABB69E0C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "database");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "loadRecoverableMessagesMetadataGroupedByChatGUID");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "_xpcDictionaryWithCodableObjects:", v6);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = *(void **)(a1 + 40);
    if (v4)
      xpc_dictionary_set_value(v4, "recoverableMessagesMetadataDictionary", v3);
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(void))(v5 + 16))();

}

void sub_1ABB69E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v5 = *(void **)(a1 + 32);
  if (v5)
    objc_msgSend(v5, "bindParametersToSqliteWithStatement:", a4);
  v6 = *(void **)(a1 + 40);
  if (v6)
  {
    objc_msgSend(v6, "__im_nanosecondTimeInterval");
    CSDBSqliteBindInt64();
  }
  CSDBSqliteBindInt64();
  v10 = (id)CSDBRecordStoreProcessStatement();
  v7 = objc_msgSend(*(id *)(a1 + 48), "_copyChatRecordsFromCoreSDBResults:", v10);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_1ABB69F44(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = objc_claimAutoreleasedReturnValue();
  v7 = (id)v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "_chatRecordsCopiedFromXPCArray:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if (v4)
      v6 = v4;
    else
      v6 = (void *)MEMORY[0x1E0C9AA60];
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

}

sqlite3_stmt *sub_1ABB69FD0(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  sqlite3_stmt *result;

  v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 48) = 0;
    if (!*(_QWORD *)(a1 + 168) && !*(_DWORD *)(a1 + 72))
    {
      v3 = IMLogHandleForCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_1ABC5CBC0();
    }
  }
  result = *(sqlite3_stmt **)(a1 + 32);
  if (result)
  {
    result = (sqlite3_stmt *)sqlite3_finalize(result);
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return result;
}

uint64_t sub_1ABB6A050(int a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;

  if (!IMDSharedThreadedRecordStore())
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC5FF50();
  }
  v3 = CSDBSqliteDatabaseFromThreadedRecordStoreRef();
  if (!v3 && a1)
  {
    CSDBPerformBlock();
    v3 = CSDBSqliteDatabaseFromThreadedRecordStoreRef();
  }
  if (!v3)
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC5FEB4();
  }
  return v3;
}

void sub_1ABB6A21C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  id v11;
  NSObject *v12;

  if (a2 == 1)
  {
    v11 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v11;
        _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "Exception attempting to generate SQL where clause: %@", (uint8_t *)&buf, 0xCu);
      }

    }
    objc_end_catch();
    JUMPOUT(0x1ABB6A1D8);
  }
  _Unwind_Resume(a1);
}

__CFString *sub_1ABB6A468(__CFString *a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v6;

  v3 = a2;
  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      sub_1ABB6A6C0(a1, v3);
      v4 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", 0, CFSTR("Invalid predicate, unsupported predicate type"), 0);
        v6 = (id)objc_claimAutoreleasedReturnValue();
        objc_exception_throw(v6);
      }
      sub_1ABB6A520(a1, v3);
      v4 = objc_claimAutoreleasedReturnValue();
    }
    a1 = (__CFString *)v4;
  }

  return a1;
}

__CFString *sub_1ABB6A520(__CFString *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v3, "subpredicates");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v16;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v16 != v8)
            objc_enumerationMutation(v5);
          sub_1ABB6A468(a1, *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v9));
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "addObject:", v10);

          ++v9;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v7);
    }

    v11 = (void *)MEMORY[0x1E0CB3940];
    sub_1ABB6A8E8(a1, objc_msgSend(v3, "compoundPredicateType"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "componentsJoinedByString:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "stringWithFormat:", CFSTR("( %@)"), v13);
    a1 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  return a1;
}

__CFString *sub_1ABB6A6C0(__CFString *a1, void *a2)
{
  __CFString *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;

  v2 = a1;
  if (a1)
  {
    v3 = a2;
    objc_msgSend(v3, "leftExpression");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1ABB6A944(v2, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "rightExpression");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1ABB6A944(v2, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = objc_msgSend(v3, "predicateOperatorType");
    sub_1ABB6A830(v2, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("( %@ %@ %@)"), v5, v9, v7);
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

uint64_t sub_1ABB6A7A4(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      LOBYTE(a1) = 1;
    }
    else
    {
      objc_opt_class();
      LOBYTE(a1) = objc_opt_isKindOfClass();
    }
  }

  return a1 & 1;
}

const __CFString *sub_1ABB6A830(const __CFString *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  if (result)
  {
    result = CFSTR("==");
    switch(a2)
    {
      case 0:
        return CFSTR("<");
      case 1:
        return CFSTR("<=");
      case 2:
        return CFSTR(">");
      case 3:
        return CFSTR(">=");
      case 4:
        return result;
      case 5:
        return CFSTR("!=");
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_12;
      case 10:
        return CFSTR("IN");
      default:
        if (a2 != 100)
        {
LABEL_12:
          objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", 0, CFSTR("Invalid predicate, contains unsupported operator"), 0, v2, v3);
          v4 = (id)objc_claimAutoreleasedReturnValue();
          objc_exception_throw(v4);
        }
        result = CFSTR("BETWEEN");
        break;
    }
  }
  return result;
}

const __CFString *sub_1ABB6A8E8(const __CFString *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  if (result)
  {
    if (a2 == 1)
    {
      return CFSTR(" AND ");
    }
    else
    {
      if (a2 != 2)
      {
        objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", 0, CFSTR("Invalid predicate, contains unsupported compound predicate type"), 0, v2, v3);
        v4 = (id)objc_claimAutoreleasedReturnValue();
        objc_exception_throw(v4);
      }
      return CFSTR(" OR ");
    }
  }
  return result;
}

id sub_1ABB6A944(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v13;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = objc_msgSend(v3, "expressionType");
    if (v5)
    {
      if (v5 != 3)
      {
        objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", 0, CFSTR("Invalid predicate, contains unsupported expression type"), 0);
        v13 = (id)objc_claimAutoreleasedReturnValue();
        objc_exception_throw(v13);
      }
      objc_msgSend(a1, "keyPathsToColumns");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "keyPath");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "objectForKeyedSubscript:", v7);
      a1 = (void *)objc_claimAutoreleasedReturnValue();

      if (!a1)
      {
        v8 = (void *)MEMORY[0x1E0C99DA0];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid predicate, unsupported column %@"), 0);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "exceptionWithName:reason:userInfo:", 0, v9, 0);
        v10 = (id)objc_claimAutoreleasedReturnValue();

        objc_exception_throw(v10);
      }
    }
    else
    {
      objc_msgSend(v4, "constantValue");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1ABB6AA7C((id *)a1, v11);
      a1 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }

  return a1;
}

id *sub_1ABB6AA7C(id *a1, void *a2)
{
  id v3;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      sub_1ABC0AE68(a1, v3);
      a1 = (id *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if ((sub_1ABB6A7A4((uint64_t)a1, v3) & 1) == 0)
      {
        v5 = (void *)MEMORY[0x1E0C99DA0];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid predicate, unsupported constant %@"), v3);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "exceptionWithName:reason:userInfo:", 0, v6, 0);
        v7 = (id)objc_claimAutoreleasedReturnValue();

        objc_exception_throw(v7);
      }
      objc_msgSend(a1[3], "addObject:", v3);
      a1 = (id *)CFSTR("?");
    }
  }

  return a1;
}

void sub_1ABB6B05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB6B368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void IMDAttachmentRecordDoubleCheckSize(void *a1, uint64_t a2)
{
  id v3;
  char v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  __int128 v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (qword_1ED0D3748 != -1)
    dispatch_once(&qword_1ED0D3748, &unk_1E5AAEF08);
  if (byte_1EEC402E0)
  {
    if (v3 && objc_msgSend(v3, "length"))
    {
      v8 = *MEMORY[0x1E0D37EB0];
      v4 = IMFileSizeForItemAtPath();
      v5 = 0;
      if ((v4 & 1) != 0)
      {
        IMLogHandleForCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = v6;
        if ((_QWORD)v8 == a2)
        {
          if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412802;
            v10 = v3;
            v11 = 2048;
            v12 = v8;
            v13 = 2048;
            v14 = *((_QWORD *)&v8 + 1);
            _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Writing correct size for attachment at path: %@. Size: %lld (allocation size on disk: %lld)", buf, 0x20u);
          }
        }
        else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138413058;
          v10 = v3;
          v11 = 2048;
          v12 = a2;
          v13 = 2048;
          v14 = v8;
          v15 = 2048;
          v16 = *((_QWORD *)&v8 + 1);
          _os_log_error_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_ERROR, "Writing incorrect size for attachment at path: %@. Incorrect size %lld, correct size: %lld (allocation size on disk: %lld)", buf, 0x2Au);
        }
      }
      else
      {
        IMLogHandleForCategory();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          sub_1ABC55E80((uint64_t)v3, v5, v7);
      }

    }
    else
    {
      IMLogHandleForCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1ABC55E40(v5);
    }

  }
}

void sub_1ABB6BA64()
{
  int v0;
  id v1;

  objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  v0 = objc_msgSend(v1, "isInternalInstall");
  if (v0)
    LOBYTE(v0) = IMGetDomainBoolForKeyWithDefaultValue();
  byte_1EEC402E0 = v0;

}

void sub_1ABB6BB54(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  id v11;
  NSObject *v12;

  if (a2 == 1)
  {
    v11 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v11;
        _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "Exception caught trying to create the SGSuggestionsService: %@", (uint8_t *)&buf, 0xCu);
      }

    }
    objc_end_catch();
    JUMPOUT(0x1ABB6BB20);
  }
  _Unwind_Resume(a1);
}

void sub_1ABB6BCBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  id v9;
  NSObject *v10;

  if (a2 == 1)
  {
    v9 = objc_begin_catch(exception_object);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        LODWORD(a9) = 138412290;
        *(_QWORD *)((char *)&a9 + 4) = v9;
        _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "Exception caught trying to get suggestions for message: %@", (uint8_t *)&a9, 0xCu);
      }

    }
    objc_end_catch();
    JUMPOUT(0x1ABB6BC80);
  }
  _Unwind_Resume(exception_object);
}

id sub_1ABB6BDAC(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  objc_msgSend(a1, "identifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "content");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "mutableCopy");

  objc_msgSend(v5, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("CKBBContextKeyIsCellularWaypointAvailable"));
  objc_msgSend(a1, "content");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "mutableCopy");

  v8 = (void *)objc_msgSend(v5, "copy");
  objc_msgSend(v7, "setUserInfo:", v8);

  v9 = (void *)objc_msgSend(v7, "copy");
  objc_msgSend(a1, "trigger");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CEC740], "requestWithIdentifier:content:trigger:", v2, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_1ABB6CA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB6CAAC(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1ABB6CABC(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1ABB6CAC8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

void sub_1ABB6CE50(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB6CE70(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1ABB6CE80(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1ABB6CE90(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1ABB6CEA0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

void sub_1ABB6D2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB6D2D4(uint64_t a1)
{
  uint64_t result;

  CSDBSqliteBindTextFromCFString();
  result = CSDBSqliteStatementInteger64Result();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1ABB6D4D8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_1ABB6D524()
{
  IMDContactCache *v0;
  void *v1;

  v0 = objc_alloc_init(IMDContactCache);
  v1 = (void *)qword_1ED0D3A90;
  qword_1ED0D3A90 = (uint64_t)v0;

}

uint64_t sub_1ABB6DB38(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateCacheForAliases:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1ABB6DCE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "cacheContact:forKey:", a3, a2);
}

void IMDMessagePTaskInsertRow(uint64_t a1, sqlite3_int64 a2)
{
  NSObject *v4;
  uint64_t v5;
  _OWORD v6[2];
  _OWORD v7[9];
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  sqlite3_int64 v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v7, 0, sizeof(v7));
    memset(v6, 0, sizeof(v6));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v6);
    _IMDSqlOperationBeginQuery((uint64_t)v6, CFSTR("INSERT INTO message_processing_task (guid, task_flags) VALUES (?, ?);"));
    IMDSqlStatementBindTextFromCFString((uint64_t)v7, a1);
    IMDSqlStatementBindInt64((uint64_t)v7, a2);
    IMDSqlOperationFinishQuery((uint64_t)v6);
    v5 = 0;
    IMDSqlOperationRelease((uint64_t)v6, &v5);
    if (v5)
    {
      v4 = IMLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412802;
        v9 = a1;
        v10 = 2048;
        v11 = a2;
        v12 = 2112;
        v13 = v5;
        _os_log_error_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_ERROR, "Unable to insert row (guid:%@ taskFlag:%ld) into Message PTask Table: %@", buf, 0x20u);
      }
    }
  }
  else
  {
    __syncXPCIMDMessagePTaskInsertRow_IPCAction(0, a1, a2);
  }
}

uint64_t IMDMessagePTaskSelectWithLimit(sqlite3_int64 a1)
{
  __CFDictionary *Row;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v12[5])(void);
  uint64_t v13;
  _OWORD v14[2];
  _OWORD v15[9];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v16 = 0;
  v17 = &v16;
  v18 = 0x3052000000;
  v19 = sub_1ABB6FB78;
  v20 = sub_1ABB6FB88;
  v21 = 0;
  v21 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v15, 0, sizeof(v15));
    memset(v14, 0, sizeof(v14));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v14);
    _IMDSqlOperationBeginQuery((uint64_t)v14, CFSTR("SELECT * FROM message_processing_task ORDER BY ROWID ASC LIMIT ?;"));
    IMDSqlStatementBindInt64((uint64_t)v15, a1);
    while (IMDSqlOperationHasRows((uint64_t)v14))
    {
      Row = IMDSqlStatementGetRow((sqlite3_stmt **)v15);
      if (Row)
        objc_msgSend((id)v17[5], "addObject:", Row);

    }
    IMDSqlOperationFinishQuery((uint64_t)v14);
    v13 = 0;
    IMDSqlOperationRelease((uint64_t)v14, &v13);
    if (v13)
    {
      v3 = IMLogHandleForCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_1ABC56108((uint64_t)&v13, v3, v4, v5, v6, v7, v8, v9);
    }
  }
  else
  {
    v12[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v12[1] = (void (*)(void))3221225472;
    v12[2] = (void (*)(void))sub_1ABB6FB94;
    v12[3] = (void (*)(void))&unk_1E5AAF630;
    v12[4] = (void (*)(void))&v16;
    __syncXPCIMDMessagePTaskSelectWithLimit_IPCAction(v12, a1);
  }
  v10 = v17[5];
  _Block_object_dispose(&v16, 8);
  return v10;
}

void sub_1ABB6FB4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1ABB6FB78(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1ABB6FB88(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

xpc_object_t sub_1ABB6FB94(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABB6FC0C;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABB6FC0C(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", IMGetXPCStringFromDictionary(), CFSTR("guid"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", IMGetXPCIntFromDictionary()), CFSTR("task_flags"));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v2);

  return 1;
}

void IMDMessagePTaskUpdateTaskFlagsForGUID(uint64_t a1, sqlite3_int64 a2)
{
  NSObject *v4;
  uint64_t v5;
  _OWORD v6[2];
  _OWORD v7[9];
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  sqlite3_int64 v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v7, 0, sizeof(v7));
    memset(v6, 0, sizeof(v6));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v6);
    _IMDSqlOperationBeginQuery((uint64_t)v6, CFSTR("UPDATE message_processing_task SET task_flags = ? WHERE guid = ?;"));
    IMDSqlStatementBindInt64((uint64_t)v7, a2);
    IMDSqlStatementBindTextFromCFString((uint64_t)v7, a1);
    IMDSqlOperationFinishQuery((uint64_t)v6);
    v5 = 0;
    IMDSqlOperationRelease((uint64_t)v6, &v5);
    if (v5)
    {
      v4 = IMLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412802;
        v9 = a1;
        v10 = 2048;
        v11 = a2;
        v12 = 2112;
        v13 = v5;
        _os_log_error_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_ERROR, "Unable to update row (guid:%@ taskFlag:%ld) for Message PTask Table: %@", buf, 0x20u);
      }
    }
  }
  else
  {
    __syncXPCIMDMessagePTaskUpdateTaskFlagsForGUID_IPCAction(0, a1, a2);
  }
}

void IMDMessagePTaskDeleteAllCompletedTask()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[11];

  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v8, 0, sizeof(v8));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v8);
    _IMDSqlOperationBeginQuery((uint64_t)v8, CFSTR("Delete from message_processing_task WHERE task_flags = 0;"));
    IMDSqlOperationFinishQuery((uint64_t)v8);
    v7 = 0;
    IMDSqlOperationRelease((uint64_t)v8, &v7);
    if (v7)
    {
      v0 = IMLogHandleForCategory();
      if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
        sub_1ABC56174((uint64_t)&v7, v0, v1, v2, v3, v4, v5, v6);
    }
  }
  else
  {
    __syncXPCIMDMessagePTaskDeleteAllCompletedTask_IPCAction(0);
  }
}

void sub_1ABB6FF10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1ABB70828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[15];
  _QWORD v10[16];

  v10[15] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0D382C0];
  v9[0] = CFSTR("rowID");
  v9[1] = v0;
  v10[0] = CFSTR("ROWID");
  v10[1] = CFSTR("item_type");
  v1 = *MEMORY[0x1E0D38298];
  v9[2] = *MEMORY[0x1E0D382A8];
  v9[3] = v1;
  v10[2] = CFSTR("guid");
  v10[3] = CFSTR("date");
  v2 = *MEMORY[0x1E0D382B8];
  v9[4] = *MEMORY[0x1E0D382D8];
  v9[5] = v2;
  v10[4] = CFSTR("text");
  v10[5] = CFSTR("is_from_me");
  v3 = *MEMORY[0x1E0D382B0];
  v9[6] = *MEMORY[0x1E0D382A0];
  v9[7] = v3;
  v10[6] = CFSTR("fallback_hash");
  v10[7] = CFSTR("has_dd_results");
  v4 = *MEMORY[0x1E0D382E8];
  v9[8] = *MEMORY[0x1E0D382C8];
  v9[9] = v4;
  v10[8] = CFSTR("needs_relay");
  v10[9] = CFSTR("schedule_type");
  v5 = *MEMORY[0x1E0D382F0];
  v9[10] = *MEMORY[0x1E0D382E0];
  v9[11] = v5;
  v10[10] = CFSTR("schedule_state");
  v10[11] = CFSTR("service");
  v6 = *MEMORY[0x1E0D38288];
  v9[12] = *MEMORY[0x1E0D38290];
  v9[13] = v6;
  v10[12] = CFSTR("ck_sync_state");
  v10[13] = CFSTR("balloon_bundle_id");
  v9[14] = *MEMORY[0x1E0D382D0];
  v10[14] = CFSTR("is_pending_satellite_send");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, v9, 15);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)qword_1ED0D3780;
  qword_1ED0D3780 = v7;

}

void *IMDCreateIMItemFromIMDMessageRecord(const __CFArray **a1, void *a2, char a3, int a4)
{
  return IMDCreateIMItemFromIMDMessageRecordRefCopyAttachmentsIfNeededWithAccountLookup(a1, a2, a3, a4, 0);
}

void sub_1ABB70E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB70E64(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABB70E74(uint64_t a1)
{

}

void sub_1ABB70E7C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1ABB70E8C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1ABB71110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB71130(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABB71140(uint64_t a1)
{

}

void sub_1ABB71148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  objc_msgSend(*(id *)(a1 + 32), "bindParametersToSqliteWithStatement:", a4);
  v8 = (id)CSDBRecordStoreProcessStatement();
  v5 = objc_msgSend(*(id *)(a1 + 40), "_copyHandleRecordsFromCoreSDBResults:", v8);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_1ABB715A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB715E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v5 = *(void **)(a1 + 32);
  if (v5)
    objc_msgSend(v5, "bindParametersToSqliteWithStatement:", a4);
  CSDBSqliteBindInt64();
  v9 = (id)CSDBRecordStoreProcessStatement();
  v6 = objc_msgSend(*(id *)(a1 + 40), "_copyHandleRecordsFromCoreSDBResults:", v9);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_1ABB716B8()
{
  void *v0;
  int v1;
  __objc2_class **v2;
  id v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isSpotlightClientStateEnabled");

  v2 = &off_1E5AADAF0;
  if (!v1)
    v2 = off_1E5AADAE8;
  v3 = objc_alloc_init(*v2);
  v4 = (void *)qword_1EEC40398;
  qword_1EEC40398 = (uint64_t)v3;

}

void sub_1ABB71790(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 32);
  v13 = 0;
  objc_msgSend(v2, "currentClientStateWithError:", &v13);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v13;
  if (v5)
  {
    v6 = v5;
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC5624C(v3);
LABEL_7:

    goto LABEL_8;
  }
  v8 = *(void **)(a1 + 40);
  v12 = 0;
  objc_msgSend(v8, "saveClientState:withError:", v4, &v12);
  v9 = v12;
  if (v9)
  {
    v6 = v9;
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC561E0(v3);
    goto LABEL_7;
  }
  objc_msgSend(MEMORY[0x1E0D39B00], "_finishedMigration");
  IMLogHandleForCategory();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v15 = v10;
    v16 = 2112;
    v17 = v11;
    _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_DEFAULT, "Imported indexed client state from %@ to %@", buf, 0x16u);
  }
LABEL_8:

}

void sub_1ABB71BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB71BE8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABB71BF8(uint64_t a1)
{

}

void sub_1ABB71C00(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1ABB71D00(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1ABB71DB4;
  v10[3] = &unk_1E5AB0670;
  v7 = *(id *)(a1 + 32);
  v12 = v6;
  v13 = v7;
  v11 = v5;
  v8 = v6;
  v9 = v5;
  sub_1ABBD7050(v10);

}

uint64_t sub_1ABB71DB4(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1ABB72230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB72250(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1ABB72324(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABB723AC;
  v6[3] = &unk_1E5AB06E8;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  sub_1ABBD7050(v6);

}

uint64_t sub_1ABB723AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_1ABB726B0()
{
  id v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  if (qword_1EEC40378 != -1)
    dispatch_once(&qword_1EEC40378, &unk_1E5AAE958);
  if (byte_1EEC403B0)
  {
    v0 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v1 = *MEMORY[0x1E0D36490];
    v5 = *MEMORY[0x1E0CB2938];
    v6[0] = CFSTR("Simulated error due to defaults");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (void *)objc_msgSend(v0, "initWithDomain:code:userInfo:", v1, 1000, v2);

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

void sub_1ABB727B4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  id v13;
  uint8_t buf[4];
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    if (objc_msgSend(v5, "length"))
    {
      v13 = 0;
      v7 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D39B00]), "initWithData:error:", v6, &v13);
      v8 = v13;
      if (v8)
      {
        v9 = v8;
        IMLogHandleForCategory();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_1ABC562E4((uint64_t)v9);

        v11 = objc_alloc_init(MEMORY[0x1E0D39B00]);
        v7 = v11;
      }
    }
    else
    {
      v7 = objc_alloc_init(MEMORY[0x1E0D39B00]);
    }
    IMLogHandleForCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v15 = v7;
      _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "Current client state: %@", buf, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

id sub_1ABB72BA8()
{
  id v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  if (qword_1EEC40380 != -1)
    dispatch_once(&qword_1EEC40380, &unk_1E5AB0780);
  if (byte_1EEC403B8)
  {
    v0 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v1 = *MEMORY[0x1E0D36490];
    v5 = *MEMORY[0x1E0CB2938];
    v6[0] = CFSTR("Simulated error due to defaults");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (void *)objc_msgSend(v0, "initWithDomain:code:userInfo:", v1, 1000, v2);

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

void sub_1ABB72CAC(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13[16];

  v4 = a2;
  IMLogHandleForCategory();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (a2)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1ABC56408(a1, v6, v7, v8, v9, v10, v11, v12);

  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Saved client state", v13, 2u);
    }

    notify_post("com.apple.imdpersistenceagent.notification.spotlightclientstateupdated");
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

double sub_1ABB73078()
{
  void *v0;
  int v1;
  double result;

  objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isInternalInstall");

  if (v1)
  {
    result = (double)IMGetDomainIntForKey();
    *(double *)&qword_1EEC403A0 = result;
  }
  return result;
}

double sub_1ABB730D4()
{
  void *v0;
  int v1;
  double result;

  objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isInternalInstall");

  if (v1)
  {
    result = (double)IMGetDomainIntForKey();
    *(double *)&qword_1EEC403A8 = result;
  }
  return result;
}

void sub_1ABB73130()
{
  void *v0;
  int v1;

  objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isInternalInstall");

  if (v1)
    byte_1EEC403B0 = IMGetDomainBoolForKey();
}

void sub_1ABB73188()
{
  void *v0;
  int v1;

  objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isInternalInstall");

  if (v1)
    byte_1EEC403B8 = IMGetDomainBoolForKey();
}

void sub_1ABB731E0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1ABB731F0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_1ABB7349C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB734C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABB734D4(uint64_t a1)
{

}

void sub_1ABB734DC(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void IMDSqlStatementBindTextFromCFString(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  sqlite3_stmt *v8;
  int v9;

  if (a1 && *(_QWORD *)(a1 + 16) && *(_QWORD *)a1
    || (v4 = IMLogHandleForCategory(), !os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)))
  {
    if (a2)
      goto LABEL_8;
  }
  else
  {
    sub_1ABC5650C();
    if (a2)
      goto LABEL_8;
  }
  v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_1ABC56470();
LABEL_8:
  if (a1 && *(_QWORD *)a1)
  {
    v6 = CSDBCreateUTF8StringFromCFString();
    if (v6)
    {
      v7 = (const char *)v6;
      v8 = *(sqlite3_stmt **)a1;
      v9 = *(_DWORD *)(a1 + 32) + 1;
      *(_DWORD *)(a1 + 32) = v9;
      sqlite3_bind_text(v8, v9, v7, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
    }
  }
}

void IMDSqlStatementBindTextFromArrayOfCFStrings(uint64_t a1, CFArrayRef theArray)
{
  NSObject *v4;
  NSObject *v5;
  int Count;
  CFIndex v7;
  uint64_t v8;
  void (__cdecl *v9)(void *);
  uint64_t v10;
  const char *v11;
  sqlite3_stmt *v12;
  int v13;

  if (!theArray && (v4 = IMLogHandleForCategory(), os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC56644();
    if (!a1)
      goto LABEL_9;
  }
  else if (!a1)
  {
    goto LABEL_9;
  }
  if (*(_QWORD *)(a1 + 16) && *(_QWORD *)a1)
  {
    if (!theArray)
      return;
LABEL_13:
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v7 = 0;
      if (Count <= 1uLL)
        v8 = 1;
      else
        v8 = Count;
      v9 = (void (__cdecl *)(void *))MEMORY[0x1E0C834A8];
      do
      {
        CFArrayGetValueAtIndex(theArray, v7);
        v10 = CSDBCreateUTF8StringFromCFString();
        if (v10)
        {
          v11 = (const char *)v10;
          v12 = *(sqlite3_stmt **)a1;
          v13 = *(_DWORD *)(a1 + 32) + 1;
          *(_DWORD *)(a1 + 32) = v13;
          sqlite3_bind_text(v12, v13, v11, -1, v9);
        }
        ++v7;
      }
      while (v8 != v7);
    }
    return;
  }
LABEL_9:
  v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_1ABC565A8();
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (theArray && *(_QWORD *)a1)
    goto LABEL_13;
}

void IMDSqlStatementBindInt64(uint64_t a1, sqlite3_int64 a2)
{
  sqlite3_stmt *v4;
  NSObject *v5;
  int v6;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v4 = *(sqlite3_stmt **)a1;
      if (*(_QWORD *)a1)
        goto LABEL_7;
    }
  }
  v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_1ABC566E0();
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  v4 = *(sqlite3_stmt **)a1;
  if (*(_QWORD *)a1)
  {
LABEL_7:
    v6 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v6;
    sqlite3_bind_int64(v4, v6, a2);
  }
}

void IMDSqlStatementBindInt(uint64_t a1, int a2)
{
  sqlite3_stmt *v4;
  NSObject *v5;
  int v6;

  if (a1)
  {
    v4 = *(sqlite3_stmt **)a1;
    if (*(_QWORD *)a1)
      goto LABEL_6;
  }
  v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_1ABC5677C();
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  v4 = *(sqlite3_stmt **)a1;
  if (*(_QWORD *)a1)
  {
LABEL_6:
    v6 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v6;
    sqlite3_bind_int(v4, v6, a2);
  }
}

void IMDSqlStatementBindDouble(uint64_t a1, double a2)
{
  sqlite3_stmt *v4;
  NSObject *v5;
  int v6;

  if (a1)
  {
    v4 = *(sqlite3_stmt **)a1;
    if (*(_QWORD *)a1)
      goto LABEL_6;
  }
  v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_1ABC56818();
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  v4 = *(sqlite3_stmt **)a1;
  if (*(_QWORD *)a1)
  {
LABEL_6:
    v6 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v6;
    sqlite3_bind_double(v4, v6, a2);
  }
}

void IMDSqlStatementBindBlob(uint64_t a1, CFDataRef theData)
{
  sqlite3_stmt *v4;
  NSObject *v5;
  int v6;
  int v7;
  const UInt8 *BytePtr;
  int Length;

  if (a1)
  {
    v4 = *(sqlite3_stmt **)a1;
    if (*(_QWORD *)a1)
      goto LABEL_6;
  }
  v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_1ABC568B4();
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  v4 = *(sqlite3_stmt **)a1;
  if (*(_QWORD *)a1)
  {
LABEL_6:
    v6 = *(_DWORD *)(a1 + 32);
    v7 = v6 + 1;
    *(_DWORD *)(a1 + 32) = v6 + 1;
    if (theData)
    {
      BytePtr = CFDataGetBytePtr(theData);
      Length = CFDataGetLength(theData);
      sqlite3_bind_blob(v4, v7, BytePtr, Length, 0);
    }
    else
    {
      sqlite3_bind_null(v4, v6 + 1);
    }
  }
}

uint64_t IMDIntFromSqlColumn(uint64_t a1)
{
  sqlite3_stmt **v2;
  NSObject *v3;
  uint64_t result;
  NSObject *v5;

  v2 = *(sqlite3_stmt ***)a1;
  if (!*(_QWORD *)a1)
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC569EC();
    v2 = *(sqlite3_stmt ***)a1;
    if (!*(_QWORD *)a1)
      return 0;
  }
  if (*v2)
    return sqlite3_column_int(*v2, *(_DWORD *)(a1 + 16));
  v5 = IMLogHandleForCategory();
  result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    sub_1ABC56950();
    return 0;
  }
  return result;
}

double IMDDoubleFromSqlColumn(uint64_t a1)
{
  sqlite3_stmt **v2;
  NSObject *v3;
  double v4;
  NSObject *v5;

  v2 = *(sqlite3_stmt ***)a1;
  if (*(_QWORD *)a1)
    goto LABEL_13;
  v3 = IMLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1ABC56B24();
  v2 = *(sqlite3_stmt ***)a1;
  if (!*(_QWORD *)a1)
    return 0.0;
LABEL_13:
  if (*v2)
    return sqlite3_column_double(*v2, *(_DWORD *)(a1 + 16));
  v5 = IMLogHandleForCategory();
  v4 = 0.0;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_1ABC56A88();
  return v4;
}

CFDataRef IMDBlobFromSqlColumn(uint64_t a1)
{
  sqlite3_stmt **v2;
  NSObject *v3;
  sqlite3_stmt *v4;
  const UInt8 *v5;
  unsigned int v6;
  BOOL v7;
  NSObject *v9;

  v2 = *(sqlite3_stmt ***)a1;
  if (*(_QWORD *)a1)
    goto LABEL_5;
  v3 = IMLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1ABC56ECC();
  v2 = *(sqlite3_stmt ***)a1;
  if (*(_QWORD *)a1)
  {
LABEL_5:
    v4 = *v2;
    if (*v2)
    {
      v5 = (const UInt8 *)sqlite3_column_blob(*v2, *(_DWORD *)(a1 + 16));
      v6 = sqlite3_column_bytes(v4, *(_DWORD *)(a1 + 16));
      if (v5)
        v7 = v6 == 0;
      else
        v7 = 1;
      if (!v7)
        return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, v6);
    }
    else
    {
      v9 = IMLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1ABC56E30();
    }
  }
  return 0;
}

void IMDSqlStatementColumnByIndex(sqlite3_stmt **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sqlite3_stmt *v6;
  NSObject *v7;
  int v8;
  int v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  NSObject *v12;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1 || (v6 = *a1) == 0)
  {
    v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC5713C();
    if (!a1)
      goto LABEL_16;
    v6 = *a1;
    if (!*a1)
      goto LABEL_16;
  }
  v8 = sqlite3_column_count(v6);
  v9 = v8;
  if (a2 < 0 || v8 <= a2)
  {
    v10 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected false '%@' in %s at %s:%d. %@"), CFSTR("index >= 0 && index < count"), "IMDSqlColumn IMDSqlStatementColumnByIndex(IMDSqlStatement *, int)", IMFileLocationTrimFileName(), 187, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v11 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v11)
    {
      v11(v10);
    }
    else if (IMOSLoggingEnabled())
    {
      v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v14 = v10;
        _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (*a1)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = a2;
    *(_DWORD *)(a3 + 20) = v9;
  }
  else
  {
LABEL_16:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

void IMDSqlStatementColumnByName(sqlite3_stmt **a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  sqlite3_stmt *v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  const char *v11;

  if (!a1 || (v6 = *a1) == 0)
  {
    v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      sub_1ABC571D8();
      if (!a1)
        goto LABEL_12;
    }
    else if (!a1)
    {
      goto LABEL_12;
    }
    v6 = *a1;
    if (*a1)
      goto LABEL_6;
LABEL_12:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
LABEL_6:
  v8 = sqlite3_column_count(v6);
  if (v8 < 1)
    goto LABEL_12;
  v9 = v8;
  v10 = 0;
  while (1)
  {
    v11 = sqlite3_column_name(*a1, v10);
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v11;
    *(_DWORD *)(a3 + 16) = v10;
    *(_DWORD *)(a3 + 20) = v9;
    if (!v11)
    {
      v11 = sqlite3_column_name(*a1, v10);
      *(_QWORD *)(a3 + 8) = v11;
    }
    if (!strncmp(v11, a2, 0x100uLL))
      break;
    if (v9 == ++v10)
      goto LABEL_12;
  }
}

uint64_t IMDSqlColumnGetType(uint64_t a1)
{
  if (*(_QWORD *)a1 && **(_QWORD **)a1)
    return sqlite3_column_type(**(sqlite3_stmt ***)a1, *(_DWORD *)(a1 + 16));
  else
    return 0;
}

sqlite3_stmt *IMDSqlColumnGetObject(__int128 *a1)
{
  sqlite3_stmt **v1;
  sqlite3_stmt *result;
  id v4;
  id v5;
  __int128 v6;
  uint64_t v7;

  v1 = *(sqlite3_stmt ***)a1;
  if (!*(_QWORD *)a1)
    return 0;
  result = *v1;
  if (*v1)
  {
    switch(sqlite3_column_type(result, *((_DWORD *)a1 + 4)))
    {
      case 1:
        v4 = objc_alloc(MEMORY[0x1E0CB37E8]);
        v6 = *a1;
        v7 = *((_QWORD *)a1 + 2);
        IMDInt64FromSqlColumn((uint64_t)&v6);
        result = (sqlite3_stmt *)MEMORY[0x1E0DE7D20](v4, sel_initWithUnsignedLongLong_);
        break;
      case 2:
        v5 = objc_alloc(MEMORY[0x1E0CB37E8]);
        v6 = *a1;
        v7 = *((_QWORD *)a1 + 2);
        IMDDoubleFromSqlColumn((uint64_t)&v6);
        result = (sqlite3_stmt *)MEMORY[0x1E0DE7D20](v5, sel_initWithDouble_);
        break;
      case 3:
        v6 = *a1;
        v7 = *((_QWORD *)a1 + 2);
        result = (sqlite3_stmt *)IMDStringFromSqlColumn((uint64_t)&v6);
        break;
      case 4:
        v6 = *a1;
        v7 = *((_QWORD *)a1 + 2);
        result = IMDBlobFromSqlColumn((uint64_t)&v6);
        break;
      default:
        return 0;
    }
  }
  return result;
}

void IMDSqlColumnSetColumnValueInXPCDictionary(void *a1, uint64_t a2)
{
  sqlite3_stmt **v3;
  sqlite3_stmt *v4;
  const char *v6;
  const char *v7;
  sqlite3_int64 v8;
  NSObject *v9;
  NSObject *v10;
  const unsigned __int8 *v11;
  const void *v12;
  unsigned int v13;
  BOOL v14;
  double v15;

  if (!a1)
  {
    v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1ABC57310();
    if (**(_QWORD **)a2)
      return;
LABEL_12:
    v10 = IMLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1ABC57274();
    return;
  }
  v3 = *(sqlite3_stmt ***)a2;
  v4 = **(sqlite3_stmt ***)a2;
  if (!v4)
    goto LABEL_12;
  v6 = *(const char **)(a2 + 8);
  if (!v6)
  {
    v7 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *(_DWORD *)(a2 + 16));
    *(_QWORD *)(a2 + 8) = v7;
    v3 = *(sqlite3_stmt ***)a2;
    if (!*(_QWORD *)a2)
      return;
    v6 = v7;
  }
  if (*v3)
  {
    switch(sqlite3_column_type(*v3, *(_DWORD *)(a2 + 16)))
    {
      case 1:
        v8 = sqlite3_column_int64(v4, *(_DWORD *)(a2 + 16));
        xpc_dictionary_set_int64(a1, v6, v8);
        break;
      case 2:
        v15 = sqlite3_column_double(v4, *(_DWORD *)(a2 + 16));
        xpc_dictionary_set_double(a1, v6, v15);
        break;
      case 3:
        v11 = sqlite3_column_text(v4, *(_DWORD *)(a2 + 16));
        if (v11)
          xpc_dictionary_set_string(a1, v6, (const char *)v11);
        break;
      case 4:
        v12 = sqlite3_column_blob(v4, *(_DWORD *)(a2 + 16));
        v13 = sqlite3_column_bytes(v4, *(_DWORD *)(a2 + 16));
        if (v12)
          v14 = v13 == 0;
        else
          v14 = 1;
        if (!v14)
          xpc_dictionary_set_data(a1, v6, v12, v13);
        break;
      default:
        return;
    }
  }
}

xpc_object_t IMDSqlStatementGetXPCRow(sqlite3_stmt **a1)
{
  NSObject *v2;
  xpc_object_t v3;
  int v4;
  int v5;
  int i;
  _QWORD v8[2];
  int v9;
  int v10;

  if (!a1 || !*a1)
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      sub_1ABC573AC();
      if (!a1)
        return 0;
    }
    else if (!a1)
    {
      return 0;
    }
    if (*a1)
      goto LABEL_6;
    return 0;
  }
LABEL_6:
  v3 = xpc_dictionary_create(0, 0, 0);
  if (*a1)
  {
    v4 = sqlite3_column_count(*a1);
    if (v4 >= 1)
    {
      v5 = v4;
      for (i = 0; i != v5; ++i)
      {
        v8[0] = a1;
        v8[1] = 0;
        v9 = i;
        v10 = v5;
        IMDSqlColumnSetColumnValueInXPCDictionary(v3, (uint64_t)v8);
      }
    }
  }
  return v3;
}

__CFDictionary *IMDSqlStatementGetRow(sqlite3_stmt **a1)
{
  sqlite3_stmt *v2;
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  __CFDictionary *Mutable;
  const CFDictionaryKeyCallBacks *v8;
  const CFDictionaryValueCallBacks *v9;
  const char *v10;
  sqlite3_stmt *Object;
  sqlite3_stmt *v12;
  id v13;
  void *v14;
  __int128 v16;
  int v17;
  int v18;

  if (!a1 || (v2 = *a1) == 0)
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_1ABC57448();
      if (!a1)
        return 0;
    }
    else if (!a1)
    {
      return 0;
    }
    v2 = *a1;
    if (*a1)
      goto LABEL_6;
    return 0;
  }
LABEL_6:
  v4 = sqlite3_column_count(v2);
  if (v4 < 1)
    return 0;
  v5 = v4;
  v6 = 0;
  Mutable = 0;
  v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  do
  {
    v10 = sqlite3_column_name(*a1, v6);
    *(_QWORD *)&v16 = a1;
    *((_QWORD *)&v16 + 1) = v10;
    v17 = v6;
    v18 = v5;
    Object = IMDSqlColumnGetObject(&v16);
    if (Object)
    {
      v12 = Object;
      v13 = objc_alloc(MEMORY[0x1E0CB3940]);
      if (!v10)
      {
        if (*a1)
          v10 = sqlite3_column_name(*a1, v6);
        else
          v10 = 0;
      }
      v14 = (void *)objc_msgSend(v13, "initWithCString:encoding:", v10, 4);
      if (!Mutable)
        Mutable = CFDictionaryCreateMutable(0, 0, v8, v9);
      CFDictionarySetValue(Mutable, v14, v12);

    }
    ++v6;
  }
  while (v5 != v6);
  return Mutable;
}

sqlite3_stmt *IMDSqlStatementColumnCount(sqlite3_stmt **a1)
{
  sqlite3_stmt *result;
  NSObject *v3;
  NSObject *v4;

  if (a1)
  {
    result = *a1;
    if (result)
      return (sqlite3_stmt *)sqlite3_column_count(result);
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC57580();
    result = *a1;
    if (*a1)
      return (sqlite3_stmt *)sqlite3_column_count(result);
  }
  else
  {
    v4 = IMLogHandleForCategory();
    result = (sqlite3_stmt *)os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      sub_1ABC574E4();
      return 0;
    }
  }
  return result;
}

void sub_1ABB7438C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x26u);
}

void sub_1ABB74454()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init((Class)objc_opt_class());
  v1 = (void *)qword_1ED0D3A98;
  qword_1ED0D3A98 = (uint64_t)v0;

}

void sub_1ABB744BC()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Messages", "IMDNotificationsController");
  v1 = (void *)qword_1EEC403C0;
  qword_1EEC403C0 = (uint64_t)v0;

}

void sub_1ABB745CC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12[16];
  uint8_t v13[16];
  uint8_t buf[16];

  if ((dispatch_get_specific("_IMDNotificationRequestQueue") != 0) != (_DWORD)a1)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "**************************************************************************", buf, 2u);
      }

    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "******* Notification work done on wrong queue, please file a radar *******", v13, 2u);
      }

    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "**************************************************************************", v12, 2u);
      }

    }
    +[IMDNotificationsController logger](IMDNotificationsController, "logger");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      sub_1ABC5761C(a1, v5, v6, v7, v8, v9, v10, v11);

  }
}

void sub_1ABB74B34(void *a1)
{
  dispatch_block_t block;

  block = a1;
  sub_1ABB745CC(0);
  if (qword_1EEC402F0 != -1)
    dispatch_once(&qword_1EEC402F0, &unk_1E5AB0C60);
  dispatch_async((dispatch_queue_t)qword_1EEC40300, block);

}

void sub_1ABB74B98(uint64_t a1)
{
  void *v1;
  id v2;
  _QWORD v3[4];
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABB74C10;
  v3[3] = &unk_1E5AB0840;
  v4 = v1;
  v2 = v1;
  objc_msgSend(v2, "getNotificationSettingsWithCompletionHandler:", v3);

}

void sub_1ABB74C10(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = 138412290;
      v6 = v3;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "getNotificationSettingsWithCompletionHandler settings:%@", (uint8_t *)&v5, 0xCu);
    }

  }
  if (!objc_msgSend(v3, "criticalAlertSetting"))
    objc_msgSend(*(id *)(a1 + 32), "requestAuthorizationWithOptions:completionHandler:", 23, &unk_1E5AAEB20);

}

void sub_1ABB74D0C(uint64_t a1, int a2, void *a3)
{
  id v4;
  NSObject *v5;
  _DWORD v6[2];
  __int16 v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6[0] = 67109378;
      v6[1] = a2;
      v7 = 2112;
      v8 = v4;
      _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "requestAuthorizationWithOptions granted:%{BOOL}d error:%@", (uint8_t *)v6, 0x12u);
    }

  }
}

void sub_1ABB75CB4(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(a1 + 32));
  v1 = (id)objc_claimAutoreleasedReturnValue();
  IMSetDomainValueForKey();

}

void sub_1ABB75D5C(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(a1 + 32));
  v1 = (id)objc_claimAutoreleasedReturnValue();
  IMSetDomainValueForKey();

}

void sub_1ABB75EA8(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1ABB75E6CLL);
  }
  objc_sync_exit(v2);
  _Unwind_Resume(exc_buf);
}

void sub_1ABB75F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1ABB75F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1ABB76008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB7604C(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2;
  v5 = a3;
  objc_msgSend(v4, "date");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "date");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "compare:", v7);
  if (!v8)
  {
    v9 = objc_msgSend(v4, "rowID");
    if (v9 > objc_msgSend(v5, "rowID"))
      v8 = 1;
    else
      v8 = -1;
  }

  return v8;
}

uint64_t sub_1ABB7618C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (!v5)
  {
LABEL_8:
    v7 = 0;
    goto LABEL_9;
  }
  if (objc_msgSend(v5, "rawDate") <= *(_QWORD *)(a1 + 32))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v5, "guid");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412290;
        v12 = v9;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "Skipping posting guid as we already posted messages newer: %@", (uint8_t *)&v11, 0xCu);

      }
    }
    goto LABEL_8;
  }
  v7 = 1;
LABEL_9:

  return v7;
}

void sub_1ABB76808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB7685C(uint64_t a1, void *a2)
{
  uint64_t result;

  result = objc_msgSend(a2, "count");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1ABB76CDC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1AF435474]();
  v5 = objc_msgSend(v3, "rawDate");
  objc_msgSend(*(id *)(a1 + 32), "_generateNotificationRequestForDeliveryError:isCarouselUITriggered:", v3, *(unsigned __int8 *)(a1 + 48));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v6, "identifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138412290;
      v10 = v8;
      _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Generated notification request for failed delivery identifier %@", (uint8_t *)&v9, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);
  objc_msgSend(*(id *)(a1 + 32), "advanceLastAlertedFailedMessageDate:", v5);

  objc_autoreleasePoolPop(v4);
}

uint64_t sub_1ABB7723C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeAllDeliveredMessageNotifications");
}

void sub_1ABB7767C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        objc_msgSend(v8, "handleRecord");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "canonicalizedURIString");
        v10 = objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          v11 = (void *)v10;

        }
        else
        {
          objc_msgSend(v8, "handleRecord");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "uncanonicalizedURIString");
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v11)
            goto LABEL_11;
        }
        if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:", v11) & 1) == 0)
        {
          objc_msgSend(*(id *)(a1 + 32), "addObject:", v11);
          objc_msgSend(*(id *)(a1 + 40), "addObject:", v8);
        }
LABEL_11:

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

}

void sub_1ABB7788C(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = objc_msgSend(a1[4], "count");
  v3 = objc_msgSend(a1[5], "count");
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v3 + v2);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObjectsFromArray:", a1[5]);
  objc_msgSend(v4, "addObjectsFromArray:", a1[4]);
  objc_msgSend(a1[6], "__postNotificationRequests:isMostActiveDevice:", v4, objc_msgSend(a1[6], "_isMostActiveDevice"));

}

uint64_t sub_1ABB77984(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "__postNotificationRequests:isMostActiveDevice:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "_isMostActiveDevice"));
}

uint64_t sub_1ABB77A30(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "__postNotificationRequests:isMostActiveDevice:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void sub_1ABB77CE0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    IMLogHandleForCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC578A8(a1, (uint64_t)v3, v4);

  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "identifier");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138412290;
      v8 = v6;
      _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Finished posting notification: %@", (uint8_t *)&v7, 0xCu);

    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

void sub_1ABB77E18(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(a2, "authorizationStatus"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *MEMORY[0x1E0D38A70];
  v6 = *MEMORY[0x1E0D38A78];
  v7[0] = v2;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "trackEvent:withDictionary:", v4, v5);

}

void sub_1ABB783F4(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeDeliveredNotificationsWithIdentifiers:", *(_QWORD *)(a1 + 40));

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = 138412290;
      v6 = v4;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Withdrew message notifications for message guids %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_1ABB785E8(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "_removeAllDeliveredMessageNotifications");
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABB78664;
  v3[3] = &unk_1E5AAF5B8;
  v2 = *(void **)(a1 + 40);
  v3[4] = *(_QWORD *)(a1 + 32);
  v4 = v2;
  IMDPersistencePerformBlock(v3, 0);

}

uint64_t sub_1ABB78664(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "postNotificationsWithContext:", *(_QWORD *)(a1 + 40));
}

void sub_1ABB78B90(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(void **)(a1 + 40);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABB78CDC;
  v7[3] = &unk_1E5AB0A00;
  v4 = v2;
  v8 = v4;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v7);
  if (objc_msgSend(*(id *)(a1 + 48), "count"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        v10 = v6;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Retracting notifications for messageGUIDs: %@", buf, 0xCu);
      }

    }
    objc_msgSend(v4, "removeDeliveredNotificationsWithIdentifiers:", *(_QWORD *)(a1 + 48));
  }

}

void sub_1ABB78CDC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v5 = a2;
  v6 = *(void **)(a1 + 32);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABB78D6C;
  v8[3] = &unk_1E5AB09D8;
  v9 = v5;
  v7 = v5;
  objc_msgSend(v6, "replaceContentForRequestWithIdentifier:replacementContent:completionHandler:", v7, a3, v8);

}

void sub_1ABB78D6C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    IMLogHandleForCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC57950(a1, (uint64_t)v3, v4);

  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = 138412290;
      v8 = v6;
      _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Finished updating edited message content for notification request: %@", (uint8_t *)&v7, 0xCu);
    }

  }
}

void sub_1ABB791C4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1ABB79254;
  v4[3] = &unk_1E5AB09D8;
  v3 = *(_QWORD *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  objc_msgSend(v2, "addNotificationRequest:withCompletionHandler:", v3, v4);

}

void sub_1ABB79254(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412546;
      v7 = v5;
      v8 = 2112;
      v9 = v3;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "we added the notification request under first unlock %@ with error %@", (uint8_t *)&v6, 0x16u);
    }

  }
}

void sub_1ABB7C708(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABB7C664);
  }
  _Unwind_Resume(a1);
}

id sub_1ABB7CCC0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EEC403D0;
  v7 = qword_1EEC403D0;
  if (!qword_1EEC403D0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1ABB86FB0;
    v3[3] = &unk_1E5AB0C88;
    v3[4] = &v4;
    sub_1ABB86FB0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1ABB7CD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1ABB7E168(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _BYTE *a5, _BYTE *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9)
{
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;

  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (v15)
  {
    if (a7)
      *a7 = 0;
    if (a3)
    {
      objc_msgSend(v15, "path");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = (id)objc_msgSend(v17, "length");
      if (v18)
      {
        objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v17, 0);
        v18 = (id)objc_claimAutoreleasedReturnValue();
      }
      *a3 = v18;

    }
    if (a4)
    {
      objc_msgSend(v16, "utiString");
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a5)
      *a5 = objc_msgSend(v16, "isSticker");
    if (a6)
      *a6 = objc_msgSend(v16, "isOutgoing");
    if (a8)
    {
      objc_msgSend(v16, "emojiImageShortDescription");
      *a8 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a9)
    {
      objc_msgSend(v16, "attributionInfo");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "objectForKeyedSubscript:", *MEMORY[0x1E0D37F10]);
      *a9 = (id)objc_claimAutoreleasedReturnValue();

    }
  }

  return v16 != 0;
}

void sub_1ABB7E3A0()
{
  NSObject *v0;
  uint8_t v1[16];

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v0 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "Re-Alert setting has changd", v1, 2u);
    }

  }
  dword_1ED0D2884 = -1;
}

void sub_1ABB7E908(uint64_t a1, void *a2, char a3)
{
  void *v5;
  id v6;

  if (a2)
    a3 = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a3;
  v5 = *(void **)(a1 + 32);
  v6 = a2;
  objc_msgSend(v5, "invalidate");
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

id sub_1ABB7FD00(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "_suggestedDisplayNameForAddress:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v4, "length"))
  {
    objc_msgSend(*(id *)(a1 + 32), "_nicknameDisplayNameForID:", v3);
    v5 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v5;
  }

  return v4;
}

uint64_t sub_1ABB80020(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABB80030(uint64_t a1)
{

}

intptr_t sub_1ABB80038(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_msgSend(a2, "copy");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1ABB80FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB81000(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v7;
  void *v8;
  int v9;
  id v10;
  id v11;

  v10 = a2;
  if (MEMORY[0x1AF434F40]())
  {
    IMNormalizePhoneNumber();
    v7 = objc_claimAutoreleasedReturnValue();

    v8 = (void *)v7;
    if (!v7)
      goto LABEL_7;
  }
  else
  {
    v8 = v10;
    if (!v10)
      goto LABEL_7;
  }
  v11 = v8;
  v9 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", v8);
  v8 = v11;
  if (v9)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a5 = 1;
  }
LABEL_7:

}

void sub_1ABB81D5C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void (*v5)(void *);
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void (*v11)(void *);
  NSObject *v12;
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  qword_1ED0D3998 = MEMORY[0x1AF434FF4](CFSTR("STConversation"), CFSTR("ScreenTimeCore"));
  v0 = MEMORY[0x1AF434FF4](CFSTR("STConversationContext"), CFSTR("ScreenTimeCore"));
  qword_1ED0D39A8 = v0;
  if (qword_1ED0D3998)
  {
    if (v0)
      return;
    goto LABEL_11;
  }
  v1 = (void *)MEMORY[0x1E0CB3940];
  v2 = IMFileLocationTrimFileName();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("IMSTConversationClass"), "-[IMDNotificationsController screenTimeNotificationOptionsForChatDictionary:]_block_invoke", v2, 3136, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (void (*)(void *))IMGetAssertionFailureHandler();
  if (v5)
  {
    v5(v4);
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v4;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
    }

  }
  if (!qword_1ED0D39A8)
  {
LABEL_11:
    v7 = (void *)MEMORY[0x1E0CB3940];
    v8 = IMFileLocationTrimFileName();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("IMSTConversationContextClass"), "-[IMDNotificationsController screenTimeNotificationOptionsForChatDictionary:]_block_invoke", v8, 3137, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v11 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v11)
    {
      v11(v10);
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v14 = v10;
        _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }

    }
  }
}

void sub_1ABB82CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a63, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB82D3C(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "INInteraction updated, re-posting notifications", v4, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "postNotificationsWithContext:", 0);
}

uint64_t sub_1ABB83180(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isAdaptiveImageGlyph");

  return v3;
}

id sub_1ABB831BC(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "_adaptiveImageGlyphForAttachment:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1ABB83890(id *a1, void *a2, unint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  uint8_t buf;
  _BYTE v15[15];

  v7 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(a1[4], "objectForKey:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "isAdaptiveImageGlyph"))
      v9 = a3 >= a3 + a4;
    else
      v9 = 1;
    if (!v9)
    {
      v10 = *MEMORY[0x1E0D38B00];
      v11 = *MEMORY[0x1E0D38B08];
      do
      {
        objc_msgSend(a1[5], "_adaptiveImageGlyphForAttachment:", v8);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (v12)
        {
          objc_msgSend(a1[6], "addAttribute:value:range:", v10, v12, a3, 1);
          objc_msgSend(a1[6], "addAttribute:value:range:", v11, v12, a3, 1);
        }
        else
        {
          IMLogHandleForCategory();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            sub_1ABC57AEC(&buf, v15, v13);

        }
        ++a3;
        --a4;
      }
      while (a4);
    }

  }
}

void sub_1ABB839F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD v7[4];
  id v8;
  uint64_t v9;
  uint64_t v10;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABB83A70;
  v7[3] = &unk_1E5AB0BD8;
  v8 = *(id *)(a1 + 32);
  v9 = a3;
  v10 = a4;
  objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v7);

}

void sub_1ABB83A70(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0D38B00]) & 1) == 0
    && (objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0D38B08]) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "removeAttribute:range:", v3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }

}

void sub_1ABB844C4(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    if (!v2)
      JUMPOUT(0x1ABB84470);
    JUMPOUT(0x1ABB83D1CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ABB84C70()
{
  JUMPOUT(0x1ABB84CC0);
}

id sub_1ABB86874(uint64_t a1, uint64_t a2)
{
  return +[IMDNotificationsController _addressForHandle:](IMDNotificationsController, "_addressForHandle:", a2);
}

void sub_1ABB86F28()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *attr;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_USER_INITIATED, 0);
  attr = objc_claimAutoreleasedReturnValue();

  v1 = dispatch_queue_create("IMDNotificationRequestQueue", attr);
  v2 = (void *)qword_1EEC40300;
  qword_1EEC40300 = (uint64_t)v1;

  dispatch_queue_set_specific((dispatch_queue_t)qword_1EEC40300, "_IMDNotificationRequestQueue", (void *)1, 0);
}

Class sub_1ABB86FB0(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!qword_1EEC403D8)
  {
    v4 = xmmword_1E5AB0CA8;
    v5 = 0;
    qword_1EEC403D8 = _sl_dlopen();
  }
  if (!qword_1EEC403D8)
    sub_1ABC57C64(&v3);
  result = objc_getClass("SOSUtilities");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1ABC57CE0();
  qword_1EEC403D0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1ABB8708C()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *attr;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_USER_INITIATED, 0);
  attr = objc_claimAutoreleasedReturnValue();

  v1 = dispatch_queue_create("IMDSharingActiveDeviceQueue", attr);
  v2 = (void *)qword_1EEC40310;
  qword_1EEC40310 = (uint64_t)v1;

}

Class sub_1ABB870FC(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!qword_1EEC40318)
  {
    v4 = xmmword_1E5AB0CE0;
    v5 = 0;
    qword_1EEC40318 = _sl_dlopen();
  }
  if (!qword_1EEC40318)
    sub_1ABC57D58(&v3);
  result = objc_getClass("SMMessage");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1ABC57DD4();
  qword_1EEC40338 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1ABB871E4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_1ABB871F0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

id IMDKVValueForKey(void *a1)
{
  id v1;
  void (*v3[5])(void);
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  uint64_t v10;

  v1 = a1;
  if (a1)
  {
    v5 = 0;
    v6 = &v5;
    v7 = 0x3052000000;
    v8 = sub_1ABB87328;
    v9 = sub_1ABB87338;
    v10 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v4[0] = MEMORY[0x1E0C809B0];
      v4[1] = 3221225472;
      v4[2] = sub_1ABB87344;
      v4[3] = &unk_1E5AB0D30;
      v4[4] = v1;
      v4[5] = &v5;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT value FROM kvtable WHERE key = ?"), (uint64_t)v4);
    }
    else
    {
      v3[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v3[1] = (void (*)(void))3221225472;
      v3[2] = (void (*)(void))sub_1ABB87384;
      v3[3] = (void (*)(void))&unk_1E5AAF630;
      v3[4] = (void (*)(void))&v5;
      __syncXPCIMDKVValueForKey_IPCAction(v3, (uint64_t)v1);
    }
    v1 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  return v1;
}

void sub_1ABB8730C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1ABB87328(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1ABB87338(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1ABB87344(uint64_t a1)
{
  uint64_t result;

  CSDBSqliteBindTextFromCFString();
  result = CSDBSqliteStatementCopyDataResult();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = result;
  return result;
}

id sub_1ABB87384(uint64_t a1)
{
  id result;

  result = (id)IMGetXPCDataFromDictionary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void IMDKVPersistValueForKey(uint64_t a1, uint64_t a2)
{
  const __CFString *v4;
  _QWORD v5[2];
  uint64_t (*v6)();
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 3221225472;
      if (a2)
      {
        v6 = sub_1ABB87490;
        v7 = &unk_1E5AB0D58;
        v8 = a1;
        v9 = a2;
        v4 = CFSTR("INSERT OR REPLACE INTO kvtable (key, value) VALUES (?, ?)");
      }
      else
      {
        v6 = sub_1ABB874CC;
        v7 = &unk_1E5AB0D80;
        v8 = a1;
        v4 = CFSTR("DELETE FROM kvtable WHERE key = ?");
      }
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)v4, (uint64_t)v5);
    }
    else
    {
      __syncXPCIMDKVPersistValueForKey_IPCAction(0, a1, a2);
    }
  }
}

uint64_t sub_1ABB87490()
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindBlobFromCFData();
  return CSDBSqliteStatementPerform();
}

uint64_t sub_1ABB874CC()
{
  CSDBSqliteBindTextFromCFString();
  return CSDBSqliteStatementPerform();
}

BOOL _IMDSqlOperationRunQueryWithString(const __CFString *a1, _QWORD *a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD *v7;
  _BOOL8 v8;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  _OWORD v15[11];

  if (!a1)
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC580A8();
  }
  v11 = 0;
  v12 = &v11;
  v13 = 0xD010000000;
  v14 = &unk_1ABCCF005;
  memset(v15, 0, sizeof(v15));
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v15);
  if (a3)
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_1ABB8763C;
    v10[3] = &unk_1E5AB0DA8;
    v10[4] = a3;
    v10[5] = &v11;
    v7 = v10;
  }
  else
  {
    v7 = 0;
  }
  _IMDSqlOperationRunQuery((uint64_t)(v12 + 4), a1, 0, (uint64_t)v7);
  v8 = IMDSqlOperationRelease((uint64_t)(v12 + 4), a2);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1ABB87624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB8763C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32);
}

void IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitQuery_OriginalPreSorting(uint64_t a1, int a2, uint64_t a3, CFTypeRef *a4)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppend(Mutable, CFSTR("SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id WHERE cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) "));
  if (a1)
    CFStringAppend(Mutable, CFSTR("AND m.ROWID >=(SELECT * FROM (SELECT mm.rowid FROM message mm WHERE mm.GUID = ? UNION SELECT 0) ORDER BY ROWID DESC LIMIT 1  ) "));
  if (a2)
    CFStringAppend(Mutable, CFSTR(" AND m.item_type == 0 AND m.associated_message_type == 0 "));
  CFStringAppend(Mutable, CFSTR("ORDER BY cm.chat_id, cm.message_id DESC "));
  if (a3)
    CFStringAppend(Mutable, CFSTR("LIMIT ?"));
  if (a4)
    *a4 = CFRetain(Mutable);
  CFRelease(Mutable);
}

void IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifierQuery_Original(uint64_t a1, int a2, int a3, int a4, uint64_t a5, CFTypeRef *a6)
{
  __CFString *Mutable;
  NSObject *v13;
  _DWORD v14[2];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  __CFString *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppend(Mutable, CFSTR("SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id WHERE cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) "));
  if (a2)
    CFStringAppend(Mutable, CFSTR("AND ((m.thread_originator_guid = ? AND m.thread_originator_part = ?) OR m.associated_message_guid = ?)"));
  if (a1)
    CFStringAppend(Mutable, CFSTR("AND m.ROWID >=(SELECT * FROM (SELECT mm.rowid FROM message mm WHERE mm.GUID = ? UNION SELECT 0) ORDER BY ROWID DESC LIMIT 1  ) "));
  if (a3)
    CFStringAppend(Mutable, CFSTR(" AND m.item_type == 0 AND m.associated_message_type == 0 "));
  if (a4)
    CFStringAppend(Mutable, CFSTR(" AND m.is_read == 0 AND m.is_finished == 1 AND m.is_from_me == 0 "));
  CFStringAppend(Mutable, CFSTR("ORDER BY cm.chat_id, cm.message_date DESC, cm.message_id DESC "));
  if (a5)
    CFStringAppend(Mutable, CFSTR("LIMIT ?"));
  if (a6)
    *a6 = CFRetain(Mutable);
  if (IMOSLoggingEnabled())
  {
    v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14[0] = 67110402;
      v14[1] = a2;
      v15 = 2112;
      v16 = a1;
      v17 = 1024;
      v18 = a3;
      v19 = 1024;
      v20 = a4;
      v21 = 2048;
      v22 = a5;
      v23 = 2112;
      v24 = Mutable;
      _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "useThreadOriginator = %d, messageGUID = %@, onlyMessageItems= %d, onlyUnread= %d, limit= %lld, Query: %@", (uint8_t *)v14, 0x32u);
    }
  }
  CFRelease(Mutable);
}

uint64_t _IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimit_OriginalPreSorting(void *a1, void *a2, uint64_t a3, int a4, int64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v22[5])(void);
  _QWORD v23[10];
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v10 = objc_msgSend(a1, "count");
  v11 = objc_msgSend(a2, "count");
  if (v10 && v11 && v10 == v11)
  {
    v25 = 0;
    v26 = &v25;
    v27 = 0x2020000000;
    v28 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = sub_1ABB87A68;
      v23[3] = &unk_1E5AB0E90;
      v24 = a4;
      v23[6] = a5;
      v23[7] = v10;
      v23[8] = a1;
      v23[9] = a2;
      v23[4] = &v25;
      v23[5] = a3;
      _IMDPerformLockedDatabaseBlock((uint64_t)v23);
    }
    else
    {
      v22[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v22[1] = (void (*)(void))3221225472;
      v22[2] = (void (*)(void))sub_1ABB87D68;
      v22[3] = (void (*)(void))&unk_1E5AAF630;
      v22[4] = (void (*)(void))&v25;
      __syncXPCIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesWithOptionalThreadIdentifierAndLimit_IPCAction(v22, (uint64_t)a1, (uint64_t)a2, a3, 0, a5, a4 != 0, 0);
    }
    v20 = v26[3];
    _Block_object_dispose(&v25, 8);
  }
  else
  {
    v12 = IMLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_1ABC58144(v12, v13, v14, v15, v16, v17, v18, v19);
    return 0;
  }
  return v20;
}

void sub_1ABB87A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB87A68(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  id v4;
  unint64_t v5;
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex v8;
  void *v9;
  void *v10;
  const __CFArray *v11;
  CFIndex Count;
  CFIndex v13;
  uint64_t v14;
  __CFArray *Mutable;
  CFIndex i;
  uint64_t v17;
  const void *v18;
  const void *v19;
  CFTypeRef cf;

  result = CSDBSqliteDatabaseConnectionForReading();
  if (result)
  {
    CSDBSqliteConnectionBeginTransactionType();
    cf = 0;
    IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitQuery_OriginalPreSorting(*(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 80) != 0, *(_QWORD *)(a1 + 48), &cf);
    v3 = CSDBSqliteDatabaseStatementForWriting();
    if (v3 && *(_QWORD *)(v3 + 8))
    {
      v4 = objc_alloc_init(MEMORY[0x1E0C99E20]);
      if (*(_QWORD *)(a1 + 56))
      {
        v5 = 0;
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v5);
          CSDBSqliteBindTextFromCFString();
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v5);
          CSDBSqliteBindTextFromCFString();
          if (*(_QWORD *)(a1 + 40))
            CSDBSqliteBindTextFromCFString();
          if (*(uint64_t *)(a1 + 48) >= 1)
            CSDBSqliteBindInt();
          v6 = (const __CFArray *)CSDBRecordStoreProcessStatement();
          if (v6)
          {
            v7 = v6;
            if (CFArrayGetCount(v6) && (int)CFArrayGetCount(v7) >= 1)
            {
              v8 = 0;
              do
              {
                CFArrayGetValueAtIndex(v7, v8);
                v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithInteger:", (int)CSDBRecordGetID());
                if (v9)
                  objc_msgSend(v4, "addObject:", v9);

                ++v8;
              }
              while (v8 < (int)CFArrayGetCount(v7));
            }
            CFRelease(v7);
          }
          CSDBSqliteStatementReset();
          ++v5;
        }
        while (v5 < *(_QWORD *)(a1 + 56));
      }
      v10 = (void *)MEMORY[0x1AF435474]();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (id)objc_msgSend((id)objc_msgSend(v4, "allObjects"), "sortedArrayUsingComparator:", &unk_1E5AAEFA8);
      objc_autoreleasePoolPop(v10);

      v11 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (v11)
      {
        Count = CFArrayGetCount(v11);
        if (Count << 32)
        {
          if ((int)Count >= *(_QWORD *)(a1 + 48))
            v13 = *(_QWORD *)(a1 + 48);
          else
            v13 = (int)Count;
          v14 = *MEMORY[0x1E0C9AE00];
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v13, MEMORY[0x1E0C9B378]);
          if (v13 >= 1)
          {
            for (i = 0; i != v13; ++i)
            {
              v17 = objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), i), "integerValue");
              v18 = IMDMessageRecordCreateFromRecordIDUnlocked(v14, v17);
              if (v18)
              {
                v19 = v18;
                CFArrayAppendValue(Mutable, v18);
                CFRelease(v19);
              }
            }
          }
          CFRelease(*(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = Mutable;
        }
      }
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    CSDBSqliteConnectionCommit();
    return CSDBSqliteDatabaseReleaseSqliteConnection();
  }
  return result;
}

uint64_t sub_1ABB87D5C(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "compare:", a2);
}

xpc_object_t sub_1ABB87D68(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABB87DE0;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABB87DE0(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t _IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifier_Original(void *a1, void *a2, uint64_t a3, const __CFString *a4, int a5, int a6, int64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex Length;
  BOOL v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v29[5])(void);
  _QWORD v30[13];
  BOOL v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;

  v14 = objc_msgSend(a1, "count");
  v15 = objc_msgSend(a2, "count");
  v16 = v15;
  v38 = 0;
  v39 = 0;
  if (a4)
  {
    Length = CFStringGetLength(a4);
    if (v14 && v16 && v14 == v16)
    {
      if (Length >= 1)
      {
        IMMessageThreadIdentifierGetComponents();
        if (objc_msgSend(v39, "length"))
        {
          v18 = objc_msgSend(v38, "length") != 0;
LABEL_12:
          v34 = 0;
          v35 = &v34;
          v36 = 0x2020000000;
          v37 = 0;
          if (IMDIsRunningInDatabaseServerProcess())
          {
            v30[0] = MEMORY[0x1E0C809B0];
            v30[1] = 3221225472;
            v30[2] = sub_1ABB88078;
            v30[3] = &unk_1E5AB0EB8;
            v31 = v18;
            v32 = a5;
            v33 = a6;
            v30[8] = a7;
            v30[9] = v14;
            v30[10] = a1;
            v30[11] = a2;
            v30[4] = v39;
            v30[5] = v38;
            v30[12] = a4;
            v30[6] = &v34;
            v30[7] = a3;
            _IMDPerformLockedDatabaseBlock((uint64_t)v30);
          }
          else
          {
            v29[0] = (void (*)(void))MEMORY[0x1E0C809B0];
            v29[1] = (void (*)(void))3221225472;
            v29[2] = (void (*)(void))sub_1ABB882D8;
            v29[3] = (void (*)(void))&unk_1E5AAF630;
            v29[4] = (void (*)(void))&v34;
            __syncXPCIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesWithOptionalThreadIdentifierAndLimit_IPCAction(v29, (uint64_t)a1, (uint64_t)a2, a3, 0, a7, a5 != 0, a6 != 0);
          }
          v27 = v35[3];
          _Block_object_dispose(&v34, 8);
          return v27;
        }
      }
LABEL_11:
      v18 = 0;
      goto LABEL_12;
    }
  }
  else if (v14 && v15 && v14 == v15)
  {
    goto LABEL_11;
  }
  v19 = IMLogHandleForCategory();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    sub_1ABC58144(v19, v20, v21, v22, v23, v24, v25, v26);
  return 0;
}

void sub_1ABB88060(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB88078(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  id v4;
  unint64_t v5;
  void *AssociatedMessageGUIDFromThreadIdentifier;
  const __CFArray *v7;
  const __CFArray *v8;
  CFIndex v9;
  void *v10;
  CFTypeRef cf;

  result = CSDBSqliteDatabaseConnectionForReading();
  if (result)
  {
    CSDBSqliteConnectionBeginTransactionType();
    cf = 0;
    IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifierQuery_Original(*(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 104), *(_BYTE *)(a1 + 105) != 0, *(_BYTE *)(a1 + 106) != 0, *(_QWORD *)(a1 + 64), &cf);
    v3 = CSDBSqliteDatabaseStatementForWriting();
    if (v3 && *(_QWORD *)(v3 + 8))
    {
      v4 = objc_alloc_init(MEMORY[0x1E0C99E20]);
      if (*(_QWORD *)(a1 + 72))
      {
        v5 = 0;
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v5);
          CSDBSqliteBindTextFromCFString();
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v5);
          CSDBSqliteBindTextFromCFString();
          if (*(_BYTE *)(a1 + 104))
          {
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindTextFromCFString();
            AssociatedMessageGUIDFromThreadIdentifier = (void *)IMMessageCreateAssociatedMessageGUIDFromThreadIdentifier();
            CSDBSqliteBindTextFromCFString();

          }
          if (*(_QWORD *)(a1 + 56))
            CSDBSqliteBindTextFromCFString();
          if (*(uint64_t *)(a1 + 64) >= 1)
            CSDBSqliteBindInt();
          v7 = (const __CFArray *)CSDBRecordStoreProcessStatement();
          if (v7)
          {
            v8 = v7;
            if (CFArrayGetCount(v7) && (int)CFArrayGetCount(v8) >= 1)
            {
              v9 = 0;
              do
              {
                CFArrayGetValueAtIndex(v8, v9);
                v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithInteger:", (int)CSDBRecordGetID());
                if (v10)
                  objc_msgSend(v4, "addObject:", v10);

                ++v9;
              }
              while (v9 < (int)CFArrayGetCount(v8));
            }
            CFRelease(v8);
          }
          CSDBSqliteStatementReset();
          ++v5;
        }
        while (v5 < *(_QWORD *)(a1 + 72));
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = IMDMessageRecordLoadMessagesInSet(v4, *(_QWORD *)(a1 + 64), 1);

    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    CSDBSqliteConnectionCommit();
    return CSDBSqliteDatabaseReleaseSqliteConnection();
  }
  return result;
}

xpc_object_t sub_1ABB882D8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABB88350;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABB88350(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

void IMDMessageRecordSelectMessagesWithGUIDsChatIdentifiersOnServicesQuery1_Original(int a1, CFTypeRef *a2)
{
  __CFString *Mutable;
  __CFString *v5;
  const __CFString *v6;

  Mutable = CFStringCreateMutable(0, 0);
  if (Mutable)
  {
    v5 = Mutable;
    CFStringAppend(Mutable, CFSTR("SELECT FROM chat_message_join WHERE chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) AND message_id IN (SELECT m.ROWID FROM message m WHERE m.guid "));
    v6 = (const __CFString *)IMDGenerateInClauseForCount(a1);
    CFStringAppend(v5, v6);
    CFStringAppend(v5, CFSTR(")"));
    if (a2)
      *a2 = CFRetain(v5);
    CFRelease(v5);
  }
}

void IMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServicesQuery1_Original(int a1, CFTypeRef *a2)
{
  __CFString *Mutable;
  __CFString *v5;
  const __CFString *v6;

  Mutable = CFStringCreateMutable(0, 0);
  if (Mutable)
  {
    v5 = Mutable;
    CFStringAppend(Mutable, CFSTR("DELETE FROM chat_message_join WHERE chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) AND message_id IN (SELECT m.ROWID FROM message m WHERE m.guid "));
    v6 = (const __CFString *)IMDGenerateInClauseForCount(a1);
    CFStringAppend(v5, v6);
    CFStringAppend(v5, CFSTR(")"));
    if (a2)
      *a2 = CFRetain(v5);
    CFRelease(v5);
  }
}

uint64_t IMDMessageRecordCountAllUnreadMessagesForAllUnreadChats_Original(uint64_t a1)
{
  return _IMDMessageRecordCountAllUnreadMessagesForChatQuery((uint64_t)CFSTR("SELECT cm.chat_id, COUNT(1) FROM message m INNER JOIN chat_message_join cm ON m.ROWiD = cm.message_id WHERE m.item_type == 0 AND m.is_read == 0 AND m.is_from_me == 0 GROUP BY cm.chat_id"), a1);
}

void IMDCNRecordIDAndHistoryTokenForAliasesWithCompletionHandler(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void (**v7)(id, void *);
  IMDCNPersonAliasResolver *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void (*v13[4])(void);
  id v14;
  void (**v15)(id, void *);

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v8 = objc_alloc_init(IMDCNPersonAliasResolver);
    -[IMDCNPersonAliasResolver _updateAliasToCNIDMap:withHistoryToken:](v8, "_updateAliasToCNIDMap:withHistoryToken:", v5, v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)MEMORY[0x1E0C99E08];
    -[IMDCNPersonAliasResolver currentHistoryToken](v8, "currentHistoryToken");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "dictionaryWithObjectsAndKeys:", v9, CFSTR("aliasMap"), v11, CFSTR("historyToken"), 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v7[2](v7, v12);
  }
  else
  {
    v13[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v13[1] = (void (*)(void))3221225472;
    v13[2] = (void (*)(void))sub_1ABB886E8;
    v13[3] = (void (*)(void))&unk_1E5AB1D08;
    v14 = v5;
    v15 = v7;
    __asyncXPCIMDCNRecordIDAndHistoryTokenForAliases_IPAction(v13, (uint64_t)v14, (uint64_t)v6);

  }
}

void sub_1ABB886E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  xpc_dictionary_get_value(v3, "dictionary_result");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    IMGetXPCDictionaryFromDictionary();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v5, "objectForKey:", CFSTR("aliasMap"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v7, "count");
        v9 = objc_msgSend(*(id *)(a1 + 32), "count");
        v10 = 134218240;
        v11 = v8;
        v12 = 2048;
        v13 = v9;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "IMDCNRecordIDForAliases ASYNC returning updated map count %lu. Old map count %lu", (uint8_t *)&v10, 0x16u);

      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

id IMDCNRecordIDAndHistoryTokenForAliases(void *a1)
{
  id v1;
  IMDCNPersonAliasResolver *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void (*v10[4])(void);
  IMDCNPersonAliasResolver *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v1 = a1;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = sub_1ABB889F0;
  v17 = sub_1ABB88A00;
  v18 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v2 = objc_alloc_init(IMDCNPersonAliasResolver);
    -[IMDCNPersonAliasResolver _fetchAliasToCNIDMapForAliases:](v2, "_fetchAliasToCNIDMapForAliases:", v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)MEMORY[0x1E0C99D80];
    -[IMDCNPersonAliasResolver currentHistoryToken](v2, "currentHistoryToken");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "dictionaryWithObjectsAndKeys:", v3, CFSTR("aliasMap"), v5, CFSTR("historyToken"), 0);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)v14[5];
    v14[5] = v6;

  }
  else
  {
    v10[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v10[1] = (void (*)(void))3221225472;
    v10[2] = (void (*)(void))sub_1ABB88A08;
    v10[3] = (void (*)(void))&unk_1E5AB1D30;
    v12 = &v13;
    v11 = (IMDCNPersonAliasResolver *)v1;
    __syncXPCIMDCNRecordIDAndHistoryTokenForAliases_IPAction(v10, (uint64_t)v11);
    v2 = v11;
  }

  v8 = (id)v14[5];
  _Block_object_dispose(&v13, 8);

  return v8;
}

void sub_1ABB889D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB889F0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABB88A00(uint64_t a1)
{

}

void sub_1ABB88A08(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  xpc_dictionary_get_value(v3, "dictionary_result");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    IMGetXPCDictionaryFromDictionary();
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "objectForKey:", CFSTR("aliasMap"));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "count");
        v11 = objc_msgSend(*(id *)(a1 + 32), "count");
        v12 = 134218240;
        v13 = v10;
        v14 = 2048;
        v15 = v11;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "IMDCNRecordIDForAliases returning map count %lu for aliases count %lu", (uint8_t *)&v12, 0x16u);

      }
    }
  }

}

id IMDCNRecordIDForAliases(void *a1)
{
  id v1;
  IMDCNPersonAliasResolver *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void (*v7[4])(void);
  IMDCNPersonAliasResolver *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v1 = a1;
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = sub_1ABB889F0;
  v14 = sub_1ABB88A00;
  v15 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v2 = objc_alloc_init(IMDCNPersonAliasResolver);
    -[IMDCNPersonAliasResolver _fetchAliasToCNIDMapForAliases:](v2, "_fetchAliasToCNIDMapForAliases:", v1);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)v11[5];
    v11[5] = v3;

  }
  else
  {
    v7[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v7[1] = (void (*)(void))3221225472;
    v7[2] = (void (*)(void))sub_1ABB88C98;
    v7[3] = (void (*)(void))&unk_1E5AB1D30;
    v9 = &v10;
    v8 = (IMDCNPersonAliasResolver *)v1;
    __syncXPCIMDCNRecordIDForAliases_IPAction(v7, (uint64_t)v8);
    v2 = v8;
  }

  v5 = (id)v11[5];
  _Block_object_dispose(&v10, 8);

  return v5;
}

void sub_1ABB88C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB88C98(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  xpc_dictionary_get_value(v3, "dictionary_result");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    IMGetXPCDictionaryFromDictionary();
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "count");
        v10 = objc_msgSend(*(id *)(a1 + 32), "count");
        v11 = 134218240;
        v12 = v9;
        v13 = 2048;
        v14 = v10;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "IMDCNRecordIDForAliases returning map count %lu for aliases count %lu", (uint8_t *)&v11, 0x16u);
      }

    }
  }

}

id IMDCNGivenNameAndBirthdayForHandleID(void *a1)
{
  id v1;
  IMDCNPersonAliasResolver *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void (*v7[5])(void);
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  id v13;

  v1 = a1;
  v8 = 0;
  v9 = &v8;
  v10 = 0x3032000000;
  v11 = sub_1ABB889F0;
  v12 = sub_1ABB88A00;
  v13 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v2 = objc_alloc_init(IMDCNPersonAliasResolver);
    -[IMDCNPersonAliasResolver _fetchContactGivenNameAndBirthdayForHandleID:](v2, "_fetchContactGivenNameAndBirthdayForHandleID:", v1);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)v9[5];
    v9[5] = v3;

  }
  else
  {
    v7[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v7[1] = (void (*)(void))3221225472;
    v7[2] = (void (*)(void))sub_1ABB88F04;
    v7[3] = (void (*)(void))&unk_1E5AAF630;
    v7[4] = (void (*)(void))&v8;
    __syncXPCIMDCNGivenNameAndBirthdayForHandleID_IPCAction(v7, (uint64_t)v1);
  }
  v5 = (id)v9[5];
  _Block_object_dispose(&v8, 8);

  return v5;
}

void sub_1ABB88EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB88F04(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  xpc_dictionary_get_value(v3, "dictionary_result");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    IMGetXPCDictionaryFromDictionary();
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "count");
        v10 = 134217984;
        v11 = v9;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "IMDCNGivenNameAndBirthdayForHandleID returning total Contact keys: %lu", (uint8_t *)&v10, 0xCu);
      }

    }
  }

}

uint64_t IMDAreAllAliasesUnknown(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t i;
  void *v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint8_t buf[4];
  int v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    IMDCNRecordIDForAliases(v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3 && objc_msgSend(v3, "count"))
    {
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v5 = v4;
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
      if (v6)
      {
        v7 = *(_QWORD *)v16;
        v8 = 1;
        do
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_QWORD *)v16 != v7)
              objc_enumerationMutation(v5);
            objc_msgSend(v5, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * i), (_QWORD)v15);
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("__kIMDCNPersonNotFound"));

            if (!v11)
              v8 = 0;
          }
          v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
        }
        while (v6);
      }
      else
      {
        v8 = 1;
      }

    }
    else
    {
      v8 = 1;
    }

    v12 = v8 & 1;
  }
  else
  {
    v12 = 1;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      v20 = v12;
      _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "IMDAreAllAliasesUnknown result is %d", buf, 8u);
    }

  }
  return v12;
}

uint64_t IMDIsFavoritedContact(void *a1)
{
  id v1;
  IMDCNPersonAliasResolver *v2;
  BOOL v3;
  uint64_t v4;
  void (*v6[5])(void);
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v1 = a1;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v2 = objc_alloc_init(IMDCNPersonAliasResolver);
    v3 = -[IMDCNPersonAliasResolver isFavoritedContact:](v2, "isFavoritedContact:", v1);
    *((_BYTE *)v8 + 24) = v3;

  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v6[1] = (void (*)(void))3221225472;
    v6[2] = (void (*)(void))sub_1ABB89310;
    v6[3] = (void (*)(void))&unk_1E5AAF630;
    v6[4] = (void (*)(void))&v7;
    __syncXPCIMDIsFavoritedContact_IPCAction(v6, (uint64_t)v1);
  }
  v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_1ABB892F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1ABB89310(uint64_t a1, xpc_object_t xdict)
{
  _BOOL8 result;

  result = xpc_dictionary_get_BOOL(xdict, "BOOL_result");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1ABB8934C()
{
  IMDDatabaseServer *v0;
  void *v1;

  v0 = objc_alloc_init(IMDDatabaseServer);
  v1 = (void *)qword_1ED0D37C8;
  qword_1ED0D37C8 = (uint64_t)v0;

}

void sub_1ABB89644(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "chatRecordsFilteredByPredicate:", v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "_respondWithChatRecords:responseMessage:completionHandler:", v3, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1ABB8979C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int64_t int64;
  void *v7;
  void *v8;
  _QWORD v9[5];
  id v10;
  id v11;

  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(void **)(a1 + 40);
  xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "sortDescriptors");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_codableObjectsCopiedFromXPCArray:objectClass:", v4, objc_opt_class());
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  objc_msgSend(*(id *)(a1 + 40), "database");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1ABB898DC;
  v9[3] = &unk_1E5AB1D80;
  v8 = *(void **)(a1 + 48);
  v9[4] = *(_QWORD *)(a1 + 40);
  v10 = v8;
  v11 = *(id *)(a1 + 56);
  objc_msgSend(v7, "fetchChatRecordsFilteredUsingPredicate:sortedUsingDescriptors:limit:completionHandler:", v2, v5, int64, v9);

}

uint64_t sub_1ABB898DC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_respondWithChatRecords:responseMessage:completionHandler:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1ABB899B4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  IMGetXPCStringFromDictionary();
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "chatRecordsWithIdentifier:", v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "_respondWithChatRecords:responseMessage:completionHandler:", v3, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1ABB89AF8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  IMGetXPCStringFromDictionary();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABB89BBC;
  v5[3] = &unk_1E5AB1D80;
  v4 = *(void **)(a1 + 48);
  v5[4] = *(_QWORD *)(a1 + 40);
  v6 = v4;
  v7 = *(id *)(a1 + 56);
  objc_msgSend(v3, "fetchChatRecordsWithPinningIdentifier:completionHandler:", v2, v5);

}

uint64_t sub_1ABB89BBC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_respondWithChatRecords:responseMessage:completionHandler:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1ABB89C94(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 int64;
  void *v7;
  void *v8;
  id v9;

  IMGetXPCArrayFromDictionary();
  v9 = (id)objc_claimAutoreleasedReturnValue();
  IMGetXPCStringFromDictionary();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  IMGetXPCStringFromDictionary();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  IMGetXPCStringFromDictionary();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = IMGetXPCBoolFromDictionary();
  int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "style");
  objc_msgSend(*(id *)(a1 + 40), "database");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "chatRecordsWithHandles:serviceName:displayName:groupID:style:useOriginalGroupID:", v9, v2, v3, v4, int64, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "_respondWithChatRecords:responseMessage:completionHandler:", v8, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1ABB89E78(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned __int8 int64;
  void *v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  id v9;

  IMGetXPCArrayFromDictionary();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  IMGetXPCStringFromDictionary();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "style");
  objc_msgSend(*(id *)(a1 + 40), "database");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABB89F7C;
  v7[3] = &unk_1E5AB1D80;
  v6 = *(void **)(a1 + 48);
  v7[4] = *(_QWORD *)(a1 + 40);
  v8 = v6;
  v9 = *(id *)(a1 + 56);
  objc_msgSend(v5, "fetchChatRecordsWithAtLeastHandles:serviceName:style:completionHandler:", v2, v3, int64, v7);

}

uint64_t sub_1ABB89F7C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_respondWithChatRecords:responseMessage:completionHandler:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1ABB8A080(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;
  id v8;

  IMGetXPCArrayFromDictionary();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABB8A158;
  v5[3] = &unk_1E5AB1DD0;
  v4 = *(void **)(a1 + 48);
  v5[4] = *(_QWORD *)(a1 + 40);
  v6 = v4;
  v7 = *(id *)(a1 + 56);
  v8 = *(id *)(a1 + 64);
  objc_msgSend(v3, "fetchGroupPhotoPathsForChatsWithGroupIDs:completionHandler:", v2, v5);

}

void sub_1ABB8A158(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  uint64_t v12;
  id v13;

  v8 = MEMORY[0x1E0C809B0];
  v9 = 3221225472;
  v10 = sub_1ABB8A220;
  v11 = &unk_1E5AB1DA8;
  v4 = *(void **)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = v4;
  v5 = a2;
  objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", &v8);
  objc_msgSend(*(id *)(a1 + 32), "_xpcDictionaryWithCodableObjects:", v5, v8, v9, v10, v11, v12);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 48), "dictionary_result", v6);
  v7 = *(_QWORD *)(a1 + 56);
  if (v7)
    (*(void (**)(void))(v7 + 16))();

}

uint64_t sub_1ABB8A220(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__authorizeOutgoingSandboxedResource_connection_);
}

void sub_1ABB8A2F0(uint64_t a1)
{
  int64_t int64;
  void *v3;
  void *v4;
  id v5;

  int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  v3 = *(void **)(a1 + 40);
  objc_msgSend(v3, "database");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v5, "copyDuplicateGroupChatRecordsWithLimit:", int64);
  objc_msgSend(v3, "_respondWithChatRecords:responseMessage:completionHandler:", v4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

}

void sub_1ABB8A40C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  IMGetXPCArrayFromDictionary();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v2 = IMGetXPCIntFromDictionary();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "updateChatsSyncStatusTo:forGUIDs:", v2, v5);

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    (*(void (**)(void))(v4 + 16))();

}

void sub_1ABB8A55C(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  IMGetXPCStringFromDictionary();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  IMGetXPCStringFromDictionary();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "database");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABB8A63C;
  v5[3] = &unk_1E5AB1E48;
  v6 = a1[6];
  v7 = a1[7];
  objc_msgSend(v4, "resolveInconsistentGUIDForChatRecordWithGUID:newGUID:completionHandler:", v2, v3, v5);

}

uint64_t sub_1ABB8A63C(uint64_t a1, BOOL value)
{
  uint64_t result;

  xpc_dictionary_set_BOOL(*(xpc_object_t *)(a1 + 32), "success", value);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1ABB8A728(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  IMGetXPCArrayFromDictionary();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v2 = IMGetXPCIntFromDictionary();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "updateMessagesSyncStatusTo:forGUIDs:", v2, v5);

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    (*(void (**)(void))(v4 + 16))();

}

void sub_1ABB8A858(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  IMGetXPCArrayFromDictionary();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v2 = IMGetXPCIntFromDictionary();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "updateMessagesSyncedSyndicationRangesForGUIDs:toStatus:", v5, v2);

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    (*(void (**)(void))(v4 + 16))();

}

void sub_1ABB8A9A8(uint64_t a1)
{
  int64_t int64;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "chatRowID");
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABB8AA64;
  v5[3] = &unk_1E5AB1E70;
  v4 = *(void **)(a1 + 48);
  v5[4] = *(_QWORD *)(a1 + 40);
  v6 = v4;
  v7 = *(id *)(a1 + 56);
  objc_msgSend(v3, "fetchLastMessageRecordForChatRecordWithRowID:completionHandler:", int64, v5);

}

void sub_1ABB8AA64(_QWORD *a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (void *)a1[4];
  if (a2)
  {
    v9 = a2;
    v4 = (void *)MEMORY[0x1E0C99D20];
    v5 = a2;
    objc_msgSend(v4, "arrayWithObjects:count:", &v9, 1);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_respondWithMessageRecords:responseMessage:completionHandler:", v6, a1[5], a1[6], v9, v10);

  }
  else
  {
    v8 = a1[5];
    v7 = a1[6];
    v6 = 0;
    objc_msgSend(v3, "_respondWithMessageRecords:responseMessage:completionHandler:", MEMORY[0x1E0C9AA60], v8, v7);
  }

}

void sub_1ABB8ABF4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int64_t int64;
  void *v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  id v12;

  IMGetXPCStringFromDictionary();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(void **)(a1 + 40);
  xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "sortDescriptors");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_codableObjectsCopiedFromXPCArray:objectClass:", v5, objc_opt_class());
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  objc_msgSend(*(id *)(a1 + 40), "database");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1ABB8AD54;
  v10[3] = &unk_1E5AB1D80;
  v9 = *(void **)(a1 + 48);
  v10[4] = *(_QWORD *)(a1 + 40);
  v11 = v9;
  v12 = *(id *)(a1 + 56);
  objc_msgSend(v8, "fetchMessageRecordsForChatRecordWithGUID:filteredUsingPredicate:sortedUsingDescriptors:limit:completionHandler:", v2, v3, v6, int64, v10);

}

uint64_t sub_1ABB8AD54(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_respondWithMessageRecords:responseMessage:completionHandler:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1ABB8AE2C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  id v8;

  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = IMGetXPCIntFromDictionary();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABB8AF1C;
  v6[3] = &unk_1E5AB1D80;
  v5 = *(void **)(a1 + 48);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = v5;
  v8 = *(id *)(a1 + 56);
  objc_msgSend(v4, "fetchUnreadMessageRecordsForChatsFilteredUsingPredicate:limit:completionHandler:", v2, v3, v6);

}

uint64_t sub_1ABB8AF1C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_respondWithMessageRecords:responseMessage:completionHandler:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1ABB8AFF4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  id v8;

  IMGetXPCStringFromDictionary();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = IMGetXPCBoolFromDictionary();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABB8B0D0;
  v6[3] = &unk_1E5AB1E70;
  v5 = *(void **)(a1 + 48);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = v5;
  v8 = *(id *)(a1 + 56);
  objc_msgSend(v4, "fetchMessageRecordWithGUID:excludeRecoverableMessages:completionHandler:", v2, v3, v6);

}

void sub_1ABB8B0D0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v6[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = (void *)MEMORY[0x1E0C9AA60];
  }
  objc_msgSend(*(id *)(a1 + 32), "_respondWithMessageRecords:responseMessage:completionHandler:", v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1ABB8B21C(uint64_t a1)
{
  _BOOL8 v2;
  void *v3;
  uint64_t v4;
  id v5;

  IMGetXPCStringFromDictionary();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v2 = xpc_dictionary_get_BOOL(*(xpc_object_t *)(a1 + 32), "shouldHideFromSyndication");
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "updateAttachmentSyndicationRanges:shouldHideFromSyndication:", v5, v2);

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    (*(void (**)(void))(v4 + 16))();

}

void sub_1ABB8B34C(uint64_t a1)
{
  _BOOL8 v2;
  void *v3;
  uint64_t v4;
  id v5;

  IMGetXPCStringFromDictionary();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v2 = xpc_dictionary_get_BOOL(*(xpc_object_t *)(a1 + 32), "shouldHideFromSyndication");
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "updateMessageSyndicationRanges:shouldHideFromSyndication:", v5, v2);

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    (*(void (**)(void))(v4 + 16))();

}

void sub_1ABB8B49C(uint64_t a1)
{
  void *v2;
  int64_t int64;
  void *v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  id v8;

  IMGetXPCStringFromDictionary();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  objc_msgSend(*(id *)(a1 + 40), "database");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABB8B578;
  v6[3] = &unk_1E5AB1D80;
  v5 = *(void **)(a1 + 48);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = v5;
  v8 = *(id *)(a1 + 56);
  objc_msgSend(v4, "fetchScheduledMessageRecordsForChatRecordWithGUID:limit:completionHandler:", v2, int64, v6);

}

uint64_t sub_1ABB8B578(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_respondWithMessageRecords:responseMessage:completionHandler:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1ABB8B650(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v2 = IMGetXPCIntFromDictionary();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "scheduledMessagesMetadataPendingCloudKitDeleteWithLimit:", v2);
  v7 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "_xpcArrayWithCodableObjects:", v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = *(void **)(a1 + 48);
    if (v5)
      xpc_dictionary_set_value(v5, "scheduledMessagesMetadataPendingCloudKitDelete", v4);
  }
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
    (*(void (**)(void))(v6 + 16))();

}

void sub_1ABB8B7A0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;

  IMGetXPCStringFromDictionary();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  IMGetXPCStringFromDictionary();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addScheduledMessageGUIDandCKRecordToDeleteFromCloudKit:recordID:", v5, v2);

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    (*(void (**)(void))(v4 + 16))();

}

void sub_1ABB8B8D8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  IMGetXPCArrayFromDictionary();
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "deleteTombstonedScheduledMessagesWithRecordIDs:", v4);

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(void))(v3 + 16))();

}

void sub_1ABB8B9E8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  IMGetXPCArrayFromDictionary();
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "markMessageRecordsAsReadWithGUIDs:", v4);

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(void))(v3 + 16))();

}

void sub_1ABB8BAF8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;

  IMGetXPCArrayFromDictionary();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "moveMessageRecordsToRecoveryForMessageGUIDs:deleteDate:", v5, v2);

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    (*(void (**)(void))(v4 + 16))();

}

void sub_1ABB8BC44(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;

  IMGetXPCArrayFromDictionary();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "moveMessageRecordsToRecoveryForChatRecordsWithGUIDs:deleteDate:", v5, v2);

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    (*(void (**)(void))(v4 + 16))();

}

void sub_1ABB8BD90(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  IMGetXPCArrayFromDictionary();
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "recoverMessageRecordsForChatRecordsWithGUIDs:", v4);

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(void))(v3 + 16))();

}

uint64_t sub_1ABB8BEA0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t result;

  v2 = IMGetXPCIntFromDictionary();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "deleteRecoverableMessagesOlderThanDays:", v2);

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1ABB8BFB4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t result;

  v2 = IMGetXPCIntFromDictionary();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "deleteJunkMessagesOlderThanDays:", v2);

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1ABB8C0E8(id *a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  IMGetXPCArrayFromDictionary();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABB8C1AC;
  v6[3] = &unk_1E5AB1D80;
  v4 = a1[6];
  v5 = a1[5];
  v7 = v4;
  v8 = v5;
  v9 = a1[7];
  objc_msgSend(v3, "permanentlyDeleteRecoverableMessagesInChatsWithGUIDs:completionHandler:", v2, v6);

}

void sub_1ABB8C1AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7 = v3;
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 40), "_xpcArrayWithCodableObjects:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    xpc_dictionary_set_value(v4, "deletedChats", v5);

    v3 = v7;
  }
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
  {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
    v3 = v7;
  }

}

void sub_1ABB8C2F4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v2 = IMGetXPCIntFromDictionary();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "recoverableMessagesMetadataPendingCloudKitSaveWithLimit:", v2);
  v7 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "_xpcArrayWithCodableObjects:", v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = *(void **)(a1 + 48);
    if (v5)
      xpc_dictionary_set_value(v5, "recoverableMessagesMetadataPendingCloudKitSave", v4);
  }
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
    (*(void (**)(void))(v6 + 16))();

}

void sub_1ABB8C464(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v2 = IMGetXPCIntFromDictionary();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "recoverableMessagesMetadataPendingCloudKitDeleteWithLimit:", v2);
  v7 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "_xpcArrayWithCodableObjects:", v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = *(void **)(a1 + 48);
    if (v5)
      xpc_dictionary_set_value(v5, "recoverableMessagesMetadataPendingCloudKitDelete", v4);
  }
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
    (*(void (**)(void))(v6 + 16))();

}

uint64_t sub_1ABB8C588(uint64_t a1)
{
  void *v2;
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "database");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "clearRecoverableMessageTombStones");

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1ABB8C678(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t result;

  v2 = IMGetXPCIntFromDictionary();
  v3 = IMGetXPCIntFromDictionary();
  v4 = IMGetXPCIntFromDictionary();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "updateRecoverableMessageSyncState:forMessageRowID:onPartIndex:", v2, v3, v4);

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1ABB8C7C8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  v2 = IMGetXPCIntFromDictionary();
  IMGetXPCArrayFromDictionary();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "updateRecoverableMessageSyncState:forMessageGUIDs:", v2, v5);

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    (*(void (**)(void))(v4 + 16))();

}

void sub_1ABB8C8F8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  IMGetXPCStringFromDictionary();
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "storeRecoverableMessagePartWithBody:forMessageWithGUID:deleteDate:", v3, v6, v2);

  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(void))(v5 + 16))();

}

void sub_1ABB8CA4C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  IMGetXPCStringFromDictionary();
  v6 = (id)objc_claimAutoreleasedReturnValue();
  IMGetXPCStringFromDictionary();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  IMGetXPCStringFromDictionary();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  IMGetXPCStringFromDictionary();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "postSharePlayNotificationForChatGUID:faceTimeConversationUUID:handleIdentifier:localizedApplicationName:", v6, v2, v3, v4);

}

void sub_1ABB8CCBC(xpc_object_t *a1)
{
  uint64_t uint64;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;

  uint64 = xpc_dictionary_get_uint64(a1[4], "tableName");
  objc_msgSend(a1[5], "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1ABB8CD74;
  v4[3] = &unk_1E5AB1EC0;
  v5 = a1[6];
  v6 = a1[7];
  objc_msgSend(v3, "fetchCountOfRecordType:completionHandler:", uint64, v4);

}

uint64_t sub_1ABB8CD74(uint64_t a1, int64_t value)
{
  xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "total", value);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1ABB8CE70(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleRecordsFilteredByPredicate:", v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "_respondWithHandleRecords:responseMessage:completionHandler:", v3, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1ABB8CFC8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int64_t int64;
  void *v7;
  void *v8;
  _QWORD v9[5];
  id v10;
  id v11;

  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(void **)(a1 + 40);
  xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "sortDescriptors");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_codableObjectsCopiedFromXPCArray:objectClass:", v4, objc_opt_class());
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  objc_msgSend(*(id *)(a1 + 40), "database");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1ABB8D108;
  v9[3] = &unk_1E5AB1D80;
  v8 = *(void **)(a1 + 48);
  v9[4] = *(_QWORD *)(a1 + 40);
  v10 = v8;
  v11 = *(id *)(a1 + 56);
  objc_msgSend(v7, "fetchHandleRecordsFilteredUsingPredicate:sortedUsingDescriptors:limit:completionHandler:", v2, v5, int64, v9);

}

uint64_t sub_1ABB8D108(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_respondWithHandleRecords:responseMessage:completionHandler:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1ABB8D1C0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  IMGetXPCArrayFromDictionary();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v2 = IMGetXPCIntFromDictionary();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "updateAttachmentsSyncStatusTo:forGUIDs:", v2, v5);

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    (*(void (**)(void))(v4 + 16))();

}

void sub_1ABB8D2F0(uint64_t a1)
{
  int64_t int64;
  void *v3;
  uint64_t v4;
  id v5;

  IMGetXPCArrayFromDictionary();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "reason");
  objc_msgSend(*(id *)(a1 + 40), "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "coreSpotlightDeleteAttachmentGUIDs:reason:", v5, int64);

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    (*(void (**)(void))(v4 + 16))();

}

void sub_1ABB8D420(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "database");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "deleteAttachmentsDirectWithPredicate:", v4);

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(void))(v3 + 16))();

}

void sub_1ABB8D564(uint64_t a1)
{
  void *v2;
  int64_t int64;
  void *v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  id v8;

  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  objc_msgSend(*(id *)(a1 + 40), "database");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABB8D654;
  v6[3] = &unk_1E5AB1D80;
  v5 = *(void **)(a1 + 48);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = v5;
  v8 = *(id *)(a1 + 56);
  objc_msgSend(v4, "fetchAttachmentRecordsFilteredUsingPredicate:limit:completionHandler:", v2, int64, v6);

}

uint64_t sub_1ABB8D654(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__respondWithAttachmentRecords_responseMessage_completionHandler_);
}

void sub_1ABB8D72C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int64_t int64;
  void *v7;
  void *v8;
  _QWORD v9[5];
  id v10;
  id v11;

  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(void **)(a1 + 40);
  xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "sortDescriptors");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_codableObjectsCopiedFromXPCArray:objectClass:", v4, objc_opt_class());
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "limit");
  objc_msgSend(*(id *)(a1 + 40), "database");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1ABB8D86C;
  v9[3] = &unk_1E5AB1D80;
  v8 = *(void **)(a1 + 48);
  v9[4] = *(_QWORD *)(a1 + 40);
  v10 = v8;
  v11 = *(id *)(a1 + 56);
  objc_msgSend(v7, "fetchAttachmentRecordsFilteredUsingPredicate:sortedUsingDescriptors:limit:completionHandler:", v2, v5, int64, v9);

}

uint64_t sub_1ABB8D86C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__respondWithAttachmentRecords_responseMessage_completionHandler_);
}

void sub_1ABB8D944(id *a1)
{
  void *v2;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;

  IMGetXPCStringFromDictionary();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "database");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1ABB8DA04;
  v4[3] = &unk_1E5AB1EC0;
  v5 = a1[6];
  v6 = a1[7];
  objc_msgSend(v3, "fetchInteger64ForKey:completionHandler:", v2, v4);

}

uint64_t sub_1ABB8DA04(uint64_t a1, int64_t value)
{
  uint64_t result;

  xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "result", value);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1ABB8DB04(id *a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;

  objc_msgSend(a1[4], "database");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABB8DB9C;
  v3[3] = &unk_1E5AB1EC0;
  v4 = a1[5];
  v5 = a1[6];
  objc_msgSend(v2, "checkSpotlightIndexCountWithCompletion:", v3);

}

uint64_t sub_1ABB8DB9C(uint64_t a1, int64_t value)
{
  uint64_t result;

  xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "total", value);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1ABB8DC9C(id *a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;

  objc_msgSend(a1[4], "database");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABB8DD34;
  v3[3] = &unk_1E5AB1EE8;
  v4 = a1[5];
  v5 = a1[6];
  objc_msgSend(v2, "validateSpotlightClientStateWithCompletion:", v3);

}

void sub_1ABB8DD34(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v5 = a3;
  v8 = v5;
  if (a2)
  {
    IMInsertBoolsToXPCDictionary();
  }
  else if (v5)
  {
    IMInsertCodableObjectsToXPCDictionary();
  }
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v7, v6);

}

void sub_1ABB8DE74(id *a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;

  objc_msgSend(a1[4], "database");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABB8DF0C;
  v3[3] = &unk_1E5AB1F10;
  v4 = a1[5];
  v5 = a1[6];
  objc_msgSend(v2, "fetchSpotlightClientStateWithCompletion:", v3);

}

void sub_1ABB8DF0C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = v9;
  v7 = v5;
  if (v9 || v5)
    IMInsertCodableObjectsToXPCDictionary();
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v6);

}

void sub_1ABB8E048(id *a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;

  objc_msgSend(a1[4], "database");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABB8E0E0;
  v3[3] = &unk_1E5AB0760;
  v4 = a1[5];
  v5 = a1[6];
  objc_msgSend(v2, "invalidateSpotlightClientStateVersioningWithCompletion:", v3);

}

void sub_1ABB8E0E0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (v3)
  {
    IMInsertCodableObjectsToXPCDictionary();
    v3 = v5;
  }
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
    v3 = v5;
  }

}

uint64_t _IMDSetAllowLocalMigration(uint64_t result)
{
  byte_1EEC3FA50 = result;
  return result;
}

int *_IMDGetMigrators()
{
  return &dword_1ED0D2970;
}

uint64_t _IMDDatabasePerformOneMigration(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, _QWORD *a6)
{
  double v12;
  double v13;
  _BOOL4 v14;
  NSObject *v15;
  _BOOL4 v16;
  NSObject *v17;
  _BOOL4 v18;
  NSObject *v19;
  uint64_t (*v20)(_OWORD *, uint64_t);
  int v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  int v25;
  double v26;
  NSObject *v27;
  int v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  _OWORD v33[10];
  __int128 v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  double v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
  v13 = v12;
  v34 = 0u;
  memset(v33, 0, sizeof(v33));
  IMDSqlOperationInitWithCSDBConnection(a3, a2, (uint64_t)v33);
  v14 = IMDSqlOperationBeginTransaction(v33);
  if (!v14 && !*((_QWORD *)&v34 + 1))
  {
    v15 = IMLogHandleForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      sub_1ABC58358();
  }
  if (!v14)
    goto LABEL_29;
  v16 = IMDDropAllTriggersWithOperation((uint64_t)v33, 1);
  if (v16
    || *((_QWORD *)&v34 + 1)
    || (v17 = IMLogHandleForCategory(), !os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)))
  {
    if (v16)
    {
      v18 = IMDDropUnknownIndexesWithOperation((uint64_t)v33, 1);
      if (v18
        || *((_QWORD *)&v34 + 1)
        || (v19 = IMLogHandleForCategory(), !os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)))
      {
        if (!v18
          || !IMDDropUnknownTablesWithOperation((uint64_t)v33, 1)
          || !IMDCreateTablesWithOperation((uint64_t)v33, 1))
        {
          goto LABEL_29;
        }
        v20 = (uint64_t (*)(_OWORD *, uint64_t))*((_QWORD *)a1 + 1);
        if (!v20)
          goto LABEL_24;
        v21 = v20(v33, a4);
        if ((v21 & 1) == 0 && !*((_QWORD *)&v34 + 1))
        {
          v22 = IMLogHandleForCategory();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            sub_1ABC58178();
            goto LABEL_29;
          }
        }
        if (v21)
        {
LABEL_24:
          if (IMDSqlOperationCommitTransaction(v33))
          {
            CSDBSqliteDatabaseSetVersion();
            if (a5)
              *a5 = *a1;
            if (!*((_QWORD *)&v34 + 1))
            {
              IMDSqlOperationRelease((uint64_t)v33, 0);
              v23 = IMLogHandleForCategory();
              v24 = 1;
              if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              {
                v25 = *a1;
                objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
                *(_DWORD *)buf = 67109632;
                v36 = a4;
                v37 = 1024;
                v38 = v25;
                v39 = 2048;
                v40 = v26 - v13;
                _os_log_impl(&dword_1ABB60000, v23, OS_LOG_TYPE_INFO, "Migrated from %d to %d ok in %f seconds", buf, 0x18u);
              }
              return v24;
            }
          }
        }
      }
      else
      {
        sub_1ABC58218();
      }
    }
  }
  else
  {
    sub_1ABC582B8();
  }
LABEL_29:
  v27 = IMLogHandleForCategory();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    v28 = *a1;
    *(double *)&v29 = COERCE_DOUBLE(IMDSqlOperationErrorDescription((uint64_t)v33));
    *(_DWORD *)buf = 67109634;
    v36 = a4;
    v37 = 1024;
    v38 = v28;
    v39 = 2112;
    v40 = *(double *)&v29;
    _os_log_impl(&dword_1ABB60000, v27, OS_LOG_TYPE_INFO, "Migration from %d to %d failed with error: %@", buf, 0x18u);
  }
  IMDSqlOperationGetError((uint64_t)v33, a6);
  IMDSqlOperationRevertTransaction(v33);
  IMDSqlOperationRelease((uint64_t)v33, 0);
  v30 = IMLogHandleForCategory();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    v31 = *a1;
    *(_DWORD *)buf = 67109376;
    v36 = a4;
    v37 = 1024;
    v38 = v31;
    _os_log_impl(&dword_1ABB60000, v30, OS_LOG_TYPE_INFO, "Unable to perform database migration from %d to %d", buf, 0xEu);
  }
  return 0;
}

BOOL _IMDDatabaseCompleteMigration(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  void (*v6)(uint64_t);
  NSObject *v7;
  _OWORD v9[10];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  memset(v9, 0, sizeof(v9));
  IMDSqlOperationInitWithCSDBConnection(a2, a1, (uint64_t)v9);
  if (IMDCreateTablesWithOperation((uint64_t)v9, 1))
  {
    IMDCreateIndexesWithOperation((uint64_t)v9, 1);
    IMDCreateTriggersWithOperation((uint64_t)v9, 1);
  }
  else if (!*((_QWORD *)&v10 + 1))
  {
    v11 = xmmword_1E5AB1F30;
    v12 = *(_OWORD *)off_1E5AB1F40;
    v13 = 221;
    v5 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected false '%@' in %s at %s:%d. %@"), CFSTR("success || operation->error != nil"), "BOOL IMDCreateTriggersAndIndexes(IMDSqlOperation *, BOOL)", IMFileLocationTrimFileName(), 221, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("can't have migration fail without error!!")));
    v6 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v6)
    {
      v6(v5);
    }
    else if (IMOSLoggingEnabled())
    {
      v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v15 = v5;
        _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  return IMDSqlOperationRelease((uint64_t)v9, a4);
}

uint64_t _IMDDatabasePerformMigrations(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _QWORD *a5)
{
  uint64_t v6;
  unsigned int v9;
  int *v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  char v17;
  int v18;
  NSObject *v19;
  _BOOL4 v20;
  void *v21;
  void *v22;
  uint64_t v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v6 = a3;
  v25 = 0;
  v9 = dword_1ED0D2970;
  if (!dword_1ED0D2970)
  {
LABEL_7:
    _IMDDatabaseCompleteMigration(a1, a2, a3, &v25);
    v13 = 1;
    v14 = v25;
    goto LABEL_8;
  }
  v11 = &dword_1ED0D2970;
  while (v6 >= v9)
  {
LABEL_6:
    v12 = v11[6];
    v11 += 6;
    v9 = v12;
    if (!v12)
      goto LABEL_7;
  }
  if (_IMDDatabasePerformOneMigration(v11, a1, a2, v6, a4, &v25))
  {
    v6 = *v11;
    goto LABEL_6;
  }
  v14 = v25;
  if (v25)
  {
    v13 = 0;
  }
  else
  {
    v14 = (void *)objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 3072, 0);
    v13 = 0;
    v25 = v14;
  }
LABEL_8:
  if (a5 && v14)
  {
    if (*a5)
    {
      v26 = xmmword_1E5AB1F58;
      v27 = *(_OWORD *)off_1E5AB1F68;
      v28 = 59;
      v15 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected not nil '%@' in %s at %s:%d. %@"), CFSTR("*outError"), "BOOL IMDSetOutError(NSError **, NSError *)", IMFileLocationTrimFileName(), 59, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("outError is already pointing at an error, this could be a leak")));
      v16 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
      if (v16)
      {
        v16(v15);
      }
      else
      {
        v24 = v15;
        _IMWarn();
      }
    }
    *a5 = v14;
  }
  v17 = v13 ^ 1;
  if ((_DWORD)v6 == 18016)
    v17 = 1;
  if ((v17 & 1) == 0)
  {
    v18 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance"), "isInternalInstall");
    v19 = IMLogHandleForCategory();
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (v18 && (int)v6 >= 18017)
    {
      if (v20)
        sub_1ABC583F8(v6, v19);
      if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance", v24), "isInternalInstall"))
      {
        v21 = (void *)objc_msgSend(MEMORY[0x1E0D36B00], "userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:", objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID"), CFSTR("Messages Database Downgrade Detected"), CFSTR("[Internal Only] Messages database is newer than expected version. This may have occurred due to a software downgrade.\n\nNo data has been removed but Messages may not behave as expected."), CFSTR("OK"), 0, 0);
        if (v21)
        {
          v22 = v21;
          objc_msgSend(v21, "setUsesNotificationCenter:", 0);
          objc_msgSend(v22, "setRepresentedApplicationBundle:", *MEMORY[0x1E0D36C08]);
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36B08], "sharedInstance"), "addUserNotification:listener:completionHandler:", v22, 0, &unk_1E5AAEFE8);
        }
      }
      return 1;
    }
    else
    {
      if (v20)
        sub_1ABC5847C(v19);
      return 0;
    }
  }
  return v13;
}

void sub_1ABB8E9BC()
{
  NSObject *v0;
  uint8_t v1[16];

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "User acknowledged database downgrade", v1, 2u);
    }
  }
}

void sub_1ABB8EA48(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  NSObject *v11;

  _os_log_error_impl(a1, v11, OS_LOG_TYPE_ERROR, a4, &buf, 0x26u);
}

uint64_t sub_1ABB8EA9C@<X0>(void *a1@<X8>)
{
  return objc_msgSend(a1, "stringWithFormat:");
}

uint64_t IMDChatRecordAddChat(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABB8EB54;
  v3[3] = &unk_1E5AB1FA8;
  v3[4] = &v4;
  v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1ABB8EB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB8EB54(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 40))
  {
    v1 = result;
    CSDBRecordStoreAddRecord();
    result = CSDBRecordSaveStore();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t IMDChatRecordCopyAllChats()
{
  NSObject *v0;
  NSString *v1;
  uint64_t v2;
  void (*v4[5])(void);
  _QWORD v5[5];
  uint8_t buf[8];
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_DEBUG, "IMDSMSRecordStoreCopyAllChats", buf, 2u);
    }
  }
  *(_QWORD *)buf = 0;
  v7 = buf;
  v8 = 0x2020000000;
  v9 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v1 = +[IMDChatQueryStrings copyAllChatsQuery](IMDChatQueryStrings, "copyAllChatsQuery");
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_1ABB8ED08;
    v5[3] = &unk_1E5AB2070;
    v5[4] = buf;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v1, (uint64_t)v5);

  }
  else
  {
    v4[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v4[1] = (void (*)(void))3221225472;
    v4[2] = (void (*)(void))sub_1ABB8EE18;
    v4[3] = (void (*)(void))&unk_1E5AAF630;
    v4[4] = (void (*)(void))buf;
    __syncXPCIMDChatRecordCopyAllChats_IPCAction(v4);
  }
  v2 = *((_QWORD *)v7 + 3);
  _Block_object_dispose(buf, 8);
  return v2;
}

void sub_1ABB8ED08(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  CFMutableArrayRef Mutable;
  __CFArray *v8;
  CFIndex v9;
  uint64_t v10;
  int ID;
  _OWORD *v12;
  const void *v13;

  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      v5 = (int)Count;
      v6 = *MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (int)Count, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v8 = Mutable;
        v9 = 0;
        if (v5 <= 1)
          v10 = 1;
        else
          v10 = v5;
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          ID = CSDBRecordGetID();
          v12 = IMDChatRecordCreateFromRecordIDUnlocked(v6, ID);
          if (v12)
          {
            v13 = v12;
            CFArrayAppendValue(v8, v12);
            CFRelease(v13);
          }
          ++v9;
        }
        while (v10 != v9);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1ABB8EE18(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABB8EE90;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABB8EE90(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  _QWORD *v6;
  const void *v7;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (void *)MEMORY[0x1AF435474]();
  v6 = _IMDCopyIMDChatRecordFromXPCObjectClient(a3);
  if (v6)
  {
    v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v6);
    CFRelease(v7);
  }
  objc_autoreleasePoolPop(v5);
  return 1;
}

uint64_t IMDChatRecordCopyAllNamedChats()
{
  NSObject *v0;
  NSString *v1;
  uint64_t v2;
  void (*v4[5])(void);
  _QWORD v5[5];
  uint8_t buf[8];
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_DEBUG, "IMDSMSRecordStoreCopyAllNamedChats", buf, 2u);
    }
  }
  *(_QWORD *)buf = 0;
  v7 = buf;
  v8 = 0x2020000000;
  v9 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v1 = +[IMDChatQueryStrings copyAllNamedChatsQuery](IMDChatQueryStrings, "copyAllNamedChatsQuery");
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_1ABB8F098;
    v5[3] = &unk_1E5AB2070;
    v5[4] = buf;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v1, (uint64_t)v5);

  }
  else
  {
    v4[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v4[1] = (void (*)(void))3221225472;
    v4[2] = (void (*)(void))sub_1ABB8F1A8;
    v4[3] = (void (*)(void))&unk_1E5AAF630;
    v4[4] = (void (*)(void))buf;
    __syncXPCIMDChatRecordCopyAllNamedChats_IPCAction(v4);
  }
  v2 = *((_QWORD *)v7 + 3);
  _Block_object_dispose(buf, 8);
  return v2;
}

void sub_1ABB8F098(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  CFMutableArrayRef Mutable;
  __CFArray *v8;
  CFIndex v9;
  uint64_t v10;
  int ID;
  _OWORD *v12;
  const void *v13;

  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      v5 = (int)Count;
      v6 = *MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (int)Count, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v8 = Mutable;
        v9 = 0;
        if (v5 <= 1)
          v10 = 1;
        else
          v10 = v5;
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          ID = CSDBRecordGetID();
          v12 = IMDChatRecordCreateFromRecordIDUnlocked(v6, ID);
          if (v12)
          {
            v13 = v12;
            CFArrayAppendValue(v8, v12);
            CFRelease(v13);
          }
          ++v9;
        }
        while (v10 != v9);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1ABB8F1A8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABB8F220;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABB8F220(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  _QWORD *v6;
  const void *v7;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (void *)MEMORY[0x1AF435474]();
  v6 = _IMDCopyIMDChatRecordFromXPCObjectClient(a3);
  if (v6)
  {
    v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v6);
    CFRelease(v7);
  }
  objc_autoreleasePoolPop(v5);
  return 1;
}

uint64_t IMDChatRecordCopyAllActiveChats()
{
  NSObject *v0;
  NSString *v1;
  uint64_t v2;
  _QWORD v4[5];
  _QWORD v5[5];
  uint8_t buf[8];
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_DEBUG, "IMDSMSRecordStoreCopyAllActiveChats", buf, 2u);
    }
  }
  *(_QWORD *)buf = 0;
  v7 = buf;
  v8 = 0x2020000000;
  v9 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v1 = +[IMDChatQueryStrings copyAllChatsQuery](IMDChatQueryStrings, "copyAllChatsQuery");
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_1ABB8F430;
    v5[3] = &unk_1E5AB2070;
    v5[4] = buf;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v1, (uint64_t)v5);

  }
  else
  {
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = sub_1ABB8F540;
    v4[3] = &unk_1E5AAF630;
    v4[4] = buf;
    __syncXPCIMDChatRecordCopyAllActiveChatsProgressivelyWithLimit_IPCAction((void (*)(void))v4, -1);
  }
  v2 = *((_QWORD *)v7 + 3);
  _Block_object_dispose(buf, 8);
  return v2;
}

void sub_1ABB8F3F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1ABB8F430(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  CFMutableArrayRef Mutable;
  __CFArray *v8;
  CFIndex v9;
  uint64_t v10;
  int ID;
  _OWORD *v12;
  const void *v13;

  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      v5 = (int)Count;
      v6 = *MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (int)Count, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v8 = Mutable;
        v9 = 0;
        if (v5 <= 1)
          v10 = 1;
        else
          v10 = v5;
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          ID = CSDBRecordGetID();
          v12 = IMDChatRecordCreateFromRecordIDUnlocked(v6, ID);
          if (v12)
          {
            v13 = v12;
            CFArrayAppendValue(v8, v12);
            CFRelease(v13);
          }
          ++v9;
        }
        while (v10 != v9);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1ABB8F540(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABB8F5B8;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABB8F5B8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  _QWORD *v6;
  const void *v7;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (void *)MEMORY[0x1AF435474]();
  v6 = _IMDCopyIMDChatRecordFromXPCObjectClient(a3);
  if (v6)
  {
    v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v6);
    CFRelease(v7);
  }
  objc_autoreleasePoolPop(v5);
  return 1;
}

id IMDChatRecordCopyAllUnreadChatsAndRecentChatsWithLimit(int64_t a1, int64_t a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void (*v16[5])(void);
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t buf[8];
  uint64_t v22;
  void (*v23)(uint64_t);
  void *v24;
  uint64_t v25;
  void *v26;
  int64_t v27;
  int64_t v28;
  uint8_t v29[4];
  uint64_t v30;
  __int16 v31;
  int64_t v32;
  __int16 v33;
  int64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Copying all unread chats and recent chats", buf, 2u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v6 = (void *)objc_msgSend(MEMORY[0x1E0D399F8], "fetchSMSFilterExtensionParams");
    v7 = +[IMDChatQueryStrings copyRecentChatsQueryWithFilterCount:](IMDChatQueryStrings, "copyRecentChatsQueryWithFilterCount:", objc_msgSend(v6, "count") + 5);
    v8 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v9 = MEMORY[0x1E0C809B0];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v22 = 3221225472;
    v23 = sub_1ABB95E80;
    v24 = &unk_1E5AB27A8;
    v27 = a1;
    v28 = a2;
    v25 = (uint64_t)v6;
    v26 = v8;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v7, (uint64_t)buf);
    if (v8)
      v10 = objc_msgSend(v8, "count");
    else
      v10 = 0;
    if (IMOSLoggingEnabled())
    {
      v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v29 = 134218496;
        v30 = v10;
        v31 = 2048;
        v32 = a1;
        v33 = 2048;
        v34 = a2;
        _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "Found %llu recent chats (knownSenderLimit: %lld, otherFilterLimit: %lld)", v29, 0x20u);
      }
    }

    objc_msgSend(v5, "addObjectsFromArray:", v8);
    objc_msgSend(v5, "count");
    v12 = objc_msgSend(v5, "count");
    v13 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v14 = +[IMDChatQueryStrings copyChatsWithUnreadMessagesWithLimit:](IMDChatQueryStrings, "copyChatsWithUnreadMessagesWithLimit:", 2000 - v12);
    *(_QWORD *)buf = v9;
    v22 = 3221225472;
    v23 = sub_1ABB960AC;
    v24 = &unk_1E5AB0D80;
    v25 = v13;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v14, (uint64_t)buf);

    objc_msgSend(v5, "addObjectsFromArray:", v13);
    v18[3] = (uint64_t)v5;
  }
  else
  {
    v16[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v16[1] = (void (*)(void))3221225472;
    v16[2] = (void (*)(void))sub_1ABB8F98C;
    v16[3] = (void (*)(void))&unk_1E5AAF630;
    v16[4] = (void (*)(void))&v17;
    __syncXPCIMDChatRecordCopyAllUnreadChatsAndRecentChatsWithLimit_IPCAction(v16, a1, a2);
    v5 = (id)v18[3];
  }
  _Block_object_dispose(&v17, 8);
  return v5;
}

xpc_object_t sub_1ABB8F98C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    result = _IMDChatRecordCopyChatsFromXPCArray(result);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

void IMDChatRemapChatsWithLastAddressedSIMIDToNewLastAddressedIDs(void *a1, void *a2, void *a3)
{
  NSObject *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject *v14;
  uint64_t v15;
  __CFString *v16;
  uint64_t v17;
  __CFString *v18;
  NSObject *v19;
  NSObject *v20;
  __CFString *v21;
  uint8_t v22[4];
  __CFString *v23;
  __int16 v24;
  __CFString *v25;
  uint8_t buf[32];
  _OWORD v27[9];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2112;
      *(_QWORD *)&buf[24] = a3;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Trying to update chats wuth lastAddressedSIMID %@ to new simID %@ and new handle %@", buf, 0x20u);
    }
  }
  if (a1)
  {
    v7 = objc_msgSend(a1, "length") == 0;
    if (a2)
      goto LABEL_6;
  }
  else
  {
    v7 = 1;
    if (a2)
    {
LABEL_6:
      v8 = objc_msgSend(a2, "length") == 0;
      if (a3)
        goto LABEL_7;
LABEL_13:
      v9 = 1;
      if (v7)
        goto LABEL_8;
      goto LABEL_14;
    }
  }
  v8 = 1;
  if (!a3)
    goto LABEL_13;
LABEL_7:
  v9 = objc_msgSend(a3, "length") == 0;
  if (v7)
  {
LABEL_8:
    if (IMOSLoggingEnabled())
    {
      v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        v11 = "Old lastAddressedSIMID passed is nil, returning.";
        v12 = v10;
        v13 = 2;
LABEL_18:
        _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, v11, buf, v13);
        return;
      }
    }
    return;
  }
LABEL_14:
  if (v8 && v9)
  {
    if (IMOSLoggingEnabled())
    {
      v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = a1;
        v11 = "Both new lastAddressedSIMID and lastAddressedSIMID are nil, not updating chats with simID %@ and returning.";
        v12 = v14;
        v13 = 12;
        goto LABEL_18;
      }
    }
  }
  else if (IMDIsRunningInDatabaseServerProcess())
  {
    v15 = objc_msgSend(a2, "copy");
    if (v15)
      v16 = (__CFString *)v15;
    else
      v16 = &stru_1E5AC1D70;
    v17 = objc_msgSend(a3, "copy");
    memset(&v27[7], 0, 32);
    if (v17)
      v18 = (__CFString *)v17;
    else
      v18 = &stru_1E5AC1D70;
    memset(v27, 0, 112);
    memset(buf, 0, sizeof(buf));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    _IMDSqlOperationBeginQuery((uint64_t)buf, (CFStringRef)+[IMDChatQueryStrings remapChatsWithLastAddressedSIMIDToNewLastAddressedIDsQuery](IMDChatQueryStrings, "remapChatsWithLastAddressedSIMIDToNewLastAddressedIDsQuery"));
    IMDSqlStatementBindTextFromCFString((uint64_t)v27, (uint64_t)v18);
    IMDSqlStatementBindTextFromCFString((uint64_t)v27, (uint64_t)v16);
    IMDSqlStatementBindTextFromCFString((uint64_t)v27, *MEMORY[0x1E0D38F58]);
    IMDSqlStatementBindTextFromCFString((uint64_t)v27, (uint64_t)a1);
    IMDSqlOperationFinishQuery((uint64_t)buf);
    v21 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v21);
    if (v21)
    {
      if (IMOSLoggingEnabled())
      {
        v19 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v22 = 138412290;
          v23 = v21;
          _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Error executing IMDChatRemapChatsWithLastAddressedSIMIDToNewLastAddressedIDs %@ ", v22, 0xCu);
        }
      }
    }
    if (IMOSLoggingEnabled())
    {
      v20 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v22 = 138412546;
        v23 = v18;
        v24 = 2112;
        v25 = v16;
        _os_log_impl(&dword_1ABB60000, v20, OS_LOG_TYPE_INFO, "Last addressed handles/simIDs got modified to %@ and %@. Posting notification to reload chat registry.", v22, 0x16u);
      }
    }
    notify_post("com.apple.imdpersistenceagent.notification.lastaddressedidsmodified");

  }
  else
  {
    __syncXPCIMDChatRemapChatsWithLastAddressedSIMIDToNewLastAddressedIDs_IPCAction(0);
  }
}

uint64_t IMDChatGetMessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs(void *a1, void *a2)
{
  NSObject *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  const __CFString *v12;
  NSObject *v13;
  __CFDictionary *Row;
  __CFDictionary *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v29[5])(void);
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  CFMutableDictionaryRef Mutable;
  uint8_t v34[16];
  _DWORD buf[8];
  _OWORD v36[9];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      buf[0] = 138412546;
      *(_QWORD *)&buf[1] = a1;
      LOWORD(buf[3]) = 2112;
      *(_QWORD *)((char *)&buf[3] + 2) = a2;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Trying to find last address labelID/date from chatIds %@ and labelIDs %@", (uint8_t *)buf, 0x16u);
    }
  }
  v5 = objc_msgSend(a1, "count");
  v6 = objc_msgSend(a2, "count");
  if (v5 && (v7 = v6) != 0)
  {
    v8 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", &stru_1E5AC1D70);
    if (v5 >= 2)
    {
      v9 = v5 - 1;
      do
      {
        objc_msgSend(v8, "appendString:", CFSTR("?, "));
        --v9;
      }
      while (v9);
    }
    v10 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", &stru_1E5AC1D70);
    if (v7 >= 2)
    {
      v11 = v7 - 1;
      do
      {
        objc_msgSend(v10, "appendString:", CFSTR("?, "));
        --v11;
      }
      while (v11);
    }
    v30 = 0;
    v31 = &v30;
    v32 = 0x2020000000;
    Mutable = 0;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v12 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("select max(cm.message_date),last_addressed_sim_id from (select * from chat where chat_identifier in (%@?) AND style=45 and service_name=? and last_addressed_sim_id in (%@?)) c INNER JOIN chat_message_join cm ON c.ROWID=cm.chat_id;"),
                                  v8,
                                  v10);
      if (IMOSLoggingEnabled())
      {
        v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          buf[0] = 138412290;
          *(_QWORD *)&buf[1] = v12;
          _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "GetMessageDateAndLastAddressedLabelID: running with query %@", (uint8_t *)buf, 0xCu);
        }
      }
      memset(v36, 0, sizeof(v36));
      memset(buf, 0, sizeof(buf));
      IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
      _IMDSqlOperationBeginQuery((uint64_t)buf, v12);
      IMDSqlStatementBindTextFromArrayOfCFStrings((uint64_t)v36, (CFArrayRef)a1);
      IMDSqlStatementBindTextFromCFString((uint64_t)v36, *MEMORY[0x1E0D38F58]);
      IMDSqlStatementBindTextFromArrayOfCFStrings((uint64_t)v36, (CFArrayRef)a2);
      if (IMDSqlOperationHasRows((uint64_t)buf))
      {
        Row = IMDSqlStatementGetRow((sqlite3_stmt **)v36);
        v15 = Row;
        if (Row)
        {
          if (-[__CFDictionary objectForKeyedSubscript:](Row, "objectForKeyedSubscript:", CFSTR("last_addressed_sim_id")))
          {
            CFDictionarySetValue((CFMutableDictionaryRef)v31[3], CFSTR("labelID"), (const void *)-[__CFDictionary objectForKeyedSubscript:](v15, "objectForKeyedSubscript:", CFSTR("last_addressed_sim_id")));
            if (-[__CFDictionary objectForKeyedSubscript:](v15, "objectForKeyedSubscript:", CFSTR("max(cm.message_date)")))
            {
              CFDictionarySetValue((CFMutableDictionaryRef)v31[3], CFSTR("date"), (const void *)-[__CFDictionary objectForKeyedSubscript:](v15, "objectForKeyedSubscript:", CFSTR("max(cm.message_date)")));
            }
          }
        }
        if (IMOSLoggingEnabled())
        {
          v16 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            v17 = v31[3];
            *(_DWORD *)v34 = 138412290;
            *(_QWORD *)&v34[4] = v17;
            _os_log_impl(&dword_1ABB60000, v16, OS_LOG_TYPE_INFO, "GetMessageDateAndLastAddressedLabelID: found results from db %@", v34, 0xCu);
          }
        }

      }
      IMDSqlOperationFinishQuery((uint64_t)buf);
      *(_QWORD *)v34 = 0;
      IMDSqlOperationRelease((uint64_t)buf, v34);
      if (*(_QWORD *)v34)
      {
        v18 = IMLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          sub_1ABC5852C();
      }
    }
    else
    {
      v29[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v29[1] = (void (*)(void))3221225472;
      v29[2] = (void (*)(void))sub_1ABB902BC;
      v29[3] = (void (*)(void))&unk_1E5AAF630;
      v29[4] = (void (*)(void))&v30;
      __syncXPCIMDChatGetMessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs_IPCAction(v29, (uint64_t)a1, (uint64_t)a2);
    }
    v27 = v31[3];
    _Block_object_dispose(&v30, 8);
  }
  else
  {
    v19 = IMLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      sub_1ABC584F8(v19, v20, v21, v22, v23, v24, v25, v26);
    return 0;
  }
  return v27;
}

void sub_1ABB902BC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v4;
  const void *v5;
  int64_t int64;

  value = xpc_dictionary_get_value(xdict, "dictionary_result");
  if (value)
  {
    v4 = value;
    v5 = (const void *)IMGetXPCStringFromDictionary();
    int64 = xpc_dictionary_get_int64(v4, "date");
    if (v5)
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), CFSTR("labelID"), v5);
    if (int64)
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), CFSTR("date"), (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", int64));
  }
}

__CFArray *IMDChatGetChatsThatContainRecipient(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  unint64_t v4;
  const __CFAllocator *v5;
  uint64_t v6;
  __CFDictionary *v7;
  const void *v8;
  const void *v9;
  const __CFArray *v10;
  CFIndex Count;
  uint64_t v12;
  __CFArray *v13;
  CFIndex v14;
  uint64_t v15;
  int ID;
  const void *v17;
  NSObject *v18;
  const void *v19;
  uint64_t *v20;
  void (*v22[5])(void);
  uint8_t buf[16];
  _QWORD v24[6];
  _QWORD v25[7];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  CFMutableArrayRef v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  if (IMDIsRunningInDatabaseServerProcess())
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v32 = 0;
    v33 = &v32;
    v34 = 0x2020000000;
    v35 = 0;
    v26 = 0;
    v27 = &v26;
    v28 = 0x3052000000;
    v29 = (CFMutableArrayRef)sub_1ABB90800;
    v30 = sub_1ABB90810;
    v31 = 0;
    v31 = objc_msgSend(MEMORY[0x1E0C99D20], "array");
    v3 = MEMORY[0x1E0C809B0];
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = sub_1ABB9081C;
    v25[3] = &unk_1E5AB20C0;
    v25[5] = &v26;
    v25[6] = CFSTR("SELECT guid,display_Name,chat_id from chat c INNER JOIN chat_handle_join ch ON c.ROWID = ch.chat_id INNER JOIN handle h on h.ROWID = ch.handle_id WHERE c.state = 3 AND h.id = ?");
    v25[4] = a1;
    IMDRunSqlOperation((uint64_t)v25);
    v4 = 0;
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (v4 < objc_msgSend((id)v27[5], "count"))
    {
      v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), objc_msgSend((id)objc_msgSend((id)v27[5], "objectAtIndexedSubscript:", v4), "valueForKey:", CFSTR("chat_id")));
      v24[0] = v3;
      v24[1] = 3221225472;
      v24[2] = sub_1ABB908A0;
      v24[3] = &unk_1E5AB0D30;
      v24[4] = v6;
      v24[5] = &v32;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT handle_id FROM chat_handle_join WHERE chat_id = ?"), (uint64_t)v24);
      v7 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v8 = (const void *)objc_msgSend((id)objc_msgSend((id)v27[5], "objectAtIndexedSubscript:", v4), "valueForKey:", CFSTR("guid"));
      if (v8)
        CFDictionarySetValue(v7, CFSTR("chatGUID"), v8);
      v9 = (const void *)objc_msgSend((id)objc_msgSend((id)v27[5], "objectAtIndexedSubscript:", v4), "valueForKey:", CFSTR("display_name"));
      if (v9)
        CFDictionarySetValue(v7, CFSTR("displayName"), v9);
      v10 = (const __CFArray *)v33[3];
      if (v10)
      {
        Count = CFArrayGetCount(v10);
        v12 = (int)Count;
        v13 = CFArrayCreateMutable(v5, (int)Count, MEMORY[0x1E0C9B378]);
        if (v13)
        {
          if (Count << 32 >= 1)
          {
            v14 = 0;
            if (v12 <= 1)
              v15 = 1;
            else
              v15 = v12;
            do
            {
              CFArrayGetValueAtIndex((CFArrayRef)v33[3], v14);
              ID = CSDBRecordGetID();
              v17 = (const void *)IMDHandleRecordCreateFromRecordIDUnlocked(v5, ID);
              CFArrayAppendValue(v13, v17);
              if (v17)
                CFRelease(v17);
              ++v14;
            }
            while (v15 != v14);
          }
          CFDictionarySetValue(v7, CFSTR("handles"), v13);
          CFRelease(v13);
        }
      }
      else if (IMOSLoggingEnabled())
      {
        v18 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v18, OS_LOG_TYPE_INFO, "Handle records from kIMDChatTableSelectHandleIDFromChatID query is empty.", buf, 2u);
        }
      }
      v19 = (const void *)v33[3];
      if (v19)
      {
        CFRelease(v19);
        v33[3] = 0;
      }
      CFArrayAppendValue(Mutable, v7);
      if (v7)
        CFRelease(v7);
      ++v4;
    }

    _Block_object_dispose(&v26, 8);
    v20 = &v32;
  }
  else
  {
    v26 = 0;
    v27 = &v26;
    v28 = 0x2020000000;
    v29 = 0;
    v29 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v22[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v22[1] = (void (*)(void))3221225472;
    v22[2] = (void (*)(void))sub_1ABB90900;
    v22[3] = (void (*)(void))&unk_1E5AAF630;
    v22[4] = (void (*)(void))&v26;
    __syncXPCIMDChatGetChatsThatContainRecipient_IPCAction(v22, a1);
    Mutable = (__CFArray *)v27[3];
    v20 = &v26;
  }
  _Block_object_dispose(v20, 8);
  return Mutable;
}

void sub_1ABB90798()
{
  JUMPOUT(0x1ABB907F0);
}

void sub_1ABB907A4()
{
  JUMPOUT(0x1ABB907ECLL);
}

void sub_1ABB907AC()
{
  JUMPOUT(0x1ABB907E0);
}

void sub_1ABB90800(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1ABB90810(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

id sub_1ABB9081C(_QWORD *a1, uint64_t a2)
{
  const __CFString *v4;
  id result;
  _QWORD v6[6];

  v4 = (const __CFString *)a1[6];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABB90894;
  v6[3] = &unk_1E5AB2098;
  v6[4] = a1[4];
  v6[5] = a2;
  result = _IMDSqlOperationGetRowsWithBindingBlock(a2, v4, (uint64_t)v6);
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = result;
  return result;
}

void sub_1ABB90894(uint64_t a1)
{
  IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 40) + 32, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1ABB908A0(uint64_t a1)
{
  uint64_t result;

  CSDBSqliteBindTextFromCFString();
  result = CSDBRecordStoreProcessStatement();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1ABB90900(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v4;
  size_t count;
  size_t v6;
  size_t i;
  __CFDictionary *v8;
  xpc_object_t v9;
  void *v10;
  const void *v11;
  const void *v12;
  xpc_object_t v13;
  void *v14;
  __CFArray *Mutable;
  size_t v16;
  xpc_object_t v17;
  const void *v18;
  const void *v19;

  value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    v4 = value;
    count = xpc_array_get_count(value);
    if (count)
    {
      v6 = count;
      for (i = 0; i != v6; ++i)
      {
        v8 = (__CFDictionary *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v9 = xpc_array_get_value(v4, i);
        if (v9)
        {
          v10 = v9;
          v11 = (const void *)IMGetXPCStringFromDictionary();
          if (v11)
            CFDictionarySetValue(v8, CFSTR("chatGUID"), v11);
          v12 = (const void *)IMGetXPCStringFromDictionary();
          if (v12)
            CFDictionarySetValue(v8, CFSTR("displayName"), v12);
          v13 = xpc_dictionary_get_value(v10, "handles");
          if (v13)
          {
            v14 = v13;
            Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
            if (xpc_array_get_count(v14))
            {
              v16 = 0;
              do
              {
                v17 = xpc_array_get_value(v14, v16);
                v18 = (const void *)_IMDCopyIMDHandleRecordFromXPCObjectClient(v17);
                if (v18)
                {
                  v19 = v18;
                  CFArrayAppendValue(Mutable, v18);
                  CFRelease(v19);
                }
                ++v16;
              }
              while (v16 < xpc_array_get_count(v14));
            }
            if (Mutable)
            {
              CFDictionarySetValue(v8, CFSTR("handles"), Mutable);
              CFRelease(Mutable);
            }
          }
          CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v8);
        }
      }
    }
  }
}

uint64_t IMDChatGetMessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles(void *a1, void *a2)
{
  NSObject *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  const __CFString *v12;
  NSObject *v13;
  __CFDictionary *Row;
  __CFDictionary *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v29[5])(void);
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  CFMutableDictionaryRef Mutable;
  uint8_t v34[16];
  _DWORD buf[8];
  _OWORD v36[9];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      buf[0] = 138412546;
      *(_QWORD *)&buf[1] = a1;
      LOWORD(buf[3]) = 2112;
      *(_QWORD *)((char *)&buf[3] + 2) = a2;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Trying to find last address handles/date from chatIds %@ and handles %@", (uint8_t *)buf, 0x16u);
    }
  }
  v5 = objc_msgSend(a1, "count");
  v6 = objc_msgSend(a2, "count");
  if (v5 && (v7 = v6) != 0)
  {
    v8 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", &stru_1E5AC1D70);
    if (v5 >= 2)
    {
      v9 = v5 - 1;
      do
      {
        objc_msgSend(v8, "appendString:", CFSTR("?, "));
        --v9;
      }
      while (v9);
    }
    v10 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", &stru_1E5AC1D70);
    if (v7 >= 2)
    {
      v11 = v7 - 1;
      do
      {
        objc_msgSend(v10, "appendString:", CFSTR("?, "));
        --v11;
      }
      while (v11);
    }
    v30 = 0;
    v31 = &v30;
    v32 = 0x2020000000;
    Mutable = 0;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v12 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("select max(cm.message_date),last_addressed_handle from (select * from chat where chat_identifier in (%@?) AND style=45 and service_name=? and last_addressed_handle in (%@?)) c INNER JOIN chat_message_join cm ON c.ROWID=cm.chat_id;"),
                                  v8,
                                  v10);
      if (IMOSLoggingEnabled())
      {
        v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          buf[0] = 138412290;
          *(_QWORD *)&buf[1] = v12;
          _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "GetMessageDateAndLastAddressedHandle: running with query %@", (uint8_t *)buf, 0xCu);
        }
      }
      memset(v36, 0, sizeof(v36));
      memset(buf, 0, sizeof(buf));
      IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
      _IMDSqlOperationBeginQuery((uint64_t)buf, v12);
      IMDSqlStatementBindTextFromArrayOfCFStrings((uint64_t)v36, (CFArrayRef)a1);
      IMDSqlStatementBindTextFromCFString((uint64_t)v36, *MEMORY[0x1E0D38F58]);
      IMDSqlStatementBindTextFromArrayOfCFStrings((uint64_t)v36, (CFArrayRef)a2);
      if (IMDSqlOperationHasRows((uint64_t)buf))
      {
        Row = IMDSqlStatementGetRow((sqlite3_stmt **)v36);
        v15 = Row;
        if (Row)
        {
          if (-[__CFDictionary objectForKeyedSubscript:](Row, "objectForKeyedSubscript:", CFSTR("last_addressed_handle")))
          {
            CFDictionarySetValue((CFMutableDictionaryRef)v31[3], CFSTR("handle"), (const void *)-[__CFDictionary objectForKeyedSubscript:](v15, "objectForKeyedSubscript:", CFSTR("last_addressed_handle")));
            if (-[__CFDictionary objectForKeyedSubscript:](v15, "objectForKeyedSubscript:", CFSTR("max(cm.message_date)")))
            {
              CFDictionarySetValue((CFMutableDictionaryRef)v31[3], CFSTR("date"), (const void *)-[__CFDictionary objectForKeyedSubscript:](v15, "objectForKeyedSubscript:", CFSTR("max(cm.message_date)")));
            }
          }
        }
        if (IMOSLoggingEnabled())
        {
          v16 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            v17 = v31[3];
            *(_DWORD *)v34 = 138412290;
            *(_QWORD *)&v34[4] = v17;
            _os_log_impl(&dword_1ABB60000, v16, OS_LOG_TYPE_INFO, "GetMessageDateAndLastAddressedHandle: found results from db %@", v34, 0xCu);
          }
        }

      }
      IMDSqlOperationFinishQuery((uint64_t)buf);
      *(_QWORD *)v34 = 0;
      IMDSqlOperationRelease((uint64_t)buf, v34);
      if (*(_QWORD *)v34)
      {
        v18 = IMLogHandleForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          sub_1ABC585C0();
      }
    }
    else
    {
      v29[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v29[1] = (void (*)(void))3221225472;
      v29[2] = (void (*)(void))sub_1ABB90F8C;
      v29[3] = (void (*)(void))&unk_1E5AAF630;
      v29[4] = (void (*)(void))&v30;
      __syncXPCIMDChatGetMessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles_IPCAction(v29, (uint64_t)a1, (uint64_t)a2);
    }
    v27 = v31[3];
    _Block_object_dispose(&v30, 8);
  }
  else
  {
    v19 = IMLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      sub_1ABC5858C(v19, v20, v21, v22, v23, v24, v25, v26);
    return 0;
  }
  return v27;
}

void sub_1ABB90F8C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v4;
  const void *v5;
  int64_t int64;

  value = xpc_dictionary_get_value(xdict, "dictionary_result");
  if (value)
  {
    v4 = value;
    v5 = (const void *)IMGetXPCStringFromDictionary();
    int64 = xpc_dictionary_get_int64(v4, "date");
    if (v5)
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), CFSTR("handle"), v5);
    if (int64)
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), CFSTR("date"), (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", int64));
  }
}

id IMDChatRowIDsMostRecentByLastMessageWithLimit(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  __CFDictionary *Row;
  __CFDictionary *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  uint64_t v13;
  _OWORD v14[2];
  _OWORD v15[9];
  uint8_t buf[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!IMDIsRunningInDatabaseServerProcess())
    return 0;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v14);
  _IMDSqlOperationBeginQuery((uint64_t)v14, (CFStringRef)+[IMDChatQueryStrings chatRowIDsSortedByLastMessageDate](IMDChatQueryStrings, "chatRowIDsSortedByLastMessageDate"));
  if (IMDSqlOperationHasRows((uint64_t)v14))
  {
    v3 = 0;
    v4 = MEMORY[0x1E0C9AAB0];
    do
    {
      Row = IMDSqlStatementGetRow((sqlite3_stmt **)v15);
      v6 = Row;
      if (Row && -[__CFDictionary objectForKeyedSubscript:](Row, "objectForKeyedSubscript:", CFSTR("chat_id")))
      {
        v7 = objc_alloc(MEMORY[0x1E0C99D80]);
        v8 = -[__CFDictionary objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("max(message_date)"));
        v9 = MEMORY[0x1E0C9AAA0];
        if (v3 < a1)
          v9 = v4;
        v10 = (void *)objc_msgSend(v7, "initWithObjectsAndKeys:", v8, CFSTR("d"), v9, CFSTR("l"), 0);
        objc_msgSend(v2, "setObject:forKey:", v10, -[__CFDictionary objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("chat_id")));

      }
      ++v3;
    }
    while (IMDSqlOperationHasRows((uint64_t)v14));
  }
  IMDSqlOperationFinishQuery((uint64_t)v14);
  v13 = 0;
  IMDSqlOperationRelease((uint64_t)v14, &v13);
  if (v13)
  {
    if (IMOSLoggingEnabled())
    {
      v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v17 = v13;
        _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "Unable to find most recent ChatRow IDs from chat_message_join error: %@", buf, 0xCu);
      }
    }
  }
  return v2;
}

void IMDChatRecordCopyAllActiveChatsProgressivelyWithLimitAndBlock(int64_t a1, uint64_t a2)
{
  char v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = IMDIsRunningInDatabaseServerProcess();
  if (a2 && (v4 & 1) == 0)
  {
    v8 = 0;
    v9 = &v8;
    v10 = 0x2020000000;
    v11 = 0;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1ABB913E8;
    v7[3] = &unk_1E5AB21B0;
    v7[4] = a2;
    v7[5] = &v8;
    __syncXPCIMDChatRecordCopyAllActiveChatsProgressivelyWithLimit_IPCAction((void (*)(void))v7, a1);
    if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = v9[3];
        *(_DWORD *)buf = 134217984;
        v13 = v6;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Copying active chats progressively: total number copied was %ld", buf, 0xCu);
      }
    }
    _Block_object_dispose(&v8, 8);
  }
}

void sub_1ABB913E8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v4;
  size_t count;
  const __CFArray *Mutable;
  CFIndex v7;
  CFIndex v8;
  CFIndex i;
  uint64_t v10;
  const void *ValueAtIndex;
  NSObject *v12;
  uint8_t v13[16];
  _QWORD applier[6];

  value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    v4 = value;
    count = xpc_array_get_count(value);
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], count, MEMORY[0x1E0C9B378]);
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABB91574;
    applier[3] = &unk_1E5AB2188;
    applier[4] = *(_QWORD *)(a1 + 40);
    applier[5] = Mutable;
    xpc_array_apply(v4, applier);
    v7 = CFArrayGetCount(Mutable);
    if (v7 >= 1)
    {
      v8 = v7;
      for (i = 0; i != v8; ++i)
      {
        v10 = *(_QWORD *)(a1 + 32);
        ValueAtIndex = CFArrayGetValueAtIndex(Mutable, i);
        (*(void (**)(uint64_t, const void *))(v10 + 16))(v10, ValueAtIndex);
      }
    }
    if (Mutable)
      CFRelease(Mutable);
  }
  else if (IMOSLoggingEnabled())
  {
    v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "Received empty batch in IMDChatRecordCopyAllActiveChatsProgressivelyWithLimitAndBlock", v13, 2u);
    }
  }
}

uint64_t sub_1ABB91574(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  _QWORD *v6;
  const void *v7;
  __CFArray *v8;

  v5 = (void *)MEMORY[0x1AF435474]();
  v6 = _IMDCopyIMDChatRecordFromXPCObjectClient(a3);
  if (v6)
  {
    v7 = v6;
    v8 = *(__CFArray **)(a1 + 40);
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    CFArrayAppendValue(v8, v7);
    CFRelease(v7);
  }
  objc_autoreleasePoolPop(v5);
  return 1;
}

void IMDChatRecordCopyAllActiveChatsWithLimitAndBlock(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  void (*v9[6])(void);
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  if ((IMDIsRunningInDatabaseServerProcess() & 1) == 0)
  {
    v14 = 0;
    v15 = &v14;
    v16 = 0x2020000000;
    v17 = 0;
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    v9[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v9[1] = (void (*)(void))3221225472;
    v9[2] = (void (*)(void))sub_1ABB91758;
    v9[3] = (void (*)(void))&unk_1E5AB21D8;
    v9[4] = (void (*)(void))&v10;
    v9[5] = (void (*)(void))&v14;
    __syncXPCIMDChatRecordCopyAllActiveChatsWithLimit_IPCAction(v9, a1);
    if (v11[3])
    {
      v4 = 0;
      while (1)
      {
        v5 = (void *)MEMORY[0x1AF435474]();
        v6 = *(void **)(v15[3] + 8 * v4);
        v7 = _IMDCopyIMDChatRecordFromXPCObjectClient(v6);
        xpc_release(v6);
        if (a2)
        {
          if (v7)
            break;
        }
        if (v7)
          goto LABEL_8;
LABEL_9:
        objc_autoreleasePoolPop(v5);
        if (++v4 >= (unint64_t)v11[3])
          goto LABEL_10;
      }
      (*(void (**)(uint64_t, _QWORD *))(a2 + 16))(a2, v7);
LABEL_8:
      CFRelease(v7);
      goto LABEL_9;
    }
LABEL_10:
    v8 = (void *)v15[3];
    if (v8)
      free(v8);
    _Block_object_dispose(&v10, 8);
    _Block_object_dispose(&v14, 8);
  }
}

void sub_1ABB9172C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

xpc_object_t sub_1ABB91758(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  xpc_object_t v4;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    v4 = result;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = xpc_array_get_count(result);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = malloc_type_malloc(8* *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)+ 24), 0x80040B8603338uLL);
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABB91818;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 40);
    return (xpc_object_t)xpc_array_apply(v4, applier);
  }
  return result;
}

uint64_t sub_1ABB91818(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  xpc_retain(object);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8 * a2) = object;
  return 1;
}

uint64_t IMDChatRecordCopyChatRecordUnlocked(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABB91904;
  v3[3] = &unk_1E5AB1FA8;
  v3[4] = &v4;
  v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1ABB918EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB91904(uint64_t a1)
{
  uint64_t result;

  result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDChatRecordCopyChatRecord(int64_t a1)
{
  uint64_t v2;
  void (*v4[5])(void);
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 == -1)
    return 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_1ABB91A44;
    v5[3] = &unk_1E5AB1FA8;
    v5[4] = &v6;
    v5[5] = a1;
    _IMDPerformLockedMessageStoreBlock((uint64_t)v5);
  }
  else
  {
    v4[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v4[1] = (void (*)(void))3221225472;
    v4[2] = (void (*)(void))sub_1ABB91A84;
    v4[3] = (void (*)(void))&unk_1E5AAF630;
    v4[4] = (void (*)(void))&v6;
    __syncXPCIMDChatRecordCopyChatRecordForIdentifier_IPCAction(v4, a1);
  }
  v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_1ABB91A2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB91A44(uint64_t a1)
{
  uint64_t result;

  result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

_QWORD *sub_1ABB91A84(uint64_t a1, void *a2)
{
  _QWORD *result;

  result = _IMDCopyIMDChatRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFStringRef IMDChatRecordCopyChatForGUID(CFStringRef theString)
{
  CFStringRef v1;
  NSString *v2;
  void (*v4[5])(void);
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = theString;
  if (theString)
  {
    if (CFStringGetLength(theString))
    {
      v6 = 0;
      v7 = &v6;
      v8 = 0x2020000000;
      v9 = 0;
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v2 = +[IMDChatQueryStrings copyChatForGUIDQuery](IMDChatQueryStrings, "copyChatForGUIDQuery");
        v5[0] = MEMORY[0x1E0C809B0];
        v5[1] = 3221225472;
        v5[2] = sub_1ABB91BDC;
        v5[3] = &unk_1E5AB2200;
        v5[4] = &v6;
        v5[5] = v1;
        _IMDPerformLockedStatementBlockWithQuery((uint64_t)v2, (uint64_t)v5);

      }
      else
      {
        v4[0] = (void (*)(void))MEMORY[0x1E0C809B0];
        v4[1] = (void (*)(void))3221225472;
        v4[2] = (void (*)(void))sub_1ABB91C84;
        v4[3] = (void (*)(void))&unk_1E5AAF630;
        v4[4] = (void (*)(void))&v6;
        __syncXPCIMDChatRecordCopyChatForGUID_IPCAction(v4, (uint64_t)v1);
      }
      v1 = (CFStringRef)v7[3];
      _Block_object_dispose(&v6, 8);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void sub_1ABB91BC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1ABB91BDC(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  int ID;

  CSDBSqliteBindTextFromCFString();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      ID = CSDBRecordGetID();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IMDChatRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], ID);
    }
    CFRelease(v3);
  }
}

_QWORD *sub_1ABB91C84(uint64_t a1, void *a2)
{
  _QWORD *result;

  result = _IMDCopyIMDChatRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

int64_t IMDChatRecordCopyChatForMessageID(int64_t a1)
{
  int64_t v1;
  void (*v3[5])(void);
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1;
  if (a1)
  {
    v5 = 0;
    v6 = &v5;
    v7 = 0x2020000000;
    v8 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v4[0] = MEMORY[0x1E0C809B0];
      v4[1] = 3221225472;
      v4[2] = sub_1ABB91DC0;
      v4[3] = &unk_1E5AB2200;
      v4[4] = &v5;
      v4[5] = v1;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat WHERE ROWID = (SELECT chat_id from chat_message_join WHERE message_id = ?)"), (uint64_t)v4);
      CFRelease(CFSTR("SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat WHERE ROWID = (SELECT chat_id from chat_message_join WHERE message_id = ?)"));
    }
    else
    {
      v3[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v3[1] = (void (*)(void))3221225472;
      v3[2] = (void (*)(void))sub_1ABB91E68;
      v3[3] = (void (*)(void))&unk_1E5AAF630;
      v3[4] = (void (*)(void))&v5;
      __syncXPCIMDChatRecordCopyChatForMessageID_IPCAction(v3, v1);
    }
    v1 = v6[3];
    _Block_object_dispose(&v5, 8);
  }
  return v1;
}

void sub_1ABB91DA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1ABB91DC0(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  int ID;

  CSDBSqliteBindInt64();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      ID = CSDBRecordGetID();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IMDChatRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], ID);
    }
    CFRelease(v3);
  }
}

_QWORD *sub_1ABB91E68(uint64_t a1, void *a2)
{
  _QWORD *result;

  result = _IMDCopyIMDChatRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFStringRef IMDChatRecordCopyChatForGUIDUnlocked(CFStringRef theString)
{
  CFStringRef v1;
  NSString *v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = theString;
  if (theString)
  {
    if (CFStringGetLength(theString))
    {
      v5 = 0;
      v6 = &v5;
      v7 = 0x2020000000;
      v8 = 0;
      v2 = +[IMDChatQueryStrings copyChatForGUIDUnlockedQuery](IMDChatQueryStrings, "copyChatForGUIDUnlockedQuery");
      v4[0] = MEMORY[0x1E0C809B0];
      v4[1] = 3221225472;
      v4[2] = sub_1ABB91F74;
      v4[3] = &unk_1E5AB2200;
      v4[4] = &v5;
      v4[5] = v1;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)v2, (uint64_t)v4);

      v1 = (CFStringRef)v6[3];
      _Block_object_dispose(&v5, 8);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void sub_1ABB91F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB91F74(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  int ID;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  CSDBSqliteBindTextFromCFString();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      ID = CSDBRecordGetID();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IMDChatRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], ID);
    }
    CFRelease(v3);
  }
  else if (IMOSLoggingEnabled())
  {
    v5 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 40);
      v7 = 138412290;
      v8 = v6;
      _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Did not get results for chat guid %@", (uint8_t *)&v7, 0xCu);
    }
  }
}

uint64_t IMDChatRecordCopyChatsWithHandleOnService(const __CFString *a1, const __CFString *a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  void (*v8[5])(void);
  _QWORD v9[7];
  uint8_t buf[16];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  if (!a1 || !CFStringGetLength(a1))
  {
    if (!IMOSLoggingEnabled())
      goto LABEL_14;
    v4 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      goto LABEL_14;
    *(_WORD *)buf = 0;
    v5 = "No handle provided to IMDChatRecordCopyChatsWithHandleOnService";
    goto LABEL_13;
  }
  if (!a2 || !CFStringGetLength(a2))
  {
    if (!IMOSLoggingEnabled())
      goto LABEL_14;
    v4 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      goto LABEL_14;
    *(_WORD *)buf = 0;
    v5 = "No service provided to IMDChatRecordCopyChatsWithHandleOnService";
LABEL_13:
    _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, v5, buf, 2u);
LABEL_14:
    v6 = 0;
    goto LABEL_15;
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_1ABB922D8;
    v9[3] = &unk_1E5AB2228;
    v9[5] = a1;
    v9[6] = a2;
    v9[4] = &v11;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat WHERE    chat_identifier = ? AND    service_name = ? ORDER BY chat.ROWID ASC;"),
      (uint64_t)v9);
  }
  else
  {
    v8[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v8[1] = (void (*)(void))3221225472;
    v8[2] = (void (*)(void))sub_1ABB92364;
    v8[3] = (void (*)(void))&unk_1E5AAF630;
    v8[4] = (void (*)(void))&v11;
    __syncXPCIMDChatRecordCopyChatsWithHandleOnService_IPCAction(v8, (uint64_t)a1, (uint64_t)a2);
  }
  v6 = v12[3];
LABEL_15:
  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1ABB9229C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1ABB922D8(uint64_t a1)
{
  void *v2;

  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  v2 = (void *)CSDBRecordStoreProcessStatement();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = _IMDChatRecordCopyChatsFromRecords(v2);
  if (v2)
    CFRelease(v2);
}

xpc_object_t sub_1ABB92364(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    result = _IMDChatRecordCopyChatsFromXPCArray(result);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t IMDChatRecordCopyChatsWithIdentifierOnService(const __CFString *a1, const __CFString *a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  void (*v8[5])(void);
  _QWORD v9[7];
  uint8_t buf[16];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  if (!a1 || !CFStringGetLength(a1))
  {
    if (!IMOSLoggingEnabled())
      goto LABEL_14;
    v4 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      goto LABEL_14;
    *(_WORD *)buf = 0;
    v5 = "No identifier provided to IMDChatRecordCopyChatsWithIdentifierOnService";
    goto LABEL_13;
  }
  if (!a2 || !CFStringGetLength(a2))
  {
    if (!IMOSLoggingEnabled())
      goto LABEL_14;
    v4 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      goto LABEL_14;
    *(_WORD *)buf = 0;
    v5 = "No service provided to IMDChatRecordCopyChatsWithIdentifierOnService";
LABEL_13:
    _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, v5, buf, 2u);
LABEL_14:
    v6 = 0;
    goto LABEL_15;
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_1ABB9257C;
    v9[3] = &unk_1E5AB2228;
    v9[5] = a1;
    v9[6] = a2;
    v9[4] = &v11;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat WHERE    chat_identifier = ? AND    service_name = ? ORDER BY chat.ROWID ASC;"),
      (uint64_t)v9);
  }
  else
  {
    v8[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v8[1] = (void (*)(void))3221225472;
    v8[2] = (void (*)(void))sub_1ABB92608;
    v8[3] = (void (*)(void))&unk_1E5AAF630;
    v8[4] = (void (*)(void))&v11;
    __syncXPCIMDChatRecordCopyChatsWithIdentifierOnService_IPCAction(v8, (uint64_t)a1, (uint64_t)a2);
  }
  v6 = v12[3];
LABEL_15:
  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1ABB92540(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1ABB9257C(uint64_t a1)
{
  void *v2;

  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  v2 = (void *)CSDBRecordStoreProcessStatement();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = _IMDChatRecordCopyChatsFromRecords(v2);
  if (v2)
    CFRelease(v2);
}

xpc_object_t sub_1ABB92608(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    result = _IMDChatRecordCopyChatsFromXPCArray(result);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t IMDChatRecordCopyChatsWithRoomnameOnService(const __CFString *a1, const __CFString *a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  void (*v8[5])(void);
  _QWORD v9[7];
  uint8_t buf[16];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  if (!a1 || !CFStringGetLength(a1))
  {
    if (!IMOSLoggingEnabled())
      goto LABEL_14;
    v4 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      goto LABEL_14;
    *(_WORD *)buf = 0;
    v5 = "No roomname provided to IMDChatRecordCopyChatsWithRoomnameOnService";
    goto LABEL_13;
  }
  if (!a2 || !CFStringGetLength(a2))
  {
    if (!IMOSLoggingEnabled())
      goto LABEL_14;
    v4 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      goto LABEL_14;
    *(_WORD *)buf = 0;
    v5 = "No service provided to IMDChatRecordCopyChatsWithRoomnameOnService";
LABEL_13:
    _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, v5, buf, 2u);
LABEL_14:
    v6 = 0;
    goto LABEL_15;
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_1ABB92820;
    v9[3] = &unk_1E5AB2228;
    v9[5] = a1;
    v9[6] = a2;
    v9[4] = &v11;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat WHERE    room_name = ? AND    service_name = ? ORDER BY chat.ROWID ASC;"),
      (uint64_t)v9);
  }
  else
  {
    v8[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v8[1] = (void (*)(void))3221225472;
    v8[2] = (void (*)(void))sub_1ABB928AC;
    v8[3] = (void (*)(void))&unk_1E5AAF630;
    v8[4] = (void (*)(void))&v11;
    __syncXPCIMDChatRecordCopyChatsWithRoomnameOnService_IPCAction(v8, (uint64_t)a1, (uint64_t)a2);
  }
  v6 = v12[3];
LABEL_15:
  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1ABB927E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1ABB92820(uint64_t a1)
{
  void *v2;

  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  v2 = (void *)CSDBRecordStoreProcessStatement();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = _IMDChatRecordCopyChatsFromRecords(v2);
  if (v2)
    CFRelease(v2);
}

xpc_object_t sub_1ABB928AC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    result = _IMDChatRecordCopyChatsFromXPCArray(result);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t IMDChatRecordCopyChatsWithGroupID(const __CFString *a1)
{
  NSObject *v2;
  uint64_t v3;
  void (*v5[5])(void);
  _QWORD v6[6];
  uint8_t buf[16];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (a1 && CFStringGetLength(a1))
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = sub_1ABB92A68;
      v6[3] = &unk_1E5AB2200;
      v6[4] = &v8;
      v6[5] = a1;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat WHERE    group_id = ? ORDER BY chat.ROWID ASC;"),
        (uint64_t)v6);
    }
    else
    {
      v5[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v5[1] = (void (*)(void))3221225472;
      v5[2] = (void (*)(void))sub_1ABB92AE8;
      v5[3] = (void (*)(void))&unk_1E5AAF630;
      v5[4] = (void (*)(void))&v8;
      __syncXPCIMDChatRecordCopyChatsWithGroupID_IPCAction(v5, (uint64_t)a1);
    }
    v3 = v9[3];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "No group ID provided to IMDChatRecordCopyChatsWithGroupID", buf, 2u);
      }
    }
    v3 = 0;
  }
  _Block_object_dispose(&v8, 8);
  return v3;
}

void sub_1ABB92A30(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1ABB92A68(uint64_t a1)
{
  void *v2;

  CSDBSqliteBindTextFromCFString();
  v2 = (void *)CSDBRecordStoreProcessStatement();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = _IMDChatRecordCopyChatsFromRecords(v2);
  if (v2)
    CFRelease(v2);
}

xpc_object_t sub_1ABB92AE8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    result = _IMDChatRecordCopyChatsFromXPCArray(result);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t IMDChatRecordCopyNewestChatForGroupIDOnService(const __CFString *a1, const __CFString *a2, int a3)
{
  const __CFString *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void (*v11[6])(void);
  uint8_t buf[8];
  uint8_t *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  dispatch_semaphore_t v17;
  _QWORD v18[7];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if (!a1 || !CFStringGetLength(a1))
  {
    if (!IMOSLoggingEnabled())
      return 0;
    v7 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      return 0;
    *(_WORD *)buf = 0;
    v8 = "No roomname provided to IMDChatRecordCopyNewestChatForGroupIDOnService";
    goto LABEL_16;
  }
  if (!a2 || !CFStringGetLength(a2))
  {
    if (!IMOSLoggingEnabled())
      return 0;
    v7 = OSLogHandleForIMEventCategory();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      return 0;
    *(_WORD *)buf = 0;
    v8 = "No service provided to IMDChatRecordCopyNewestChatForGroupIDOnService";
LABEL_16:
    _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, v8, buf, 2u);
    return 0;
  }
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v18[0] = MEMORY[0x1E0C809B0];
    if (a3)
      v6 = CFSTR("SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat LEFT OUTER JOIN chat_message_join on    chat_id == chat.rowid WHERE    original_group_id = ? AND    service_name = ? ORDER BY    chat_message_join.message_date DESC LIMIT    1;");
    else
      v6 = CFSTR("SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat LEFT OUTER JOIN chat_message_join on    chat_id == chat.rowid WHERE    group_id = ? AND    service_name = ? ORDER BY    chat_message_join.message_date DESC LIMIT    1;");
    v18[1] = 3221225472;
    v18[2] = sub_1ABB92D9C;
    v18[3] = &unk_1E5AB2228;
    v18[5] = a1;
    v18[6] = a2;
    v18[4] = &v19;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v6, (uint64_t)v18);
  }
  else
  {
    *(_QWORD *)buf = 0;
    v13 = buf;
    v14 = 0x3052000000;
    v15 = sub_1ABB90800;
    v16 = sub_1ABB90810;
    v17 = 0;
    v17 = dispatch_semaphore_create(0);
    v11[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v11[1] = (void (*)(void))3221225472;
    v11[2] = (void (*)(void))sub_1ABB92E50;
    v11[3] = (void (*)(void))&unk_1E5AB21D8;
    v11[4] = (void (*)(void))&v19;
    v11[5] = (void (*)(void))buf;
    __syncXPCIMDChatRecordCopyNewestChatForGroupIDOnService_IPCAction(v11, (uint64_t)a1, (uint64_t)a2);
    dispatch_semaphore_wait(*((dispatch_semaphore_t *)v13 + 5), 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(*((dispatch_object_t *)v13 + 5));
    _Block_object_dispose(buf, 8);
  }
  v9 = v20[3];
  _Block_object_dispose(&v19, 8);
  return v9;
}

void sub_1ABB92D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1ABB92D9C(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  int ID;

  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      ID = CSDBRecordGetID();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IMDChatRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], ID);
    }
    CFRelease(v3);
  }
}

intptr_t sub_1ABB92E50(uint64_t a1, void *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = _IMDCopyIMDChatRecordFromXPCObjectClient(a2);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

const __CFArray *IMDChatRecordCopyChatIdentitiesForMessageWithGUIDs(const __CFArray *a1)
{
  NSObject *v2;
  NSObject *v3;
  void (*v5[5])(void);
  _QWORD v6[6];
  uint8_t v7[4];
  const char *v8;
  _BYTE buf[24];
  void (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CFArrayRef IMDChatRecordCopyChatIdentitiesForMessageWithGUIDs(CFArrayRef)";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = CFArrayGetCount(a1);
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "%s with total message guids count %llu", buf, 0x16u);
    }
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3052000000;
  v10 = sub_1ABB90800;
  v11 = sub_1ABB90810;
  v12 = 0;
  if (!IMDIsRunningInDatabaseServerProcess())
  {
    if (a1 && CFArrayGetCount(a1))
    {
      v5[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v5[1] = (void (*)(void))3221225472;
      v5[2] = (void (*)(void))sub_1ABB9373C;
      v5[3] = (void (*)(void))&unk_1E5AAF630;
      v5[4] = (void (*)(void))buf;
      __syncXPCIMDChatRecordCopyChatIdentitiesForMessageWithGUIDs_IPCAction(v5);
      goto LABEL_11;
    }
    if (IMOSLoggingEnabled())
    {
      v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v7 = 136315138;
        v8 = "CFArrayRef IMDChatRecordCopyChatIdentitiesForMessageWithGUIDs(CFArrayRef)";
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "%s nil or empty messageGUIDs", v7, 0xCu);
      }
    }
LABEL_15:
    a1 = 0;
    goto LABEL_16;
  }
  if (a1)
  {
    if (CFArrayGetCount(a1))
    {
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = sub_1ABB930F8;
      v6[3] = &unk_1E5AB22C0;
      v6[4] = buf;
      v6[5] = a1;
      IMDRunSqlOperation((uint64_t)v6);
LABEL_11:
      a1 = *(const __CFArray **)(*(_QWORD *)&buf[8] + 40);
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_16:
  _Block_object_dispose(buf, 8);
  return a1;
}

BOOL sub_1ABB930F8(uint64_t a1, uint64_t a2)
{
  const __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];
  _QWORD v9[6];

  v4 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ (%@)"), CFSTR("SELECT    m.guid AS message_guid,   c.guid AS chat_guid,   c.style AS chat_style,   c.group_id AS chat_group_id,   c.original_group_id AS chat_original_group_id FROM chat c JOIN chat_message_join cmj ON c.ROWID = cmj.chat_id JOIN message m ON cmj.message_id = m.ROWID WHERE m.guid IN"), objc_msgSend(MEMORY[0x1E0CB3940], "substitutionStringForCount:", CFArrayGetCount(*(CFArrayRef *)(a1 + 40))));
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1ABB931CC;
  v9[3] = &unk_1E5AB2248;
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v9[4] = a2;
  v9[5] = v5;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABB931D8;
  v8[3] = &unk_1E5AB2298;
  v8[4] = v6;
  v8[5] = a2;
  return _IMDSqlOperationRunQuery(a2, v4, (uint64_t)v9, (uint64_t)v8);
}

void sub_1ABB931CC(uint64_t a1)
{
  IMDSqlStatementBindTextFromArrayOfCFStrings(*(_QWORD *)(a1 + 32) + 32, *(CFArrayRef *)(a1 + 40));
}

BOOL sub_1ABB931D8(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[9];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t);
  uint64_t v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  for (result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40)); result; result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40)))
  {
    v33 = 0;
    v34 = &v33;
    v35 = 0x3052000000;
    v36 = sub_1ABB90800;
    v37 = sub_1ABB90810;
    v38 = 0;
    v27 = 0;
    v28 = &v27;
    v29 = 0x3052000000;
    v30 = sub_1ABB90800;
    v31 = sub_1ABB90810;
    v32 = 0;
    v21 = 0;
    v22 = &v21;
    v23 = 0x3052000000;
    v24 = sub_1ABB90800;
    v25 = sub_1ABB90810;
    v26 = 0;
    v15 = 0;
    v16 = &v15;
    v17 = 0x3052000000;
    v18 = sub_1ABB90800;
    v19 = sub_1ABB90810;
    v20 = 0;
    v9 = 0;
    v10 = &v9;
    v11 = 0x3052000000;
    v12 = sub_1ABB90800;
    v13 = sub_1ABB90810;
    v14 = 0;
    v3 = *(_QWORD *)(a1 + 40);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1ABB93568;
    v8[3] = &unk_1E5AB2270;
    v8[4] = &v33;
    v8[5] = &v27;
    v8[6] = &v21;
    v8[7] = &v15;
    v8[8] = &v9;
    IMDSqlOperationIterateRow(v3, (uint64_t)v8);
    if (v34[5] && v28[5])
    {
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v34[5], CFSTR("messageID"));
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v28[5], CFSTR("chatID"));
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v22[5], CFSTR("chatStyle"));
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v16[5], CFSTR("chatGroupID"));
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v10[5], CFSTR("chatOriginalGroupID"));
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v4);

    }
    else if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = v34[5];
        v7 = v28[5];
        *(_DWORD *)buf = 138412546;
        v40 = v6;
        v41 = 2112;
        v42 = v7;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "IMDChatRecordChatGUIDsForMessageGUIDs got invalid column data back: %@|%@", buf, 0x16u);
      }
    }
    _Block_object_dispose(&v9, 8);
    _Block_object_dispose(&v15, 8);
    _Block_object_dispose(&v21, 8);
    _Block_object_dispose(&v27, 8);
    _Block_object_dispose(&v33, 8);
  }
  return result;
}

void sub_1ABB93514()
{
  JUMPOUT(0x1ABB93560);
}

void sub_1ABB9351C()
{
  JUMPOUT(0x1ABB93524);
}

void sub_1ABB93568(_QWORD *a1, __int128 *a2)
{
  const unsigned __int8 *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
      v4 = IMDStringFromSqlColumn((uint64_t)&v8);
      v5 = a1[4];
      goto LABEL_10;
    case 1:
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
      v4 = IMDStringFromSqlColumn((uint64_t)&v8);
      v5 = a1[5];
      goto LABEL_10;
    case 2:
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
      v4 = (const unsigned __int8 *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", IMDInt64FromSqlColumn((uint64_t)&v8));
      v5 = a1[6];
      goto LABEL_10;
    case 3:
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
      v4 = IMDStringFromSqlColumn((uint64_t)&v8);
      v5 = a1[7];
      goto LABEL_10;
    case 4:
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
      v4 = IMDStringFromSqlColumn((uint64_t)&v8);
      v5 = a1[8];
LABEL_10:
      *(_QWORD *)(*(_QWORD *)(v5 + 8) + 40) = v4;
      break;
    default:
      if (IMOSLoggingEnabled())
      {
        v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v7 = *((_DWORD *)a2 + 4);
          LODWORD(v8) = 67109120;
          DWORD1(v8) = v7;
          _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Unexpected column in reply query with index %d", (uint8_t *)&v8, 8u);
        }
      }
      break;
  }
}

xpc_object_t sub_1ABB9373C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    result = (xpc_object_t)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", IMGetXPCArrayFromDictionary());
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  }
  return result;
}

void IMDChatRecordDeleteChatForGUID_Fast(void *a1)
{
  NSObject *v2;
  _QWORD v3[5];

  if (!a1 || !objc_msgSend(a1, "length"))
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      sub_1ABC58620();
      if (!a1)
        return;
    }
    else if (!a1)
    {
      return;
    }
  }
  if (objc_msgSend(a1, "length"))
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v3[0] = MEMORY[0x1E0C809B0];
      v3[1] = 3221225472;
      v3[2] = sub_1ABB93860;
      v3[3] = &unk_1E5AB22E8;
      v3[4] = a1;
      IMDRunSqlOperation((uint64_t)v3);
    }
    else
    {
      __syncXPCIMDChatRecordDeleteChatForGUID_IPCAction(0, (uint64_t)a1);
    }
  }
}

void sub_1ABB93860(uint64_t a1, uint64_t a2)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1ABB938F4;
  v4[3] = &unk_1E5AB2098;
  v4[4] = *(_QWORD *)(a1 + 32);
  v4[5] = a2;
  _IMDSqlOperationRunQuery(a2, CFSTR("DELETE FROM chat WHERE guid = ?;"), (uint64_t)v4, 0);
  if (!*(_QWORD *)(a2 + 168))
  {
    IMDCoreSpotlightDeleteChatGUID(*(void **)(a1 + 32), 1006);
    IMDCoreSpotlightScheduleUpdateForDeletedMessages(1006);
  }
}

void sub_1ABB938F4(uint64_t a1)
{
  IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 40) + 32, *(_QWORD *)(a1 + 32));
}

void IMDChatRecordDeleteChatForGUID(__CFString *a1)
{
  uint64_t v2;
  char v3;
  int v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  _QWORD v8[5];
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1 && CFStringGetLength(a1))
  {
    if (!IMDIsRunningInDatabaseServerProcess())
    {
      __syncXPCIMDChatRecordDeleteChatForGUID_IPCAction(0, (uint64_t)a1);
      return;
    }
    IMDCoreSpotlightDeleteChatGUID(a1, 1006);
    IMDCoreSpotlightScheduleUpdateForDeletedMessages(1006);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1ABB93B40;
    v8[3] = &unk_1E5AB2308;
    v8[4] = a1;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query, engram_id, server_change_token, ck_sync_state, original_group_id, last_read_message_timestamp, cloudkit_record_id, last_addressed_sim_id, is_blackholed, syndication_date, syndication_type, is_recovered, is_deleting_incoming_messages FROM chat WHERE guid = ? ORDER BY chat.ROWID ASC;"),
      (uint64_t)v8);
    v2 = IMSharedHelperExternalLocationForFile();
    if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager", 0), "fileExistsAtPath:", v2) & 1) != 0)
    {
      v3 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "removeItemAtPath:error:", v2, &v7);
      v4 = IMOSLoggingEnabled();
      if ((v3 & 1) != 0)
      {
        if (v4)
        {
          v5 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v10 = v2;
            v6 = "  => Successfully deleted item at path: %@ ";
LABEL_16:
            _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, v6, buf, 0xCu);
          }
        }
      }
      else if (v4)
      {
        v5 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v10 = v2;
          v6 = "  => failed to remove item at path: %@ ";
          goto LABEL_16;
        }
      }
    }
    else if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v10 = v2;
        v6 = "   => file doesn't exist at path: %@";
        goto LABEL_16;
      }
    }
  }
}

void sub_1ABB93B20(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABB93AF4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB93B40()
{
  const __CFArray *v0;
  int Count;
  int v2;
  NSObject *v3;
  CFIndex v4;
  uint64_t v5;
  int ID;
  _QWORD *v7;
  const void *v8;
  _QWORD *v9;
  _DWORD v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  CSDBSqliteBindTextFromCFString();
  v0 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  Count = CFArrayGetCount(v0);
  v2 = Count;
  if (Count < 2)
  {
    if (Count != 1)
      goto LABEL_12;
  }
  else if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v11[0] = 67109120;
      v11[1] = v2;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Query for GUID yields %d results, deleting all\n", (uint8_t *)v11, 8u);
    }
  }
  v4 = 0;
  v5 = *MEMORY[0x1E0C9AE00];
  do
  {
    CFArrayGetValueAtIndex(v0, v4);
    ID = CSDBRecordGetID();
    v7 = IMDChatRecordCreateFromRecordIDUnlocked(v5, ID);
    v8 = v7;
    if (v7)
    {
      v9 = IMDChatRecordCopyHandles(v7);
      IMDCoreSpotlightDeleteCoreRecentsWithHandles(v9);
      if (v9)
        CFRelease(v9);
      CFRelease(v8);
    }
    CSDBRecordStoreRemoveRecord();
    ++v4;
  }
  while (v2 != v4);
LABEL_12:
  if (v0)
    CFRelease(v0);
  return CSDBRecordSaveStore();
}

void IMDChatRecordAssociateMessageWithGUIDToChatWithGUIDIfNeeded(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];
  uint8_t buf[4];
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_1ABB93E44;
    v5[3] = &unk_1E5AB2248;
    v5[4] = a2;
    v5[5] = a1;
    if (IMOSLoggingEnabled())
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        v7 = a2;
        v8 = 2112;
        v9 = a1;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_DEBUG, "IMDChatRecordAssociateMessageWithGUIDToChatWithGUIDIfNeeded [ChatGUID: %@] [MessageGUID: %@]", buf, 0x16u);
      }
    }
    _IMDPerformBlock((uint64_t)v5);
  }
  else
  {
    __syncXPCIMDChatRecordAssociateMessageWithGUIDToChatWithGUIDIfNeeded_IPCAction(0, a1, a2);
  }
}

void sub_1ABB93E44(uint64_t a1)
{
  CFStringRef v2;
  const __CFString *v3;
  const __CFString *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = IMDChatRecordCopyChatForGUIDUnlocked(*(CFStringRef *)(a1 + 32));
  v3 = IMDMessageRecordCopyMessageForGUIDUnlocked(*(const __CFString **)(a1 + 40));
  v4 = v3;
  if (v2)
  {
    if (v3)
    {
      IMDChatRecordAddMessageIfNeededUnlocked((uint64_t)v2, (uint64_t)v3);
      CFRelease(v2);
LABEL_12:
      CFRelease(v4);
      return;
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v9 = 138412290;
        v10 = v6;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Unable to associate message with chat, the chat is NULL (chat guid: %@)", (uint8_t *)&v9, 0xCu);
      }
    }
    if (v4)
      goto LABEL_12;
  }
  if (IMOSLoggingEnabled())
  {
    v7 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a1 + 40);
      v9 = 138412290;
      v10 = v8;
      _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Unable to associate message with chat, the message is NULL (message guid: %@)", (uint8_t *)&v9, 0xCu);
    }
  }
  v4 = v2;
  if (v2)
    goto LABEL_12;
}

void IMDChatRecordDisassociateMessageWithGUIDFromChatWithGUIDIfNeeded(const __CFString *a1, const __CFString *a2)
{
  NSObject *v4;
  CFStringRef v5;
  const __CFString *v6;
  const __CFString *v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  const __CFString *v11;
  __int16 v12;
  const __CFString *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v10 = 138412546;
      v11 = a2;
      v12 = 2112;
      v13 = a1;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_DEBUG, "IMDChatRecordDisassociateMessageWithGUIDFromChatWithGUIDIfNeeded [ChatGUID: %@] [MessageGUID: %@]", (uint8_t *)&v10, 0x16u);
    }
  }
  if (!IMDIsRunningInDatabaseServerProcess())
  {
    __syncXPCIMDChatRecordDisassociateMessageWithGUIDFromChatWithGUIDIfNeeded_IPCAction(0, (uint64_t)a1, (uint64_t)a2);
    return;
  }
  v5 = IMDChatRecordCopyChatForGUID(a2);
  v6 = IMDMessageRecordCopyMessageForGUID(a1);
  v7 = v6;
  if (v5)
  {
    if (v6)
    {
      IMDChatRecordRemoveMessage((uint64_t)v5, (uint64_t)v6);
      CFRelease(v5);
LABEL_13:
      CFRelease(v7);
      return;
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10) = 0;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "Unable to disassociate message from chat, the chat is NULL.", (uint8_t *)&v10, 2u);
      }
    }
    if (v7)
      goto LABEL_13;
  }
  if (IMOSLoggingEnabled())
  {
    v9 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "Unable to disassociate message from chat, the message is NULL.", (uint8_t *)&v10, 2u);
    }
  }
  if (v5)
    CFRelease(v5);
}

CFMutableArrayRef IMDChatRecordCopyChatGUIDsWithUnplayedAudioMessages()
{
  NSObject *v0;
  CFMutableArrayRef Mutable;
  void (*v3[5])(void);
  uint8_t buf[8];
  uint64_t v5;
  uint64_t v6;
  CFMutableArrayRef v7;
  CFMutableArrayRef v8;

  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      v0 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_DEBUG, "IMDChatRecordCopyChatGUIDsWithUnplayedAudioMessages", buf, 2u);
      }
    }
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v5 = 3221225472;
    v6 = (uint64_t)sub_1ABB96230;
    v7 = (CFMutableArrayRef)&unk_1E5AB2890;
    v8 = Mutable;
    _IMDPerformLockedDatabaseBlock((uint64_t)buf);
  }
  else
  {
    *(_QWORD *)buf = 0;
    v5 = (uint64_t)buf;
    v6 = 0x2020000000;
    v7 = 0;
    v7 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v3[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v3[1] = (void (*)(void))3221225472;
    v3[2] = (void (*)(void))sub_1ABB94358;
    v3[3] = (void (*)(void))&unk_1E5AAF630;
    v3[4] = (void (*)(void))buf;
    __syncXPCIMDChatRecordCopyChatGUIDsWithUnplayedAudioMessages_IPCAction(v3);
    Mutable = *(CFMutableArrayRef *)(v5 + 24);
    _Block_object_dispose(buf, 8);
  }
  return Mutable;
}

void sub_1ABB94358(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v4;
  size_t count;
  size_t v6;
  size_t i;
  const char *string;
  const void *v9;

  value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    v4 = value;
    count = xpc_array_get_count(value);
    if (count)
    {
      v6 = count;
      for (i = 0; i != v6; ++i)
      {
        string = xpc_array_get_string(v4, i);
        if (string)
        {
          v9 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", string);
          if (v9)
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v9);
        }
      }
    }
  }
}

void IMDChatRecordSetIsFiltered(const __CFString *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];
  _QWORD v8[6];

  if (IMDIsRunningInDatabaseServerProcess())
  {
    v4 = (uint64_t *)IMDChatRecordCopyChatForGUID(a1);
    v5 = IMDChatRecordCopyChatRecordUnlocked(v4[2]);
    if (v4 && v5)
    {
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = sub_1ABB94508;
      v8[3] = &unk_1E5AB2248;
      v8[4] = v5;
      v8[5] = a2;
      _IMDPerformBlock((uint64_t)v8);
    }
    else if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Unable to update filter flag, the chat record is NULL.", v7, 2u);
      }
    }
    CFRelease(v4);
  }
  else
  {
    __syncXPCIMDChatRecordSetIsFiltered_IPCAction(0, (uint64_t)a1);
  }
}

void sub_1ABB94508(uint64_t a1)
{
  _IMDChatRecordSetProperty();
  IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(*(const void **)(a1 + 32));
}

void IMDChatRecordDeleteEmptyChats()
{
  if (IMDIsRunningInDatabaseServerProcess())
    IMDRunSqlOperation((uint64_t)&unk_1E5AAF008);
  else
    __syncXPCIMDChatRecordDeleteEmptyChats_IPCAction(0);
}

void sub_1ABB94564(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Deleting all empty chats.", (uint8_t *)&v7, 2u);
    }
  }
  _IMDSqlOperationRunQuery(a2, CFSTR("DELETE FROM chat WHERE ((SELECT COUNT(*) FROM chat_message_join WHERE chat_id = chat.ROWID) == 0 AND (SELECT COUNT(*) FROM chat_recoverable_message_join WHERE chat_id = chat.ROWID) == 0);"),
    (uint64_t)&unk_1E5AAF448,
    0);
  if (*(_QWORD *)(a2 + 168))
  {
    if (IMOSLoggingEnabled())
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a2 + 168);
        v7 = 138412290;
        v8 = v5;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Error occured while deleting empty chats %@", (uint8_t *)&v7, 0xCu);
      }
    }
  }
  if (IMOSLoggingEnabled())
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Finished deleting all empty chats.", (uint8_t *)&v7, 2u);
    }
  }
}

void IMDChatInsertIntoDeletedChatsTable(void *a1, void *a2, sqlite3_int64 a3)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t v10[4];
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  sqlite3_int64 v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[32];
  _OWORD v19[9];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = a3;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Request to insert guid %@ recordID %@ timeStamp %lld", buf, 0x20u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v19, 0, sizeof(v19));
    memset(buf, 0, sizeof(buf));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    _IMDSqlOperationBeginQuery((uint64_t)buf, CFSTR("INSERT INTO sync_deleted_chats (guid, recordID, timestamp) VALUES (?, ?, ?);"));
    IMDSqlStatementBindTextFromCFString((uint64_t)v19, (uint64_t)a1);
    IMDSqlStatementBindTextFromCFString((uint64_t)v19, (uint64_t)a2);
    IMDSqlStatementBindInt64((uint64_t)v19, a3);
    IMDSqlOperationFinishQuery((uint64_t)buf);
    v9 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v9);
    if (v9)
    {
      v7 = IMLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v10 = 138413058;
        v11 = a1;
        v12 = 2112;
        v13 = a2;
        v14 = 2048;
        v15 = a3;
        v16 = 2112;
        v17 = v9;
        _os_log_error_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_ERROR, "Unable to insert row (guid:%@ recordID: %@ timeStamp:%ld, error %@) into sync_deleted_chats Table", v10, 0x2Au);
      }
    }
  }
  else
  {
    __syncXPCInsertIntoDeletedChatsTable_IPCAction(0, a1, a2, a3);
    if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = a2;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = a3;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "Returned from IMDP after inserting in synd deleted table guid %@ recordID %@ timeStamp %lld", buf, 0x20u);
      }
    }
  }
}

uint64_t IMDChatCopyChatRecordIDsAndGUIDsToDeleteWithLimit(int64_t a1)
{
  NSObject *v2;
  __CFDictionary *Row;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void (*v9[5])(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;
  uint8_t buf[16];
  __int128 v18;
  _OWORD v19[9];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a1;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Request to load deleted chat recordIDs with limit %lld", buf, 0xCu);
    }
  }
  v11 = 0;
  v12 = &v11;
  v13 = 0x3052000000;
  v14 = sub_1ABB90800;
  v15 = sub_1ABB90810;
  v16 = 0;
  v16 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v18 = 0u;
    memset(v19, 0, sizeof(v19));
    *(_OWORD *)buf = 0u;
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    _IMDSqlOperationBeginQuery((uint64_t)buf, CFSTR("select guid, recordID, timestamp from sync_deleted_chats where LENGTH(recordID) > 0;"));
    while (IMDSqlOperationHasRows((uint64_t)buf))
    {
      Row = IMDSqlStatementGetRow((sqlite3_stmt **)v19);
      if (Row)
        objc_msgSend((id)v12[5], "addObject:", Row);

    }
    IMDSqlOperationFinishQuery((uint64_t)buf);
    v10 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v10);
    if (v10)
    {
      v6 = IMLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1ABC586C4();
    }
  }
  else
  {
    v9[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v9[1] = (void (*)(void))3221225472;
    v9[2] = (void (*)(void))sub_1ABB94C88;
    v9[3] = (void (*)(void))&unk_1E5AAF630;
    v9[4] = (void (*)(void))&v11;
    __syncXPCIMDChatRecordCopyChatRecordIDsAndGUIDsToDeleteFromCloudKitWithLimit_IPCAction(v9, a1);
    if (IMOSLoggingEnabled())
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = objc_msgSend((id)v12[5], "count");
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v5;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Returned from DB call after loading messages to delete messages count %lu", buf, 0xCu);
      }
    }
  }
  v7 = v12[5];
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1ABB94C18(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1ABB94BD0);
  }
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(exc_buf);
}

xpc_object_t sub_1ABB94C88(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABB94D00;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABB94D00(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", xpc_dictionary_get_string(xdict, "guid"), 4);
  v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", xpc_dictionary_get_string(xdict, "recordID"), 4);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v5, CFSTR("guid"), v6, CFSTR("recordID"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", xpc_dictionary_get_int64(xdict, "timeStamp")), CFSTR("timeStamp"), 0));
  return 1;
}

void IMDChatClearPendingDeleteChatsTable()
{
  NSObject *v0;
  NSObject *v1;
  _OWORD v2[11];

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      LOWORD(v2[0]) = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "Request to clear pending deletes from chat table", (uint8_t *)v2, 2u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v2, 0, sizeof(v2));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v2);
    IMDSqlOperationExecuteQuery((uint64_t)v2, CFSTR("delete from sync_deleted_chats;"), (uint64_t)&unk_1E5AB2348);
    IMDSqlOperationRelease((uint64_t)v2, 0);
  }
  else
  {
    __syncXPCIMDChatClearPendingDeleteChatsTable_IPCAction(0);
    if (IMOSLoggingEnabled())
    {
      v1 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        LOWORD(v2[0]) = 0;
        _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_INFO, "Returned from DB call after marking clearing all pending delete chats", (uint8_t *)v2, 2u);
      }
    }
  }
}

void sub_1ABB94F34()
{
  NSObject *v0;
  uint8_t v1[16];

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "IMDChatClearPendingDeleteChatsTable cleared pending delete chat table", v1, 2u);
    }
  }
}

void IMDChatRemapMessagesWithErrorCodeToErrorCode(void *a1, sqlite3_int64 a2, sqlite3_int64 a3)
{
  NSObject *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  CFStringRef v11;
  CFStringRef v12;
  int v13;
  int v14;
  __CFString *Mutable;
  __CFString *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint8_t buf[32];
  _BYTE v37[152];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a3;
      *(_WORD *)&buf[22] = 2112;
      *(_QWORD *)&buf[24] = a1;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Request to reset messages with error %lld to error %lld on chatGUIDS %@", buf, 0x20u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v8 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v31, v38, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v32;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v32 != v9)
            objc_enumerationMutation(a1);
          v11 = IMDChatRecordCopyChatForGUID(*(CFStringRef *)(*((_QWORD *)&v31 + 1) + 8 * i));
          v12 = v11;
          if (v11)
          {
            objc_msgSend(v7, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v11->data));
            CFRelease(v12);
          }
        }
        v8 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v31, v38, 16);
      }
      while (v8);
    }
    v13 = objc_msgSend(v7, "count");
    v14 = v13;
    if (v13)
    {
      if (v13 >= 2)
      {
        Mutable = CFStringCreateMutable(0, 0);
        v16 = Mutable;
        if (Mutable)
        {
          CFStringAppend(Mutable, CFSTR("UPDATE message SET error=? WHERE rowid IN (SELECT message_id FROM chat_message_join WHERE chat_id IN (?"));
          v17 = v14 - 1;
          do
          {
            CFStringAppend(v16, CFSTR(", ?"));
            --v17;
          }
          while (v17);
          CFStringAppend(v16, CFSTR(")) AND error=?"));
        }
        else
        {
          v25 = IMLogHandleForCategory();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            sub_1ABC58860();
          v16 = 0;
        }
        goto LABEL_26;
      }
    }
    else
    {
      v19 = IMLogHandleForCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        sub_1ABC58784(v19);
    }
    CFRetain(CFSTR("UPDATE message SET error=? WHERE rowid IN (SELECT message_id FROM chat_message_join WHERE chat_id IN (?)) AND error=?"));
    v16 = CFSTR("UPDATE message SET error=? WHERE rowid IN (SELECT message_id FROM chat_message_join WHERE chat_id IN (?)) AND error=?");
LABEL_26:
    if (IMOSLoggingEnabled())
    {
      v20 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v16;
        _os_log_impl(&dword_1ABB60000, v20, OS_LOG_TYPE_INFO, "GetMessageDateAndLastAddressedHandle: running with query %@", buf, 0xCu);
      }
    }
    memset(v37, 0, 144);
    memset(buf, 0, sizeof(buf));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    _IMDSqlOperationBeginQuery((uint64_t)buf, v16);
    IMDSqlStatementBindInt64((uint64_t)v37, a3);
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v21 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    if (v21)
    {
      v22 = *(_QWORD *)v28;
      do
      {
        for (j = 0; j != v21; ++j)
        {
          if (*(_QWORD *)v28 != v22)
            objc_enumerationMutation(v7);
          IMDSqlStatementBindInt64((uint64_t)v37, objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * j), "integerValue"));
        }
        v21 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
      }
      while (v21);
    }

    IMDSqlStatementBindInt64((uint64_t)v37, a2);
    IMDSqlOperationFinishQuery((uint64_t)buf);
    v26 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v26);
    if (v16)
      CFRelease(v16);
    if (v26)
    {
      v24 = IMLogHandleForCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        sub_1ABC58724();
    }
    return;
  }
  __syncXPCIMDChatRemapMessagesWithErrorCodeToErrorCode_IPCAction(0, (uint64_t)a1, a2, a3);
  if (IMOSLoggingEnabled())
  {
    v18 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v18, OS_LOG_TYPE_INFO, "Returned from DB call after marking clearing all pending delete chats", buf, 2u);
    }
  }
}

void sub_1ABB95478(const __CFArray *a1)
{
  int Count;
  CFIndex v3;
  uint64_t v4;
  const void *ValueAtIndex;
  void *v6;
  void *v7;
  BOOL v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  uint32_t v13;
  NSObject *v14;
  NSObject *v15;
  _BOOL4 v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t buf[4];
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v3 = 0;
    if (Count <= 1uLL)
      v4 = 1;
    else
      v4 = Count;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v3);
      v42 = 0;
      v43 = 0;
      v40 = 0;
      v41 = 0;
      v38 = 0;
      v39 = 0;
      v36 = 0;
      v37 = 0;
      v35 = 0;
      v33 = 0;
      v34 = 0;
      v32 = 0;
      v31 = 0;
      v30 = 0;
      v29 = 0;
      v27 = 0;
      v28 = 0;
      v25 = 0;
      v26 = 0;
      v23 = 0;
      v24 = 0;
      v22 = 0;
      _IMDAttachmentRecordBulkCopy((uint64_t)ValueAtIndex, &v43, &v42, &v41, &v40, &v39, &v38, &v37, &v36, &v35, &v34, &v33, &v32, &v31, &v30, &v29, &v28, &v27, &v26,
        &v25,
        &v24,
        &v23,
        &v22);
      if (v39)
      {
        v21 = 0;
        v6 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        if (objc_msgSend(v6, "fileExistsAtPath:", v39))
        {
          v7 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
          objc_msgSend(v7, "removeItemAtPath:error:", v39, &v21);
          v8 = v21 == 0;
          v9 = IMOSLoggingEnabled();
          if (v8)
          {
            if (v9)
            {
              v15 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                v45 = v39;
                v11 = v15;
                v12 = "Removed attachment at path: %@";
LABEL_17:
                v13 = 12;
LABEL_18:
                _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, v12, buf, v13);
              }
            }
          }
          else if (v9)
          {
            v10 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              v45 = v39;
              v46 = 2112;
              v47 = v21;
              v11 = v10;
              v12 = "deleting attachment failed at path: %@: %@";
              v13 = 22;
              goto LABEL_18;
            }
          }
        }
        else if (IMOSLoggingEnabled())
        {
          v14 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v45 = v39;
            v11 = v14;
            v12 = "No attachment to remove at path: %@";
            goto LABEL_17;
          }
        }
      }
      v17 = v28 != 1 || v36 != 0;
      v18 = IMOSLoggingEnabled();
      if (v17)
      {
        if (v18)
        {
          v19 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v45 = v43;
            _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Resetting downloadState for attachment guid: %@", buf, 0xCu);
          }
        }
        IMDAttachmentRecordBulkUpdate((uint64_t)ValueAtIndex, v43, v42, v41, v40, v39, v38, v37, 0, v35, v34, v33, v32, v31, v30, v29, 1, v27, v26,
          v25,
          v24,
          v23,
          v22);
      }
      else if (v18)
      {
        v20 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v45 = v43;
          _os_log_impl(&dword_1ABB60000, v20, OS_LOG_TYPE_INFO, "Attachment already marked as needing download for guid: %@", buf, 0xCu);
        }
      }
      ++v3;
    }
    while (v4 != v3);
  }
}

void IMDChatRecordPurgeAttachments(const __CFString *a1)
{
  NSObject *v2;
  void *v3;
  CFStringRef v4;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  NSObject *v8;
  CFIndex v9;
  CFIndex v10;
  uint64_t v11;
  const void *ValueAtIndex;
  uint64_t v13;
  const void *v14;
  const __CFArray *v15;
  const __CFArray *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  CFStringRef cf;
  uint8_t buf[4];
  CFIndex v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v32 = (CFIndex)a1;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Purging attachment files for chat guid: %@", buf, 0xCu);
    }
  }
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = IMDChatRecordCopyChatForGUID(a1);
  cf = v4;
  if (v4)
  {
    v5 = (const __CFArray *)IMDChatRecordCopyMessagesWithLimit((uint64_t)v4, -1);
    v6 = v5;
    if (v5)
    {
      Count = CFArrayGetCount(v5);
      v29 = (int)Count;
      if (IMOSLoggingEnabled())
      {
        v8 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v32 = (int)Count;
          _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "Found %ld messages for chat", buf, 0xCu);
        }
      }
      if (Count << 32 >= 1)
      {
        v9 = 0;
        v10 = 0;
        if (v29 <= 1)
          v11 = 1;
        else
          v11 = v29;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v6, v10);
          v13 = (uint64_t)ValueAtIndex;
          if (!ValueAtIndex)
          {
            if (IMOSLoggingEnabled())
            {
              v19 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 134217984;
                v32 = v10;
                _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Failed to load message at index: %ld", buf, 0xCu);
              }
            }
            goto LABEL_28;
          }
          v14 = (const void *)IMDMessageRecordCopyGUIDForMessage((uint64_t)ValueAtIndex);
          objc_msgSend(v3, "addObject:", v14);
          v15 = (const __CFArray *)IMDMessageRecordCopyAttachments(v13);
          v16 = v15;
          if (v15)
          {
            v17 = CFArrayGetCount(v15);
            if (IMOSLoggingEnabled())
            {
              v18 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 134218242;
                v32 = v17;
                v33 = 2112;
                v34 = (uint64_t)v14;
                _os_log_impl(&dword_1ABB60000, v18, OS_LOG_TYPE_INFO, "Found %ld attachments for message: %@", buf, 0x16u);
              }
            }
            sub_1ABB95478(v16);
            CFRelease(v16);
            v9 += v17;
            if (!v14)
              goto LABEL_28;
          }
          else
          {
            if (IMOSLoggingEnabled())
            {
              v20 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                v32 = (CFIndex)v14;
                _os_log_impl(&dword_1ABB60000, v20, OS_LOG_TYPE_INFO, "Failed to load attachments for message: %@", buf, 0xCu);
              }
            }
            if (!v14)
              goto LABEL_28;
          }
          CFRelease(v14);
LABEL_28:
          if (v11 == ++v10)
            goto LABEL_38;
        }
      }
      v9 = 0;
LABEL_38:
      CFRelease(v6);
      if (!IMOSLoggingEnabled())
        goto LABEL_42;
      v26 = OSLogHandleForIMFoundationCategory();
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        goto LABEL_42;
      *(_DWORD *)buf = 134218240;
      v32 = v9;
      v33 = 2048;
      v34 = v29;
      v23 = "Updated %lld attachments on %ld messages";
      v24 = v26;
      v25 = 22;
    }
    else
    {
      if (!IMOSLoggingEnabled())
        goto LABEL_42;
      v22 = OSLogHandleForIMFoundationCategory();
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        goto LABEL_42;
      *(_DWORD *)buf = 138412290;
      v32 = (CFIndex)a1;
      v23 = "No messages load for chat: %@";
      v24 = v22;
      v25 = 12;
    }
    _os_log_impl(&dword_1ABB60000, v24, OS_LOG_TYPE_INFO, v23, buf, v25);
LABEL_42:
    CFRelease(cf);
    goto LABEL_43;
  }
  if (IMOSLoggingEnabled())
  {
    v21 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v32 = (CFIndex)a1;
      _os_log_impl(&dword_1ABB60000, v21, OS_LOG_TYPE_INFO, "Chat record not loaded for chat: %@", buf, 0xCu);
      if (!v3)
        return;
      goto LABEL_44;
    }
  }
LABEL_43:
  if (!v3)
    return;
LABEL_44:
  if (IMOSLoggingEnabled())
  {
    v27 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      v28 = objc_msgSend(v3, "count");
      *(_DWORD *)buf = 134217984;
      v32 = v28;
      _os_log_impl(&dword_1ABB60000, v27, OS_LOG_TYPE_INFO, "Reindexing %ld messages", buf, 0xCu);
    }
  }
  IMDCoreSpotlightReindexMessages(v3, 1007, 0);
}

void sub_1ABB95E0C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABB95D54);
  }
  _Unwind_Resume(a1);
}

void sub_1ABB95E80(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  const __CFArray *v8;
  NSObject *v9;
  CFIndex Count;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint8_t buf[4];
  CFIndex v16;
  _BYTE v17[128];
  uint64_t v18;

  v2 = 0;
  v18 = *MEMORY[0x1E0C80C00];
  do
  {
    CSDBSqliteBindInt64();
    CSDBSqliteBindInt64();
    ++v2;
  }
  while (v2 != 5);
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = *(void **)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v3);
        if ((unint64_t)objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * i), "filterMode") >= 0x10)
        {
          CSDBSqliteBindInt64();
          CSDBSqliteBindInt64();
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
    }
    while (v4);
  }
  v7 = (void *)CSDBRecordStoreProcessStatement();
  v8 = (const __CFArray *)_IMDChatRecordCopyChatsFromRecords(v7);
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v8);
    if (IMOSLoggingEnabled())
    {
      v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        Count = CFArrayGetCount(v8);
        *(_DWORD *)buf = 134217984;
        v16 = Count;
        _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "Found %llu recent chats for filter modes", buf, 0xCu);
      }
    }
  }
  if (v7)
    CFRelease(v7);
  if (v8)
    CFRelease(v8);
}

void sub_1ABB960AC(uint64_t a1)
{
  void *v2;
  const __CFArray *v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  CFIndex Count;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (void *)CSDBRecordStoreProcessStatement();
  v3 = (const __CFArray *)_IMDChatRecordCopyChatsFromRecords(v2);
  if (!v3)
  {
    if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        LOWORD(v6) = 0;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "No chats found with unread messages.", (uint8_t *)&v6, 2u);
      }
    }
LABEL_9:
    if (!v2)
      goto LABEL_11;
    goto LABEL_10;
  }
  objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v3);
  if (!IMOSLoggingEnabled())
    goto LABEL_9;
  v4 = OSLogHandleForIMFoundationCategory();
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    goto LABEL_9;
  v6 = 134217984;
  Count = CFArrayGetCount(v3);
  _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Found %llu chats with unread messages.", (uint8_t *)&v6, 0xCu);
  if (v2)
LABEL_10:
    CFRelease(v2);
LABEL_11:
  if (v3)
    CFRelease(v3);
}

void sub_1ABB9620C(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    if (!v2)
      JUMPOUT(0x1ABB961D0);
    JUMPOUT(0x1ABB961C8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB96230(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  sqlite3_stmt *v4;
  const __CFAllocator *v5;
  const unsigned __int8 *v6;
  CFStringRef v7;
  CFStringRef v8;

  if (CSDBSqliteDatabaseConnectionForReading())
  {
    v2 = CSDBSqliteConnectionStatementForSQL();
    if (v2)
    {
      v3 = v2;
      v4 = *(sqlite3_stmt **)(v2 + 8);
      if (v4)
      {
        if (sqlite3_step(v4) == 100)
        {
          v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          do
          {
            if (sqlite3_column_text(*(sqlite3_stmt **)(v3 + 8), 0))
            {
              v6 = sqlite3_column_text(*(sqlite3_stmt **)(v3 + 8), 0);
              v7 = CFStringCreateWithCString(v5, (const char *)v6, 0x8000100u);
              if (v7)
              {
                v8 = v7;
                CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v7);
                CFRelease(v8);
              }
            }
          }
          while (sqlite3_step(*(sqlite3_stmt **)(v3 + 8)) == 100);
        }
        CSDBSqliteStatementReset();
      }
    }
    CSDBSqliteDatabaseReleaseSqliteConnection();
  }
  CFRelease(CFSTR("SELECT DISTINCT  c.guid FROM   chat c INNER JOIN chat_message_join cm ON   c.ROWID = cm.chat_id INNER JOIN message m ON   m.ROWID = cm.message_id WHERE   m.is_from_me = 0   AND m.is_played = 0   AND m.is_audio_message = 1   AND c.style = 45 "));
  CSDBRecordSaveStore();
  return CSDBRecordStoreInvalidateCachesWithStore();
}

void sub_1ABB96334(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1ABB96684(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABB9663CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1ABB96A84(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABB969DCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1ABB96AD0(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  int8x16_t v11;
  _QWORD block[4];
  int8x16_t v13;
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (a2)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = objc_msgSend(*(id *)(a1 + 32), "count");
        *(_DWORD *)buf = 134217984;
        v15 = v7;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Successfully donated %llu interactions", buf, 0xCu);
      }

    }
  }
  else
  {
    IMLogHandleForCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1ABC5897C(a1, (uint64_t)v5, v8);

  }
  objc_msgSend(*(id *)(a1 + 40), "queue");
  v9 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1ABB96C70;
  block[3] = &unk_1E5AAF5B8;
  v11 = *(int8x16_t *)(a1 + 32);
  v10 = (id)v11.i64[0];
  v13 = vextq_s8(v11, v11, 8uLL);
  dispatch_async(v9, block);

}

uint64_t sub_1ABB96C70(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__finishedDonatingItems_);
}

uint64_t sub_1ABB96D14(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_donateItems:", *(_QWORD *)(a1 + 40));
}

void sub_1ABB97524(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB97564(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Beginning iteration of _IMDCleanseOrphanedAttachmentsWithEnumerator attachments", v4, 2u);
    }
  }
  return objc_msgSend(objc_loadWeak((id *)(a1 + 48)), "_cleanseOrphanedAttachmentsWithEnumerator:atPath:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1ABB978C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[5];
  _QWORD v5[6];

  v5[5] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0D38070];
  v4[0] = CFSTR("rowID");
  v4[1] = v0;
  v5[0] = CFSTR("ROWID");
  v5[1] = CFSTR("id");
  v1 = *MEMORY[0x1E0D38078];
  v4[2] = *MEMORY[0x1E0D38088];
  v4[3] = v1;
  v5[2] = CFSTR("uncanonicalized_id");
  v5[3] = CFSTR("country");
  v4[4] = *MEMORY[0x1E0D38080];
  v5[4] = CFSTR("service");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, v4, 5);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED0D3788;
  qword_1ED0D3788 = v2;

}

void sub_1ABB979F0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Messages", "IMDCustomPluginNotificationContext");
  v1 = (void *)qword_1EEC403E0;
  qword_1EEC403E0 = (uint64_t)v0;

}

id sub_1ABB97EAC()
{
  id v0;
  uint64_t v1;
  const __CFString *v2;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1 = 0;
  v2 = CFSTR("chat_message_join");
  do
  {
    objc_msgSend(v0, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("CREATE TABLE IF NOT EXISTS %@ (%@);"),
        v2,
        off_1E5AB29C8[v1 + 1]),
      v2);
    v2 = off_1E5AB29C8[v1 + 2];
    v1 += 2;
  }
  while (v1 != 28);
  return v0;
}

uint64_t IMDSelectAllTableNames(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  uint64_t v10;

  v5 = 0;
  v6 = &v5;
  v7 = 0x3052000000;
  v8 = sub_1ABB98018;
  v9 = sub_1ABB98028;
  v10 = 0;
  v10 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1ABB98034;
  v4[3] = &unk_1E5AB22C0;
  v4[4] = &v5;
  v4[5] = a1;
  IMDRunSqlOperation((uint64_t)v4);
  v2 = v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1ABB98000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB98018(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1ABB98028(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1ABB98034(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABB980C8;
  v5[3] = &unk_1E5AB2298;
  v5[4] = *(_QWORD *)(a1 + 32);
  v5[5] = a2;
  _IMDSqlOperationRunQuery(a2, CFSTR("select name from sqlite_master where type = 'table'"), 0, (uint64_t)v5);
  result = IMDSqlOperationGetError(a2, *(_QWORD **)(a1 + 40));
  if ((_DWORD)result)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = 0;
  return result;
}

BOOL sub_1ABB980C8(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      v5[2] = sub_1ABB98150;
      v5[3] = &unk_1E5AB2AC0;
      v4 = *(_QWORD *)(a1 + 40);
      v5[4] = *(_QWORD *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1ABB98150(uint64_t a1, __int128 *a2)
{
  const unsigned __int8 *v3;
  __int128 v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *((_QWORD *)a2 + 2);
  v3 = IMDStringFromSqlColumn((uint64_t)&v4);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v3);
  CFRelease(v3);
}

uint64_t IMDRowCountForTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  NSObject *v6;
  CFStringRef v7;
  uint64_t v8;
  _QWORD v10[7];
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v11 = xmmword_1E5AB2AE0;
    v12 = *(_OWORD *)off_1E5AB2AF0;
    v13 = 98;
    v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("tableName"), "int64_t IMDRowCountForTable(NSString *, NSError **)", IMFileLocationTrimFileName(), 98, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v15 = v4;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  *(_QWORD *)&v11 = 0;
  *((_QWORD *)&v11 + 1) = &v11;
  *(_QWORD *)&v12 = 0x2020000000;
  *((_QWORD *)&v12 + 1) = -1;
  v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("select count(*) from %@"), a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1ABB983CC;
  v10[3] = &unk_1E5AB2B10;
  v10[4] = &v11;
  v10[5] = v7;
  v10[6] = a2;
  IMDRunSqlOperation((uint64_t)v10);
  CFRelease(v7);
  v8 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 24);
  _Block_object_dispose(&v11, 8);
  return v8;
}

uint64_t sub_1ABB983CC(uint64_t a1, uint64_t a2)
{
  const __CFString *v4;
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABB98448;
  v6[3] = &unk_1E5AB2298;
  v4 = *(const __CFString **)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 32);
  v6[5] = a2;
  _IMDSqlOperationRunQuery(a2, v4, 0, (uint64_t)v6);
  return IMDSqlOperationGetError(a2, *(_QWORD **)(a1 + 48));
}

BOOL sub_1ABB98448(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];

  for (result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40)); result; result = IMDSqlOperationHasRows(v4))
  {
    IMDSqlStatementColumnByIndex((sqlite3_stmt **)(*(_QWORD *)(a1 + 40) + 32), 0, (uint64_t)v5);
    v3 = (int)IMDIntFromSqlColumn((uint64_t)v5);
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  }
  return result;
}

void sub_1ABB984AC(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  void (*v4)(uint64_t);
  NSObject *v5;
  NSObject *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (!*(_QWORD *)(a1 + 8))
    {
      v1 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("c"), "void IMDCreateLegacyTables(IMDSqlOperation *)", IMFileLocationTrimFileName(), 132, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
      v2 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
      if (v2)
      {
        v2(v1);
      }
      else if (IMOSLoggingEnabled())
      {
        v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v8 = v1;
          _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }
      }
    }
    CSDBRecordStoreCreateTablesForClass();
    CSDBRecordStoreCreateTablesForClass();
    CSDBRecordStoreCreateTablesForClass();
  }
  else
  {
    v3 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("operation"), "void IMDCreateLegacyTables(IMDSqlOperation *)", IMFileLocationTrimFileName(), 125, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v4 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v4)
    {
      v4(v3);
    }
    else if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v8 = v3;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
}

BOOL IMDCreateTablesWithOperation(uint64_t a1, int a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v13;
  void (*v14)(uint64_t);
  NSObject *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t v20[128];
  uint8_t v21[4];
  uint64_t v22;
  uint8_t buf[16];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = sub_1ABB97EAC();
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v17;
      while (2)
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v17 != v6)
            objc_enumerationMutation(v4);
          v8 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i);
          _IMDSqlOperationRunQuery(a1, (CFStringRef)objc_msgSend(v4, "objectForKey:", v8), 0, 0);
          if (*(_QWORD *)(a1 + 168))
          {
            v10 = IMLogHandleForCategory();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
              sub_1ABC58AE8(v8, a1);
            goto LABEL_16;
          }
          if (a2)
          {
            v9 = IMLogHandleForCategory();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v8;
              _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "Created table (if needed) ok: %@", buf, 0xCu);
            }
          }
        }
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        if (v5)
          continue;
        break;
      }
    }
LABEL_16:
    v11 = *(_QWORD *)(a1 + 168);
    if (!v11)
    {
      sub_1ABB984AC(a1);
      v11 = *(_QWORD *)(a1 + 168);
    }
    return v11 == 0;
  }
  else
  {
    *(_OWORD *)buf = xmmword_1E5AB2D60;
    v24 = *(_OWORD *)off_1E5AB2D70;
    v25 = 142;
    v13 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("operation"), "BOOL IMDCreateTablesWithOperation(IMDSqlOperation *, BOOL)", IMFileLocationTrimFileName(), 142, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v14 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v14)
    {
      v14(v13);
    }
    else if (IMOSLoggingEnabled())
    {
      v15 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v21 = 138412290;
        v22 = v13;
        _os_log_impl(&dword_1ABB60000, v15, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", v21, 0xCu);
      }
    }
    return 0;
  }
}

BOOL IMDDropTableWithOperation(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  void (*v7)(uint64_t);
  NSObject *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  NSObject *v11;
  NSObject *v12;
  NSObject *v14;
  uint8_t buf[4];
  uint64_t v16;
  uint8_t v17[16];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    *(_OWORD *)v17 = xmmword_1E5AB2D88;
    v18 = *(_OWORD *)off_1E5AB2D98;
    v19 = 169;
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("operation"), "BOOL IMDDropTableWithOperation(IMDSqlOperation *, NSString *, BOOL)", IMFileLocationTrimFileName(), 169, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v16 = v6;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (!a2)
  {
    *(_OWORD *)v17 = xmmword_1E5AB2DB0;
    v18 = *(_OWORD *)off_1E5AB2DC0;
    v19 = 170;
    v9 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("tableName"), "BOOL IMDDropTableWithOperation(IMDSqlOperation *, NSString *, BOOL)", IMFileLocationTrimFileName(), 170, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v10 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v10)
    {
      v10(v9);
    }
    else if (IMOSLoggingEnabled())
    {
      v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v16 = v9;
        _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (!a1)
    return 0;
  _IMDSqlOperationRunQuery(a1, (CFStringRef)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("DROP TABLE IF EXISTS %@;"), a2),
    0,
    0);
  if (*(_QWORD *)(a1 + 168))
  {
    v12 = IMLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_1ABC58B60(a2, a1);
  }
  else if (a3)
  {
    v14 = IMLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v17 = 138412290;
      *(_QWORD *)&v17[4] = a2;
      _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "Dropped table (if needed) ok: %@", v17, 0xCu);
    }
  }
  return *(_QWORD *)(a1 + 168) == 0;
}

BOOL IMDDropUnknownTablesWithOperation(uint64_t a1, int a2)
{
  return IMDDropTableWithOperation(a1, (uint64_t)CFSTR("sqlite_stat1"), a2);
}

uint64_t IMDDatabaseContainsTable(uint64_t a1, uint64_t a2)
{
  return objc_msgSend((id)IMDSelectAllTableNames(a2), "containsObject:", a1);
}

void *sub_1ABB98D90(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)objc_msgSend((id)objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("IF NOT EXISTS"), &stru_1E5AC1D70), "stringByReplacingOccurrencesOfString:withString:", CFSTR(";"),
                 &stru_1E5AC1D70);
  objc_msgSend(v1, "rangeOfString:", CFSTR(" "));
  if (v2)
  {
    do
    {
      v1 = (void *)objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), &stru_1E5AC1D70);
      objc_msgSend(v1, "rangeOfString:", CFSTR(" "));
    }
    while (v3);
  }
  return v1;
}

uint64_t IMDConfirmTablesCreatedAsExpected(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[6];
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_1ABB99018;
  v16[3] = &unk_1E5AB2E08;
  v16[4] = v2;
  v16[5] = a1;
  IMDRunSqlOperation((uint64_t)v16);
  v3 = sub_1ABB97EAC();
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * i);
        v9 = sub_1ABB98D90((void *)objc_msgSend(v3, "objectForKey:", v8));
        if ((objc_msgSend(v9, "isEqualToString:", sub_1ABB98D90((void *)objc_msgSend(v2, "objectForKey:", v8))) & 1) == 0)
        {
          NSLog(CFSTR("Expected: %@"), objc_msgSend(v3, "objectForKey:", v8));
          NSLog(CFSTR("  Actual: %@"), objc_msgSend(v2, "objectForKey:", v8));
          v10 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL IMDConfirmTablesCreatedAsExpected(NSError **)"), CFSTR("IMDTables.m"), 282, CFSTR("index check failed"));
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
    }
    while (v5);
  }
  return 1;
}

uint64_t sub_1ABB99018(uint64_t a1, uint64_t a2)
{
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABB9909C;
  v5[3] = &unk_1E5AB2098;
  v5[4] = *(_QWORD *)(a1 + 32);
  v5[5] = a2;
  _IMDSqlOperationRunQuery(a2, CFSTR("SELECT name, sql FROM sqlite_master WHERE type = 'table';"), 0, (uint64_t)v5);
  return IMDSqlOperationGetError(a2, *(_QWORD **)(a1 + 40));
}

BOOL sub_1ABB9909C(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  uint64_t v17;

  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v12 = 0;
      v13 = &v12;
      v14 = 0x3052000000;
      v15 = sub_1ABB98018;
      v16 = sub_1ABB98028;
      v17 = 0;
      v6 = 0;
      v7 = &v6;
      v8 = 0x3052000000;
      v9 = sub_1ABB98018;
      v10 = sub_1ABB98028;
      v11 = 0;
      v4 = *(_QWORD *)(a1 + 40);
      v5[0] = v3;
      v5[1] = 3221225472;
      v5[2] = sub_1ABB991C8;
      v5[3] = &unk_1E5AB2DE0;
      v5[4] = &v12;
      v5[5] = &v6;
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v7[5], v13[5]);
      _Block_object_dispose(&v6, 8);
      _Block_object_dispose(&v12, 8);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1ABB991A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB991C8(uint64_t a1, __int128 *a2)
{
  const unsigned __int8 *v4;
  const char *v5;
  CFTypeRef v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v8 = *a2;
  v9 = *((_QWORD *)a2 + 2);
  v4 = IMDStringFromSqlColumn((uint64_t)&v8);
  v5 = (const char *)*((_QWORD *)a2 + 1);
  if (!v5)
  {
    v5 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *((_DWORD *)a2 + 4));
    *((_QWORD *)a2 + 1) = v5;
  }
  if (!strncmp(v5, "name", 0x100uLL))
  {
    v6 = CFRetain(v4);
    v7 = *(_QWORD *)(a1 + 32);
    goto LABEL_9;
  }
  if (!v5)
  {
    v5 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *((_DWORD *)a2 + 4));
    *((_QWORD *)a2 + 1) = v5;
  }
  if (!strncmp(v5, "sql", 0x100uLL))
  {
    v6 = CFRetain(v4);
    v7 = *(_QWORD *)(a1 + 40);
LABEL_9:
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 40) = v6;
  }
  CFRelease(v4);
}

void sub_1ABB992AC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

__CFString *IMDChatRecordCopyChatsWithHandlesOnServiceWithDisplayNameGroupIDStyleQuery(uint64_t a1, char a2, char a3, int a4, int a5)
{
  __CFString *Mutable;
  uint64_t v11;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppend(Mutable, (CFStringRef)+[IMDChatQueryStrings selectAllColumns](IMDChatQueryStrings, "selectAllColumns"));
  CFStringAppend(Mutable, CFSTR(" c WHERE(c.ROWID IN("));
  if (a1 >= 1)
  {
    v11 = 0;
    do
    {
      CFStringAppend(Mutable, CFSTR("SELECT chat_id FROM chat_handle_join WHERE handle_id IN (SELECT ROWID FROM handle WHERE id = ?)"));
      if (v11 < a1 - 1)
        CFStringAppend(Mutable, CFSTR(" INTERSECT "));
      ++v11;
    }
    while (a1 != v11);
  }
  CFStringAppend(Mutable, CFSTR(")"));
  CFStringAppend(Mutable, CFSTR(" AND c.service_name = ?"));
  if ((a3 & 1) != 0)
  {
    CFStringAppend(Mutable, CFSTR(" AND c.display_name = ?"));
    if (!a4)
    {
LABEL_8:
      if (!a5)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if (!a4)
  {
    goto LABEL_8;
  }
  CFStringAppend(Mutable, CFSTR(" AND c.group_id = ?"));
  if (a5)
LABEL_9:
    CFStringAppend(Mutable, CFSTR(" AND c.original_group_id = ?"));
LABEL_10:
  CFStringAppend(Mutable, CFSTR(" AND style = ?"));
  if ((a2 & 1) == 0)
    CFStringAppend(Mutable, CFSTR(" AND (SELECT COUNT(handle_id) FROM chat_handle_join WHERE chat_id = c.ROWID) = ?"));
  CFStringAppend(Mutable, CFSTR(") "));
  return Mutable;
}

uint64_t IMDChatRecordCopyChatsFilteredUsingPredicateQuery(uint64_t a1)
{
  return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@ WHERE %@"), +[IMDChatQueryStrings selectAllColumns](IMDChatQueryStrings, "selectAllColumns"), a1);
}

uint64_t IMDChatRecordCopySortedChatsFilteredUsingPredicateWithLimitQuery(uint64_t a1, void *a2)
{
  const __CFString *v3;
  uint64_t v4;
  const __CFString *v5;

  if (a1)
    v3 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("WHERE %@"), a1);
  else
    v3 = &stru_1E5AC1D70;
  if (objc_msgSend(a2, "count"))
  {
    v4 = objc_msgSend(a2, "componentsJoinedByString:", CFSTR(", "));
    v5 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("ORDER BY %@ "), v4);
  }
  else
  {
    v5 = &stru_1E5AC1D70;
  }
  return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@ %@ %@ LIMIT ?"), +[IMDChatQueryStrings selectAllColumns](IMDChatQueryStrings, "selectAllColumns"), v3, v5);
}

void *IMDChatRecordRowIDsWithChatGUIDsQuery(void *a1)
{
  void *v2;
  unint64_t v3;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("SELECT rowid FROM chat WHERE guid IN ("));
  if (objc_msgSend(a1, "count"))
  {
    v3 = 0;
    do
    {
      objc_msgSend(v2, "appendString:", CFSTR("?"));
      if (v3 < objc_msgSend(a1, "count") - 1)
        objc_msgSend(v2, "appendString:", CFSTR(", "));
      ++v3;
    }
    while (v3 < objc_msgSend(a1, "count"));
  }
  objc_msgSend(v2, "appendString:", CFSTR(")"));
  return v2;
}

void *IMDInsertMessagesFromChatsWihGUIDsIntoRecoverableMessageJoinQuery(void *a1)
{
  void *v2;
  unint64_t v3;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("INSERT OR REPLACE INTO chat_recoverable_message_join (chat_id, message_id, delete_date) SELECT chat_id, message_id, message_date FROM chat_message_join WHERE message_date < ? AND chat_id IN ("));
  if (objc_msgSend(a1, "count"))
  {
    v3 = 0;
    do
    {
      objc_msgSend(v2, "appendString:", CFSTR("?"));
      if (v3 < objc_msgSend(a1, "count") - 1)
        objc_msgSend(v2, "appendString:", CFSTR(", "));
      ++v3;
    }
    while (v3 < objc_msgSend(a1, "count"));
  }
  objc_msgSend(v2, "appendString:", CFSTR(");"));
  return v2;
}

void *IMDDeleteFromChatMessageJoinWhereMessageInRecoveryForChatsWithGUIDsQuery(void *a1)
{
  void *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("DELETE FROM chat_message_join WHERE chat_id IN ("));
  if (objc_msgSend(a1, "count"))
  {
    v3 = 0;
    do
    {
      objc_msgSend(v2, "appendString:", CFSTR("?"));
      if (v3 < objc_msgSend(a1, "count") - 1)
        objc_msgSend(v2, "appendString:", CFSTR(", "));
      ++v3;
    }
    while (v3 < objc_msgSend(a1, "count"));
  }
  objc_msgSend(v2, "appendString:", CFSTR(") AND message_id IN (SELECT message_id FROM chat_recoverable_message_join WHERE chat_id IN ("));
  if (objc_msgSend(a1, "count"))
  {
    v4 = 0;
    do
    {
      objc_msgSend(v2, "appendString:", CFSTR("?"));
      if (v4 < objc_msgSend(a1, "count") - 1)
        objc_msgSend(v2, "appendString:", CFSTR(", "));
      ++v4;
    }
    while (v4 < objc_msgSend(a1, "count"));
  }
  objc_msgSend(v2, "appendString:", CFSTR("));"));
  return v2;
}

uint64_t _IMDPerformBlockWithDelay(uint64_t a1)
{
  NSObject *v1;
  NSObject *v2;

  if (!a1)
  {
    v1 = IMLogHandleForCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1ABC58C74();
  }
  if (!IMDSharedThreadedRecordStore())
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC58BD8();
  }
  return CSDBPerformBlockAfterDelay();
}

uint64_t sub_1ABB998E0(uint64_t a1)
{
  uint64_t result;

  IMDEnsureSharedRecordStoreInitialized();
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void _IMDPerformBlock(uint64_t a1)
{
  NSObject *v2;

  if (a1)
  {
    IMDEnsureSharedRecordStoreInitialized();
    (*(void (**)(uint64_t))(a1 + 16))(a1);
  }
  else
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC58D10();
    IMDEnsureSharedRecordStoreInitialized();
  }
}

void _IMDPerformLockedMessageStoreBlock(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;

  if (a1)
  {
    IMDEnsureSharedRecordStoreInitialized();
    IMDSharedThreadedRecordStore();
    v2 = CSDBRecordStoreRefFromThreadedRecordStoreRef();
    (*(void (**)(uint64_t, uint64_t))(a1 + 16))(a1, v2);
  }
  else
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC58DAC();
    IMDEnsureSharedRecordStoreInitialized();
  }
}

void _IMDPerformLockedMessageStoreBlockWithoutInitialize(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;

  if (a1)
  {
    IMDSharedThreadedRecordStore();
    v2 = CSDBRecordStoreRefFromThreadedRecordStoreRef();
    (*(void (**)(uint64_t, uint64_t))(a1 + 16))(a1, v2);
  }
  else
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC58E48();
  }
}

void _IMDPerformLockedDatabaseBlock(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;

  if (a1)
  {
    IMDEnsureSharedRecordStoreInitialized();
    if (!IMDSharedThreadedRecordStore())
    {
      v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        sub_1ABC590B8();
    }
    v3 = CSDBRecordStoreRefFromThreadedRecordStoreRef();
    if (!v3)
    {
      v4 = IMLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1ABC5901C();
    }
    v5 = CSDBSqliteDatabaseFromThreadedRecordStoreRef();
    if (!v5)
    {
      v6 = IMLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1ABC58F80();
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 16))(a1, v3, v5);
  }
  else
  {
    v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC58EE4();
    IMDEnsureSharedRecordStoreInitialized();
  }
}

void _IMDPerformLockedConnectionBlock(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  _OWORD v8[11];

  if (a1)
  {
    IMDEnsureSharedRecordStoreInitialized();
    memset(v8, 0, sizeof(v8));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v8);
    if (!IMDSharedThreadedRecordStore())
    {
      v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        sub_1ABC59460();
    }
    v3 = CSDBRecordStoreRefFromThreadedRecordStoreRef();
    if (!v3)
    {
      v4 = IMLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1ABC593C4();
    }
    v5 = CSDBSqliteDatabaseFromThreadedRecordStoreRef();
    if (!v5)
    {
      v6 = IMLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1ABC59328();
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 16))(a1, v3, v5, *((_QWORD *)&v8[0] + 1));
    IMDSqlOperationRelease((uint64_t)v8, 0);
  }
  else
  {
    v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC5928C();
    IMDEnsureSharedRecordStoreInitialized();
  }
}

uint64_t IMDBridgedRecordCopyPropertyValue(void *a1, CFIndex a2)
{
  id v3;
  uint64_t v4;
  const __CFArray *v5;
  uint64_t (**v6)(const void *);
  const void *ValueAtIndex;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  __int128 *v12;
  CFIndex v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v3 = a1;
  v4 = objc_msgSend(v3, "_localCache");
  if (!v4)
  {

LABEL_11:
    if (IMDIsRunningInDatabaseServerProcess())
    {
      *(_QWORD *)&v14 = 0;
      *((_QWORD *)&v14 + 1) = &v14;
      v15 = 0x2020000000uLL;
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = sub_1ABB99E14;
      v10[3] = &unk_1E5AB4410;
      v11 = v3;
      v12 = &v14;
      v13 = a2;
      _IMDPerformBlock((uint64_t)v10);
      v8 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 24);

      _Block_object_dispose(&v14, 8);
    }
    else
    {
      v8 = 0;
    }
    goto LABEL_15;
  }
  v5 = (const __CFArray *)v4;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  if (v3)
  {
    objc_msgSend(v3, "_propertyDescriptorForProperty:", a2);
    v6 = (uint64_t (**)(const void *))v15;
  }
  else
  {
    v6 = 0;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(v5, a2);
  v8 = (uint64_t)ValueAtIndex;
  if (ValueAtIndex && v6)
  {
    if (!*v6)
    {

      goto LABEL_15;
    }
    v8 = (*v6)(ValueAtIndex);
  }

  if (!v8)
    goto LABEL_11;
LABEL_15:

  return v8;
}

void sub_1ABB99DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB99E14(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "_fetchUpdatedRecord");
  if (v2)
  {
    v3 = (const void *)v2;
    objc_msgSend(*(id *)(a1 + 32), "_propertyIDForProperty:", *(_QWORD *)(a1 + 48));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

const void *IMDBridgedRecordGetPropertyValue(void *a1, CFIndex a2)
{
  id v3;
  const __CFArray *v4;
  const void *ValueAtIndex;
  _QWORD v7[4];
  id v8;
  uint64_t *v9;
  CFIndex v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1;
  v4 = (const __CFArray *)objc_msgSend(v3, "_localCache");
  if (!v4 || (ValueAtIndex = CFArrayGetValueAtIndex(v4, a2)) == 0)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v11 = 0;
      v12 = &v11;
      v13 = 0x2020000000;
      v14 = 0;
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = sub_1ABB99F68;
      v7[3] = &unk_1E5AB4410;
      v8 = v3;
      v9 = &v11;
      v10 = a2;
      _IMDPerformBlock((uint64_t)v7);
      ValueAtIndex = (const void *)v12[3];

      _Block_object_dispose(&v11, 8);
    }
    else
    {
      ValueAtIndex = 0;
    }
  }

  return ValueAtIndex;
}

void sub_1ABB99F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB99F68(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "_fetchUpdatedRecord");
  if (v2)
  {
    v3 = (const void *)v2;
    objc_msgSend(*(id *)(a1 + 32), "_propertyIDForProperty:", *(_QWORD *)(a1 + 48));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDBridgedRecordCopyPropertyNumberAsInteger64(void *a1, CFIndex a2)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)IMDBridgedRecordCopyPropertyValue(a1, a2);
  v3 = objc_msgSend(v2, "longLongValue");

  return v3;
}

BOOL IMDBridgedRecordGetPropertyBool(void *a1, CFIndex a2)
{
  return IMDBridgedRecordGetPropertyValue(a1, a2) != 0;
}

void IMDBridgedRecordPopulatePropertyImplementations(objc_class *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  char v11;
  char *v12;
  void *v13;
  uint64_t v14;
  id v15;
  objc_property_t Property;
  void *v17;
  objc_property *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  NSString *v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  const char *v33;
  void *v34;
  void *v35;
  void *v36;
  NSString *v37;
  const char *v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v50;
  objc_class *cls;

  if (qword_1ED0D3A88 != -1)
    dispatch_once(&qword_1ED0D3A88, &unk_1E5AAF068);
  v48 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v49 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if (a3 >= 1)
  {
    v5 = 0;
    v50 = a3;
    v6 = 0x1E0CB3000uLL;
    cls = a1;
    while (1)
    {
      v7 = a2 + 40 * v5;
      v9 = *(char **)v7;
      v8 = *(_QWORD *)(v7 + 8);
      v10 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
      if (v9)
      {
        v11 = *v9;
        if (*v9)
        {
          v12 = v9;
          do
          {
            if (v11 == 95)
            {
              v11 = __toupper(v12[1]);
              v12 += 2;
            }
            else
            {
              ++v12;
            }
            objc_msgSend(v10, "appendFormat:", CFSTR("%c"), v11);
            v11 = *v12;
          }
          while (*v12);
        }
      }
      v13 = (void *)objc_msgSend(v10, "copy");

      if (objc_msgSend(v13, "hasPrefix:", CFSTR("is")))
      {
        sub_1ABB9A5C0(v13, 0, 2u);
        v14 = objc_claimAutoreleasedReturnValue();

        v13 = (void *)v14;
      }
      v15 = objc_retainAutorelease(v13);
      Property = class_getProperty(a1, (const char *)objc_msgSend(v15, "UTF8String"));
      if (Property)
        break;
      objc_msgSend(v15, "stringByReplacingOccurrencesOfString:withString:", CFSTR("Guid"), CFSTR("GUID"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      v15 = objc_retainAutorelease(v17);
      Property = class_getProperty(a1, (const char *)objc_msgSend(v15, "UTF8String"));
      if (Property)
        break;
      if ((objc_msgSend(v15, "hasSuffix:", CFSTR("Id")) & 1) != 0)
      {
        objc_msgSend(v15, "stringByReplacingCharactersInRange:withString:", objc_msgSend(v15, "length") - 2, 2, CFSTR("ID"));
        v40 = (void *)objc_claimAutoreleasedReturnValue();

        v41 = objc_retainAutorelease(v40);
        v18 = class_getProperty(a1, (const char *)objc_msgSend(v41, "UTF8String"));

        if (!v18)
          goto LABEL_35;
        goto LABEL_17;
      }
LABEL_34:

LABEL_35:
      if (++v5 == v50)
        goto LABEL_40;
    }
    v18 = Property;

LABEL_17:
    objc_msgSend(*(id *)(v6 + 2368), "stringWithUTF8String:", property_getName(v18));
    v15 = (id)objc_claimAutoreleasedReturnValue();
    v19 = property_copyAttributeValue(v18, "G");
    if (v19)
    {
      v20 = v19;
      v21 = v8;
      objc_msgSend(*(id *)(v6 + 2368), "stringWithUTF8String:", v19);
      v22 = (NSString *)objc_claimAutoreleasedReturnValue();
      free(v20);
    }
    else
    {
      v21 = v8;
      objc_msgSend(*(id *)(v6 + 2368), "stringWithUTF8String:", property_getName(v18));
      v22 = (NSString *)objc_claimAutoreleasedReturnValue();
    }
    v23 = property_copyAttributeValue(v18, "S");
    if (v23)
    {
      v24 = v23;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v23);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      free(v24);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", property_getName(v18));
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = (void *)MEMORY[0x1E0CB3940];
      sub_1ABB9A5C0(v26, 1, 0);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "stringWithFormat:", CFSTR("set%@"), v28);
      v25 = (void *)objc_claimAutoreleasedReturnValue();

    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "setObject:forKeyedSubscript:", v29, v15);

    v30 = property_copyAttributeValue(v18, "T");
    v31 = v30;
    if (v21 == 3)
    {
      if (!strcmp(v30, "@\"NSDate\""))
        v32 = 3;
      else
        v32 = 2;
    }
    else if (v21)
    {
      v32 = 4;
    }
    else
    {
      v32 = strcmp(v30, "@\"NSDate\"") == 0;
    }
    free(v31);
    v33 = NSSelectorFromString(v22);
    if (class_addMethod(cls, v33, (IMP)*(&off_1E5AAEE68 + 4 * v32), (const char *)*(&off_1E5AAEE68 + 4 * v32 + 1)))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v5);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "setObject:forKeyedSubscript:", v34, v22);

      if ((v32 | 2) == 3)
      {
        v35 = (void *)MEMORY[0x1E0CB3940];
        sub_1ABB9A5C0(v15, 1, 0);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "stringWithFormat:", CFSTR("raw%@"), v36);
        v37 = (NSString *)objc_claimAutoreleasedReturnValue();

        v38 = NSSelectorFromString(v37);
        class_addMethod(cls, v38, (IMP)*(&off_1E5AAEE68 + 8 * (unint64_t)(v32 == 3)), (const char *)*(&off_1E5AAEE68 + 8 * (unint64_t)(v32 == 3) + 1));
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v5);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "setObject:forKeyedSubscript:", v39, v37);

      }
    }

    a1 = cls;
    v6 = 0x1E0CB3000;
    goto LABEL_34;
  }
LABEL_40:
  pthread_rwlock_wrlock(&stru_1ED0D2898);
  v42 = (void *)objc_msgSend(v48, "copy");
  v43 = (void *)qword_1ED0D2960;
  NSStringFromClass(a1);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "setObject:forKeyedSubscript:", v42, v44);

  v45 = (void *)objc_msgSend(v49, "copy");
  v46 = (void *)qword_1ED0D2968;
  NSStringFromClass(a1);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v45, v47);

  pthread_rwlock_unlock(&stru_1ED0D2898);
}

id sub_1ABB9A5C0(void *a1, int a2, unsigned int a3)
{
  id v5;
  id v6;
  __darwin_ct_rune_t v7;
  char v8;
  id v9;
  void *v10;

  v5 = a1;
  if (objc_msgSend(v5, "length"))
  {
    v6 = objc_retainAutorelease(v5);
    v7 = *(char *)(objc_msgSend(v6, "UTF8String") + a3);
    if (a2)
      v8 = __toupper(v7);
    else
      v8 = __tolower(v7);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%c"), v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringByReplacingCharactersInRange:withString:", 0, a3 + 1, v10);
    v9 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = v5;
  }

  return v9;
}

id IMDBridgedRecordGetPropertyKeyPathToColumnsMap(objc_class *a1)
{
  void *v2;
  void *v3;
  void *v4;

  pthread_rwlock_rdlock(&stru_1ED0D2898);
  v2 = (void *)qword_1ED0D2968;
  NSStringFromClass(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  pthread_rwlock_unlock(&stru_1ED0D2898);
  return v4;
}

void sub_1ABB9A6EC()
{
  id v0;
  void *v1;
  id v2;
  void *v3;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1 = (void *)qword_1ED0D2968;
  qword_1ED0D2968 = (uint64_t)v0;

  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v3 = (void *)qword_1ED0D2960;
  qword_1ED0D2960 = (uint64_t)v2;

}

const void *sub_1ABB9A734(void *a1, const char *a2)
{
  id v3;
  int v4;
  const void *PropertyValue;

  v3 = a1;
  v4 = sub_1ABB9A868((uint64_t)v3, a2);
  PropertyValue = IMDBridgedRecordGetPropertyValue(v3, v4);

  return PropertyValue;
}

uint64_t sub_1ABB9A778(void *a1, const char *a2)
{
  return objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)(uint64_t)sub_1ABB9A734(a1, a2));
}

uint64_t sub_1ABB9A7A4(void *a1, const char *a2)
{
  id v3;
  int v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = sub_1ABB9A868((uint64_t)v3, a2);
  v5 = (void *)IMDBridgedRecordCopyPropertyValue(v3, v4);

  v6 = objc_msgSend(v5, "longLongValue");
  return v6;
}

uint64_t sub_1ABB9A7F8(void *a1, const char *a2)
{
  return objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)sub_1ABB9A7A4(a1, a2));
}

id sub_1ABB9A824(void *a1, const char *a2)
{
  id v3;
  int v4;
  void *v5;

  v3 = a1;
  v4 = sub_1ABB9A868((uint64_t)v3, a2);
  v5 = (void *)IMDBridgedRecordCopyPropertyValue(v3, v4);

  return v5;
}

uint64_t sub_1ABB9A868(uint64_t a1, const char *a2)
{
  objc_class *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  pthread_rwlock_rdlock(&stru_1ED0D2898);
  objc_msgSend((id)qword_1ED0D2960, "objectForKeyedSubscript:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  pthread_rwlock_unlock(&stru_1ED0D2898);
  NSStringFromSelector(a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_msgSend(v7, "intValue");
  return v8;
}

void sub_1ABB9AA94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[10];
  _QWORD v8[11];

  v8[10] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0D37778];
  v7[0] = CFSTR("rowID");
  v7[1] = v0;
  v8[0] = CFSTR("ROWID");
  v8[1] = CFSTR("guid");
  v1 = *MEMORY[0x1E0D37780];
  v7[2] = *MEMORY[0x1E0D37730];
  v7[3] = v1;
  v8[2] = CFSTR("chat_identifier");
  v8[3] = CFSTR("group_id");
  v2 = *MEMORY[0x1E0D37760];
  v7[4] = *MEMORY[0x1E0D37870];
  v7[5] = v2;
  v8[4] = CFSTR("service_name");
  v8[5] = CFSTR("display_name");
  v3 = *MEMORY[0x1E0D37758];
  v7[6] = *MEMORY[0x1E0D377B8];
  v7[7] = v3;
  v8[6] = CFSTR("is_filtered");
  v8[7] = CFSTR("ck_sync_state");
  v4 = *MEMORY[0x1E0D377A8];
  v7[8] = *MEMORY[0x1E0D377C0];
  v7[9] = v4;
  v8[8] = CFSTR("is_recovered");
  v8[9] = CFSTR("is_deleting_incoming_messages");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, v7, 10);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)qword_1ED0D3790;
  qword_1ED0D3790 = v5;

}

void sub_1ABB9AC34()
{
  IMExtensionNotificationManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMExtensionNotificationManager);
  v1 = (void *)qword_1ED0D3868;
  qword_1ED0D3868 = (uint64_t)v0;

}

void sub_1ABB9B2F0()
{
  NSObject *v0;
  NSObject *global_queue;

  v0 = dispatch_queue_create("com.apple.IMDPersistenceIPCQueue", 0);
  qword_1ED0D3CD8 = (uint64_t)v0;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_set_target_queue(v0, global_queue);
}

uint64_t sub_1ABB9B338()
{
  pthread_mutex_lock(&stru_1ED0D36E8);
  if (qword_1ED0D3CD0)
  {
    xpc_connection_cancel((xpc_connection_t)qword_1ED0D3CD0);
    xpc_release((xpc_object_t)qword_1ED0D3CD0);
    qword_1ED0D3CD0 = 0;
  }
  return pthread_mutex_unlock(&stru_1ED0D36E8);
}

uint64_t IMDSqlOperationInvalidateCaches(uint64_t a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;

  if (!a1)
  {
    v1 = IMLogHandleForCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1ABC59634();
  }
  if (!IMDSharedThreadedRecordStore())
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC59598();
  }
  if (!CSDBRecordStoreRefFromThreadedRecordStoreRef())
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC594FC();
  }
  return CSDBRecordStoreInvalidateCachesWithStore();
}

void IMDSqlOperationUpdateLastDeleteSequenceNumber(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  NSObject *v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  NSObject *v8;
  NSObject *v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!a1 || !*(_QWORD *)(a1 + 8))
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC59770();
  }
  if (!IMDSharedThreadedRecordStore())
  {
    v3 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("IMDSharedThreadedRecordStore()"), "void IMDSqlOperationUpdateLastDeleteSequenceNumber(IMDSqlOperation *)", IMFileLocationTrimFileName(), 48, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v4 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v4)
    {
      v4(v3);
    }
    else if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v11 = v3;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  IMDSharedThreadedRecordStore();
  if (!CSDBRecordStoreRefFromThreadedRecordStoreRef())
  {
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("CSDBRecordStoreRefFromThreadedRecordStoreRef(IMDSharedThreadedRecordStore())"), "void IMDSqlOperationUpdateLastDeleteSequenceNumber(IMDSqlOperation *)", IMFileLocationTrimFileName(), 49, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v11 = v6;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a1)
  {
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_22;
    v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1ABC596D0();
    if (*(_QWORD *)(a1 + 8))
    {
LABEL_22:
      CSDBSqliteConnectionIntegerForProperty();
      CSDBSqliteConnectionSetIntegerForProperty();
      _IMDSMSRecordStoreUpdateLastDeleteSequenceNumberUnlocked();
    }
  }
}

void IMDSqlOperationInitWithThreadedMessageStore(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  NSObject *v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v3 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("messageStore"), "IMDSqlOperation IMDSqlOperationInitWithThreadedMessageStore(CSDBThreadedRecordStoreRef)", IMFileLocationTrimFileName(), 110, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v4 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v4)
    {
      v4(v3);
    }
    else if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v8 = v3;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  v6 = CSDBSqliteDatabaseFromThreadedRecordStoreRef();
  IMDSqlOperationInitWithCSDBDatabase(v6, a2);
}

void IMDSqlOperationInitAndCreateIfNeededWithPath(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  NSObject *v6;
  void *v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("path"), "IMDSqlOperation IMDSqlOperationInitAndCreateIfNeededWithPath(NSString *)", IMFileLocationTrimFileName(), 115, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v9 = v4;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  v7 = (void *)IMDCreateThreadedRecordStoreWithPath(a1);
  a2[9] = 0u;
  a2[10] = 0u;
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  IMDSqlOperationInitWithThreadedMessageStore((uint64_t)v7, (uint64_t)a2);
  IMDSqlOperationSetThreadedMessageStore((uint64_t)a2, v7);

}

void IMDSqlOperationSetThreadedMessageStore(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  NSObject *v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = *(void **)(a1 + 24);
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = 0;

    }
    if (a2)
      *(_QWORD *)(a1 + 24) = a2;
  }
  else
  {
    v5 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("operation"), "void IMDSqlOperationSetThreadedMessageStore(IMDSqlOperation *, CSDBThreadedRecordStoreRef)", IMFileLocationTrimFileName(), 154, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v6 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v6)
    {
      v6(v5);
    }
    else if (IMOSLoggingEnabled())
    {
      v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v9 = v5;
        _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
}

void IMDSqlOperationInitWithPath(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  NSObject *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v12[0] = xmmword_1E5AB49A0;
    v12[1] = *(_OWORD *)off_1E5AB49B0;
    v13 = 128;
    v5 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("path"), "IMDSqlOperation IMDSqlOperationInitWithPath(NSString *)", IMFileLocationTrimFileName(), 128, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v6 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v6)
    {
      v6(v5);
    }
    else if (IMOSLoggingEnabled())
    {
      v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v15 = v5;
        _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
    LOBYTE(v12[0]) = 0;
    goto LABEL_10;
  }
  LOBYTE(v12[0]) = 0;
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:isDirectory:", a1, v12) & 1) == 0)
  {
LABEL_10:
    a2[9] = 0u;
    a2[10] = 0u;
    a2[7] = 0u;
    a2[8] = 0u;
    a2[5] = 0u;
    a2[6] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
    v8 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v9 = (void *)MEMORY[0x1E0C99D80];
    v10 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Database not found at %@"), a1);
    v11 = objc_msgSend(v9, "dictionaryWithObject:forKey:", v10, *MEMORY[0x1E0CB2D50]);
    v4 = (void *)objc_msgSend(v8, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 4, v11);
    IMDSqlOperationSetError((uint64_t)a2, v4);
    goto LABEL_11;
  }
  v4 = (void *)IMDCreateThreadedRecordStoreWithPath(a1);
  a2[9] = 0u;
  a2[10] = 0u;
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  IMDSqlOperationInitWithThreadedMessageStore((uint64_t)v4, (uint64_t)a2);
  IMDSqlOperationSetThreadedMessageStore((uint64_t)a2, v4);
LABEL_11:

}

uint64_t sub_1ABB9C22C(uint64_t a1)
{
  return dword_1ED0D3B40[a1];
}

uint64_t IMDMessageRecordGetTypeID()
{
  pthread_once(&stru_1ED0D36C8, (void (*)(void))sub_1ABB9C268);
  return qword_1ED0D3CA8;
}

uint64_t sub_1ABB9C268()
{
  objc_class *v0;
  objc_class *v1;
  uint64_t v2;
  char **v3;
  uint64_t result;

  qword_1ED0D3CA8 = _CFRuntimeRegisterClass();
  v0 = (objc_class *)objc_opt_class();
  class_getName(v0);
  _CFRuntimeBridgeClasses();
  v1 = (objc_class *)objc_opt_class();
  IMDBridgedRecordPopulatePropertyImplementations(v1, (uint64_t)&off_1E5AB4B78, 90);
  v2 = 0;
  v3 = &off_1E5AB4B78;
  do
  {
    v3 += 5;
    result = CSDBRecordIndexOfPropertyNamed();
    dword_1ED0D3B40[v2++] = result;
  }
  while (v2 != 90);
  return result;
}

const void *IMDMessageRecordCreateFromRecordIDWithLock(uint64_t a1, uint64_t a2, int a3)
{
  _OWORD *Instance;
  const void *v6;
  const void *v7;
  NSObject *v8;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  pthread_once(&stru_1ED0D36C8, (void (*)(void))sub_1ABB9C268);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  v6 = Instance;
  if (Instance)
  {
    Instance[2] = 0u;
    Instance[3] = 0u;
    Instance[1] = 0u;
    *((_QWORD *)Instance + 2) = a2;
    if (a3)
    {
      v7 = (const void *)IMDMessageRecordCopyMessageRecord(a2);
      if (v7)
      {
LABEL_4:
        CFRelease(v7);
        return v6;
      }
    }
    else
    {
      v7 = (const void *)IMDMessageRecordCopyMessageRecordUnlocked(a2);
      if (v7)
        goto LABEL_4;
    }
    if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v10 = 134217984;
        v11 = a2;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "Error IMDMessageRecordCreateFromRecordIDWithLock could not create message for id %lld", (uint8_t *)&v10, 0xCu);
      }
    }
    CFRelease(v6);
    return 0;
  }
  return v6;
}

_OWORD *IMDMessageRecordCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  _OWORD *Instance;
  uint64_t v57;
  void (*v65[5])(void);
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;

  if (IMDIsRunningInDatabaseServerProcess())
  {
    pthread_once(&stru_1ED0D36C8, (void (*)(void))sub_1ABB9C268);
    Instance = (_OWORD *)_CFRuntimeCreateInstance();
    return sub_1ABB9C8D0(Instance, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55);
  }
  else
  {
    v66 = 0;
    v67 = &v66;
    v68 = 0x2020000000;
    v69 = 0;
    v65[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v65[1] = (void (*)(void))3221225472;
    v65[2] = (void (*)(void))sub_1ABB9CEB0;
    v65[3] = (void (*)(void))&unk_1E5AAF630;
    v65[4] = (void (*)(void))&v66;
    __syncXPCIMDMessageRecordCreate_IPCAction(v65, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
      a2,
      a21,
      a23,
      a24,
      a25,
      a22,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a47,
      a48,
      a49,
      a50,
      a51,
      a52,
      a53,
      a54,
      a55);
    v57 = v67[3];
    _Block_object_dispose(&v66, 8);
    return (_OWORD *)v57;
  }
}

void sub_1ABB9C8B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

_OWORD *sub_1ABB9C8D0(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  int v59;
  _OWORD *v60;
  NSObject *v61;
  const void *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  CFNumberRef v67;
  CFNumberRef v68;
  uint64_t v69;
  uint64x2_t v70;
  int8x16_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  CFNumberRef v79;
  CFNumberRef v80;
  CFNumberRef v81;
  CFNumberRef v82;
  CFNumberRef v83;
  CFNumberRef v84;
  CFNumberRef cf;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t valuePtr;
  uint8_t v91[4];
  _OWORD *v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  uint8_t buf[8];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  CFNumberRef v111;
  CFNumberRef v112;
  CFNumberRef v113;
  uint64_t v114;
  uint64_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  uint64_t v119;
  int8x16_t v120;
  int8x16_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int8x16_t v129;
  CFNumberRef v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  CFNumberRef v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  CFNumberRef v156;
  int8x16_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int8x16_t v162;
  CFNumberRef v163;
  CFNumberRef v164;
  uint64_t v165;
  CFNumberRef v166;
  int8x16_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int8x16_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  v89 = a5;
  valuePtr = a4;
  v87 = a7;
  v88 = a6;
  v59 = IMDIsRunningInDatabaseServerProcess();
  v60 = 0;
  if (a1 && v59)
  {
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    if (IMOSLoggingEnabled())
    {
      v61 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v61, OS_LOG_TYPE_DEBUG, "_IMDMessageRecordCreate()", buf, 2u);
      }
    }
    IMDEnsureSharedRecordStoreInitialized();
    v62 = (const void *)CSDBRecordCreate();
    if (v62)
    {
      v63 = objc_msgSend(a11, "unsignedLongLongValue");
      v64 = v63;
      v65 = (v63 >> 13) & 1;
      if (((v63 >> 19) & 1) != 0)
        v65 = 0;
      v77 = v65;
      v78 = (v63 >> 19) & 1;
      if (v78)
        v66 = 0;
      else
        v66 = (v63 >> 12) & 1;
      v76 = v66;
      cf = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
      v84 = CFNumberCreate(0, kCFNumberSInt64Type, &v89);
      v83 = CFNumberCreate(0, kCFNumberSInt64Type, &v88);
      v82 = CFNumberCreate(0, kCFNumberSInt64Type, &v87);
      v81 = CFNumberCreate(0, kCFNumberSInt64Type, &a35);
      v67 = CFNumberCreate(0, kCFNumberSInt64Type, &a44);
      v80 = CFNumberCreate(0, kCFNumberSInt64Type, &a50);
      v79 = CFNumberCreate(0, kCFNumberSInt64Type, &a49);
      v86 = 0;
      v68 = CFNumberCreate(0, kCFNumberSInt64Type, &v86);
      v69 = 0;
      v98 = a3;
      v102 = a17;
      v104 = a13;
      v105 = 10;
      v106 = a9;
      v107 = a14;
      v108 = a15;
      v109 = a16;
      v110 = a8;
      *(_QWORD *)buf = a12;
      v101 = 0;
      v103 = 0;
      v113 = v83;
      v114 = v76;
      v70 = (uint64x2_t)vdupq_n_s64(v64);
      v71 = (int8x16_t)vdupq_n_s64(1uLL);
      v115 = 1;
      v116 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1ABC69880), v71);
      v117 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1ABC69890), v71);
      v118 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1ABC698A0), v71);
      v119 = v77;
      v122 = (v64 >> 18) & 1;
      v123 = v78;
      v120 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1ABC698B0), v71);
      v121 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1ABC698C0), v71);
      v126 = 0;
      v127 = (v64 >> 20) & 1;
      if (a28)
        v72 = 0;
      else
        v72 = a2;
      v131 = v72;
      v133 = a22;
      v134 = a23;
      v135 = a24;
      v136 = a25;
      v137 = (v64 >> 24) & 1;
      v138 = a26;
      v139 = a27;
      v140 = (v64 >> 25) & 1;
      v141 = a28;
      v142 = a29;
      v143 = a32;
      v144 = a33;
      v145 = a34;
      v146 = a30;
      v147 = a31;
      v149 = a36;
      v150 = a37;
      v151 = a38;
      v152 = a40;
      v153 = a42;
      v154 = (v64 >> 26) & 1;
      v129 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1ABC698D0), v71);
      v155 = a43;
      v156 = v67;
      v158 = a45;
      v159 = a46;
      v157 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1ABC698E0), v71);
      v160 = a47;
      v161 = a48;
      v163 = v68;
      v162 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1ABC698F0), v71);
      v165 = (v64 >> 36) & 1;
      v99 = a10;
      v100 = 0;
      v111 = cf;
      v112 = v84;
      v124 = 0;
      v125 = 0;
      v128 = 0;
      v130 = v82;
      v132 = 0;
      v148 = v81;
      v164 = v80;
      v166 = v79;
      v167 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1ABC69900), v71);
      v168 = (v64 >> 38) & 1;
      v169 = a51;
      v170 = (v64 >> 37) & 1;
      v171 = a52;
      v172 = a53;
      v173 = vandq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)xmmword_1ABC69910), v71);
      v174 = a54;
      v175 = a55;
      v176 = (v64 >> 43) & 1;
      do
      {
        CSDBRecordSetProperty();
        v69 += 8;
      }
      while (v69 != 720);
      if (IMDMessageRecordAddMessageRecord((uint64_t)v62))
      {
        *((_QWORD *)a1 + 2) = (int)CSDBRecordGetID();
        if (IMOSLoggingEnabled())
        {
          v73 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
          {
            v74 = *((_QWORD *)a1 + 2);
            *(_DWORD *)v91 = 138412802;
            v92 = a1;
            v93 = 2048;
            v94 = v74;
            v95 = 2112;
            v96 = a12;
            _os_log_impl(&dword_1ABB60000, v73, OS_LOG_TYPE_DEBUG, "New message record [%@] has ID [%lld]  [%@].", v91, 0x20u);
          }
        }
        v60 = a1;
      }
      else
      {
        CFRelease(a1);
        v60 = 0;
      }
      CFRelease(v62);
      if (cf)
        CFRelease(cf);
      if (v83)
        CFRelease(v83);
      if (v84)
        CFRelease(v84);
      if (v82)
        CFRelease(v82);
      if (v81)
        CFRelease(v81);
      if (v80)
        CFRelease(v80);
      if (v79)
        CFRelease(v79);
    }
    else
    {
      CFRelease(a1);
      return 0;
    }
  }
  return v60;
}

uint64_t sub_1ABB9CEB0(uint64_t a1, void *a2)
{
  uint64_t result;

  result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _IMDCopyIMDMessageRecordFromXPCObjectClient(void *a1)
{
  uint64_t v2;
  uint64_t Instance;
  uint64_t v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  void (*v13)(void);
  xpc_object_t value;
  void *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  const void *ValueAtIndex;
  const void *v20;
  int64_t int64;
  _QWORD applier[5];
  _QWORD v24[5];
  uint64_t valuePtr;
  uint64_t *p_valuePtr;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  uint64_t v30;

  if (xpc_dictionary_get_count(a1) < 3)
    return 0;
  pthread_once(&stru_1ED0D36C8, (void (*)(void))sub_1ABB9C268);
  Instance = _CFRuntimeCreateInstance();
  v2 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    if (!*(_QWORD *)(Instance + 24))
    {
      v4 = 90;
      Mutable = CFArrayCreateMutable(0, 90, 0);
      do
      {
        CFArrayAppendValue(Mutable, 0);
        --v4;
      }
      while (v4);
      int64 = xpc_dictionary_get_int64(a1, "flags");
      v6 = 0;
      v7 = &qword_1E5AB4B88;
      while (2)
      {
        v8 = *v7;
        switch(*(v7 - 1))
        {
          case 0:
            v9 = sub_1ABBA2738(v6);
            if (v9)
            {
              v10 = (v9 & int64) != 0;
              goto LABEL_17;
            }
            v11 = IMGetXPCIntFromDictionary();
            goto LABEL_16;
          case 1:
            v11 = IMGetXPCStringFromDictionary();
            goto LABEL_16;
          case 2:
            v11 = IMGetXPCDataFromDictionary();
LABEL_16:
            v10 = v11;
            goto LABEL_17;
          case 3:
            valuePtr = 0;
            valuePtr = IMGetXPCIntFromDictionary();
            v10 = (unint64_t)CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
            v12 = (const void *)v10;
            goto LABEL_18;
          default:
            v10 = 0;
LABEL_17:
            v12 = 0;
LABEL_18:
            if (CFArrayGetValueAtIndex(Mutable, v6))
            {
              if (v8)
              {
                v13 = *(void (**)(void))(v8 + 8);
                if (v13)
                  v13();
              }
            }
            if (v10 && v8 && *(_QWORD *)v8)
              v10 = (*(uint64_t (**)(unint64_t))v8)(v10);
            CFArraySetValueAtIndex(Mutable, v6, (const void *)v10);
            if (v12)
              CFRelease(v12);
            ++v6;
            v7 += 5;
            if (v6 != 90)
              continue;
            *(_QWORD *)(v2 + 24) = Mutable;
            value = xpc_dictionary_get_value(a1, "attachments_cache");
            if (value)
            {
              v15 = value;
              if (!*(_QWORD *)(v2 + 48))
                *(_QWORD *)(v2 + 48) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
              applier[0] = MEMORY[0x1E0C809B0];
              applier[1] = 3221225472;
              applier[2] = sub_1ABBA30F0;
              applier[3] = &unk_1E5AB5E88;
              applier[4] = v2;
              xpc_array_apply(v15, applier);
            }
            v16 = xpc_dictionary_get_value(a1, "handle_cache");
            if (v16)
              *(_QWORD *)(v2 + 32) = _IMDCopyIMDHandleRecordFromXPCObjectClient(v16);
            v17 = xpc_dictionary_get_value(a1, "other_handle_cache");
            if (v17)
              *(_QWORD *)(v2 + 40) = _IMDCopyIMDHandleRecordFromXPCObjectClient(v17);
            break;
        }
        break;
      }
    }
    v18 = xpc_dictionary_get_value(a1, "threadCountsByPart");
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 24), 0);
    valuePtr = 0;
    p_valuePtr = &valuePtr;
    v27 = 0x3052000000;
    v28 = sub_1ABBA3154;
    v29 = sub_1ABBA3164;
    v30 = 0;
    if (v18 && ValueAtIndex)
    {
      v24[0] = MEMORY[0x1E0C809B0];
      v24[1] = 3221225472;
      v24[2] = sub_1ABBA3170;
      v24[3] = &unk_1E5AB5EB0;
      v24[4] = &valuePtr;
      xpc_dictionary_apply(v18, v24);
      v20 = *(const void **)(v2 + 56);
      if (v20)
      {
        CFRelease(v20);
        *(_QWORD *)(v2 + 56) = 0;
      }
      *(_QWORD *)(v2 + 56) = p_valuePtr[5];
    }
    _Block_object_dispose(&valuePtr, 8);
    *(_QWORD *)(v2 + 16) = xpc_dictionary_get_int64(a1, "recordIdentifier");
  }
  return v2;
}

void sub_1ABB9D26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void *IMDMessageRecordCreateFromRecordID(uint64_t a1, uint64_t a2)
{
  if ((IMDIsRunningInDatabaseServerProcess() & 1) != 0)
    return IMDMessageRecordCreateFromRecordIDWithLock(a1, a2, 1);
  else
    return (const void *)IMDMessageRecordCopyMessageForRowID(a2);
}

const void *IMDMessageRecordCreateFromRecordIDUnlocked(uint64_t a1, uint64_t a2)
{
  return IMDMessageRecordCreateFromRecordIDWithLock(a1, a2, 0);
}

uint64_t IMDMessageRecordGetIdentifier(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 16);
  v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = 138412290;
    v4 = 0;
    _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Attempted to get record identifier for NULL message record: %@", (uint8_t *)&v3, 0xCu);
  }
  return 0;
}

uint64_t IMDMessageRecordGetRecordIdentifier(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    return (int)CSDBRecordGetID();
  v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = 138412290;
    v4 = 0;
    _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Attempted to get record identifier for NULL record: %@", (uint8_t *)&v3, 0xCu);
  }
  return 0;
}

uint64_t IMDMessageRecordCopyGUID(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABB9D540;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC59948(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABB9D528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB9D540(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDMessageRecordCopyGUIDUnlocked(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABB9D6AC;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC599B8(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABB9D694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB9D6AC(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDMessageRecordCopyText(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 1);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABB9D818;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC59A28(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABB9D800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB9D818(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDMessageRecordGetItemType(uint64_t a1, int a2)
{
  const void *ValueAtIndex;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = -1;
  if (!a1)
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC59A98(v4, v5, v6, v7, v8, v9, v10, v11);
    goto LABEL_11;
  }
  if (!*(_QWORD *)(a1 + 24))
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_1ABB9D99C;
    v13[3] = &unk_1E5AB2298;
    v13[4] = &v14;
    v13[5] = a1;
    if (a2)
      _IMDPerformBlock((uint64_t)v13);
    else
      sub_1ABB9D99C((uint64_t)v13);
LABEL_11:
    v3 = v15[3];
    goto LABEL_12;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 40);
  v3 = (uint64_t)ValueAtIndex;
  if (ValueAtIndex && *MEMORY[0x1E0D18630])
    v3 = ((uint64_t (*)(const void *))*MEMORY[0x1E0D18630])(ValueAtIndex);
LABEL_12:
  _Block_object_dispose(&v14, 8);
  return v3;
}

void sub_1ABB9D97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB9D99C(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDMessageRecordGetDate(uint64_t a1, int a2)
{
  const __CFArray *v4;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = -1;
  if (a1)
  {
    v4 = *(const __CFArray **)(a1 + 24);
    if (v4
      && (ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v4, 14), (v6 = ValueAtIndex) != 0)
      && (!*MEMORY[0x1E0D18610]
       || (v6 = (const __CFNumber *)((uint64_t (*)(const __CFNumber *))*MEMORY[0x1E0D18610])(ValueAtIndex)) != 0))
    {
      CFNumberGetValue(v6, kCFNumberSInt64Type, v19 + 3);
      CFRelease(v6);
    }
    else
    {
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = sub_1ABB9DB4C;
      v17[3] = &unk_1E5AB2298;
      v17[4] = &v18;
      v17[5] = a1;
      if (a2)
        _IMDPerformBlock((uint64_t)v17);
      else
        sub_1ABB9DB4C((uint64_t)v17);
    }
  }
  else
  {
    v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC59B08(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v15 = v19[3];
  _Block_object_dispose(&v18, 8);
  return v15;
}

void sub_1ABB9DB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB9DB4C(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const __CFNumber *v4;
  const __CFNumber *v5;

  v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    v4 = (const __CFNumber *)CSDBRecordCopyProperty();
    if (v4)
    {
      v5 = v4;
      CFNumberGetValue(v4, kCFNumberSInt64Type, (void *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
      CFRelease(v5);
    }
    CFRelease(v3);
  }
}

uint64_t IMDMessageRecordGetScheduleType(uint64_t a1, int a2)
{
  const __CFArray *v4;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = -1;
  if (a1)
  {
    v4 = *(const __CFArray **)(a1 + 24);
    if (v4
      && (ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v4, 87), (v6 = ValueAtIndex) != 0)
      && (!*MEMORY[0x1E0D18630]
       || (v6 = (const __CFNumber *)((uint64_t (*)(const __CFNumber *))*MEMORY[0x1E0D18630])(ValueAtIndex)) != 0))
    {
      CFNumberGetValue(v6, kCFNumberSInt64Type, v19 + 3);
      CFRelease(v6);
    }
    else
    {
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = sub_1ABB9DD20;
      v17[3] = &unk_1E5AB2298;
      v17[4] = &v18;
      v17[5] = a1;
      if (a2)
        _IMDPerformBlock((uint64_t)v17);
      else
        sub_1ABB9DD20((uint64_t)v17);
    }
  }
  else
  {
    v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC59B78(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v15 = v19[3];
  _Block_object_dispose(&v18, 8);
  return v15;
}

void sub_1ABB9DD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB9DD20(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDMessageRecordGetScheduleState(uint64_t a1, int a2)
{
  const __CFArray *v4;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = -1;
  if (a1)
  {
    v4 = *(const __CFArray **)(a1 + 24);
    if (v4
      && (ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v4, 88), (v6 = ValueAtIndex) != 0)
      && (!*MEMORY[0x1E0D18630]
       || (v6 = (const __CFNumber *)((uint64_t (*)(const __CFNumber *))*MEMORY[0x1E0D18630])(ValueAtIndex)) != 0))
    {
      CFNumberGetValue(v6, kCFNumberSInt64Type, v19 + 3);
      CFRelease(v6);
    }
    else
    {
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = sub_1ABB9DED0;
      v17[3] = &unk_1E5AB2298;
      v17[4] = &v18;
      v17[5] = a1;
      if (a2)
        _IMDPerformBlock((uint64_t)v17);
      else
        sub_1ABB9DED0((uint64_t)v17);
    }
  }
  else
  {
    v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC59BE8(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v15 = v19[3];
  _Block_object_dispose(&v18, 8);
  return v15;
}

void sub_1ABB9DEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB9DED0(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDMessageRecordWasDeduplicated(uint64_t a1)
{
  const void *ValueAtIndex;
  unsigned __int8 v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 36);
      v2 = ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18630])
        return ((unsigned __int8 (*)(const void *))*MEMORY[0x1E0D18630])(ValueAtIndex);
    }
    else
    {
      v13 = 0;
      v14 = &v13;
      v15 = 0x2020000000;
      v16 = 0;
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = sub_1ABB9E03C;
      v12[3] = &unk_1E5AB2298;
      v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      v2 = *((_BYTE *)v14 + 24);
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC59C58(v3, v4, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  return v2;
}

void sub_1ABB9E024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABB9E03C(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

void IMDMessageRecordSetWasDeduplicated(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];
  char v11;

  if (a1)
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_1ABB9E12C;
    v10[3] = &unk_1E5AB49F0;
    v10[4] = a1;
    v11 = a2;
    _IMDPerformBlock((uint64_t)v10);
  }
  else
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC59CC4(a2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void sub_1ABB9E12C(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  v1 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v1)
  {
    v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

_QWORD *IMDMessageRecordCopyOtherHandle(const __CFArray **a1)
{
  return sub_1ABB9E184(a1, 1);
}

_QWORD *sub_1ABB9E184(const __CFArray **a1, int a2)
{
  _QWORD *v2;
  const __CFArray *v3;
  const void *ValueAtIndex;
  uint64_t v5;
  const void *v6;
  void (*v8[5])(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1;
  if (a1)
  {
    v15 = 0;
    v16 = &v15;
    v17 = 0x2020000000;
    v18 = -1;
    v3 = a1[3];
    if (v3)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v3, 41);
      v5 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18630])
        v5 = ((uint64_t (*)(const void *))*MEMORY[0x1E0D18630])(ValueAtIndex);
    }
    else
    {
      v9 = MEMORY[0x1E0C809B0];
      v10 = 3221225472;
      v11 = (uint64_t)sub_1ABBA2F70;
      v12 = &unk_1E5AB2298;
      v13 = &v15;
      v14 = v2;
      if (a2)
        _IMDPerformBlock((uint64_t)&v9);
      else
        sub_1ABBA2F70((uint64_t)&v9);
      v5 = v16[3];
    }
    _Block_object_dispose(&v15, 8);
    v9 = 0;
    v10 = (uint64_t)&v9;
    v11 = 0x2020000000;
    v12 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v2 = (_QWORD *)IMDHandleRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], v5);
      *(_QWORD *)(v10 + 24) = v2;
    }
    else
    {
      v6 = (const void *)v2[5];
      if (v6)
      {
        v2 = CFRetain(v6);
      }
      else
      {
        v8[0] = (void (*)(void))MEMORY[0x1E0C809B0];
        v8[1] = (void (*)(void))3221225472;
        v8[2] = (void (*)(void))sub_1ABBA2F40;
        v8[3] = (void (*)(void))&unk_1E5AAF630;
        v8[4] = (void (*)(void))&v9;
        __syncXPCIMDMessageRecordCopyOtherHandle_IPCAction(v8, v2[2]);
        v2 = *(_QWORD **)(v10 + 24);
      }
    }
    _Block_object_dispose(&v9, 8);
  }
  return v2;
}

void sub_1ABB9E310(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

_QWORD *IMDMessageRecordCopyHandle(const __CFArray **a1)
{
  return sub_1ABB9E340(a1, 1);
}

_QWORD *sub_1ABB9E340(const __CFArray **a1, int a2)
{
  _QWORD *v2;
  const __CFArray *v3;
  const void *ValueAtIndex;
  uint64_t v5;
  const void *v6;
  void (*v8[5])(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1;
  if (a1)
  {
    v15 = 0;
    v16 = &v15;
    v17 = 0x2020000000;
    v18 = -1;
    v3 = a1[3];
    if (v3)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v3, 4);
      v5 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18630])
        v5 = ((uint64_t (*)(const void *))*MEMORY[0x1E0D18630])(ValueAtIndex);
    }
    else
    {
      v9 = MEMORY[0x1E0C809B0];
      v10 = 3221225472;
      v11 = (uint64_t)sub_1ABBA2FF8;
      v12 = &unk_1E5AB2298;
      v13 = &v15;
      v14 = v2;
      if (a2)
        _IMDPerformBlock((uint64_t)&v9);
      else
        sub_1ABBA2FF8((uint64_t)&v9);
      v5 = v16[3];
    }
    _Block_object_dispose(&v15, 8);
    v9 = 0;
    v10 = (uint64_t)&v9;
    v11 = 0x2020000000;
    v12 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v2 = (_QWORD *)IMDHandleRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], v5);
      *(_QWORD *)(v10 + 24) = v2;
    }
    else
    {
      v6 = (const void *)v2[4];
      if (v6)
      {
        v2 = CFRetain(v6);
      }
      else
      {
        v8[0] = (void (*)(void))MEMORY[0x1E0C809B0];
        v8[1] = (void (*)(void))3221225472;
        v8[2] = (void (*)(void))sub_1ABBA2FC8;
        v8[3] = (void (*)(void))&unk_1E5AAF630;
        v8[4] = (void (*)(void))&v9;
        __syncXPCIMDMessageRecordCopyHandle_IPCAction(v8, v2[2]);
        v2 = *(_QWORD **)(v10 + 24);
      }
    }
    _Block_object_dispose(&v9, 8);
  }
  return v2;
}

void sub_1ABB9E4CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t IMDMessageRecordCopyChats(uint64_t a1)
{
  uint64_t Identifier;
  int64_t v3;
  uint64_t v4;
  void (*v6[5])(void);
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    Identifier = IMDMessageRecordGetIdentifier(a1);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1ABB9E610;
    v7[3] = &unk_1E5AB2200;
    v7[4] = &v8;
    v7[5] = Identifier;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT chat_id FROM chat_message_join WHERE message_id = ?;"),
      (uint64_t)v7);
  }
  else
  {
    v3 = IMDMessageRecordGetIdentifier(a1);
    v6[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v6[1] = (void (*)(void))3221225472;
    v6[2] = (void (*)(void))sub_1ABB9E6E8;
    v6[3] = (void (*)(void))&unk_1E5AAF630;
    v6[4] = (void (*)(void))&v8;
    __syncXPCIMDMessageRecordCopyChats_IPCAction(v6, v3);
  }
  v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1ABB9E5EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB9E610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  const CFArrayCallBacks *v8;
  int v9;
  _OWORD *v10;
  const void *v11;

  CSDBSqliteBindInt();
  result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if ((_DWORD)result == 100)
  {
    v7 = *MEMORY[0x1E0C9AE00];
    v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
      v9 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      v10 = IMDChatRecordCreateFromRecordIDUnlocked(v7, v9);
      if (v10)
      {
        v11 = v10;
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v10);
        CFRelease(v11);
      }
      result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while ((_DWORD)result == 100);
  }
  return result;
}

xpc_object_t sub_1ABB9E6E8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABB9E760;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABB9E760(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  _QWORD *v6;
  const void *v7;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (void *)MEMORY[0x1AF435474]();
  v6 = _IMDCopyIMDChatRecordFromXPCObjectClient(a3);
  if (v6)
  {
    v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v6);
    CFRelease(v7);
  }
  objc_autoreleasePoolPop(v5);
  return 1;
}

uint64_t IMDMessageRecordCopyChatsForMessageIdentifier(int64_t a1)
{
  uint64_t v2;
  void (*v4[5])(void);
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_1ABB9E8F4;
    v5[3] = &unk_1E5AB2200;
    v5[4] = &v6;
    v5[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT chat_id FROM chat_message_join WHERE message_id = ?;"),
      (uint64_t)v5);
  }
  else
  {
    v4[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v4[1] = (void (*)(void))3221225472;
    v4[2] = (void (*)(void))sub_1ABB9E9CC;
    v4[3] = (void (*)(void))&unk_1E5AAF630;
    v4[4] = (void (*)(void))&v6;
    __syncXPCIMDMessageRecordCopyChats_IPCAction(v4, a1);
  }
  v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_1ABB9E8D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABB9E8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  const CFArrayCallBacks *v8;
  int v9;
  _OWORD *v10;
  const void *v11;

  CSDBSqliteBindInt();
  result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if ((_DWORD)result == 100)
  {
    v7 = *MEMORY[0x1E0C9AE00];
    v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
      v9 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      v10 = IMDChatRecordCreateFromRecordIDUnlocked(v7, v9);
      if (v10)
      {
        v11 = v10;
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v10);
        CFRelease(v11);
      }
      result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while ((_DWORD)result == 100);
  }
  return result;
}

xpc_object_t sub_1ABB9E9CC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABB9EA44;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABB9EA44(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  _QWORD *v6;
  const void *v7;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (void *)MEMORY[0x1AF435474]();
  v6 = _IMDCopyIMDChatRecordFromXPCObjectClient(a3);
  if (v6)
  {
    v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v6);
    CFRelease(v7);
  }
  objc_autoreleasePoolPop(v5);
  return 1;
}

CFStringRef IMDMessageRecordChatForMessageGUID(CFStringRef theString)
{
  CFStringRef v1;
  void (*v3[5])(void);
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = theString;
  if (theString)
  {
    if (CFStringGetLength(theString))
    {
      v5 = 0;
      v6 = &v5;
      v7 = 0x2020000000;
      v8 = 0;
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v4[0] = MEMORY[0x1E0C809B0];
        v4[1] = 3221225472;
        v4[2] = sub_1ABB9EBF0;
        v4[3] = &unk_1E5AB2200;
        v4[4] = &v5;
        v4[5] = v1;
        _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT c.rowid FROM chat c INNER JOIN chat_message_join j   ON c.rowid = j.chat_id INNER JOIN message m   ON m.rowid = j.message_id WHERE m.guid = ?;"),
          (uint64_t)v4);
      }
      else
      {
        v3[0] = (void (*)(void))MEMORY[0x1E0C809B0];
        v3[1] = (void (*)(void))3221225472;
        v3[2] = (void (*)(void))sub_1ABB9EC98;
        v3[3] = (void (*)(void))&unk_1E5AAF630;
        v3[4] = (void (*)(void))&v5;
        __syncXPCIMDMessageRecordChatForMessageGUID_IPCAction(v3, (uint64_t)v1);
      }
      v1 = (CFStringRef)v6[3];
      _Block_object_dispose(&v5, 8);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void sub_1ABB9EBD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1ABB9EBF0(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  int ID;

  CSDBSqliteBindTextFromCFString();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      ID = CSDBRecordGetID();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IMDChatRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], ID);
    }
    CFRelease(v3);
  }
}

_QWORD *sub_1ABB9EC98(uint64_t a1, void *a2)
{
  _QWORD *result;

  result = _IMDCopyIMDChatRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyAttachmentsWithLock(uint64_t a1)
{
  uint64_t Identifier;

  Identifier = IMDMessageRecordGetIdentifier(a1);
  return IMDMessageRecordCopyAttachmentsForIDWithLock(Identifier);
}

uint64_t IMDMessageRecordCopyAttachmentsForIDWithLock(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABB9EFD8;
  v3[3] = &unk_1E5AB2200;
  v3[4] = &v4;
  v3[5] = a1;
  _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT attachment_id FROM message_attachment_join WHERE message_id = ? LIMIT ?;"),
    (uint64_t)v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1ABB9ED74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t IMDMessageRecordCopyAttachments(uint64_t a1)
{
  uint64_t Identifier;
  const void *v4;
  CFTypeRef v5;
  int64_t v6;
  void (*v7[5])(void);
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (IMDIsRunningInDatabaseServerProcess())
  {
    Identifier = IMDMessageRecordGetIdentifier(a1);
    return IMDMessageRecordCopyAttachmentsForIDWithLock(Identifier);
  }
  else
  {
    v8 = 0;
    v9 = &v8;
    v10 = 0x2020000000;
    v11 = 0;
    v4 = *(const void **)(a1 + 48);
    if (v4)
    {
      v5 = CFRetain(v4);
    }
    else
    {
      v6 = IMDMessageRecordGetIdentifier(a1);
      v7[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v7[1] = (void (*)(void))3221225472;
      v7[2] = (void (*)(void))sub_1ABB9EE7C;
      v7[3] = (void (*)(void))&unk_1E5AAF630;
      v7[4] = (void (*)(void))&v8;
      __syncXPCIMDMessageRecordCopyAttachments_IPCAction(v7, v6);
      v5 = (CFTypeRef)v9[3];
    }
    _Block_object_dispose(&v8, 8);
    return (uint64_t)v5;
  }
}

void sub_1ABB9EE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

xpc_object_t sub_1ABB9EE7C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABB9EEF4;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABB9EEF4(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDAttachmentRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

const __CFString *IMDMessageRecordCopyThreadCountsByPart(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  const __CFString *v4;
  const void *v5;

  v2 = IMDIsRunningInDatabaseServerProcess();
  if ((_DWORD)v2)
  {
    v3 = (const __CFString *)IMDMessageRecordCopyGUID(v2, a1);
    v4 = IMDMessageRecordCountMessagesWithThreadOriginatorGroupedByParts(v3);
    if (v3)
      CFRelease(v3);
  }
  else
  {
    v5 = *(const void **)(a1 + 56);
    if (v5)
      return (const __CFString *)CFRetain(v5);
    return 0;
  }
  return v4;
}

void sub_1ABB9EFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6;
  uint64_t v7;
  const CFArrayCallBacks *v8;
  int v9;
  const void *v10;
  int ID;
  const void *v12;
  void *v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  __CFArray *v17;
  uint8_t buf[4];
  void *v19;
  uint64_t v20;
  CFRange v21;

  v20 = *MEMORY[0x1E0C80C00];
  CSDBSqliteBindInt();
  CSDBSqliteBindInt64();
  if (sqlite3_step(*(sqlite3_stmt **)(a4 + 8)) != 100)
    goto LABEL_20;
  v6 = 0;
  v7 = *MEMORY[0x1E0C9AE00];
  v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  do
  {
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
    v9 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
    v10 = (const void *)IMDAttachmentRecordCopyAttachmentRecordUnlocked(v9);
    if (v10)
    {
      ID = CSDBRecordGetID();
      v12 = IMDAttachmentRecordCreateFromRecordIDUnlocked(v7, ID);
      if (v12)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v12);
        if ((v6 & 1) != 0)
        {
          v6 = 1;
        }
        else
        {
          v13 = (void *)IMDAttachmentRecordCopyGUID(v7, (uint64_t)v12);
          if (v13)
          {
            v14 = IMFileTransferGUIDIsTemporary();
            v6 = v14;
            if (v14)
            {
              if (IMOSLoggingEnabled())
              {
                v15 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  v19 = v13;
                  _os_log_impl(&dword_1ABB60000, v15, OS_LOG_TYPE_INFO, "Found legacy GUID %@ in list of attachments", buf, 0xCu);
                }
              }
            }

          }
          else
          {
            v6 = 0;
          }
        }
        CFRelease(v12);
      }
      CFRelease(v10);
    }
  }
  while (sqlite3_step(*(sqlite3_stmt **)(a4 + 8)) == 100);
  if ((v6 & 1) == 0)
  {
LABEL_20:
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v17 = *(__CFArray **)(v16 + 24);
    if (v17)
    {
      v21.length = CFArrayGetCount(*(CFArrayRef *)(v16 + 24));
      v21.location = 0;
      CFArraySortValues(v17, v21, (CFComparatorFunction)sub_1ABB9F218, 0);
    }
  }
}

uint64_t sub_1ABB9F218(uint64_t a1, uint64_t a2)
{
  CFComparisonResult v3;
  uint64_t v5;
  const __CFString *v6;
  const __CFString *v7;

  if (!(a1 | a2))
    return 0;
  if (a1 && !a2)
    return 1;
  if (!a1 && a2)
    return -1;
  v5 = *MEMORY[0x1E0C9AE00];
  v6 = (const __CFString *)IMDAttachmentRecordCopyGUID(*MEMORY[0x1E0C9AE00], a1);
  v7 = (const __CFString *)IMDAttachmentRecordCopyGUID(v5, a2);
  v3 = CFStringCompare(v6, v7, 0x40uLL);
  if (v6)
    CFRelease(v6);
  if (v7)
    CFRelease(v7);
  return v3;
}

__n128 IMDMessageRecordBulkCopyForPhotos(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, void *a6, void *a7, void *a8, void *a9, _QWORD *a10, _QWORD *a11, CFNumberRef *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, const void **a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _BYTE *a20,_BYTE *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,void *a36,_QWORD *a37,const void **a38,_QWORD *a39,uint64_t a40,_QWORD *a41,_QWORD *a42,uint64_t a43,uint64_t a44,uint64_t a45,_QWORD *a46,void *a47)
{
  __n128 result;
  uint64_t v48;

  IMDMessageRecordBulkCopy(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    v48,
    a41,
    a42,
    a46,
    a47,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  return result;
}

void IMDMessageRecordBulkCopy(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, void *a6, void *a7, void *a8, void *a9, _QWORD *a10, _QWORD *a11, CFNumberRef *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, const void **a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _BYTE *a20,_BYTE *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,void *a36,_QWORD *a37,const void **a38,_QWORD *a39,uint64_t a40,_QWORD *a41,_QWORD *a42,_QWORD *a43,void *a44,_QWORD *a45,_QWORD *a46,_QWORD *a47,_QWORD *a48,void *a49,void *a50,_QWORD *a51,_QWORD *a52,_QWORD *a53,const void **a54,const void **a55)
{
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const __CFArray *v63;
  const void *ValueAtIndex;
  const void *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  const void *v69;
  const void *v70;
  const void *v71;
  const void *v72;
  const void *v73;
  const void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const __CFNumber *v78;
  const __CFNumber *v79;
  const __CFNumber *v80;
  const __CFNumber *v81;
  const __CFNumber *v82;
  const void *v83;
  const void *v84;
  const void *v85;
  const void *v86;
  const void *v87;
  const void *v88;
  const void *v89;
  const void *v90;
  const void *v91;
  const void *v92;
  const void *v93;
  const void *v94;
  const void *v95;
  const void *v96;
  const void *v97;
  const void *v98;
  const void *v99;
  const void *v100;
  const void *v101;
  const void *v102;
  uint64_t v103;
  signed int v104;
  const void *v105;
  const void *v106;
  const void *v107;
  const void *v108;
  const void *v109;
  const void *v110;
  const void *v111;
  const void *v112;
  const void *v113;
  const void *v114;
  const void *v115;
  const void *v116;
  const void *v117;
  const void *v118;
  const void *v119;
  const void *v120;
  const __CFNumber *v121;
  const void *v122;
  const void *v123;
  const void *v124;
  const void *v125;
  const void *v126;
  const void *v127;
  const void *v128;
  const void *v129;
  const __CFNumber *v130;
  const __CFNumber *v131;
  const void *v132;
  const void *v133;
  const void *v134;
  const void *v135;
  const void *v136;
  const void *v137;
  const void *v138;
  const void *v139;
  const void *v140;
  const void *v141;
  const void *v142;
  const void *v143;
  const void *v144;
  const void *v145;
  const void *v146;
  _BOOL8 v147;
  const void *v148;
  const void *v149;
  const void *v150;
  const void *v151;
  const void *v152;
  const void *v153;
  const void *v154;
  const void *v155;
  const void *v156;
  const void *v157;
  const void *v158;
  const void *v159;
  const void *v160;
  uint64_t valuePtr;
  _QWORD v170[59];

  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v170[4] = a1;
      v170[5] = a3;
      v170[6] = a6;
      v170[7] = a7;
      v170[8] = a8;
      v170[9] = a9;
      v170[10] = a4;
      v170[11] = a18;
      v170[12] = a19;
      v170[13] = a5;
      v170[14] = a10;
      v170[15] = a16;
      v170[16] = a20;
      v170[17] = a21;
      v170[18] = a2;
      v170[19] = a23;
      v170[20] = a25;
      v170[21] = a26;
      v170[22] = a27;
      v170[23] = a28;
      v170[24] = a29;
      v170[25] = a31;
      v170[26] = a32;
      v170[27] = a49;
      v170[0] = MEMORY[0x1E0C809B0];
      v170[2] = sub_1ABBA0368;
      v170[1] = 3221225472;
      v170[3] = &unk_1E5AB4AB0;
      v170[28] = a50;
      v170[29] = a52;
      v170[30] = a12;
      v170[31] = a11;
      v170[32] = a14;
      v170[33] = a15;
      v170[34] = a17;
      v170[35] = a13;
      v170[36] = a22;
      v170[37] = a24;
      v170[38] = a30;
      v170[39] = a33;
      v170[40] = a34;
      v170[41] = a35;
      v170[42] = a36;
      v170[43] = a37;
      v170[44] = a38;
      v170[45] = a39;
      v170[46] = a41;
      v170[47] = a42;
      v170[48] = a43;
      v170[49] = a44;
      v170[50] = a45;
      v170[51] = a46;
      v170[52] = a47;
      v170[53] = a48;
      v170[54] = a51;
      v170[55] = a53;
      v170[56] = a54;
      v170[57] = a55;
      _IMDPerformBlock((uint64_t)v170);
    }
    else
    {
      v63 = *(const __CFArray **)(a1 + 24);
      if (v63)
      {
        valuePtr = 0;
        ValueAtIndex = CFArrayGetValueAtIndex(v63, 18);
        v147 = ValueAtIndex != 0;
        v148 = ValueAtIndex;
        v146 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 19);
        v145 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 20);
        v144 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 21);
        v143 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 22);
        v142 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 23);
        v149 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 24);
        v150 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 25);
        v151 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 26);
        v152 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 27);
        v153 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 28);
        v160 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 35);
        v154 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 29);
        v155 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 30);
        v156 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 31);
        v157 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 17);
        v158 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 72);
        v159 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 73);
        v65 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 37);
        v66 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 38);
        v67 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 46);
        v68 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 63);
        v69 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 66);
        v70 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 67);
        v141 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 76);
        v140 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 78);
        v139 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 79);
        v138 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 80);
        v71 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 82);
        v72 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 85);
        v73 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 89);
        v74 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 86);
        v75 = v147 | 2;
        if (!v146)
          v75 = v147;
        if (v145)
          v75 |= 4uLL;
        if (v144)
          v75 |= 8uLL;
        if (v143)
          v75 |= 0x20uLL;
        if (v142)
          v75 |= 0x40uLL;
        if (v149)
          v75 |= 0x800uLL;
        if (v150)
          v75 |= 0x2000uLL;
        if (v151)
          v75 |= 0x4000uLL;
        if (v152)
          v75 |= 0x8000uLL;
        if (v153)
          v75 |= 0x10000uLL;
        if (v154)
          v75 |= 0x20000uLL;
        if (v155)
          v75 |= 0x40000uLL;
        if (v156)
          v75 |= 0x80000uLL;
        if (v157)
          v75 |= 0x1000uLL;
        if (v158)
          v75 |= 0x400000000uLL;
        if (v159)
          v75 |= 0x800000000uLL;
        if (v160)
          v75 |= 0x100000uLL;
        if (v65)
          v75 |= 0x200000uLL;
        if (v66)
          v75 |= 0x400000uLL;
        if (v67)
          v75 |= 0x1000000uLL;
        if (v68)
          v75 |= 0x4000000uLL;
        if (v69)
          v75 |= 0x8000000uLL;
        if (v70)
          v75 |= 0x10000000uLL;
        if (v141)
          v75 |= 0x1000000000uLL;
        if (v140)
          v75 |= 0x200000000uLL;
        if (v139)
          v75 |= 0x8000000000uLL;
        if (v138)
          v75 |= 0x4000000000uLL;
        if (v73)
          v75 |= 0x80000000000uLL;
        if (v71)
          v75 |= 0x2000000000uLL;
        if (v72)
          v75 |= 0x20000000000uLL;
        v76 = v75 | 0x40000000000;
        if (!v74)
          v76 = v75;
        if (v148
          || v146
          || v145
          || v144
          || v143
          || v142
          || v149
          || v150
          || v151
          || v152
          || v153
          || v154
          || v155
          || v156
          || v157
          || v158
          || v159
          || v160
          || v65
          || v66
          || v67
          || v68
          || v69
          || v70
          || v141
          || v140
          || v139
          || v138
          || v73
          || v71
          || v72
          || v74)
        {
          valuePtr = v76;
        }
        v77 = v76;
        if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 49) == 1)
          valuePtr = v77 | 0x2000000;
        if (a12)
          *a12 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
        if (a3)
          *a3 = *(_QWORD *)(a1 + 16);
        if (a6)
        {
          v78 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 14);
          if (v78)
            CFNumberGetValue(v78, kCFNumberSInt64Type, a6);
        }
        if (a7)
        {
          v79 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 15);
          if (v79)
            CFNumberGetValue(v79, kCFNumberSInt64Type, a7);
        }
        if (a8)
        {
          v80 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 16);
          if (v80)
            CFNumberGetValue(v80, kCFNumberSInt64Type, a8);
        }
        if (a9)
        {
          v81 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 39);
          if (v81)
            CFNumberGetValue(v81, kCFNumberSInt64Type, a9);
        }
        if (a36)
        {
          v82 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 57);
          if (v82)
            CFNumberGetValue(v82, kCFNumberSInt64Type, a36);
        }
        if (a4)
          *a4 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 2);
        if (a18)
          *a18 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 13);
        if (a19)
          *a19 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 9);
        if (a2)
          *a2 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 40);
        if (a23)
          *a23 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 41);
        if (a25)
          *a25 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 43);
        if (a27)
          *a27 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 45);
        if (a26)
          *a26 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 44);
        if (a29)
          *a29 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 48);
        if (a28)
          *a28 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 47);
        if (a5)
        {
          v83 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
          v84 = v83;
          if (v83)
            CFRetain(v83);
          *a5 = v84;
        }
        if (a10)
        {
          v85 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 1);
          v86 = v85;
          if (v85)
            CFRetain(v85);
          *a10 = v86;
        }
        if (a16)
          *a16 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 4);
        if (a20)
          *a20 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 33);
        if (a21)
          *a21 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 35);
        if (a11)
        {
          v87 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 7);
          v88 = v87;
          if (v87)
            CFRetain(v87);
          *a11 = v88;
        }
        if (a24)
        {
          v89 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 42);
          v90 = v89;
          if (v89)
            CFRetain(v89);
          *a24 = v90;
        }
        if (a14)
        {
          v91 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 11);
          v92 = v91;
          if (v91)
            CFRetain(v91);
          *a14 = v92;
        }
        if (a15)
        {
          v93 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 12);
          v94 = v93;
          if (v93)
            CFRetain(v93);
          *a15 = v94;
        }
        if (a17)
        {
          v95 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 5);
          v96 = v95;
          if (v95)
            CFRetain(v95);
          *a17 = v96;
        }
        if (a13)
        {
          v97 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 10);
          v98 = v97;
          if (v97)
            CFRetain(v97);
          *a13 = v98;
        }
        if (a22)
        {
          v99 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 34);
          v100 = v99;
          if (v99)
            CFRetain(v99);
          *a22 = v100;
        }
        if (a30)
        {
          v101 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 50);
          v102 = v101;
          if (v101)
            CFRetain(v101);
          *a30 = v102;
        }
        if (a31)
          *a31 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 51);
        if (a32)
        {
          v103 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 55);
          v104 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 56);
          *a32 = v103;
          a32[1] = v104;
        }
        if (a33)
        {
          v105 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 52);
          v106 = v105;
          if (v105)
            CFRetain(v105);
          *a33 = v106;
        }
        if (a34)
        {
          v107 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 53);
          v108 = v107;
          if (v107)
            CFRetain(v107);
          *a34 = v108;
        }
        if (a35)
        {
          v109 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 54);
          v110 = v109;
          if (v109)
            CFRetain(v109);
          *a35 = v110;
        }
        if (a37)
        {
          v111 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 58);
          v112 = v111;
          if (v111)
            CFRetain(v111);
          *a37 = v112;
        }
        if (a38)
          *a38 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 59);
        if (a39)
        {
          v113 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 60);
          v114 = v113;
          if (v113)
            CFRetain(v113);
          *a39 = v114;
        }
        if (a41)
        {
          v115 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 61);
          v116 = v115;
          if (v115)
            CFRetain(v115);
          *a41 = v116;
        }
        if (a42)
        {
          v117 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 62);
          v118 = v117;
          if (v117)
            CFRetain(v117);
          *a42 = v118;
        }
        if (a43)
        {
          v119 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 64);
          v120 = v119;
          if (v119)
            CFRetain(v119);
          *a43 = v120;
        }
        if (a44)
        {
          v121 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 65);
          if (v121)
            CFNumberGetValue(v121, kCFNumberSInt64Type, a44);
        }
        if (a45)
        {
          v122 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 68);
          v123 = v122;
          if (v122)
            CFRetain(v122);
          *a45 = v123;
        }
        if (a46)
        {
          v124 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 69);
          v125 = v124;
          if (v124)
            CFRetain(v124);
          *a46 = v125;
        }
        if (a47)
        {
          v126 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 70);
          v127 = v126;
          if (v126)
            CFRetain(v126);
          *a47 = v127;
        }
        if (a48)
        {
          v128 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 71);
          v129 = v128;
          if (v128)
            CFRetain(v128);
          *a48 = v129;
        }
        if (a49)
        {
          v130 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 77);
          if (v130)
            CFNumberGetValue(v130, kCFNumberSInt64Type, a49);
        }
        if (a50)
        {
          v131 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 75);
          if (v131)
            CFNumberGetValue(v131, kCFNumberSInt64Type, a50);
        }
        if (a51)
        {
          v132 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 81);
          v133 = v132;
          if (v132)
            CFRetain(v132);
          *a51 = v133;
        }
        if (a52)
        {
          v134 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 83);
          v135 = v134;
          if (v134)
            CFRetain(v134);
          *a52 = v135;
        }
        if (a53)
        {
          v136 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 84);
          v137 = v136;
          if (v136)
            CFRetain(v136);
          *a53 = v137;
        }
        if (a54)
          *a54 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 87);
        if (a55)
          *a55 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 88);
      }
    }
  }
  else
  {
    v55 = IMLogHandleForCategory();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      sub_1ABC59D3C(v55, v56, v57, v58, v59, v60, v61, v62);
  }
}

void sub_1ABBA0368(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t Property;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t valuePtr;

  v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    if (*(_QWORD *)(a1 + 40))
      **(_QWORD **)(a1 + 40) = (int)CSDBRecordGetID();
    if (*(_QWORD *)(a1 + 48))
      **(_QWORD **)(a1 + 48) = sub_1ABBA0F6C();
    if (*(_QWORD *)(a1 + 56))
      **(_QWORD **)(a1 + 56) = sub_1ABBA0F6C();
    if (*(_QWORD *)(a1 + 64))
      **(_QWORD **)(a1 + 64) = sub_1ABBA0F6C();
    if (*(_QWORD *)(a1 + 72))
      **(_QWORD **)(a1 + 72) = sub_1ABBA0F6C();
    if (*(_QWORD *)(a1 + 80))
      **(_QWORD **)(a1 + 80) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 88))
      **(_QWORD **)(a1 + 88) = (int)CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 96))
      **(_QWORD **)(a1 + 96) = (int)CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 104))
      **(_QWORD **)(a1 + 104) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 112))
      **(_QWORD **)(a1 + 112) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 120))
      **(_QWORD **)(a1 + 120) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 128))
      **(_BYTE **)(a1 + 128) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 136))
      **(_BYTE **)(a1 + 136) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 144))
      **(_QWORD **)(a1 + 144) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 152))
      **(_QWORD **)(a1 + 152) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 160))
      **(_QWORD **)(a1 + 160) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 168))
      **(_QWORD **)(a1 + 168) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 176))
      **(_QWORD **)(a1 + 176) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 184))
      **(_QWORD **)(a1 + 184) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 192))
      **(_QWORD **)(a1 + 192) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 200))
      **(_QWORD **)(a1 + 200) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 208))
    {
      Property = CSDBRecordGetProperty();
      v5 = CSDBRecordGetProperty();
      v6 = *(uint64_t **)(a1 + 208);
      *v6 = Property;
      v6[1] = v5;
    }
    if (*(_QWORD *)(a1 + 216))
      **(_QWORD **)(a1 + 216) = sub_1ABBA0F6C();
    if (*(_QWORD *)(a1 + 224))
      **(_QWORD **)(a1 + 224) = sub_1ABBA0F6C();
    if (*(_QWORD *)(a1 + 232))
      **(_QWORD **)(a1 + 232) = CSDBRecordCopyProperty();
    valuePtr = 0;
    v7 = CSDBRecordGetProperty();
    v8 = CSDBRecordGetProperty();
    v9 = CSDBRecordGetProperty();
    v10 = CSDBRecordGetProperty();
    v11 = CSDBRecordGetProperty();
    v15 = CSDBRecordGetProperty();
    v17 = CSDBRecordGetProperty();
    v19 = CSDBRecordGetProperty();
    v21 = CSDBRecordGetProperty();
    v23 = CSDBRecordGetProperty();
    v24 = CSDBRecordGetProperty();
    v38 = CSDBRecordGetProperty();
    v12 = CSDBRecordGetProperty();
    v13 = CSDBRecordGetProperty();
    v16 = CSDBRecordGetProperty();
    v18 = CSDBRecordGetProperty();
    v20 = CSDBRecordGetProperty();
    v22 = CSDBRecordGetProperty();
    v25 = CSDBRecordGetProperty();
    v26 = CSDBRecordGetProperty();
    v27 = CSDBRecordGetProperty();
    v28 = CSDBRecordGetProperty();
    v29 = CSDBRecordGetProperty();
    v30 = CSDBRecordGetProperty();
    v31 = CSDBRecordGetProperty();
    v32 = CSDBRecordGetProperty();
    v33 = CSDBRecordGetProperty();
    v34 = CSDBRecordGetProperty();
    v35 = CSDBRecordGetProperty();
    v36 = CSDBRecordGetProperty();
    v37 = CSDBRecordGetProperty();
    v14 = CSDBRecordGetProperty();
    if (v7)
      valuePtr |= 1uLL;
    if (v8)
      valuePtr |= 2uLL;
    if (v9)
      valuePtr |= 4uLL;
    if (v10)
      valuePtr |= 8uLL;
    if (v11)
      valuePtr |= 0x20uLL;
    if (v15)
      valuePtr |= 0x40uLL;
    if (v17)
      valuePtr |= 0x800uLL;
    if (v19)
      valuePtr |= 0x2000uLL;
    if (v21)
      valuePtr |= 0x4000uLL;
    if (v23)
      valuePtr |= 0x8000uLL;
    if (v24)
      valuePtr |= 0x10000uLL;
    if (v12)
      valuePtr |= 0x20000uLL;
    if (v13)
      valuePtr |= 0x40000uLL;
    if (v16)
      valuePtr |= 0x80000uLL;
    if (v18)
      valuePtr |= 0x1000uLL;
    if (v20)
      valuePtr |= 0x400000000uLL;
    if (v22)
      valuePtr |= 0x800000000uLL;
    if (v38)
      valuePtr |= 0x100000uLL;
    if (v25)
      valuePtr |= 0x200000uLL;
    if (v26)
      valuePtr |= 0x400000uLL;
    if (v27)
      valuePtr |= 0x1000000uLL;
    if (v28)
      valuePtr |= 0x4000000uLL;
    if (v29)
      valuePtr |= 0x8000000uLL;
    if (v30)
      valuePtr |= 0x10000000uLL;
    if (v31)
      valuePtr |= 0x1000000000uLL;
    if (v32)
      valuePtr |= 0x200000000uLL;
    if (v33)
      valuePtr |= 0x8000000000uLL;
    if (v34)
      valuePtr |= 0x4000000000uLL;
    if (v14)
      valuePtr |= 0x80000000000uLL;
    if (v35)
      valuePtr |= 0x2000000000uLL;
    if (v36)
      valuePtr |= 0x20000000000uLL;
    if (v37)
      valuePtr |= 0x40000000000uLL;
    if (CSDBRecordGetProperty() == 1)
      valuePtr |= 0x2000000uLL;
    if (*(_QWORD *)(a1 + 240))
      **(_QWORD **)(a1 + 240) = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (*(_QWORD *)(a1 + 248))
      **(_QWORD **)(a1 + 248) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 256))
      **(_QWORD **)(a1 + 256) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 264))
      **(_QWORD **)(a1 + 264) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 272))
      **(_QWORD **)(a1 + 272) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 280))
      **(_QWORD **)(a1 + 280) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 288))
      **(_QWORD **)(a1 + 288) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 296))
      **(_QWORD **)(a1 + 296) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 304))
      **(_QWORD **)(a1 + 304) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 312))
      **(_QWORD **)(a1 + 312) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 320))
      **(_QWORD **)(a1 + 320) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 328))
      **(_QWORD **)(a1 + 328) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 336))
      **(_QWORD **)(a1 + 336) = sub_1ABBA0F6C();
    if (*(_QWORD *)(a1 + 344))
      **(_QWORD **)(a1 + 344) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 352))
      **(_QWORD **)(a1 + 352) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 360))
      **(_QWORD **)(a1 + 360) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 368))
      **(_QWORD **)(a1 + 368) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 376))
      **(_QWORD **)(a1 + 376) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 384))
      **(_QWORD **)(a1 + 384) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 392))
      **(_QWORD **)(a1 + 392) = sub_1ABBA0F6C();
    if (*(_QWORD *)(a1 + 400))
      **(_QWORD **)(a1 + 400) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 408))
      **(_QWORD **)(a1 + 408) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 416))
      **(_QWORD **)(a1 + 416) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 424))
      **(_QWORD **)(a1 + 424) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 432))
      **(_QWORD **)(a1 + 432) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 440))
      **(_QWORD **)(a1 + 440) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 448))
      **(_QWORD **)(a1 + 448) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 456))
      **(_QWORD **)(a1 + 456) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

const __CFNumber *sub_1ABBA0F6C()
{
  const __CFNumber *result;
  const __CFNumber *v1;
  uint64_t valuePtr;

  valuePtr = 0;
  result = (const __CFNumber *)CSDBRecordCopyProperty();
  if (result)
  {
    v1 = result;
    CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    CFRelease(v1);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

void *IMDCreateMessageSortComparatorAscending()
{
  return _Block_copy(&unk_1E5AAF0E8);
}

uint64_t sub_1ABBA0FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t result;
  void *v7;

  v5 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", IMDMessageRecordGetDate(a2, 0));
  result = objc_msgSend(v5, "compare:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", IMDMessageRecordGetDate(a3, 0)));
  if (!result)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", IMDMessageRecordGetIdentifier(a2));
    return objc_msgSend(v7, "compare:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", IMDMessageRecordGetIdentifier(a3)));
  }
  return result;
}

void *IMDCreateMessageSortComparatorDescending()
{
  return _Block_copy(&unk_1E5AB4AD0);
}

uint64_t sub_1ABBA10A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  void *v7;

  v5 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", IMDMessageRecordGetDate(a2, 0));
  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", IMDMessageRecordGetDate(a3, 0)), "compare:", v5);
  if (!result)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", IMDMessageRecordGetIdentifier(a3));
    return objc_msgSend(v7, "compare:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", IMDMessageRecordGetIdentifier(a2)));
  }
  return result;
}

void IMDMessageRecordSetHandle(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t Identifier;
  int64_t v6;
  int64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[6];

  v4 = IMDIsRunningInDatabaseServerProcess();
  Identifier = IMDHandleRecordGetIdentifier(a2);
  v6 = Identifier;
  if (v4)
  {
    if (a1)
    {
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = sub_1ABBA3050;
      v16[3] = &unk_1E5AB2248;
      v16[4] = a1;
      v16[5] = Identifier;
      _IMDPerformBlock((uint64_t)v16);
    }
    else
    {
      v8 = IMLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        sub_1ABC59DAC(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  else
  {
    v7 = IMDMessageRecordGetIdentifier(a1);
    __syncXPCIMDMessageRecordSetHandle_IPCAction(0, v7, v6);
  }
}

void IMDMessageRecordSetOtherHandle(uint64_t a1, uint64_t a2)
{
  uint64_t Identifier;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];

  if (IMDIsRunningInDatabaseServerProcess())
  {
    Identifier = IMDHandleRecordGetIdentifier(a2);
    if (a1)
    {
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABBA30A0;
      v14[3] = &unk_1E5AB2248;
      v14[4] = a1;
      v14[5] = Identifier;
      _IMDPerformBlock((uint64_t)v14);
    }
    else
    {
      v6 = IMLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1ABC59E1C(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  else
  {
    v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1ABC59E8C(v5);
  }
}

CFIndex IMDMessageRecordMarkMessageGUIDAsDeduplicated(CFIndex result)
{
  const __CFString *v1;
  const __CFString *v2;
  const __CFString *v3;
  _QWORD v4[5];
  char v5;

  if (result)
  {
    v1 = (const __CFString *)result;
    result = CFStringGetLength((CFStringRef)result);
    if (result)
    {
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v2 = IMDMessageRecordCopyMessageForGUID(v1);
        if (v2)
        {
          v3 = v2;
          if (!IMDMessageRecordWasDeduplicated((uint64_t)v2))
          {
            v4[0] = MEMORY[0x1E0C809B0];
            v4[1] = 3221225472;
            v4[2] = sub_1ABB9E12C;
            v4[3] = &unk_1E5AB49F0;
            v4[4] = v3;
            v5 = 1;
            _IMDPerformBlock((uint64_t)v4);
          }
          CFRelease(v3);
        }
      }
      else
      {
        __syncXPCIMDMessageRecordMarkMessageGUIDAsDeduplicated_IPCAction(0, (uint64_t)v1);
      }
      return 1;
    }
  }
  return result;
}

uint64_t IMDMessageRecordAddAttachmentIfNeededUnlocked(uint64_t a1, uint64_t a2)
{
  uint64_t Identifier;
  uint64_t v4;
  NSObject *v5;
  _QWORD v7[6];
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  Identifier = IMDAttachmentRecordGetIdentifier(a2);
  v4 = IMDMessageRecordGetIdentifier(a1);
  if (IMOSLoggingEnabled())
  {
    v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      v9 = Identifier;
      v10 = 2048;
      v11 = v4;
      _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_DEBUG, "Trying to associate attachment [%lld] with message [%lld]", buf, 0x16u);
    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABBA14FC;
  v7[3] = &unk_1E5AB4AF0;
  v7[4] = v4;
  v7[5] = Identifier;
  return _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("INSERT OR IGNORE INTO message_attachment_join (message_id, attachment_id) VALUES (?, ?);"),
           (uint64_t)v7);
}

void sub_1ABBA14FC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  v0 = CSDBSqliteStatementPerform();
  if ((_DWORD)v0 != 101)
  {
    v1 = v0;
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC59ECC(v1, v2, v3, v4, v5, v6, v7, v8);
  }
}

void IMDMessageRecordBulkUpdate(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int64_t a14, uint64_t a15, int64_t a16, int64_t a17, int64_t a18, uint64_t a19, int64_t a20,int64_t a21,int64_t a22,int64_t a23,int64_t a24,uint64_t a25,int64_t a26,int64_t a27,int64_t a28,uint64_t a29,uint64_t a30,int64_t a31,uint64_t a32,int64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int64_t a44,int64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int64_t a49,int64_t a50)
{
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v66[54];

  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v66[4] = a1;
      v66[5] = a10;
      v66[6] = a2;
      v66[7] = a4;
      v66[8] = a5;
      v66[9] = a6;
      v66[10] = a7;
      v66[11] = a31;
      v66[12] = a16;
      v66[13] = a17;
      v66[14] = a14;
      v66[15] = a18;
      v66[16] = a20;
      v66[17] = a22;
      v66[18] = a21;
      v66[19] = a23;
      v66[20] = a24;
      v66[21] = a26;
      v66[0] = MEMORY[0x1E0C809B0];
      v66[2] = sub_1ABBA19B4;
      v66[3] = &unk_1E5AB4B10;
      v66[1] = 3221225472;
      v66[22] = a27;
      v66[23] = a28;
      v66[24] = a3;
      v66[25] = a8;
      v66[26] = a9;
      v66[27] = a15;
      v66[28] = a29;
      v66[29] = a12;
      v66[30] = a13;
      v66[31] = a11;
      v66[32] = a19;
      v66[33] = a25;
      v66[34] = a30;
      v66[35] = a32;
      v66[36] = a33;
      v66[37] = a34;
      v66[38] = a36;
      v66[39] = a37;
      v66[40] = a38;
      v66[41] = a39;
      v66[42] = a40;
      v66[43] = a41;
      v66[44] = a42;
      v66[45] = a43;
      v66[46] = a45;
      v66[47] = a46;
      v66[48] = a44;
      v66[49] = a47;
      v66[50] = a48;
      v66[51] = a49;
      v66[52] = a50;
      _IMDPerformBlock((uint64_t)v66);
    }
    else
    {
      __syncXPCIMDMessageRecordBulkUpdate_IPCAction(0, *(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
        a20,
        a21,
        a22,
        a19,
        a23,
        a24,
        a25,
        a26,
        a27,
        a28,
        a29,
        a30,
        a31,
        a32,
        a33,
        a34,
        a35,
        a36,
        a37,
        a38,
        a39,
        a40,
        a41,
        a42,
        a43,
        a44,
        a45,
        a46,
        a47,
        a48,
        a49,
        a50);
    }
  }
  else
  {
    v51 = IMLogHandleForCategory();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      sub_1ABC59F44(v51, v52, v53, v54, v55, v56, v57, v58);
  }
}

void sub_1ABBA19B4(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    v4 = objc_msgSend(*(id *)(a1 + 40), "unsignedLongLongValue");
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if ((v4 & 0x2000000) != 0)
      CSDBRecordSetProperty();
    if (*(uint64_t *)(a1 + 48) >= 1)
      CSDBRecordSetProperty();
    sub_1ABBA20E8((uint64_t)v3, 14, *(_QWORD *)(a1 + 56));
    sub_1ABBA20E8((uint64_t)v3, 15, *(_QWORD *)(a1 + 64));
    sub_1ABBA20E8((uint64_t)v3, 16, *(_QWORD *)(a1 + 72));
    sub_1ABBA20E8((uint64_t)v3, 39, *(_QWORD *)(a1 + 80));
    sub_1ABBA20E8((uint64_t)v3, 57, *(_QWORD *)(a1 + 88));
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 184))
    {
      CSDBRecordSetProperty();
      CSDBRecordSetProperty();
    }
    if (*(_QWORD *)(a1 + 192))
      CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 232))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 240))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 248))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 256))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 264))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 272))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 280))
      CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 312))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 320))
      CSDBRecordSetProperty();
    v5 = *(_QWORD *)(a1 + 328);
    if (v5 >= 1)
      sub_1ABBA20E8((uint64_t)v3, 65, v5);
    if (*(_QWORD *)(a1 + 336))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 344))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 352))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 360))
      CSDBRecordSetProperty();
    v6 = *(_QWORD *)(a1 + 368);
    if (v6)
      sub_1ABBA20E8((uint64_t)v3, 75, v6);
    if (*(_QWORD *)(a1 + 376))
      CSDBRecordSetProperty();
    sub_1ABBA20E8((uint64_t)v3, 77, *(_QWORD *)(a1 + 384));
    if (*(_QWORD *)(a1 + 392))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 400))
      CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v3);
  }
}

void sub_1ABBA20E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFNumberRef v3;
  CFNumberRef v4;
  uint64_t valuePtr;

  valuePtr = a3;
  v3 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  if (v3)
  {
    v4 = v3;
    CSDBRecordSetProperty();
    CFRelease(v4);
  }
}

void IMDMessageRecordAnonymizedUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;
  void (*v18)(uint64_t);
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[13];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if ((IMDIsRunningInDatabaseServerProcess() & 1) == 0)
  {
    v29 = xmmword_1E5AB4B30;
    v30 = *(_OWORD *)off_1E5AB4B40;
    v31 = 2531;
    v17 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected false '%@' in %s at %s:%d. %@"), CFSTR("IMDIsRunningInDatabaseServerProcess()"), "void IMDMessageRecordAnonymizedUpdate(IMDMessageRecordRef, CFStringRef, CFDataRef, CFStringRef, CFStringRef, CFStringRef, CFDataRef, CFDataRef, CFStringRef)", IMFileLocationTrimFileName(), 2531, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v18 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v18)
    {
      v18(v17);
    }
    else if (IMOSLoggingEnabled())
    {
      v19 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v33 = v17;
        _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a1)
  {
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = sub_1ABBA2368;
    v28[3] = &unk_1E5AB4B58;
    v28[4] = a1;
    v28[5] = a2;
    v28[6] = a3;
    v28[7] = a5;
    v28[8] = a7;
    v28[9] = a4;
    v28[10] = a6;
    v28[11] = a8;
    v28[12] = a9;
    _IMDPerformBlock((uint64_t)v28);
  }
  else
  {
    v20 = IMLogHandleForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      sub_1ABC59FB4(v20, v21, v22, v23, v24, v25, v26, v27);
  }
}

void sub_1ABBA2368(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const __CFString *v4;
  const __CFData *v5;
  const __CFString *v6;
  const __CFData *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFData *v10;
  const __CFString *v11;

  v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(a1[4] + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    v4 = (const __CFString *)a1[5];
    if (v4 && CFStringGetLength(v4) >= 1)
      CSDBRecordSetProperty();
    v5 = (const __CFData *)a1[6];
    if (v5 && CFDataGetLength(v5) >= 1)
      CSDBRecordSetProperty();
    v6 = (const __CFString *)a1[7];
    if (v6 && CFStringGetLength(v6) >= 1)
      CSDBRecordSetProperty();
    v7 = (const __CFData *)a1[8];
    if (v7 && CFDataGetLength(v7) >= 1)
      CSDBRecordSetProperty();
    v8 = (const __CFString *)a1[9];
    if (v8 && CFStringGetLength(v8) >= 1)
      CSDBRecordSetProperty();
    v9 = (const __CFString *)a1[10];
    if (v9 && CFStringGetLength(v9) >= 1)
      CSDBRecordSetProperty();
    v10 = (const __CFData *)a1[11];
    if (v10 && CFDataGetLength(v10) >= 1)
      CSDBRecordSetProperty();
    v11 = (const __CFString *)a1[12];
    if (v11)
    {
      if (CFStringGetLength(v11) >= 1)
        CSDBRecordSetProperty();
    }
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v3);
  }
}

void IMDMessageRecordInvalidateRecord(uint64_t a1)
{
  int v2;
  _QWORD v3[5];

  v2 = IMDIsRunningInDatabaseServerProcess();
  if (a1)
  {
    if (v2)
    {
      v3[0] = MEMORY[0x1E0C809B0];
      v3[1] = 3221225472;
      v3[2] = sub_1ABBA2554;
      v3[3] = &unk_1E5AB07F8;
      v3[4] = a1;
      _IMDPerformBlock((uint64_t)v3);
    }
  }
}

void sub_1ABBA2554(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  v1 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v1)
  {
    v2 = (const void *)v1;
    CSDBRecordInvalidateRecord();
    CFRelease(v2);
  }
}

const void *_IMDCopyIMDMessageRecordFromXPCObjectServer(void *a1)
{
  int64_t int64;

  if (a1 && (int64 = xpc_dictionary_get_int64(a1, "recordIdentifier"), int64 >= 1))
    return IMDMessageRecordCreateFromRecordIDWithLock(0, int64, 0);
  else
    return 0;
}

xpc_object_t _IMDCopyXPCObjectFromIMDMessageRecordClient(uint64_t a1)
{
  xpc_object_t v2;
  CFIndex v3;
  int64_t v4;
  uint64_t *v5;
  const char *v6;
  uint64_t v7;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v9;
  uint64_t v10;
  int64_t v11;
  void *v12;
  const char *v13;
  int64_t v14;
  int64_t valuePtr;

  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = 0;
  v4 = 0;
  v5 = &qword_1E5AB4B80;
  do
  {
    v6 = (const char *)*(v5 - 1);
    v7 = *v5;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v3);
    v9 = ValueAtIndex;
    switch(v7)
    {
      case 0:
        v10 = sub_1ABBA2738(v3);
        if (!v10)
        {
          v12 = v2;
          v13 = v6;
          v11 = (int64_t)v9;
          goto LABEL_11;
        }
        v4 |= v10;
        break;
      case 1:
        IMInsertNSStringsToXPCDictionary();
        break;
      case 2:
        IMInsertDatasToXPCDictionary();
        break;
      case 3:
        valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
        v11 = valuePtr;
        v12 = v2;
        v13 = v6;
LABEL_11:
        xpc_dictionary_set_int64(v12, v13, v11);
        break;
      default:
        break;
    }
    v5 += 5;
    ++v3;
  }
  while (v3 != 90);
  if (v4)
    xpc_dictionary_set_int64(v2, "flags", v4);
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
    xpc_dictionary_set_int64(v2, "recordIdentifier", v14);
  return v2;
}

uint64_t sub_1ABBA2738(uint64_t a1)
{
  if ((unint64_t)(a1 - 17) > 0x48)
    return 0;
  else
    return qword_1ABC69C08[a1 - 17];
}

void _IMDMessageRecordBulkCopyXPCDictionary(uint64_t a1, uint64_t a2, char a3, char a4)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[7];
  char v21;
  char v22;

  if (a2)
  {
    if (a1)
    {
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = sub_1ABBA2820;
      v20[3] = &unk_1E5AB5990;
      v20[4] = a2;
      v20[5] = a1;
      v21 = a3;
      v20[6] = a1;
      v22 = a4;
      _IMDPerformBlock((uint64_t)v20);
    }
    else
    {
      v12 = IMLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1ABC5A094(v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  else
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC5A024(v4, v5, v6, v7, v8, v9, v10, v11);
  }
}

void sub_1ABBA2820(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  const char *v7;
  uint64_t v8;
  const __CFNumber *Property;
  const __CFNumber *v10;
  uint64_t v11;
  int64_t v12;
  void *v13;
  const char *v14;
  _QWORD *v15;
  const void *v16;
  xpc_object_t v17;
  void *v18;
  _QWORD *v19;
  const void *v20;
  xpc_object_t v21;
  void *v22;
  uint64_t Identifier;
  void *v24;
  xpc_object_t v25;
  void *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  xpc_object_t v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  const __CFString *v37;
  __CFString *v38;
  xpc_object_t v39;
  void *v40;
  void *v41;
  int64_t v42;
  const __CFNumber *v43;
  uint64_t v44;
  _QWORD valuePtr[5];

  v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    v4 = 0;
    v5 = 0;
    v6 = &qword_1E5AB4B80;
    do
    {
      v7 = (const char *)*(v6 - 1);
      v8 = *v6;
      Property = (const __CFNumber *)CSDBRecordGetProperty();
      v10 = Property;
      switch(v8)
      {
        case 0:
          if (Property)
          {
            v11 = sub_1ABBA2738(v4);
            if (!v11)
            {
              v13 = *(void **)(a1 + 32);
              v14 = v7;
              v12 = (int64_t)v10;
              goto LABEL_13;
            }
            v5 |= v11;
          }
          break;
        case 1:
          v43 = Property;
          v44 = 0;
          IMInsertNSStringsToXPCDictionary();
          break;
        case 2:
          v43 = Property;
          v44 = 0;
          IMInsertDatasToXPCDictionary();
          break;
        case 3:
          valuePtr[0] = 0;
          if (Property)
          {
            CFNumberGetValue(Property, kCFNumberSInt64Type, valuePtr);
            v12 = valuePtr[0];
          }
          else
          {
            v12 = 0;
          }
          v13 = *(void **)(a1 + 32);
          v14 = v7;
LABEL_13:
          xpc_dictionary_set_int64(v13, v14, v12);
          break;
        default:
          break;
      }
      v6 += 5;
      ++v4;
    }
    while (v4 != 90);
    if (v5)
      xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "flags", v5);
    if (*(_BYTE *)(a1 + 56))
    {
      v15 = sub_1ABB9E340(*(const __CFArray ***)(a1 + 48), 0);
      if (v15)
      {
        v16 = v15;
        v17 = xpc_dictionary_create(0, 0, 0);
        if (v17)
        {
          v18 = v17;
          _IMDHandleRecordBulkCopyXPCDictionary((uint64_t)v16, (uint64_t)v17, 0);
          xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), "handle_cache", v18);
          xpc_release(v18);
        }
        CFRelease(v16);
      }
      v19 = sub_1ABB9E184(*(const __CFArray ***)(a1 + 48), 0);
      if (v19)
      {
        v20 = v19;
        v21 = xpc_dictionary_create(0, 0, 0);
        if (v21)
        {
          v22 = v21;
          _IMDHandleRecordBulkCopyXPCDictionary((uint64_t)v20, (uint64_t)v21, 0);
          xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), "other_handle_cache", v22);
          xpc_release(v22);
        }
        CFRelease(v20);
      }
    }
    if (*(_BYTE *)(a1 + 57))
    {
      Identifier = IMDMessageRecordGetIdentifier(*(_QWORD *)(a1 + 48));
      v24 = (void *)IMDMessageRecordCopyAttachmentsForIDWithLock(Identifier);
      v25 = xpc_array_create(0, 0);
      if (v25)
      {
        v26 = v25;
        v27 = objc_msgSend(v24, "count");
        if (v27 >= 1)
        {
          v28 = 0;
          v29 = v27;
          do
          {
            v30 = objc_msgSend(v24, "objectAtIndex:", v28, v43, v44);
            v31 = xpc_dictionary_create(0, 0, 0);
            if (v31)
            {
              v32 = v31;
              _IMDAttachmentRecordBulkCopyXPCDictionary(v30, (uint64_t)v31, 0);
              xpc_array_append_value(v26, v32);
              xpc_release(v32);
            }
            ++v28;
          }
          while (v29 != v28);
        }
        v33 = *(void **)(a1 + 32);
        if (v33)
          xpc_dictionary_set_value(v33, "attachments_cache", v26);
        xpc_release(v26);
      }
      if (v24)
        CFRelease(v24);
    }
    v34 = *(void **)(a1 + 32);
    v35 = CSDBRecordGetProperty();
    v36 = CSDBRecordGetProperty();
    if (!v35 || !v36)
    {
      v37 = (const __CFString *)CSDBRecordGetProperty();
      v38 = (__CFString *)IMDMessageRecordCountMessagesWithThreadOriginatorGroupedByParts(v37);
      if (v38)
      {
        v39 = xpc_dictionary_create(0, 0, 0);
        if (v39)
        {
          v40 = v39;
          valuePtr[0] = MEMORY[0x1E0C809B0];
          valuePtr[1] = 3221225472;
          valuePtr[2] = sub_1ABBA3218;
          valuePtr[3] = &unk_1E5AB5ED8;
          valuePtr[4] = v39;
          -[__CFString enumerateKeysAndObjectsUsingBlock:](v38, "enumerateKeysAndObjectsUsingBlock:", valuePtr);
          xpc_dictionary_set_value(v34, "threadCountsByPart", v40);
          xpc_release(v40);
        }
      }

    }
    v41 = *(void **)(a1 + 32);
    v42 = IMDMessageRecordGetIdentifier(*(_QWORD *)(a1 + 48));
    xpc_dictionary_set_int64(v41, "recordIdentifier", v42);
    CFRelease(v3);
  }
}

void IMDMessageRecordMarkAllUnsuccessFullSyncMessagesAsNeedingSync()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t buf[16];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint8_t v14[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "Request to markAllUnsuccessFullySyncedMessagesAsNeedingSync ", buf, 2u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    *(_OWORD *)buf = 0u;
    v4 = 0u;
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    IMDSqlOperationExecuteQuery((uint64_t)buf, CFSTR("update message set ck_sync_state=0 where ck_sync_state=2;"),
      (uint64_t)&unk_1E5AAEBE8);
    v2 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v2);
    if (v2 && IMOSLoggingEnabled())
    {
      v1 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v14 = 138412290;
        v15 = v2;
        _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_INFO, "Error executing markAllUnsuccessFullySyncedMessagesAsNeedingSync %@ ", v14, 0xCu);
      }
    }
  }
  else
  {
    __syncXPCIMDMessageRecordMarkAllUnsuccessFullSyncMessagesAsNeedingSync_IPCAction(0);
  }
}

void sub_1ABBA2D80()
{
  NSObject *v0;
  uint8_t v1[16];

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "Executed query to mark all unsuccessfuly synced messages as needing sync", v1, 2u);
    }
  }
}

uint64_t sub_1ABBA2E0C(uint64_t result)
{
  *(_QWORD *)(result + 16) = -1;
  return result;
}

void sub_1ABBA2E18(uint64_t a1)
{
  CFIndex v2;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(void);
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  *(_QWORD *)(a1 + 16) = -1;
  if (*(_QWORD *)(a1 + 24))
  {
    v2 = 0;
    v3 = &qword_1E5AB4B88;
    do
    {
      v4 = *v3;
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v2))
      {
        v5 = *(void (**)(void))(v4 + 8);
        if (v5)
          v5();
      }
      ++v2;
      v3 += 5;
    }
    while (v2 != 90);
    v6 = *(const void **)(a1 + 24);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
  v7 = *(const void **)(a1 + 32);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v8 = *(const void **)(a1 + 40);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v9 = *(const void **)(a1 + 48);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v10 = *(const void **)(a1 + 56);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 56) = 0;
  }
}

BOOL sub_1ABBA2ED8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

uint64_t sub_1ABBA2EEC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

CFStringRef sub_1ABBA2EF4(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<IMDMessageRecord %p [%p]>{}"), a1, v3);
}

uint64_t sub_1ABBA2F40(uint64_t a1, void *a2)
{
  uint64_t result;

  result = _IMDCopyIMDHandleRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1ABBA2F70(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t sub_1ABBA2FC8(uint64_t a1, void *a2)
{
  uint64_t result;

  result = _IMDCopyIMDHandleRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1ABBA2FF8(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

void sub_1ABBA3050(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  v1 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v1)
  {
    v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

void sub_1ABBA30A0(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  v1 = IMDMessageRecordCopyMessageRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v1)
  {
    v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

uint64_t sub_1ABBA30F0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  const void *v6;
  const void *v7;

  v5 = (void *)MEMORY[0x1AF435474]();
  v6 = (const void *)_IMDCopyIMDAttachmentRecordFromXPCObjectClient(a3);
  if (v6)
  {
    v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(a1 + 32) + 48), v6);
    CFRelease(v7);
  }
  objc_autoreleasePoolPop(v5);
  return 1;
}

void sub_1ABBA3154(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1ABBA3164(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1ABBA3170(uint64_t a1, uint64_t a2, xpc_object_t xint)
{
  int64_t value;
  void *v6;
  void *v7;

  value = xpc_int64_get_value(xint);
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", a2);
  v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (!v7)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  objc_msgSend(v7, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", value), v6);

  return 1;
}

void sub_1ABBA3218(uint64_t a1, void *a2, void *a3)
{
  if (objc_msgSend(a2, "UTF8String"))
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), (const char *)objc_msgSend(a2, "UTF8String"), objc_msgSend(a3, "unsignedIntegerValue"));
}

void sub_1ABBA3284(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void IMDNotificationsPostNotificationsWithContext(void *a1)
{
  void *v1;
  id v2;

  v2 = a1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    +[IMDNotificationsController sharedInstance](IMDNotificationsController, "sharedInstance");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "postNotificationsWithContext:", v2);

  }
  else
  {
    __asyncXPCIMDNotificationsPostNotifications_IPCAction(qword_1E5AAF108, (uint64_t)v2);
  }

}

void IMDNotificationsRetractNotificationsForReadMessages(void *a1)
{
  void *v1;
  id v2;

  v2 = a1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    +[IMDNotificationsController sharedInstance](IMDNotificationsController, "sharedInstance");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "retractNotificationsForReadMessages:", v2);

  }
  else
  {
    __asyncXPCIMDNotificationsRetractNotificationsForReadMessages_IPCAction(qword_1E5AB5F20, (uint64_t)v2);
  }

}

void IMDNotificationsRetractNotificationsFromFirstUnlockWithContext(void *a1)
{
  void *v1;
  id v2;

  v2 = a1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    +[IMDNotificationsController sharedInstance](IMDNotificationsController, "sharedInstance");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "repostNotificationsFromFirstUnlockWithContext:", v2);

  }
  else
  {
    __asyncXPCIMDNotificationsRetractNotificationsFromFirstUnlock_IPCAction(qword_1E5AB5F40, (uint64_t)v2);
  }

}

void IMDNotificationsPostUrgentNotificationsForMessages(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a1;
  v3 = a2;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    +[IMDNotificationsController sharedInstance](IMDNotificationsController, "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "postUrgentNotificationForMessages:withContext:", v5, v3);

  }
  else
  {
    __syncXPCIMDNotificationsPostUrgentNotificationsForMessages_IPCAction(qword_1E5AB5F60, (uint64_t)v5, (uint64_t)v3);
  }

}

void IMDNotificationsUpdatePostedNotificationsForMessages(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a1;
  v3 = a2;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    +[IMDNotificationsController sharedInstance](IMDNotificationsController, "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "updatePostedNotificationsForMessages:withContext:", v5, v3);

  }
  else
  {
    __syncXPCIMDNotificationsUpdatePostedNotificationsForMessages_IPCAction(qword_1E5AB5F80, (uint64_t)v5, (uint64_t)v3);
  }

}

void IMDNotificationsPostFirstUnlockMessage(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a1;
  v3 = a2;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    +[IMDNotificationsController sharedInstance](IMDNotificationsController, "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "postFirstUnlockMessage:forIdentifier:", v5, v3);

  }
  else
  {
    __syncXPCIMDNotificationsPostFirstUnlockMessage_IPCAction(qword_1E5AB5FA0, (uint64_t)v5, (uint64_t)v3);
  }

}

uint64_t IMDHandleRecordGetTypeID()
{
  pthread_once(&stru_1ED0D36D8, (void (*)(void))sub_1ABBA3590);
  return qword_1ED0D3CB0;
}

uint64_t sub_1ABBA3590()
{
  objc_class *v0;
  objc_class *v1;
  uint64_t v2;
  char **v3;
  uint64_t result;

  qword_1ED0D3CB0 = _CFRuntimeRegisterClass();
  v0 = (objc_class *)objc_opt_class();
  class_getName(v0);
  _CFRuntimeBridgeClasses();
  v1 = (objc_class *)objc_opt_class();
  IMDBridgedRecordPopulatePropertyImplementations(v1, (uint64_t)&off_1E5AB6008, 5);
  v2 = 0;
  v3 = &off_1E5AB6008;
  do
  {
    v3 += 5;
    result = CSDBRecordIndexOfPropertyNamed();
    dword_1ED0D3CB8[v2++] = result;
  }
  while (v2 != 5);
  return result;
}

uint64_t sub_1ABBA3630(uint64_t a1)
{
  return dword_1ED0D3CB8[a1];
}

_QWORD *IMDHandleRecordCreate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t Instance;
  _QWORD *v12;
  NSObject *v13;
  const void *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t *v21;
  const void *v22;
  void (*v24[5])(void);
  _QWORD v25[6];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t v30[4];
  _QWORD *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE buf[32];
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (!IMDIsRunningInDatabaseServerProcess())
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    *(_QWORD *)&buf[24] = 0;
    v24[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v24[1] = (void (*)(void))3221225472;
    v24[2] = (void (*)(void))sub_1ABBA3B08;
    v24[3] = (void (*)(void))&unk_1E5AAF630;
    v24[4] = (void (*)(void))buf;
    __syncXPCIMDHandleRecordCreate_IPCAction(v24, a2, a3, (uint64_t)a4, a5, a6);
    v12 = *(_QWORD **)(*(_QWORD *)&buf[8] + 24);
    v21 = (uint64_t *)buf;
LABEL_23:
    _Block_object_dispose(v21, 8);
    return v12;
  }
  pthread_once(&stru_1ED0D36D8, (void (*)(void))sub_1ABBA3590);
  Instance = _CFRuntimeCreateInstance();
  v12 = (_QWORD *)Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = 0;
    *(_QWORD *)(Instance + 24) = 0;
    v13 = IMLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "_IMDHandleRecordCreate()", buf, 2u);
    }
    IMDEnsureSharedRecordStoreInitialized();
    v14 = (const void *)CSDBRecordCreate();
    if (v14)
    {
      v26 = 0;
      v27 = &v26;
      v28 = 0x2020000000;
      v29 = 0;
      if ((objc_msgSend(a4, "isEqualToString:", *MEMORY[0x1E0D38F68]) & 1) == 0)
      {
        v15 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT person_centric_id FROM handle where ID = '%@' and service = 'iMessage'"), a2);
        v25[0] = MEMORY[0x1E0C809B0];
        v25[1] = 3221225472;
        v25[2] = sub_1ABBA3A50;
        v25[3] = &unk_1E5AB5FC8;
        v25[4] = v15;
        v25[5] = &v26;
        IMDRunSqlOperation((uint64_t)v25);
        if (IMOSLoggingEnabled())
        {
          v16 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            v17 = v27[3];
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = a4;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v17;
            _os_log_impl(&dword_1ABB60000, v16, OS_LOG_TYPE_INFO, "We are setting the person_centric_id for a non-iMessage(%@) handle to be %@", buf, 0x16u);
          }
        }
      }
      *(_OWORD *)buf = xmmword_1ABC69E50;
      *(_OWORD *)&buf[16] = xmmword_1ABC69E60;
      v40 = 4;
      v34 = a2;
      v35 = a3;
      v36 = a4;
      v37 = a5;
      if (!a6)
        a6 = v27[3];
      v18 = 0;
      v38 = a6;
      do
      {
        CSDBRecordSetProperty();
        v18 += 8;
      }
      while (v18 != 40);
      if (IMDHandleRecordAddHandleRecord((uint64_t)v14))
      {
        v12[2] = (int)CSDBRecordGetID();
        v19 = IMLogHandleForCategory();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          v20 = v12[2];
          *(_DWORD *)v30 = 138412546;
          v31 = v12;
          v32 = 2048;
          v33 = v20;
          _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "new IMDHandleRecordRef [%@] has id [%lld].", v30, 0x16u);
        }
      }
      else
      {
        CFRelease(v12);
        v12 = 0;
      }
      CFRelease(v14);
      v22 = (const void *)v27[3];
      if (v22)
        CFRelease(v22);
      v21 = &v26;
      goto LABEL_23;
    }
    CFRelease(v12);
    return 0;
  }
  return v12;
}

BOOL sub_1ABBA3A50(uint64_t a1, uint64_t a2)
{
  const __CFString *v3;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABBA3AB4;
  v5[3] = &unk_1E5AB2298;
  v3 = *(const __CFString **)(a1 + 32);
  v5[4] = *(_QWORD *)(a1 + 40);
  v5[5] = a2;
  return _IMDSqlOperationRunQuery(a2, v3, 0, (uint64_t)v5);
}

const unsigned __int8 *sub_1ABBA3AB4(uint64_t a1)
{
  const unsigned __int8 *result;
  _BYTE v3[24];

  result = (const unsigned __int8 *)IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
  {
    IMDSqlOperationColumnByIndex(*(_QWORD *)(a1 + 40), 0, (uint64_t)v3);
    result = IMDStringFromSqlColumn((uint64_t)v3);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t sub_1ABBA3B08(uint64_t a1, void *a2)
{
  uint64_t result;

  result = _IMDCopyIMDHandleRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _IMDCopyIMDHandleRecordFromXPCObjectClient(void *a1)
{
  uint64_t v2;
  uint64_t Instance;
  CFIndex v4;
  __CFArray *Mutable;
  void (*v6)(void);
  uint64_t (*v7)(const void *);
  char **v8;
  const void *v9;
  BOOL v10;

  if (xpc_dictionary_get_count(a1) < 3)
    return 0;
  pthread_once(&stru_1ED0D36D8, (void (*)(void))sub_1ABBA3590);
  Instance = _CFRuntimeCreateInstance();
  v2 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = 0;
    *(_QWORD *)(Instance + 24) = 0;
    v4 = 5;
    Mutable = CFArrayCreateMutable(0, 5, 0);
    do
    {
      CFArrayAppendValue(Mutable, 0);
      --v4;
    }
    while (v4);
    v7 = (uint64_t (*)(const void *))*MEMORY[0x1E0D18820];
    v6 = *(void (**)(void))(MEMORY[0x1E0D18820] + 8);
    v8 = &off_1E5AB6008;
    do
    {
      v9 = (const void *)IMGetXPCStringFromDictionary();
      if (CFArrayGetValueAtIndex(Mutable, v4) && v6)
        v6();
      if (v9)
        v10 = v7 == 0;
      else
        v10 = 1;
      if (!v10)
        v9 = (const void *)v7(v9);
      CFArraySetValueAtIndex(Mutable, v4++, v9);
      v8 += 5;
    }
    while (v4 != 5);
    *(_QWORD *)(v2 + 24) = Mutable;
    *(_QWORD *)(v2 + 16) = xpc_dictionary_get_int64(a1, "recordIdentifier");
  }
  return v2;
}

const void *IMDHandleRecordCreateFromRecordID_0(uint64_t a1, uint64_t a2)
{
  uint64_t Instance;
  const void *v4;
  const void *v5;
  const void *v6;

  pthread_once(&stru_1ED0D36D8, (void (*)(void))sub_1ABBA3590);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 0;
  v4 = (const void *)Instance;
  *(_QWORD *)(Instance + 16) = a2;
  *(_QWORD *)(Instance + 24) = 0;
  v5 = (const void *)IMDHandleRecordCopyHandleRecordUnlocked(a2);
  if (v5)
  {
    v6 = v4;
  }
  else
  {
    v5 = v4;
    v6 = 0;
  }
  CFRelease(v5);
  return v6;
}

uint64_t IMDHandleRecordGetIdentifier(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 16);
  v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = 138412290;
    v4 = 0;
    _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Attempted to get record identifier for NULL handle record: %@", (uint8_t *)&v3, 0xCu);
  }
  return 0;
}

uint64_t IMDHandleRecordCopyID(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABBA3EC8;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5A104(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABBA3EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBA3EC8(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDHandleRecordCopyHandleRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDHandleRecordCopyCountry(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 1);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABBA4034;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5A174(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABBA401C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBA4034(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDHandleRecordCopyHandleRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDHandleRecordCopyUncanonicalizedID(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 3);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABBA41A0;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5A1E4(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABBA4188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBA41A0(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDHandleRecordCopyHandleRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDHandleRecordCopyPersonCentricID(uint64_t a1, uint64_t a2)
{
  const __CFArray *v3;
  const void *ValueAtIndex;
  uint64_t v5;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[6];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  if (a2 && (IMSharedHelperPersistMergeID() & 1) != 0)
  {
    v3 = *(const __CFArray **)(a2 + 24);
    if (v3)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v3, 4);
      v5 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v16 = 0;
      v17 = &v16;
      v18 = 0x2020000000;
      v19 = 0;
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = sub_1ABBA4318;
      v15[3] = &unk_1E5AB2298;
      v15[4] = &v16;
      v15[5] = a2;
      _IMDPerformBlock((uint64_t)v15);
      v5 = v17[3];
      _Block_object_dispose(&v16, 8);
    }
  }
  else
  {
    v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC5A254(v7, v8, v9, v10, v11, v12, v13, v14);
    return 0;
  }
  return v5;
}

void sub_1ABBA4300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBA4318(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDHandleRecordCopyHandleRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

void IMDHandleRecordBulkCopy(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  const __CFArray *v12;
  const void *ValueAtIndex;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[10];

  if (a1)
  {
    v12 = *(const __CFArray **)(a1 + 24);
    if (v12)
    {
      if (a2)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v12, 0);
        v14 = ValueAtIndex;
        if (ValueAtIndex)
          CFRetain(ValueAtIndex);
        *a2 = v14;
      }
      if (a3)
      {
        v15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 1);
        v16 = v15;
        if (v15)
          CFRetain(v15);
        *a3 = v16;
      }
      if (a4)
      {
        v17 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 2);
        v18 = v17;
        if (v17)
          CFRetain(v17);
        *a4 = v18;
      }
      if (a5)
      {
        v19 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 3);
        v20 = v19;
        if (v19)
          CFRetain(v19);
        *a5 = v20;
      }
      if (a6)
      {
        v21 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 4);
        v22 = v21;
        if (v21)
          CFRetain(v21);
        *a6 = v22;
      }
    }
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = sub_1ABBA44F4;
      v31[3] = &unk_1E5AB5FE8;
      v31[4] = a1;
      v31[5] = a2;
      v31[6] = a3;
      v31[7] = a4;
      v31[8] = a5;
      v31[9] = a6;
      _IMDPerformBlock((uint64_t)v31);
    }
  }
  else
  {
    v23 = IMLogHandleForCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      sub_1ABC5A2C4(v23, v24, v25, v26, v27, v28, v29, v30);
  }
}

void sub_1ABBA44F4(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDHandleRecordCopyHandleRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    if (*(_QWORD *)(a1 + 40))
      **(_QWORD **)(a1 + 40) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 48))
      **(_QWORD **)(a1 + 48) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 56))
      **(_QWORD **)(a1 + 56) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 64))
      **(_QWORD **)(a1 + 64) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 72))
    {
      if (IMSharedHelperPersistMergeID())
        **(_QWORD **)(a1 + 72) = CSDBRecordCopyProperty();
    }
    CFRelease(v3);
  }
}

void IMDHandleRecordBulkUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[10];
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      if (IMOSLoggingEnabled())
      {
        v12 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138413570;
          v23 = a1;
          v24 = 2112;
          v25 = a2;
          v26 = 2112;
          v27 = a3;
          v28 = 2112;
          v29 = a4;
          v30 = 2112;
          v31 = a5;
          v32 = 2112;
          v33 = a6;
          _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "Updating handle: %@   ID: %@   Country: %@   Service: %@  Unformatted: %@ PersonCentricID: %@", buf, 0x3Eu);
        }
      }
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = sub_1ABBA47BC;
      v21[3] = &unk_1E5AB5FE8;
      v21[4] = a1;
      v21[5] = a2;
      v21[6] = a3;
      v21[7] = a4;
      v21[8] = a5;
      v21[9] = a6;
      _IMDPerformBlock((uint64_t)v21);
    }
    else
    {
      __syncXPCIMDHandleRecordBulkUpdate_IPCAction(0, *(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6);
    }
  }
  else
  {
    v13 = IMLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_1ABC5A334(v13, v14, v15, v16, v17, v18, v19, v20);
  }
}

void sub_1ABBA47BC(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDHandleRecordCopyHandleRecordUnlocked(*(_QWORD *)(a1[4] + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    if (a1[5])
      CSDBRecordSetProperty();
    if (a1[6])
      CSDBRecordSetProperty();
    if (a1[7])
      CSDBRecordSetProperty();
    if (a1[8])
      CSDBRecordSetProperty();
    if (a1[9])
      CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v3);
  }
}

const void *_IMDCopyIMDHandleRecordFromXPCObjectServer(void *a1)
{
  int64_t int64;

  if (a1 && (int64 = xpc_dictionary_get_int64(a1, "recordIdentifier"), int64 >= 1))
    return IMDHandleRecordCreateFromRecordID_0(0, int64);
  else
    return 0;
}

xpc_object_t _IMDCopyXPCObjectFromIMDHandleRecordClient(uint64_t a1)
{
  xpc_object_t v2;
  CFIndex v3;
  char **v4;
  int64_t v5;

  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = 0;
  v4 = &off_1E5AB6008;
  do
  {
    if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v3))
      IMInsertNSStringsToXPCDictionary();
    ++v3;
    v4 += 5;
  }
  while (v3 != 5);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
    xpc_dictionary_set_int64(v2, "recordIdentifier", v5);
  return v2;
}

id _IMDHandleRecordCopyHandlesFromRecords(void *a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  int ID;
  const void *v6;
  const void *v7;

  if (!a1)
    return objc_alloc_init(MEMORY[0x1E0C99D20]);
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(a1, "count"));
  if (objc_msgSend(a1, "count"))
  {
    v3 = 0;
    v4 = *MEMORY[0x1E0C9AE00];
    do
    {
      objc_msgSend(a1, "objectAtIndex:", v3);
      ID = CSDBRecordGetID();
      v6 = IMDHandleRecordCreateFromRecordID_0(v4, ID);
      if (v6)
      {
        v7 = v6;
        objc_msgSend(v2, "addObject:", v6);
        CFRelease(v7);
      }
      ++v3;
    }
    while (v3 < objc_msgSend(a1, "count"));
  }
  return v2;
}

id _IMDHandleRecordCopyHandlesFromXPCArray(void *a1)
{
  uint64_t v2;
  _QWORD applier[5];

  if (!a1)
    return objc_alloc_init(MEMORY[0x1E0C99D20]);
  v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", xpc_array_get_count(a1));
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3221225472;
  applier[2] = sub_1ABBA4AEC;
  applier[3] = &unk_1E5AB60D8;
  applier[4] = v2;
  xpc_array_apply(a1, applier);
  return (id)v2;
}

uint64_t sub_1ABBA4AEC(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  uint64_t v6;
  const void *v7;

  v5 = (void *)MEMORY[0x1AF435474]();
  v6 = _IMDCopyIMDHandleRecordFromXPCObjectClient(a3);
  if (v6)
  {
    v7 = (const void *)v6;
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);
    CFRelease(v7);
  }
  objc_autoreleasePoolPop(v5);
  return 1;
}

void _IMDHandleRecordBulkCopyXPCDictionary(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[7];

  if (a2)
  {
    if (a1)
    {
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = sub_1ABBA4C10;
      v19[3] = &unk_1E5AB6100;
      v19[4] = a2;
      v19[5] = a1;
      v19[6] = a1;
      if (a3)
        _IMDPerformBlock((uint64_t)v19);
      else
        sub_1ABBA4C10((uint64_t)v19);
    }
    else
    {
      v11 = IMLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1ABC5A414(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  else
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC5A3A4(v3, v4, v5, v6, v7, v8, v9, v10);
  }
}

void sub_1ABBA4C10(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  char **v5;

  v2 = IMDHandleRecordCopyHandleRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    v4 = 0;
    v5 = &off_1E5AB6008;
    do
    {
      v5 += 5;
      CSDBRecordGetProperty();
      IMInsertNSStringsToXPCDictionary();
      v4 += 4;
    }
    while (v4 != 20);
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "recordIdentifier", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16));
    CFRelease(v3);
  }
}

BOOL IMDDeleteOrphanedHandles(uint64_t a1)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  NSObject *v5;
  uint8_t buf[4];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    _IMDSqlOperationBeginQuery(a1, CFSTR("DELETE FROM handle WHERE ROWID IN (SELECT ROWID FROM handle h1 WHERE ((SELECT 1 from chat_handle_join WHERE handle_id = h1.ROWID LIMIT 1) IS NULL AND (SELECT 1 from message WHERE handle_id = h1.ROWID LIMIT 1) IS NULL AND (SELECT 1 from message WHERE other_handle = h1.ROWID LIMIT 1) IS NULL));"));
    return IMDSqlOperationFinishQuery(a1);
  }
  else
  {
    v3 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("op"), "BOOL IMDDeleteOrphanedHandles(IMDSqlOperation *)", IMFileLocationTrimFileName(), 760, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v4 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v4)
    {
      v4(v3);
    }
    else if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v7 = v3;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
    return 0;
  }
}

id IMDFindOrphanedHandleRowIDs(uint64_t a1)
{
  id result;

  result = _IMDSqlOperationGetRows(a1, CFSTR("SELECT ROWID FROM handle h1 WHERE ((SELECT 1 from chat_handle_join WHERE handle_id = h1.ROWID LIMIT 1) IS NULL AND (SELECT 1 from message WHERE handle_id = h1.ROWID LIMIT 1) IS NULL AND (SELECT 1 from message WHERE other_handle = h1.ROWID LIMIT 1) IS NULL);"));
  if (*(_QWORD *)(a1 + 168))
  {

    return 0;
  }
  return result;
}

uint64_t sub_1ABBA4EA0(uint64_t result)
{
  *(_QWORD *)(result + 16) = -1;
  return result;
}

void sub_1ABBA4EAC(uint64_t a1)
{
  CFIndex v2;
  void (*v3)(void);
  BOOL v4;
  const void *v5;

  *(_QWORD *)(a1 + 16) = -1;
  if (*(_QWORD *)(a1 + 24))
  {
    v2 = 0;
    v3 = *(void (**)(void))(MEMORY[0x1E0D18820] + 8);
    do
    {
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v2))
        v4 = v3 == 0;
      else
        v4 = 1;
      if (!v4)
        v3();
      ++v2;
    }
    while (v2 != 5);
    v5 = *(const void **)(a1 + 24);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
}

BOOL sub_1ABBA4F28(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

uint64_t sub_1ABBA4F3C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

CFStringRef sub_1ABBA4F44(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<IMDHandleRecord %p [%p]>{}"), a1, v3);
}

void sub_1ABBA5718(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1ABBA552CLL);
  }
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1ABBA57AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABBA57BC(uint64_t a1)
{

}

void sub_1ABBA57C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  if (*(_QWORD *)(a1 + 32))
    CSDBSqliteBindTextFromCFString();
  v6 = *(void **)(a1 + 40);
  if (v6)
    objc_msgSend(v6, "bindParametersToSqliteWithStatement:", a4);
  CSDBSqliteBindInt64();
  v10 = (id)CSDBRecordStoreProcessStatement();
  v7 = objc_msgSend(*(id *)(a1 + 48), "_copyMessageRecordsFromCoreSDBResults:", v10);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_1ABBA5B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  objc_msgSend(*(id *)(a1 + 32), "bindParametersToSqliteWithStatement:", a4);
  v8 = (id)CSDBRecordStoreProcessStatement();
  v5 = objc_msgSend(*(id *)(a1 + 40), "_copyMessageRecordsFromCoreSDBResults:", v8);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_1ABBA5E44(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  CSDBSqliteBindTextFromCFString();
  v6 = (id)CSDBRecordStoreProcessStatement();
  v2 = (void *)objc_msgSend(*(id *)(a1 + 40), "_copyMessageRecordsFromCoreSDBResults:", v6);
  objc_msgSend(v2, "firstObject");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1ABBA6000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBA6018(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  if (v2 && objc_msgSend(v2, "length"))
    CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  v6 = (id)CSDBRecordStoreProcessStatement();
  v3 = objc_msgSend(*(id *)(a1 + 40), "_copyMessageRecordsFromCoreSDBResults:", v6);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

uint64_t sub_1ABBA6154()
{
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  return CSDBRecordStoreProcessStatement();
}

uint64_t sub_1ABBA62C4()
{
  CSDBSqliteBindTextFromCFArrayOfCFStrings();
  return CSDBRecordStoreProcessStatement();
}

uint64_t sub_1ABBA63B4(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "__im_nanosecondTimeInterval");
  CSDBSqliteBindInt64();

  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        CSDBSqliteBindTextFromCFString();
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

  return CSDBSqliteStatementPerform();
}

void sub_1ABBA6CD4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABBA6B1CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1ABBA7AC8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABBA7A2CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1ABBA8A4C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABBA8A34);
  }
  _Unwind_Resume(a1);
}

void sub_1ABBA8F4C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABBA8E30);
  }
  _Unwind_Resume(a1);
}

void sub_1ABBA96BC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABBA9664);
  }
  _Unwind_Resume(a1);
}

void sub_1ABBA9F68(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1ABBA9F80(uint64_t a1)
{
  IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 40) + 32, *(_QWORD *)(a1 + 32));
}

BOOL sub_1ABBA9F8C(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      v5[2] = sub_1ABBAA014;
      v5[3] = &unk_1E5AB2AC0;
      v4 = *(_QWORD *)(a1 + 40);
      v5[4] = *(_QWORD *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1ABBAA014(uint64_t a1, __int128 *a2)
{
  NSObject *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a2 + 4))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v4 = *((_DWORD *)a2 + 4);
        LODWORD(v5) = 67109120;
        DWORD1(v5) = v4;
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Unexpected column in count chat messages query with index %d", (uint8_t *)&v5, 8u);
      }

    }
  }
  else
  {
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IMDInt64FromSqlColumn((uint64_t)&v5);
  }
}

void sub_1ABBAA614(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1ABBAA62C(uint64_t a1)
{
  IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 40) + 32, *(_QWORD *)(a1 + 32));
}

BOOL sub_1ABBAA638(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      v5[2] = sub_1ABBAA6C0;
      v5[3] = &unk_1E5AB2AC0;
      v4 = *(_QWORD *)(a1 + 40);
      v5[4] = *(_QWORD *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1ABBAA6C0(uint64_t a1, __int128 *a2)
{
  NSObject *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a2 + 4))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v4 = *((_DWORD *)a2 + 4);
        LODWORD(v5) = 67109120;
        DWORD1(v5) = v4;
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Unexpected column in count chat messages query with index %d", (uint8_t *)&v5, 8u);
      }

    }
  }
  else
  {
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IMDInt64FromSqlColumn((uint64_t)&v5);
  }
}

void sub_1ABBAA8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBAA914(uint64_t a1)
{
  IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 40) + 32, *(_QWORD *)(a1 + 32));
}

BOOL sub_1ABBAA920(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      v5[2] = sub_1ABBAA9A8;
      v5[3] = &unk_1E5AB2AC0;
      v4 = *(_QWORD *)(a1 + 40);
      v5[4] = *(_QWORD *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1ABBAA9A8(uint64_t a1, __int128 *a2)
{
  NSObject *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a2 + 4))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v4 = *((_DWORD *)a2 + 4);
        LODWORD(v5) = 67109120;
        DWORD1(v5) = v4;
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Unexpected column in count chat messages query with index %d", (uint8_t *)&v5, 8u);
      }

    }
  }
  else
  {
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IMDInt64FromSqlColumn((uint64_t)&v5);
  }
}

void sub_1ABBAAC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1ABBAACA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABBAAD30;
  v6[3] = &unk_1E5AB2248;
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v6[4] = a2;
  v6[5] = v2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABBAAD3C;
  v5[3] = &unk_1E5AB2298;
  v5[4] = v3;
  v5[5] = a2;
  return _IMDSqlOperationRunQuery(a2, CFSTR("SELECT c.guid, crmj.message_id, m.guid, crmj.delete_date, -1, NULL FROM chat_recoverable_message_join AS crmj JOIN chat AS c  ON c.ROWID = crmj.chat_id JOIN message AS m  ON m.ROWID = crmj.message_id WHERE crmj.ck_sync_state = 0  UNION ALL SELECT c.guid, rmp.message_id, m.guid, rmp.delete_date, rmp.part_index, rmp.part_text  FROM recoverable_message_part AS rmp  JOIN chat AS c   ON c.ROWID = rmp.chat_id  JOIN message AS m   ON m.ROWID = rmp.message_id  WHERE rmp.ck_sync_state = 0 LIMIT ?;"),
           (uint64_t)v6,
           (uint64_t)v5);
}

void sub_1ABBAAD30(uint64_t a1)
{
  IMDSqlStatementBindInt64(*(_QWORD *)(a1 + 32) + 32, *(_QWORD *)(a1 + 40));
}

BOOL sub_1ABBAAD3C(uint64_t a1)
{
  _BOOL8 result;
  __int128 v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  __int128 v18;
  _QWORD v19[10];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  id v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  void (*v48)(uint64_t);
  id v49;
  _QWORD v50[5];
  _QWORD v51[5];
  uint8_t buf[4];
  uint64_t v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  void *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    *(_QWORD *)&v3 = 138413314;
    v18 = v3;
    do
    {
      v44 = 0;
      v45 = &v44;
      v46 = 0x3032000000;
      v47 = sub_1ABBA57AC;
      v48 = sub_1ABBA57BC;
      v49 = 0;
      v40 = 0;
      v41 = &v40;
      v42 = 0x2020000000;
      v43 = -1;
      v34 = 0;
      v35 = &v34;
      v36 = 0x3032000000;
      v37 = sub_1ABBA57AC;
      v38 = sub_1ABBA57BC;
      v39 = 0;
      v30 = 0;
      v31 = &v30;
      v32 = 0x2020000000;
      v33 = 0;
      v26 = 0;
      v27 = &v26;
      v28 = 0x2020000000;
      v29 = 0x7FFFFFFFFFFFFFFFLL;
      v20 = 0;
      v21 = &v20;
      v22 = 0x3032000000;
      v23 = sub_1ABBA57AC;
      v24 = sub_1ABBA57BC;
      v25 = 0;
      v4 = *(_QWORD *)(a1 + 40);
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = sub_1ABBAB210;
      v19[3] = &unk_1E5AB6330;
      v19[4] = &v44;
      v19[5] = &v40;
      v19[6] = &v34;
      v19[7] = &v30;
      v19[8] = &v26;
      v19[9] = &v20;
      IMDSqlOperationIterateRow(v4, (uint64_t)v19);
      if (objc_msgSend((id)v45[5], "length")
        && v41[3] != -1
        && objc_msgSend((id)v35[5], "length")
        && v31[3]
        && v27[3] != 0x7FFFFFFFFFFFFFFFLL)
      {
        v51[0] = v45[5];
        v50[0] = CFSTR("chatGUID");
        v50[1] = CFSTR("messageRowID");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v41[3]);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v35[5];
        v51[1] = v11;
        v51[2] = v12;
        v50[2] = CFSTR("messageGUID");
        v50[3] = CFSTR("deleteDateInterval");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v31[3]);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v51[3] = v13;
        v50[4] = CFSTR("partIndex");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v27[3]);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v51[4] = v14;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v51, v50, 5);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = (void *)objc_msgSend(v15, "mutableCopy");

        if (v21[5])
        {
          JWDecodeCodableObjectWithStandardAllowlist();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "setObject:forKeyedSubscript:", v17, CFSTR("partBody"));

        }
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v16, v18);

      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v5 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          v6 = v45[5];
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v41[3]);
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          v8 = v35[5];
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v31[3]);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v27[3]);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = v18;
          v53 = v6;
          v54 = 2112;
          v55 = v7;
          v56 = 2112;
          v57 = v8;
          v58 = 2112;
          v59 = v9;
          v60 = 2112;
          v61 = v10;
          _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Recently Deleted | Error in column values returned: %@|%@|%@|%@|%@", buf, 0x34u);

        }
      }
      _Block_object_dispose(&v20, 8);

      _Block_object_dispose(&v26, 8);
      _Block_object_dispose(&v30, 8);
      _Block_object_dispose(&v34, 8);

      _Block_object_dispose(&v40, 8);
      _Block_object_dispose(&v44, 8);

      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1ABBAB1AC()
{
  JUMPOUT(0x1ABBAB1B8);
}

void sub_1ABBAB210(_QWORD *a1, __int128 *a2)
{
  const unsigned __int8 *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  int v8;
  sqlite3_int64 v9;
  uint64_t v10;
  const unsigned __int8 *v11;
  uint64_t v12;
  void *v13;
  CFDataRef v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      v17 = *a2;
      v18 = *((_QWORD *)a2 + 2);
      v4 = IMDStringFromSqlColumn((uint64_t)&v17);
      v5 = *(_QWORD *)(a1[4] + 8);
      v6 = *(void **)(v5 + 40);
      *(_QWORD *)(v5 + 40) = v4;

      return;
    case 1:
      v17 = *a2;
      v18 = *((_QWORD *)a2 + 2);
      v9 = IMDInt64FromSqlColumn((uint64_t)&v17);
      v10 = a1[5];
      goto LABEL_11;
    case 2:
      v17 = *a2;
      v18 = *((_QWORD *)a2 + 2);
      v11 = IMDStringFromSqlColumn((uint64_t)&v17);
      v12 = *(_QWORD *)(a1[6] + 8);
      v13 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v11;

      return;
    case 3:
      v17 = *a2;
      v18 = *((_QWORD *)a2 + 2);
      v9 = IMDInt64FromSqlColumn((uint64_t)&v17);
      v10 = a1[7];
      goto LABEL_11;
    case 4:
      v17 = *a2;
      v18 = *((_QWORD *)a2 + 2);
      v9 = IMDInt64FromSqlColumn((uint64_t)&v17);
      v10 = a1[8];
LABEL_11:
      *(_QWORD *)(*(_QWORD *)(v10 + 8) + 24) = v9;
      break;
    case 5:
      v17 = *a2;
      v18 = *((_QWORD *)a2 + 2);
      v14 = IMDBlobFromSqlColumn((uint64_t)&v17);
      v15 = *(_QWORD *)(a1[9] + 8);
      v16 = *(void **)(v15 + 40);
      *(_QWORD *)(v15 + 40) = v14;

      break;
    default:
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          v8 = *((_DWORD *)a2 + 4);
          LODWORD(v17) = 67109120;
          DWORD1(v17) = v8;
          _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Recently Deleted | Unexpected column in messages pending update query with index %d", (uint8_t *)&v17, 8u);
        }

      }
      break;
  }
}

void sub_1ABBAB5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1ABBAB5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABBAB684;
  v6[3] = &unk_1E5AB2248;
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v6[4] = a2;
  v6[5] = v2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABBAB690;
  v5[3] = &unk_1E5AB2298;
  v5[4] = v3;
  v5[5] = a2;
  return _IMDSqlOperationRunQuery(a2, CFSTR("SELECT urrm.chat_guid, urrm.message_guid, urrm.part_index FROM unsynced_removed_recoverable_messages AS urrm LIMIT ?;"),
           (uint64_t)v6,
           (uint64_t)v5);
}

void sub_1ABBAB684(uint64_t a1)
{
  IMDSqlStatementBindInt64(*(_QWORD *)(a1 + 32) + 32, *(_QWORD *)(a1 + 40));
}

BOOL sub_1ABBAB690(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v13[7];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  _QWORD v30[3];
  _QWORD v31[3];
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v24 = 0;
      v25 = &v24;
      v26 = 0x3032000000;
      v27 = sub_1ABBA57AC;
      v28 = sub_1ABBA57BC;
      v29 = 0;
      v18 = 0;
      v19 = &v18;
      v20 = 0x3032000000;
      v21 = sub_1ABBA57AC;
      v22 = sub_1ABBA57BC;
      v23 = 0;
      v14 = 0;
      v15 = &v14;
      v16 = 0x2020000000;
      v17 = 0x7FFFFFFFFFFFFFFFLL;
      v4 = *(_QWORD *)(a1 + 40);
      v13[0] = v3;
      v13[1] = 3221225472;
      v13[2] = sub_1ABBAB9D0;
      v13[3] = &unk_1E5AB6358;
      v13[4] = &v24;
      v13[5] = &v18;
      v13[6] = &v14;
      IMDSqlOperationIterateRow(v4, (uint64_t)v13);
      if (objc_msgSend((id)v25[5], "length") && objc_msgSend((id)v19[5], "length") && v15[3] != 0x7FFFFFFFFFFFFFFFLL)
      {
        v9 = v25[5];
        v30[0] = CFSTR("chatGUID");
        v30[1] = CFSTR("messageGUID");
        v10 = v19[5];
        v31[0] = v9;
        v31[1] = v10;
        v30[2] = CFSTR("partIndex");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v31[2] = v11;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v31, v30, 3);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v12);
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v5 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          v6 = v25[5];
          v7 = v19[5];
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v15[3]);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412802;
          v33 = v6;
          v34 = 2112;
          v35 = v7;
          v36 = 2112;
          v37 = v8;
          _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Error in column values returned: %@|%@|%@", buf, 0x20u);

        }
      }
      _Block_object_dispose(&v14, 8);
      _Block_object_dispose(&v18, 8);

      _Block_object_dispose(&v24, 8);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1ABBAB994()
{
  JUMPOUT(0x1ABBAB99CLL);
}

void sub_1ABBAB9D0(_QWORD *a1, __int128 *a2)
{
  int v4;
  const unsigned __int8 *v5;
  uint64_t v6;
  void *v7;
  const unsigned __int8 *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a2 + 4);
  if (v4 == 2)
  {
    v13 = *a2;
    v14 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = IMDInt64FromSqlColumn((uint64_t)&v13);
  }
  else if (v4 == 1)
  {
    v13 = *a2;
    v14 = *((_QWORD *)a2 + 2);
    v8 = IMDStringFromSqlColumn((uint64_t)&v13);
    v9 = *(_QWORD *)(a1[5] + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
  else if (v4)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = *((_DWORD *)a2 + 4);
        LODWORD(v13) = 67109120;
        DWORD1(v13) = v12;
        _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "Recently Deleted | Unexpected column in messages pending delete query with index %d", (uint8_t *)&v13, 8u);
      }

    }
  }
  else
  {
    v13 = *a2;
    v14 = *((_QWORD *)a2 + 2);
    v5 = IMDStringFromSqlColumn((uint64_t)&v13);
    v6 = *(_QWORD *)(a1[4] + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

  }
}

void sub_1ABBAC744(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1ABBAC9AC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_1ABBAC9C8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x20u);
}

void sub_1ABBAC9F0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0xCu);
}

uint64_t sub_1ABBACA34(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1ABBACD20(uint64_t a1)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)CPCopySharedResourcesPreferencesDomainForDomain();
  if (v2)
  {
    v3 = v2;
    CFPreferencesAppSynchronize(v2);
    CFPreferencesSetAppValue(CFSTR("IMCSIndexReason"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1), v3);
    CFRelease(v3);
  }
}

id sub_1ABBACD88()
{
  const __CFString *v0;
  const __CFString *v1;
  void *v2;

  v0 = (const __CFString *)CPCopySharedResourcesPreferencesDomainForDomain();
  if (v0)
  {
    v1 = v0;
    CFPreferencesAppSynchronize(v0);
    v2 = (void *)CFPreferencesCopyAppValue(CFSTR("IMDCoreSpotlightLastFullReindexRequestTime"), v1);
    CFRelease(v1);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

uint64_t sub_1ABBADCA4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABBADCB4(uint64_t a1)
{

}

void sub_1ABBADCBC(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  unint64_t v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = IMOSLoggingEnabled();
  if (a2)
  {
    if (!v18)
      goto LABEL_10;
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v36 = 138412802;
      v37 = v20;
      v38 = 2112;
      v39 = v15;
      v40 = 2112;
      v41 = v16;
      _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Successfully downloaded file transfer with GUID %@. filePath: %@, livePhotoBundlePath: %@", (uint8_t *)&v36, 0x20u);
    }
  }
  else
  {
    if (!v18)
      goto LABEL_10;
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v36 = 138412802;
      v37 = v21;
      v38 = 2112;
      v39 = (unint64_t)v14;
      v40 = 2112;
      v41 = (unint64_t)v17;
      _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Failed to download file transfer with GUID %@. suggestedRetryGUID: %@ Error: %@", (uint8_t *)&v36, 0x20u);
    }
  }

LABEL_10:
  if (v15 | v16)
  {
    objc_msgSend((id)v15, "pathExtension");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    IMUTITypeForExtension();
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v25 = *(void **)(v24 + 40);
    *(_QWORD *)(v24 + 40) = v23;

    if (v16)
      v26 = (void *)v16;
    else
      v26 = (void *)v15;
    v27 = v26;
    v28 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initFileURLWithPath:", v27);
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v30 = *(void **)(v29 + 40);
    *(_QWORD *)(v29 + 40) = v28;

    if (v16 && IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
        v36 = 138412290;
        v37 = v32;
        _os_log_impl(&dword_1ABB60000, v31, OS_LOG_TYPE_INFO, "Requested transfer is a live photo. Returning live photo bundle URL. fileURL: %@", (uint8_t *)&v36, 0xCu);
      }

    }
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), a4);
  if (v17)
  {
    objc_msgSend(*(id *)(a1 + 32), "_createErrorFromSyncError:", v17);
    v33 = objc_claimAutoreleasedReturnValue();
    v34 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v35 = *(void **)(v34 + 40);
    *(_QWORD *)(v34 + 40) = v33;

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1ABBADFE0(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  __int16 v35;
  unint64_t v36;
  __int16 v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = IMOSLoggingEnabled();
  if (a2)
  {
    if (!v18)
      goto LABEL_10;
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      v33 = 138412802;
      v34 = v20;
      v35 = 2112;
      v36 = v15;
      v37 = 2112;
      v38 = v16;
      _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Successfully downloaded file transfer with secondary GUID %@. filePath: %@, livePhotoBundlePath: %@", (uint8_t *)&v33, 0x20u);
    }
  }
  else
  {
    if (!v18)
      goto LABEL_10;
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      v33 = 138412546;
      v34 = v21;
      v35 = 2112;
      v36 = (unint64_t)v17;
      _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Failed to download file transfer with secondary GUID %@. Error: %@", (uint8_t *)&v33, 0x16u);
    }
  }

LABEL_10:
  if (v15 | v16)
  {
    objc_msgSend((id)v15, "pathExtension");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    IMUTITypeForExtension();
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v25 = *(void **)(v24 + 40);
    *(_QWORD *)(v24 + 40) = v23;

    if (v16)
      v26 = (void *)v16;
    else
      v26 = (void *)v15;
    v27 = v26;
    v28 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initFileURLWithPath:", v27);
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v30 = *(void **)(v29 + 40);
    *(_QWORD *)(v29 + 40) = v28;

    if (v16 && IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        v33 = 138412290;
        v34 = v32;
        _os_log_impl(&dword_1ABB60000, v31, OS_LOG_TYPE_INFO, "Requested transfer is a live photo. Returning live photo bundle URL. fileURL: %@", (uint8_t *)&v33, 0xCu);
      }

    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1ABBAF2D0(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  int v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  int v28;
  id v29;
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  unint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = IMOSLoggingEnabled();
  if (a2)
  {
    if (!v18)
      goto LABEL_10;
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v28 = 138412802;
      v29 = v13;
      v30 = 2112;
      v31 = v15;
      v32 = 2112;
      v33 = v16;
      _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Successfully downloaded file transfer with GUID %@. filePath: %@, livePhotoBundlePath: %@", (uint8_t *)&v28, 0x20u);
    }
  }
  else
  {
    if (!v18)
      goto LABEL_10;
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v28 = 138412802;
      v29 = v13;
      v30 = 2112;
      v31 = (unint64_t)v14;
      v32 = 2112;
      v33 = (unint64_t)v17;
      _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Failed to download file transfer with GUID %@. suggestedRetryGUID: %@ Error: %@", (uint8_t *)&v28, 0x20u);
    }
  }

LABEL_10:
  if (v15 | v16)
  {
    objc_msgSend((id)v15, "pathExtension");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    IMUTITypeForExtension();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v21, v13);

    if (v16)
      v22 = (void *)v16;
    else
      v22 = (void *)v15;
    v23 = v22;
    v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initFileURLWithPath:", v23);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setObject:forKeyedSubscript:", v24, v13);

    if (v16 && IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "objectForKeyedSubscript:", v13);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = 138412546;
        v29 = v26;
        v30 = 2112;
        v31 = (unint64_t)v13;
        _os_log_impl(&dword_1ABB60000, v25, OS_LOG_TYPE_INFO, "Requested transfer is a live photo. Returning live photo bundle URL. fileURL: %@ for file transfer guid: %@", (uint8_t *)&v28, 0x16u);

      }
    }

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setObject:forKeyedSubscript:", v14, v13);
  if (v17)
  {
    objc_msgSend(*(id *)(a1 + 32), "_createErrorFromSyncError:", v17);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "setObject:forKeyedSubscript:", v27, v13);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "addObject:", v13);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1ABBAF63C(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  int v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  NSObject *v25;
  void *v26;
  int v27;
  id v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = IMOSLoggingEnabled();
  if (a2)
  {
    if (!v18)
      goto LABEL_10;
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v27 = 138412802;
      v28 = v13;
      v29 = 2112;
      v30 = v15;
      v31 = 2112;
      v32 = v16;
      _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Successfully downloaded file transfer with secondary GUID %@. filePath: %@, livePhotoBundlePath: %@", (uint8_t *)&v27, 0x20u);
    }
  }
  else
  {
    if (!v18)
      goto LABEL_10;
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v27 = 138412546;
      v28 = v13;
      v29 = 2112;
      v30 = (unint64_t)v17;
      _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Failed to download file transfer with secondary GUID %@. Error: %@", (uint8_t *)&v27, 0x16u);
    }
  }

LABEL_10:
  if (v15 | v16)
  {
    objc_msgSend((id)v15, "pathExtension");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    IMUTITypeForExtension();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setObject:forKeyedSubscript:", v21, v13);

    if (v16)
      v22 = (void *)v16;
    else
      v22 = (void *)v15;
    v23 = v22;
    v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initFileURLWithPath:", v23);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v24, v13);

    if (v16 && IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "objectForKeyedSubscript:", v13);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = 138412546;
        v28 = v26;
        v29 = 2112;
        v30 = (unint64_t)v13;
        _os_log_impl(&dword_1ABB60000, v25, OS_LOG_TYPE_INFO, "Requested transfer is a live photo. Returning live photo bundle URL. fileURL: %@ for file transfer guid: %@", (uint8_t *)&v27, 0x16u);

      }
    }

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1ABBB014C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABBAFC28);
  }
  _Unwind_Resume(a1);
}

id IMDAttachmentRecordGetAttachmentDiagnosticInfo()
{
  void *v0;
  uint64_t v1;
  IMDAttachmentDiagnosticInfo *v2;
  IMDAttachmentDiagnosticInfo *v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD v7[4];
  IMDAttachmentDiagnosticInfo *v8;
  _OWORD v9[11];
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (IMDIsRunningInDatabaseServerProcess())
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    memset(v9, 0, sizeof(v9));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v9);
    _IMDSqlOperationBeginQuery((uint64_t)v9, CFSTR("SELECT guid, original_guid, uti, filename, total_bytes, ck_sync_state, transfer_state, hide_attachment, is_sticker, mime_type, attribution_info FROM attachment;"));
    if (IMDSqlOperationHasRows((uint64_t)v9))
    {
      v1 = MEMORY[0x1E0C809B0];
      do
      {
        v2 = objc_alloc_init(IMDAttachmentDiagnosticInfo);
        v7[0] = v1;
        v7[1] = 3221225472;
        v7[2] = sub_1ABBB0B04;
        v7[3] = &unk_1E5AB72A8;
        v8 = v2;
        v3 = v2;
        IMDSqlOperationIterateRow((uint64_t)v9, (uint64_t)v7);
        objc_msgSend(v0, "addObject:", v3);

      }
      while (IMDSqlOperationHasRows((uint64_t)v9));
    }
    IMDSqlOperationFinishQuery((uint64_t)v9);
    IMDSqlOperationRelease((uint64_t)v9, 0);
    IMLogHandleForCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = objc_msgSend(v0, "count");
      *(_DWORD *)buf = 134217984;
      v11 = v5;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Loaded %ld IMDAttachment info objects from database", buf, 0xCu);
    }

  }
  else
  {
    v0 = 0;
  }
  return v0;
}

void sub_1ABBB0B04(uint64_t a1, __int128 *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  __int128 v7;
  uint64_t v8;

  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      v7 = *a2;
      v8 = *((_QWORD *)a2 + 2);
      v3 = (void *)IMDStringFromSqlColumn((uint64_t)&v7);
      objc_msgSend(*(id *)(a1 + 32), "setGuid:", v3);
      goto LABEL_16;
    case 1:
      v7 = *a2;
      v8 = *((_QWORD *)a2 + 2);
      v3 = (void *)IMDStringFromSqlColumn((uint64_t)&v7);
      objc_msgSend(*(id *)(a1 + 32), "setOriginalGUID:", v3);
      goto LABEL_16;
    case 2:
      v7 = *a2;
      v8 = *((_QWORD *)a2 + 2);
      v3 = (void *)IMDStringFromSqlColumn((uint64_t)&v7);
      objc_msgSend(*(id *)(a1 + 32), "setUti:", v3);
      goto LABEL_16;
    case 3:
      v7 = *a2;
      v8 = *((_QWORD *)a2 + 2);
      v3 = (void *)IMDStringFromSqlColumn((uint64_t)&v7);
      objc_msgSend(v3, "stringByExpandingTildeInPath");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "setFilePath:", v4);
      goto LABEL_15;
    case 4:
      v7 = *a2;
      v8 = *((_QWORD *)a2 + 2);
      objc_msgSend(*(id *)(a1 + 32), "setTotal_bytes:", IMDInt64FromSqlColumn((uint64_t)&v7));
      return;
    case 5:
      v7 = *a2;
      v8 = *((_QWORD *)a2 + 2);
      objc_msgSend(*(id *)(a1 + 32), "setCk_sync_state:", IMDInt64FromSqlColumn((uint64_t)&v7));
      return;
    case 6:
      v7 = *a2;
      v8 = *((_QWORD *)a2 + 2);
      objc_msgSend(*(id *)(a1 + 32), "setTransfer_state:", IMDInt64FromSqlColumn((uint64_t)&v7));
      return;
    case 7:
      v7 = *a2;
      v8 = *((_QWORD *)a2 + 2);
      objc_msgSend(*(id *)(a1 + 32), "setHide_attachment:", IMDInt64FromSqlColumn((uint64_t)&v7));
      return;
    case 8:
      v7 = *a2;
      v8 = *((_QWORD *)a2 + 2);
      objc_msgSend(*(id *)(a1 + 32), "setIs_sticker:", IMDInt64FromSqlColumn((uint64_t)&v7));
      return;
    case 9:
      v7 = *a2;
      v8 = *((_QWORD *)a2 + 2);
      v3 = (void *)IMDStringFromSqlColumn((uint64_t)&v7);
      objc_msgSend(*(id *)(a1 + 32), "setMime_type:", v3);
      goto LABEL_16;
    case 0xA:
      v7 = *a2;
      v8 = *((_QWORD *)a2 + 2);
      v3 = IMDBlobFromSqlColumn((uint64_t)&v7);
      if (!v3)
        goto LABEL_16;
      JWDecodeDictionary();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v5;
      if (v5)
      {
        objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D37F30]);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "setPlugin_identifier:", v6);

      }
LABEL_15:

LABEL_16:
      return;
    default:
      return;
  }
}

uint64_t IMDDatabaseTriggers()
{
  if (qword_1ED0D3A38 != -1)
    dispatch_once(&qword_1ED0D3A38, &unk_1E5AAF128);
  return qword_1ED0D3A40;
}

void sub_1ABBB0DAC()
{
  uint64_t v0;
  __CFString *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t buf[4];
  __CFString *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  v1 = CFSTR("before_delete_on_attachment");
  qword_1ED0D3A40 = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
  do
  {
    if ((IMAllowMessagesIniCloud() & 1) == 0
      && ((-[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("add_to_sync_deleted_messages")) & 1) != 0
       || -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("add_to_sync_deleted_attachments"))))
    {
      if (IMOSLoggingEnabled())
      {
        v3 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v5 = v1;
          _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Not adding trigger for external builds %@", buf, 0xCu);
        }
      }
    }
    else
    {
      v2 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("CREATE TRIGGER IF NOT EXISTS %@ %@"), v1, off_1E5AB72C8[v0 + 1]);
      objc_msgSend((id)qword_1ED0D3A40, "setObject:forKey:", v2, v1);
    }
    v1 = off_1E5AB72C8[v0 + 2];
    v0 += 2;
  }
  while (v0 != 36);
}

BOOL IMDDropAllTriggersWithOperation(uint64_t a1, int a2)
{
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[6];
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = sub_1ABBB11A8;
  v17[3] = &unk_1E5AB2098;
  v17[4] = v4;
  v17[5] = a1;
  _IMDSqlOperationRunQuery(a1, CFSTR("SELECT name FROM sqlite_master WHERE type = 'trigger'"), 0, (uint64_t)v17);
  if (!*(_QWORD *)(a1 + 168))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v22, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v14;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v14 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
          if (!_IMDSqlOperationRunQuery(a1, (CFStringRef)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("DROP TRIGGER IF EXISTS %@"), v9), 0, 0))
          {
            v11 = IMLogHandleForCategory();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
            {
              v12 = IMDSqlOperationErrorDescription(a1);
              *(_DWORD *)buf = 138412546;
              v19 = v9;
              v20 = 2112;
              v21 = v12;
              _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "Dropped trigger failed: %@: %@", buf, 0x16u);
            }
            return *(_QWORD *)(a1 + 168) == 0;
          }
          if (a2)
          {
            v10 = IMLogHandleForCategory();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              v19 = v9;
              _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "Dropped trigger: %@", buf, 0xCu);
            }
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v22, 16);
        if (v6)
          continue;
        break;
      }
    }
  }
  return *(_QWORD *)(a1 + 168) == 0;
}

BOOL sub_1ABBB11A8(uint64_t a1)
{
  _BOOL8 result;
  const unsigned __int8 *v3;
  _BYTE v4[24];

  for (result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40)); result; result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40)))
  {
    IMDSqlOperationColumnByIndex(*(_QWORD *)(a1 + 40), 0, (uint64_t)v4);
    v3 = IMDStringFromSqlColumn((uint64_t)v4);
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
    if (v3)
      CFRelease(v3);
  }
  return result;
}

BOOL IMDDropAllTriggers(uint64_t a1, char a2)
{
  _QWORD v3[5];
  char v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABBB126C;
  v3[3] = &unk_1E5AB73F8;
  v4 = a2;
  v3[4] = a1;
  return IMDRunSqlOperation((uint64_t)v3);
}

uint64_t sub_1ABBB126C(uint64_t a1, uint64_t a2)
{
  IMDDropAllTriggersWithOperation(a2, *(unsigned __int8 *)(a1 + 40));
  return IMDSqlOperationGetError(a2, *(_QWORD **)(a1 + 32));
}

uint64_t IMDSelectAllTriggers(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  uint64_t v10;

  v5 = 0;
  v6 = &v5;
  v7 = 0x3052000000;
  v8 = sub_1ABBB1368;
  v9 = sub_1ABBB1378;
  v10 = 0;
  v10 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1ABBB1384;
  v4[3] = &unk_1E5AB22C0;
  v4[4] = &v5;
  v4[5] = a1;
  IMDRunSqlOperation((uint64_t)v4);
  v2 = v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1ABBB1350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBB1368(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1ABBB1378(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1ABBB1384(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABBB142C;
  v5[3] = &unk_1E5AB2298;
  v5[4] = *(_QWORD *)(a1 + 32);
  v5[5] = a2;
  _IMDSqlOperationRunQuery(a2, CFSTR("select * from sqlite_master where type = 'trigger'"), 0, (uint64_t)v5);
  CFRelease(CFSTR("select * from sqlite_master where type = 'trigger'"));
  result = IMDSqlOperationGetError(a2, *(_QWORD **)(a1 + 40));
  if ((_DWORD)result)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = 0;
  return result;
}

BOOL sub_1ABBB142C(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];

  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v4 = objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v5 = *(_QWORD *)(a1 + 40);
      v6[0] = v3;
      v6[1] = 3221225472;
      v6[2] = sub_1ABBB14E0;
      v6[3] = &unk_1E5AB7420;
      v6[4] = v4;
      IMDSqlOperationIterateRow(v5, (uint64_t)v6);
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v4);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1ABBB14E0(uint64_t a1, __int128 *a2)
{
  const unsigned __int8 *v4;
  void *v5;
  void *v6;
  const char *v7;
  sqlite3_stmt *v8;
  __int128 v9;
  uint64_t v10;

  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  v4 = IMDStringFromSqlColumn((uint64_t)&v9);
  v5 = *(void **)(a1 + 32);
  v6 = (void *)MEMORY[0x1E0CB3940];
  v7 = (const char *)*((_QWORD *)a2 + 1);
  if (!v7)
  {
    v8 = **(sqlite3_stmt ***)a2;
    if (v8)
    {
      v7 = sqlite3_column_name(v8, *((_DWORD *)a2 + 4));
      *((_QWORD *)a2 + 1) = v7;
    }
    else
    {
      v7 = 0;
    }
  }
  objc_msgSend(v5, "setObject:forKey:", v4, objc_msgSend(v6, "stringWithCString:encoding:", v7, 4));
  CFRelease(v4);
}

BOOL IMDCreateTriggersWithOperation(uint64_t a1, int a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  const __CFString *v12;
  NSObject *v13;
  _BOOL8 result;
  NSObject *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t v21[128];
  uint8_t buf[4];
  uint64_t v23;
  _BYTE v24[32];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    *(_OWORD *)v24 = xmmword_1E5AB7440;
    *(_OWORD *)&v24[16] = *(_OWORD *)off_1E5AB7450;
    v25 = 174;
    v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("operation"), "BOOL IMDCreateTriggersWithOperation(IMDSqlOperation *, BOOL)", IMFileLocationTrimFileName(), 174, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v23 = v4;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (qword_1ED0D3A38 != -1)
    dispatch_once(&qword_1ED0D3A38, &unk_1E5AAF128);
  v7 = (void *)qword_1ED0D3A40;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v8 = objc_msgSend((id)qword_1ED0D3A40, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v18;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v18 != v9)
          objc_enumerationMutation(v7);
        v11 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i);
        v12 = (const __CFString *)objc_msgSend(v7, "objectForKey:", v11);
        if (!_IMDSqlOperationRunQuery(a1, v12, 0, 0))
        {
          v15 = IMLogHandleForCategory();
          result = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
          if (result)
          {
            v16 = IMDSqlOperationErrorDescription(a1);
            *(_DWORD *)v24 = 138412546;
            *(_QWORD *)&v24[4] = v11;
            *(_WORD *)&v24[12] = 2112;
            *(_QWORD *)&v24[14] = v16;
            _os_log_impl(&dword_1ABB60000, v15, OS_LOG_TYPE_INFO, "Create trigger failed: %@: %@", v24, 0x16u);
            return 0;
          }
          return result;
        }
        if (a2)
        {
          v13 = IMLogHandleForCategory();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v24 = 138412546;
            *(_QWORD *)&v24[4] = v11;
            *(_WORD *)&v24[12] = 2112;
            *(_QWORD *)&v24[14] = v12;
            _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "Created trigger ok: %@, trigger: %@", v24, 0x16u);
          }
        }
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      if (v8)
        continue;
      break;
    }
  }
  return 1;
}

BOOL IMDDropTriggersWithTriggerNames(void *a1, int a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  __CFString *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint32_t v15;
  NSObject *v16;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v23 = xmmword_1E5AB7468;
    v24 = *(_OWORD *)off_1E5AB7478;
    v3 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("names"), "BOOL IMDDropTriggersWithTriggerNames(NSArray *, BOOL)", IMFileLocationTrimFileName(), 194, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v4 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v4)
    {
      v4(v3);
    }
    else if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v35 = v3;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)&v23);
  IMDSqlOperationBeginTransaction(&v23);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v19, v38, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v20 != v7)
          objc_enumerationMutation(a1);
        v9 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * i);
        v10 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("DROP TRIGGER IF EXISTS %@"), v9);
        _IMDSqlOperationBeginQuery((uint64_t)&v23, v10);

        IMDSqlOperationFinishQuery((uint64_t)&v23);
        if (*((_QWORD *)&v33 + 1))
        {
          v11 = IMLogHandleForCategory();
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
            continue;
          v12 = IMDSqlOperationErrorDescription((uint64_t)&v23);
          *(_DWORD *)buf = 138412546;
          v35 = v9;
          v36 = 2112;
          v37 = v12;
          v13 = v11;
          v14 = "dropping trigger failed: %@: %@";
          v15 = 22;
          goto LABEL_18;
        }
        if (a2)
        {
          v16 = IMLogHandleForCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v35 = v9;
            v13 = v16;
            v14 = "dropped trigger ok: %@";
            v15 = 12;
LABEL_18:
            _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, v14, buf, v15);
            continue;
          }
        }
      }
      v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v19, v38, 16);
    }
    while (v6);
  }
  IMDSqlOperationCommitOrRevertTransaction(&v23);
  return IMDSqlOperationRelease((uint64_t)&v23, 0);
}

BOOL IMDCreateTriggersWithTriggerNames(void *a1, int a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  const char *v10;
  const __CFString *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v25 = xmmword_1E5AB7490;
    v26 = *(_OWORD *)off_1E5AB74A0;
    v3 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("names"), "BOOL IMDCreateTriggersWithTriggerNames(NSArray *, BOOL)", IMFileLocationTrimFileName(), 221, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v4 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v4)
    {
      v4(v3);
    }
    else if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v37 = (const char *)v3;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)&v25);
  IMDSqlOperationBeginTransaction(&v25);
  if (qword_1ED0D3A38 != -1)
    dispatch_once(&qword_1ED0D3A38, &unk_1E5AAF128);
  v6 = (void *)qword_1ED0D3A40;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v7 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v21, v44, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v22 != v8)
          objc_enumerationMutation(a1);
        v10 = *(const char **)(*((_QWORD *)&v21 + 1) + 8 * i);
        v11 = (const __CFString *)objc_msgSend(v6, "objectForKey:", v10);
        if (v11)
        {
          _IMDSqlOperationBeginQuery((uint64_t)&v25, v11);
          IMDSqlOperationFinishQuery((uint64_t)&v25);
          if (*((_QWORD *)&v35 + 1))
          {
            v12 = IMLogHandleForCategory();
            if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
              continue;
            v13 = IMDSqlOperationErrorDescription((uint64_t)&v25);
            *(_DWORD *)buf = 138412546;
            v37 = v10;
            v38 = 2112;
            v39 = (const char *)v13;
            v14 = v12;
            v15 = "Create trigger failed: %@: %@";
            goto LABEL_23;
          }
          if (a2)
          {
            v18 = IMLogHandleForCategory();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              v37 = v10;
              v38 = 2112;
              v39 = (const char *)v11;
              v14 = v18;
              v15 = "Created trigger ok: %@ trigger %@";
LABEL_23:
              _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, v15, buf, 0x16u);
              continue;
            }
          }
        }
        else
        {
          v16 = IMLogHandleForCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            v17 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70);
            *(_DWORD *)buf = 136315906;
            v37 = "sql";
            v38 = 2080;
            v39 = "BOOL IMDCreateTriggersWithTriggerNames(NSArray *, BOOL)";
            v40 = 1024;
            v41 = 230;
            v42 = 2112;
            v43 = v17;
            _os_log_error_impl(&dword_1ABB60000, v16, OS_LOG_TYPE_ERROR, "ASSERTION FAILED: %s is unexpectedly nil in \"%s\" at line %d [%@]", buf, 0x26u);
          }
        }
      }
      v7 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v21, v44, 16);
    }
    while (v7);
  }
  IMDSqlOperationCommitOrRevertTransaction(&v25);
  return IMDSqlOperationRelease((uint64_t)&v25, 0);
}

BOOL IMDCreateTriggers(uint64_t a1, char a2)
{
  _QWORD v3[5];
  char v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABBB2068;
  v3[3] = &unk_1E5AB73F8;
  v4 = a2;
  v3[4] = a1;
  return IMDRunSqlOperation((uint64_t)v3);
}

uint64_t sub_1ABBB2068(uint64_t a1, uint64_t a2)
{
  IMDCreateTriggersWithOperation(a2, *(unsigned __int8 *)(a1 + 40));
  return IMDSqlOperationGetError(a2, *(_QWORD **)(a1 + 32));
}

id IMDSpotlightPriorityIndexerClasses()
{
  _QWORD v1[10];

  v1[9] = *MEMORY[0x1E0C80C00];
  v1[0] = objc_opt_class();
  v1[1] = objc_opt_class();
  v1[2] = objc_opt_class();
  v1[3] = objc_opt_class();
  v1[4] = objc_opt_class();
  v1[5] = objc_opt_class();
  v1[6] = objc_opt_class();
  v1[7] = objc_opt_class();
  v1[8] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v1, 9);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1ABBB22B4()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_indexType"), 1, 0, 1, 0);
  v1 = (void *)qword_1ED0D3958;
  qword_1ED0D3958 = v0;

}

void sub_1ABBB2338()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_isGroupChat"), 1, 0, 1, 0);
  v1 = (void *)qword_1ED0D3838;
  qword_1ED0D3838 = v0;

}

void sub_1ABBB23BC()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_fromMe"), 1, 0, 1, 0);
  v1 = (void *)qword_1ED0D3978;
  qword_1ED0D3978 = v0;

}

void sub_1ABBB2440()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_businessChat"), 1, 0, 1, 0);
  v1 = (void *)qword_1ED0D3968;
  qword_1ED0D3968 = v0;

}

void sub_1ABBB24C4()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_mentionedAddresses"), 1, 0, 1, 0);
  v1 = (void *)qword_1ED0D3848;
  qword_1ED0D3848 = v0;

}

void sub_1ABBB2548()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_chatUniqueIdentifier"), 0, 0, 1, 0);
  v1 = (void *)qword_1ED0D3770;
  qword_1ED0D3770 = v0;

}

void sub_1ABBB25CC()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_chatIsMuted"), 0, 0, 1, 0);
  v1 = (void *)qword_1EEC40388;
  qword_1EEC40388 = v0;

}

void sub_1ABBB270C()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_suggested_contact_name"), 0, 0, 0, 0);
  v1 = (void *)qword_1EEC403F0;
  qword_1EEC403F0 = v0;

}

void sub_1ABBB2790()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_suggested_contact_photo"), 0, 0, 0, 0);
  v1 = (void *)qword_1EEC40400;
  qword_1EEC40400 = v0;

}

void sub_1ABBB2814()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_groupPhotoPath"), 0, 0, 0, 0);
  v1 = (void *)qword_1ED0D3948;
  qword_1ED0D3948 = v0;

}

void sub_1ABBB3E8C(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  if (v2)
  {
    IMLogHandleForCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC5BA08((uint64_t)v2, v3);

  }
}

id sub_1ABBB3EE8(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "handles");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "firstObject");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1ABBB582C()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_lpDescription"), 1, 0, 0, 0);
  v1 = (void *)qword_1EEC40410;
  qword_1EEC40410 = v0;

}

void sub_1ABBB58B0()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_lpTitle"), 1, 0, 0, 0);
  v1 = (void *)qword_1EEC40420;
  qword_1EEC40420 = v0;

}

void sub_1ABBB5F58()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_lpRichMedia"), 1, 0, 1, 0);
  v1 = (void *)qword_1EEC40430;
  qword_1EEC40430 = v0;

}

void sub_1ABBB5FDC()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_lpPluginPaths"), 0, 0, 1, 1);
  v1 = (void *)qword_1EEC40440;
  qword_1EEC40440 = v0;

}

void sub_1ABBB868C()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_isSyndicatableMedia"), 0, 0, 1, 0);
  v1 = (void *)qword_1ED0D38F8;
  qword_1ED0D38F8 = v0;

}

void sub_1ABBB8710()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_livePhotoComplementPath"), 0, 0, 1, 0);
  v1 = (void *)qword_1ED0D38E8;
  qword_1ED0D38E8 = v0;

}

void sub_1ABBB8794()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_momentShareURL"), 0, 0, 1, 0);
  v1 = (void *)qword_1EEC40450;
  qword_1EEC40450 = v0;

}

void sub_1ABBB8818()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_PHAssetUUID"), 0, 0, 1, 0);
  v1 = (void *)qword_1EEC40460;
  qword_1EEC40460 = v0;

}

Class sub_1ABBB8CB4(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!qword_1EEC40478)
  {
    v4 = xmmword_1E5AB7638;
    v5 = 0;
    qword_1EEC40478 = _sl_dlopen();
  }
  if (!qword_1EEC40478)
    sub_1ABC5BAB0(&v3);
  result = objc_getClass("LPMapMetadata");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1ABC5BB2C();
  qword_1EEC40470 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1ABBB9200(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABBB9210(uint64_t a1)
{

}

void sub_1ABBB9218(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

uint64_t IMDGetTimeStampedFilePath(void *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  NSObject *v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("path"), "NSString *IMDGetTimeStampedFilePath(NSString *, NSString *)", IMFileLocationTrimFileName(), 31, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v13 = v4;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  v7 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  objc_msgSend(v7, "setDateFormat:", CFSTR("yyMMdd-HHmmss"));
  v8 = objc_msgSend(a1, "pathExtension");
  v9 = (void *)objc_msgSend(a1, "stringByDeletingPathExtension");
  v10 = objc_msgSend(v7, "stringFromDate:", objc_msgSend(MEMORY[0x1E0C99D68], "date"));

  if (a2)
    return objc_msgSend(v9, "stringByAppendingFormat:", CFSTR("-%@-%@.%@"), a2, v10, v8);
  else
    return objc_msgSend(v9, "stringByAppendingFormat:", CFSTR("-%@.%@"), v10, v8);
}

uint64_t IMDGetDestinationFilePath(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t);
  NSObject *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  NSObject *v11;
  void *v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  NSObject *v15;
  uint64_t v16;
  uint64_t v18;
  void (*v19)(uint64_t);
  NSObject *v20;
  uint8_t buf[4];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("originalPath"), "NSString *IMDGetDestinationFilePath(NSString *, NSString *, NSString *)", IMFileLocationTrimFileName(), 48, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v22 = v6;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (!a2)
  {
    v9 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("destFolder"), "NSString *IMDGetDestinationFilePath(NSString *, NSString *, NSString *)", IMFileLocationTrimFileName(), 49, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v10 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v10)
    {
      v10(v9);
    }
    else if (IMOSLoggingEnabled())
    {
      v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v22 = v9;
        _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  v12 = (void *)objc_msgSend(a1, "lastPathComponent");
  if (!v12)
  {
    v13 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("fileName"), "NSString *IMDGetDestinationFilePath(NSString *, NSString *, NSString *)", IMFileLocationTrimFileName(), 52, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v14 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v14)
    {
      v14(v13);
    }
    else if (IMOSLoggingEnabled())
    {
      v15 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v22 = v13;
        _os_log_impl(&dword_1ABB60000, v15, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  v16 = IMDGetTimeStampedFilePath(v12, a3);
  if (v16)
    return objc_msgSend(a2, "stringByAppendingPathComponent:", v16);
  v18 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("newFileName"), "NSString *IMDGetDestinationFilePath(NSString *, NSString *, NSString *)", IMFileLocationTrimFileName(), 55, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
  v19 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
  if (v19)
  {
    v19(v18);
  }
  else if (IMOSLoggingEnabled())
  {
    v20 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v22 = v18;
      _os_log_impl(&dword_1ABB60000, v20, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
    }
  }
  return 0;
}

void IMDRegisterReconnectBlockWithIdentifier()
{
  id v0;

  if (IMDIsRunningInDatabaseServerProcess())
  {
    IMDSMSRecordStoreUseProtectedDatabase();
    v0 = IMDSMSRecordStoreCopySMSDBPathWithCreate(0);
    CSDBRegisterReconnectBlockWithIdentifier();
    if (v0)
      CFRelease(v0);
  }
}

uint64_t IMDDeregisterReconnectBlockWithIdentifier()
{
  uint64_t result;

  result = IMDIsRunningInDatabaseServerProcess();
  if ((_DWORD)result)
    return CSDBDeregisterReconnectBlockWithIdentifier();
  return result;
}

id IMDGetDatabasePath()
{
  id v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  NSObject *v3;
  uint8_t buf[4];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  IMDSMSRecordStoreUseProtectedDatabase();
  v0 = IMDSMSRecordStoreCopySMSDBPathWithCreate(1);
  if (!v0)
  {
    v1 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("originalPath"), "NSString *IMDGetDatabasePath(void)", IMFileLocationTrimFileName(), 76, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v2 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v2)
    {
      v2(v1);
    }
    else if (IMOSLoggingEnabled())
    {
      v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v6 = v1;
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  return v0;
}

uint64_t IMDGetDefaultTrimmedDatabaseFolderPath()
{
  return objc_msgSend(IMDGetDatabasePath(), "stringByDeletingLastPathComponent");
}

uint64_t IMDGetDefaultTrimmedDatabaseFilePath()
{
  id v0;
  void *v1;

  v0 = IMDGetDatabasePath();
  v1 = (void *)objc_msgSend(IMDGetDatabasePath(), "stringByDeletingLastPathComponent");
  return IMDGetDestinationFilePath(v0, v1, (uint64_t)CFSTR("trimmed"));
}

uint64_t IMDTrimDatabaseToDays(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1ABBB9B48(-[IMTrimDatabaseToDays initWithSourceDatabasePath:destinationDatabasePath:newerThanDays:]([IMTrimDatabaseToDays alloc], "initWithSourceDatabasePath:destinationDatabasePath:newerThanDays:", a1, a2, a3), a4);
}

uint64_t sub_1ABBB9B48(void *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  NSObject *v6;
  _QWORD v8[5];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v9 = xmmword_1E5AB7790;
    v10 = *(_OWORD *)off_1E5AB77A0;
    v11 = 81;
    v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("copier"), "BOOL _IMDArchiveDatabase(IMAbstractDatabaseArchiver *, NSError **)", IMFileLocationTrimFileName(), 81, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v13 = v4;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABBBA370;
  v8[3] = &unk_1E5AB77B8;
  v8[4] = a2;
  return objc_msgSend(a1, "copyDatabase:", v8);
}

uint64_t IMDTrimDatabaseToMessageCount(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1ABBB9B48(-[IMTrimDatabaseToMessageCount initWithSourceDatabasePath:destinationDatabasePath:messageCount:]([IMTrimDatabaseToMessageCount alloc], "initWithSourceDatabasePath:destinationDatabasePath:messageCount:", a1, a2, a3), a4);
}

uint64_t IMDTrimSharedDatabaseToDays(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  id v6;
  uint64_t v8;
  void (*v9[6])(void);
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  if (IMDIsRunningInDatabaseServerProcess())
  {
    v6 = IMDGetDatabasePath();
    return IMDTrimDatabaseToDays((uint64_t)v6, a1, a2, (uint64_t)a3);
  }
  else
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    v9[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v9[1] = (void (*)(void))3221225472;
    v9[2] = (void (*)(void))sub_1ABBB9E20;
    v9[3] = (void (*)(void))&unk_1E5AB7770;
    v9[4] = (void (*)(void))&v10;
    v9[5] = a3;
    __syncXPCIMDSplitDatabaseByDays_IPCAction(v9, a2);
    v8 = *((unsigned __int8 *)v11 + 24);
    _Block_object_dispose(&v10, 8);
    return v8;
  }
}

void sub_1ABBB9E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1ABBB9E20(uint64_t a1, xpc_object_t xdict)
{
  _BOOL8 result;

  result = xpc_dictionary_get_BOOL(xdict, "BOOL_result");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDTrimSharedDatabaseToMessageCount(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  id v6;
  uint64_t v8;
  void (*v9[6])(void);
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  if (IMDIsRunningInDatabaseServerProcess())
  {
    v6 = IMDGetDatabasePath();
    return IMDTrimDatabaseToMessageCount((uint64_t)v6, a1, a2, (uint64_t)a3);
  }
  else
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    v9[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v9[1] = (void (*)(void))3221225472;
    v9[2] = (void (*)(void))sub_1ABBB9F44;
    v9[3] = (void (*)(void))&unk_1E5AB7770;
    v9[4] = (void (*)(void))&v10;
    v9[5] = a3;
    __syncXPCIMDSplitDatabaseByRecentCount_IPCAction(v9, a2);
    v8 = *((unsigned __int8 *)v11 + 24);
    _Block_object_dispose(&v10, 8);
    return v8;
  }
}

void sub_1ABBB9F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1ABBB9F44(uint64_t a1, xpc_object_t xdict)
{
  _BOOL8 result;

  result = xpc_dictionary_get_BOOL(xdict, "BOOL_result");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void IMDSwitchToDatabase()
{
  NSObject *v0;
  uint8_t v1[16];

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "Tried to change DB on non gizmo device. This is not supported!!", v1, 2u);
    }
  }
}

BOOL IMDCanDowngradeDatabaseToVersion(uint64_t a1)
{
  unsigned int SchemaVersion;

  SchemaVersion = IMDSMSRecordStoreGetSchemaVersion();
  return a1 > 9005 && SchemaVersion > a1;
}

uint64_t IMDDowngradeDatabaseToVersion(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  NSObject *v8;
  unsigned int SchemaVersion;
  BOOL v10;
  uint64_t v11;
  IMDWhitetailToCoralDowngrader *v12;
  char v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  void (*v18[6])(void);
  uint8_t v19[16];
  _BYTE buf[24];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v8 = IMLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = a2;
    _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "QuickSwitch about to downgrade database at path %@ to %@", buf, 0x16u);
  }
  SchemaVersion = IMDSMSRecordStoreGetSchemaVersion();
  v10 = a3 <= 9005 || SchemaVersion <= a3;
  v11 = !v10;
  if (v10)
  {
    if (IMOSLoggingEnabled())
    {
      v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a3;
        _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "Database QuickSwitch tried to downgraded incompatible database versioin %ld", buf, 0xCu);
      }
    }
  }
  else
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v21 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v12 = -[IMAbstractDatabaseArchiver initWithSourceDatabasePath:destinationDatabasePath:]([IMDWhitetailToCoralDowngrader alloc], "initWithSourceDatabasePath:destinationDatabasePath:", a1, a2);
      v13 = sub_1ABBB9B48(v12, (uint64_t)a4);
      *(_BYTE *)(*(_QWORD *)&buf[8] + 24) = v13;

    }
    else
    {
      v15 = IMLogHandleForCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_1ABB60000, v15, OS_LOG_TYPE_INFO, "Quickswitch Downgrade Sending XPC now...", v19, 2u);
      }
      v18[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v18[1] = (void (*)(void))3221225472;
      v18[2] = (void (*)(void))sub_1ABBBA328;
      v18[3] = (void (*)(void))&unk_1E5AB7770;
      v18[4] = (void (*)(void))buf;
      v18[5] = a4;
      __IMDDowngradeDatabaseToVersion_IPCAction(v18, a1, a2);
    }
    if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
    {
      if (IMOSLoggingEnabled())
      {
        v16 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v19 = 0;
          _os_log_impl(&dword_1ABB60000, v16, OS_LOG_TYPE_INFO, "Database QuickSwitch Downgrade got unsuccessful result", v19, 2u);
        }
      }
    }
    _Block_object_dispose(buf, 8);
  }
  return v11;
}

BOOL sub_1ABBBA328(uint64_t a1, xpc_object_t xdict)
{
  _BOOL8 result;

  result = xpc_dictionary_get_BOOL(xdict, "BOOL_result");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _IMDGetErrorFromXPCDictionary()
{
  return 0;
}

_QWORD *sub_1ABBBA370(_QWORD *result, uint64_t a2, void *a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)result[4];
  if (v3)
  {
    if (a3)
    {
      v4 = result;
      result = a3;
      v3 = (_QWORD *)v4[4];
    }
    else
    {
      result = 0;
    }
    *v3 = result;
  }
  return result;
}

id sub_1ABBBA5E0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EEC40480;
  v7 = qword_1EEC40480;
  if (!qword_1EEC40480)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1ABBBC000;
    v3[3] = &unk_1E5AB0C88;
    v3[4] = &v4;
    sub_1ABBBC000((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1ABBBA680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBBA71C(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v4 = a3;
  v5 = a2;
  objc_msgSend(sub_1ABBBA5E0(), "interactionRecorder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABBBA7C4;
  v8[3] = &unk_1E5AB7800;
  v9 = v4;
  v7 = v4;
  objc_msgSend(v6, "recordInteractions:completionHandler:", v5, v8);

}

uint64_t sub_1ABBBA7C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1ABBBB0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBBB178(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABBBB188(uint64_t a1)
{

}

void sub_1ABBBB190(uint64_t a1)
{
  void *v2;
  __CFString *v3;
  __CFString *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __CFString *v13;

  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("properties"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", *MEMORY[0x1E0D37788]);
  v13 = (__CFString *)objc_claimAutoreleasedReturnValue();

  v3 = (__CFString *)IMDAttachmentRecordCopyAttachmentForGUID(v13);
  v4 = v3;
  if (v3)
  {
    -[__CFString transferName](v3, "transferName");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "im_lastPathComponent");
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    IMSharedHelperExternalLocationForFile();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v9, 0);
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v12 = *(void **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = v10;

    }
  }

}

void sub_1ABBBB3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBBB938(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (v5)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v15 = 138412290;
        v16 = v5;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Batch donation failed with error %@", (uint8_t *)&v15, 0xCu);
      }

    }
  }
  else if (a2)
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v9 = *(unsigned __int8 *)(a1 + 64);
    v10 = IMOSLoggingEnabled();
    if (v9)
    {
      if (v10)
      {
        OSLogHandleForIMFoundationCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          LOWORD(v15) = 0;
          _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "Donation complete!", (uint8_t *)&v15, 2u);
        }

      }
      objc_msgSend(*(id *)(a1 + 32), "_setNeedsDonation:", 0);
      objc_msgSend(*(id *)(a1 + 32), "_setLastDonatedRowID:", 1);
    }
    else
    {
      v12 = (void *)(v8 - v7);
      if (v10)
      {
        OSLogHandleForIMFoundationCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          v15 = 134217984;
          v16 = v12;
          _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "Setting lastDonatedRowID to %lu", (uint8_t *)&v15, 0xCu);
        }

      }
      objc_msgSend(*(id *)(a1 + 32), "_setLastDonatedRowID:", v12);
    }
  }
  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
    (*(void (**)(void))(v14 + 16))();

}

void sub_1ABBBBC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1ABBBBC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  v3 = objc_msgSend(*(id *)(a1 + 32), "newCDInteractionForChatDictionary:messageDictionary:", a3, a2);
  v4 = (void *)v3;
  if (v3)
  {
    v7[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t sub_1ABBBBFAC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_setNeedsDonation:", 1);
  objc_msgSend(*(id *)(a1 + 32), "_setLastDonatedRowID:", *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 32), "indexNextMessageBatchIfNeeded:reason:completion:", objc_msgSend(MEMORY[0x1E0D397C8], "reindexFirstBatchSize"), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
}

Class sub_1ABBBC000(uint64_t a1)
{
  Class result;

  sub_1ABBBC054();
  result = objc_getClass("_CDInteractionRecorder");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1ABC5BBA4();
  qword_1EEC40480 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1ABBBC054()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!qword_1EEC40488)
  {
    v1 = xmmword_1E5AB78C0;
    v2 = 0;
    qword_1EEC40488 = _sl_dlopen();
  }
  if (!qword_1EEC40488)
    sub_1ABC5BC1C(&v0);
}

Class sub_1ABBBC0F8(uint64_t a1)
{
  Class result;

  sub_1ABBBC054();
  result = objc_getClass("_CDInteraction");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1ABC5BC98();
  qword_1EEC40490 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1ABBBC14C(uint64_t a1)
{
  Class result;

  sub_1ABBBC054();
  result = objc_getClass("_CDContact");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1ABC5BD10();
  qword_1EEC40498 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1ABBBC894()
{
  IMDDatabase *v0;
  void *v1;

  v0 = objc_alloc_init(IMDDatabase);
  v1 = (void *)qword_1ED0D37F0;
  qword_1ED0D37F0 = (uint64_t)v0;

}

void sub_1ABBBC8BC()
{
  IMDDatabaseClient *v0;
  void *v1;

  v0 = objc_alloc_init(IMDDatabaseClient);
  v1 = (void *)qword_1ED0D3910;
  qword_1ED0D3910 = (uint64_t)v0;

}

void sub_1ABBBC9CC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D39BA8]), "initWithXPCObject:", *(_QWORD *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = v2;
    (*(void (**)(void))(v3 + 16))();
    v2 = v4;
  }

}

uint64_t _IMDSMSDatabaseMigrateData_38_6100()
{
  uint64_t v0;
  uint64_t v1;
  sqlite3_stmt *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  sqlite3_stmt *v9;
  const __CFAllocator *v10;
  void *v11;
  const unsigned __int8 *v12;
  __CFString *v13;
  const unsigned __int8 *v14;
  __CFString *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  sqlite3_stmt *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v0 = CSDBSqliteConnectionStatementForSQL();
  if (v0)
  {
    v1 = v0;
    v2 = *(sqlite3_stmt **)(v0 + 8);
    if (v2)
    {
      if (sqlite3_step(v2) == 100)
      {
        do
        {
          v3 = (void *)MEMORY[0x1AF435474]();
          sqlite3_column_int(*(sqlite3_stmt **)(v1 + 8), 0);
          sqlite3_column_int(*(sqlite3_stmt **)(v1 + 8), 1);
          sqlite3_column_int(*(sqlite3_stmt **)(v1 + 8), 2);
          v4 = CSDBSqliteConnectionStatementForSQL();
          if (v4 && *(_QWORD *)(v4 + 8))
          {
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }
          v5 = CSDBSqliteConnectionStatementForSQL();
          if (v5 && *(_QWORD *)(v5 + 8))
          {
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }
          v6 = CSDBSqliteConnectionStatementForSQL();
          if (v6 && *(_QWORD *)(v6 + 8))
          {
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }
          objc_autoreleasePoolPop(v3);
        }
        while (sqlite3_step(*(sqlite3_stmt **)(v1 + 8)) == 100);
      }
      CSDBSqliteStatementReset();
    }
  }
  v7 = CSDBSqliteConnectionStatementForSQL();
  if (v7)
  {
    v8 = v7;
    v9 = *(sqlite3_stmt **)(v7 + 8);
    if (v9)
    {
      if (sqlite3_step(v9) == 100)
      {
        v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        do
        {
          v11 = (void *)MEMORY[0x1AF435474]();
          sqlite3_column_int(*(sqlite3_stmt **)(v8 + 8), 0);
          if (sqlite3_column_text(*(sqlite3_stmt **)(v8 + 8), 1))
          {
            v12 = sqlite3_column_text(*(sqlite3_stmt **)(v8 + 8), 1);
            v13 = (__CFString *)CFStringCreateWithCString(v10, (const char *)v12, 0x8000100u);
          }
          else
          {
            v13 = 0;
          }
          if (sqlite3_column_text(*(sqlite3_stmt **)(v8 + 8), 2))
          {
            v14 = sqlite3_column_text(*(sqlite3_stmt **)(v8 + 8), 2);
            v15 = (__CFString *)CFStringCreateWithCString(v10, (const char *)v14, 0x8000100u);
          }
          else
          {
            v15 = 0;
          }
          IMComponentsFromChatGUID();
          -[__CFString lowercaseString](v15, "lowercaseString", 0);
          v16 = (void *)IMCopyGUIDForChat();
          v17 = CSDBSqliteConnectionStatementForSQL();
          if (v17 && *(_QWORD *)(v17 + 8))
          {
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }

          objc_autoreleasePoolPop(v11);
        }
        while (sqlite3_step(*(sqlite3_stmt **)(v8 + 8)) == 100);
      }
      CSDBSqliteStatementReset();
    }
  }
  v18 = CSDBSqliteConnectionStatementForSQL();
  if (v18)
  {
    v19 = v18;
    v20 = *(sqlite3_stmt **)(v18 + 8);
    if (v20)
    {
      if (sqlite3_step(v20) == 100)
      {
        do
        {
          v21 = (void *)MEMORY[0x1AF435474]();
          sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 0);
          sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 1);
          v22 = CSDBSqliteConnectionStatementForSQL();
          if (v22 && *(_QWORD *)(v22 + 8))
          {
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }
          v23 = CSDBSqliteConnectionStatementForSQL();
          if (v23 && *(_QWORD *)(v23 + 8))
          {
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }
          v24 = CSDBSqliteConnectionStatementForSQL();
          if (v24 && *(_QWORD *)(v24 + 8))
          {
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }
          objc_autoreleasePoolPop(v21);
        }
        while (sqlite3_step(*(sqlite3_stmt **)(v19 + 8)) == 100);
      }
      CSDBSqliteStatementReset();
    }
  }
  v25 = CSDBSqliteConnectionStatementForSQL();
  if (v25 && *(_QWORD *)(v25 + 8))
  {
    CSDBSqliteStatementPerform();
    CSDBSqliteStatementReset();
  }
  return 1;
}

uint64_t IMDHandleRecordCopyHandleRecord(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABBBCF7C;
  v3[3] = &unk_1E5AB1FA8;
  v3[4] = &v4;
  v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1ABBBCF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBBCF7C(uint64_t a1)
{
  uint64_t result;

  result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDHandleRecordCopyHandleRecordUnlocked(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABBBD060;
  v3[3] = &unk_1E5AB1FA8;
  v3[4] = &v4;
  v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1ABBBD048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBBD060(uint64_t a1)
{
  uint64_t result;

  result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDHandleRecordAddHandleRecord(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABBBD144;
  v3[3] = &unk_1E5AB1FA8;
  v3[4] = &v4;
  v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1ABBBD12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBBD144(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 40))
  {
    v1 = result;
    CSDBRecordStoreAddRecord();
    result = CSDBRecordSaveStore();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t IMDHandleRecordCopyHandleForIDOnService(const __CFString *a1, const __CFString *a2)
{
  CFIndex Length;
  uint64_t v5;
  void (*v7[5])(void);
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
    return 0;
  Length = CFStringGetLength(a1);
  v5 = 0;
  if (!a2 || !Length)
    return v5;
  if (!CFStringGetLength(a2))
    return 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1ABBBD2C0;
    v8[3] = &unk_1E5AB2228;
    v8[5] = a1;
    v8[6] = a2;
    v8[4] = &v9;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, id, country, service, uncanonicalized_id, person_centric_id FROM handle WHERE   id = ? AND   service = ? ORDER BY handle.ROWID ASC;"),
      (uint64_t)v8);
  }
  else
  {
    v7[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v7[1] = (void (*)(void))3221225472;
    v7[2] = (void (*)(void))sub_1ABBBD374;
    v7[3] = (void (*)(void))&unk_1E5AAF630;
    v7[4] = (void (*)(void))&v9;
    __syncXPCIMDHandleRecordCopyHandleForIDOnService_IPCAction(v7, (uint64_t)a1, (uint64_t)a2);
  }
  v5 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1ABBBD2A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1ABBBD2C0(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  int ID;

  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      ID = CSDBRecordGetID();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IMDHandleRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], ID);
    }
    CFRelease(v3);
  }
}

uint64_t sub_1ABBBD374(uint64_t a1, void *a2)
{
  uint64_t result;

  result = _IMDCopyIMDHandleRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1ABBBD858(int a1, id a2, void *a3)
{
  id v4;
  id v5;

  v4 = objc_retainAutorelease(a2);
  v5 = a3;
  objc_msgSend(v4, "UTF8String");
  IMInsertKeyedCodableObjectsToXPCDictionary();

}

uint64_t sub_1ABBBD9B0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;

  v4 = (void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);

  return 1;
}

uint64_t sub_1ABBBDABC(uint64_t a1)
{
  void *v2;

  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v2);

  return 1;
}

uint64_t sub_1ABBBDB0C(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v4, v3);

  return 1;
}

uint64_t sub_1ABBBDC48(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;

  v4 = (void *)_IMDCopyIMDAttachmentRecordFromXPCObjectClient(a3);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);

  return 1;
}

void sub_1ABBBDE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBBDE1C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABBBDE2C(uint64_t a1)
{

}

void sub_1ABBBDE34(uint64_t a1, xpc_object_t xdict)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v7 = v3;
    objc_msgSend(*(id *)(a1 + 32), "_chatRecordsCopiedFromXPCArray:", v3);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    v3 = v7;
  }

}

void sub_1ABBBDFDC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = objc_claimAutoreleasedReturnValue();
  v7 = (id)v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "_chatRecordsCopiedFromXPCArray:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if (v4)
      v6 = v4;
    else
      v6 = (void *)MEMORY[0x1E0C9AA60];
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

}

void sub_1ABBBE190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBBE1A8(uint64_t a1, xpc_object_t xdict)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v7 = v3;
    objc_msgSend(*(id *)(a1 + 32), "_chatRecordsCopiedFromXPCArray:", v3);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    v3 = v7;
  }

}

void sub_1ABBBE2E8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = objc_claimAutoreleasedReturnValue();
  v7 = (id)v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "_chatRecordsCopiedFromXPCArray:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if (v4)
      v6 = v4;
    else
      v6 = (void *)MEMORY[0x1E0C9AA60];
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

}

void sub_1ABBBE554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBBE56C(uint64_t a1, xpc_object_t xdict)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v7 = v3;
    objc_msgSend(*(id *)(a1 + 32), "_chatRecordsCopiedFromXPCArray:", v3);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    v3 = v7;
  }

}

void sub_1ABBBE6F4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = objc_claimAutoreleasedReturnValue();
  v7 = (id)v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "_chatRecordsCopiedFromXPCArray:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if (v4)
      v6 = v4;
    else
      v6 = (void *)MEMORY[0x1E0C9AA60];
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

}

void sub_1ABBBE898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBBE8B0(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  xpc_dictionary_get_value(xdict, "dictionary_result");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "_codableDictionaryCopiedFromXPCDictionary:objectClass:", v7, objc_opt_class());
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(uint64_t, _QWORD))(v6 + 16))(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));

}

void sub_1ABBBEA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBBEA54(uint64_t a1, xpc_object_t xdict)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v7 = v3;
    objc_msgSend(*(id *)(a1 + 32), "_chatRecordsCopiedFromXPCArray:", v3);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    v3 = v7;
  }

}

uint64_t sub_1ABBBEBB4(uint64_t a1, xpc_object_t xdict)
{
  _BOOL8 v3;
  uint64_t result;

  v3 = xpc_dictionary_get_BOOL(xdict, "success");
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _BOOL8))(result + 16))(result, v3);
  return result;
}

void sub_1ABBBECB4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = objc_claimAutoreleasedReturnValue();
  v7 = (id)v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "_messageRecordsCopiedFromXPCArray:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "firstObject");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v5);

}

void sub_1ABBBEEC0(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = objc_claimAutoreleasedReturnValue();
  v6 = (id)v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "_messageRecordsCopiedFromXPCArray:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v4);

}

void sub_1ABBBF034(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = objc_claimAutoreleasedReturnValue();
  v6 = (id)v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "_messageRecordsCopiedFromXPCArray:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v4);

}

void sub_1ABBBF2AC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = objc_claimAutoreleasedReturnValue();
  v7 = (id)v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "_messageRecordsCopiedFromXPCArray:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    objc_msgSend(v4, "firstObject");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

  }
}

void sub_1ABBBF6B0(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Received response back from database for notifyFirstUnlockComplete", v4, 2u);
    }

  }
}

void sub_1ABBBF860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBBF878(uint64_t a1, xpc_object_t xdict)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v7 = v3;
    objc_msgSend(*(id *)(a1 + 32), "_handleRecordsCopiedFromXPCArray:", v3);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    v3 = v7;
  }

}

void sub_1ABBBFA20(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = objc_claimAutoreleasedReturnValue();
  v7 = (id)v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "_handleRecordsCopiedFromXPCArray:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if (v4)
      v6 = v4;
    else
      v6 = (void *)MEMORY[0x1E0C9AA60];
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

}

void sub_1ABBBFCCC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = objc_claimAutoreleasedReturnValue();
  v7 = (id)v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "_attachmentRecordsCopiedFromXPCArray:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if (v4)
      v6 = v4;
    else
      v6 = (void *)MEMORY[0x1E0C9AA60];
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

}

void sub_1ABBBFE90(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = objc_claimAutoreleasedReturnValue();
  v7 = (id)v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "_attachmentRecordsCopiedFromXPCArray:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if (v4)
      v6 = v4;
    else
      v6 = (void *)MEMORY[0x1E0C9AA60];
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

}

void sub_1ABBBFFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBBFFFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;

  IMGetXPCDataFromDictionary();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  return result;
}

uint64_t sub_1ABBC0128(uint64_t a1, xpc_object_t xdict)
{
  int64_t int64;
  uint64_t result;

  int64 = xpc_dictionary_get_int64(xdict, "result");
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, int64_t))(result + 16))(result, int64);
  return result;
}

void sub_1ABBC074C(uint64_t a1, xpc_object_t xdict)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  xpc_dictionary_get_value(xdict, "deletedChats");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v6 = v3;
    objc_msgSend(*(id *)(a1 + 32), "_codableObjectsCopiedFromXPCArray:objectClass:", v3, objc_opt_class());
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
      (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v4);

    v3 = v6;
  }

}

void sub_1ABBC08CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBC08E4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  xpc_dictionary_get_value(xdict, "recoverableMessagesMetadataPendingCloudKitSave");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "_codableObjectsCopiedFromXPCArray:objectClass:", v6, objc_opt_class());
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
}

void sub_1ABBC0A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBC0A74(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  xpc_dictionary_get_value(xdict, "recoverableMessagesMetadataPendingCloudKitDelete");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "_codableObjectsCopiedFromXPCArray:objectClass:", v6, objc_opt_class());
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
}

void sub_1ABBC0D08(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 134217984;
      v7 = v5;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Finished bulk updating recoverable message guids to status %ld", (uint8_t *)&v6, 0xCu);
    }

  }
}

uint64_t sub_1ABBC1094(uint64_t a1, xpc_object_t xdict)
{
  xpc_dictionary_get_int64(xdict, "total");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1ABBC11B4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  xpc_dictionary_get_value(xdict, "array_result");
  v3 = objc_claimAutoreleasedReturnValue();
  v6 = (id)v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "_messageRecordsCopiedFromXPCArray:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v4);

}

void sub_1ABBC132C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBC1344(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  xpc_dictionary_get_value(xdict, "scheduledMessagesMetadataPendingCloudKitDelete");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "_codableObjectsCopiedFromXPCArray:objectClass:", v6, objc_opt_class());
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
}

void sub_1ABBC14BC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(_QWORD *)(a1 + 40);
      v7 = 138412546;
      v8 = v5;
      v9 = 2112;
      v10 = v6;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Finished Adding scheduled message to delete from Cloud Kit. GUID: %@, RecordID %@", (uint8_t *)&v7, 0x16u);
    }

  }
}

void sub_1ABBC1660(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412290;
      v7 = v5;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Finished Deleting tombstoned scheduled message with recordIDs %@", (uint8_t *)&v6, 0xCu);
    }

  }
}

void sub_1ABBC17EC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412290;
      v7 = v5;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Finished marking messages read with guids %@", (uint8_t *)&v6, 0xCu);
    }

  }
}

uint64_t sub_1ABBC19C0(uint64_t a1, xpc_object_t xdict)
{
  xpc_dictionary_get_int64(xdict, "total");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1ABBC1AAC(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  IMGetXPCBoolFromDictionary();
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v4 = (id)objc_claimAutoreleasedReturnValue();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1ABBC1BE4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1ABBC1D38(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v4 = (id)objc_claimAutoreleasedReturnValue();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

IMDPersistentAttachmentController *sub_1ABBC21D4()
{
  IMDPersistentAttachmentController *result;

  result = objc_alloc_init(IMDPersistentAttachmentController);
  qword_1ED0D3AA0 = (uint64_t)result;
  return result;
}

uint64_t sub_1ABBC2434(__CFString *a1)
{
  NSObject *v2;
  uint64_t result;
  NSObject *v4;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (-[__CFString length](a1, "length")
    && -[__CFString rangeOfString:](a1, "rangeOfString:", CFSTR("/var/mobile/Library/SMS/Attachments")) != 0x7FFFFFFFFFFFFFFFLL)
  {
    return 1;
  }
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v5 = 138412290;
      v6 = a1;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Input path: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  result = IMOSLoggingEnabled();
  if ((_DWORD)result)
  {
    v4 = OSLogHandleForIMFoundationCategory();
    result = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
    if ((_DWORD)result)
    {
      v5 = 138412290;
      v6 = CFSTR("/var/mobile/Library/SMS/Attachments");
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Attachment store Path: %@", (uint8_t *)&v5, 0xCu);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1ABBC3370(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t v16[128];
  uint8_t buf[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v18 = v3;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "        ...removing old file: %@", buf, 0xCu);
    }
  }
  v11 = sub_1ABBC2434(*(__CFString **)(a1 + 32));
  result = objc_msgSend(*(id *)(a1 + 40), "removeItemAtPath:error:", *(_QWORD *)(a1 + 32), 0);
  v5 = *(void **)(a1 + 48);
  if (v5)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    result = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    v6 = result;
    if (result)
    {
      v7 = *(_QWORD *)v13;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v5);
          v9 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v8);
          if (IMOSLoggingEnabled())
          {
            v10 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              v18 = v9;
              _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "        ...removing old sibling file: %@", buf, 0xCu);
            }
          }
          objc_msgSend(*(id *)(a1 + 40), "removeItemAtPath:error:", v9, 0);
          ++v8;
        }
        while (v6 != v8);
        result = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        v6 = result;
      }
      while (result);
    }
  }
  if (v11)
    return objc_msgSend(*(id *)(a1 + 56), "_removeLegacyAttachmentPathsInAttachmentStoreWithOriginalPath:withFileManager:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return result;
}

void sub_1ABBC376C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABBC3738);
  }
  _Unwind_Resume(a1);
}

id IMDCopyAttachmentPersistentPath(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  NSObject *v6;
  void *v7;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a6)
  {
    if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Storing group photo at an accessible location.", buf, 2u);
      }
    }
    v7 = (void *)IMSharedHelperExternalLocationForFile();
  }
  else
  {
    v11 = (void *)objc_msgSend(a2, "im_lastPathComponent");
    v12 = (void *)objc_msgSend(v11, "pathExtension");
    v13 = objc_msgSend(a1, "hash");
    if (!objc_msgSend(v12, "length"))
    {
      v14 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A38], "defaultHFSFileManager"), "pathExtensionForUTIType:", a4);
      if (!objc_msgSend(v14, "length"))
        v14 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A38], "defaultHFSFileManager"), "pathExtensionForMIMEType:", a3);
      if (objc_msgSend(v14, "length"))
        v11 = (void *)objc_msgSend(v11, "stringByAppendingPathExtension:", v14);
    }
    v15 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%02x"), v13);
    v16 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%02d"), v13 & 0xF);
    if (objc_msgSend(v11, "length") && objc_msgSend(a1, "length"))
      v7 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(CFSTR("/var/mobile/Library/SMS/Attachments"), "stringByAppendingPathComponent:", v15), "stringByAppendingPathComponent:", v16), "stringByAppendingPathComponent:", objc_msgSend(a1, "im_lastPathComponent")), "stringByAppendingPathComponent:", v11);
    else
      v7 = 0;
    if (IMOSLoggingEnabled())
    {
      v17 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v20 = v7;
        v21 = 2112;
        v22 = a1;
        _os_log_impl(&dword_1ABB60000, v17, OS_LOG_TYPE_INFO, "Resulting path %@   for transfer: %@", buf, 0x16u);
      }
    }
  }
  return v7;
}

id IMCoreSpotlightIndex()
{
  if (qword_1ED0D37D0 != -1)
    dispatch_once(&qword_1ED0D37D0, &unk_1E5AAF1E8);
  return (id)qword_1ED0D37D8;
}

void sub_1ABBC4980()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6B38]), "initWithName:bundleIdentifier:", CFSTR("com.apple.MobileSMS"), CFSTR("com.apple.MobileSMS"));
  v1 = (void *)qword_1ED0D37D8;
  qword_1ED0D37D8 = v0;

}

id IMCoreSpotlightCriticalIndex()
{
  if (qword_1EEC404A8 != -1)
    dispatch_once(&qword_1EEC404A8, &unk_1E5AB7CD8);
  return (id)qword_1EEC404A0;
}

void sub_1ABBC49F8()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6B38]), "_initWithName:protectionClass:bundleIdentifier:options:", CFSTR("com.apple.MobileSMS"), 0, CFSTR("com.apple.MobileSMS"), 32);
  v1 = (void *)qword_1EEC404A0;
  qword_1EEC404A0 = v0;

}

__CFDictionary *IMCopyIndexableItemDictionaryForRecord(void *a1)
{
  id v1;
  __CFDictionary *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  __CFString *v7;
  const __CFString *v8;
  __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  __CFDictionary *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  unint64_t v25;
  BOOL v26;
  void *ThreadIdentifierWithComponents;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  const __CFNumber *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  __CFString *v46;
  id v47;
  __CFString *v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t i;
  void *v64;
  __CFDictionary *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  void *v74;
  char v75;
  void *v76;
  uint64_t IsKnownContact;
  void *v78;
  NSObject *v79;
  id v80;
  _BOOL8 v81;
  uint64_t v82;
  uint64_t v83;
  __CFDictionary *v84;
  id v86;
  id v87;
  id v88;
  void *v89;
  void *v90;
  __CFDictionary *theDict;
  id v92;
  void *v93;
  void *v94;
  void *v95;
  __CFString *AssociatedMessageGUIDFromThreadIdentifier;
  __CFString *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  CFNumberRef v104;
  const __CFNumber *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  __CFString *v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  void *value;
  void *valuea;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  void *v130;
  void *v131;
  void *v132;
  __CFString *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  uint64_t v139;
  void *v140;
  void *v141;
  uint64_t v142;
  char v143;
  CFNumberRef v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  uint64_t v150;
  _BYTE v151[128];
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (__CFDictionary *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 14);
  v149 = 0;
  v150 = 0;
  v147 = 0;
  v148 = 0;
  v146 = 0;
  v145 = 0;
  v144 = 0;
  v143 = 0;
  v142 = 0;
  v141 = 0;
  v140 = 0;
  v139 = 0;
  v138 = 0;
  v137 = 0;
  v136 = 0;
  v135 = 0;
  v134 = 0;
  v133 = 0;
  v132 = 0;
  v131 = 0;
  v130 = 0;
  IMDMessageRecordBulkCopy((uint64_t)v1, &v142, 0, 0, &v149, &v150, 0, 0, 0, &v148, &v147, &v144, &v145, 0, 0, 0, &v146, 0, 0,
    &v143,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    &v138,
    &v139,
    0,
    &v141,
    &v137,
    &v140,
    0,
    &v136,
    0,
    0,
    0,
    0,
    &v134,
    0,
    0,
    &v133,
    &v132,
    &v135,
    0,
    0,
    0,
    &v131,
    0,
    &v130,
    0,
    0);
  v3 = v148;
  v4 = v147;
  v5 = v145;
  v104 = v144;
  v106 = v149;
  v102 = v141;
  v108 = v140;
  v110 = v146;
  value = v137;
  v6 = v136;
  v122 = v135;
  v120 = v134;
  v7 = v133;
  v116 = v132;
  v98 = v131;
  v118 = v138;
  v114 = v130;
  if (-[__CFString length](v133, "length"))
  {
    v8 = IMDMessageRecordCopyMessageForGUID(v7);
    v9 = (__CFString *)v8;
    if (v8)
    {
      IMCopyIndexableItemDictionaryForRecord(v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }
  objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v150);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    v13 = v11;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v13 = (id)objc_claimAutoreleasedReturnValue();

  }
  JWDecodeCodableObjectWithStandardAllowlist();
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = (void *)v14;
  v117 = v7;
  v112 = v10;
  if (v10)
  {
    v94 = (void *)v14;
    v100 = v3;
    v16 = v5;
    v17 = v6;
    v18 = v4;
    v19 = v2;
    objc_msgSend(v10, "objectForKey:", CFSTR("attributedBody"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D398F8]), "initWithMessageBody:messageGUID:", v20, v7);
    v22 = v21;
    if (!v116)
      goto LABEL_15;
    objc_msgSend(v21, "messageParts");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v1;
    v25 = objc_msgSend(v23, "count");

    v7 = v117;
    v26 = v25 >= 2;
    v1 = v24;
    if (v26)
    {
      ThreadIdentifierWithComponents = (void *)IMMessageCreateThreadIdentifierWithComponents();
      AssociatedMessageGUIDFromThreadIdentifier = (__CFString *)IMMessageCreateAssociatedMessageGUIDFromThreadIdentifier();

      v1 = v24;
    }
    else
    {
LABEL_15:
      AssociatedMessageGUIDFromThreadIdentifier = v7;
    }
    v2 = v19;

    v4 = v18;
    v6 = v17;
    v5 = v16;
    v3 = v100;
    v15 = v94;
  }
  else
  {
    AssociatedMessageGUIDFromThreadIdentifier = 0;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v1, "rowID"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
    CFDictionarySetValue(v2, CFSTR("rowID"), v28);

  v29 = v13;
  if (v29)
    CFDictionarySetValue(v2, CFSTR("time"), v29);

  v30 = v106;
  if (v30)
    CFDictionarySetValue(v2, CFSTR("guid"), v30);

  v31 = v3;
  if (v31)
    CFDictionarySetValue(v2, CFSTR("plainBody"), v31);

  v32 = v15;
  if (v32)
    CFDictionarySetValue(v2, CFSTR("attributedBody"), v32);
  v107 = v32;

  v33 = v110;
  if (v33)
    CFDictionarySetValue(v2, CFSTR("subject"), v33);

  v34 = v5;
  if (v34)
    CFDictionarySetValue(v2, CFSTR("service"), v34);
  v111 = v33;

  v35 = v104;
  if (v35)
    CFDictionarySetValue(v2, CFSTR("flags"), v35);
  v105 = v35;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v143 != 0);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  if (v36)
    CFDictionarySetValue(v2, CFSTR("hasAttachments"), v36);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v142);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (v37)
    CFDictionarySetValue(v2, CFSTR("type"), v37);

  v38 = v102;
  if (v38)
    CFDictionarySetValue(v2, CFSTR("balloonBundleID"), v38);

  v39 = value;
  valuea = v39;
  if (v39)
  {
    CFDictionarySetValue(v2, CFSTR("payloadData"), v39);
    v39 = valuea;
  }
  v103 = v38;

  v40 = v108;
  if (v40)
    CFDictionarySetValue(v2, CFSTR("expressiveSendStyleID"), v40);
  v101 = v40;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v139);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  if (v41)
    CFDictionarySetValue(v2, CFSTR("associatedMessageType"), v41);

  v42 = v118;
  if (v42)
    CFDictionarySetValue(v2, CFSTR("associatedMessageGUID"), v42);

  v43 = v122;
  v123 = v43;
  if (v43)
  {
    CFDictionarySetValue(v2, CFSTR("syndicationRanges"), v43);
    v43 = v123;
  }

  v44 = v120;
  v121 = v44;
  if (v44)
  {
    CFDictionarySetValue(v2, CFSTR("destinationCallerID"), v44);
    v44 = v121;
  }

  v45 = v112;
  v119 = v45;
  if (v112)
  {
    CFDictionarySetValue(v2, CFSTR("threadOriginator"), v45);
    v45 = v119;
  }
  v109 = v34;
  v113 = v29;

  v46 = AssociatedMessageGUIDFromThreadIdentifier;
  if (v46)
    CFDictionarySetValue(v2, CFSTR("threadOriginatorFormattedGUID"), v46);
  v97 = v46;

  v47 = v98;
  v48 = v117;
  if (v47)
    CFDictionarySetValue(v2, CFSTR("biaReferenceID"), v47);
  v99 = v42;

  v49 = v114;
  if (v49)
    CFDictionarySetValue(v2, CFSTR("associatedMessageEmoji"), v49);
  v95 = v49;

  if (v6)
  {
    v50 = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithMessageSummaryInfoData:", v50);
    v51 = (id)objc_claimAutoreleasedReturnValue();
    if (v51)
      CFDictionarySetValue(v2, CFSTR("messageSummaryInfo"), v51);

  }
  objc_msgSend(v1, "handleRecord");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v93 = v52;
  if (v52)
  {
    v53 = v52;
    _IMDCoreSpotlightHandleID(v52);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "uncanonicalizedURIString");
    v55 = (id)objc_claimAutoreleasedReturnValue();
    if (v55)
      CFDictionarySetValue(v2, CFSTR("uncanonicalizedHandle"), v55);

    v56 = v54;
    if (v56)
    {
      CFDictionarySetValue(v2, CFSTR("handle"), v56);

    }
  }
  else
  {
    v56 = 0;
  }
  v115 = v56;
  if (v143)
  {
    v86 = v47;
    v87 = v31;
    v88 = v30;
    v89 = v6;
    v90 = v4;
    theDict = v2;
    v92 = v1;
    objc_msgSend(v1, "attachmentRecords");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v58 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v126 = 0u;
    v127 = 0u;
    v128 = 0u;
    v129 = 0u;
    v59 = v57;
    v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v126, v151, 16);
    if (v60)
    {
      v61 = v60;
      v62 = *(_QWORD *)v127;
      do
      {
        for (i = 0; i != v61; ++i)
        {
          if (*(_QWORD *)v127 != v62)
            objc_enumerationMutation(v59);
          v64 = *(void **)(*((_QWORD *)&v126 + 1) + 8 * i);
          v65 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
          objc_msgSend(v64, "guid");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          if (v66)
            CFDictionarySetValue(v65, CFSTR("guid"), v66);

          objc_msgSend(v64, "path");
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          if (v67)
            CFDictionarySetValue(v65, CFSTR("path"), v67);

          objc_msgSend(v64, "transferName");
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          if (v68)
            CFDictionarySetValue(v65, CFSTR("name"), v68);

          objc_msgSend(v64, "attributionInfo");
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          if (v69)
            CFDictionarySetValue(v65, CFSTR("attributionInfo"), v69);

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v64, "isCommSafetySensitive"));
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          if (v70)
            CFDictionarySetValue(v65, CFSTR("isCommSafetySensitive"), v70);

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v64, "isSticker"));
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          if (v71)
            CFDictionarySetValue(v65, CFSTR("isSticker"), v71);

          objc_msgSend(v64, "utiString");
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          if (v72)
            CFDictionarySetValue(v65, CFSTR("uti"), v72);

          if (-[__CFDictionary count](v65, "count"))
            objc_msgSend(v58, "addObject:", v65);

        }
        v61 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v126, v151, 16);
      }
      while (v61);
    }

    v73 = v58;
    v2 = theDict;
    if (v73)
      CFDictionarySetValue(theDict, CFSTR("attachments"), v73);

    v1 = v92;
    v6 = v89;
    v4 = v90;
    v48 = v117;
    v31 = v87;
    v30 = v88;
    v47 = v86;
  }
  -[__CFDictionary objectForKey:](v2, "objectForKey:", CFSTR("flags"));
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = objc_msgSend(v74, "unsignedLongLongValue");

  if ((v75 & 4) != 0)
  {
    IsKnownContact = 1;
    v76 = v115;
  }
  else
  {
    v76 = v115;
    IsKnownContact = _IMDCoreSpotlightIsKnownContact(v115);
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", IsKnownContact);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  if (v78)
  {
    CFDictionarySetValue(v2, CFSTR("knownSender"), v78);
  }
  else
  {
    v79 = MEMORY[0x1E0C81028];
    v80 = MEMORY[0x1E0C81028];
    v81 = os_log_type_enabled(v79, OS_LOG_TYPE_ERROR);
    if (v81)
      sub_1ABC5BD88(v81, v82, v83);

    v76 = v115;
  }

  v84 = v2;
  return v84;
}

id _IMDCoreSpotlightHandleID(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void (*v6)(void *);
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    v2 = (void *)MEMORY[0x1E0CB3940];
    v3 = IMFileLocationTrimFileName();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("handle"), "NSString *_IMDCoreSpotlightHandleID(IMDHandleRecord *__strong _Nonnull)", v3, 431, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v6)
    {
      v6(v5);
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v13 = v5;
        _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }

    }
  }
  objc_msgSend(v1, "canonicalizedURIString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    objc_msgSend(v1, "uncanonicalizedURIString");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v8, "_stripFZIDPrefix");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "im_stripCategoryLabel");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

uint64_t _IMDCoreSpotlightIsKnownContact(void *a1)
{
  void *v1;
  uint64_t v2;

  _IMDCoreSpotlightCNContactForAddress(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(MEMORY[0x1E0D397A8], "isCNContactAKnownContact:", v1);

  return v2;
}

__CFDictionary *IMCopyIndexableChatDictionaryForRecord(void *a1, int a2)
{
  id v3;
  __CFDictionary *v4;
  const void *v5;
  void *v6;
  const void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *Message;
  void *v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *value;
  void *v35;
  uint64_t v36;
  const void *v37;
  const void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  const void *v43;
  void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  void *v49;

  v3 = a1;
  v4 = (__CFDictionary *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 12);
  v48 = 0;
  v49 = 0;
  v46 = 0;
  v47 = 0;
  v44 = 0;
  v45 = 0;
  v42 = 0;
  v43 = 0;
  v40 = 0;
  v41 = 0;
  v38 = 0;
  v39 = 1;
  v36 = 0;
  v37 = 0;
  _IMDChatRecordBulkCopy((uint64_t)v3, &v47, 0, &v45, &v44, &v43, 0, &v49, 0, &v48, &v40, &v46, &v42, 0, (const void **)&v39, 0, 0, 0, 0,
    &v41,
    0,
    0,
    0,
    &v38,
    &v37,
    &v36,
    0,
    0);
  v5 = v48;
  v6 = v49;
  v8 = v45;
  v7 = v46;
  v10 = v43;
  v9 = v44;
  v35 = v42;
  v33 = v40;
  value = v41;
  if (v49)
    CFDictionarySetValue(v4, CFSTR("guid"), v49);
  if (v5)
    CFDictionarySetValue(v4, CFSTR("groupName"), v5);
  v32 = (void *)v5;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v47);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
    CFDictionarySetValue(v4, CFSTR("style"), v11);

  if (v7)
    CFDictionarySetValue(v4, CFSTR("loginID"), v7);
  v31 = (void *)v7;
  JWDecodeDictionary();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
    CFDictionarySetValue(v4, CFSTR("properties"), v12);
  if (v10)
    CFDictionarySetValue(v4, CFSTR("chatIdentifier"), v10);
  if (v35)
    CFDictionarySetValue(v4, CFSTR("groupID"), v35);
  if (value)
    CFDictionarySetValue(v4, CFSTR("originalGroupID"), value);
  if (v8)
    CFDictionarySetValue(v4, CFSTR("accountID"), v8);
  v30 = (void *)v8;
  if (v33)
    CFDictionarySetValue(v4, CFSTR("lalh"), v33);
  v29 = v9;
  objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E0D37788]);
  v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (v13)
    CFDictionarySetValue(v4, CFSTR("groupPhotoGUID"), v13);
  v14 = (__CFString *)IMDAttachmentRecordCopyAttachmentForGUID(v13);
  v15 = v14;
  if (v14)
  {
    -[__CFString path](v14, "path");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16)
      CFDictionarySetValue(v4, CFSTR("groupPhotoPath"), v16);

  }
  v28 = (void *)v10;
  objc_msgSend(v3, "handleRecords");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "__imArrayByApplyingBlock:", &unk_1E5AAE578);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
    CFDictionarySetValue(v4, CFSTR("participants"), v18);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v39);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19)
    CFDictionarySetValue(v4, CFSTR("isFiltered"), v19);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v38);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20)
    CFDictionarySetValue(v4, CFSTR("isBlackholed"), v20);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v37);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (v21)
    CFDictionarySetValue(v4, CFSTR("syndicationType"), v21);

  objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v36);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (v22)
    CFDictionarySetValue(v4, CFSTR("syndicationDate"), v22);
  if (a2)
  {
    v23 = v6;
    v24 = v3;
    Message = (void *)IMDChatRecordCopyLastMessage((uint64_t)v3);
    objc_msgSend(Message, "date");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (v26)
      CFDictionarySetValue(v4, CFSTR("lastMessageDate"), v26);

    v3 = v24;
    v6 = v23;
  }

  return v4;
}

id sub_1ABBC5CC4(uint64_t a1, void *a2)
{
  return _IMDCoreSpotlightHandleID(a2);
}

id _IMDIntentsSOSImage()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "resourcePath");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("Icons"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("SOS_lt_60.png"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CBD958], "imageWithURL:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void _IMDCoreRecentsApiInit()
{
  void *v0;
  int v1;
  void *v2;
  id v3;

  +[IMDCoreSpotlightDispatchObject sharedInstance](IMDCoreSpotlightDispatchObject, "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "allowsOverrideOfObjects");

  if (v1)
  {
    +[IMDCoreSpotlightDispatchObject sharedInstance](IMDCoreSpotlightDispatchObject, "sharedInstance");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D18290], "defaultInstance");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setRecentsInstance:", v2);

  }
}

id _IMDCoreSpotlightCNContactForHandle(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void (*v6)(void *);
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    v2 = (void *)MEMORY[0x1E0CB3940];
    v3 = IMFileLocationTrimFileName();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("handle"), "CNContact * _Nonnull _IMDCoreSpotlightCNContactForHandle(IMDHandleRecord *__strong _Nonnull)", v3, 445, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v6)
    {
      v6(v5);
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v14 = v5;
        _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }

    }
  }
  _IMDCoreSpotlightHandleID(v1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  _IMDCoreSpotlightCNContactForAddress(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(MEMORY[0x1E0D397A8], "isCNContactAKnownContact:", v9))
    v10 = v9;
  else
    v10 = 0;
  v11 = v10;

  return v11;
}

id _IMDCoreSpotlightCNContactForAddress(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v1 = *MEMORY[0x1E0C966A8];
  v7[0] = *MEMORY[0x1E0C967C0];
  v7[1] = v1;
  v2 = (void *)MEMORY[0x1E0C99D20];
  v3 = a1;
  objc_msgSend(v2, "arrayWithObjects:count:", v7, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  _IMDCoreSpotlightCNContactForAddressWithAdditionalPropertyKeys(v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id _IMDCoreSpotlightCNContactForAddressWithAdditionalPropertyKeys(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  void *v30;
  void *v31;
  NSObject *v32;
  void *v34;
  NSObject *v35;
  NSObject *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  uint8_t buf[4];
  id v42;
  __int16 v43;
  void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0D397A8], "validateAndCleanupID:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v5, "length"))
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v42 = v3;
          _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Validated Address is nil, we are returning nil. Address: %@", buf, 0xCu);
        }

      }
      v11 = 0;
      goto LABEL_46;
    }
    v6 = (void *)MEMORY[0x1E0C99DE8];
    objc_msgSend(MEMORY[0x1E0C97218], "descriptorForRequiredKeysForStyle:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "arrayWithObject:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v4, "count"))
      objc_msgSend(v8, "addObjectsFromArray:", v4);
    +[IMDContactCache sharedInstance](IMDContactCache, "sharedInstance");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "cachedContactForKey:", v5);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      if (objc_msgSend(v10, "areKeysAvailable:", v8))
      {
        v11 = v10;
LABEL_45:

LABEL_46:
        goto LABEL_47;
      }
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v42 = v5;
        _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: No cached contact for ID:%@. We are refetching.", buf, 0xCu);
      }

    }
    objc_msgSend(MEMORY[0x1E0C97200], "predicateForContactsMatchingEmailAddress:", v5);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    _IMDContactStore();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = 0;
    objc_msgSend(v16, "unifiedContactsMatchingPredicate:keysToFetch:error:", v15, v8, &v40);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = v40;

    if (v38)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v38, "localizedDescription");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v42 = v19;
          _os_log_impl(&dword_1ABB60000, v18, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Contact Store (email)fetch failed: %@", buf, 0xCu);

        }
      }
    }
    else
    {
      objc_msgSend(v17, "firstObject");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (v20)
      {
        +[IMDContactCache sharedInstance](IMDContactCache, "sharedInstance");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "cacheContact:forKey:", v20, v5);

        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v22 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v42 = v5;
            v43 = 2112;
            v44 = v20;
            _os_log_impl(&dword_1ABB60000, v22, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Got a Contact for address %@. Caching and returning contact: %@", buf, 0x16u);
          }

        }
        v11 = v20;
        goto LABEL_44;
      }
    }
    v23 = (void *)MEMORY[0x1E0C97200];
    objc_msgSend(MEMORY[0x1E0C97398], "phoneNumberWithStringValue:", v5);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "predicateForContactsMatchingPhoneNumber:", v24);
    v25 = objc_claimAutoreleasedReturnValue();

    _IMDContactStore();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = 0;
    objc_msgSend(v26, "unifiedContactsMatchingPredicate:keysToFetch:error:", v25, v8, &v39);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = v39;

    if (v28)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v28, "localizedDescription");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v42 = v30;
          _os_log_impl(&dword_1ABB60000, v29, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Contact Store (phone)fetch failed: %@", buf, 0xCu);

        }
      }
      v31 = 0;
    }
    else
    {
      objc_msgSend(v27, "firstObject");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      if (v31)
      {
        +[IMDContactCache sharedInstance](IMDContactCache, "sharedInstance");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "cacheContact:forKey:", v31, v5);

        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v35 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v42 = v5;
            _os_log_impl(&dword_1ABB60000, v35, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Got a Contact for address %@. Caching and returning contact.", buf, 0xCu);
          }

        }
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0D397A8], "createMutableContactWithID:", v5);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v42 = v5;
            v43 = 2112;
            v44 = v31;
            _os_log_impl(&dword_1ABB60000, v36, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Did not get a Contact for address %@ from Contact Store. Caching mutable contact: %@", buf, 0x16u);
          }

        }
        +[IMDContactCache sharedInstance](IMDContactCache, "sharedInstance");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "cacheContact:forKey:", v31, v5);

      }
    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v42 = v31;
        _os_log_impl(&dword_1ABB60000, v32, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Return contact: %@", buf, 0xCu);
      }

    }
    v11 = v31;

    v15 = (void *)v25;
    v17 = v27;
LABEL_44:

    goto LABEL_45;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Address is nil, we are returning nil.", buf, 2u);
    }

  }
  v11 = 0;
LABEL_47:

  return v11;
}

id _IMDCoreSpotlightPerson(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void (*v19)(void *);
  NSObject *v20;
  void *v21;
  NSObject *v22;
  _BYTE v24[32];
  _BYTE v25[10];
  __int16 v26;
  id v27;
  id v28;
  uint8_t buf[4];
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (v8)
  {
    v11 = objc_alloc(MEMORY[0x1E0CA6B10]);
    v28 = v8;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v28, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    _IMDContactsKindForID(v8, v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)objc_msgSend(v11, "initWithDisplayName:handles:handleIdentifier:", v7, v12, v13);

  }
  else
  {
    *(_OWORD *)v24 = xmmword_1E5AB7D48;
    *(_OWORD *)&v24[16] = *(_OWORD *)off_1E5AB7D58;
    *(_QWORD *)v25 = 533;
    v15 = (void *)MEMORY[0x1E0CB3940];
    v16 = IMFileLocationTrimFileName();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("handleID"), "CSPerson *_IMDCoreSpotlightPerson(NSString *__strong _Nonnull, NSString *__strong _Nonnull, CNContact *__strong _Nonnull, NSString *__strong _Nonnull)", v16, 533, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v19)
    {
      v19(v18);
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v30 = v18;
        _os_log_impl(&dword_1ABB60000, v20, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }

    }
    v14 = 0;
  }
  objc_msgSend(v9, "identifier");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setContactIdentifier:", v21);

  if (objc_msgSend(MEMORY[0x1E0D397C8], "verboseLoggingEnabled") && IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v24 = 138413314;
      *(_QWORD *)&v24[4] = v14;
      *(_WORD *)&v24[12] = 2112;
      *(_QWORD *)&v24[14] = v7;
      *(_WORD *)&v24[22] = 2112;
      *(_QWORD *)&v24[24] = v8;
      *(_WORD *)v25 = 2112;
      *(_QWORD *)&v25[2] = v9;
      v26 = 2112;
      v27 = v10;
      _os_log_impl(&dword_1ABB60000, v22, OS_LOG_TYPE_INFO, "Created CSPerson: %@, fullName: %@, handleID: %@, contact: %@, service: %@", v24, 0x34u);
    }

  }
  return v14;
}

id _IMDContactsKindForID(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void (*v9)(void *);
  NSObject *v10;
  id v11;
  id *v12;
  id v13;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    v5 = (void *)MEMORY[0x1E0CB3940];
    v6 = IMFileLocationTrimFileName();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("handleID"), "NSString *_IMDContactsKindForID(NSString *__strong _Nonnull, NSString *__strong _Nonnull)", v6, 554, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v9)
    {
      v9(v8);
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v16 = v8;
        _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }

    }
  }
  v11 = (id)*MEMORY[0x1E0C96740];
  if ((_IMDCoreSpotlightServiceIsLegacy(v4) & 1) == 0)
  {
    if ((objc_msgSend(v3, "_appearsToBePhoneNumber") & 1) != 0)
    {
      v12 = (id *)MEMORY[0x1E0C967C0];
LABEL_14:
      v13 = *v12;

      v11 = v13;
      goto LABEL_15;
    }
    if (objc_msgSend(v3, "_appearsToBeEmail"))
    {
      v12 = (id *)MEMORY[0x1E0C966A8];
      goto LABEL_14;
    }
  }
LABEL_15:

  return v11;
}

uint64_t _IMDCoreSpotlightServiceIsLegacy(void *a1)
{
  uint64_t v1;
  id v2;
  int v3;

  v1 = qword_1EEC402F8;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1EEC402F8, &unk_1E5AB7D98);
  v3 = objc_msgSend((id)qword_1EEC40330, "containsObject:", v2);

  return v3 ^ 1u;
}

void sub_1ABBC6D54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[5];

  v4[4] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0D38F70];
  v4[0] = *MEMORY[0x1E0D38F68];
  v4[1] = v0;
  v1 = *MEMORY[0x1E0D38F58];
  v4[2] = *MEMORY[0x1E0D38F50];
  v4[3] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1EEC40330;
  qword_1EEC40330 = v2;

}

BOOL _IMDCoreSpotlightMessageMentionsMe(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  _BOOL8 v8;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v3 = a1;
  v4 = a2;
  _IMDCoreSpotlightTokensMentionedInMessage(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "count"))
  {
    _IMDCoreSpotlightTokensForMeIncludingCallerID(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 0;
    v14 = &v13;
    v15 = 0x2020000000;
    v16 = 0;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_1ABBC70AC;
    v10[3] = &unk_1E5AB7DC0;
    v7 = v6;
    v11 = v7;
    v12 = &v13;
    objc_msgSend(v5, "enumerateObjectsUsingBlock:", v10);
    v8 = *((_BYTE *)v14 + 24) != 0;

    _Block_object_dispose(&v13, 8);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_1ABBC6EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _IMDCoreSpotlightTokensMentionedInMessage(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v1 = (objc_class *)MEMORY[0x1E0C99DE8];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  v4 = *MEMORY[0x1E0D381F0];
  v5 = objc_msgSend(v2, "length");
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1ABBC70F0;
  v9[3] = &unk_1E5AB7DE8;
  v10 = v3;
  v6 = v3;
  objc_msgSend(v2, "enumerateAttribute:inRange:options:usingBlock:", v4, 0, v5, 0, v9);

  v7 = (void *)objc_msgSend(v6, "copy");
  return v7;
}

id _IMDCoreSpotlightTokensForMeIncludingCallerID(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v9;

  v1 = a1;
  _IMDContactStore();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  IMMentionContactKeysForMe();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = 0;
  objc_msgSend(v2, "_crossPlatformUnifiedMeContactWithKeysToFetch:error:", v3, &v9);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  IMMentionMeTokensForContact();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "mutableCopy");
  if (objc_msgSend(v1, "length"))
    objc_msgSend(v6, "addObject:", v1);
  v7 = (void *)objc_msgSend(v6, "copy");

  return v7;
}

uint64_t sub_1ABBC70AC(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1ABBC70F0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a2;
  if (MEMORY[0x1AF434F40]())
  {
    IMNormalizePhoneNumber();
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = v5;
  }
  v4 = v3;
  if (objc_msgSend(v3, "length"))
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);

}

id _IMDCoreRecentsKindForHandleID(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void (*v9)(void *);
  NSObject *v10;
  id v11;
  id *v12;
  id v13;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    v5 = (void *)MEMORY[0x1E0CB3940];
    v6 = IMFileLocationTrimFileName();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("handleID"), "NSString *_IMDCoreRecentsKindForHandleID(NSString *__strong _Nonnull, NSString *__strong _Nonnull)", v6, 642, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v9)
    {
      v9(v8);
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v16 = v8;
        _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }

    }
  }
  v11 = (id)*MEMORY[0x1E0D18218];
  if ((_IMDCoreSpotlightServiceIsLegacy(v4) & 1) == 0)
  {
    if ((objc_msgSend(v3, "_appearsToBePhoneNumber") & 1) != 0)
    {
      v12 = (id *)MEMORY[0x1E0D18228];
LABEL_14:
      v13 = *v12;

      v11 = v13;
      goto LABEL_15;
    }
    if (objc_msgSend(v3, "_appearsToBeEmail"))
    {
      v12 = (id *)MEMORY[0x1E0D18208];
      goto LABEL_14;
    }
  }
LABEL_15:

  return v11;
}

id sub_1ABBC7350()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;

  if (!qword_1ED0D3990 && (IMIsRunningInUnitTesting() & 1) == 0)
  {
    objc_msgSend((id)*MEMORY[0x1E0D38B18], "stringByAppendingString:", CFSTR("pendingNicknamesKeyStore.db"));
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "stringByResolvingAndStandardizingPath");
    v1 = (void *)objc_claimAutoreleasedReturnValue();

    v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0D35250]), "initWithPath:storeName:dataProtectionClass:", v1, CFSTR("pendingNicknameUpdatesStore"), 0);
    v3 = (void *)qword_1ED0D3990;
    qword_1ED0D3990 = v2;

  }
  return (id)qword_1ED0D3990;
}

id sub_1ABBC73E8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;

  if (!qword_1ED0D3988 && (IMIsRunningInUnitTesting() & 1) == 0)
  {
    objc_msgSend((id)*MEMORY[0x1E0D38B18], "stringByAppendingString:", CFSTR("handledNicknamesKeyStore.db"));
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "stringByResolvingAndStandardizingPath");
    v1 = (void *)objc_claimAutoreleasedReturnValue();

    v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0D35250]), "initWithPath:storeName:dataProtectionClass:", v1, CFSTR("handledNicknamesStore"), 0);
    v3 = (void *)qword_1ED0D3988;
    qword_1ED0D3988 = v2;

  }
  return (id)qword_1ED0D3988;
}

id sub_1ABBC7480(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  id v17;
  id v18;
  uint8_t buf[4];
  id v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v18 = 0;
  objc_msgSend(v3, "dataForKey:error:", v4, &v18);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v18;
  if (!v6)
  {
    if (objc_msgSend(v5, "length"))
    {
      v10 = (void *)MEMORY[0x1E0CB3710];
      IMNicknameUnarchivingClasses();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 0;
      objc_msgSend(v10, "_strictlyUnarchivedObjectOfClasses:fromData:error:", v11, v5, &v17);
      v8 = (id)objc_claimAutoreleasedReturnValue();
      v12 = v17;

      v13 = IMOSLoggingEnabled();
      if (v12)
      {
        if (v13)
        {
          OSLogHandleForIMFoundationCategory();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v20 = v12;
            _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "We got an error unarchiving the nickname dictionary %@", buf, 0xCu);
          }

        }
        goto LABEL_7;
      }
      if (v13)
      {
        OSLogHandleForIMFoundationCategory();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          v20 = v4;
          v21 = 2112;
          v22 = v8;
          _os_log_impl(&dword_1ABB60000, v15, OS_LOG_TYPE_INFO, "We have a nickname dictionary for %@ %@", buf, 0x16u);
        }

      }
    }
    else
    {
      v8 = 0;
    }
    v8 = v8;
    v9 = v8;
    goto LABEL_21;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v6;
      _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "We got an error loading the nickname info from the kv store for notifications %@", buf, 0xCu);
    }

  }
  v8 = 0;
LABEL_7:
  v9 = 0;
LABEL_21:

  return v9;
}

id _IMDNicknameInfoForAddress(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = a1;
  sub_1ABBC7350();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1ABBC7480(v2, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend(v3, "count"))
  {
    sub_1ABBC73E8();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1ABBC7480(v4, v1);
    v5 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v5;
  }

  return v3;
}

id _IMDContactNameForNickname(void *a1, int a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v3 = a1;
  if (v3)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C97360]);
    objc_msgSend(v3, "firstName");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setGivenName:", v5);

    objc_msgSend(v3, "lastName");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setFamilyName:", v6);

    objc_msgSend(MEMORY[0x1E0C97218], "stringFromContact:style:", v4, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }
  if (objc_msgSend(v7, "length") && a2)
  {
    v8 = (void *)MEMORY[0x1E0CB3940];
    IMSharedUtilitiesFrameworkBundle();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("MAYBE"), &stru_1E5AC1D70, CFSTR("IMSharedUtilities"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "localizedStringWithFormat:", v10, v7);
    v11 = objc_claimAutoreleasedReturnValue();

    v7 = (void *)v11;
  }

  return v7;
}

void _AddLocationsFromVCFToCoreRecents(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  id obj;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v54;
  void *v55;
  id v56;
  uint8_t buf[16];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[128];
  _BYTE v75[128];
  _BYTE v76[128];
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v44 = a2;
  v45 = a3;
  v56 = a4;
  v42 = v8;
  if (v8)
  {
    +[IMDContactCache contactsForVCardAtPath:](IMDContactCache, "contactsForVCardAtPath:", v8);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v43, "count"))
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      obj = v43;
      v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v77, 16);
      if (v41)
      {
        v38 = *(_QWORD *)v71;
        v54 = *MEMORY[0x1E0D18220];
        do
        {
          v9 = 0;
          do
          {
            if (*(_QWORD *)v71 != v38)
            {
              v10 = v9;
              objc_enumerationMutation(obj);
              v9 = v10;
            }
            v39 = v9;
            v51 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * v9);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)MEMORY[0x1AF435000]("CRRecentWeightMessagesReceivedAddress", CFSTR("CoreRecents")));
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0D397C0], "metadataDictionaryForMessageID:senderID:date:", v44, v45, v56);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            objc_msgSend(v51, "postalAddresses");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v66, v76, 16);
            if (v14)
            {
              v15 = *(_QWORD *)v67;
              do
              {
                for (i = 0; i != v14; ++i)
                {
                  if (*(_QWORD *)v67 != v15)
                    objc_enumerationMutation(v13);
                  v17 = (void *)MEMORY[0x1E0C973B0];
                  objc_msgSend(*(id *)(*((_QWORD *)&v66 + 1) + 8 * i), "value");
                  v18 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v17, "singleLineStringFromPostalAddress:addCountryName:", v18, 0);
                  v19 = (void *)objc_claimAutoreleasedReturnValue();

                  objc_msgSend(MEMORY[0x1E0D18290], "recentEventForAddress:displayName:kind:date:weight:metadata:options:", v19, 0, v54, v56, v11, v12, 0);
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v55, "addObject:", v20);

                  if (a5)
                    *a5 = (id)objc_msgSend(v19, "copy");

                }
                v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v66, v76, 16);
              }
              while (v14);
            }

            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            objc_msgSend(v51, "urlAddresses");
            v46 = (id)objc_claimAutoreleasedReturnValue();
            v48 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v62, v75, 16);
            if (v48)
            {
              v47 = *(_QWORD *)v63;
              do
              {
                v21 = 0;
                do
                {
                  if (*(_QWORD *)v63 != v47)
                  {
                    v22 = v21;
                    objc_enumerationMutation(v46);
                    v21 = v22;
                  }
                  v52 = v21;
                  v23 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * v21);
                  objc_msgSend(v23, "label");
                  v24 = (void *)objc_claimAutoreleasedReturnValue();
                  v25 = objc_msgSend(v24, "isEqualToString:", CFSTR("map url"));

                  if (v25)
                  {
                    objc_msgSend(v23, "value");
                    v50 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v50);
                    v26 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v26, "query");
                    v49 = (void *)objc_claimAutoreleasedReturnValue();

                    v60 = 0u;
                    v61 = 0u;
                    v58 = 0u;
                    v59 = 0u;
                    objc_msgSend(v49, "componentsSeparatedByString:", CFSTR("&"));
                    v27 = (void *)objc_claimAutoreleasedReturnValue();
                    v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v58, v74, 16);
                    if (v28)
                    {
                      v29 = *(_QWORD *)v59;
                      do
                      {
                        for (j = 0; j != v28; ++j)
                        {
                          if (*(_QWORD *)v59 != v29)
                            objc_enumerationMutation(v27);
                          objc_msgSend(*(id *)(*((_QWORD *)&v58 + 1) + 8 * j), "componentsSeparatedByString:", CFSTR("="));
                          v31 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v31, "objectAtIndex:", 0);
                          v32 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v31, "objectAtIndex:", 1);
                          v33 = (void *)objc_claimAutoreleasedReturnValue();
                          if (objc_msgSend(v32, "isEqualToString:", CFSTR("ll")))
                          {
                            objc_msgSend(MEMORY[0x1E0D18290], "recentEventForAddress:displayName:kind:date:weight:metadata:options:", v33, 0, v54, v56, v11, v12, 0);
                            v34 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v55, "addObject:", v34);

                          }
                        }
                        v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v58, v74, 16);
                      }
                      while (v28);
                    }

                  }
                  v21 = v52 + 1;
                }
                while (v52 + 1 != v48);
                v48 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v62, v75, 16);
              }
              while (v48);
            }

            v9 = v39 + 1;
          }
          while (v39 + 1 != v41);
          v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v77, 16);
        }
        while (v41);
      }

      if (objc_msgSend(v55, "count"))
      {
        +[IMDCoreSpotlightDispatchObject sharedInstance](IMDCoreSpotlightDispatchObject, "sharedInstance");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "recentsInstance");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "recordContactEvents:recentsDomain:sendingAddress:source:userInitiated:", v55, *MEMORY[0x1E0D18270], 0, 0, 0);

      }
    }

  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v37, OS_LOG_TYPE_INFO, "_AddLocationsFromVCFToCoreRecents() was passed a nil filePath", buf, 2u);
    }

  }
}

id _IMDCoreSpotlightChatUIDForChatDictionary(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  const __CFString *v5;

  v1 = a1;
  objc_msgSend(v1, "valueForKey:", CFSTR("style"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(v1, "valueForKey:", CFSTR("style"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "charValue");

    if (v4 == 45)
    {
      v5 = CFSTR("chatIdentifier");
    }
    else
    {
      if (v4 != 43)
      {
        v2 = 0;
        goto LABEL_8;
      }
      v5 = CFSTR("groupID");
    }
    objc_msgSend(v1, "valueForKey:", v5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
LABEL_8:

  return v2;
}

uint64_t IMDCoreSpotlightPhotoAtPathIsScreenshot(void *a1)
{
  id v1;
  const __CFURL *v2;
  CGImageSource *v3;
  void *v4;
  const __CFDictionary *v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "length")
    && (objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v1),
        v2 = (const __CFURL *)objc_claimAutoreleasedReturnValue(),
        v3 = CGImageSourceCreateWithURL(v2, 0),
        v2,
        v3))
  {
    CGImageSourceGetType(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMUTTypeIsSupportedScreenshot())
    {
      v13 = *MEMORY[0x1E0CBD240];
      v14[0] = MEMORY[0x1E0C9AAA0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
      v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      v6 = CGImageSourceCopyPropertiesAtIndex(v3, 0, v5);
      v7 = v6;
      if (v6)
      {
        -[__CFDictionary objectForKey:](v6, "objectForKey:", *MEMORY[0x1E0CBCB50]);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = v8;
        if (v8)
        {
          objc_msgSend(v8, "objectForKey:", *MEMORY[0x1E0CBCCB0]);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("Screenshot"));

        }
        else
        {
          v11 = 0;
        }

      }
      else
      {
        v11 = 0;
      }

    }
    else
    {
      v11 = 0;
    }
    CFRelease(v3);

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void IMDCoreSpotlightURLFromAttributedMessageBody(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;

  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  if (!v1)
  {
    v6 = 0;
    goto LABEL_21;
  }
  v3 = (uint64_t *)v2;
  v4 = *MEMORY[0x1E0D365F0];
  if (objc_msgSend(v1, "attribute:existsInRange:", *MEMORY[0x1E0D365F0], 0, v2))
  {
    v17 = 0;
    v18 = 0;
    objc_msgSend(v1, "attribute:atIndex:longestEffectiveRange:inRange:", v4, 0, &v17, 0, v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    v6 = 0;
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v6 = 0;
      if (!v17 && v18 == v3)
        v6 = v5;
    }

    goto LABEL_21;
  }
  v6 = 0;
  if (!objc_msgSend(v1, "attribute:existsInRange:", *MEMORY[0x1E0D363F0], 0, v3))
  {
LABEL_21:

    v13 = v6;
    return;
  }
  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = sub_1ABBC8534;
  v21 = sub_1ABBC8544;
  v22 = 0;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_1ABBC854C;
  v16[3] = &unk_1E5AB7E38;
  v16[4] = &v17;
  objc_msgSend(v1, "enumerateAttributesInRange:options:usingBlock:", 0, v3, 0, v16);
  _IMDCopyDDScannerResultFromAttributedStringData((void *)v18[5]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v7, "coreResult");
  if (!v6)
  {
LABEL_20:

    _Block_object_dispose(&v17, 8);
    goto LABEL_21;
  }
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v8 = off_1EEC404D8;
  v26 = off_1EEC404D8;
  if (!off_1EEC404D8)
  {
    v9 = (void *)sub_1ABBCA450();
    v8 = dlsym(v9, "DDResultGetCategory");
    v24[3] = (uint64_t)v8;
    off_1EEC404D8 = v8;
  }
  _Block_object_dispose(&v23, 8);
  if (v8)
  {
    if (((unsigned int (*)(id))v8)(v6) != 1)
    {
      v6 = 0;
      goto LABEL_20;
    }
    v23 = 0;
    v24 = &v23;
    v25 = 0x2020000000;
    v10 = off_1EEC404E8;
    v26 = off_1EEC404E8;
    if (!off_1EEC404E8)
    {
      v11 = (void *)sub_1ABBCA450();
      v10 = dlsym(v11, "DDResultCopyExtractedURLWithOptions");
      v24[3] = (uint64_t)v10;
      off_1EEC404E8 = v10;
    }
    _Block_object_dispose(&v23, 8);
    if (v10)
    {
      v12 = (void *)((uint64_t (*)(id, _QWORD))v10)(v6, 0);
      objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v12);
      v6 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_20;
    }
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef _DDResultCopyExtractedURLWithOptions(DDResultRef, DDResultURLExtractionOptions)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("IMDCoreSpotlightIndexHelpers.m"), 73, CFSTR("%s"), dlerror());
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "DDResultCategory _DDResultGetCategory(DDResultRef)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("IMDCoreSpotlightIndexHelpers.m"), 72, CFSTR("%s"), dlerror());
  }

  __break(1u);
}

void sub_1ABBC84F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBC8534(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABBC8544(uint64_t a1)
{

}

void sub_1ABBC854C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v7 = a2;
  v8 = *MEMORY[0x1E0D363F0];
  v13 = v7;
  objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0D363F0]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(v13, "objectForKeyedSubscript:", v8);
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

    *a5 = 1;
  }

}

id _IMDCopyDDScannerResultFromAttributedStringData(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  id v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    v2 = (void *)MEMORY[0x1AF435474]();
    v9 = 0;
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v1, &v9);
    v4 = v9;
    if (v3)
    {
      if (!qword_1EEC404B0)
        qword_1EEC404B0 = MEMORY[0x1AF434FF4](CFSTR("DDScannerResult"), CFSTR("DataDetectorsCore"));
      objc_msgSend(v3, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("dd-result"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "finishDecoding");
      if (v5)
        goto LABEL_16;
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v3, "error");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v11 = v1;
          v12 = 2112;
          v13 = v7;
          _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Could not unarchive DDScannerResult data: %@ error: %@", buf, 0x16u);

        }
LABEL_14:

      }
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v11 = v4;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Could not create keyed unarchiver due to error: %@", buf, 0xCu);
      }
      goto LABEL_14;
    }
    v5 = 0;
LABEL_16:

    objc_autoreleasePoolPop(v2);
    goto LABEL_17;
  }
  v5 = 0;
LABEL_17:

  return v5;
}

void sub_1ABBC87F4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABBC87A4);
  }
  _Unwind_Resume(a1);
}

id _IMDCoreSpotlightStrippedBody(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a3;
  objc_msgSend(a1, "objectForKey:", a2);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  if (!v6)
    v6 = v5;
  objc_msgSend(v6, "stringByReplacingOccurrencesOfString:withString:", *MEMORY[0x1E0D362F8], &stru_1E5AC1D70);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringByReplacingOccurrencesOfString:withString:", *MEMORY[0x1E0D36318], &stru_1E5AC1D70);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1ABBC89F8()
{
  IMDCoreSpotlightDispatchObject *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCoreSpotlightDispatchObject);
  v1 = (void *)qword_1ED0D3AA8;
  qword_1ED0D3AA8 = (uint64_t)v0;

}

id _IMDCoreSpotlightFullNameForContact(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
    {
      objc_msgSend(v3, "nickname");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v5 = 0;
    }
    if (!objc_msgSend(v5, "length"))
    {
      objc_msgSend(MEMORY[0x1E0C97218], "stringFromContact:style:", v4, 0);
      v6 = objc_claimAutoreleasedReturnValue();

      v5 = (void *)v6;
    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id _IMDCoreSpotlightNicknameForAddress(void *a1)
{
  void *v1;
  void *v2;

  _IMDNicknameInfoForAddress(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "count"))
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D39980]), "initWithDictionaryRepresentation:", v1);
  else
    v2 = 0;

  return v2;
}

id sub_1ABBC8BA0()
{
  if (qword_1EEC40320 != -1)
    dispatch_once(&qword_1EEC40320, &unk_1E5AAE5F8);
  return (id)qword_1EEC40328;
}

void sub_1ABBC8BE0()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0D19970], "serviceForContacts");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EEC40328;
  qword_1EEC40328 = v0;

}

id _IMDCoreSpotlightSuggestedNameForAddress(void *a1)
{
  id v1;
  void *v2;
  dispatch_semaphore_t v3;
  NSObject *v4;
  dispatch_time_t v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  _QWORD v10[4];
  id v11;
  NSObject *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;
  uint8_t buf[4];
  id v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    sub_1ABBC8BA0();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 0;
    v15 = &v14;
    v16 = 0x3032000000;
    v17 = sub_1ABBC8534;
    v18 = sub_1ABBC8544;
    v19 = 0;
    v3 = dispatch_semaphore_create(0);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_1ABBC8EB0;
    v10[3] = &unk_1E5AB7E80;
    v11 = 0;
    v13 = &v14;
    v4 = v3;
    v12 = v4;
    objc_msgSend(v2, "namesForDetail:limitTo:prependMaybe:onlySignificant:withCompletion:", v1, 1, 0, 0, v10);
    v5 = dispatch_time(0, 400000000);
    if (dispatch_semaphore_wait(v4, v5) && IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Suggestion service request timed out", buf, 2u);
      }

    }
    if (objc_msgSend((id)v15[5], "length"))
    {
      v7 = (id)v15[5];
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          v21 = v7;
          v22 = 2112;
          v23 = v1;
          _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "Using suggested name \"%@\" for handle %@", buf, 0x16u);
        }

      }
    }
    else
    {
      v7 = 0;
    }

    _Block_object_dispose(&v14, 8);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_1ABBC8EB0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC5BE18(a1, (uint64_t)v6, v7);
    goto LABEL_6;
  }
  if (objc_msgSend(v5, "count"))
  {
    objc_msgSend(v5, "firstObject");
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = -[NSObject copy](v7, "copy");
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

LABEL_6:
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

id _IMDCoreSpotlightNewINPersonFromHandleAndContact(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  BOOL v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  void *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  void *v40;
  void *v41;
  int v42;
  os_log_t log;
  os_log_t loga;
  os_log_t logb;
  NSObject *logc;
  id v47;
  _QWORD v48[4];
  id v49;
  uint8_t buf[4];
  id v51;
  __int16 v52;
  os_log_t v53;
  __int16 v54;
  void *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v47 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  objc_msgSend(v10, "identifier");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  _IMDCoreSpotlightNewINPersonHandleFromIMHandleValueAndContact(v9, v10);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3850], "componentsForContact:", v10);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "hasSuffix:", *MEMORY[0x1E0D37DC0]))
  {
    IMSharedUtilitiesFrameworkBundle();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("TS_NOTIFICATION_EMERGENCY_SOS_HANDLE"), &stru_1E5AC1D70, CFSTR("IMSharedUtilities-SYDROB_FEATURES"));
    v17 = objc_claimAutoreleasedReturnValue();

    _IMDIntentsSOSImage();
    v18 = objc_claimAutoreleasedReturnValue();
LABEL_5:
    v20 = (void *)v18;
    v21 = 0;
    goto LABEL_19;
  }
  if (IMIsStringStewieEmergency())
  {
    IMSharedUtilitiesFrameworkBundle();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "localizedStringForKey:value:table:", CFSTR("STEWIE_NOTIFICATION_EMERGENCY_SOS_HANDLE"), &stru_1E5AC1D70, CFSTR("IMSharedUtilities-SYDROB_FEATURES"));
    v17 = objc_claimAutoreleasedReturnValue();

    _IMDIntentsSOSImage();
    v18 = objc_claimAutoreleasedReturnValue();
    goto LABEL_5;
  }
  if (IMIsStringStewieRoadside())
  {
    if (v11)
    {
      v17 = v11;
    }
    else
    {
      IMSharedUtilitiesFrameworkBundle();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "localizedStringForKey:value:table:", CFSTR("STEWIE_NOTIFICATION_ROADSIDE_HANDLE"), &stru_1E5AC1D70, CFSTR("IMSharedUtilities-Avocet"));
      v17 = objc_claimAutoreleasedReturnValue();

    }
LABEL_18:
    v21 = 0;
    v20 = 0;
    goto LABEL_19;
  }
  if ((MEMORY[0x1AF434F1C](v9) & 1) != 0 || objc_msgSend(v9, "__im_isChatBot"))
  {
    objc_msgSend(MEMORY[0x1E0D39710], "sharedInstance");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v48[0] = MEMORY[0x1E0C809B0];
    v48[1] = 3221225472;
    v48[2] = sub_1ABBC99E0;
    v48[3] = &unk_1E5AB7EA8;
    v49 = v12;
    objc_msgSend(v22, "businessNameForUID:updateHandler:", v9, v48);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v23, "length"))
    {
      v24 = v23;
    }
    else
    {
      IMLogHandleForCategory();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        sub_1ABC5BE98(v26);

      objc_msgSend(MEMORY[0x1E0D39710], "placeholderBusinessNameForBrandURI:", v9);
      v24 = objc_claimAutoreleasedReturnValue();
    }
    v17 = v24;

    goto LABEL_18;
  }
  if (v10 && objc_msgSend(MEMORY[0x1E0D397A8], "isCNContactAKnownContact:", v10))
  {
    objc_msgSend(MEMORY[0x1E0C972B8], "sharedDefaults");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    _IMDCoreSpotlightFullNameForContact(v10, objc_msgSend(v29, "shortNameFormatPrefersNicknames"));
    v30 = objc_claimAutoreleasedReturnValue();
    if (-[NSObject length](v30, "length") && IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412802;
        v51 = v9;
        v52 = 2112;
        v53 = v30;
        v54 = 2112;
        v55 = v13;
        _os_log_impl(&dword_1ABB60000, v31, OS_LOG_TYPE_INFO, "For handle %@ used contacts to determine displayName \"%@\" and image. Using contactID: %@", buf, 0x20u);
      }

    }
  }
  else
  {
    v30 = 0;
  }
  if (-[NSObject length](v30, "length"))
  {
    v21 = 0;
    v20 = 0;
  }
  else
  {
    _IMDCoreSpotlightNicknameForAddress(v9);
    v32 = objc_claimAutoreleasedReturnValue();
    log = v32;
    if (v32)
    {
      _IMDContactNameForNickname(v32, 0);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend(v40, "length");
      v21 = v33 != 0;
      if (v33)
      {
        v39 = v40;

        _IMDINImageForNickname(log);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v34 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412802;
            v51 = v9;
            v52 = 2112;
            v53 = v39;
            v54 = 2112;
            v55 = v20;
            _os_log_impl(&dword_1ABB60000, v34, OS_LOG_TYPE_INFO, "For handle %@ used nickname to determine displayName \"%@\" and image %@", buf, 0x20u);
          }

        }
        v30 = v39;
      }
      else
      {
        v20 = 0;
      }

    }
    else
    {
      v21 = 0;
      v20 = 0;
    }

  }
  if (-[NSObject length](v30, "length"))
  {
    v35 = v30;
  }
  else
  {
    _IMDCoreSpotlightSuggestedNameForAddress(v9);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v41, "length"))
    {
      loga = v41;

      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          v51 = v9;
          v52 = 2112;
          v53 = loga;
          _os_log_impl(&dword_1ABB60000, v36, OS_LOG_TYPE_INFO, "For handle %@ used nickname to determine displayName \"%@\" and no image", buf, 0x16u);
        }

      }
      v21 = 1;
    }
    else
    {
      loga = v30;
    }

    v35 = loga;
  }
  logb = v35;
  if (!-[NSObject length](v35, "length")
    && objc_msgSend(v47, "length")
    && (objc_msgSend(v47, "lowercaseString"),
        v37 = (void *)objc_claimAutoreleasedReturnValue(),
        v42 = objc_msgSend(v9, "isEqualToString:", v37),
        v37,
        v42))
  {
    v17 = v47;

    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      logc = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(logc, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v51 = v9;
        v52 = 2112;
        v53 = v17;
        _os_log_impl(&dword_1ABB60000, logc, OS_LOG_TYPE_INFO, "For handle %@ used uncanonicalized address to determine displayName \"%@\" and no image", buf, 0x16u);
      }

    }
  }
  else
  {
    v17 = logb;
  }
LABEL_19:
  LOBYTE(v38) = v21;
  v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBDA58]), "initWithPersonHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:isContactSuggestion:suggestionType:", v14, v15, v17, v20, v13, 0, v38, 0);

  return v27;
}

id _IMDCoreSpotlightNewINPersonHandleFromIMHandleValueAndContact(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (MEMORY[0x1AF434F40](v3))
  {
    if (v4)
    {
      v5 = (void *)objc_msgSend(objc_alloc((Class)MEMORY[0x1AF434FF4](CFSTR("CNPhoneNumber"), CFSTR("Contacts"))), "initWithStringValue:", v3);
      if (!v5)
      {
        v14 = 0;
        v20 = 2;
LABEL_41:

        goto LABEL_42;
      }
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      objc_msgSend(v4, "phoneNumbers");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
      if (v7)
      {
        v8 = v7;
        v23 = v4;
        v24 = v3;
        v9 = *(_QWORD *)v30;
        while (2)
        {
          v10 = 0;
          do
          {
            if (*(_QWORD *)v30 != v9)
              objc_enumerationMutation(v6);
            v11 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v10);
            objc_msgSend(v11, "value", v23, v24);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v13 = objc_msgSend(v12, "isLikePhoneNumber:", v5);

            if (v13)
            {
              if (qword_1EEC404C0 != -1)
                dispatch_once(&qword_1EEC404C0, &unk_1E5AB7EC8);
              if (off_1EEC404B8)
              {
                ((void (*)(void *))off_1EEC404B8)(v11);
                v14 = (void *)objc_claimAutoreleasedReturnValue();
                v20 = 2;
                goto LABEL_37;
              }
            }
            ++v10;
          }
          while (v8 != v10);
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
          if (v8)
            continue;
          break;
        }
        v14 = 0;
        v4 = v23;
        v3 = v24;
      }
      else
      {
        v14 = 0;
      }
      v20 = 2;
LABEL_40:

      goto LABEL_41;
    }
    v14 = 0;
    v20 = 2;
  }
  else if (IMStringIsEmail())
  {
    if (v4)
    {
      IMNormalizeFormattedString();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      objc_msgSend(v4, "emailAddresses");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (void *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
      if (v14)
      {
        v23 = v4;
        v24 = v3;
        v15 = *(_QWORD *)v26;
        while (2)
        {
          v16 = 0;
          do
          {
            if (*(_QWORD *)v26 != v15)
              objc_enumerationMutation(v6);
            v17 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v16);
            objc_msgSend(v17, "value", v23, v24);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            IMNormalizeFormattedString();
            v19 = (void *)objc_claimAutoreleasedReturnValue();

            if (objc_msgSend(v19, "isEqual:", v5))
            {
              if (qword_1EEC404D0 != -1)
                dispatch_once(&qword_1EEC404D0, &unk_1E5AAE898);
              if (off_1EEC404C8)
              {
                ((void (*)(void *))off_1EEC404C8)(v17);
                v14 = (void *)objc_claimAutoreleasedReturnValue();

                v20 = 1;
LABEL_37:
                v4 = v23;
                v3 = v24;
                goto LABEL_40;
              }
            }

            v16 = (char *)v16 + 1;
          }
          while (v14 != v16);
          v14 = (void *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
          if (v14)
            continue;
          break;
        }
        v4 = v23;
        v3 = v24;
      }
      v20 = 1;
      goto LABEL_40;
    }
    v14 = 0;
    v20 = 1;
  }
  else
  {
    v14 = 0;
    v20 = 0;
  }
LABEL_42:
  v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBDA60]), "initWithValue:type:label:", v3, v20, v14);

  return v21;
}

void sub_1ABBC99E0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v6 = 138412290;
      v7 = v3;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Business name updated to \"%@\", calling interaction updated handler", (uint8_t *)&v6, 0xCu);
    }

  }
  v5 = *(void **)(a1 + 32);
  if (v5)
    IMDPersistencePerformBlock(v5, 0);

}

id _IMDINImageForNickname(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "avatar");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "imageExists"))
  {
    objc_msgSend(v2, "imageFilePath");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "length"))
    {
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CBD958], "imageWithURL:", v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v10 = 138412290;
          v11 = v3;
          _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Using image file path: %@", (uint8_t *)&v10, 0xCu);
        }

      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          LOWORD(v10) = 0;
          _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "Image file path is nil", (uint8_t *)&v10, 2u);
        }

      }
      v5 = 0;
    }

  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10) = 0;
        _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Image does not exist at nickname file path", (uint8_t *)&v10, 2u);
      }

    }
    v5 = 0;
  }

  return v5;
}

id _IMDCoreSpotlightNewINInteractionForIncomingMessage(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, char a10, void *a11, void *a12, void *a13, void *a14, unsigned __int8 a15, unsigned __int8 a16, unsigned __int8 a17, void *a18)
{
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  int v37;
  NSObject *v38;
  uint64_t IsEmail;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  int v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  id v54;
  void *v55;
  void *v56;
  id v57;
  id v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  id v68;
  void *v69;
  id obj;
  id v71;
  uint8_t buf[16];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  void *v77;
  _BYTE v78[128];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v62 = a1;
  v63 = a2;
  v61 = a3;
  v64 = a4;
  v54 = a5;
  v71 = a6;
  v68 = a7;
  v58 = a8;
  v25 = a9;
  v26 = a11;
  v66 = a12;
  v57 = a13;
  v65 = a14;
  v27 = a18;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  obj = v26;
  v28 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v73, v78, 16);
  if (!v28)
  {

LABEL_17:
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v38, OS_LOG_TYPE_INFO, "None of the current chat participants match the current senderID, creating a new person.", buf, 2u);
      }

    }
    _IMDCoreSpotlightNewINPersonFromHandleAndContact(v54, v71, 0, v25, v27);
    v29 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_22;
  }
  v29 = 0;
  v30 = *(_QWORD *)v74;
  do
  {
    for (i = 0; i != v28; ++i)
    {
      if (*(_QWORD *)v74 != v30)
        objc_enumerationMutation(obj);
      v32 = *(void **)(*((_QWORD *)&v73 + 1) + 8 * i);
      objc_msgSend(v32, "handleID");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "contact");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      _IMDCoreSpotlightNewINPersonFromHandleAndContact(v33, v71, v34, v25, v27);
      v35 = (void *)objc_claimAutoreleasedReturnValue();

      v36 = objc_msgSend(v32, "isSender");
      if (v29)
        v37 = 0;
      else
        v37 = v36;
      if (v37 == 1)
        v29 = v35;
      else
        objc_msgSend(v69, "addObject:", v35);

    }
    v28 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v73, v78, 16);
  }
  while (v28);

  if (!v29)
    goto LABEL_17;
LABEL_22:
  if ((MEMORY[0x1AF434F40](v66) & 1) != 0)
    IsEmail = 2;
  else
    IsEmail = IMStringIsEmail();
  v40 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBDA60]), "initWithValue:type:", v66, IsEmail);
  v41 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBDA58]), "initWithPersonHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:", v40, 0, 0, 0, 0, 0);
  objc_msgSend(v41, "setIsMe:", 1);
  objc_msgSend(v69, "addObject:", v41);
  if (a10 == 45 || !objc_msgSend(v25, "length"))
    v60 = 0;
  else
    v60 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBDC00]), "initWithVocabularyIdentifier:spokenPhrase:pronunciationHint:", v68, v25, 0);
  v67 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBDB80]), "initWithRecipients:content:speakableGroupName:conversationIdentifier:serviceName:sender:", v69, v63, v60, v68, v64, v29);
  objc_msgSend(v67, "setNotificationThreadIdentifier:", v58);
  objc_msgSend(v67, "_setLaunchId:", CFSTR("com.apple.MobileSMS"));
  +[IMDDonationManager sharedInstance](IMDDonationManager, "sharedInstance");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "copyGroupPhotoToExternalPathIfNecessary:chatGUID:attachmentFilepath:", v57, v68, v65);

  objc_msgSend(v65, "im_lastPathComponent");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  IMSharedHelperExternalLocationForFile();
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v59, "length"))
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v59);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CBD958], "imageWithURL:", v55);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    if (v43)
      objc_msgSend(v67, "setImage:forParameterNamed:", v43, CFSTR("speakableGroupName"));

  }
  else
  {
    v55 = 0;
  }
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = objc_msgSend(v44, "isTranscriptSharingEnabled");

  if (v45 && objc_msgSend(v58, "hasPrefix:", *MEMORY[0x1E0D394C8]))
  {
    _IMDIntentsSOSImage();
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    if (v46)
      objc_msgSend(v67, "setImage:forParameterNamed:", v46, CFSTR("speakableGroupName"));

  }
  v47 = objc_alloc_init(MEMORY[0x1E0CBDB88]);
  objc_msgSend(v47, "setMentionsCurrentUser:", a15);
  objc_msgSend(v47, "setReplyToCurrentUser:", a16);
  objc_msgSend(v47, "setNotifyRecipientAnyway:", a17);
  objc_msgSend(v47, "setRecipientCount:", objc_msgSend(obj, "count"));
  objc_msgSend(v67, "setDonationMetadata:", v47);
  v48 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBDB90]), "initWithCode:userActivity:", 3, 0);
  v49 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBD9F8]), "initWithIdentifier:conversationIdentifier:content:dateSent:sender:recipients:groupName:messageType:serviceName:", v62, v68, v63, v61, v29, v69, v60, 1, v64);
  v77 = v49;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v77, 1);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "setSentMessages:", v50);

  v51 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBD9A8]), "initWithIntent:response:", v67, v48);
  objc_msgSend(v51, "setIdentifier:", v62);
  objc_msgSend(v51, "setGroupIdentifier:", v68);
  objc_msgSend(v51, "setDirection:", 2);
  v52 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3588]), "initWithStartDate:duration:", v61, 0.0);
  objc_msgSend(v51, "setDateInterval:", v52);

  objc_msgSend(v51, "setIntentHandlingStatus:", 3);
  return v51;
}

void *sub_1ABBCA3F8()
{
  void *result;

  result = (void *)MEMORY[0x1AF435000]("INPersonHandleLabelForCNLabeledValue", CFSTR("Intents"));
  off_1EEC404B8 = result;
  return result;
}

void *sub_1ABBCA424()
{
  void *result;

  result = (void *)MEMORY[0x1AF435000]("INPersonHandleLabelForCNLabeledValue", CFSTR("Intents"));
  off_1EEC404C8 = result;
  return result;
}

uint64_t sub_1ABBCA450()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!qword_1EEC404E0)
  {
    v2 = xmmword_1E5AB7EE8;
    v3 = 0;
    qword_1EEC404E0 = _sl_dlopen();
  }
  if (!qword_1EEC404E0)
    sub_1ABC5BED8(&v1);
  return qword_1EEC404E0;
}

uint64_t _IMDSMSDatabaseMigrateData_21_22(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL4 v7;
  const char *v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  sqlite3_stmt *v20;
  int v21;
  char v22;
  int v23;
  uint64_t v24;
  int v25;
  sqlite3_stmt *v26;
  char v27;
  const unsigned __int8 *v28;
  __CFString *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  const unsigned __int8 *v34;
  __CFString *v35;
  const UInt8 *v36;
  unsigned int v37;
  CFDataRef v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  const UInt8 *v47;
  unsigned int v48;
  CFDataRef v49;
  uint64_t v50;
  id v51;
  const unsigned __int8 *v52;
  int v53;
  NSObject *v54;
  int v55;
  NSObject *v56;
  uint64_t v57;
  int v58;
  int v59;
  const unsigned __int8 *v60;
  CFStringRef v61;
  uint64_t v62;
  NSObject *v63;
  __CFArray *Mutable;
  uint64_t v65;
  uint64_t v66;
  int v67;
  CFNumberRef v68;
  CFNumberRef v69;
  NSObject *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const unsigned __int8 *v74;
  __CFString *v75;
  const unsigned __int8 *v76;
  __CFString *v77;
  __CFString *v78;
  int v79;
  unint64_t v80;
  int HasPrefix;
  __CFArray *v82;
  uint64_t v83;
  uint64_t v84;
  const unsigned __int8 *v85;
  CFStringRef v86;
  CFStringRef v87;
  uint64_t v88;
  CFIndex j;
  __CFString *v90;
  __CFString *v91;
  int v92;
  int v93;
  NSObject *v94;
  NSObject *v95;
  const char *v96;
  NSObject *v97;
  CFNumberRef v98;
  CFNumberRef v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  NSObject *v103;
  NSObject *v104;
  const char *v105;
  uint32_t v106;
  NSObject *v107;
  const __CFArray *v108;
  CFIndex Count;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  char v115;
  NSObject *v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  __CFArray *v123;
  CFNumberRef v124;
  void *v125;
  uint64_t v126;
  const __CFString *v127;
  const __CFString *v128;
  CFStringRef v129;
  uint64_t v130;
  const unsigned __int8 *v131;
  CFStringRef v132;
  NSObject *v133;
  NSObject *v134;
  NSObject *v135;
  const __CFNumber *v136;
  NSObject *v137;
  NSObject *v138;
  const char *v139;
  uint32_t v140;
  int v141;
  uint64_t v142;
  id v143;
  const unsigned __int8 *v144;
  CFStringRef v145;
  void *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  const unsigned __int8 *v153;
  __CFString *v154;
  const unsigned __int8 *v155;
  __CFString *v156;
  int v157;
  int v158;
  const unsigned __int8 *v159;
  CFStringRef v160;
  __CFString *v161;
  void *v162;
  id v163;
  id v164;
  const UInt8 *v165;
  unsigned int v166;
  CFDataRef v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  uint64_t v172;
  int v173;
  NSObject *v174;
  uint64_t v175;
  int v176;
  NSObject *v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  int v181;
  uint64_t v182;
  void *v183;
  NSObject *v184;
  NSObject *v185;
  uint64_t v186;
  int v187;
  NSObject *v188;
  void *v189;
  void *v190;
  uint64_t v191;
  id v192;
  id v193;
  const unsigned __int8 *v194;
  const unsigned __int8 *v195;
  const __CFString *v196;
  const unsigned __int8 *v197;
  const unsigned __int8 *v198;
  uint64_t v199;
  __CFString *v200;
  const unsigned __int8 *v201;
  const __CFString *v202;
  BOOL v203;
  __CFArray *v204;
  uint64_t v205;
  uint64_t v206;
  CFNumberRef v207;
  CFNumberRef v208;
  uint64_t v209;
  int v210;
  NSObject *v211;
  int v212;
  BOOL v213;
  const __CFNumber *v214;
  NSObject *v215;
  uint64_t v216;
  uint64_t v217;
  NSObject *v218;
  uint64_t v219;
  __CFString *v220;
  int v221;
  BOOL v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t i;
  uint64_t v227;
  NSObject *v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  int v233;
  NSObject *v234;
  void *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  int v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t Insert;
  uint64_t v247;
  int v248;
  NSObject *v249;
  NSObject *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  NSObject *v257;
  NSObject *v258;
  NSObject *v259;
  NSObject *v260;
  NSObject *v261;
  NSObject *v262;
  uint64_t v263;
  int v264;
  NSObject *v265;
  NSObject *v266;
  const char *v267;
  uint32_t v268;
  NSObject *v269;
  const void *v270;
  int v271;
  NSObject *v272;
  int v273;
  CFIndex v274;
  uint64_t v275;
  const __CFNumber *ValueAtIndex;
  uint64_t v277;
  NSObject *v278;
  NSObject *v280;
  uint64_t v281;
  int v282;
  NSObject *v283;
  _BOOL4 v284;
  __CFString *v285;
  NSObject *v286;
  const char *v287;
  NSObject *v288;
  uint64_t v289;
  NSObject *v290;
  NSObject *v291;
  int v292;
  NSObject *v293;
  NSObject *v294;
  NSObject *v295;
  NSObject *v296;
  uint64_t v297;
  uint64_t v298;
  NSObject *v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  NSObject *v303;
  uint64_t v304;
  int v305;
  NSObject *v306;
  NSObject *v307;
  NSObject *v308;
  NSObject *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  void *v314;
  const __CFString *v315;
  uint64_t v316;
  uint64_t v317;
  int cf;
  CFDataRef cfa;
  int v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  const __CFData *v324;
  char log;
  NSObject *loga;
  __CFString *theArray;
  __CFArray *theArraya;
  CFMutableArrayRef theArrayb;
  CFStringRef theArrayc;
  CFMutableArrayRef theArrayd;
  int v332;
  id v333;
  int v334;
  CFTypeRef v335;
  __CFString *v336;
  uint64_t v337;
  void *context;
  const __CFAllocator *alloc;
  __int128 valuePtr;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  char v344;
  char v345[15];
  char v346;
  char v347[15];
  char v348;
  char v349[15];
  _BYTE buf[22];
  __int16 v351;
  CFMutableArrayRef v352;
  _BYTE v353[12];
  __int16 v354;
  __CFString *v355;
  __int16 v356;
  CFStringRef v357;
  uint8_t v358[4];
  uint64_t v359;
  float v360;
  int v361[3];
  float v362;
  int v363[3];
  float v364;
  int v365[3];
  float v366;
  int v367[3];
  float v368;
  int v369[3];
  float v370;
  int v371;
  uint64_t v372;

  v372 = *MEMORY[0x1E0C80C00];
  v3 = IMLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Starting migration from V21 to V22.", buf, 2u);
  }
  v4 = CSDBSqliteConnectionStatementForSQL();
  if (v4 && *(_QWORD *)(v4 + 8) && CSDBSqliteStatementPerform() == 1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = IMLogHandleForCategory();
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
    if (v5)
    {
      if (v7)
      {
        v8 = sqlite3_errmsg(*(sqlite3 **)(a2 + 8));
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = 1;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = v8;
        v9 = "Failed to delete trigger delete_attachment_files [SQLite result %d reason %s]";
        v10 = v6;
        v11 = 18;
LABEL_11:
        _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, v9, buf, v11);
      }
    }
    else if (v7)
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 1;
      v9 = "Failed to delete trigger delete_attachment_files [SQLite result %d]";
      v10 = v6;
      v11 = 8;
      goto LABEL_11;
    }
  }
  v12 = CSDBSqliteConnectionStatementForSQL();
  if (!v12 || !*(_QWORD *)(v12 + 8) || CSDBSqliteStatementPerform() == 1)
  {
    v13 = IMLogHandleForCategory();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      return 0;
    *(_WORD *)buf = 0;
    v14 = "Whoa, pardner, where is the V21_MIGRATION_GROUP_CHAT_MAP ?!";
LABEL_17:
    _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, v14, buf, 2u);
    return 0;
  }
  v17 = CSDBSqliteConnectionStatementForSQL();
  if (!v17 || !*(_QWORD *)(v17 + 8) || CSDBSqliteStatementPerform() == 1)
  {
    v13 = IMLogHandleForCategory();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      return 0;
    *(_WORD *)buf = 0;
    v14 = "Whoa, pardner, where is the V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP ?!";
    goto LABEL_17;
  }
  v18 = CSDBSqliteConnectionStatementForSQL();
  if (!v18 || (v19 = v18, (v20 = *(sqlite3_stmt **)(v18 + 8)) == 0))
  {
    v15 = 0;
    goto LABEL_589;
  }
  v21 = sqlite3_step(v20);
  if (!v21 || v21 == 101)
  {
    v295 = IMLogHandleForCategory();
    v15 = 1;
    if (os_log_type_enabled(v295, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v295, OS_LOG_TYPE_INFO, "No message rows available to migrate, great success!!", buf, 2u);
    }
    goto LABEL_588;
  }
  if (v21 != 100)
    goto LABEL_587;
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v317 = *MEMORY[0x1E0D36430];
  v312 = *MEMORY[0x1E0D362F8];
  v337 = v19;
  while (1)
  {
    v22 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 30);
    v23 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 0);
    v24 = MEMORY[0x1AF435474]();
    v25 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 0);
    v26 = *(sqlite3_stmt **)(v19 + 8);
    v332 = v23;
    context = (void *)v24;
    if (v22)
    {
      v27 = sqlite3_column_int(v26, 26);
      if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 18))
      {
        v28 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 18);
        v29 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v28, 0x8000100u);
      }
      else
      {
        v29 = 0;
      }
      if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 22))
      {
        v34 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 22);
        v35 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v34, 0x8000100u);
      }
      else
      {
        v35 = 0;
      }
      v36 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(v19 + 8), 17);
      v37 = sqlite3_column_bytes(*(sqlite3_stmt **)(v19 + 8), 17);
      v38 = 0;
      if (v36 && v37)
        v38 = CFDataCreate(alloc, v36, v37);
      v333 = (id)JWDecodeCodableObjectWithStandardAllowlist();
      if (v38)
        CFRelease(v38);
      if (!((unint64_t)v29 | (unint64_t)v35))
      {
        v42 = -1;
        goto LABEL_407;
      }
      v39 = CSDBSqliteConnectionStatementForSQL();
      if (v39)
      {
        v40 = v39;
        if (*(_QWORD *)(v39 + 8))
        {
          if (v35)
            CSDBSqliteBindTextFromCFString();
          CSDBSqliteBindTextFromCFString();
          if (sqlite3_step(*(sqlite3_stmt **)(v40 + 8)) == 100)
          {
            v41 = sqlite3_column_int(*(sqlite3_stmt **)(v40 + 8), 0);
            CSDBSqliteStatementReset();
            if (v41 != -1)
            {
              v42 = v41;
LABEL_407:
              v229 = v25;
              if (v42 == -1)
              {
                v261 = IMLogHandleForCategory();
                v239 = 1;
                if (os_log_type_enabled(v261, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412802;
                  *(_QWORD *)&buf[4] = v29;
                  *(_WORD *)&buf[12] = 2112;
                  *(_QWORD *)&buf[14] = v35;
                  v351 = 1024;
                  LODWORD(v352) = v229;
                  _os_log_impl(&dword_1ABB60000, v261, OS_LOG_TYPE_INFO, "ORPHAN: Unable to find/create a chat for handle[%@] and roomname[%@] for legacy messageID[%d]. Skipping this message.", buf, 0x1Cu);
                  if (!v35)
                  {
LABEL_468:
                    if (v29)
                      CFRelease(v29);

                    objc_autoreleasePoolPop(context);
                    if (!v239)
                      goto LABEL_585;
                    goto LABEL_572;
                  }
LABEL_467:
                  CFRelease(v35);
                  goto LABEL_468;
                }
LABEL_466:
                if (!v35)
                  goto LABEL_468;
                goto LABEL_467;
              }
              v230 = CSDBSqliteConnectionStatementForSQL();
              if (v230 && *(_QWORD *)(v230 + 8))
              {
                CSDBSqliteBindInt();
                v231 = CSDBSqliteStatementPerform();
                CSDBSqliteStatementReset();
                if (v231 != 101)
                {
                  v262 = IMLogHandleForCategory();
                  if (os_log_type_enabled(v262, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)&buf[4] = v25;
                    *(_WORD *)&buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v231;
                    _os_log_error_impl(&dword_1ABB60000, v262, OS_LOG_TYPE_ERROR, "[Database] ERROR: Unable to migrate message row %d with error: %d", buf, 0xEu);
                  }
                  goto LABEL_465;
                }
                theArrayd = (CFMutableArrayRef)CSDBSqliteConnectionRowidOfLastInsert();
                if (theArrayd != (CFMutableArrayRef)-1)
                {
                  v232 = CSDBSqliteConnectionStatementForSQL();
                  if (v232)
                  {
                    if (*(_QWORD *)(v232 + 8))
                    {
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      v233 = CSDBSqliteStatementPerform();
                      CSDBSqliteStatementReset();
                      if (v233 != 101)
                      {
                        v234 = IMLogHandleForCategory();
                        if (os_log_type_enabled(v234, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)buf = 67109376;
                          *(_DWORD *)&buf[4] = v25;
                          *(_WORD *)&buf[8] = 1024;
                          *(_DWORD *)&buf[10] = v233;
                          _os_log_impl(&dword_1ABB60000, v234, OS_LOG_TYPE_INFO, "Unable to update flags row %d with error: %d", buf, 0xEu);
                        }
                      }
                    }
                  }
                  if (sub_1ABBCE1B0())
                  {
                    if (!v29 || v35 && (v27 & 4) != 0)
                    {
LABEL_421:
                      v235 = (void *)objc_msgSend(v333, "string");
                      v236 = objc_msgSend(v333, "length");
                      if (v236)
                      {
                        v237 = v236;
                        v238 = 0;
                        v239 = 1;
                        while (1)
                        {
                          valuePtr = 0uLL;
                          v240 = (void *)objc_msgSend(v333, "attributesAtIndex:longestEffectiveRange:inRange:", v238, &valuePtr, v238, v237 - v238);
                          if (objc_msgSend(v235, "characterAtIndex:", (_QWORD)valuePtr) != 65532)
                            goto LABEL_458;
                          v241 = objc_msgSend(v240, "objectForKey:", v317);
                          if (!v241)
                          {
                            v257 = IMLogHandleForCategory();
                            if (os_log_type_enabled(v257, OS_LOG_TYPE_INFO))
                            {
                              *(_DWORD *)buf = 136315138;
                              *(_QWORD *)&buf[4] = "Boolean __findOrCreateiMessageAttachmentsForLegacyGUID(CSDBSqliteConn"
                                                   "ection *, CFStringRef, int64_t)";
                              _os_log_impl(&dword_1ABB60000, v257, OS_LOG_TYPE_INFO, "Invalid legacy guid provided in %s - this is bad but non-fatal.", buf, 0xCu);
                            }
                            v258 = IMLogHandleForCategory();
                            if (os_log_type_enabled(v258, OS_LOG_TYPE_ERROR))
                              sub_1ABC5C1E4(v358, &v359, v258);
                            goto LABEL_458;
                          }
                          v242 = v241;
                          v243 = CSDBSqliteConnectionStatementForSQL();
                          v244 = v243;
                          if (!v243)
                            break;
                          if (!*(_QWORD *)(v243 + 8))
                            break;
                          CSDBSqliteBindTextFromCFString();
                          if (sqlite3_step(*(sqlite3_stmt **)(v244 + 8)) != 100)
                            break;
                          v245 = sqlite3_column_int(*(sqlite3_stmt **)(v244 + 8), 0);
                          CSDBSqliteStatementReset();
                          if (v245 == -1)
                            goto LABEL_440;
                          Insert = v245;
LABEL_430:
                          if (Insert == -1)
                            goto LABEL_457;
                          v247 = CSDBSqliteConnectionStatementForSQL();
                          if (!v247 || !*(_QWORD *)(v247 + 8))
                            goto LABEL_457;
                          CSDBSqliteBindInt();
                          CSDBSqliteBindInt();
                          v248 = CSDBSqliteStatementPerform();
                          CSDBSqliteStatementReset();
                          v19 = v337;
                          if (v248 == 1)
                          {
                            v249 = IMLogHandleForCategory();
                            if (os_log_type_enabled(v249, OS_LOG_TYPE_INFO))
                            {
                              *(_DWORD *)buf = 134218496;
                              *(_QWORD *)&buf[4] = Insert;
                              *(_WORD *)&buf[12] = 2048;
                              *(_QWORD *)&buf[14] = theArrayd;
                              v351 = 1024;
                              LODWORD(v352) = 1;
                              _os_log_impl(&dword_1ABB60000, v249, OS_LOG_TYPE_INFO, "Unable to bind attachmentID[%lld] to messageID[%lld]: %d", buf, 0x1Cu);
                            }
                            v250 = IMLogHandleForCategory();
                            if (os_log_type_enabled(v250, OS_LOG_TYPE_INFO))
                            {
                              *(_DWORD *)buf = 134218498;
                              *(_QWORD *)&buf[4] = Insert;
                              *(_WORD *)&buf[12] = 2112;
                              *(_QWORD *)&buf[14] = v242;
                              v351 = 2048;
                              v352 = theArrayd;
                              _os_log_impl(&dword_1ABB60000, v250, OS_LOG_TYPE_INFO, "Fatal error binding attachmentID[%lld - %@] to messageID[%lld]", buf, 0x20u);
                            }
                            v239 = 0;
LABEL_457:
                            v19 = v337;
                          }
LABEL_458:
                          v238 = *((_QWORD *)&valuePtr + 1) + valuePtr;
                          if (*((_QWORD *)&valuePtr + 1) + (_QWORD)valuePtr >= v237)
                            goto LABEL_466;
                        }
                        CSDBSqliteStatementReset();
LABEL_440:
                        v251 = CSDBSqliteConnectionStatementForSQL();
                        if (!v251)
                          goto LABEL_453;
                        v252 = v251;
                        if (!*(_QWORD *)(v251 + 8))
                          goto LABEL_453;
                        CSDBSqliteBindTextFromCFString();
                        if (sqlite3_step(*(sqlite3_stmt **)(v252 + 8)) != 100)
                        {
                          CSDBSqliteStatementReset();
LABEL_453:
                          v259 = IMLogHandleForCategory();
                          v19 = v337;
                          if (os_log_type_enabled(v259, OS_LOG_TYPE_INFO))
                          {
                            *(_DWORD *)buf = 138412290;
                            *(_QWORD *)&buf[4] = v242;
                            _os_log_impl(&dword_1ABB60000, v259, OS_LOG_TYPE_INFO, "Unable to find legacy attachment for guid[%@]. Not fatal, but bailing.", buf, 0xCu);
                          }
                          goto LABEL_458;
                        }
                        v253 = sqlite3_column_int(*(sqlite3_stmt **)(v252 + 8), 0);
                        CSDBSqliteStatementReset();
                        if (v253 == -1)
                          goto LABEL_453;
                        v254 = CSDBSqliteConnectionStatementForSQL();
                        if (!v254 || !*(_QWORD *)(v254 + 8))
                          goto LABEL_457;
                        v255 = v253;
                        CSDBSqliteBindInt();
                        v256 = CSDBSqliteStatementPerform();
                        CSDBSqliteStatementReset();
                        if (v256 != 101)
                        {
                          v260 = IMLogHandleForCategory();
                          if (os_log_type_enabled(v260, OS_LOG_TYPE_INFO))
                          {
                            *(_DWORD *)buf = 134218240;
                            *(_QWORD *)&buf[4] = v255;
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = v256;
                            _os_log_impl(&dword_1ABB60000, v260, OS_LOG_TYPE_INFO, "Unable to migrate attachment row %lld with error: %d", buf, 0x12u);
                          }
                          goto LABEL_457;
                        }
                        Insert = CSDBSqliteConnectionRowidOfLastInsert();
                        goto LABEL_430;
                      }
                      v239 = 1;
                      if (!v35)
                        goto LABEL_468;
                      goto LABEL_467;
                    }
                    if (sub_1ABBCE260(a2, 0, v29, CFSTR("iMessage"), 0) != -1)
                    {
                      v263 = CSDBSqliteConnectionStatementForSQL();
                      if (!v263)
                        goto LABEL_421;
                      if (!*(_QWORD *)(v263 + 8))
                        goto LABEL_421;
                      CSDBSqliteBindInt();
                      CSDBSqliteBindInt();
                      v264 = CSDBSqliteStatementPerform();
                      CSDBSqliteStatementReset();
                      if (v264 != 1)
                        goto LABEL_421;
                      v265 = IMLogHandleForCategory();
                      if (!os_log_type_enabled(v265, OS_LOG_TYPE_INFO))
                        goto LABEL_465;
                      *(_DWORD *)buf = 134218240;
                      *(_QWORD *)&buf[4] = theArrayd;
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 1;
                      v266 = v265;
                      v267 = "Unable to update handle id on message row %lld with error: %d";
                      v268 = 18;
                      goto LABEL_553;
                    }
                    v291 = IMLogHandleForCategory();
                    if (os_log_type_enabled(v291, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)buf = 134218240;
                      *(_QWORD *)&buf[4] = -1;
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = theArrayd;
                      v266 = v291;
                      v267 = "Invalid handleID[%lld] or messageID[%lld] passed for binding";
                      v268 = 22;
LABEL_553:
                      _os_log_impl(&dword_1ABB60000, v266, OS_LOG_TYPE_INFO, v267, buf, v268);
                    }
                  }
                }
              }
LABEL_465:
              v239 = 0;
              goto LABEL_466;
            }
          }
          else
          {
            CSDBSqliteStatementReset();
          }
        }
      }
      v43 = CSDBSqliteConnectionStatementForSQL();
      if (v43)
      {
        v44 = v43;
        if (*(_QWORD *)(v43 + 8))
        {
          if (v35)
            CSDBSqliteBindTextFromCFString();
          CSDBSqliteBindTextFromCFString();
          v45 = sqlite3_step(*(sqlite3_stmt **)(v44 + 8));
          if (v45 != 100)
          {
            v53 = v45;
            v54 = IMLogHandleForCategory();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)v353 = 138412802;
              *(_QWORD *)&v353[4] = v29;
              v354 = 2112;
              v355 = v35;
              v356 = 1024;
              LODWORD(v357) = v53;
              _os_log_impl(&dword_1ABB60000, v54, OS_LOG_TYPE_INFO, "ORPHAN: Unable to find a legacy madrid chat record for handle[%@] and roomname[%@] with sqlite status (%d). This usually means that a chat was deleted but the messages it contained weren't. Failing chat creation.", v353, 0x1Cu);
            }
            v42 = -1;
            goto LABEL_405;
          }
          v46 = sqlite3_column_int(*(sqlite3_stmt **)(v44 + 8), 0);
          v47 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(v44 + 8), 10);
          v48 = sqlite3_column_bytes(*(sqlite3_stmt **)(v44 + 8), 10);
          v49 = 0;
          if (v47 && v48)
            v49 = CFDataCreate(alloc, v47, v48);
          v50 = v46;
          v51 = (id)JWDecodeArray();
          if (objc_msgSend(v51, "count"))
          {
            sqlite3_column_int(*(sqlite3_stmt **)(v44 + 8), 1);
            if (sqlite3_column_text(*(sqlite3_stmt **)(v44 + 8), 5))
            {
              v52 = sqlite3_column_text(*(sqlite3_stmt **)(v44 + 8), 5);
              theArray = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v52, 0x8000100u);
            }
            else
            {
              theArray = 0;
            }
            v209 = CSDBSqliteConnectionStatementForSQL();
            if (v209 && *(_QWORD *)(v209 + 8))
            {
              v324 = v49;
              CSDBSqliteBindInt();
              v210 = CSDBSqliteStatementPerform();
              CSDBSqliteStatementReset();
              if (v210 == 1)
              {
                v211 = IMLogHandleForCategory();
                v49 = v324;
                if (os_log_type_enabled(v211, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)v353 = 134218240;
                  *(_QWORD *)&v353[4] = v50;
                  v354 = 1024;
                  LODWORD(v355) = 1;
                  _os_log_impl(&dword_1ABB60000, v211, OS_LOG_TYPE_INFO, "Unable to migrate chat row %lld with error: %d", v353, 0x12u);
                }
              }
              else
              {
                v216 = CSDBSqliteConnectionRowidOfLastInsert();
                v49 = v324;
                if (v216 != -1)
                {
                  v42 = v216;
                  if (-[__CFString hasPrefix:](theArray, "hasPrefix:", CFSTR("chat")))
                  {
                    v217 = CSDBSqliteConnectionStatementForSQL();
                    if (v217)
                    {
                      if (*(_QWORD *)(v217 + 8))
                      {
                        CSDBSqliteBindTextFromCFString();
                        CSDBSqliteBindInt();
                        if (CSDBSqliteStatementPerform() != 101)
                        {
                          v218 = IMLogHandleForCategory();
                          if (os_log_type_enabled(v218, OS_LOG_TYPE_INFO))
                          {
                            *(_DWORD *)v353 = 134217984;
                            *(_QWORD *)&v353[4] = v42;
                            _os_log_impl(&dword_1ABB60000, v218, OS_LOG_TYPE_INFO, "Unable to update chatID[%lld]'s room_name.", v353, 0xCu);
                          }
                        }
                        CSDBSqliteStatementReset();
                        v49 = v324;
                      }
                    }
                  }
                  v219 = CSDBSqliteConnectionStatementForSQL();
                  if (!v219 || !*(_QWORD *)(v219 + 8))
                    goto LABEL_389;
                  v220 = (__CFString *)IMCopyGUIDForChat();
                  CSDBSqliteBindTextFromCFString();
                  CSDBSqliteBindInt();
                  v221 = CSDBSqliteStatementPerform();
                  if (v221 != 101)
                  {
                    loga = IMLogHandleForCategory();
                    if (os_log_type_enabled(loga, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)v353 = 134218242;
                      *(_QWORD *)&v353[4] = v42;
                      v354 = 2112;
                      v355 = v220;
                      _os_log_impl(&dword_1ABB60000, loga, OS_LOG_TYPE_INFO, "Unable to update chatID[%lld] with guid[%@]", v353, 0x16u);
                    }
                  }
                  if (v220)
                    CFRelease(v220);
                  CSDBSqliteStatementReset();
                  v222 = v221 == 101;
                  v49 = v324;
                  if (v222)
                  {
LABEL_389:
                    v342 = 0u;
                    v343 = 0u;
                    valuePtr = 0u;
                    v341 = 0u;
                    v223 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &valuePtr, buf, 16);
                    if (v223)
                    {
                      v224 = v223;
                      v321 = v25;
                      v225 = *(_QWORD *)v341;
                      while (2)
                      {
                        for (i = 0; i != v224; ++i)
                        {
                          if (*(_QWORD *)v341 != v225)
                            objc_enumerationMutation(v51);
                          v227 = sub_1ABBCE260(a2, 0, *(__CFString **)(*((_QWORD *)&valuePtr + 1) + 8 * i), CFSTR("iMessage"), 0);
                          if (!sub_1ABBCE6CC(a2, v227, v42))
                          {
                            v42 = -1;
                            goto LABEL_555;
                          }
                        }
                        v224 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &valuePtr, buf, 16);
                        if (v224)
                          continue;
                        break;
                      }
LABEL_555:
                      v25 = v321;
                      v49 = v324;
                    }
                    goto LABEL_401;
                  }
LABEL_400:
                  v42 = -1;
LABEL_401:

                  if (v49)
                    CFRelease(v49);
                  if (theArray)
                    CFRelease(theArray);
LABEL_405:
                  CSDBSqliteStatementReset();
                  goto LABEL_406;
                }
              }
            }
            v228 = IMLogHandleForCategory();
            if (os_log_type_enabled(v228, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v353 = 138412546;
              *(_QWORD *)&v353[4] = v29;
              v354 = 2112;
              v355 = v35;
              _os_log_error_impl(&dword_1ABB60000, v228, OS_LOG_TYPE_ERROR, "[Database] ERROR: Could not create chat from handle[%@] and roomname[%@].", v353, 0x16u);
            }
            goto LABEL_400;
          }
          v135 = IMLogHandleForCategory();
          if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v353 = 134218498;
            *(_QWORD *)&v353[4] = v50;
            v354 = 2112;
            v355 = v29;
            v356 = 2112;
            v357 = v35;
            _os_log_error_impl(&dword_1ABB60000, v135, OS_LOG_TYPE_ERROR, "[DATABASE] There don't appear to be any participants in this chat, so it will NOT be migrated. RowID: %lld Handle %@ Roomname %@", v353, 0x20u);
          }
          CSDBSqliteStatementReset();
          if (v49)
            CFRelease(v49);

        }
      }
      v42 = -1;
LABEL_406:
      v19 = v337;
      goto LABEL_407;
    }
    v320 = v25;
    log = sqlite3_column_int(v26, 4);
    sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 10);
    sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 0);
    sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 7);
    if (sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 8) < 1)
      break;
    v30 = CSDBSqliteConnectionStatementForSQL();
    if (!v30)
      break;
    v31 = v30;
    if (!*(_QWORD *)(v30 + 8))
      break;
    CSDBSqliteBindInt();
    CSDBSqliteBindInt();
    CSDBSqliteBindInt();
    v32 = sqlite3_step(*(sqlite3_stmt **)(v31 + 8));
    if (v32 != 100)
    {
      v55 = v32;
      v56 = IMLogHandleForCategory();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v55;
        _os_log_error_impl(&dword_1ABB60000, v56, OS_LOG_TYPE_ERROR, "[Database] ****** Result from select query: %d", buf, 8u);
      }
      CSDBSqliteStatementReset();
      break;
    }
    v33 = sqlite3_column_int(*(sqlite3_stmt **)(v31 + 8), 0);
    CSDBSqliteStatementReset();
    if (v33 <= 0)
      break;
LABEL_571:
    objc_autoreleasePoolPop(context);
LABEL_572:
    v294 = IMLogHandleForCategory();
    if (os_log_type_enabled(v294, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v332;
      _os_log_impl(&dword_1ABB60000, v294, OS_LOG_TYPE_INFO, "Successful migration for legacy message [%d]", buf, 8u);
    }
    if (sqlite3_step(*(sqlite3_stmt **)(v19 + 8)) != 100)
    {
      v15 = 1;
      goto LABEL_588;
    }
  }
  v57 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 7);
  v58 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 8);
  v59 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 0);
  if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 1))
  {
    v60 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 1);
    v61 = CFStringCreateWithCString(alloc, (const char *)v60, 0x8000100u);
  }
  else
  {
    v61 = 0;
  }
  if ((int)v57 < 1)
  {
    v63 = IMLogHandleForCategory();
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      sub_1ABC5C1BC(&v348, v349);
    if ((_DWORD)v57 == -1)
    {
      Mutable = 0;
      goto LABEL_173;
    }
    cf = v58;
    v313 = v59;
    v62 = (int)v57;
  }
  else
  {
    cf = v58;
    v313 = v59;
    v62 = v57;
  }
  v322 = v62;
  Mutable = CFArrayCreateMutable(alloc, 0, MEMORY[0x1E0C9B378]);
  v65 = CSDBSqliteConnectionStatementForSQL();
  if (v65)
  {
    v66 = v65;
    if (*(_QWORD *)(v65 + 8))
    {
      CSDBSqliteBindInt();
      if (sqlite3_step(*(sqlite3_stmt **)(v66 + 8)) == 100)
      {
        v67 = sqlite3_column_int(*(sqlite3_stmt **)(v66 + 8), 0);
        CSDBSqliteStatementReset();
        if (v67 != -1)
        {
          *(_QWORD *)&valuePtr = v67;
          v68 = CFNumberCreate(alloc, kCFNumberLongLongType, &valuePtr);
          if (!v68)
            goto LABEL_159;
          v69 = v68;
          CFArrayAppendValue(Mutable, v68);
          CFRelease(v69);
          if (!Mutable)
            goto LABEL_173;
          goto LABEL_160;
        }
      }
      else
      {
        CSDBSqliteStatementReset();
      }
    }
  }
  v70 = IMLogHandleForCategory();
  if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v322;
    _os_log_impl(&dword_1ABB60000, v70, OS_LOG_TYPE_INFO, "Got an invalid rowid looking for a handle mapped to group id: %lld", buf, 0xCu);
  }
  *(_QWORD *)&valuePtr = -1;
  v71 = CSDBSqliteConnectionStatementForSQL();
  theArraya = Mutable;
  if (v71 && *(_QWORD *)(v71 + 8))
  {
    CSDBSqliteBindInt();
    *(_DWORD *)buf = 0;
    v334 = CSDBSqliteStatementIntegerResult();
    CSDBSqliteStatementReset();
  }
  else
  {
    v334 = -1;
  }
  v72 = CSDBSqliteConnectionStatementForSQL();
  if (!v72)
    goto LABEL_158;
  v73 = v72;
  if (!*(_QWORD *)(v72 + 8))
    goto LABEL_158;
  CSDBSqliteBindInt();
  if (sqlite3_step(*(sqlite3_stmt **)(v73 + 8)) != 100)
  {
LABEL_157:
    CSDBSqliteStatementReset();
LABEL_158:
    Mutable = theArraya;
LABEL_159:
    if (!Mutable)
      goto LABEL_173;
LABEL_160:
    if (!CFArrayGetCount(Mutable))
    {
      v115 = 0;
      goto LABEL_174;
    }
    if (v61)
      CFRelease(v61);
    v108 = Mutable;
    Count = CFArrayGetCount(Mutable);
    v110 = Count > 1 && cf > 0;
    v111 = CSDBSqliteConnectionStatementForSQL();
    if (v111)
    {
      v112 = v111;
      if (*(_QWORD *)(v111 + 8))
      {
        CSDBSqliteBindInt();
        CSDBSqliteBindInt();
        if (sqlite3_step(*(sqlite3_stmt **)(v112 + 8)) == 100)
        {
          v113 = sqlite3_column_int(*(sqlite3_stmt **)(v112 + 8), 0);
          CSDBSqliteStatementReset();
          if (v113 != -1)
          {
            v114 = v113;
            goto LABEL_213;
          }
        }
        else
        {
          CSDBSqliteStatementReset();
        }
      }
    }
    v117 = IMLogHandleForCategory();
    if (os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v322;
      _os_log_impl(&dword_1ABB60000, v117, OS_LOG_TYPE_INFO, "Got an invalid rowid looking for a chat mapped to group id: %lld", buf, 0xCu);
    }
    v118 = CSDBSqliteConnectionStatementForSQL();
    if (v118)
    {
      v119 = v118;
      if (*(_QWORD *)(v118 + 8))
      {
        CSDBSqliteBindInt();
        CSDBSqliteBindTextFromCFString();
        while (1)
        {
          while (1)
          {
            if (sqlite3_step(*(sqlite3_stmt **)(v119 + 8)) != 100)
            {
              CSDBSqliteStatementReset();
              goto LABEL_207;
            }
            v120 = sqlite3_column_int(*(sqlite3_stmt **)(v119 + 8), 0);
            v121 = CSDBSqliteConnectionStatementForSQL();
            if (v121)
            {
              v122 = v121;
              if (*(_QWORD *)(v121 + 8))
                break;
            }
          }
          CSDBSqliteBindInt();
          v123 = CFArrayCreateMutable(alloc, 0, MEMORY[0x1E0C9B378]);
          while (sqlite3_step(*(sqlite3_stmt **)(v122 + 8)) == 100)
          {
            *(_DWORD *)buf = 0;
            *(_DWORD *)buf = sqlite3_column_int(*(sqlite3_stmt **)(v122 + 8), 0);
            v124 = CFNumberCreate(alloc, kCFNumberIntType, buf);
            CFArrayAppendValue(v123, v124);
            if (v124)
              CFRelease(v124);
          }
          v125 = (void *)objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v108);
          if (objc_msgSend(v125, "isEqualToSet:", objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v123)))break;
          if (v123)
            CFRelease(v123);
          CSDBSqliteStatementReset();
        }
        if (v123)
          CFRelease(v123);
        CSDBSqliteStatementReset();
        if (v120 != -1)
        {
          v114 = v120;
          sub_1ABBCEB88(a2, v322, v120, v110);
LABEL_213:
          v61 = (CFStringRef)v108;
LABEL_214:
          v19 = v337;
          goto LABEL_215;
        }
      }
    }
LABEL_207:
    v126 = CSDBSqliteConnectionStatementForSQL();
    if (!v126 || !*(_QWORD *)(v126 + 8))
    {
      v114 = -1;
      goto LABEL_213;
    }
    if (Count > 1)
    {
      v127 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "generatedRoomNameForGroupChat");
      v128 = v127;
      if (v127)
      {
        CFRetain(v127);
        v129 = v128;
        goto LABEL_487;
      }
LABEL_371:
      v129 = 0;
LABEL_487:
      v270 = (const void *)IMCopyGUIDForChat();
      CSDBSqliteBindTextFromCFString();
      if (v270)
        CFRelease(v270);
      CSDBSqliteBindInt();
      CSDBSqliteBindInt();
      if (v129)
      {
        CSDBSqliteBindTextFromCFString();
        CFRelease(v129);
      }
      else
      {
        CSDBSqliteBindNull();
      }
      v61 = (CFStringRef)v108;
      CSDBSqliteBindTextFromCFString();
      if (v128)
        CSDBSqliteBindTextFromCFString();
      else
        CSDBSqliteBindNull();
      v271 = CSDBSqliteStatementPerform();
      CSDBSqliteStatementReset();
      if (v271 == 1)
      {
        v272 = IMLogHandleForCategory();
        v19 = v337;
        if (os_log_type_enabled(v272, OS_LOG_TYPE_ERROR))
          sub_1ABC5C188(&v370, &v371);
        v114 = -1;
      }
      else
      {
        v114 = CSDBSqliteConnectionRowidOfLastInsert();
        sub_1ABBCEB88(a2, v322, v114, v110);
        v273 = CFArrayGetCount(v108);
        if (v273 < 1)
          goto LABEL_214;
        v274 = 0;
        if (v273 <= 1uLL)
          v275 = 1;
        else
          v275 = v273;
        v19 = v337;
        do
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v61, v274);
          if (ValueAtIndex)
          {
            *(_QWORD *)buf = -1;
            CFNumberGetValue(ValueAtIndex, kCFNumberLongLongType, buf);
            sub_1ABBCE6CC(a2, *(uint64_t *)buf, v114);
          }
          ++v274;
        }
        while (v275 != v274);
      }
LABEL_215:
      CFRelease(v61);
      goto LABEL_216;
    }
    v136 = (const __CFNumber *)CFArrayGetValueAtIndex(v108, 0);
    if (!v136)
    {
      v215 = IMLogHandleForCategory();
      if (os_log_type_enabled(v215, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v313;
        _os_log_error_impl(&dword_1ABB60000, v215, OS_LOG_TYPE_ERROR, "[Database] ERROR: Got a NULL handleID for messageID[%d] to create chat. Something is wrong.", buf, 8u);
      }
      v128 = 0;
      goto LABEL_371;
    }
    *(_QWORD *)&valuePtr = -1;
    CFNumberGetValue(v136, kCFNumberLongLongType, &valuePtr);
    if ((_QWORD)valuePtr == -1)
    {
      v269 = IMLogHandleForCategory();
      if (os_log_type_enabled(v269, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v313;
        v138 = v269;
        v139 = "[Database] ERROR: Was slinging around an invalid handleID for messageID[%d] to create chat. Something is wrong.";
        v140 = 8;
LABEL_577:
        _os_log_error_impl(&dword_1ABB60000, v138, OS_LOG_TYPE_ERROR, v139, buf, v140);
      }
LABEL_485:
      v129 = 0;
    }
    else
    {
      v129 = sub_1ABBCED04();
      if (!v129)
      {
        v137 = IMLogHandleForCategory();
        if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = valuePtr;
          v138 = v137;
          v139 = "[Database] ERROR: Got a NULL identifier for handleID[%lld]. Something is seriously wrong.";
          v140 = 12;
          goto LABEL_577;
        }
        goto LABEL_485;
      }
    }
    v128 = 0;
    goto LABEL_487;
  }
  v315 = v61;
  while (1)
  {
    if (sqlite3_column_text(*(sqlite3_stmt **)(v73 + 8), 3))
    {
      v74 = sqlite3_column_text(*(sqlite3_stmt **)(v73 + 8), 3);
      v75 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v74, 0x8000100u);
    }
    else
    {
      v75 = 0;
    }
    if (sqlite3_column_text(*(sqlite3_stmt **)(v73 + 8), 2))
    {
      v76 = sqlite3_column_text(*(sqlite3_stmt **)(v73 + 8), 2);
      v77 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v76, 0x8000100u);
    }
    else
    {
      v77 = 0;
    }
    v78 = sub_1ABBCE930(v77);
    v79 = -[__CFString _appearsToBePhoneNumber](v78, "_appearsToBePhoneNumber");
    v80 = -[__CFString length](v78, "length");
    HasPrefix = CFStringHasPrefix(v78, CFSTR("+"));
    if (v334 == 1 && v79 && !HasPrefix && v80 >= 7)
    {
      v82 = CFArrayCreateMutable(alloc, 0, MEMORY[0x1E0C9B378]);
      v83 = CSDBSqliteConnectionStatementForSQL();
      if (v83)
      {
        v84 = v83;
        if (*(_QWORD *)(v83 + 8))
        {
          CSDBSqliteBindInt();
          while (sqlite3_step(*(sqlite3_stmt **)(v84 + 8)) == 100)
          {
            v85 = sqlite3_column_text(*(sqlite3_stmt **)(v84 + 8), 0);
            if (v85)
            {
              v86 = CFStringCreateWithCString(alloc, (const char *)v85, 0x8000100u);
              if (v86)
              {
                v87 = v86;
                CFArrayAppendValue(v82, v86);
                CFRelease(v87);
              }
            }
          }
          CSDBSqliteStatementReset();
        }
      }
      if (v82)
      {
        v88 = v57;
        if ((int)CFArrayGetCount(v82) >= 1)
        {
          for (j = 0; j < (int)CFArrayGetCount(v82); ++j)
          {
            v90 = (__CFString *)CFArrayGetValueAtIndex(v82, j);
            if (v90)
            {
              v91 = v90;
              if (v78)
                CFRelease(v78);
              v78 = sub_1ABBCE930(v91);
              v92 = -[__CFString _appearsToBePhoneNumber](v78, "_appearsToBePhoneNumber");
              v93 = CFStringHasPrefix(v78, CFSTR("+"));
              if (!v92 || v93)
                break;
              v94 = IMLogHandleForCategory();
              if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = v91;
                v95 = v94;
                v96 = "Ugh, the address '%@' wouldn't canonicalize.";
LABEL_133:
                _os_log_impl(&dword_1ABB60000, v95, OS_LOG_TYPE_INFO, v96, buf, 0xCu);
              }
            }
            else
            {
              v97 = IMLogHandleForCategory();
              if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = 0;
                v95 = v97;
                v96 = "MsgAddress '%@' was null, we won't even try to canonicalize it.";
                goto LABEL_133;
              }
            }
          }
        }
        CFRelease(v82);
        v57 = v88;
        v61 = v315;
      }
    }
    *(_QWORD *)v353 = 0;
    *(_QWORD *)v353 = sub_1ABBCE260(a2, v77, v78, CFSTR("SMS"), v75);
    if (*(_QWORD *)v353 == -1)
      break;
    v98 = CFNumberCreate(alloc, kCFNumberLongLongType, v353);
    if (v98)
    {
      v99 = v98;
      CFArrayAppendValue(theArraya, v98);
      CFRelease(v99);
      if (v334 == 1)
      {
        v100 = *(_QWORD *)v353;
        if (*(_QWORD *)v353 == -1)
        {
          v107 = IMLogHandleForCategory();
          if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = -1;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v322;
            v104 = v107;
            v105 = "[Database] ERROR: You tried to join handle [%lld] to group [%lld] with an invalid row id.";
            v106 = 22;
LABEL_155:
            _os_log_error_impl(&dword_1ABB60000, v104, OS_LOG_TYPE_ERROR, v105, buf, v106);
            if (!v75)
              goto LABEL_148;
LABEL_147:
            CFRelease(v75);
            goto LABEL_148;
          }
        }
        else
        {
          v101 = CSDBSqliteConnectionStatementForSQL();
          if (v101)
          {
            if (*(_QWORD *)(v101 + 8))
            {
              CSDBSqliteBindInt();
              CSDBSqliteBindInt();
              v102 = CSDBSqliteStatementPerform();
              CSDBSqliteStatementReset();
              if (v102 == 1)
              {
                v103 = IMLogHandleForCategory();
                if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218496;
                  *(_QWORD *)&buf[4] = v100;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v322;
                  v351 = 1024;
                  LODWORD(v352) = 1;
                  v104 = v103;
                  v105 = "[Database] ERROR: Failed to asscociate handle [%lld] to group [%lld] with sqlite result: %d.";
                  v106 = 28;
                  goto LABEL_155;
                }
              }
            }
          }
        }
      }
    }
    if (v75)
      goto LABEL_147;
LABEL_148:
    if (v77)
      CFRelease(v77);
    if (v78)
      CFRelease(v78);
    v19 = v337;
    if (sqlite3_step(*(sqlite3_stmt **)(v73 + 8)) != 100)
      goto LABEL_157;
  }
  if (v75)
    CFRelease(v75);
  if (v77)
    CFRelease(v77);
  if (theArraya)
    CFRelease(theArraya);
  v19 = v337;
  if (v78)
    CFRelease(v78);
  Mutable = 0;
LABEL_173:
  v115 = 1;
LABEL_174:
  v116 = IMLogHandleForCategory();
  if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v57;
    _os_log_impl(&dword_1ABB60000, v116, OS_LOG_TYPE_INFO, "ORPHAN: Unable to find handles for groupID[%d]. This means we have message rows without a matching group. Failing the chat lookup.", buf, 8u);
  }
  if ((v115 & 1) == 0)
    CFRelease(Mutable);
  v114 = -1;
  if (v61)
    goto LABEL_215;
LABEL_216:
  if (log < 0)
  {
    if (v114 != -1)
      sub_1ABBCE9B4(a2, v19, v114);
    goto LABEL_571;
  }
  if (v114 == -1)
  {
    v134 = IMLogHandleForCategory();
    if (os_log_type_enabled(v134, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v320;
      _os_log_impl(&dword_1ABB60000, v134, OS_LOG_TYPE_INFO, "ORPHAN: Could not find an appropriate chat to use for messageID[%d]. Skipping this message.", buf, 8u);
    }
    goto LABEL_571;
  }
  v130 = CSDBSqliteConnectionStatementForSQL();
  if (!v130 || !*(_QWORD *)(v130 + 8))
  {
    v133 = IMLogHandleForCategory();
    if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
      sub_1ABC5BF54(&v360, v361);
    goto LABEL_571;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
  if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 3))
  {
    v131 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 3);
    v132 = CFStringCreateWithCString(alloc, (const char *)v131, 0x8000100u);
  }
  else
  {
    v132 = 0;
  }
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  v141 = CSDBSqliteStatementPerform();
  CSDBSqliteStatementReset();
  if (v141 != 1)
  {
    v142 = CSDBSqliteConnectionRowidOfLastInsert();
    if (v132)
      CFRelease(v132);
    sub_1ABBCE1B0();
    v143 = objc_alloc_init(MEMORY[0x1E0CB3778]);
    if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 3))
    {
      v144 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 3);
      v145 = CFStringCreateWithCString(alloc, (const char *)v144, 0x8000100u);
    }
    else
    {
      v145 = 0;
    }
    v323 = v142;
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", (double)sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 2)), "timeIntervalSinceReferenceDate");
    if (v145)
    {
      v146 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v145);
      objc_msgSend(v143, "appendAttributedString:", v146);

      CFRelease(v145);
    }
    v335 = (CFTypeRef)sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 0);
    v147 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 7);
    v148 = CSDBSqliteConnectionStatementForSQL();
    if (!v148)
      goto LABEL_325;
    v149 = v148;
    if (!*(_QWORD *)(v148 + 8))
      goto LABEL_325;
    CSDBSqliteBindInt();
    if (sqlite3_step(*(sqlite3_stmt **)(v149 + 8)) == 100)
    {
      if (v147 <= 0)
        v150 = --(char)v147;
      else
        v150 = v147;
      v311 = v150;
      if ((int)v335 <= 0)
        v151 = -(-(int)v335 & 0xF);
      else
        v151 = v335 & 0xF;
      v310 = v151;
      v314 = v143;
      while (1)
      {
        v152 = sqlite3_column_int(*(sqlite3_stmt **)(v149 + 8), 3);
        if (sqlite3_column_text(*(sqlite3_stmt **)(v149 + 8), 5))
        {
          v153 = sqlite3_column_text(*(sqlite3_stmt **)(v149 + 8), 5);
          v154 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v153, 0x8000100u);
        }
        else
        {
          v154 = 0;
        }
        if (sqlite3_column_text(*(sqlite3_stmt **)(v149 + 8), 10))
        {
          v155 = sqlite3_column_text(*(sqlite3_stmt **)(v149 + 8), 10);
          v156 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v155, 0x8000100u);
        }
        else
        {
          v156 = 0;
        }
        if (v154)
          break;
LABEL_267:
        v19 = v337;
        if (v156)
          goto LABEL_268;
LABEL_269:
        if (sqlite3_step(*(sqlite3_stmt **)(v149 + 8)) != 100)
          goto LABEL_324;
      }
      v157 = CFEqual(v154, CFSTR("application/smil"));
      v158 = CFEqual(v154, CFSTR("text/plain"));
      if (v157)
      {
LABEL_266:
        CFRelease(v154);
        goto LABEL_267;
      }
      if (v158)
      {
        if (sqlite3_column_text(*(sqlite3_stmt **)(v149 + 8), 2))
        {
          v159 = sqlite3_column_text(*(sqlite3_stmt **)(v149 + 8), 2);
          v160 = CFStringCreateWithCString(alloc, (const char *)v159, 0x8000100u);
          if (v160)
          {
            v161 = (__CFString *)v160;
            v162 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v160);
            objc_msgSend(v143, "appendAttributedString:", v162);

            CFRelease(v154);
            if (v156)
              CFRelease(v156);
            v156 = v161;
            v19 = v337;
LABEL_268:
            CFRelease(v156);
            goto LABEL_269;
          }
        }
        goto LABEL_266;
      }
      if (v156)
      {
        v163 = (id)-[__CFString pathExtension](v156, "pathExtension");
        if (v163)
        {
          v164 = v163;
          if (objc_msgSend(v163, "length"))
          {
LABEL_284:
            objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A38], "defaultHFSFileManager"), "UTITypeOfPathExtension:", v164);
            v165 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(v149 + 8), 2);
            v166 = sqlite3_column_bytes(*(sqlite3_stmt **)(v149 + 8), 2);
            v167 = 0;
            if (v165 && v166)
              v167 = CFDataCreate(alloc, v165, v166);
            cfa = v167;
            v168 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("/var/mobile/Library/SMS/Parts/"));
            v169 = (void *)objc_msgSend(v168, "stringByAppendingPathComponent:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%02x"), v311));
            v170 = (void *)objc_msgSend(v169, "stringByAppendingPathComponent:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%02d"), v310));
            v171 = (void *)objc_msgSend(v170, "stringByAppendingPathComponent:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d-%d"), v335, v152));
            if (v164)
              objc_msgSend(v171, "stringByAppendingPathExtension:", v164);
            theArrayb = (CFMutableArrayRef)objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
            v172 = CSDBSqliteConnectionStatementForSQL();
            if (!v172 || !*(_QWORD *)(v172 + 8))
              goto LABEL_320;
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindInt();
            v173 = CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
            if (v173 == 1)
            {
              v174 = IMLogHandleForCategory();
              if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
                sub_1ABC5C0C4(&v368, v369);
LABEL_320:
              v189 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", theArrayb, v317, 0);
              v190 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:attributes:", v312, v189);
              v143 = v314;
              objc_msgSend(v314, "appendAttributedString:", v190);

              if (v164)
                CFRelease(v164);
              if (cfa)
                CFRelease(cfa);
              goto LABEL_266;
            }
            CSDBSqliteConnectionRowidOfLastInsert();
            v175 = CSDBSqliteConnectionStatementForSQL();
            if (v175)
            {
              if (*(_QWORD *)(v175 + 8))
              {
                CSDBSqliteBindInt();
                CSDBSqliteBindInt();
                v176 = CSDBSqliteStatementPerform();
                CSDBSqliteStatementReset();
                if (v176 == 1)
                {
                  v177 = IMLogHandleForCategory();
                  if (os_log_type_enabled(v177, OS_LOG_TYPE_ERROR))
                    sub_1ABC5C154(&v366, v367);
                }
              }
            }
            if (!cfa)
            {
LABEL_315:
              v186 = CSDBSqliteConnectionStatementForSQL();
              if (v186)
              {
                if (*(_QWORD *)(v186 + 8))
                {
                  CSDBSqliteBindTextFromCFString();
                  CSDBSqliteBindTextFromCFString();
                  v187 = CSDBSqliteStatementPerform();
                  CSDBSqliteStatementReset();
                  if (v187 == 1)
                  {
                    v188 = IMLogHandleForCategory();
                    if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
                      sub_1ABC5C0F8(&v364, v365);
                  }
                }
              }
              goto LABEL_320;
            }
            if (v156)
            {
              v178 = -[__CFString lastPathComponent](v156, "lastPathComponent");
            }
            else
            {
              v316 = (uint64_t)theArrayb;
              if (!v164)
              {
LABEL_306:
                v179 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%02x"), -[__CFArray hash](theArrayb, "hash"));
                v180 = (void *)MEMORY[0x1E0CB3940];
                v181 = -[__CFArray hash](theArrayb, "hash");
                if (v181 <= 0)
                  v182 = -(-v181 & 0xF);
                else
                  v182 = v181 & 0xF;
                v183 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(CFSTR("/var/mobile/Library/SMS/Attachments"), "stringByAppendingPathComponent:", v179), "stringByAppendingPathComponent:", objc_msgSend(v180, "stringWithFormat:", CFSTR("%02d"), v182)), "stringByAppendingPathComponent:", v316);
                *(_QWORD *)&valuePtr = 0;
                if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", objc_msgSend(v183, "stringByDeletingLastPathComponent"), 1, 0, &valuePtr) & 1) == 0)
                {
                  v184 = IMLogHandleForCategory();
                  if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
                  {
                    v191 = objc_msgSend(v183, "stringByDeletingLastPathComponent");
                    *(_DWORD *)buf = 138412546;
                    *(_QWORD *)&buf[4] = v191;
                    *(_WORD *)&buf[12] = 2112;
                    *(_QWORD *)&buf[14] = valuePtr;
                    _os_log_error_impl(&dword_1ABB60000, v184, OS_LOG_TYPE_ERROR, "[Database] ERROR: Failed to create directory [%@]: %@", buf, 0x16u);
                  }
                }
                if ((-[__CFData writeToFile:atomically:](cfa, "writeToFile:atomically:", v183, 1) & 1) == 0)
                {
                  v185 = IMLogHandleForCategory();
                  if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
                    sub_1ABC5C12C(&v346, v347);
                }
                goto LABEL_315;
              }
              v178 = -[__CFArray stringByAppendingPathExtension:](theArrayb, "stringByAppendingPathExtension:", v164);
            }
            v316 = v178;
            goto LABEL_306;
          }
          CFRelease(v164);
        }
      }
      else if (!-[__CFString length](v154, "length"))
      {
        v164 = 0;
        goto LABEL_284;
      }
      v164 = (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A38], "defaultHFSFileManager"), "pathExtensionForMIMEType:", v154);
      goto LABEL_284;
    }
LABEL_324:
    CSDBSqliteStatementReset();
LABEL_325:
    if (objc_msgSend(v143, "length"))
      v192 = (id)objc_msgSend(v143, "__im_attributedStringByAssigningMessagePartNumbers");
    else
      v192 = 0;

    v193 = v192;
    JWEncodeCodableObject();
    if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 1))
    {
      v194 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 1);
      v336 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v194, 0x8000100u);
    }
    else
    {
      v336 = 0;
    }
    if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 3))
    {
      v195 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 3);
      v196 = CFStringCreateWithCString(alloc, (const char *)v195, 0x8000100u);
    }
    else
    {
      v196 = 0;
    }
    if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 6))
    {
      v197 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 6);
      theArrayc = CFStringCreateWithCString(alloc, (const char *)v197, 0x8000100u);
    }
    else
    {
      theArrayc = 0;
    }
    if (sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 13))
    {
      v198 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 13);
      v199 = v19;
      v200 = (__CFString *)CFStringCreateWithCString(alloc, (const char *)v198, 0x8000100u);
    }
    else
    {
      v199 = v19;
      v200 = 0;
    }
    if (sqlite3_column_text(*(sqlite3_stmt **)(v199 + 8), 12))
    {
      v201 = sqlite3_column_text(*(sqlite3_stmt **)(v199 + 8), 12);
      v202 = CFStringCreateWithCString(alloc, (const char *)v201, 0x8000100u);
    }
    else
    {
      v202 = 0;
    }
    v203 = (!v196 || !CFStringGetLength(v196))
        && (!v202 || !CFStringGetLength(v202))
        && objc_msgSend(v193, "length") == 0;
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", (double)sqlite3_column_int(*(sqlite3_stmt **)(v337 + 8), 2)), "timeIntervalSinceReferenceDate");
    *(_QWORD *)&valuePtr = -1;
    v204 = CFArrayCreateMutable(alloc, 0, MEMORY[0x1E0C9B378]);
    v205 = CSDBSqliteConnectionStatementForSQL();
    if (v205 && (v206 = v205, *(_QWORD *)(v205 + 8)))
    {
      CSDBSqliteBindInt();
      while (1)
      {
        if (sqlite3_step(*(sqlite3_stmt **)(v206 + 8)) != 100)
        {
          CSDBSqliteStatementReset();
          goto LABEL_363;
        }
        *(_DWORD *)buf = 0;
        *(_DWORD *)buf = sqlite3_column_int(*(sqlite3_stmt **)(v206 + 8), 0);
        if (*(_DWORD *)buf == -1)
          break;
        v207 = CFNumberCreate(alloc, kCFNumberIntType, buf);
        if (v207)
        {
          v208 = v207;
          CFArrayAppendValue(v204, v207);
          CFRelease(v208);
        }
      }
      if (v204)
        CFRelease(v204);
    }
    else
    {
LABEL_363:
      if (v204)
      {
        v212 = CFArrayGetCount(v204);
        v213 = v212 == 1;
        if (v212 == 1)
        {
          v214 = (const __CFNumber *)CFArrayGetValueAtIndex(v204, 0);
          if (v214)
            CFNumberGetValue(v214, kCFNumberLongLongType, &valuePtr);
        }
        CFRelease(v204);
LABEL_511:
        v277 = valuePtr;
        if ((_QWORD)valuePtr == -1)
        {
          v277 = sub_1ABBCE260(a2, v336, 0, CFSTR("SMS"), v200);
          *(_QWORD *)&valuePtr = v277;
        }
        if (v203)
        {
          v278 = IMLogHandleForCategory();
          if (os_log_type_enabled(v278, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1ABB60000, v278, OS_LOG_TYPE_INFO, "This message is empty, and we should NOT keep it.", buf, 2u);
          }
          if ((_QWORD)valuePtr != -1)
          {
LABEL_524:
            v281 = CSDBSqliteConnectionStatementForSQL();
            if (!v281 || !*(_QWORD *)(v281 + 8))
            {
              v288 = IMLogHandleForCategory();
              v285 = v336;
              if (os_log_type_enabled(v288, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1ABB60000, v288, OS_LOG_TYPE_INFO, "Unable to delete message.", buf, 2u);
              }
              goto LABEL_539;
            }
            CSDBSqliteBindInt();
            v282 = CSDBSqliteStatementPerform();
            v283 = IMLogHandleForCategory();
            v284 = os_log_type_enabled(v283, OS_LOG_TYPE_INFO);
            v285 = v336;
            if (v282 == 1)
            {
              if (v284)
              {
                *(_DWORD *)buf = 134218240;
                *(_QWORD *)&buf[4] = v323;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1;
                v286 = v283;
                v287 = "Problems deleting message [%lld], SQLite error: %d";
LABEL_537:
                _os_log_impl(&dword_1ABB60000, v286, OS_LOG_TYPE_INFO, v287, buf, 0x12u);
              }
            }
            else if (v284)
            {
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)&buf[4] = v323;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v320;
              v286 = v283;
              v287 = "Message [%lld] Legacy [%d] was problematic, thus we skip it.";
              goto LABEL_537;
            }
            CSDBSqliteStatementReset();
LABEL_539:
            sub_1ABBCE9B4(a2, v337, v114);
            v290 = IMLogHandleForCategory();
            if (os_log_type_enabled(v290, OS_LOG_TYPE_ERROR))
              sub_1ABC5C068(&v344, v345);
            if (theArrayc)
              CFRelease(theArrayc);
            if (v200)
              CFRelease(v200);
            if (v202)
              CFRelease(v202);
            v19 = v337;
            if (v285)
              CFRelease(v285);
            if (v196)
              CFRelease(v196);
            goto LABEL_571;
          }
        }
        else if (v277 != -1 || !v213)
        {
          v289 = CSDBSqliteConnectionStatementForSQL();
          if (v289 && *(_QWORD *)(v289 + 8))
          {
            CSDBSqliteBindBlobFromCFData();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindInt();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindInt();
            if ((_QWORD)valuePtr == -1)
              CSDBSqliteBindNull();
            else
              CSDBSqliteBindInt();
            CSDBSqliteBindInt();
            v292 = CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
            if (v292 == 1)
            {
              v293 = IMLogHandleForCategory();
              if (os_log_type_enabled(v293, OS_LOG_TYPE_ERROR))
                sub_1ABC5C090(&v362, v363);
            }
          }
          if (v336)
            CFRelease(v336);
          if (v202)
            CFRelease(v202);
          if (v196)
            CFRelease(v196);
          if (theArrayc)
            CFRelease(theArrayc);
          if (v200)
            CFRelease(v200);
          v19 = v337;
          goto LABEL_571;
        }
        v280 = IMLogHandleForCategory();
        if (os_log_type_enabled(v280, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v280, OS_LOG_TYPE_INFO, "This message lacks a handle, and we should NOT keep it.", buf, 2u);
        }
        goto LABEL_524;
      }
    }
    v213 = 0;
    goto LABEL_511;
  }
  v296 = IMLogHandleForCategory();
  if (os_log_type_enabled(v296, OS_LOG_TYPE_ERROR))
  {
    sub_1ABC5BFF4(v296, v297, v298);
    if (v132)
LABEL_583:
      CFRelease(v132);
  }
  else if (v132)
  {
    goto LABEL_583;
  }
  objc_autoreleasePoolPop(context);
LABEL_585:
  v299 = IMLogHandleForCategory();
  if (os_log_type_enabled(v299, OS_LOG_TYPE_ERROR))
    sub_1ABC5BF88(v332, v299, v300);
LABEL_587:
  v15 = 0;
LABEL_588:
  CSDBSqliteStatementReset();
LABEL_589:
  v301 = CSDBSqliteConnectionStatementForSQL();
  if (!v301 || !*(_QWORD *)(v301 + 8) || (v302 = CSDBSqliteStatementPerform(), CSDBSqliteStatementReset(), v302 == 1))
  {
    v303 = IMLogHandleForCategory();
    if (os_log_type_enabled(v303, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v303, OS_LOG_TYPE_INFO, "Whoa pardner, we didn't drop the group to chat map table. C'est la vie.", buf, 2u);
    }
  }
  v304 = CSDBSqliteConnectionStatementForSQL();
  if (!v304 || !*(_QWORD *)(v304 + 8) || (v305 = CSDBSqliteStatementPerform(), CSDBSqliteStatementReset(), v305 == 1))
  {
    v306 = IMLogHandleForCategory();
    if (os_log_type_enabled(v306, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v306, OS_LOG_TYPE_INFO, "Whoa pardner, we didn't drop the non-canonical group to handle map table. C'est la vie.", buf, 2u);
    }
  }
  if ((_DWORD)v15)
  {
    v307 = IMLogHandleForCategory();
    if (os_log_type_enabled(v307, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v307, OS_LOG_TYPE_INFO, "Asking DB to analyze.", buf, 2u);
    }
    CSDBSqliteConnectionPerformSQL();
  }
  v308 = IMLogHandleForCategory();
  if (os_log_type_enabled(v308, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v15;
    _os_log_impl(&dword_1ABB60000, v308, OS_LOG_TYPE_INFO, "Migration ended with result %d", buf, 8u);
  }
  v309 = IMLogHandleForCategory();
  if (os_log_type_enabled(v309, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1ABB60000, v309, OS_LOG_TYPE_INFO, "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -", buf, 2u);
  }
  return v15;
}

BOOL sub_1ABBCE1B0()
{
  uint64_t v0;
  int v1;
  NSObject *v2;
  _BOOL8 result;

  v0 = CSDBSqliteConnectionStatementForSQL();
  if (!v0)
    return 1;
  if (!*(_QWORD *)(v0 + 8))
    return 1;
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  v1 = CSDBSqliteStatementPerform();
  CSDBSqliteStatementReset();
  if (v1 != 1)
    return 1;
  v2 = IMLogHandleForCategory();
  result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1ABC5C230();
    return 0;
  }
  return result;
}

uint64_t sub_1ABBCE260(int a1, __CFString *a2, __CFString *theString, const __CFString *a4, void *a5)
{
  uint64_t Insert;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  NSObject *v14;
  uint32_t v15;
  NSObject *v16;
  uint64_t v18;
  CFTypeRef v19;
  __CFString *v20;
  char IsEmpty;
  char v22;
  NSObject *v23;
  int v24;
  __CFString *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (theString)
  {
    Insert = sub_1ABBCE824(a1, theString, a4, (uint64_t)a5, 1);
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    Insert = -1;
    if (!a2)
      goto LABEL_7;
  }
  if (Insert == -1)
    Insert = sub_1ABBCE824(a1, a2, a4, (uint64_t)a5, 0);
LABEL_7:
  if (Insert != -1)
    goto LABEL_8;
  if (IMStringIsEmpty() && IMStringIsEmpty())
  {
    v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v24 = 138412802;
      v25 = a2;
      v26 = 2112;
      v27 = (const char *)theString;
      v28 = 2080;
      v29 = "int64_t __createHandleRecord(CSDBSqliteConnection *, CFStringRef, CFStringRef, CFStringRef, CFStringRef)";
      v12 = "Got an invalid IDs uncanon: (%@) canon: (%@) in %s.";
LABEL_23:
      v14 = v11;
      v15 = 32;
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  if (IMStringIsEmpty())
  {
    v13 = IMLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v24 = 138412546;
      v25 = (__CFString *)a4;
      v26 = 2080;
      v27 = "int64_t __createHandleRecord(CSDBSqliteConnection *, CFStringRef, CFStringRef, CFStringRef, CFStringRef)";
      v12 = "Got an invalid service (%@) in %s.";
      v14 = v13;
      v15 = 22;
LABEL_24:
      _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, v12, (uint8_t *)&v24, v15);
      goto LABEL_25;
    }
    goto LABEL_25;
  }
  if ((!a2
     || (objc_msgSend((id)-[__CFString lowercaseString](a2, "lowercaseString"), "isEqualToString:", CFSTR("missed call")) & 1) == 0)&& (!theString|| !objc_msgSend((id)-[__CFString lowercaseString](theString, "lowercaseString"), "isEqualToString:", CFSTR("missed call"))))
  {
    v18 = CSDBSqliteConnectionStatementForSQL();
    if (!v18 || !*(_QWORD *)(v18 + 8))
      goto LABEL_25;
    if (theString)
    {
      v19 = CFRetain(theString);
    }
    else
    {
      v20 = sub_1ABBCE930(a2);
      IsEmpty = IMStringIsEmpty();
      if (!v20 || (IsEmpty & 1) != 0)
      {
        v22 = IMStringIsEmpty();
        v19 = 0;
        if (a2 && (v22 & 1) == 0)
          v19 = CFRetain(a2);
        if (!v20)
          goto LABEL_41;
      }
      else
      {
        v19 = CFRetain(v20);
      }
      CFRelease(v20);
    }
LABEL_41:
    CSDBSqliteBindTextFromCFString();
    CSDBSqliteBindTextFromCFString();
    objc_msgSend(a5, "uppercaseString");
    CSDBSqliteBindTextFromCFString();
    if ((IMStringIsEmpty() & 1) != 0)
      CSDBSqliteBindNull();
    else
      CSDBSqliteBindTextFromCFString();
    if (CSDBSqliteStatementPerform() == 101)
    {
      Insert = CSDBSqliteConnectionRowidOfLastInsert();
    }
    else
    {
      v23 = IMLogHandleForCategory();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = 138413058;
        v25 = a2;
        v26 = 2112;
        v27 = (const char *)theString;
        v28 = 2112;
        v29 = (const char *)a4;
        v30 = 2112;
        v31 = a5;
        _os_log_error_impl(&dword_1ABB60000, v23, OS_LOG_TYPE_ERROR, "[Database] ERROR: Unable to create handle row with uncanonid[%@] canonid[%@] service[%@] country[%@]", (uint8_t *)&v24, 0x2Au);
      }
      Insert = -1;
    }
    CSDBSqliteStatementReset();
    if (v19)
      CFRelease(v19);
LABEL_8:
    if (Insert != -1)
      return Insert;
    goto LABEL_25;
  }
  v11 = IMLogHandleForCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    v24 = 138412802;
    v25 = a2;
    v26 = 2112;
    v27 = (const char *)theString;
    v28 = 2080;
    v29 = "int64_t __createHandleRecord(CSDBSqliteConnection *, CFStringRef, CFStringRef, CFStringRef, CFStringRef)";
    v12 = "Got an invalid identifier (%@) (%@) in %s.";
    goto LABEL_23;
  }
LABEL_25:
  v16 = IMLogHandleForCategory();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    v24 = 138413058;
    v25 = a2;
    v26 = 2112;
    v27 = (const char *)theString;
    v28 = 2112;
    v29 = (const char *)a4;
    v30 = 2112;
    v31 = a5;
    _os_log_impl(&dword_1ABB60000, v16, OS_LOG_TYPE_INFO, "AWOL handle for uncanonicalizedID [%@]  canonicalizedID [%@] Service [%@] Country [%@]", (uint8_t *)&v24, 0x2Au);
  }
  return -1;
}

BOOL sub_1ABBCE6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  NSObject *v7;
  _BOOL8 result;
  NSObject *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 == -1 || a3 == -1)
  {
    v9 = IMLogHandleForCategory();
    result = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
    if (result)
    {
      v10 = 134218240;
      v11 = a2;
      v12 = 2048;
      v13 = a3;
      _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "** You attempted to bind HandleID [%lld] to ChatID [%lld]. One of these values is bogus.", (uint8_t *)&v10, 0x16u);
      return 0;
    }
  }
  else
  {
    v5 = CSDBSqliteConnectionStatementForSQL();
    if (v5 && *(_QWORD *)(v5 + 8))
    {
      CSDBSqliteBindInt();
      CSDBSqliteBindInt();
    }
    v6 = CSDBSqliteStatementPerform();
    CSDBSqliteStatementReset();
    if (v6 == 1)
    {
      v7 = IMLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1ABC5C294();
    }
    return v6 != 1;
  }
  return result;
}

uint64_t sub_1ABBCE824(int a1, __CFString *theString, const __CFString *a3, uint64_t a4, int a5)
{
  CFIndex Length;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  __CFString *v13;
  __CFString *v14;

  Length = CFStringGetLength(theString);
  v9 = -1;
  if (a3)
  {
    if (Length)
    {
      if (CFStringGetLength(a3))
      {
        v10 = CSDBSqliteConnectionStatementForSQL();
        if (v10)
        {
          v11 = v10;
          if (*(_QWORD *)(v10 + 8))
          {
            if (a5 || (v13 = sub_1ABBCE930(theString)) == 0)
            {
              v12 = CFRetain(theString);
            }
            else
            {
              v14 = v13;
              v12 = CFRetain(v13);
              CFRelease(v14);
            }
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindTextFromCFString();
            if (sqlite3_step(*(sqlite3_stmt **)(v11 + 8)) == 100)
              v9 = sqlite3_column_int(*(sqlite3_stmt **)(v11 + 8), 0);
            else
              v9 = -1;
            CSDBSqliteStatementReset();
            if (v12)
              CFRelease(v12);
          }
        }
      }
    }
  }
  return v9;
}

__CFString *sub_1ABBCE930(__CFString *theString)
{
  __CFString *v1;
  __CFString *v2;

  v1 = theString;
  if (theString)
  {
    if (CFStringHasPrefix(theString, CFSTR("+")))
    {
      v2 = (__CFString *)IMCanonicalizeFormattedString();
    }
    else if (-[__CFString _appearsToBePhoneNumber](v1, "_appearsToBePhoneNumber"))
    {
      v2 = (__CFString *)IMInternationalForPhoneNumberWithOptions();
    }
    else
    {
      v2 = (__CFString *)-[__CFString lowercaseString](v1, "lowercaseString");
    }
    v1 = v2;
    if (v2)
      CFRetain(v2);
  }
  return v1;
}

void sub_1ABBCE9B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFDictionaryRef v10;
  CFDictionaryRef v11;
  uint64_t v12;
  int v13;
  int v14;
  NSObject *v15;
  int valuePtr;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  valuePtr = sqlite3_column_int(*(sqlite3_stmt **)(a2 + 8), 2);
  v4 = CSDBSqliteConnectionStatementForSQL();
  if (v4)
  {
    v5 = v4;
    if (*(_QWORD *)(v4 + 8))
    {
      CSDBSqliteBindInt();
      if (sqlite3_step(*(sqlite3_stmt **)(v5 + 8)) == 100)
      {
        v6 = sqlite3_column_int(*(sqlite3_stmt **)(v5 + 8), 0);
        CSDBSqliteStatementReset();
        if (v6)
          return;
      }
      else
      {
        CSDBSqliteStatementReset();
      }
    }
  }
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  if (v8)
  {
    v9 = v8;
    values = v8;
    keys[0] = CFSTR("CKPlaceholderTimeSince1970Property");
    v10 = CFDictionaryCreate(v7, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v10)
    {
      v11 = v10;
      v12 = CSDBSqliteConnectionStatementForSQL();
      if (v12 && *(_QWORD *)(v12 + 8))
      {
        if (JWEncodeDictionary())
          CSDBSqliteBindBlobFromCFData();
        CSDBSqliteBindInt();
        v13 = CSDBSqliteStatementPerform();
        if (v13 != 101)
        {
          v14 = v13;
          v15 = IMLogHandleForCategory();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            sub_1ABC5C2F8(a3, v14, v15);
        }
        CSDBSqliteStatementReset();
      }
      CFRelease(v11);
    }
    CFRelease(v9);
  }
}

void sub_1ABBCEB88(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2 == -1 || a3 == -1)
  {
    v10 = IMLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1ABC5C37C(a3, a2, v10);
  }
  else
  {
    v7 = CSDBSqliteConnectionStatementForSQL();
    if (v7)
    {
      if (*(_QWORD *)(v7 + 8))
      {
        CSDBSqliteBindInt();
        CSDBSqliteBindInt();
        CSDBSqliteBindInt();
        v8 = CSDBSqliteStatementPerform();
        CSDBSqliteStatementReset();
        if (v8 == 1)
        {
          v9 = IMLogHandleForCategory();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            v11 = 134218752;
            v12 = a3;
            v13 = 2048;
            v14 = a2;
            v15 = 1024;
            v16 = a4;
            v17 = 1024;
            v18 = 1;
            _os_log_error_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_ERROR, "[Database] ERROR: Failed to Asscociated chat [%lld] for group [%lld] (isBroadcast[%d]) with Sqlite result: %d.", (uint8_t *)&v11, 0x22u);
          }
        }
      }
    }
  }
}

CFStringRef sub_1ABBCED04()
{
  uint64_t v0;
  uint64_t v1;
  const __CFAllocator *v2;
  const unsigned __int8 *v3;
  CFStringRef v4;

  v0 = CSDBSqliteConnectionStatementForSQL();
  if (!v0)
    return 0;
  v1 = v0;
  if (!*(_QWORD *)(v0 + 8))
    return 0;
  CSDBSqliteBindInt();
  if (sqlite3_step(*(sqlite3_stmt **)(v1 + 8)) == 100 && sqlite3_column_text(*(sqlite3_stmt **)(v1 + 8), 0))
  {
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v3 = sqlite3_column_text(*(sqlite3_stmt **)(v1 + 8), 0);
    v4 = CFStringCreateWithCString(v2, (const char *)v3, 0x8000100u);
  }
  else
  {
    v4 = 0;
  }
  CSDBSqliteStatementReset();
  return v4;
}

void sub_1ABBCEDB4(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

void sub_1ABBCEDC4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

float *sub_1ABBCEDD0(float *result, _DWORD *a2, float a3)
{
  *result = a3;
  *a2 = 1;
  return result;
}

void sub_1ABBCEE08(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_1ABBCEE18(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x1Cu);
}

_BYTE *sub_1ABBCEE2C(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

void IMDSqlOperationSetError(uint64_t a1, CFTypeRef cf)
{
  const void *v4;
  NSObject *v5;

  if (a1)
  {
    v4 = *(const void **)(a1 + 168);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 168) = 0;
    }
    if (cf)
      *(_QWORD *)(a1 + 168) = CFRetain(cf);
  }
  else
  {
    v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1ABC5C950();
  }
}

BOOL IMDSqlOperationBeginTransaction(_QWORD *a1)
{
  NSObject *v2;
  _BOOL8 result;
  NSObject *v4;

  if (a1)
  {
    if (!a1[1])
    {
      v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        sub_1ABC5CCF8();
    }
    _IMDSqlOperationBeginQuery((uint64_t)a1, CFSTR("BEGIN IMMEDIATE;"));
    IMDSqlOperationFinishQuery((uint64_t)a1);
    if (a1[21])
      return 0;
    a1[2] = CFRetain(CFSTR("BEGIN IMMEDIATE;"));
    return 1;
  }
  else
  {
    v4 = IMLogHandleForCategory();
    result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1ABC5CC5C();
      return 0;
    }
  }
  return result;
}

BOOL IMDSqlOperationCommitTransaction(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  _BOOL8 result;
  NSObject *v5;
  const void *v6;

  if (a1)
  {
    if (!a1[1])
    {
      v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        sub_1ABC5CECC();
    }
    if (!a1[2])
    {
      v3 = IMLogHandleForCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_1ABC5CE30();
      if (!a1[2])
        return 0;
    }
    _IMDSqlOperationBeginQuery((uint64_t)a1, CFSTR("COMMIT;"));
    IMDSqlOperationFinishQuery((uint64_t)a1);
    if (a1[21])
      return 0;
    v6 = (const void *)a1[2];
    if (v6)
    {
      CFRelease(v6);
      a1[2] = 0;
    }
    return 1;
  }
  else
  {
    v5 = IMLogHandleForCategory();
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1ABC5CD94();
      return 0;
    }
  }
  return result;
}

BOOL IMDSqlOperationRevertTransaction(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  _BOOL8 result;
  NSObject *v5;
  const void *v6;

  if (a1)
  {
    if (!a1[1])
    {
      v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        sub_1ABC5D0A0();
    }
    if (!a1[2])
    {
      v3 = IMLogHandleForCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_1ABC5D004();
      if (!a1[2])
        return 0;
    }
    _IMDSqlOperationBeginQuery((uint64_t)a1, CFSTR("ROLLBACK;"));
    IMDSqlOperationFinishQuery((uint64_t)a1);
    if (a1[21])
      return 0;
    v6 = (const void *)a1[2];
    if (v6)
    {
      CFRelease(v6);
      a1[2] = 0;
    }
    return 1;
  }
  else
  {
    v5 = IMLogHandleForCategory();
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1ABC5CF68();
      return 0;
    }
  }
  return result;
}

BOOL IMDSqlOperationCommitOrRevertTransaction(_QWORD *a1)
{
  _BOOL8 result;
  NSObject *v2;

  if (a1)
  {
    if (a1[21])
    {
      IMDSqlOperationRevertTransaction(a1);
      return 0;
    }
    IMDSqlOperationCommitTransaction(a1);
    return 1;
  }
  else
  {
    v2 = IMLogHandleForCategory();
    result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1ABC5D13C();
      return 0;
    }
  }
  return result;
}

id _IMDSqlOperationGetRows(uint64_t a1, const __CFString *a2)
{
  return _IMDSqlOperationGetRowsWithBindingBlock(a1, a2, (uint64_t)&unk_1E5AAF208);
}

id _IMDSqlOperationGetRowsWithBindingBlock(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  NSObject *v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  NSObject *v12;
  id v13;
  __CFDictionary *Row;
  uint64_t v15;
  void (*v16)(uint64_t);
  NSObject *v17;
  uint8_t buf[4];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5D324();
  }
  if (!theString)
  {
    v7 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("query"), "NSArray *_IMDSqlOperationGetRowsWithBindingBlock(IMDSqlOperation *, CFStringRef, dispatch_block_t)", IMFileLocationTrimFileName(), 327, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v8 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v8)
    {
      v8(v7);
    }
    else if (IMOSLoggingEnabled())
    {
      v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v20 = v7;
        _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a3)
  {
    if (!a1)
      return 0;
    _IMDSqlOperationBeginQuery(a1, theString);
    (*(void (**)(uint64_t))(a3 + 16))(a3);
  }
  else
  {
    v10 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("binder"), "NSArray *_IMDSqlOperationGetRowsWithBindingBlock(IMDSqlOperation *, CFStringRef, dispatch_block_t)", IMFileLocationTrimFileName(), 328, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v11 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v11)
    {
      v11(v10);
    }
    else if (IMOSLoggingEnabled())
    {
      v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v20 = v10;
        _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
    if (!a1)
      return 0;
    _IMDSqlOperationBeginQuery(a1, theString);
  }
  v13 = 0;
  while (IMDSqlOperationHasRows(a1))
  {
    Row = IMDSqlStatementGetRow((sqlite3_stmt **)(a1 + 32));
    if (Row)
    {
      if (!v13)
      {
        v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        if (!v13)
        {
          v15 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("rows"), "NSArray *_IMDSqlOperationGetRowsWithBindingBlock(IMDSqlOperation *, CFStringRef, dispatch_block_t)", IMFileLocationTrimFileName(), 343, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
          v16 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
          if (v16)
          {
            v16(v15);
          }
          else if (IMOSLoggingEnabled())
          {
            v17 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              v20 = v15;
              _os_log_impl(&dword_1ABB60000, v17, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
            }
          }
          v13 = 0;
        }
      }
      objc_msgSend(v13, "addObject:", Row);

    }
  }
  IMDSqlOperationFinishQuery(a1);
  if (*(_QWORD *)(a1 + 168) && v13)
  {

    return 0;
  }
  if (!v13)
    return MEMORY[0x1E0C9AA60];
  return v13;
}

id _IMDSqlOperationGetRowsForQuery(const __CFString *a1, _QWORD *a2)
{
  return _IMDSqlOperationGetRowsForQueryWithBindingBlock(a1, a2, (uint64_t)&unk_1E5AAF468);
}

id _IMDSqlOperationGetRowsForQueryWithBindingBlock(const __CFString *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t);
  NSObject *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  NSObject *v11;
  id RowsWithBindingBlock;
  _QWORD v14[6];
  __int128 v15;
  __int128 v16;
  _OWORD v17[11];
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v15 = xmmword_1E5AB7F78;
    v16 = *(_OWORD *)off_1E5AB7F88;
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("query"), "NSArray *_IMDSqlOperationGetRowsForQueryWithBindingBlock(CFStringRef, NSError **, IMDSqlOperationBlock)", IMFileLocationTrimFileName(), 368, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v19 = v6;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (!a3)
  {
    v15 = xmmword_1E5AB7FA0;
    v16 = *(_OWORD *)off_1E5AB7FB0;
    v9 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("binderBlock"), "NSArray *_IMDSqlOperationGetRowsForQueryWithBindingBlock(CFStringRef, NSError **, IMDSqlOperationBlock)", IMFileLocationTrimFileName(), 369, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v10 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v10)
    {
      v10(v9);
    }
    else if (IMOSLoggingEnabled())
    {
      v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v19 = v9;
        _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  *(_QWORD *)&v15 = 0;
  *((_QWORD *)&v15 + 1) = &v15;
  *(_QWORD *)&v16 = 0xD010000000;
  *((_QWORD *)&v16 + 1) = &unk_1ABCCF005;
  memset(v17, 0, sizeof(v17));
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v17);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1ABBCF98C;
  v14[3] = &unk_1E5AB0DA8;
  v14[4] = a3;
  v14[5] = &v15;
  RowsWithBindingBlock = _IMDSqlOperationGetRowsWithBindingBlock(*((_QWORD *)&v15 + 1) + 32, a1, (uint64_t)v14);
  if (IMDSqlOperationRelease(*((_QWORD *)&v15 + 1) + 32, a2))
  {
    if (!RowsWithBindingBlock)
      RowsWithBindingBlock = MEMORY[0x1E0C9AA60];
  }
  else
  {

    RowsWithBindingBlock = 0;
  }
  _Block_object_dispose(&v15, 8);
  return RowsWithBindingBlock;
}

uint64_t sub_1ABBCF98C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32);
  return result;
}

BOOL IMDSqlOperationExecuteQuery(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t);
  NSObject *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  NSObject *v11;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!theString)
  {
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("query"), "BOOL IMDSqlOperationExecuteQuery(IMDSqlOperation *, NSString *, IMDBlock)", IMFileLocationTrimFileName(), 387, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v14 = v6;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
    v9 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("query"), "BOOL IMDSqlOperationExecuteQuery(IMDSqlOperation *, NSString *, IMDBlock)", IMFileLocationTrimFileName(), 388, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v10 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v10)
    {
      v10(v9);
    }
    else if (IMOSLoggingEnabled())
    {
      v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v14 = v9;
        _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  _IMDSqlOperationBeginQuery(a1, theString);
  if (a3)
    (*(void (**)(uint64_t))(a3 + 16))(a3);
  return IMDSqlOperationFinishQuery(a1);
}

void IMDSqlOperationColumnByIndex(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  NSObject *v6;

  if (!a1)
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5D4F8();
  }
  IMDSqlStatementColumnByIndex((sqlite3_stmt **)(a1 + 32), a2, a3);
}

void IMDSqlOperationColumnByName(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void (*v7)(uint64_t);
  NSObject *v8;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("operation"), "IMDSqlColumn IMDSqlOperationColumnByName(IMDSqlOperation *, const char *)", IMFileLocationTrimFileName(), 450, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v10 = v6;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  IMDSqlStatementColumnByName((sqlite3_stmt **)(a1 + 32), a2, a3);
}

sqlite3_stmt *IMDSqlOperationColumnCount(uint64_t a1)
{
  NSObject *v2;

  if (!a1)
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC5D594();
  }
  return IMDSqlStatementColumnCount((sqlite3_stmt **)(a1 + 32));
}

void sub_1ABBCFE5C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t sub_1ABBCFE70(uint64_t a1)
{
  return dword_1ED0D3AC8[a1];
}

uint64_t _IMDChatRecordSetProperty()
{
  return CSDBRecordSetProperty();
}

uint64_t _IMDChatRecordGetProperty()
{
  return CSDBRecordGetProperty();
}

uint64_t _IMDChatRecordCopyProperty()
{
  return CSDBRecordCopyProperty();
}

const __CFNumber *_IMDChatRecordGetDateProperty()
{
  const __CFNumber *result;
  const __CFNumber *v1;
  uint64_t valuePtr;

  valuePtr = 0;
  result = (const __CFNumber *)CSDBRecordCopyProperty();
  if (result)
  {
    v1 = result;
    CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    CFRelease(v1);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

uint64_t IMDChatRecordGetTypeID()
{
  pthread_once(&stru_1ED0D36B8, (void (*)(void))sub_1ABBCFF30);
  return qword_1ED0D3B38;
}

uint64_t sub_1ABBCFF30()
{
  objc_class *v0;
  objc_class *v1;
  uint64_t v2;
  char **v3;
  uint64_t result;

  qword_1ED0D3B38 = _CFRuntimeRegisterClass();
  v0 = (objc_class *)objc_opt_class();
  class_getName(v0);
  _CFRuntimeBridgeClasses();
  v1 = (objc_class *)objc_opt_class();
  IMDBridgedRecordPopulatePropertyImplementations(v1, (uint64_t)&off_1E5AB80F0, 27);
  v2 = 0;
  v3 = &off_1E5AB80F0;
  do
  {
    v3 += 5;
    result = CSDBRecordIndexOfPropertyNamed();
    dword_1ED0D3AC8[v2++] = result;
  }
  while (v2 != 27);
  return result;
}

const void *IMDChatRecordCreate(uint64_t a1, int64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int64_t a14, int64_t a15, int64_t a16, uint64_t a17, uint64_t a18, int64_t a19, uint64_t a20,int64_t a21,uint64_t a22,uint64_t a23,int64_t a24,int64_t a25,int64_t a26,int64_t a27,int64_t a28)
{
  int64_t v28;
  int64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *Instance;
  const void *v35;
  NSObject *v36;
  const void *v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  _QWORD *v42;
  int64_t v43;
  CFNumberRef v44;
  uint64_t v45;
  CFNumberRef cf;
  int64_t v47;
  int64_t v48;
  void (*v56[5])(void);
  uint8_t v57[4];
  _BYTE v58[10];
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  uint8_t buf[8];
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  uint64_t v84;
  CFNumberRef v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  CFNumberRef v89;
  int64_t v90;
  int64_t v91;
  int64_t v92;
  uint64_t v93;

  v29 = a27;
  v28 = a28;
  v48 = a26;
  v30 = a24;
  v31 = a25;
  v32 = a22;
  v33 = a23;
  v47 = a21;
  v93 = *MEMORY[0x1E0C80C00];
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v45 = v32;
    pthread_once(&stru_1ED0D36B8, (void (*)(void))sub_1ABBCFF30);
    Instance = (_OWORD *)_CFRuntimeCreateInstance();
    v35 = Instance;
    if (Instance)
    {
      Instance[1] = 0u;
      Instance[2] = 0u;
      Instance[3] = 0u;
      v42 = Instance + 1;
      v43 = v28;
      if (IMOSLoggingEnabled())
      {
        v36 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v36, OS_LOG_TYPE_DEBUG, "_IMDChatRecordCreate()", buf, 2u);
        }
      }
      IMDEnsureSharedRecordStoreInitialized();
      v37 = (const void *)CSDBRecordCreate();
      if (v37)
      {
        cf = CFNumberCreate(0, kCFNumberSInt64Type, &a21);
        v44 = CFNumberCreate(0, kCFNumberSInt64Type, &a26);
        v38 = 0;
        *(_QWORD *)buf = a8;
        v67 = (uint8_t *)a2;
        v68 = a3;
        v69 = a4;
        v70 = a5;
        v71 = a6;
        v72 = a7;
        v73 = a9;
        v74 = a12;
        v75 = a14;
        v76 = a11;
        v77 = a10;
        v78 = a13;
        v79 = a15;
        v80 = a16;
        v81 = a17;
        v82 = a18;
        v83 = a19;
        v84 = a20;
        v85 = cf;
        v86 = v45;
        v87 = v33;
        v88 = v30;
        v89 = v44;
        v90 = v31;
        v91 = v29;
        v92 = v43;
        do
        {
          if (IMOSLoggingEnabled())
          {
            v39 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v57 = 67109376;
              *(_DWORD *)v58 = v38;
              *(_WORD *)&v58[4] = 1024;
              *(_DWORD *)&v58[6] = 27;
              _os_log_impl(&dword_1ABB60000, v39, OS_LOG_TYPE_DEBUG, "_IMDChatRecordSetProperty [%d of %d]", v57, 0xEu);
            }
          }
          CSDBRecordSetProperty();
          ++v38;
        }
        while (v38 != 27);
        if (cf)
          CFRelease(cf);
        if (v44)
          CFRelease(v44);
        if (IMOSLoggingEnabled())
        {
          v40 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v57 = 138413314;
            *(_QWORD *)v58 = a6;
            *(_WORD *)&v58[8] = 2112;
            v59 = a10;
            v60 = 2112;
            v61 = a13;
            v62 = 2112;
            v63 = a20;
            v64 = 2112;
            v65 = a7;
            _os_log_impl(&dword_1ABB60000, v40, OS_LOG_TYPE_INFO, "Saving new chat record to database with identifier: %@ displayName: %@ groupID: %@ originalGroupID: %@ service: %@", v57, 0x34u);
          }
        }
        if (IMDChatRecordAddChat((uint64_t)v37))
        {
          *v42 = (int)CSDBRecordGetID();
        }
        else
        {
          CFRelease(v35);
          v35 = 0;
        }
        IMDSMSRecordStoreRecordCommitChangesAndRelease(v37);
      }
      else
      {
        CFRelease(v35);
        return 0;
      }
    }
  }
  else
  {
    *(_QWORD *)buf = 0;
    v67 = buf;
    v68 = 0x2020000000;
    v69 = 0;
    v56[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v56[1] = (void (*)(void))3221225472;
    v56[2] = (void (*)(void))sub_1ABBD0570;
    v56[3] = (void (*)(void))&unk_1E5AAF630;
    v56[4] = (void (*)(void))buf;
    __syncXPCIMDChatRecordCreate_IPCAction(v56, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      v47,
      v32,
      v33,
      v30,
      v31,
      v48,
      v29,
      v28);
    v35 = (const void *)*((_QWORD *)v67 + 3);
    _Block_object_dispose(buf, 8);
  }
  return v35;
}

_QWORD *sub_1ABBD0570(uint64_t a1, void *a2)
{
  _QWORD *result;

  result = _IMDCopyIMDChatRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

_QWORD *_IMDCopyIMDChatRecordFromXPCObjectClient(void *a1)
{
  _QWORD *v2;
  uint64_t Instance;
  CFIndex v4;
  __CFArray *Mutable;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  CFNumberRef v9;
  CFNumberRef v10;
  void (*v11)(void);
  xpc_object_t value;
  void *v13;
  size_t count;
  xpc_object_t v15;
  _QWORD valuePtr[5];

  if (xpc_dictionary_get_count(a1) < 3)
    return 0;
  pthread_once(&stru_1ED0D36B8, (void (*)(void))sub_1ABBCFF30);
  Instance = _CFRuntimeCreateInstance();
  v2 = (_QWORD *)Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    if (!*(_QWORD *)(Instance + 24))
    {
      v4 = 27;
      Mutable = CFArrayCreateMutable(0, 27, 0);
      do
      {
        CFArrayAppendValue(Mutable, 0);
        --v4;
      }
      while (v4);
      v6 = &qword_1E5AB8100;
      while (2)
      {
        v7 = *v6;
        switch(*(v6 - 1))
        {
          case 0:
            v8 = IMGetXPCIntFromDictionary();
            goto LABEL_13;
          case 1:
            v8 = IMGetXPCStringFromDictionary();
            goto LABEL_13;
          case 2:
            v8 = IMGetXPCDataFromDictionary();
LABEL_13:
            v9 = (CFNumberRef)v8;
            goto LABEL_14;
          case 3:
            valuePtr[0] = 0;
            valuePtr[0] = IMGetXPCIntFromDictionary();
            v9 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
            v10 = v9;
            goto LABEL_16;
          default:
            v9 = 0;
LABEL_14:
            v10 = 0;
LABEL_16:
            if (CFArrayGetValueAtIndex(Mutable, v4))
            {
              if (v7)
              {
                v11 = *(void (**)(void))(v7 + 8);
                if (v11)
                  v11();
              }
            }
            if (v9 && v7 && *(_QWORD *)v7)
              v9 = (CFNumberRef)(*(uint64_t (**)(CFNumberRef))v7)(v9);
            CFArraySetValueAtIndex(Mutable, v4, v9);
            if (v10)
              CFRelease(v10);
            ++v4;
            v6 += 5;
            if (v4 != 27)
              continue;
            v2[3] = Mutable;
            value = xpc_dictionary_get_value(a1, "handles_cache");
            if (value)
            {
              v13 = value;
              if (!v2[4])
              {
                count = xpc_array_get_count(value);
                v2[4] = CFArrayCreateMutable(0, count, MEMORY[0x1E0C9B378]);
              }
              valuePtr[0] = MEMORY[0x1E0C809B0];
              valuePtr[1] = 3221225472;
              valuePtr[2] = sub_1ABBD5258;
              valuePtr[3] = &unk_1E5AB5E88;
              valuePtr[4] = v2;
              xpc_array_apply(v13, valuePtr);
            }
            v15 = xpc_dictionary_get_value(a1, "last_message_cache");
            if (v15)
              v2[6] = _IMDCopyIMDMessageRecordFromXPCObjectClient(v15);
            v2[5] = xpc_dictionary_get_int64(a1, "unread_count_cache");
            v2[7] = xpc_dictionary_get_int64(a1, "last_message_date_on_load");
            break;
        }
        break;
      }
    }
    v2[2] = xpc_dictionary_get_int64(a1, "recordIdentifier");
  }
  return v2;
}

_OWORD *IMDChatRecordCreateFromRecordID(uint64_t a1, int64_t a2)
{
  return sub_1ABBD0848(a1, a2, 1);
}

_OWORD *sub_1ABBD0848(uint64_t a1, int64_t a2, int a3)
{
  _OWORD *Instance;
  _OWORD *v6;
  uint64_t v7;
  const void *v8;
  NSObject *v9;
  NSObject *v10;
  int v12;
  int64_t v13;
  __int16 v14;
  const void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  pthread_once(&stru_1ED0D36B8, (void (*)(void))sub_1ABBCFF30);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  v6 = Instance;
  if (Instance)
  {
    Instance[2] = 0u;
    Instance[3] = 0u;
    Instance[1] = 0u;
    *((_QWORD *)Instance + 2) = a2;
    if (a3)
      v7 = IMDChatRecordCopyChatRecord(a2);
    else
      v7 = IMDChatRecordCopyChatRecordUnlocked(a2);
    v8 = (const void *)v7;
    if (IMOSLoggingEnabled())
    {
      v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v12 = 134218242;
        v13 = a2;
        v14 = 2112;
        v15 = v8;
        _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_DEBUG, "Got record in _IMDChatRecordCreateFromRecordIDWithLock (%lld) : %@", (uint8_t *)&v12, 0x16u);
      }
    }
    if (!v8)
    {
      if (IMOSLoggingEnabled())
      {
        v10 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          v12 = 134217984;
          v13 = a2;
          _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "Could not get chat record for identifier %lld", (uint8_t *)&v12, 0xCu);
        }
      }
      v8 = v6;
      v6 = 0;
    }
    CFRelease(v8);
  }
  return v6;
}

_OWORD *IMDChatRecordCreateFromRecordIDUnlocked(uint64_t a1, int64_t a2)
{
  return sub_1ABBD0848(a1, a2, 0);
}

uint64_t IMDChatRecordGetIdentifier(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 16);
  v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = 138412290;
    v4 = 0;
    _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Attempted to get identifier for NULL chat record: %@", (uint8_t *)&v3, 0xCu);
  }
  return 0;
}

uint64_t IMDChatRecordCopyGUID(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABBD0BD0;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5D630(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABBD0BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBD0BD0(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDChatRecordCopyChatRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDChatRecordCopyChatIdentifier(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 5);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABBD0D3C;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5D6A0(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABBD0D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBD0D3C(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDChatRecordCopyChatRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDChatRecordCopyGUIDUnlocked(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABBD0EA8;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5D710(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABBD0E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBD0EA8(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDChatRecordCopyChatRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDChatRecordCopyDisplayName(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 11);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABBD1014;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5D780(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABBD0FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBD1014(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDChatRecordCopyChatRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

_QWORD *IMDChatRecordCopyHandles(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  const void *v3;
  int64_t v4;
  void (*v6[5])(void);
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = a1;
  if (a1)
  {
    v8 = 0;
    v9 = &v8;
    v10 = 0x2020000000;
    v11 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v2 = v1[2];
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = sub_1ABBD1190;
      v7[3] = &unk_1E5AB2200;
      v7[4] = &v8;
      v7[5] = v2;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT handle_id FROM chat_handle_join WHERE chat_id = ?"), (uint64_t)v7);
    }
    else
    {
      v3 = (const void *)v1[4];
      if (v3)
      {
        v1 = CFRetain(v3);
LABEL_8:
        _Block_object_dispose(&v8, 8);
        return v1;
      }
      v4 = v1[2];
      v6[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v6[1] = (void (*)(void))3221225472;
      v6[2] = (void (*)(void))sub_1ABBD1268;
      v6[3] = (void (*)(void))&unk_1E5AAF630;
      v6[4] = (void (*)(void))&v8;
      __syncXPCIMDChatRecordCopyHandles_IPCAction(v6, v4);
    }
    v1 = (_QWORD *)v9[3];
    goto LABEL_8;
  }
  return v1;
}

void sub_1ABBD1170(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBD1190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  const CFArrayCallBacks *v8;
  int v9;
  const void *v10;
  const void *v11;

  CSDBSqliteBindInt();
  result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if ((_DWORD)result == 100)
  {
    v7 = *MEMORY[0x1E0C9AE00];
    v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
      v9 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      v10 = (const void *)IMDHandleRecordCreateFromRecordIDUnlocked(v7, v9);
      if (v10)
      {
        v11 = v10;
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v10);
        CFRelease(v11);
      }
      result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while ((_DWORD)result == 100);
  }
  return result;
}

xpc_object_t sub_1ABBD1268(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABBD12E0;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABBD12E0(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDHandleRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDChatRecordCopyLastMessage(uint64_t a1)
{
  uint64_t Identifier;
  uint64_t v2;
  const void *v3;
  const __CFString *v4;
  uint64_t v5;
  _QWORD v7[6];
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  Identifier = IMDChatRecordGetIdentifier(a1);
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v2 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABBD14CC;
  v8[3] = &unk_1E5AB8048;
  v8[5] = &v13;
  v8[6] = Identifier;
  v8[4] = &v9;
  _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT cm.message_id from chat_message_join cm where cm.chat_id = ? ORDER BY cm.message_date DESC, cm.message_id DESC LIMIT 1;"),
    (uint64_t)v8);
  if (*((_BYTE *)v10 + 24))
  {
    v3 = (const void *)v14[3];
    if (v3)
      CFRelease(v3);
    v7[0] = v2;
    v7[1] = 3221225472;
    if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags"), "isScheduledMessagesCoreEnabled"))v4 = CFSTR("SELECT ROWID from message m                 WHERE m.item_type == 0                 AND (m.schedule_type == 0                     OR (m.schedule_type == 2 AND (m.schedule_state != 1 AND m.schedule_state != 2)))                 AND m.ROWID in                     (SELECT message_id FROM chat_message_join where chat_id = ?)                 ORDER BY date DESC, ROWID DESC LIMIT 1");
    else
      v4 = CFSTR("SELECT ROWID from message m WHERE m.item_type == 0 AND m.ROWID in (SELECT message_id FROM chat_message_join where chat_id = ?) ORDER BY date DESC, ROWID DESC LIMIT 1");
    v7[2] = sub_1ABBD160C;
    v7[3] = &unk_1E5AB2200;
    v7[4] = &v13;
    v7[5] = Identifier;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v4, (uint64_t)v7);
  }
  v5 = v14[3];
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  return v5;
}

void sub_1ABBD14A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBD14CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  const void *v9;
  const void *v10;
  uint64_t ItemType;
  uint64_t ScheduleType;
  uint64_t ScheduleState;
  int v14;
  _BOOL4 v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  const void *v19;

  CSDBSqliteBindInt();
  result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if ((_DWORD)result == 100)
  {
    v7 = *MEMORY[0x1E0C9AE00];
    do
    {
      v8 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      v9 = IMDMessageRecordCreateFromRecordIDUnlocked(v7, v8);
      if (v9)
      {
        v10 = v9;
        ItemType = IMDMessageRecordGetItemType((uint64_t)v9, 0);
        ScheduleType = IMDMessageRecordGetScheduleType((uint64_t)v10, 0);
        ScheduleState = IMDMessageRecordGetScheduleState((uint64_t)v10, 0);
        v14 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags"), "isScheduledMessagesCoreEnabled");
        v15 = (unint64_t)(ScheduleState - 1) < 2;
        if (v14)
          v16 = ScheduleType == 2;
        else
          v16 = 0;
        if (!v16)
          v15 = 0;
        if (ItemType)
          v17 = 0;
        else
          v17 = !v15;
        if (v17)
        {
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v19 = *(const void **)(v18 + 24);
          if (v19)
          {
            CFRelease(v19);
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
            v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          }
          *(_QWORD *)(v18 + 24) = v10;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
          CFRelease(v10);
        }
      }
      result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while ((_DWORD)result == 100);
  }
  return result;
}

uint64_t sub_1ABBD160C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  const void *v9;

  CSDBSqliteBindInt();
  result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if ((_DWORD)result == 100)
  {
    v7 = *MEMORY[0x1E0C9AE00];
    do
    {
      v8 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      v9 = IMDMessageRecordCreateFromRecordIDUnlocked(v7, v8);
      if (v9)
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v9;
      result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while ((_DWORD)result == 100);
  }
  return result;
}

uint64_t IMDChatRecordCopyMessagesWithLimit(uint64_t a1, int64_t a2)
{
  uint64_t Identifier;
  int64_t v5;
  uint64_t v6;
  void (*v8[5])(void);
  _QWORD v9[7];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    Identifier = IMDChatRecordGetIdentifier(a1);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_1ABBD17BC;
    v9[3] = &unk_1E5AB2228;
    v9[5] = Identifier;
    v9[6] = a2;
    v9[4] = &v10;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT message_id FROM chat_message_join WHERE chat_id = ? ORDER BY ROWID DESC LIMIT ?;"),
      (uint64_t)v9);
  }
  else
  {
    v5 = IMDChatRecordGetIdentifier(a1);
    v8[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v8[1] = (void (*)(void))3221225472;
    v8[2] = (void (*)(void))sub_1ABBD18A0;
    v8[3] = (void (*)(void))&unk_1E5AAF630;
    v8[4] = (void (*)(void))&v10;
    __syncXPCIMDChatRecordCopyMessagesWithLimit_IPCAction(v8, v5, a2);
  }
  v6 = v11[3];
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_1ABBD1798(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBD17BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  const CFArrayCallBacks *v8;
  int v9;
  const void *v10;
  const void *v11;

  CSDBSqliteBindInt();
  CSDBSqliteBindInt64();
  result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if ((_DWORD)result == 100)
  {
    v7 = *MEMORY[0x1E0C9AE00];
    v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
      v9 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      v10 = IMDMessageRecordCreateFromRecordIDUnlocked(v7, v9);
      if (v10)
      {
        v11 = v10;
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v10);
        CFRelease(v11);
      }
      result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while ((_DWORD)result == 100);
  }
  return result;
}

xpc_object_t sub_1ABBD18A0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABBD1918;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABBD1918(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

__n128 IMDChatRecordBulkCopyForPhotos(uint64_t a1, const void **a2, const void **a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, _QWORD *a13, const void **a14, const void **a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, const void **a19, _QWORD *a20,void *a21,uint64_t a22,uint64_t a23,_QWORD *a24,uint64_t a25,_QWORD *a26)
{
  __n128 result;

  _IMDChatRecordBulkCopy(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a24,
    a26,
    0,
    0,
    0,
    0,
    0);
  return result;
}

void _IMDChatRecordBulkCopy(uint64_t a1, const void **a2, const void **a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, _QWORD *a13, const void **a14, const void **a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, const void **a19, _QWORD *a20,void *a21,_QWORD *a22,_QWORD *a23,const void **a24,const void **a25,void *a26,const void **a27,const void **a28)
{
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const __CFArray *v36;
  const void *ValueAtIndex;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  const __CFNumber *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  const __CFNumber *v68;
  _QWORD v77[33];

  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v77[0] = MEMORY[0x1E0C809B0];
      v77[1] = 3221225472;
      v77[2] = sub_1ABBD1FB8;
      v77[3] = &unk_1E5AB8068;
      v77[4] = a1;
      v77[5] = a2;
      v77[6] = a3;
      v77[7] = a4;
      v77[8] = a5;
      v77[9] = a6;
      v77[10] = a7;
      v77[11] = a11;
      v77[12] = a10;
      v77[13] = a8;
      v77[14] = a9;
      v77[15] = a12;
      v77[16] = a13;
      v77[17] = a14;
      v77[18] = a15;
      v77[19] = a16;
      v77[20] = a17;
      v77[21] = a18;
      v77[22] = a19;
      v77[23] = a20;
      v77[24] = a21;
      v77[25] = a22;
      v77[26] = a23;
      v77[27] = a24;
      v77[28] = a26;
      v77[29] = a25;
      v77[30] = a27;
      v77[31] = a28;
      _IMDPerformBlock((uint64_t)v77);
    }
    else
    {
      v36 = *(const __CFArray **)(a1 + 24);
      if (v36)
      {
        if (a4)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v36, 3);
          v38 = ValueAtIndex;
          if (ValueAtIndex)
            CFRetain(ValueAtIndex);
          *a4 = v38;
        }
        if (a5)
        {
          v39 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 4);
          v40 = v39;
          if (v39)
            CFRetain(v39);
          *a5 = v40;
        }
        if (a6)
        {
          v41 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 5);
          v42 = v41;
          if (v41)
            CFRetain(v41);
          *a6 = v42;
        }
        if (a7)
        {
          v43 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 6);
          v44 = v43;
          if (v43)
            CFRetain(v43);
          *a7 = v44;
        }
        if (a11)
        {
          v45 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 10);
          v46 = v45;
          if (v45)
            CFRetain(v45);
          *a11 = v46;
        }
        if (a10)
        {
          v47 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 11);
          v48 = v47;
          if (v47)
            CFRetain(v47);
          *a10 = v48;
        }
        if (a8)
        {
          v49 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
          v50 = v49;
          if (v49)
            CFRetain(v49);
          *a8 = v50;
        }
        if (a9)
        {
          v51 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 7);
          v52 = v51;
          if (v51)
            CFRetain(v51);
          *a9 = v52;
        }
        if (a12)
        {
          v53 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 8);
          v54 = v53;
          if (v53)
            CFRetain(v53);
          *a12 = v54;
        }
        if (a13)
        {
          v55 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 12);
          v56 = v55;
          if (v55)
            CFRetain(v55);
          *a13 = v56;
        }
        if (a14)
          *a14 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 9);
        if (a3)
          *a3 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 2);
        if (a2)
          *a2 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 1);
        if (a15)
          *a15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 13);
        if (a16)
          *a16 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 14);
        if (a17)
        {
          v57 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 15);
          v58 = v57;
          if (v57)
            CFRetain(v57);
          *a17 = v58;
        }
        if (a18)
        {
          v59 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 16);
          v60 = v59;
          if (v59)
            CFRetain(v59);
          *a18 = v60;
        }
        if (a19)
          *a19 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 17);
        if (a20)
        {
          v61 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 18);
          v62 = v61;
          if (v61)
            CFRetain(v61);
          *a20 = v62;
        }
        if (a21)
        {
          v63 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 19);
          if (v63)
            CFNumberGetValue(v63, kCFNumberSInt64Type, a21);
        }
        if (a22)
        {
          v64 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 20);
          v65 = v64;
          if (v64)
            CFRetain(v64);
          *a22 = v65;
        }
        if (a23)
        {
          v66 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 21);
          v67 = v66;
          if (v66)
            CFRetain(v66);
          *a23 = v67;
        }
        if (a24)
          *a24 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 22);
        if (a26)
        {
          v68 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 23);
          if (v68)
            CFNumberGetValue(v68, kCFNumberSInt64Type, a26);
        }
        if (a25)
          *a25 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 24);
        if (a27)
          *a27 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 25);
        if (a28)
          *a28 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 26);
      }
    }
  }
  else
  {
    v28 = IMLogHandleForCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      sub_1ABC5D7F0(v28, v29, v30, v31, v32, v33, v34, v35);
  }
}

void sub_1ABBD1FB8(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDChatRecordCopyChatRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    if (*(_QWORD *)(a1 + 40))
      **(_QWORD **)(a1 + 40) = (int)CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 48))
      **(_QWORD **)(a1 + 48) = (int)CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 56))
      **(_QWORD **)(a1 + 56) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 64))
      **(_QWORD **)(a1 + 64) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 72))
      **(_QWORD **)(a1 + 72) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 80))
      **(_QWORD **)(a1 + 80) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 88))
      **(_QWORD **)(a1 + 88) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 96))
      **(_QWORD **)(a1 + 96) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 104))
      **(_QWORD **)(a1 + 104) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 112))
      **(_QWORD **)(a1 + 112) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 120))
      **(_QWORD **)(a1 + 120) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 128))
      **(_QWORD **)(a1 + 128) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 136))
      **(_QWORD **)(a1 + 136) = (int)CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 144))
      **(_QWORD **)(a1 + 144) = (int)CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 152))
      **(_QWORD **)(a1 + 152) = (int)CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 160))
      **(_QWORD **)(a1 + 160) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 168))
      **(_QWORD **)(a1 + 168) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 176))
      **(_QWORD **)(a1 + 176) = (int)CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 184))
      **(_QWORD **)(a1 + 184) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 192))
      **(_QWORD **)(a1 + 192) = _IMDChatRecordGetDateProperty();
    if (*(_QWORD *)(a1 + 200))
      **(_QWORD **)(a1 + 200) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 208))
      **(_QWORD **)(a1 + 208) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 216))
      **(_QWORD **)(a1 + 216) = (int)CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 224))
      **(_QWORD **)(a1 + 224) = _IMDChatRecordGetDateProperty();
    if (*(_QWORD *)(a1 + 232))
      **(_QWORD **)(a1 + 232) = (int)CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 240))
      **(_QWORD **)(a1 + 240) = (int)CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 248))
      **(_QWORD **)(a1 + 248) = (int)CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

CFTypeRef IMDChatRecordCopyCachedLastMessage(uint64_t a1)
{
  const void *v1;

  if (a1 && (v1 = *(const void **)(a1 + 48)) != 0)
    return CFRetain(v1);
  else
    return 0;
}

uint64_t IMDChatRecordCachedUnreadCount(uint64_t a1)
{
  if (a1)
    return *(_QWORD *)(a1 + 40);
  else
    return -1;
}

uint64_t IMDChatRecordLastMessageTimeStampOnLoad(uint64_t a1)
{
  if (a1)
    return *(_QWORD *)(a1 + 56);
  else
    return -1;
}

void _IMDChatRecordSetGUID(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[6];

  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = sub_1ABBD247C;
      v20[3] = &unk_1E5AB2248;
      v20[4] = a1;
      v20[5] = a2;
      _IMDPerformBlock((uint64_t)v20);
    }
    else
    {
      v12 = IMLogHandleForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1ABC5D8D0(v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  else
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC5D860(v4, v5, v6, v7, v8, v9, v10, v11);
  }
}

void sub_1ABBD247C(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  v1 = IMDChatRecordCopyChatRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v1)
  {
    v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

void IMDChatRecordSetIsArchived(uint64_t a1, int64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[6];

  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = sub_1ABBD2584;
      v12[3] = &unk_1E5AB2248;
      v12[4] = a1;
      v12[5] = a2;
      _IMDPerformBlock((uint64_t)v12);
    }
    else
    {
      __syncXPCIMDChatRecordSetIsArchived_IPCAction(0, *(_QWORD *)(a1 + 16), a2);
    }
  }
  else
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC5D940(v4, v5, v6, v7, v8, v9, v10, v11);
  }
}

void sub_1ABBD2584(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  v1 = IMDChatRecordCopyChatRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v1)
  {
    v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

void IMDChatRecordSetIsBlackholed(uint64_t a1, int64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[6];

  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = sub_1ABBD268C;
      v12[3] = &unk_1E5AB2248;
      v12[4] = a1;
      v12[5] = a2;
      _IMDPerformBlock((uint64_t)v12);
    }
    else
    {
      __syncXPCIMDChatRecordSetIsBlackholed_IPCAction(0, *(_QWORD *)(a1 + 16), a2);
    }
  }
  else
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC5D9B0(v4, v5, v6, v7, v8, v9, v10, v11);
  }
}

void sub_1ABBD268C(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  v1 = IMDChatRecordCopyChatRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v1)
  {
    v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

void IMDChatRecordSetIsRecovered(uint64_t a1, int64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[6];

  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = sub_1ABBD2794;
      v12[3] = &unk_1E5AB2248;
      v12[4] = a1;
      v12[5] = a2;
      _IMDPerformBlock((uint64_t)v12);
    }
    else
    {
      __syncXPCIMDChatRecordSetIsRecovered_IPCAction(0, *(_QWORD *)(a1 + 16), a2);
    }
  }
  else
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC5DA20(v4, v5, v6, v7, v8, v9, v10, v11);
  }
}

void sub_1ABBD2794(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  v1 = IMDChatRecordCopyChatRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v1)
  {
    v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

void IMDChatRecordSetIsDeletingIncomingMessages(uint64_t a1, int64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[6];

  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = sub_1ABBD289C;
      v12[3] = &unk_1E5AB2248;
      v12[4] = a1;
      v12[5] = a2;
      _IMDPerformBlock((uint64_t)v12);
    }
    else
    {
      __syncXPCIMDChatRecordSetIsDeletingIncomingMessages_IPCAction(0, *(_QWORD *)(a1 + 16), a2);
    }
  }
  else
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC5DA90(v4, v5, v6, v7, v8, v9, v10, v11);
  }
}

void sub_1ABBD289C(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  v1 = IMDChatRecordCopyChatRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v1)
  {
    v2 = (const void *)v1;
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v2);
  }
}

uint64_t IMDChatRecordAddMessageIfNeededUnlocked(uint64_t a1, uint64_t a2)
{
  uint64_t Identifier;
  uint64_t v5;
  uint64_t Date;
  NSObject *v7;
  _QWORD v9[7];
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  Identifier = IMDMessageRecordGetIdentifier(a2);
  v5 = IMDChatRecordGetIdentifier(a1);
  Date = IMDMessageRecordGetDate(a2, 0);
  if (IMOSLoggingEnabled())
  {
    v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      v11 = Identifier;
      v12 = 2048;
      v13 = v5;
      _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_DEBUG, "Trying to associate message [%lld] with chat [%lld]", buf, 0x16u);
    }
  }
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1ABBD2A34;
  v9[3] = &unk_1E5AB8088;
  v9[4] = v5;
  v9[5] = Identifier;
  v9[6] = Date;
  return _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("INSERT OR IGNORE INTO chat_message_join (chat_id, message_id, message_date) VALUES (?, ?, ?);"),
           (uint64_t)v9);
}

void sub_1ABBD2A34()
{
  int v0;
  int v1;
  NSObject *v2;
  NSObject *v3;
  int v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt64();
  v0 = CSDBSqliteStatementPerform();
  v1 = v0;
  if (v0)
  {
    if (v0 != 101)
    {
      if (IMOSLoggingEnabled())
      {
        v2 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          v4 = 67109120;
          v5 = v1;
          _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "SQLite returned %d from IMDChatRecordAddMessageIfNeededUnlocked", (uint8_t *)&v4, 8u);
        }
      }
    }
  }
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4 = 67109120;
      v5 = v1;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_DEBUG, "SQLite returned %d from IMDChatRecordAddMessageIfNeeded", (uint8_t *)&v4, 8u);
    }
  }
}

uint64_t IMDChatRecordRemoveMessage(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t Identifier;
  uint64_t v7;
  _QWORD v9[8];

  if (!a1 && (v4 = IMLogHandleForCategory(), os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC5DBAC();
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_1ABC5DB00();
LABEL_6:
  Identifier = IMDMessageRecordGetIdentifier(a2);
  v7 = IMDChatRecordGetIdentifier(a1);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1ABBD2C88;
  v9[3] = &unk_1E5AB80A8;
  v9[4] = v7;
  v9[5] = Identifier;
  v9[6] = a2;
  v9[7] = a1;
  return _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("DELETE FROM chat_message_join WHERE chat_id = ? AND message_id = ?;"),
           (uint64_t)v9);
}

void sub_1ABBD2C88(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteStatementPerform();
  CSDBSqliteStatementReset();
  IMDCoreSpotlightScheduleUpdateForDeletedMessages(1005);
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v3 = *(_QWORD *)(a1 + 48);
      v4 = *(_QWORD *)(a1 + 56);
      v5 = 138412546;
      v6 = v3;
      v7 = 2112;
      v8 = v4;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_DEBUG, "Finished remove message [%@] from chat [%@], updating the spotlight index for this chat.", (uint8_t *)&v5, 0x16u);
    }
  }
}

void IMDChatRecordAddHandle(uint64_t a1, uint64_t a2)
{
  int v4;
  int64_t Identifier;
  int64_t v6;
  NSObject *v7;
  _QWORD v8[6];
  uint8_t buf[4];
  int64_t v10;
  __int16 v11;
  int64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = IMDIsRunningInDatabaseServerProcess();
  Identifier = IMDHandleRecordGetIdentifier(a2);
  v6 = IMDChatRecordGetIdentifier(a1);
  if (v4)
  {
    if (IMOSLoggingEnabled())
    {
      v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218240;
        v10 = Identifier;
        v11 = 2048;
        v12 = v6;
        _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_DEBUG, "Trying to associate handle [%lld] with chat [%lld]", buf, 0x16u);
      }
    }
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1ABBD2F24;
    v8[3] = &unk_1E5AB4AF0;
    v8[4] = v6;
    v8[5] = Identifier;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("INSERT INTO chat_handle_join (chat_id, handle_id) VALUES (?, ?)"), (uint64_t)v8);
  }
  else
  {
    __syncXPCIMDChatRecordAddHandle_IPCAction(0, v6, Identifier);
  }
}

void sub_1ABBD2F24()
{
  int v0;
  NSObject *v1;
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  v0 = CSDBSqliteStatementPerform();
  if (IMOSLoggingEnabled())
  {
    v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
    {
      v2[0] = 67109120;
      v2[1] = v0;
      _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_DEBUG, "SQLite returned %d from IMDChatRecordAddHandle", (uint8_t *)v2, 8u);
    }
  }
}

void IMDChatRecordRemoveHandle(uint64_t a1, uint64_t a2)
{
  int v4;
  int64_t Identifier;
  int64_t v6;
  _QWORD v7[6];

  v4 = IMDIsRunningInDatabaseServerProcess();
  Identifier = IMDHandleRecordGetIdentifier(a2);
  v6 = IMDChatRecordGetIdentifier(a1);
  if (v4)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1ABBD30E0;
    v7[3] = &unk_1E5AB4AF0;
    v7[4] = v6;
    v7[5] = Identifier;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("DELETE FROM chat_handle_join WHERE chat_id = ? AND handle_id = ?"), (uint64_t)v7);
  }
  else
  {
    __syncXPCIMDChatRecordRemoveHandle_IPCAction(0, v6, Identifier);
  }
}

void sub_1ABBD30E0()
{
  int v0;
  NSObject *v1;
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  v0 = CSDBSqliteStatementPerform();
  if (IMOSLoggingEnabled())
  {
    v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
    {
      v2[0] = 67109120;
      v2[1] = v0;
      _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_DEBUG, "SQLite returned %d from IMDChatRecordRemoveHandle", (uint8_t *)v2, 8u);
    }
  }
}

void IMDChatRecordBulkUpdate(uint64_t a1, int64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int64_t a14, int64_t a15, int64_t a16, uint64_t a17, uint64_t a18, int64_t a19, uint64_t a20,int64_t a21,uint64_t a22,uint64_t a23,int64_t a24,int64_t a25,int64_t a26,int64_t a27,int64_t a28)
{
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[32];
  uint8_t buf[4];
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v36 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v47 = a1;
      _os_log_impl(&dword_1ABB60000, v36, OS_LOG_TYPE_DEBUG, "IMDChatRecordBulkUpdateChat %@", buf, 0xCu);
    }
  }
  if (a1)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v45[0] = MEMORY[0x1E0C809B0];
      v45[1] = 3221225472;
      v45[2] = sub_1ABBD3410;
      v45[3] = &unk_1E5AB8068;
      v45[4] = a1;
      v45[5] = a3;
      v45[6] = a2;
      v45[7] = a14;
      v45[8] = a15;
      v45[9] = a24;
      v45[10] = a27;
      v45[11] = a28;
      v45[12] = a16;
      v45[13] = a4;
      v45[14] = a5;
      v45[15] = a6;
      v45[16] = a7;
      v45[17] = a11;
      v45[18] = a10;
      v45[19] = a8;
      v45[20] = a9;
      v45[21] = a12;
      v45[22] = a13;
      v45[23] = a17;
      v45[24] = a18;
      v45[25] = a19;
      v45[26] = a20;
      v45[27] = a21;
      v45[28] = a22;
      v45[29] = a23;
      v45[30] = a26;
      v45[31] = a25;
      _IMDPerformBlock((uint64_t)v45);
    }
    else
    {
      __syncXPCIMDChatRecordBulkUpdate_IPCAction(0, *(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
        a19,
        a20,
        a21,
        a22,
        a23,
        a24,
        a25,
        a26,
        a27,
        a28);
    }
  }
  else
  {
    v37 = IMLogHandleForCategory();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      sub_1ABC5DC58(v37, v38, v39, v40, v41, v42, v43, v44);
  }
}

void sub_1ABBD3410(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDChatRecordCopyChatRecordUnlocked(*(_QWORD *)(a1[4] + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if (a1[13])
      CSDBRecordSetProperty();
    if (a1[14])
      CSDBRecordSetProperty();
    if (a1[15])
      CSDBRecordSetProperty();
    if (a1[16])
      CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if (a1[19])
      CSDBRecordSetProperty();
    if (a1[20])
      CSDBRecordSetProperty();
    if (a1[21])
      CSDBRecordSetProperty();
    if (a1[22])
      CSDBRecordSetProperty();
    if (a1[23])
      CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if (a1[26])
      CSDBRecordSetProperty();
    sub_1ABBD36A8((uint64_t)v3, 19, a1[27]);
    CSDBRecordSetProperty();
    if (a1[29])
      CSDBRecordSetProperty();
    sub_1ABBD36A8((uint64_t)v3, 23, a1[30]);
    CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v3);
  }
}

void sub_1ABBD36A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFNumberRef v3;
  CFNumberRef v4;
  uint64_t valuePtr;

  valuePtr = a3;
  v3 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  if (v3)
  {
    v4 = v3;
    CSDBRecordSetProperty();
    CFRelease(v4);
  }
}

void IMDChatRecordAnonymizedUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;
  void (*v18)(uint64_t);
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[13];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if ((IMDIsRunningInDatabaseServerProcess() & 1) == 0)
  {
    v29 = xmmword_1E5AB80C8;
    v30 = *(_OWORD *)off_1E5AB80D8;
    v31 = 1299;
    v17 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected false '%@' in %s at %s:%d. %@"), CFSTR("IMDIsRunningInDatabaseServerProcess()"), "void IMDChatRecordAnonymizedUpdate(IMDChatRecordRef, CFDataRef, CFStringRef, CFStringRef, CFStringRef, CFStringRef, CFStringRef, CFStringRef, CFStringRef)", IMFileLocationTrimFileName(), 1299, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v18 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v18)
    {
      v18(v17);
    }
    else if (IMOSLoggingEnabled())
    {
      v19 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v33 = v17;
        _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a1)
  {
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = sub_1ABBD3928;
    v28[3] = &unk_1E5AB4B58;
    v28[4] = a1;
    v28[5] = a2;
    v28[6] = a3;
    v28[7] = a6;
    v28[8] = a5;
    v28[9] = a4;
    v28[10] = a7;
    v28[11] = a8;
    v28[12] = a9;
    _IMDPerformBlock((uint64_t)v28);
  }
  else
  {
    v20 = IMLogHandleForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      sub_1ABC5DCC8(v20, v21, v22, v23, v24, v25, v26, v27);
  }
}

void sub_1ABBD3928(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;

  v2 = IMDChatRecordCopyChatRecordUnlocked(*(_QWORD *)(a1[4] + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    if (a1[5])
      CSDBRecordSetProperty();
    v4 = (const __CFString *)a1[6];
    if (v4 && CFStringGetLength(v4) >= 1)
      CSDBRecordSetProperty();
    v5 = (const __CFString *)a1[7];
    if (v5 && CFStringGetLength(v5) >= 1)
      CSDBRecordSetProperty();
    v6 = (const __CFString *)a1[8];
    if (v6 && CFStringGetLength(v6) >= 1)
      CSDBRecordSetProperty();
    v7 = (const __CFString *)a1[9];
    if (v7 && CFStringGetLength(v7) >= 1)
      CSDBRecordSetProperty();
    v8 = (const __CFString *)a1[10];
    if (v8 && CFStringGetLength(v8) >= 1)
      CSDBRecordSetProperty();
    v9 = (const __CFString *)a1[11];
    if (v9 && CFStringGetLength(v9) >= 1)
      CSDBRecordSetProperty();
    v10 = (const __CFString *)a1[12];
    if (v10)
    {
      if (CFStringGetLength(v10) >= 1)
        CSDBRecordSetProperty();
    }
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v3);
  }
}

BOOL IMDChatRecordIsFiltered()
{
  return CSDBRecordGetProperty() != 0;
}

_OWORD *_IMDCopyIMDChatRecordFromXPCObjectServer(void *a1)
{
  uint64_t int64;

  if (a1 && (int64 = xpc_dictionary_get_int64(a1, "recordIdentifier"), int64 >= 1))
    return sub_1ABBD0848(0, int64, 0);
  else
    return 0;
}

xpc_object_t _IMDCopyXPCObjectFromIMDChatRecordClient(uint64_t a1)
{
  xpc_object_t v2;
  CFIndex v3;
  uint64_t *v4;
  const char *v5;
  uint64_t v6;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v8;
  void *v9;
  const char *v10;
  int64_t v11;
  int64_t v12;
  int64_t valuePtr;

  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = 0;
  v4 = &qword_1E5AB80F8;
  do
  {
    v5 = (const char *)*(v4 - 1);
    v6 = *v4;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v3);
    v8 = ValueAtIndex;
    switch(v6)
    {
      case 0:
        v9 = v2;
        v10 = v5;
        v11 = (int64_t)v8;
        goto LABEL_9;
      case 1:
        IMInsertNSStringsToXPCDictionary();
        break;
      case 2:
        IMInsertDatasToXPCDictionary();
        break;
      case 3:
        valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
        v11 = valuePtr;
        v9 = v2;
        v10 = v5;
LABEL_9:
        xpc_dictionary_set_int64(v9, v10, v11);
        break;
      default:
        break;
    }
    v4 += 5;
    ++v3;
  }
  while (v3 != 27);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
    xpc_dictionary_set_int64(v2, "recordIdentifier", v12);
  return v2;
}

void _IMDChatRecordBulkCopyXPCDictionary(uint64_t a1, uint64_t a2, char a3, char a4, char a5, int a6)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[7];
  char v23;
  char v24;
  char v25;

  if (a2)
  {
    if (a1)
    {
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = sub_1ABBD3CF8;
      v22[3] = &unk_1E5AB8530;
      v22[4] = a2;
      v22[5] = a1;
      v23 = a3;
      v22[6] = a1;
      v24 = a5;
      v25 = a4;
      if (a6)
        _IMDPerformBlock((uint64_t)v22);
      else
        sub_1ABBD3CF8((uint64_t)v22);
    }
    else
    {
      v14 = IMLogHandleForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1ABC5DDA8(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5DD38(v6, v7, v8, v9, v10, v11, v12, v13);
  }
}

void sub_1ABBD3CF8(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t *v5;
  const char *v6;
  uint64_t v7;
  const __CFNumber *Property;
  const __CFNumber *v9;
  void *v10;
  const char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  xpc_object_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  xpc_object_t v22;
  void *v23;
  void *v24;
  uint64_t Message;
  const void *v26;
  xpc_object_t v27;
  void *v28;
  void *v29;
  int64_t v30;
  const __CFNumber *v31;
  uint64_t v32;
  _QWORD valuePtr[6];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v2 = IMDChatRecordCopyChatRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    v4 = 0;
    v5 = &qword_1E5AB80F8;
    do
    {
      v6 = (const char *)*(v5 - 1);
      v7 = *v5;
      Property = (const __CFNumber *)CSDBRecordGetProperty();
      v9 = Property;
      switch(v7)
      {
        case 0:
          v10 = *(void **)(a1 + 32);
          v11 = v6;
          v12 = (int64_t)v9;
          goto LABEL_11;
        case 1:
          v31 = Property;
          v32 = 0;
          IMInsertNSStringsToXPCDictionary();
          break;
        case 2:
          v31 = Property;
          v32 = 0;
          IMInsertDatasToXPCDictionary();
          break;
        case 3:
          valuePtr[0] = 0;
          if (Property)
          {
            CFNumberGetValue(Property, kCFNumberSInt64Type, valuePtr);
            v12 = valuePtr[0];
          }
          else
          {
            v12 = 0;
          }
          v10 = *(void **)(a1 + 32);
          v11 = v6;
LABEL_11:
          xpc_dictionary_set_int64(v10, v11, v12);
          break;
        default:
          break;
      }
      v5 += 5;
      v4 += 4;
    }
    while (v4 != 108);
    if (*(_BYTE *)(a1 + 56))
    {
      v13 = *(_QWORD *)(a1 + 48);
      if (v13)
      {
        v34 = 0;
        v35 = &v34;
        v36 = 0x2020000000;
        v37 = 0;
        v14 = *(_QWORD *)(v13 + 16);
        valuePtr[0] = MEMORY[0x1E0C809B0];
        valuePtr[1] = 3221225472;
        valuePtr[2] = sub_1ABBD52A0;
        valuePtr[3] = &unk_1E5AB2200;
        valuePtr[4] = &v34;
        valuePtr[5] = v14;
        _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT handle_id FROM chat_handle_join WHERE chat_id = ?"), (uint64_t)valuePtr);
        v15 = (void *)v35[3];
        _Block_object_dispose(&v34, 8);
      }
      else
      {
        v15 = 0;
      }
      v16 = xpc_array_create(0, 0);
      if (v16)
      {
        v17 = v16;
        v18 = objc_msgSend(v15, "count");
        if (v18 >= 1)
        {
          v19 = 0;
          v20 = v18;
          do
          {
            v21 = objc_msgSend(v15, "objectAtIndex:", v19, v31, v32);
            v22 = xpc_dictionary_create(0, 0, 0);
            if (v22)
            {
              v23 = v22;
              _IMDHandleRecordBulkCopyXPCDictionary(v21, (uint64_t)v22, 0);
              xpc_array_append_value(v17, v23);
              xpc_release(v23);
            }
            ++v19;
          }
          while (v20 != v19);
        }
        v24 = *(void **)(a1 + 32);
        if (v24)
          xpc_dictionary_set_value(v24, "handles_cache", v17);
        xpc_release(v17);
      }
      if (v15)
        CFRelease(v15);
    }
    if (*(_BYTE *)(a1 + 57))
    {
      Message = IMDChatRecordCopyLastMessage(*(_QWORD *)(a1 + 40));
      if (Message)
      {
        v26 = (const void *)Message;
        v27 = xpc_dictionary_create(0, 0, 0);
        if (v27)
        {
          v28 = v27;
          _IMDMessageRecordBulkCopyXPCDictionary((uint64_t)v26, (uint64_t)v27, 1, 1);
          v29 = *(void **)(a1 + 32);
          if (v29)
            xpc_dictionary_set_value(v29, "last_message_cache", v28);
          xpc_release(v28);
        }
        CFRelease(v26);
      }
    }
    if (*(_BYTE *)(a1 + 58))
      v30 = IMDMessageRecordCountAllUnreadMessagesForChatRowIDUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
    else
      v30 = -1;
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "unread_count_cache", v30);
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "recordIdentifier", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16));
    CFRelease(v3);
  }
}

void sub_1ABBD4004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBD401C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  _QWORD *v6;
  const void *v7;

  v5 = (void *)MEMORY[0x1AF435474]();
  v6 = _IMDCopyIMDChatRecordFromXPCObjectClient(a3);
  if (v6)
  {
    v7 = v6;
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);
    CFRelease(v7);
  }
  objc_autoreleasePoolPop(v5);
  return 1;
}

uint64_t IMDMergeDuplicateChatsWithOperation(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  void *v5;
  uint64_t v7;
  void (*v8)(uint64_t);
  NSObject *v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  NSObject *v12;
  uint64_t result;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  NSObject *v31;
  uint32_t v32;
  const __CFString *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  id obj;
  _QWORD v42[6];
  _QWORD v43[7];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint8_t v48[128];
  uint8_t buf[4];
  uint64_t v50;
  _BYTE v51[32];
  uint64_t v52;
  uint64_t v53;

  v5 = a2;
  v53 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    *(_OWORD *)v51 = xmmword_1E5AB8550;
    *(_OWORD *)&v51[16] = *(_OWORD *)off_1E5AB8560;
    v52 = 1689;
    v7 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("losingChatGUIDs"), "BOOL IMDMergeDuplicateChatsWithOperation(IMDSqlOperation * _Nonnull, NSArray<NSString *> * _Nonnull, NSString * _Nonnull, NSString * _Nullable)", IMFileLocationTrimFileName(), 1689, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v8 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v8)
    {
      v8(v7);
      v5 = 0;
    }
    else
    {
      v5 = 0;
      if (IMOSLoggingEnabled())
      {
        v9 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v50 = v7;
          _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }
      }
    }
  }
  if (!a1)
  {
    *(_OWORD *)v51 = xmmword_1E5AB8578;
    *(_OWORD *)&v51[16] = *(_OWORD *)off_1E5AB8588;
    v52 = 1690;
    v10 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("operation"), "BOOL IMDMergeDuplicateChatsWithOperation(IMDSqlOperation * _Nonnull, NSArray<NSString *> * _Nonnull, NSString * _Nonnull, NSString * _Nullable)", IMFileLocationTrimFileName(), 1690, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v11 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v11)
    {
      v11(v10);
    }
    else if (IMOSLoggingEnabled())
    {
      v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v50 = v10;
        _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (!a3)
  {
    *(_OWORD *)v51 = xmmword_1E5AB85A0;
    *(_OWORD *)&v51[16] = *(_OWORD *)off_1E5AB85B0;
    v52 = 1691;
    v18 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("winningChatGUID"), "BOOL IMDMergeDuplicateChatsWithOperation(IMDSqlOperation * _Nonnull, NSArray<NSString *> * _Nonnull, NSString * _Nonnull, NSString * _Nullable)", IMFileLocationTrimFileName(), 1691, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v19 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v19)
    {
      v19(v18);
      return 0;
    }
    if (!IMOSLoggingEnabled())
      return 0;
    v14 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 138412290;
    v50 = v18;
    v16 = "ASSERTION FAILED: %@";
    v17 = buf;
LABEL_25:
    _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, v16, v17, 0xCu);
    return 0;
  }
  result = 0;
  if (a1 && v5)
  {
    obj = v5;
    IMDDropAllTriggersWithOperation(a1, 0);
    if (*(_QWORD *)(a1 + 168))
    {
      result = IMOSLoggingEnabled();
      if ((_DWORD)result)
      {
        v14 = OSLogHandleForIMEventCategory();
        result = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
        if ((_DWORD)result)
        {
          v15 = IMDSqlOperationErrorDescription(a1);
          *(_DWORD *)v51 = 138412290;
          *(_QWORD *)&v51[4] = v15;
          v16 = "failed dropping triggers: %@";
          v17 = v51;
          goto LABEL_25;
        }
      }
      return result;
    }
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v20 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
    if (v20)
    {
      v21 = *(_QWORD *)v45;
      v22 = MEMORY[0x1E0C809B0];
      while (2)
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v45 != v21)
            objc_enumerationMutation(obj);
          v24 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * i);
          v43[0] = v22;
          v43[1] = 3221225472;
          v43[2] = sub_1ABBD48BC;
          v43[3] = &unk_1E5AB85D0;
          v43[5] = v24;
          v43[6] = a1;
          v43[4] = a3;
          _IMDSqlOperationRunQuery(a1, CFSTR("UPDATE chat_message_join SET chat_id = (SELECT ROWID FROM chat WHERE guid = ?) WHERE (chat_id = (SELECT ROWID FROM chat WHERE guid = ?) AND message_id NOT IN (SELECT message_id from chat_message_join WHERE chat_id =  (SELECT ROWID FROM chat WHERE guid = ?)));"),
            (uint64_t)v43,
            0);
          if (*(_QWORD *)(a1 + 168))
          {
            if (IMOSLoggingEnabled())
            {
              v25 = OSLogHandleForIMEventCategory();
              if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
              {
                v26 = IMDSqlOperationErrorDescription(a1);
                *(_DWORD *)v51 = 138412546;
                *(_QWORD *)&v51[4] = v26;
                *(_WORD *)&v51[12] = 2112;
                *(_QWORD *)&v51[14] = v24;
                _os_log_impl(&dword_1ABB60000, v25, OS_LOG_TYPE_INFO, "failed updating chat_message_join table: %@ for unwanted chat: %@", v51, 0x16u);
              }
            }
            goto LABEL_39;
          }
        }
        v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
        if (v20)
          continue;
        break;
      }
    }
LABEL_39:
    if (*(_QWORD *)(a1 + 168))
      goto LABEL_60;
    v33 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("DELETE FROM chat_handle_join WHERE chat_id IN (SELECT ROWID FROM chat WHERE guid %@)"), IMDGenerateInClauseForCount(objc_msgSend(obj, "count")));
    v42[0] = MEMORY[0x1E0C809B0];
    v42[1] = 3221225472;
    v42[2] = sub_1ABBD4900;
    v42[3] = &unk_1E5AB2098;
    v42[4] = obj;
    v42[5] = a1;
    _IMDSqlOperationRunQuery(a1, v33, (uint64_t)v42, 0);
    if (*(_QWORD *)(a1 + 168))
    {
      if (IMOSLoggingEnabled())
      {
        v34 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          v35 = IMDSqlOperationErrorDescription(a1);
          v36 = objc_msgSend(obj, "description");
          *(_DWORD *)v51 = 138412546;
          *(_QWORD *)&v51[4] = v35;
          *(_WORD *)&v51[12] = 2112;
          *(_QWORD *)&v51[14] = v36;
          _os_log_impl(&dword_1ABB60000, v34, OS_LOG_TYPE_INFO, "failed deleting chat_handle_join rows failed (%@) - for unwanted chats: %@", v51, 0x16u);
        }
      }
      if (*(_QWORD *)(a1 + 168))
        goto LABEL_60;
    }
    if (objc_msgSend(a4, "length"))
      _IMDSqlOperationRunQuery(a1, (CFStringRef)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE chat SET display_name = '%@' WHERE guid = '%@';"),
                       a4,
                       a3),
        0,
        0);
    if (*(_QWORD *)(a1 + 168))
    {
LABEL_60:
      if (!IMOSLoggingEnabled())
        return *(_QWORD *)(a1 + 168) == 0;
      v27 = OSLogHandleForIMEventCategory();
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        return *(_QWORD *)(a1 + 168) == 0;
      v28 = objc_msgSend(obj, "count");
      v29 = objc_msgSend(obj, "description");
      *(_DWORD *)v51 = 134218498;
      *(_QWORD *)&v51[4] = v28;
      *(_WORD *)&v51[12] = 2112;
      *(_QWORD *)&v51[14] = v29;
      *(_WORD *)&v51[22] = 2112;
      *(_QWORD *)&v51[24] = a3;
      v30 = "Finished merging %ld (%@) unwanted chats into %@ ";
      v31 = v27;
      v32 = 32;
    }
    else
    {
      IMDCreateTriggersWithOperation(a1, 0);
      if (!*(_QWORD *)(a1 + 168))
        return *(_QWORD *)(a1 + 168) == 0;
      if (!IMOSLoggingEnabled())
        return *(_QWORD *)(a1 + 168) == 0;
      v37 = OSLogHandleForIMEventCategory();
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        return *(_QWORD *)(a1 + 168) == 0;
      v38 = IMDSqlOperationErrorDescription(a1);
      v39 = objc_msgSend(obj, "description");
      *(_DWORD *)v51 = 138412546;
      *(_QWORD *)&v51[4] = v38;
      *(_WORD *)&v51[12] = 2112;
      *(_QWORD *)&v51[14] = v39;
      v30 = "failed recreating the triggers: (%@) - for unwanted chats: %@";
      v31 = v37;
      v32 = 22;
    }
    _os_log_impl(&dword_1ABB60000, v31, OS_LOG_TYPE_INFO, v30, v51, v32);
    return *(_QWORD *)(a1 + 168) == 0;
  }
  return result;
}

void sub_1ABBD4824(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABBD4600);
  }
  _Unwind_Resume(a1);
}

void sub_1ABBD48BC(uint64_t *a1)
{
  IMDSqlStatementBindTextFromCFString(a1[6] + 32, a1[4]);
  IMDSqlStatementBindTextFromCFString(a1[6] + 32, a1[5]);
  IMDSqlStatementBindTextFromCFString(a1[6] + 32, a1[4]);
}

uint64_t sub_1ABBD4900(uint64_t a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(void **)(a1 + 32);
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 40) + 32, *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t IMDChatRecordRepairDuplicateChats(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  NSObject *v13;
  double v14;
  NSObject *v15;
  double v16;
  uint64_t v17;
  void (*v19[6])(void);
  _QWORD v20[9];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint8_t v25[4];
  double v26;
  _BYTE buf[24];
  void (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v22 = &v21;
  v23 = 0x2020000000;
  v24 = 1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = sub_1ABBD4D8C;
    v20[3] = &unk_1E5AB85F8;
    v20[4] = a1;
    v20[5] = a2;
    v20[6] = a3;
    v20[7] = &v21;
    v20[8] = a4;
    IMDRunSqlOperation((uint64_t)v20);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = objc_msgSend(a1, "count");
        v10 = objc_msgSend(a1, "description");
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v10;
        *(_WORD *)&buf[22] = 2112;
        v28 = (void (*)(uint64_t, uint64_t))a2;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "Being to merge %lld (%@) duplicate chats into winning chat %@", buf, 0x20u);
      }
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3052000000;
    v28 = sub_1ABBD5008;
    v29 = sub_1ABBD5018;
    v30 = 0;
    objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
    v12 = v11;
    v19[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v19[1] = (void (*)(void))3221225472;
    v19[2] = (void (*)(void))sub_1ABBD5024;
    v19[3] = (void (*)(void))&unk_1E5AB21D8;
    v19[4] = (void (*)(void))&v21;
    v19[5] = (void (*)(void))buf;
    __syncXPCIMDRepairDuplicateChats_IPCAction(v19, (uint64_t)a1, a2, a3);
    if (*((_BYTE *)v22 + 24))
    {
      if (IMOSLoggingEnabled())
      {
        v13 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
          *(_DWORD *)v25 = 134217984;
          v26 = v14 - v12;
          _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "Finished merging duplicated chats in %f seconds", v25, 0xCu);
        }
      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        v15 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          v16 = COERCE_DOUBLE(objc_msgSend(*(id *)(*(_QWORD *)&buf[8] + 40), "localizedDescription"));
          *(_DWORD *)v25 = 138412290;
          v26 = v16;
          _os_log_impl(&dword_1ABB60000, v15, OS_LOG_TYPE_INFO, "IMDMergeDuplicateChatsWithOperation in agent failed with error: %@", v25, 0xCu);
        }
      }
      if (a4)
        *a4 = *(id *)(*(_QWORD *)&buf[8] + 40);

    }
    _Block_object_dispose(buf, 8);
  }
  v17 = *((unsigned __int8 *)v22 + 24);
  _Block_object_dispose(&v21, 8);
  return v17;
}

void sub_1ABBD4CFC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    if (!v25)
      JUMPOUT(0x1ABBD4C90);
    JUMPOUT(0x1ABBD4C7CLL);
  }
  _Block_object_dispose((const void *)(v26 - 144), 8);
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1ABBD4D8C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  double v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  double v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = objc_msgSend(*(id *)(a1 + 32), "count");
      *(double *)&v6 = COERCE_DOUBLE(objc_msgSend(*(id *)(a1 + 32), "description"));
      v7 = *(_QWORD *)(a1 + 40);
      v15 = 134218498;
      v16 = v5;
      v17 = 2112;
      v18 = *(double *)&v6;
      v19 = 2112;
      v20 = v7;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Being to merge %lld (%@) duplicate chats into winning chat %@", (uint8_t *)&v15, 0x20u);
    }
  }
  objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
  v9 = v8;
  IMDSqlOperationBeginTransaction((_QWORD *)a2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = IMDMergeDuplicateChatsWithOperation(a2, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(void **)(a1 + 48));
  if (*(_QWORD *)(a2 + 168))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    if (IMOSLoggingEnabled())
    {
      v10 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = IMDSqlOperationErrorDescription(a2);
        v15 = 138412290;
        v16 = v11;
        _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "IMDMergeDuplicateChatsWithOperation failed in db with error: %@", (uint8_t *)&v15, 0xCu);
      }
    }
    if (*(_QWORD *)(a1 + 64))
      **(_QWORD **)(a1 + 64) = *(id *)(a2 + 168);
  }
  IMDSqlOperationCommitOrRevertTransaction((_QWORD *)a2);
  if (IMOSLoggingEnabled())
  {
    v12 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = objc_msgSend(*(id *)(a1 + 32), "count");
      objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
      v15 = 134218240;
      v16 = v13;
      v17 = 2048;
      v18 = v14 - v9;
      _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "Finished repairing %lld duplicate chats in %f seconds", (uint8_t *)&v15, 0x16u);
    }
  }
}

void sub_1ABBD5008(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1ABBD5018(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1ABBD5024(uint64_t result, xpc_object_t xdict)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t uint64;
  const char *string;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (xdict)
  {
    v3 = result;
    result = xpc_dictionary_get_BOOL(xdict, "BOOL_result");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24) = result;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24))
    {
      result = (uint64_t)xpc_dictionary_get_string(xdict, "error_domain");
      if (result)
      {
        v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", result);
        uint64 = xpc_dictionary_get_uint64(xdict, "error_code");
        string = xpc_dictionary_get_string(xdict, "error_localized_description");
        if (string)
        {
          v7 = (void *)MEMORY[0x1E0C99D80];
          v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", string);
          v9 = objc_msgSend(v7, "dictionaryWithObject:forKey:", v8, *MEMORY[0x1E0CB2D50]);
        }
        else
        {
          v9 = 0;
        }
        result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", v4, uint64, v9);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 40) = result;
      }
    }
  }
  return result;
}

_QWORD *sub_1ABBD5134(_QWORD *result)
{
  result[4] = 0;
  result[5] = -1;
  result[2] = -1;
  result[3] = 0;
  result[6] = 0;
  result[7] = -1;
  return result;
}

void sub_1ABBD5148(uint64_t a1)
{
  CFIndex v2;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(void);
  const void *v6;
  const void *v7;
  const void *v8;

  *(_QWORD *)(a1 + 16) = -1;
  if (*(_QWORD *)(a1 + 24))
  {
    v2 = 0;
    v3 = &qword_1E5AB8100;
    do
    {
      v4 = *v3;
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v2))
      {
        v5 = *(void (**)(void))(v4 + 8);
        if (v5)
          v5();
      }
      ++v2;
      v3 += 5;
    }
    while (v2 != 27);
    v6 = *(const void **)(a1 + 24);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
  v7 = *(const void **)(a1 + 48);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v8 = *(const void **)(a1 + 32);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 32) = 0;
  }
}

BOOL sub_1ABBD51E8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

uint64_t sub_1ABBD51FC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

CFStringRef sub_1ABBD5204(_QWORD *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<IMDChatRecord %p [%p]>[%lld]{}"), a1, v3, a1[2]);
}

uint64_t sub_1ABBD5258(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)_IMDCopyIMDHandleRecordFromXPCObjectClient(a3);
  if (v4)
  {
    v5 = v4;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(a1 + 32) + 32), v4);
    CFRelease(v5);
  }
  return 1;
}

uint64_t sub_1ABBD52A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  const CFArrayCallBacks *v8;
  int v9;
  const void *v10;
  const void *v11;

  CSDBSqliteBindInt();
  result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if ((_DWORD)result == 100)
  {
    v7 = *MEMORY[0x1E0C9AE00];
    v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
      v9 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      v10 = (const void *)IMDHandleRecordCreateFromRecordIDUnlocked(v7, v9);
      if (v10)
      {
        v11 = v10;
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v10);
        CFRelease(v11);
      }
      result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while ((_DWORD)result == 100);
  }
  return result;
}

uint64_t _IMDSMSDatabaseMigrateData_24_25()
{
  uint64_t v0;
  uint64_t v1;
  sqlite3_stmt *v2;
  const __CFAllocator *v3;
  uint64_t v4;
  const UInt8 *v5;
  unsigned int v6;
  BOOL v7;
  CFDataRef v8;
  uint64_t v9;
  uint64_t v10;

  v0 = CSDBSqliteConnectionStatementForSQL();
  if (v0)
  {
    v1 = v0;
    v2 = *(sqlite3_stmt **)(v0 + 8);
    if (v2)
    {
      if (sqlite3_step(v2) == 100)
      {
        v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v4 = *MEMORY[0x1E0D362F8];
        do
        {
          sqlite3_column_int(*(sqlite3_stmt **)(v1 + 8), 0);
          v5 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(v1 + 8), 1);
          v6 = sqlite3_column_bytes(*(sqlite3_stmt **)(v1 + 8), 1);
          if (v5)
            v7 = v6 == 0;
          else
            v7 = 1;
          if (v7)
            v8 = 0;
          else
            v8 = CFDataCreate(v3, v5, v6);
          v9 = objc_msgSend((id)objc_msgSend((id)JWDecodeCodableObjectWithStandardAllowlist(), "string"), "stringByRemovingCharactersFromSet:", objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", v4));
          v10 = CSDBSqliteConnectionStatementForSQL();
          if (v10 && *(_QWORD *)(v10 + 8))
          {
            if (v9)
              CSDBSqliteBindTextFromCFString();
            else
              CSDBSqliteBindNull();
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }

        }
        while (sqlite3_step(*(sqlite3_stmt **)(v1 + 8)) == 100);
      }
    }
  }
  return 1;
}

void *IMDCreateCFErrorWithQueryErrorCode(int a1, sqlite3 *a2, uint64_t a3)
{
  const char *v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v5 = sqlite3_errmsg(a2);
    if (v5)
      a3 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@, error: %@"), a3, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5));
  }
  v6 = objc_alloc(MEMORY[0x1E0CB35C8]);
  v10 = *MEMORY[0x1E0CB2D50];
  v11[0] = a3;
  v7 = (void *)objc_msgSend(v6, "initWithDomain:code:userInfo:", CFSTR("SQL_ERROR"), a1, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1));
  v8 = IMLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    sub_1ABC5DE18(v7, v8);
  return v7;
}

const void *sub_1ABBD560C()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  const void *Value;
  const void *v3;

  v0 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
  if (!v0)
    return 0;
  v1 = v0;
  Value = CFDictionaryGetValue(v0, (const void *)*MEMORY[0x1E0C9AB90]);
  v3 = Value;
  if (Value)
    CFRetain(Value);
  CFRelease(v1);
  return v3;
}

uint64_t sub_1ABBD5664()
{
  uint64_t (*v0)(void);
  NSObject *v1;
  const __CFString *v2;
  NSObject *v3;
  uint64_t v4;
  const __CFString *v5;
  const __CFString *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  int v11;
  const __CFString *v12;
  __int16 v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v0 = (uint64_t (*)(void))MEMORY[0x1AF435000]("DMIsMigrationNeeded", CFSTR("DataMigration"));
  if (byte_1ED0D2880)
  {
    byte_1ED0D2880 = v0();
    if (IMOSLoggingEnabled())
    {
      v1 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        if (byte_1ED0D2880)
          v2 = CFSTR("YES");
        else
          v2 = CFSTR("NO");
        v11 = 138412290;
        v12 = v2;
        _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_INFO, "system migration finished: %@", (uint8_t *)&v11, 0xCu);
      }
    }
    if (byte_1ED0D2880)
    {
      if (!IMOSLoggingEnabled())
        return 1;
      v3 = OSLogHandleForIMEventCategory();
      v4 = 1;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        LOWORD(v11) = 0;
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "system needs to finish migration still, not allowing indexing", (uint8_t *)&v11, 2u);
      }
      return v4;
    }
  }
  v5 = (const __CFString *)sub_1ABBD560C();
  if (v5)
  {
    CFPreferencesSynchronize(CFSTR("com.apple.imdsmsrecordstore"), CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B230]);
    v6 = (const __CFString *)CFPreferencesCopyValue(CFSTR("kIMDPersistenceLastBuild"), CFSTR("com.apple.imdsmsrecordstore"), CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B250]);
    if (v6 && CFStringCompare(v5, v6, 1uLL) == kCFCompareEqualTo)
    {
      if (IMOSLoggingEnabled())
      {
        v9 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          v11 = 138412546;
          v12 = v6;
          v13 = 2112;
          v14 = v5;
          _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "Migration not needed, allowing indexing, lastBuild: %@ currentBuild: %@", (uint8_t *)&v11, 0x16u);
        }
      }
      v4 = 0;
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        v7 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          v11 = 138412546;
          v12 = v6;
          v13 = 2112;
          v14 = v5;
          _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Needs migration, not allowing indexing, lastBuild: %@, currentBuild: %@", (uint8_t *)&v11, 0x16u);
        }
      }
      v4 = 1;
      if (!v6)
        goto LABEL_29;
    }
    CFRelease(v6);
LABEL_29:
    CFRelease(v5);
    return v4;
  }
  if (IMOSLoggingEnabled())
  {
    v8 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "No current build version, allowing indexing", (uint8_t *)&v11, 2u);
    }
  }
  return 0;
}

uint64_t IMDSystemMigrationOccurred()
{
  uint64_t result;

  if (byte_1ED0D38B8)
    return 1;
  result = sub_1ABBD5664() ^ 1;
  byte_1ED0D38B8 = result;
  return result;
}

void IMDSystemMigrationSetHasMigrated(int a1)
{
  const void *v1;
  NSObject *v2;
  const __CFString *v3;
  int v4;
  const void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  byte_1ED0D38B8 = a1;
  if (a1)
  {
    v1 = sub_1ABBD560C();
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        v4 = 138412290;
        v5 = v1;
        _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "We have migrated, lastBuild: %@", (uint8_t *)&v4, 0xCu);
      }
    }
    v3 = (const __CFString *)*MEMORY[0x1E0C9B230];
    CFPreferencesSetValue(CFSTR("kIMDPersistenceLastBuild"), v1, CFSTR("com.apple.imdsmsrecordstore"), CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B230]);
    CFPreferencesSynchronize(CFSTR("com.apple.imdsmsrecordstore"), CFSTR("mobile"), v3);
    if (v1)
      CFRelease(v1);
  }
}

BOOL IMDSaveWallpaperForCNContact(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  id v17;
  char v18;
  id v19;
  char v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  void (*v36[4])(void);
  id v37;
  uint64_t *v38;
  id v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  uint8_t buf[4];
  id v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v40 = 0;
  v41 = &v40;
  v42 = 0x2020000000;
  v43 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v45 = v3;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "handle to save wallpaper for: %@", buf, 0xCu);
      }

    }
    objc_msgSend(MEMORY[0x1E0D397A8], "sharedInstance");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "fetchCNContactForHandleWithID:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D397A8], "sharedInstance");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D397A8], "keysForNicknameHandling");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "completedContact:withKeys:", v7, v9);
    v10 = (id)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      v11 = objc_msgSend(v10, "mutableCopy");
      if (!v4
        || (objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v4),
            v12 = (void *)objc_claimAutoreleasedReturnValue(),
            objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:", v12),
            v13 = (void *)objc_claimAutoreleasedReturnValue(),
            v12,
            !v13))
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v45 = v3;
            _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "updated contact wallpaper with nil image from handle: %@", buf, 0xCu);
          }

        }
        v13 = 0;
      }
      objc_msgSend(MEMORY[0x1E0D397A8], "sharedInstance");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "getContactStore");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      v17 = objc_alloc_init(MEMORY[0x1E0C973D0]);
      objc_msgSend(v17, "updateContact:", v11);
      v39 = 0;
      v18 = objc_msgSend(v16, "executeSaveRequest:error:", v17, &v39);
      v19 = v39;
      *((_BYTE *)v41 + 24) = v18;
      if (v19)
        v20 = 0;
      else
        v20 = v18;
      if ((v20 & 1) == 0)
      {
        IMLogHandleForCategory();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          sub_1ABC5E164((uint64_t)v19, v21, v22, v23, v24, v25, v26, v27);

      }
    }
    else
    {
      IMLogHandleForCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1ABC5E0FC((uint64_t)v3, v11, v28, v29, v30, v31, v32, v33);
    }

  }
  else
  {
    v36[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v36[1] = (void (*)(void))3221225472;
    v36[2] = (void (*)(void))sub_1ABBD6CAC;
    v36[3] = (void (*)(void))&unk_1E5AB1D30;
    v38 = &v40;
    v37 = v3;
    __syncXPCIMDSaveWallpaperForCNContact_IPCAction(v36, (uint64_t)v37, (uint64_t)v4);
    v10 = v37;
  }

  v34 = *((_BYTE *)v41 + 24) != 0;
  _Block_object_dispose(&v40, 8);

  return v34;
}

void sub_1ABBD6CAC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_BOOL(v3, "BOOL_result");
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412290;
      v7 = v5;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "successfully saved wallpaper for: %@", (uint8_t *)&v6, 0xCu);
    }

  }
}

id sub_1ABBD6DB4()
{
  if (qword_1EEC40350 != -1)
    dispatch_once(&qword_1EEC40350, &unk_1E5AAF228);
  return (id)qword_1EEC40360;
}

void sub_1ABBD6DF4()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *attr;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_DEFAULT, 0);
  attr = objc_claimAutoreleasedReturnValue();

  v1 = dispatch_queue_create("IMDCoreSpotlightClientQueue", attr);
  v2 = (void *)qword_1EEC40360;
  qword_1EEC40360 = (uint64_t)v1;

  dispatch_queue_set_specific((dispatch_queue_t)qword_1EEC40360, "IMDCoreSpotlightClientRequestQueue", (void *)1, 0);
}

void sub_1ABBD6E7C()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];
  uint8_t v6[16];
  uint8_t buf[16];

  if (!dispatch_get_specific("IMDCoreSpotlightClientRequestQueue"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v0 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "**************************************************************************", buf, 2u);
      }

    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v1 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_INFO, "********* Spotlight work done on wrong queue, please file a radar ********", v6, 2u);
      }

    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v5 = 0;
        _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "**************************************************************************", v5, 2u);
      }

    }
    IMLogHandleForCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      sub_1ABC5E1CC();

    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "forceAutoBugCaptureWithSubType:errorPayload:type:context:", CFSTR("Threading Issue"), 0, CFSTR("Spotlight"), CFSTR("Spotlight work unexpectedly done off the Spotlight queue"));

  }
}

void sub_1ABBD7050(void *a1)
{
  id v1;
  NSObject *v2;

  v1 = a1;
  sub_1ABBD6DB4();
  v2 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v2, v1);

}

void sub_1ABBD7094(void *a1)
{
  id v1;
  NSObject *v2;

  v1 = a1;
  sub_1ABBE4300();
  v2 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v2, v1);

}

void IMDCoreSpotlightIndexSearchableItemsAsync(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218242;
      v13 = objc_msgSend(v5, "count");
      v14 = 2112;
      v15 = v6;
      _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Indexing %lu number of items with Index %@", buf, 0x16u);
    }

  }
  if ((sub_1ABBD7240() & 1) == 0)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1ABBD72E4;
    v8[3] = &unk_1E5AB86C0;
    v9 = v6;
    v10 = v5;
    v11 = a2;
    sub_1ABBD7050(v8);

  }
}

uint64_t sub_1ABBD7240()
{
  int v0;
  NSObject *v1;
  uint8_t v3[16];

  v0 = objc_msgSend(MEMORY[0x1E0D397F8], "supportsSpotlight");
  if ((v0 & 1) == 0 && IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_INFO, "Not donating to spotlight since it is not enabled", v3, 2u);
    }

  }
  return v0 ^ 1u;
}

BOOL sub_1ABBD72E4(uint64_t a1)
{
  return sub_1ABBD733C(*(void **)(a1 + 32), 0, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48), 10000000000);
}

void sub_1ABBD731C(void *a1)
{
  objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_1ABBD7328(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

BOOL sub_1ABBD733C(void *a1, void *a2, void *a3, uint64_t a4, int64_t a5)
{
  id v9;
  id v10;
  id v11;
  dispatch_semaphore_t v12;
  NSObject *v13;
  dispatch_time_t v14;
  _BOOL8 v15;
  _QWORD v17[4];
  dispatch_semaphore_t v18;

  v9 = a3;
  v10 = a2;
  v11 = a1;
  v12 = dispatch_semaphore_create(0);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = sub_1ABBE43B0;
  v17[3] = &unk_1E5AB0868;
  v18 = v12;
  v13 = v12;
  sub_1ABBE1440(v11, v10, v9, a4, v17);

  v14 = dispatch_time(0, a5);
  v15 = dispatch_semaphore_wait(v13, v14) != 0;

  return v15;
}

id IMDDeriveObjectsForMessagesWithLastRowIDAndBatchSizeUsingBlock(_QWORD *a1, _QWORD *a2, uint64_t a3, void *a4, void *a5)
{
  id v7;
  void (**v8)(id, void *, void *);
  void *v9;
  uint64_t v10;
  IMDMessageRecordBatchFetcher *v11;
  int v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  IMDMessageRecordBatchFetcher *v24;
  uint64_t (**v27)(void);
  void *context;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD aBlock[4];
  id v35;
  IMDMessageRecordBatchFetcher *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  void (*v50)(uint64_t);
  id v51;
  uint8_t buf[4];
  uint64_t v53;
  __int16 v54;
  id v55;
  __int16 v56;
  uint64_t v57;
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = a5;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
    v7 = objc_alloc_init(MEMORY[0x1E0D36AE8]);
  v10 = objc_msgSend(MEMORY[0x1E0D397C8], "messageRecordBatchSize");
  v11 = -[IMDMessageRecordBatchFetcher initWithAssociatedChatGUID:sortAscending:]([IMDMessageRecordBatchFetcher alloc], "initWithAssociatedChatGUID:sortAscending:", 0, 0);
  -[IMDRecordBatchFetcher setLastRowID:](v11, "setLastRowID:", *a1);
  -[IMDMessageRecordBatchFetcher setParentedOnly:](v11, "setParentedOnly:", 1);
  v46 = 0;
  v47 = &v46;
  v48 = 0x3032000000;
  v49 = sub_1ABBD784C;
  v50 = sub_1ABBD785C;
  v51 = 0;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v10);
  v51 = (id)objc_claimAutoreleasedReturnValue();
  v42 = 0;
  v43 = &v42;
  v44 = 0x2020000000;
  v45 = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1ABBD7864;
  aBlock[3] = &unk_1E5AB8738;
  v38 = &v46;
  v39 = a3;
  v37 = &v42;
  v29 = v7;
  v35 = v29;
  v24 = v11;
  v36 = v24;
  v40 = v10;
  v41 = a1;
  v27 = (uint64_t (**)(void))_Block_copy(aBlock);
  do
  {
    context = (void *)MEMORY[0x1AF435474]();
    v12 = v27[2]();
    objc_msgSend(v29, "startTimingForKey:", CFSTR("indexCreation"));
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v13 = (id)v47[5];
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v58, 16);
    if (v14)
    {
      v15 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v31 != v15)
            objc_enumerationMutation(v13);
          v17 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
          objc_msgSend(v17, "objectAtIndexedSubscript:", 0, v24);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "objectAtIndexedSubscript:", 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v8[2](v8, v18, v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          if (v20)
            objc_msgSend(v9, "addObjectsFromArray:", v20);

        }
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v58, 16);
      }
      while (v14);
    }

    objc_msgSend(v29, "stopTimingForKey:", CFSTR("indexCreation"));
    objc_autoreleasePoolPop(context);
  }
  while (v12);
  *a2 = v43[3];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = v43[3];
      *(_DWORD *)buf = 134218498;
      v53 = a3;
      v54 = 2112;
      v55 = v29;
      v56 = 2048;
      v57 = v22;
      _os_log_impl(&dword_1ABB60000, v21, OS_LOG_TYPE_INFO, "Finished index creation with batch size %lu : %@ - processed %lu messages", buf, 0x20u);
    }

  }
  _Block_object_dispose(&v42, 8);
  _Block_object_dispose(&v46, 8);

  return v9;
}

uint64_t sub_1ABBD784C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABBD785C(uint64_t a1)
{

}

BOOL sub_1ABBD7864(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _BOOL8 v7;
  _QWORD v9[6];
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) >= *(_QWORD *)(a1 + 64))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "removeAllObjects");
    return 0;
  }
  else
  {
    v15 = 0;
    v16 = &v15;
    v17 = 0x3032000000;
    v18 = sub_1ABBD784C;
    v19 = sub_1ABBD785C;
    v20 = 0;
    objc_msgSend(*(id *)(a1 + 32), "startTimingForKey:", CFSTR("sqlQuery"));
    v2 = MEMORY[0x1E0C809B0];
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_1ABBD7A64;
    v10[3] = &unk_1E5AB86E8;
    v12 = &v15;
    v3 = *(id *)(a1 + 40);
    v14 = vextq_s8(*(int8x16_t *)(a1 + 64), *(int8x16_t *)(a1 + 64), 8uLL);
    v4 = *(_QWORD *)(a1 + 48);
    v11 = v3;
    v13 = v4;
    IMDPersistencePerformBlock(v10, 1);
    objc_msgSend((id)v16[5], "lastObject");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    **(_QWORD **)(a1 + 80) = objc_msgSend(v5, "rowID");

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) += objc_msgSend((id)v16[5], "count");
    objc_msgSend(*(id *)(a1 + 32), "stopTimingForKey:", CFSTR("sqlQuery"));
    objc_msgSend(*(id *)(a1 + 32), "startTimingForKey:", CFSTR("dictionaryConversion"));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "removeAllObjects");
    v9[0] = v2;
    v9[1] = 3221225472;
    v9[2] = sub_1ABBD7AB8;
    v9[3] = &unk_1E5AB8710;
    v6 = *(_QWORD *)(a1 + 56);
    v9[4] = &v15;
    v9[5] = v6;
    IMDPersistencePerformBlock(v9, 1);
    objc_msgSend(*(id *)(a1 + 32), "stopTimingForKey:", CFSTR("dictionaryConversion"));
    v7 = objc_msgSend((id)v16[5], "count") != 0;

    _Block_object_dispose(&v15, 8);
  }
  return v7;
}

void sub_1ABBD7A4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1ABBD7A64(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = (void *)a1[4];
  if (a1[7] >= a1[8] - *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24))
    v3 = a1[8] - *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
  else
    v3 = a1[7];
  objc_msgSend(v2, "nextBatchWithSize:", v3);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(a1[5] + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_1ABBD7AB8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v2 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v18, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        objc_msgSend(v7, "chatRecord", (_QWORD)v13);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
        {
          v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
          IMCopyIndexableItemDictionaryForRecord(v7);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v17[0] = v10;
          IMCopyIndexableChatDictionaryForRecord(v8, 0);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v17[1] = v11;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v17, 2);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "addObject:", v12);

        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v18, 16);
    }
    while (v4);
  }

}

void IMDCoreSpotlightAddMessageGUID(void *a1, int64_t a2)
{
  __CFString *v3;
  __CFString *v4;
  void *v5;
  __CFString *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  __CFString *v10;
  int64_t v11;

  v3 = a1;
  if (v3)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v4 = (__CFString *)IMDMessageRecordCopyMessageForGUID(v3);
      -[__CFString chatRecord](v4, "chatRecord");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = sub_1ABBD7D10;
      v8[3] = &unk_1E5AB86C0;
      v9 = v5;
      v10 = v4;
      v11 = a2;
      v6 = v4;
      v7 = v5;
      sub_1ABBD7050(v8);

    }
    else
    {
      __syncXPCIMDCoreSpotlightAddMessageGUID_IPCAction(0, (uint64_t)v3, a2);
    }
  }

}

void sub_1ABBD7D10(uint64_t a1)
{
  IMDChatAddMessageToSpotlight(*(void **)(a1 + 32), *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void IMDChatAddMessageToSpotlight(void *a1, void *a2, uint64_t a3)
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  NSObject *v14;
  id v15;
  void *v16;
  int v17;
  void *v18;
  void *context;
  id v20;
  id v21;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[4];
  id v29;
  id v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t);
  id v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t);
  id v44;
  uint8_t buf[4];
  id v46;
  __int16 v47;
  void *v48;
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  v39 = 0;
  v40 = &v39;
  v41 = 0x3032000000;
  v42 = sub_1ABBD784C;
  v43 = sub_1ABBD785C;
  v44 = 0;
  v33 = 0;
  v34 = &v33;
  v35 = 0x3032000000;
  v36 = sub_1ABBD784C;
  v37 = sub_1ABBD785C;
  v38 = 0;
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = sub_1ABBD8970;
  v28[3] = &unk_1E5AB87A8;
  v31 = &v39;
  v21 = v5;
  v29 = v21;
  v20 = v4;
  v30 = v20;
  v32 = &v33;
  IMDPersistencePerformBlock(v28, 1);
  context = (void *)MEMORY[0x1AF435474]();
  v6 = (void *)v40[5];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3 == 1000);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setValue:forKey:", v7, CFSTR("isIncomingMessage"));

  +[IMDCoreSpotlightManager sharedInstance](IMDCoreSpotlightManager, "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = (void *)objc_msgSend(v8, "newSearchableItemsForMessageItemDictionary:chatDictionary:reindexing:", v40[5], v34[5], 0);

  if (objc_msgSend(v23, "count"))
  {
    if (qword_1ED0D3928 != -1)
      dispatch_once(&qword_1ED0D3928, &unk_1E5AB87C8);
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v9 = v23;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v24, v49, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v25 != v11)
            objc_enumerationMutation(v9);
          v13 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v14 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(v13, "uniqueIdentifier");
              v15 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v13, "domainIdentifier");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412546;
              v46 = v15;
              v47 = 2112;
              v48 = v16;
              _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "Indexing item ID %@ domain %@", buf, 0x16u);

            }
          }
          objc_msgSend((id)qword_1ED0D3930, "suggestionsFromMessage:options:completionHandler:", v13, 3, &unk_1E5AAE7B8);
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v24, v49, 16);
      }
      while (v10);
    }

    v17 = objc_msgSend(MEMORY[0x1E0D39858], "messageSummarizationEnabled") ^ 1;
    if (a3 != 1000)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      IMCoreSpotlightIndex();
    else
      IMCoreSpotlightCriticalIndex();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    IMDCoreSpotlightIndexSearchableItemsAsync(v9, a3, v18);

  }
  objc_autoreleasePoolPop(context);
  sub_1ABBD8304(v20, v21);

  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v39, 8);

}

void sub_1ABBD8108()
{
  JUMPOUT(0x1ABBD8128);
}

void IMDCoreSpotlightAddMessageGUIDs(void *a1, int64_t a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __CFString *v10;
  void *v11;
  __CFString *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  __CFString *v17;
  int64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (objc_msgSend(v3, "count"))
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v14 = v3;
      v4 = v3;
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v20;
        v8 = MEMORY[0x1E0C809B0];
        do
        {
          v9 = 0;
          do
          {
            if (*(_QWORD *)v20 != v7)
              objc_enumerationMutation(v4);
            v10 = (__CFString *)IMDMessageRecordCopyMessageForGUID(*(const __CFString **)(*((_QWORD *)&v19 + 1) + 8 * v9));
            -[__CFString chatRecord](v10, "chatRecord");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            v15[0] = v8;
            v15[1] = 3221225472;
            v15[2] = sub_1ABBD82F4;
            v15[3] = &unk_1E5AB86C0;
            v16 = v11;
            v17 = v10;
            v18 = a2;
            v12 = v10;
            v13 = v11;
            sub_1ABBD7050(v15);

            ++v9;
          }
          while (v6 != v9);
          v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
        }
        while (v6);
      }

      v3 = v14;
    }
    else
    {
      __syncXPCIMDCoreSpotlightAddMessageGUIDs_IPCAction(0, (uint64_t)v3, a2);
    }
  }

}

void sub_1ABBD82F4(uint64_t a1)
{
  IMDChatAddMessageToSpotlight(*(void **)(a1 + 32), *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1ABBD8304(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  objc_class *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void *v16;
  id v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  id v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  v3 = a1;
  v4 = a2;
  v20 = 0;
  v21 = (uint64_t)&v20;
  v22 = 0x2050000000;
  v5 = (void *)qword_1ED0D3820;
  v23 = (uint64_t (*)(uint64_t, uint64_t))qword_1ED0D3820;
  v6 = MEMORY[0x1E0C809B0];
  if (!qword_1ED0D3820)
  {
    v26 = MEMORY[0x1E0C809B0];
    v27 = 3221225472;
    v28 = (uint64_t)sub_1ABBE43B8;
    v29 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E5AB0C88;
    v30 = (void (*)(uint64_t))&v20;
    sub_1ABBE43B8((uint64_t)&v26);
    v5 = *(void **)(v21 + 24);
  }
  v7 = objc_retainAutorelease(v5);
  _Block_object_dispose(&v20, 8);
  objc_msgSend(v7, "sharedManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = 0;
  v27 = (uint64_t)&v26;
  v28 = 0x3032000000;
  v29 = sub_1ABBD784C;
  v30 = sub_1ABBD785C;
  v31 = 0;
  v32 = 0;
  v33 = &v32;
  v34 = 0x2050000000;
  v9 = (void *)qword_1ED0D3828;
  v35 = qword_1ED0D3828;
  if (!qword_1ED0D3828)
  {
    v20 = v6;
    v21 = 3221225472;
    v22 = (uint64_t)sub_1ABBE44B0;
    v23 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E5AB0C88;
    v24 = (void (*)(uint64_t))&v32;
    sub_1ABBE44B0((uint64_t)&v20);
    v9 = (void *)v33[3];
  }
  v10 = objc_retainAutorelease(v9);
  _Block_object_dispose(&v32, 8);
  v31 = objc_alloc_init(v10);
  v20 = 0;
  v21 = (uint64_t)&v20;
  v22 = 0x3032000000;
  v23 = sub_1ABBD784C;
  v24 = sub_1ABBD785C;
  v25 = 0;
  v13 = v6;
  v14 = 3221225472;
  v15 = sub_1ABBD8570;
  v16 = &unk_1E5AB8760;
  v11 = v4;
  v17 = v11;
  v18 = &v26;
  v19 = &v20;
  IMDPersistencePerformBlock(&v13, 1);
  v12 = *(_QWORD *)(v21 + 40);
  if (v12)
    objc_msgSend(v8, "suggestionsForRequest:withCompletion:", v12, &unk_1E5AAEC88, v13, v14, v15, v16);

  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v26, 8);

}

void sub_1ABBD8534(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1ABBD8570(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _BOOL4 v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  uint64_t v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  objc_class *v17;
  id v18;
  id *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  void *v27;
  _QWORD v28[5];
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "text");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = (void *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 32), "text");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)objc_msgSend(v4, "copy");
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setTitle:", v5);

    v6 = objc_msgSend(*(id *)(a1 + 32), "associatedMessageType") >= 2000
      && objc_msgSend(*(id *)(a1 + 32), "associatedMessageType") < 3000;
    v8 = objc_msgSend(*(id *)(a1 + 32), "associatedMessageType") >= 3000
      && objc_msgSend(*(id *)(a1 + 32), "associatedMessageType") < 4000;
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setTapBack:", v6 | v8);
    objc_msgSend(*(id *)(a1 + 32), "dateRead");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      objc_msgSend(*(id *)(a1 + 32), "dateRead");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", 0.0);
      v10 = objc_msgSend(v5, "isEqual:", v3) ^ 1;
    }
    else
    {
      v10 = 0;
    }
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setRead:", v10);
    if (v9)
    {

    }
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setEmote:", 0);
    v11 = objc_msgSend(*(id *)(a1 + 32), "isFromMe");
    if ((v11 & 1) != 0)
    {
      v12 = 0;
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "handleRecord");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "canonicalizedURIString");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = (void *)objc_msgSend(v3, "copy");
    }
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setSenderIdentifier:", v12);
    if ((v11 & 1) == 0)
    {

    }
    objc_msgSend(*(id *)(a1 + 32), "text");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)objc_msgSend(v13, "copy");
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setSummary:", v14);

    objc_msgSend(*(id *)(a1 + 32), "date");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setDateSent:", v15);

    v33[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v33, 1);
    v7 = objc_claimAutoreleasedReturnValue();
    v29 = 0;
    v30 = &v29;
    v31 = 0x2050000000;
    v16 = (void *)qword_1ED0D3830;
    v32 = qword_1ED0D3830;
    if (!qword_1ED0D3830)
    {
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 3221225472;
      v28[2] = sub_1ABBE4504;
      v28[3] = &unk_1E5AB0C88;
      v28[4] = &v29;
      sub_1ABBE4504((uint64_t)v28);
      v16 = (void *)v30[3];
    }
    v17 = objc_retainAutorelease(v16);
    _Block_object_dispose(&v29, 8);
    v18 = [v17 alloc];
    v19 = (id *)(a1 + 32);
    if (objc_msgSend(*(id *)(a1 + 32), "isFromMe"))
      v20 = MEMORY[0x1E0C9AA60];
    else
      v20 = v7;
    v21 = objc_msgSend(v18, "initWithType:receivedMessages:", 0, v20);
    v23 = *(_QWORD *)(a1 + 48);
    v22 = a1 + 48;
    v24 = *(_QWORD *)(v23 + 8);
    v25 = *(void **)(v24 + 40);
    *(_QWORD *)(v24 + 40) = v21;

    if (objc_msgSend(*v19, "isFromMe"))
      v26 = v7;
    else
      v26 = 0;
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)v22 + 8) + 40), "setSenderMessages:", v26);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)v22 + 8) + 40), "setIncludesDynamicSuggestions:", 1);
    objc_msgSend(*v19, "date");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)v22 + 8) + 40), "setRequestDate:", v27);

  }
  else
  {
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      sub_1ABC5E204();
  }

}

void sub_1ABBD894C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBD8970(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  IMCopyIndexableItemDictionaryForRecord(*(void **)(a1 + 32));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = *(id *)(a1 + 40);
  if (v5)
    goto LABEL_7;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = objc_msgSend(*(id *)(a1 + 32), "rowID");
      v11 = 134217984;
      v12 = v7;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Getting chat for message id %lld", (uint8_t *)&v11, 0xCu);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "chatRecord");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
LABEL_7:
    IMCopyIndexableChatDictionaryForRecord(v5, 0);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
}

void sub_1ABBD8AB0()
{
  IMDSuggestions *v0;
  void *v1;

  v0 = objc_alloc_init(IMDSuggestions);
  v1 = (void *)qword_1ED0D3930;
  qword_1ED0D3930 = (uint64_t)v0;

}

void sub_1ABBD8AD8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  if (objc_msgSend(v9, "count") && IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v14 = 138412290;
      v15 = v9;
      _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "Number of pseudo-contacts %@", (uint8_t *)&v14, 0xCu);
    }

  }
  if (objc_msgSend(v10, "count") && IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = 138412290;
      v15 = v10;
      _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "Number of pseudo-event %@", (uint8_t *)&v14, 0xCu);
    }

  }
}

void IMDCoreSpotlightDeleteMessageGUIDS(void *a1, int64_t a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v7;
  int v8;
  int v9;
  NSObject *v10;
  id v11;
  IMDMessageRecordBatchFetcher *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  NSObject *v24;
  id v25;
  _QWORD v26[4];
  id v27;
  _QWORD v28[4];
  id v29;
  int64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (objc_msgSend(v3, "count"))
  {
    if (sub_1ABBD7240())
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v4 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Spotlight is disabled. Bailing.", buf, 2u);
        }
LABEL_20:

      }
    }
    else
    {
      IMCoreSpotlightIndex();
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      if (v5)
      {
        objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v6, "isUnderFirstDataProtectionLock");

        if (v7)
        {
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v4 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, " => Before first unlock, skipping indexing", buf, 2u);
            }
            goto LABEL_20;
          }
        }
        else
        {
          v8 = IMDIsRunningInDatabaseServerProcess();
          v9 = IMOSLoggingEnabled();
          if (v8)
          {
            if (v9)
            {
              OSLogHandleForIMFoundationCategory();
              v10 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                v36 = v3;
                _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, " => Nuking messages: %@", buf, 0xCu);
              }

            }
            v28[0] = MEMORY[0x1E0C809B0];
            v28[1] = 3221225472;
            v28[2] = sub_1ABBD91E0;
            v28[3] = &unk_1E5AB6308;
            v11 = v3;
            v29 = v11;
            v30 = a2;
            sub_1ABBD7050(v28);
            v25 = v11;
            v12 = objc_alloc_init(IMDMessageRecordBatchFetcher);
            objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("%K = %@ AND %K IN %@"), *MEMORY[0x1E0D382B0], MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D382A8], v25);
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            -[IMDRecordBatchFetcher setPredicate:](v12, "setPredicate:", v13);

            -[IMDRecordBatchFetcher setBatchSize:](v12, "setBatchSize:", 50);
            objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            do
            {
              v15 = (void *)MEMORY[0x1AF435474]();
              -[IMDRecordBatchFetcher nextBatch](v12, "nextBatch");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = objc_msgSend(v16, "count");
              v34 = 0u;
              v32 = 0u;
              v33 = 0u;
              v31 = 0u;
              v18 = v16;
              v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v31, buf, 16);
              if (v19)
              {
                v20 = *(_QWORD *)v32;
                do
                {
                  for (i = 0; i != v19; ++i)
                  {
                    if (*(_QWORD *)v32 != v20)
                      objc_enumerationMutation(v18);
                    objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * i), "guid");
                    v22 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v14, "addObject:", v22);

                  }
                  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v31, buf, 16);
                }
                while (v19);
              }

              objc_autoreleasePoolPop(v15);
            }
            while (v17 >= 0x32);
            v23 = (void *)objc_msgSend(v14, "copy");

            if (objc_msgSend(v23, "count"))
            {
              v26[0] = MEMORY[0x1E0C809B0];
              v26[1] = 3221225472;
              v26[2] = sub_1ABBD9398;
              v26[3] = &unk_1E5AB0868;
              v27 = v23;
              sub_1ABBD7094(v26);

            }
          }
          else
          {
            if (v9)
            {
              OSLogHandleForIMFoundationCategory();
              v24 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1ABB60000, v24, OS_LOG_TYPE_INFO, "IMDCoreSpotlightDeleteMessageGUIDS called in a process that is not in IMDPersistenceAgent. Dispatching to IMDP via XPC to continue.", buf, 2u);
              }

            }
            __syncXPCIMDCoreSpotlightDeleteMessageGUIDs_IPCAction(0, (uint64_t)v3, a2);
          }
        }
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v4 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "No Spotlight index available for this platform. Bailing.", buf, 2u);
        }
        goto LABEL_20;
      }
    }
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Attempted to delete messages without providing guids. Bailing.", buf, 2u);
    }
    goto LABEL_20;
  }

}

void sub_1ABBD91E0(uint64_t a1)
{
  id v2;

  IMCoreSpotlightIndex();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1ABBD921C(v2, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1ABBD921C(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = objc_msgSend(v6, "count");
      NSStringFromIMCoreSpotlightIndexReason();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 134218242;
      v14 = v8;
      v15 = 2112;
      v16 = v9;
      _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Deleting %ld messages from index due to %@", (uint8_t *)&v13, 0x16u);

    }
  }
  v10 = objc_opt_respondsToSelector();
  IMCoreSpotlightIndex();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if ((v10 & 1) != 0)
    objc_msgSend(v11, "deleteSearchableItemsWithIdentifiers:reason:completionHandler:", v6, a3, &unk_1E5AB8CF0);
  else
    objc_msgSend(v11, "deleteSearchableItemsWithIdentifiers:completionHandler:", v6, &unk_1E5AB8CF0);

}

void sub_1ABBD9398(uint64_t a1)
{
  IMDRemoveCoreRecentsRecordForMessageGUIDs(*(void **)(a1 + 32));
}

void IMDRemoveCoreRecentsRecordForMessageGUIDs(void *a1)
{
  NSObject *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];
  uint8_t v26[128];
  uint8_t buf[4];
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v17 = a1;
  if (objc_msgSend(v17, "count"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v1 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v28 = v17;
        _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_INFO, "Attempting to remove messages from CoreRecents. guids={%@}", buf, 0xCu);
      }

    }
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v3 = v17;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v21;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v21 != v5)
            objc_enumerationMutation(v3);
          v7 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * i);
          objc_msgSend(MEMORY[0x1E0D397C0], "referenceURLForMessageGUID:", v7);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0D397C0], "deprecatedReferenceURLForMessageGUID:", v7);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v25[0] = v8;
          v25[1] = v9;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v25, 2);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "addObjectsFromArray:", v10);

        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
      }
      while (v4);
    }

    v11 = objc_alloc_init(MEMORY[0x1E0D182A0]);
    v24 = *MEMORY[0x1E0D18270];
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v24, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setDomains:", v12);

    +[IMDCoreSpotlightDispatchObject sharedInstance](IMDCoreSpotlightDispatchObject, "sharedInstance");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "recentsInstance");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1ABBE4300();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = sub_1ABBD9E10;
    v18[3] = &unk_1E5AB8830;
    v19 = v2;
    v16 = v2;
    objc_msgSend(v14, "performRecentsSearch:queue:completion:", v11, v15, v18);

  }
}

void IMDCoreSpotlightDeleteAttachmentGUIDs(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  int v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  uint8_t buf[4];
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if ((sub_1ABBD7240() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isUnderFirstDataProtectionLock");

    if (v5)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, " => Before first unlock, skipping indexing", buf, 2u);
        }

      }
    }
    else
    {
      IMCoreSpotlightIndex();
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (v3 && v7)
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v8 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v13 = v3;
            _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, " => Nuking attachment message parts: %@", buf, 0xCu);
          }

        }
        v9[0] = MEMORY[0x1E0C809B0];
        v9[1] = 3221225472;
        v9[2] = sub_1ABBD9858;
        v9[3] = &unk_1E5AB6308;
        v10 = v3;
        v11 = a2;
        sub_1ABBD7050(v9);

      }
    }
  }

}

void sub_1ABBD9858(uint64_t a1)
{
  id v2;

  IMCoreSpotlightIndex();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1ABBD921C(v2, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void IMDCoreSpotlightDeleteCoreRecentsWithHandles(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  int v18;
  void *v19;
  void *v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  _IMDCoreRecentsApiInit();
  v2 = (void *)MEMORY[0x1AF435474]();
  objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isUnderFirstDataProtectionLock");

  if (v4)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        LOWORD(v18) = 0;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, " => Deleting this chat", (uint8_t *)&v18, 2u);
      }

    }
  }
  else
  {
    if (!v1 && IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LOWORD(v18) = 0;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "IMDCoreRecentDeleteChat bailing because we were passed no handles", (uint8_t *)&v18, 2u);
      }

    }
    if ((unint64_t)objc_msgSend(v1, "count") <= 1)
    {
      objc_msgSend(v1, "firstObject");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "canonicalizedURIString");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v8, "length"))
      {
        v9 = objc_alloc_init(MEMORY[0x1E0D182A0]);
        v21[0] = *MEMORY[0x1E0D18278];
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 1);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "setDomains:", v10);

        v11 = (void *)MEMORY[0x1E0D18298];
        v20 = v8;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v20, 1);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "predicateForKey:inCollection:", *MEMORY[0x1E0D18238], v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v9, "setSearchPredicate:", v13);
        if (v9)
        {
          +[IMDCoreSpotlightDispatchObject sharedInstance](IMDCoreSpotlightDispatchObject, "sharedInstance");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "recentsInstance");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          dispatch_get_global_queue(0, 0);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "performRecentsSearch:queue:completion:", v9, v16, &unk_1E5AAEBC8);

        }
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          v18 = 138412290;
          v19 = v7;
          _os_log_impl(&dword_1ABB60000, v17, OS_LOG_TYPE_INFO, "performRecentsSearch: not performing recents SEARCH since a valid handleAlias was not found for handleRecord: gi%@", (uint8_t *)&v18, 0xCu);
        }

      }
    }
  }
  objc_autoreleasePoolPop(v2);

}

void sub_1ABBD9BD0(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  char v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  uint8_t buf[4];
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v15 = v4;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "performRecentsSearch - recents = %@", buf, 0xCu);
    }

  }
  if (v4 && objc_msgSend(v4, "count"))
  {
    +[IMDCoreSpotlightDispatchObject sharedInstance](IMDCoreSpotlightDispatchObject, "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "recentsInstance");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 0;
    v9 = objc_msgSend(v8, "removeRecentContacts:error:", v4, &v13);
    v10 = v13;

    if ((v9 & 1) == 0 && IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v15 = v10;
        _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "Recents remove failed with error %@", buf, 0xCu);
      }

    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v15 = v5;
        _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "performRecentsSearch: recents SEARCH failed with error %@", buf, 0xCu);
      }

    }
    v10 = 0;
  }

}

void sub_1ABBD9E10(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  id v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  uint64_t v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v21 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v24 != v9)
          objc_enumerationMutation(v7);
        v11 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        objc_msgSend(v11, "metadata");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "objectForKey:", CFSTR("corerecents:reference-url"));
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v13))
          objc_msgSend(v6, "addObject:", v11);

      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
    }
    while (v8);
  }

  if (objc_msgSend(v6, "count"))
  {
    +[IMDCoreSpotlightDispatchObject sharedInstance](IMDCoreSpotlightDispatchObject, "sharedInstance");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "recentsInstance");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(v6, "copy");
    v22 = 0;
    objc_msgSend(v15, "removeRecentContacts:error:", v16, &v22);
    v17 = v22;

    v18 = IMOSLoggingEnabled();
    if (v17)
    {
      if (v18)
      {
        OSLogHandleForIMFoundationCategory();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v28 = (uint64_t)v17;
          _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Recent messages remove failed with error %@.", buf, 0xCu);
        }
LABEL_19:

      }
    }
    else if (v18)
    {
      OSLogHandleForIMFoundationCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v20 = objc_msgSend(v6, "count");
        *(_DWORD *)buf = 134217984;
        v28 = v20;
        _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Successfully removed %ld messages from CoreRecents.", buf, 0xCu);
      }
      goto LABEL_19;
    }

  }
}

void sub_1ABBDA0C4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABBDA074);
  }
  _Unwind_Resume(a1);
}

void IMDCoreSpotlightDeleteChatGUID(void *a1, int64_t a2)
{
  id v3;
  void *v4;
  int v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  int64_t v12;
  uint8_t buf[4];
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if ((sub_1ABBD7240() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isUnderFirstDataProtectionLock");

    if (v5)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, " => Before first unlock, skipping indexing", buf, 2u);
        }

      }
    }
    else
    {
      IMCoreSpotlightIndex();
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (v3 && v7)
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v8 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v14 = v3;
            _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, " => Nuking chat: %@", buf, 0xCu);
          }

        }
        if (IMDIsRunningInDatabaseServerProcess())
        {
          +[IMDCoreSpotlightManager sharedInstance](IMDCoreSpotlightManager, "sharedInstance");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "deleteChatSearchableItemForChatGUID:reason:", v3, a2);

          v10[0] = MEMORY[0x1E0C809B0];
          v10[1] = 3221225472;
          v10[2] = sub_1ABBDA2F8;
          v10[3] = &unk_1E5AB6308;
          v11 = v3;
          v12 = a2;
          sub_1ABBD7050(v10);

        }
        else
        {
          __syncXPCIMDCoreSpotlightDeleteChatGUID_IPCAction(0, (uint64_t)v3, a2);
        }
      }
    }
  }

}

void sub_1ABBDA2F8(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD aBlock[4];
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  IMCoreSpotlightIndex();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1ABBDA4E0;
  aBlock[3] = &unk_1E5AB09D8;
  v9 = *(id *)(a1 + 32);
  v3 = _Block_copy(aBlock);
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      NSStringFromIMCoreSpotlightIndexReason();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v13 = v5;
      v14 = 2112;
      v15 = v6;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Deleting %@ from index due to %@", buf, 0x16u);

    }
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v11 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v11, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "deleteSearchableItemsWithDomainIdentifiers:reason:completionHandler:", v7, IMCSIndexReasonFromIMIndexReason(), v3);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v10, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "deleteSearchableItemsWithDomainIdentifiers:completionHandler:", v7, v3);
  }

}

void sub_1ABBDA4E0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3 && IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412546;
      v7 = v5;
      v8 = 2112;
      v9 = v3;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "IMDCoreSpotlightDeleteChatGUID: Failed to delete items with domain identifier %@ with error %@", (uint8_t *)&v6, 0x16u);
    }

  }
}

void IMDCoreSpotlightAddChatGUID(void *a1, int64_t a2)
{
  id v3;
  void *v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  int64_t v10;
  uint8_t buf[4];
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if ((sub_1ABBD7240() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isUnderFirstDataProtectionLock");

    if (v5)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, " => Before first unlock, skipping indexing", buf, 2u);
        }

      }
    }
    else if (v3)
    {
      if (IMDIsRunningInDatabaseServerProcess())
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v7 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v12 = v3;
            _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, " => Indexing chat: %@", buf, 0xCu);
          }

        }
        v8[0] = MEMORY[0x1E0C809B0];
        v8[1] = 3221225472;
        v8[2] = sub_1ABBDA7AC;
        v8[3] = &unk_1E5AB6308;
        v9 = v3;
        v10 = a2;
        sub_1ABBD7050(v8);

      }
      else
      {
        __syncXPCIMDCoreSpotlightAddChatGUID_IPCAction(0, (uint64_t)v3, a2);
      }
    }
  }

}

void sub_1ABBDA7AC(uint64_t a1)
{
  id v2;

  +[IMDCoreSpotlightManager sharedInstance](IMDCoreSpotlightManager, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addChatSearchableItemForChatGUID:reason:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void IMDCoreSpotlightAddChatGUIDs(void *a1, int64_t a2)
{
  id v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t v16[128];
  uint8_t buf[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = objc_msgSend(v3, "count");
  v5 = IMOSLoggingEnabled();
  if (v4)
  {
    if (v5)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v18 = objc_msgSend(v3, "count");
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Adding %lu chats to CoreSpotlight", buf, 0xCu);
      }

    }
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v7 = v3;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v13;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v13 != v9)
            objc_enumerationMutation(v7);
          IMDCoreSpotlightAddChatGUID(*(void **)(*((_QWORD *)&v12 + 1) + 8 * v10++), a2);
        }
        while (v8 != v10);
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v8);
    }

  }
  else if (v5)
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "No chats to add", buf, 2u);
    }

  }
}

void IMDCoreSpotlightReIndexForHandles(void *a1)
{
  id v1;
  IMDCoreSpotlightReindexer *v2;
  void *v3;
  IMDCoreSpotlightReindexer *v4;

  v1 = a1;
  v2 = [IMDCoreSpotlightReindexer alloc];
  IMCoreSpotlightIndex();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[IMDCoreSpotlightReindexer initWithHandles:batchDeferralTime:messageAge:index:](v2, "initWithHandles:batchDeferralTime:messageAge:index:", v1, 10, v3, 30.0);

  -[IMDCoreSpotlightReindexer reindex](v4, "reindex");
}

void IMDCoreSpotlightReindexMessagesWhileBlocking(void *a1, int64_t a2, int a3, void *a4)
{
  id v7;
  void (**v8)(_QWORD);
  void *v9;
  int v10;
  NSObject *v11;
  const char *v12;
  void (**v13)(void);
  _QWORD v14[4];
  void (**v15)(_QWORD);
  _QWORD v16[4];
  id v17;
  void (**v18)(_QWORD);
  int64_t v19;
  uint8_t buf[16];

  v7 = a1;
  v8 = a4;
  objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isUnderFirstDataProtectionLock");

  if (v10)
  {
    if (!IMOSLoggingEnabled())
      goto LABEL_13;
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      goto LABEL_12;
    *(_WORD *)buf = 0;
    v12 = " => Before first unlock, skipping re-indexing of messages";
    goto LABEL_11;
  }
  if (!objc_msgSend(v7, "count"))
  {
    if (!IMOSLoggingEnabled())
      goto LABEL_13;
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
LABEL_12:

LABEL_13:
      if (v8)
        v8[2](v8);
      goto LABEL_22;
    }
    *(_WORD *)buf = 0;
    v12 = "Trying to reindex messages with an empty guids array";
LABEL_11:
    _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, v12, buf, 2u);
    goto LABEL_12;
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = sub_1ABBDAC88;
    v16[3] = &unk_1E5AB8880;
    v17 = v7;
    v18 = v8;
    v19 = a2;
    sub_1ABBD7050(v16);

  }
  else
  {
    if (v8)
    {
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABBDAFAC;
      v14[3] = &unk_1E5AB7B10;
      v15 = v8;
      v13 = (void (**)(void))_Block_copy(v14);

    }
    else
    {
      v13 = 0;
    }
    if (a3)
      __syncXPCIMDCoreSpotlightReindexMessages_IPCAction(v13, v7, a2);
    else
      __asyncXPCIMDCoreSpotlightReindexMessages_IPCAction(v13, v7, a2);

  }
LABEL_22:

}

void sub_1ABBDAC88(uint64_t a1)
{
  NSObject *v2;
  int v3;
  void *v4;
  _BOOL4 v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, void *);
  void *v19;
  id v20;
  id v21;
  uint8_t buf[4];
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMEventCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = objc_msgSend(*(id *)(a1 + 32), "count");
      *(_DWORD *)buf = 67109120;
      LODWORD(v23) = v3;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Request to re-index messages with messages count: %d", buf, 8u);
    }

  }
  IMCoreSpotlightIndex();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4 == 0;

  if (v5)
  {
    v15 = *(_QWORD *)(a1 + 40);
    if (v15)
      (*(void (**)(void))(v15 + 16))();
  }
  else
  {
    v6 = objc_alloc_init(MEMORY[0x1E0D36AE8]);
    objc_msgSend(v6, "startTimingForKey:", CFSTR("total time for indexing messages"));
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
    v8 = *(void **)(a1 + 32);
    v16 = MEMORY[0x1E0C809B0];
    v17 = 3221225472;
    v18 = sub_1ABBDAF04;
    v19 = &unk_1E5AB8858;
    v9 = v6;
    v20 = v9;
    v10 = v7;
    v21 = v10;
    objc_msgSend(v8, "enumerateObjectsUsingBlock:", &v16);
    v11 = *(_QWORD *)(a1 + 48);
    IMCoreSpotlightIndex();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    IMDCoreSpotlightIndexSearchableItemsAsync(v10, v11, v12);

    objc_msgSend(v9, "stopTimingForKey:", CFSTR("total time for indexing messages"), v16, v17, v18, v19);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMEventCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v23 = v9;
        _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "Done re-indexing messages, time: %@", buf, 0xCu);
      }

    }
    v14 = *(_QWORD *)(a1 + 40);
    if (v14)
      (*(void (**)(void))(v14 + 16))();

  }
}

void sub_1ABBDAF04(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = (void *)MEMORY[0x1AF435474]();
  objc_msgSend(*(id *)(a1 + 32), "startTimingForKey:", CFSTR("generate indexable item"));
  +[IMDCoreSpotlightManager sharedInstance](IMDCoreSpotlightManager, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "newSearchableItemsForMessageGUID:reindexing:", v6, 1);

  objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v5);
  objc_msgSend(*(id *)(a1 + 32), "stopTimingForKey:", CFSTR("generate indexable item"));

  objc_autoreleasePoolPop(v3);
}

uint64_t sub_1ABBDAFAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void IMDCoreSpotlightReindexMessages(void *a1, int64_t a2, void *a3)
{
  IMDCoreSpotlightReindexMessagesWhileBlocking(a1, a2, 1, a3);
}

void IMDCoreSpotlightReindexMessagesWithCollaborationMetadata(void *a1, void *a2, int64_t a3)
{
  id v5;
  id v6;
  void *v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  _BOOL4 v12;
  id v13;
  void *v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  id v25;
  id v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  id v32;
  _QWORD v33[4];
  id v34;
  id v35;
  uint8_t buf[4];
  id v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isUnderFirstDataProtectionLock");

  if (v8)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, " => Before first unlock, skipping re-indexing of messages", buf, 2u);
      }
LABEL_33:

    }
  }
  else if (objc_msgSend(v5, "count"))
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMEventCategory();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v37) = objc_msgSend(v5, "count");
          _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "Request to re-index messages with messages count: %d", buf, 8u);
        }

      }
      IMCoreSpotlightIndex();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = v11 == 0;

      if (v12)
      {
        IMLogHandleForCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          sub_1ABC5E23C();
        goto LABEL_33;
      }
      if (!v6)
      {
        IMLogHandleForCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          sub_1ABC5E26C();
        goto LABEL_33;
      }
      v13 = objc_alloc_init(MEMORY[0x1E0D36AE8]);
      objc_msgSend(v13, "startTimingForKey:", CFSTR("total time for indexing messages"));
      v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
      v33[0] = MEMORY[0x1E0C809B0];
      v33[1] = 3221225472;
      v33[2] = sub_1ABBDB4F4;
      v33[3] = &unk_1E5AB8858;
      v26 = v13;
      v34 = v26;
      v27 = v14;
      v35 = v27;
      objc_msgSend(v5, "enumerateObjectsUsingBlock:", v33);
      v32 = 0;
      objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v6, 1, &v32);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = v32;
      if (v15)
      {
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v16 = v27;
        v17 = -[NSObject countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v28, v38, 16);
        if (v17)
        {
          v18 = *(_QWORD *)v29;
          do
          {
            for (i = 0; i != v17; ++i)
            {
              if (*(_QWORD *)v29 != v18)
                objc_enumerationMutation(v16);
              objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * i), "attributeSet");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              +[IMDSharedWithYouMetadataManager collaborationMetadataKey](IMDSharedWithYouMetadataManager, "collaborationMetadataKey");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v20, "setValue:forCustomKey:", v15, v21);

            }
            v17 = -[NSObject countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v28, v38, 16);
          }
          while (v17);
        }
      }
      else
      {
        IMLogHandleForCategory();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          sub_1ABC5E29C((uint64_t)v25, v16, v22);
      }

      +[IMDCoreSpotlightManager sharedInstance](IMDCoreSpotlightManager, "sharedInstance");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "reIndexWithLocalProofOfInclusionForItemsAsync:", v27);

      objc_msgSend(v26, "stopTimingForKey:", CFSTR("total time for indexing messages"));
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMEventCategory();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v37 = v26;
          _os_log_impl(&dword_1ABB60000, v24, OS_LOG_TYPE_INFO, "Done re-indexing messages, time: %@", buf, 0xCu);
        }

      }
    }
    else
    {
      __syncXPCIMDCoreSpotlightReindexMessagesWithCollaborationMetadata_IPCAction(0, v5, (uint64_t)v6, a3);
    }
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "Trying to reindex messages with an empty guids array", buf, 2u);
    }
    goto LABEL_33;
  }

}

void sub_1ABBDB4F4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = (void *)MEMORY[0x1AF435474]();
  objc_msgSend(*(id *)(a1 + 32), "startTimingForKey:", CFSTR("generate indexable item"));
  +[IMDCoreSpotlightManager sharedInstance](IMDCoreSpotlightManager, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "newSearchableItemsForMessageGUID:reindexing:", v6, 1);

  objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v5);
  objc_msgSend(*(id *)(a1 + 32), "stopTimingForKey:", CFSTR("generate indexable item"));

  objc_autoreleasePoolPop(v3);
}

void IMDCoreSpotlightSetNeedsMessageReindexBlocking(int a1, int64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  int v7;
  NSObject *v8;
  void *v9;
  void (*v10[4])(void);
  void (**v11)(_QWORD);
  uint8_t buf[4];
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isUnderFirstDataProtectionLock");

  if (v7)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        v13 = "void IMDCoreSpotlightSetNeedsMessageReindexBlocking(BOOL, IMCoreSpotlightIndexReason, __strong dispatch_block_t)";
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, " => %s Before first unlock, skipping indexing", buf, 0xCu);
      }

    }
    if (v5)
      v5[2](v5);
  }
  else if (IMDIsRunningInDatabaseServerProcess())
  {
    +[IMDCoreSpotlightManager sharedInstance](IMDCoreSpotlightManager, "sharedInstance");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setNeedsMessageReindexingWithReason:completion:", a2, v5);

  }
  else
  {
    v10[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v10[1] = (void (*)(void))3221225472;
    v10[2] = (void (*)(void))sub_1ABBDB74C;
    v10[3] = (void (*)(void))&unk_1E5AB7B10;
    v11 = v5;
    __XPCIMDCoreSpotlightSetNeedsMessageReindex_IPCAction(v10, a1, a2);

  }
}

uint64_t sub_1ABBDB74C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void IMDCoreSpotlightSetNeedsMessageReindex(int64_t a1, void *a2)
{
  IMDCoreSpotlightSetNeedsMessageReindexBlocking(1, a1, a2);
}

void IMDCoreSpotlightIndexNextMessageBatchIfNeeded(uint64_t a1, int64_t a2, void *a3)
{
  IMDCoreSpotlightIndexNextMessageBatchIfNeededBlocking(1, a1, a2, a3);
}

void IMDCoreSpotlightIndexNextMessageBatchIfNeededBlocking(int a1, uint64_t a2, int64_t a3, void *a4)
{
  void (**v7)(_QWORD);
  void *v8;
  int v9;
  NSObject *v10;
  void (*v11[4])(void);
  void (**v12)(_QWORD);
  _QWORD v13[4];
  void (**v14)(_QWORD);
  uint64_t v15;
  int64_t v16;
  uint8_t buf[4];
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isUnderFirstDataProtectionLock");

  if (v9)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        v18 = "void IMDCoreSpotlightIndexNextMessageBatchIfNeededBlocking(BOOL, NSUInteger, IMCoreSpotlightIndexReason, _"
              "_strong dispatch_block_t)";
        _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, " => %s Before first unlock, skipping indexing", buf, 0xCu);
      }

    }
    if (v7)
      v7[2](v7);
  }
  else if (IMDIsRunningInDatabaseServerProcess())
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_1ABBDB958;
    v13[3] = &unk_1E5AB88D0;
    v15 = a2;
    v16 = a3;
    v14 = v7;
    sub_1ABBD7050(v13);

  }
  else
  {
    v11[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v11[1] = (void (*)(void))3221225472;
    v11[2] = (void (*)(void))sub_1ABBDBA08;
    v11[3] = (void (*)(void))&unk_1E5AB7B10;
    v12 = v7;
    __XPCIMDCoreSpotlightIndexNextMessageBatchIfNeeded_IPCAction(v11, a1, a2, a3);

  }
}

void sub_1ABBDB958(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  +[IMDCoreSpotlightManager sharedInstance](IMDCoreSpotlightManager, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABBDB9F4;
  v5[3] = &unk_1E5AB88A8;
  v6 = *(id *)(a1 + 32);
  objc_msgSend(v2, "indexNextMessageBatchIfNeeded:reason:completion:", v4, v3, v5);

}

uint64_t sub_1ABBDB9F4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1ABBDBA08(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1ABBDBA1C(int a1, int64_t a2, _QWORD *a3)
{
  _BOOL4 v4;
  id v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  id v12;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v4 = IMDMessageRecordDeleteBatchOfDeletedMessageGuids(a1, &v12, a3);
  v5 = v12;
  v6 = v5;
  if (v4)
  {
    if (v5 && objc_msgSend(v5, "count"))
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          v8 = objc_msgSend(v6, "count");
          *(_DWORD *)buf = 134217984;
          v14 = v8;
          _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Found %ld messages guids to remove from spotlight", buf, 0xCu);
        }

      }
      IMDCoreSpotlightDeleteMessageGUIDS(v6, a2);
      v9 = 1;
LABEL_15:

      goto LABEL_16;
    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "Found 0 messages guids to remove from spotlight", buf, 2u);
      }

    }
    v9 = 0;
    if (v6)
      goto LABEL_15;
  }
  else
  {
    v9 = 0;
  }
LABEL_16:

  return v9;
}

void IMDCoreSpotlightScheduleUpdateForDeletedMessages(uint64_t a1)
{
  void *v1;
  _QWORD aBlock[5];

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1ABBDBC38;
  aBlock[3] = &unk_1E5AB07F8;
  aBlock[4] = a1;
  v1 = _Block_copy(aBlock);
  if ((IMIsRunningInUnitTesting() & 1) == 0)
    _IMDPerformBlockWithDelay((uint64_t)v1);

}

uint64_t sub_1ABBDBC38(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v4 = 0;
  result = sub_1ABBDBA1C(2000, v2, &v4);
  if ((_DWORD)result)
    return IMDCoreSpotlightScheduleUpdateForDeletedMessages(*(_QWORD *)(a1 + 32));
  return result;
}

uint64_t IMDCoreSpotlightGetPerChatHistoryLimit()
{
  if (qword_1EEC404F0 != -1)
    dispatch_once(&qword_1EEC404F0, &unk_1E5AB88F0);
  return dword_1EEC404F8;
}

void sub_1ABBDBCBC()
{
  void *v0;
  uint64_t v1;

  dword_1EEC404F8 = 200;
  objc_msgSend(MEMORY[0x1E0D20BF8], "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "performanceClass");

  if ((unint64_t)(v1 + 1) <= 3)
    dword_1EEC404F8 = dword_1ABC69FB0[v1 + 1];
}

uint64_t IMDCoreSpotlightMarkAttachment()
{
  return 0;
}

void sub_1ABBDBD6C()
{
  IMDCoreSpotlightManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCoreSpotlightManager);
  v1 = (void *)qword_1ED0D3AB0;
  qword_1ED0D3AB0 = (uint64_t)v0;

}

void sub_1ABBDC024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBDC03C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_1ABBDC0BC()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;
  NSObject *v3;

  v0 = dispatch_queue_create(0, 0);
  v1 = (void *)qword_1EEC40500;
  qword_1EEC40500 = (uint64_t)v0;

  v2 = qword_1EEC40500;
  dispatch_get_global_queue(2, 0);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_set_target_queue(v2, v3);

}

void sub_1ABBDC160()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(MEMORY[0x1E0C80D50], DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.imdpersistence.scrutinyMessagesQueue", v2);
  v1 = (void *)qword_1ED0D3810;
  qword_1ED0D3810 = (uint64_t)v0;

}

uint64_t sub_1ABBDC1F4()
{
  uint64_t result;

  result = MEMORY[0x1AF434FF4](CFSTR("SLCollaborationHandshakeController"), CFSTR("SocialLayer"));
  qword_1EEC40510 = result;
  return result;
}

void sub_1ABBDC2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBDC300(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_1ABBDC3E8(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "addObject:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "array");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  IMSetDomainValueForKey();

}

void sub_1ABBDC51C(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  unint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _DWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "removeObject:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count");
  if (v3 < 0xC9)
  {
    v6 = v2;
  }
  else
  {
    v4 = v3;
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v10[0] = 67109120;
        v10[1] = 200;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Blocklist size > %d on load, truncating", (uint8_t *)v10, 8u);
      }

    }
    objc_msgSend(v2, "subarrayWithRange:", v4 - 200, 200);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E10]), "initWithArray:", v6);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 16);
    *(_QWORD *)(v8 + 16) = v7;

  }
  IMSetDomainValueForKey();

}

void sub_1ABBDC774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBDC790(uint64_t a1)
{
  const __CFString *v2;
  uint64_t v3;
  void *v4;

  v2 = IMDMessageRecordCopyMessageForGUID(*(const __CFString **)(a1 + 32));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1ABBDC8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1ABBDC900(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  IMCopyIndexableItemDictionaryForRecord(*(void **)(a1 + 32));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = objc_msgSend(*(id *)(a1 + 32), "rowID");
      v12 = 134217984;
      v13 = v6;
      _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Getting chat for message id %lld", (uint8_t *)&v12, 0xCu);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "chatRecord");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    IMCopyIndexableChatDictionaryForRecord(v7, 0);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

  }
}

void sub_1ABBDDBBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  _Block_object_dispose(&v3, 8);
  _Block_object_dispose(&v4, 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1ABBDDCEC()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;
  NSObject *v3;

  v0 = dispatch_queue_create(0, 0);
  v1 = (void *)qword_1ED0D3860;
  qword_1ED0D3860 = (uint64_t)v0;

  v2 = qword_1ED0D3860;
  dispatch_get_global_queue(2, 0);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_set_target_queue(v2, v3);

}

void sub_1ABBDDD50(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        objc_msgSend(v6, "startTimingWithProfiler:", *(_QWORD *)(a1 + 40), (_QWORD)v8);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = objc_msgSend(v6, "cancelIndexingForItem:", *(_QWORD *)(a1 + 48));
        objc_msgSend(v6, "auxiliaryItemsForPrimaryAttributes:withItem:chat:isReindexing:timingProfiler:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 128), *(_QWORD *)(a1 + 40));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 72), "addObjectsFromArray:", v7);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24))
        {
          objc_msgSend(*(id *)(a1 + 40), "stopProfilingAfterIndexersBailed");

          goto LABEL_11;
        }
        objc_msgSend(v6, "indexItem:withChat:isReindexing:metadataToUpdate:timingProfiler:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 128), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
        objc_msgSend(v6, "stopTimingWithProfiler:", *(_QWORD *)(a1 + 40));

      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_11:

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24))
    objc_msgSend(*(id *)(a1 + 40), "startTimingForKey:", CFSTR("post-processor"));
  objc_msgSend(*(id *)(a1 + 80), "_postProcessIndexingForItem:chatDictionary:isReindexing:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 128), (_QWORD)v8);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24))
    objc_msgSend(*(id *)(a1 + 40), "stopTimingForKey:", CFSTR("post-processor"));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 96));
}

void sub_1ABBDDF2C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  uint64_t v17;
  id v18;
  NSObject *v19;
  uint64_t v20;

  if (a2 == 1)
  {
    v18 = objc_begin_catch(a1);
    objc_msgSend(*(id *)(v17 + 40), "abortCurrentTimers");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 112) + 8) + 24) = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 120) + 8) + 24) = 1;
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v20 = *(_QWORD *)(v17 + 88);
        LODWORD(buf) = 138412546;
        *(_QWORD *)((char *)&buf + 4) = v20;
        WORD6(buf) = 2112;
        *(_QWORD *)((char *)&buf + 14) = v18;
        _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Indexing %@ threw exception %@", (uint8_t *)&buf, 0x16u);
      }

    }
    objc_end_catch();
    JUMPOUT(0x1ABBDDEECLL);
  }
  _Unwind_Resume(a1);
}

void sub_1ABBDE24C()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_resolvedURL"), 1, 0, 0, 0);
  v1 = (void *)qword_1EEC40520;
  qword_1EEC40520 = v0;

}

void sub_1ABBDE4E8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  const char *v7;
  __int16 v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3 && IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "uniqueIdentifier");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = 136315650;
      v7 = "-[IMDCoreSpotlightManager _updateItem:withResolvedURL:]_block_invoke";
      v8 = 2112;
      v9 = v5;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "IMDCoreSpotlight %s: indexing resolved url searchable item %@ failed with error %@", (uint8_t *)&v6, 0x20u);

    }
  }

}

void sub_1ABBDE898(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  const char *v7;
  __int16 v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3 && IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "uniqueIdentifier");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = 136315650;
      v7 = "-[IMDCoreSpotlightManager _updateItem:withFPProviderID:]_block_invoke";
      v8 = 2112;
      v9 = v5;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "IMDCoreSpotlight %s: Updating FileProviderID for searchable item %@ failed with error %@", (uint8_t *)&v6, 0x20u);

    }
  }

}

void sub_1ABBDEE68(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  const char *v7;
  __int16 v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3 && IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "uniqueIdentifier");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = 136315650;
      v7 = "-[IMDCoreSpotlightManager _updateItem:withIdentityMap:localIdentity:localIdentityProof:]_block_invoke";
      v8 = 2112;
      v9 = v5;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "IMDCoreSpotlight %s: Updating Proof of inclusion for searchable item %@ failed with error %@", (uint8_t *)&v6, 0x20u);

    }
  }

}

void sub_1ABBDF320(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  __int128 v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1ABBDF3D4;
  v9[3] = &unk_1E5AB8A38;
  v10 = v6;
  v11 = *(_OWORD *)(a1 + 32);
  v12 = v5;
  v7 = v5;
  v8 = v6;
  dispatch_async(MEMORY[0x1E0C80D38], v9);

}

void sub_1ABBDF3D4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1 + 32;
  if (*(_QWORD *)(a1 + 32))
  {
    IMLogHandleForCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC5E4E0(v1, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 40), "uniqueIdentifier");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = 138412290;
        v15 = v11;
        _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "Found resolved URL for item %@", (uint8_t *)&v14, 0xCu);

      }
    }
    v13 = *(_QWORD *)(a1 + 40);
    v12 = *(void **)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "absoluteString");
    v2 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "_updateItem:withResolvedURL:", v13, v2);
  }

}

void *sub_1ABBDF820()
{
  void *result;

  result = (void *)MEMORY[0x1AF435000]("FPProviderForShareURL", CFSTR("FileProvider"));
  off_1EEC40538 = result;
  return result;
}

void sub_1ABBDF84C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;
  __int128 v14;

  v5 = a2;
  v6 = a3;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1ABBDF924;
  v9[3] = &unk_1E5AB8AC8;
  v10 = v5;
  v11 = v6;
  v12 = *(id *)(a1 + 32);
  v13 = *(id *)(a1 + 40);
  v14 = *(_OWORD *)(a1 + 48);
  v7 = v6;
  v8 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], v9);

}

void sub_1ABBDF924(uint64_t a1)
{
  __CFString *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  int v8;
  NSObject *v9;
  __CFString *v10;
  NSObject *v11;
  __CFString *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  BOOL v16;
  char v17;
  int v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  int v22;
  const __CFString *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = (__CFString *)*(id *)(a1 + 32);
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_23;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 40), "description");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138412546;
      v23 = v2;
      v24 = 2112;
      v25 = v4;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Failed to get FPProviderID:%@ for URL. Error: %@", (uint8_t *)&v22, 0x16u);

    }
  }
  if (qword_1EEC40550 != -1)
    dispatch_once(&qword_1EEC40550, &unk_1E5AAEA60);
  if (off_1EEC40548)
  {
    off_1EEC40548();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "host");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v5, "containsObject:", v6);
    v8 = IMOSLoggingEnabled();
    if (v7)
    {
      if (v8)
      {
        OSLogHandleForIMFoundationCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          LOWORD(v22) = 0;
          _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "Setting default FileProviderID for URL", (uint8_t *)&v22, 2u);
        }

      }
      if (qword_1EEC40560 != -1)
        dispatch_once(&qword_1EEC40560, &unk_1E5AB8AA0);
      if (off_1EEC40558 && (off_1EEC40558(), (v10 = (__CFString *)objc_claimAutoreleasedReturnValue()) != 0))
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            v22 = 138412290;
            v23 = v10;
            _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "Found FileProviderID from FPCloudDocsProviderID(): %@", (uint8_t *)&v22, 0xCu);
          }

        }
        v12 = v10;

        v2 = v12;
      }
      else
      {
        v12 = CFSTR("com.apple.CloudDocs.MobileDocumentsFileProvider");
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            v22 = 138412290;
            v23 = CFSTR("com.apple.CloudDocs.MobileDocumentsFileProvider");
            _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "Did not find FileProviderID from FPCloudDocsProviderID(), falling back to default ID: %@", (uint8_t *)&v22, 0xCu);
          }

        }
      }

    }
    else
    {
      if (v8)
      {
        OSLogHandleForIMFoundationCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          LOWORD(v22) = 0;
          _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "Host for URL not in ValidSharingURLs so not defaulting FPProviderID", (uint8_t *)&v22, 2u);
        }

      }
      v12 = v2;
    }

  }
  else
  {
LABEL_23:
    v12 = v2;
  }
  objc_msgSend(*(id *)(a1 + 56), "filename");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "length") == 0;

  if (-[__CFString length](v12, "length"))
    v17 = v16;
  else
    v17 = 1;
  v18 = IMOSLoggingEnabled();
  if ((v17 & 1) != 0)
  {
    if (v18)
    {
      OSLogHandleForIMFoundationCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 56), "filename");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138412546;
        v23 = v12;
        v24 = 2112;
        v25 = v20;
        _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Not setting FPProviderID: %@ for URL in CSSI. FileName: %@", (uint8_t *)&v22, 0x16u);

      }
    }
  }
  else
  {
    if (v18)
    {
      OSLogHandleForIMFoundationCategory();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        v22 = 138412290;
        v23 = v12;
        _os_log_impl(&dword_1ABB60000, v21, OS_LOG_TYPE_INFO, "Setting FPProviderID: %@ for URL in CSSI", (uint8_t *)&v22, 0xCu);
      }

    }
    objc_msgSend(*(id *)(a1 + 64), "_updateItem:withFPProviderID:", *(_QWORD *)(a1 + 72), v12);
  }

}

void *sub_1ABBDFE20()
{
  void *result;

  result = (void *)MEMORY[0x1AF435000]("CKValidSharingURLHostnames", CFSTR("CloudKit"));
  off_1EEC40548 = result;
  return result;
}

void *sub_1ABBDFE4C()
{
  void *result;

  result = (void *)MEMORY[0x1AF435000]("FPCloudDocsProviderID", CFSTR("FileProvider"));
  off_1EEC40558 = result;
  return result;
}

void sub_1ABBE0604(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1ABBDFF24);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1ABBE0624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE065C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  id v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC5E640(v6, v7);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        v12 = 138412546;
        v13 = v5;
        v14 = 2112;
        v15 = v9;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "Fetched localIdentityProof: %@ for localIdentity: %@", (uint8_t *)&v12, 0x16u);
      }

    }
    v10 = *(void **)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "handleToIdentityMap");
    v7 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "_updateItem:withIdentityMap:localIdentity:localIdentityProof:", v11, v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v5);
  }

}

void sub_1ABBE0F60()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_isChatAutoDonating"), 1, 0, 0, 0);
  v1 = (void *)qword_1ED0D3760;
  qword_1ED0D3760 = v0;

}

void sub_1ABBE0FE4()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_chatAutoDonatingServerDate"), 1, 0, 0, 0);
  v1 = (void *)qword_1ED0D3818;
  qword_1ED0D3818 = v0;

}

void sub_1ABBE1068()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_chatStyle"), 1, 0, 0, 0);
  v1 = (void *)qword_1ED0D3938;
  qword_1ED0D3938 = v0;

}

void sub_1ABBE10EC()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_localIdentityProof"), 0, 0, 1, 0);
  v1 = (void *)qword_1EEC40568;
  qword_1EEC40568 = v0;

}

void sub_1ABBE1170()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_localIdentity"), 0, 0, 1, 0);
  v1 = (void *)qword_1EEC40578;
  qword_1EEC40578 = v0;

}

void sub_1ABBE11F4()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_handleToIdentityMap"), 0, 0, 1, 0);
  v1 = (void *)qword_1EEC40588;
  qword_1EEC40588 = v0;

}

void sub_1ABBE1278()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_threadIdentifier"), 0, 0, 1, 0);
  v1 = (void *)qword_1EEC40340;
  qword_1EEC40340 = v0;

}

void sub_1ABBE1440(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  id v23;
  void *v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  id v29;
  _QWORD aBlock[4];
  id v31;
  id v32;
  id v33;
  _QWORD v34[4];
  id v35;
  id v36;
  uint8_t buf[4];
  uint64_t v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  id v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v10 = a3;
  v11 = a5;
  objc_msgSend(v8, "beginIndexBatch");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = MEMORY[0x1E0C809B0];
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = sub_1ABBE4658;
  v34[3] = &unk_1E5AB0990;
  v14 = v12;
  v35 = v14;
  v15 = v8;
  v36 = v15;
  objc_msgSend(v15, "indexSearchableItems:completionHandler:", v10, v34);
  aBlock[0] = v13;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1ABBE4750;
  aBlock[3] = &unk_1E5AB8D38;
  v16 = v14;
  v31 = v16;
  v17 = v15;
  v32 = v17;
  v18 = v11;
  v33 = v18;
  v19 = _Block_copy(aBlock);
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "isSpotlightClientStateEnabled");

  if (!v21)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "dataUsingEncoding:", 4);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_8:

    goto LABEL_10;
  }
  if (v9)
  {
    v29 = 0;
    objc_msgSend(v9, "dataWithError:", &v29);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = v29;
    if (!v23)
      goto LABEL_10;
    v24 = v23;
    IMLogHandleForCategory();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
      sub_1ABC5E85C();

    goto LABEL_8;
  }
  v22 = 0;
LABEL_10:
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      v27 = objc_msgSend(v10, "count");
      NSStringFromIMCoreSpotlightIndexReason();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218498;
      v38 = v27;
      v39 = 2112;
      v40 = v28;
      v41 = 2112;
      v42 = v16;
      _os_log_impl(&dword_1ABB60000, v26, OS_LOG_TYPE_INFO, "Indexing %ld searchable items due to %@ - transaction %@", buf, 0x20u);

    }
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v17, "endIndexBatchWithExpectedClientState:newClientState:reason:completionHandler:", 0, v22, IMCSIndexReasonFromIMIndexReason(), v19);
  else
    objc_msgSend(v17, "endIndexBatchWithClientState:completionHandler:", v22, v19);

}

void sub_1ABBE1928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE1940(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  __CFString *v5;

  v5 = (__CFString *)IMDChatRecordCopyChatForGUID(*(CFStringRef *)(a1 + 32));
  IMCopyIndexableChatDictionaryForRecord(v5, 1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1ABBE1D14(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = IMOSLoggingEnabled();
  if (v3)
  {
    if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v12 = 138412290;
        v13 = v3;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Failed to check if we should sanitize indexes, suspending reindexing: %@", (uint8_t *)&v12, 0xCu);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "_suspendReindexingDueToError:", v3);
    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
      (*(void (**)(void))(v6 + 16))();
  }
  else
  {
    if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "_sanitizeIndexesForCurrentVersionIfNeeded complete, kicking off standard indexes", (uint8_t *)&v12, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "_setNeedsIndexing:", 1);
    objc_msgSend(*(id *)(a1 + 32), "_setNeedsDeferredIndexing:", 0);
    +[IMDSpotlightClientStateManager sharedManager](IMDSpotlightClientStateManager, "sharedManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D39B00]), "initWithMaxRowID:totalMessages:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    objc_msgSend(v8, "saveClientState:", v9);

    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "Beginning message reindexing", (uint8_t *)&v12, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "indexChatsWithReason:", *(_QWORD *)(a1 + 64));
    objc_msgSend(*(id *)(a1 + 32), "indexNextMessageBatchIfNeeded:reason:completion:", objc_msgSend(MEMORY[0x1E0D397C8], "reindexFirstBatchSize"), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40));
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "Finished message reindexing", (uint8_t *)&v12, 2u);
      }

    }
  }

}

uint64_t sub_1ABBE1FDC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__sanitizeIndexesForCurrentVersionIfNeeded_);
}

void sub_1ABBE2460(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1ABBE2358);
  }
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1ABBE24E8(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  objc_msgSend(*(id *)(a1 + 32), "stopTimingForKey:", CFSTR("CSDeleteAllIndexes"));
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(void **)(a1 + 32);
      v8 = 138412290;
      v9 = v6;
      _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Index deletion complete - %@", (uint8_t *)&v8, 0xCu);
    }

  }
  if (v4)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = 138412290;
        v9 = v4;
        _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Version mismatch failed to delete all indexes! %@", (uint8_t *)&v8, 0xCu);
      }

    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1ABBE2674(uint64_t a1)
{
  id v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;
  uint64_t v6;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1ABBE26E4;
  v4[3] = &unk_1E5AB8C18;
  v2 = *(id *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = v2;
  v6 = v3;
  sub_1ABBD7050(v4);

}

uint64_t sub_1ABBE26E4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  return result;
}

uint64_t sub_1ABBE2A60(uint64_t a1)
{
  uint64_t active;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1 + 32), "startTimingForKey:", CFSTR("copyAllActiveChats"));
  active = IMDChatRecordCopyAllActiveChats();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = active;

  return objc_msgSend(*(id *)(a1 + 32), "stopTimingForKey:", CFSTR("copyAllActiveChats"));
}

void sub_1ABBE2CB4(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = IMOSLoggingEnabled();
  if (v3)
  {
    if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v10 = 134217984;
        v11 = objc_msgSend(v3, "count");
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Indexing %ld chat records", (uint8_t *)&v10, 0xCu);
      }

    }
    if (!IMSharedHelperSpotlightIndexingPreference())
    {
      v7 = *(void **)(a1 + 32);
      v6 = *(_QWORD *)(a1 + 40);
      objc_msgSend(v7, "searchableIndex");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "_indexSearchableChatItems:withReason:index:blocking:", v3, v6, v8, 1);

    }
  }
  else if (v4)
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "IMDCoreSpotlight: Failed to get chats to index!", (uint8_t *)&v10, 2u);
    }

  }
}

void sub_1ABBE3168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE3180(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  IMCopyIndexableChatDictionaryForRecord(*(void **)(a1 + 32), 1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

BOOL sub_1ABBE368C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  _BOOL8 v11;
  void *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  _WORD v29[9];

  *(_QWORD *)&v29[5] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *a2;
  v6 = objc_msgSend(MEMORY[0x1E0D397C8], "messageSubBatchSize");
  +[IMDSpotlightClientStateManager sharedManager](IMDSpotlightClientStateManager, "sharedManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = 0;
  objc_msgSend(v7, "currentClientStateWithError:", &v25);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v25;

  if (v9)
  {
    IMLogHandleForCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      sub_1ABC5E8CC();

    objc_msgSend(*(id *)(a1 + 32), "_suspendReindexingDueToError:", v9);
    v11 = 0;
  }
  else
  {
    v23 = 0;
    v24 = objc_msgSend(v8, "lastIndexedRowID");
    if (v4 - v5 < v6)
      v6 = v4 - v5;
    v22 = 0;
    v12 = (void *)objc_msgSend(*(id *)(a1 + 32), "_copyNewSearchableIndexesForMessagesWithLastRowID:messageRecordCount:messagesWithItemsGeneratedCount:batchSize:timingCollection:", &v24, &v23, &v22, v6, *(_QWORD *)(a1 + 40));
    v13 = v23;
    if (v23 < v6 && IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218240;
        v27 = v23;
        v28 = 2048;
        *(_QWORD *)v29 = v6;
        _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "messageRecordCount (%lu) < current sub batch size (%lu). Reaching the end of indexing all message records.", buf, 0x16u);
      }

    }
    objc_msgSend(*(id *)(a1 + 40), "startTimingForKey:", CFSTR("CSIngest"));
    LOBYTE(v21) = 1;
    LOBYTE(v20) = v13 < v6;
    objc_msgSend(*(id *)(a1 + 32), "_indexSearchableItems:clientState:lastIndexedRowID:messagesInBatch:messagesWithItemsGeneratedCount:batchSize:lastBatch:withIndex:reason:blockUntilCompleted:completion:", v12, v8, v24, v23, v22, v6, v20, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), v21, 0);
    objc_msgSend(*(id *)(a1 + 40), "stopTimingForKey:", CFSTR("CSIngest"));
    *a2 += v6;
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        v16 = objc_msgSend(v12, "count");
        v17 = *a2;
        v18 = (*(_DWORD *)(a1 + 56) - v17) & ~((*(_DWORD *)(a1 + 56) - v17) >> 31);
        *(_DWORD *)buf = 134218496;
        v27 = v16;
        v28 = 1024;
        *(_DWORD *)v29 = v17;
        v29[2] = 1024;
        *(_DWORD *)&v29[3] = v18;
        _os_log_impl(&dword_1ABB60000, v15, OS_LOG_TYPE_INFO, "Indexed %lld items. Batch progress: %d/%d", buf, 0x18u);
      }

    }
    v11 = v13 >= v6;

  }
  return v11;
}

id sub_1ABBE39F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;

  v4 = (void *)objc_msgSend(*(id *)(a1 + 32), "newSearchableItemsForMessageItemDictionary:chatDictionary:reindexing:", a2, a3, 1);
  if (objc_msgSend(v4, "count"))
    ++**(_QWORD **)(a1 + 40);
  return v4;
}

uint64_t sub_1ABBE3D68(uint64_t a1)
{
  int v2;
  int v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  char v9;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t result;
  id v15;
  uint8_t buf[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 72);
  v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      OSLogHandleForIMFoundationCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Indexing complete!", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "_setNeedsIndexing:", 0);
    +[IMSpotlightEventNotifier sharedNotifier](IMSpotlightEventNotifier, "sharedNotifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "reindexCompletedWithState:reason:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));

  }
  else if (v3)
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 134217984;
      v17 = v7;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "New lastIndexedRowID is %lu", buf, 0xCu);
    }

  }
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isSpotlightClientStateEnabled");

    if ((v9 & 1) == 0)
    {
      +[IMDSpotlightClientStateManager sharedManager](IMDSpotlightClientStateManager, "sharedManager");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 40);
      v15 = 0;
      objc_msgSend(v10, "saveClientState:withError:", v11, &v15);
      v12 = v15;

      if (v12)
      {
        IMLogHandleForCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          sub_1ABC5E938();

        objc_msgSend(*(id *)(a1 + 32), "_suspendReindexingDueToError:", v12);
      }

    }
  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1ABBE3F90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1ABBE4300()
{
  if (qword_1EEC405A0 != -1)
    dispatch_once(&qword_1EEC405A0, &unk_1E5AAE8F8);
  return (id)qword_1EEC40598;
}

void sub_1ABBE4340()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *attr;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_DEFAULT, 0);
  attr = objc_claimAutoreleasedReturnValue();

  v1 = dispatch_queue_create("IMDCoreRecentsClientQueue", attr);
  v2 = (void *)qword_1EEC40598;
  qword_1EEC40598 = (uint64_t)v1;

}

intptr_t sub_1ABBE43B0(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

Class sub_1ABBE43B8(uint64_t a1)
{
  Class result;

  sub_1ABBE440C();
  result = objc_getClass("SROSmartRepliesManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1ABC5E9F8();
  qword_1ED0D3820 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1ABBE440C()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!qword_1ED0D37E0)
  {
    v1 = xmmword_1E5AB8CD8;
    v2 = 0;
    qword_1ED0D37E0 = _sl_dlopen();
  }
  if (!qword_1ED0D37E0)
    sub_1ABC5EA70(&v0);
}

Class sub_1ABBE44B0(uint64_t a1)
{
  Class result;

  sub_1ABBE440C();
  result = objc_getClass("SROSmartRepliesMessage");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1ABC5EAEC();
  qword_1ED0D3828 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1ABBE4504(uint64_t a1)
{
  Class result;

  sub_1ABBE440C();
  result = objc_getClass("SROSmartRepliesSuggestionRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1ABC5EB64();
  qword_1ED0D3830 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1ABBE4558(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2 && IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "_IMDCoreSpotlightDeleteSearchableItems: deleting for searchable items failed with error %@", (uint8_t *)&v4, 0xCu);
    }

  }
}

uint64_t sub_1ABBE462C()
{
  uint64_t result;

  result = MEMORY[0x1AF434FF4](CFSTR("NRURLResolutionManager"), CFSTR("NewsURLResolution"));
  qword_1EEC40530 = result;
  return result;
}

void sub_1ABBE4658(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3 && IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(_QWORD *)(a1 + 40);
      v7 = 138412802;
      v8 = v5;
      v9 = 2112;
      v10 = v3;
      v11 = 2112;
      v12 = v6;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "IMDCoreSpotlightIndexSearchableItems: indexing transaction %@ failed with error %@. Using Index %@", (uint8_t *)&v7, 0x20u);
    }

  }
}

void sub_1ABBE4750(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    IMLogHandleForCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC5EBDC(a1, (uint64_t)v3, v4);

  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v8 = 138412290;
        v9 = v6;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "indexing transaction %@ completed", (uint8_t *)&v8, 0xCu);
      }

    }
    notify_post("com.apple.imdpersistenceagent.notification.spotlightclientstateupdated");
  }
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    (*(void (**)(void))(v7 + 16))();

}

void sub_1ABBE4888(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

uint64_t sub_1ABBE4EF0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABBE4F00(uint64_t a1)
{

}

void sub_1ABBE4F08(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = *(void **)(a1 + 32);
  objc_msgSend(v7, "transferGUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v8) = objc_msgSend(v8, "isEqualToString:", v9);

  if ((_DWORD)v8)
  {
    if (*(_BYTE *)(a1 + 56) && IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD *)(a1 + 40);
        v13 = 136315650;
        v14 = "+[IMDAttachmentSyndicationUtilities _attachmentGUIDIsSyndicatable:syndicationIdentifier:attachmentUTI:attr"
              "ibutedBody:encodedSyndicationRanges:isCMM:verbose:]_block_invoke";
        v15 = 2112;
        v16 = v11;
        v17 = 2112;
        v18 = v12;
        _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "%s Found corresponding IMMessagePartDescriptor for attachment GUID %@ (syndicationIdentifier %@)", (uint8_t *)&v13, 0x20u);
      }

    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
    *a4 = 1;
  }

}

id IMDSMSRecordStoreCreatePathToFilename(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;

  v2 = (void *)MEMORY[0x1AF435474]();
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(v3, "addObject:", CFSTR("/"));
  objc_msgSend(v3, "addObject:", CFSTR("var"));
  objc_msgSend(v3, "addObject:", CFSTR("mobile"));
  objc_msgSend(v3, "addObject:", CFSTR("Library"));
  objc_msgSend(v3, "addObject:", CFSTR("SMS"));
  objc_msgSend(v3, "addObject:", a1);
  v4 = (id)objc_msgSend(MEMORY[0x1E0CB3940], "pathWithComponents:", v3);

  objc_autoreleasePoolPop(v2);
  return v4;
}

id IMDSMSRecordStoreCreateSMSDBPath(int a1)
{
  return (*((id (**)(uint64_t, int))off_1EEC3FBD8 + 2))((uint64_t)off_1EEC3FBD8, a1);
}

void *_IMDSetDatabasePathBlock(const void *a1)
{
  void *result;

  result = _Block_copy(a1);
  off_1EEC3FBD8 = result;
  return result;
}

void *IMDSMSRecordStoreIsDatabaseProtectedAtPath(void *a1, const char *a2)
{
  if (a1)
    return (void *)objc_msgSend(a1, "hasSuffix:", CFSTR("sms.db"));
  return a1;
}

id IMDSMSRecordStoreCopySMSDBPathWithCreate(int a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)MEMORY[0x1AF435474]();
  v3 = (void *)(*((uint64_t (**)(void))off_1EEC3FBD8 + 2))();
  v4 = v3;
  if (a1)
  {
    objc_msgSend(v3, "fileSystemRepresentation");
    CSDBGetMobileUserUID();
    CSDBGetMobileUserGID();
    CSDBCreateDirectoriesToPath();
  }
  v5 = (id)objc_msgSend(v4, "stringByResolvingAndStandardizingPath");
  objc_autoreleasePoolPop(v2);
  return v5;
}

void IMDSMSRecordStoreInvalidateCaches()
{
  if (IMDIsRunningInDatabaseServerProcess())
    _IMDPerformLockedMessageStoreBlockWithoutInitialize((uint64_t)&unk_1E5AAF248);
}

uint64_t sub_1ABBE5C5C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return CSDBRecordStoreInvalidateCachesWithStore();
  return result;
}

uint64_t IMDSMSRecordStoreGetSchemaVersion()
{
  id v0;
  const void *v1;
  const char *v2;
  uint64_t v3;
  void (*v5[5])(void);
  stat v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance"), "isUnderFirstDataProtectionLock");
    v0 = IMDSMSRecordStoreCopySMSDBPathWithCreate(1);
    v1 = v0;
    if (v0)
    {
      v2 = (const char *)objc_msgSend(v0, "UTF8String");
      if (v2)
      {
        memset(&v6, 0, sizeof(v6));
        if (!stat(v2, &v6))
          *((_DWORD *)v8 + 6) = CSDBSqliteUtilitiesGetSchemaVersionAtPathWithProtection();
      }
      CFRelease(v1);
    }
  }
  else
  {
    v5[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v5[1] = (void (*)(void))3221225472;
    v5[2] = (void (*)(void))sub_1ABBE5DB4;
    v5[3] = (void (*)(void))&unk_1E5AAF630;
    v5[4] = (void (*)(void))&v7;
    __syncXPCIMDMessageStoreSchemaVersion_IPCAction(v5);
  }
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1ABBE5D8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBE5DB4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result;

  result = xpc_dictionary_get_uint64(xdict, "uint64_result");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

const __CFString *IMDSMSRecordStoreGetSchema()
{
  void *v0;
  const __CFString *v1;
  void (*v3[5])(void);
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  uint64_t v10;

  v5 = 0;
  v6 = &v5;
  v7 = 0x3052000000;
  v8 = sub_1ABBE5F10;
  v9 = sub_1ABBE5F20;
  v10 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = sub_1ABBE5F2C;
    v4[3] = &unk_1E5AB2070;
    v4[4] = &v5;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("select type,name,tbl_name,sql from sqlite_master;"),
      (uint64_t)v4);
  }
  else
  {
    v3[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v3[1] = (void (*)(void))3221225472;
    v3[2] = (void (*)(void))sub_1ABBE60CC;
    v3[3] = (void (*)(void))&unk_1E5AAF630;
    v3[4] = (void (*)(void))&v5;
    __syncXPCIMDMessageStoreSchema_IPCAction(v3);
  }
  v0 = (void *)v6[5];
  if (v0)
    v1 = v0;
  else
    v1 = &stru_1E5AC1D70;
  _Block_object_dispose(&v5, 8);
  return v1;
}

void sub_1ABBE5EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE5F10(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1ABBE5F20(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1ABBE5F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const __CFAllocator *v7;
  const unsigned __int8 *v8;
  __CFString *v9;
  const unsigned __int8 *v10;
  __CFString *v11;
  const unsigned __int8 *v12;
  __CFString *v13;
  const unsigned __int8 *v14;
  __CFString *v15;

  result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if ((_DWORD)result == 100)
  {
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      if (sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 0))
      {
        v8 = sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 0);
        v9 = (__CFString *)CFStringCreateWithCString(v7, (const char *)v8, 0x8000100u);
      }
      else
      {
        v9 = 0;
      }
      if (sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 1))
      {
        v10 = sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 1);
        v11 = (__CFString *)CFStringCreateWithCString(v7, (const char *)v10, 0x8000100u);
      }
      else
      {
        v11 = 0;
      }
      if (sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 2))
      {
        v12 = sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 2);
        v13 = (__CFString *)CFStringCreateWithCString(v7, (const char *)v12, 0x8000100u);
      }
      else
      {
        v13 = 0;
      }
      if (sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 3))
      {
        v14 = sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 3);
        v15 = (__CFString *)CFStringCreateWithCString(v7, (const char *)v14, 0x8000100u);
      }
      else
      {
        v15 = 0;
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = (id)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)+ 40), "stringByAppendingFormat:", CFSTR("<t:%@, n:%@, tn:%@, sql:%@>"), v9, v11, v13, v15);

      result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
    }
    while ((_DWORD)result == 100);
  }
  return result;
}

id sub_1ABBE60CC(uint64_t a1, xpc_object_t xdict)
{
  id result;

  result = (id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", xpc_dictionary_get_string(xdict, "schema"), 4);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  return result;
}

uint64_t IMDSMSRecordStoreSetPageCacheSize()
{
  uint64_t result;

  result = IMDIsRunningInDatabaseServerProcess();
  if ((_DWORD)result)
    return CSDBSqliteSetDefaultPageCacheSize();
  return result;
}

void _IMDSMSRecordStoreSaveAndInvalidateCaches()
{
  _IMDPerformLockedMessageStoreBlock((uint64_t)&unk_1E5AAEB00);
}

uint64_t sub_1ABBE6168()
{
  CSDBRecordSaveStore();
  return CSDBRecordStoreInvalidateCachesWithStore();
}

void IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(const void *a1)
{
  _IMDPerformLockedMessageStoreBlock((uint64_t)&unk_1E5AB8DA0);
  CFRelease(a1);
}

uint64_t sub_1ABBE61C0()
{
  return CSDBRecordSaveStore();
}

void IMDSMSRecordStoreRecordCommitChangesAndRelease(const void *a1)
{
  _IMDPerformLockedMessageStoreBlock((uint64_t)&unk_1E5AB8DC0);
  CFRelease(a1);
}

uint64_t sub_1ABBE61F8()
{
  return CSDBRecordSaveStore();
}

id IMDSMSRecordStoreCopySMSDBPath()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance"), "isUnderFirstDataProtectionLock");
  return IMDSMSRecordStoreCopySMSDBPathWithCreate(1);
}

id _IMDCreateDatabasePathIfNecessary()
{
  return IMDSMSRecordStoreCopySMSDBPathWithCreate(1);
}

void IMDSMSRecordStoreSave()
{
  if (IMDIsRunningInDatabaseServerProcess())
    _IMDPerformLockedMessageStoreBlock((uint64_t)&unk_1E5AB8DE0);
  else
    __syncXPCIMDMessageStoreSave_IPCAction(0);
}

uint64_t sub_1ABBE6264()
{
  return CSDBRecordSaveStore();
}

uint64_t IMDSMSRecordIsFull()
{
  return 0;
}

uint64_t _IMDSMSRecordStoreCountersGetAllSent()
{
  return sub_1ABBE627C(0);
}

uint64_t sub_1ABBE627C(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[7];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  _QWORD v8[4];

  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2020000000;
  v8[3] = 0;
  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABBE7090;
  v3[3] = &unk_1E5AB8EB0;
  v3[5] = &v4;
  v3[6] = a1;
  v3[4] = v8;
  _IMDPerformLockedDatabaseBlock((uint64_t)v3);
  v1 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(&v4, 8);
  _Block_object_dispose(v8, 8);
  return v1;
}

void sub_1ABBE6328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t _IMDSMSRecordStoreCountersGetAllReceived()
{
  return sub_1ABBE627C(1);
}

uint64_t _IMDSMSRecordStoreDataCountersGetLifetimeSent()
{
  return sub_1ABBE627C(2);
}

uint64_t _IMDSMSRecordStoreDataCountersGetLifetimeReceived()
{
  return sub_1ABBE627C(3);
}

void _IMDSMSRecordStoreCountersReset()
{
  _IMDPerformLockedConnectionBlock((uint64_t)&unk_1E5AB8E20);
}

void sub_1ABBE6374()
{
  const __CFAllocator *v0;
  CFAbsoluteTime Current;
  CFStringRef v2;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Current = CFAbsoluteTimeGetCurrent();
  v2 = CFStringCreateWithFormat(v0, 0, CFSTR("%f"), *(_QWORD *)&Current);
  CSDBSqliteConnectionBeginTransactionType();
  CSDBSqliteConnectionSetValueForProperty();
  CSDBSqliteConnectionSetValueForProperty();
  CSDBSqliteConnectionSetValueForProperty();
  CSDBSqliteConnectionCommit();
  CFRelease(v2);
}

void _IMDSMSRecordStoreClean()
{
  _IMDPerformLockedDatabaseBlock((uint64_t)&unk_1E5AAF500);
}

uint64_t sub_1ABBE6438()
{
  uint64_t v0;

  v0 = CSDBSqliteDatabaseConnectionForReading();
  IMDSqliteDatabaseClean(v0);
  return CSDBSqliteDatabaseReleaseSqliteConnection();
}

void IMDSMSRecordStoreClean()
{
  NSObject *v0;
  uint8_t v1[16];

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "Beginning record store clean.", v1, 2u);
    }
  }
  _IMDPerformLockedDatabaseBlock((uint64_t)&unk_1E5AAF500);
}

double _IMDSMSRecordStoreCountersGetLastResetTime()
{
  double v0;
  _QWORD v2[5];
  uint64_t v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = (double *)&v3;
  v5 = 0x2020000000;
  v6 = 0;
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = sub_1ABBE65A4;
  v2[3] = &unk_1E5AB8E68;
  v2[4] = &v3;
  _IMDPerformLockedDatabaseBlock((uint64_t)v2);
  v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1ABBE658C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE65A4(uint64_t a1)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)CSDBSqliteDatabaseCopyValueForProperty();
  if (v2)
  {
    v3 = v2;
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFStringGetDoubleValue(v2);
    CFRelease(v3);
  }
}

BOOL _IMDSMSRecordStoreShouldDeleteStickerFromReferenceCount(uint64_t a1)
{
  int v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint32_t v6;
  NSObject *v7;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1 == -1)
  {
    if (!IMOSLoggingEnabled())
      return a1 == -1;
    v7 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      return a1 == -1;
    LOWORD(v9) = 0;
    v4 = "Sticker with path is not in use.";
LABEL_12:
    v5 = v7;
    v6 = 2;
    goto LABEL_13;
  }
  v2 = IMOSLoggingEnabled();
  if (!a1)
  {
    if (!v2)
      return a1 == -1;
    v7 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      return a1 == -1;
    LOWORD(v9) = 0;
    v4 = "XPC connection failed, not deleting sticker";
    goto LABEL_12;
  }
  if (v2)
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v9 = 134217984;
      v10 = a1;
      v4 = "Found %lld sticker(s), path is in use";
      v5 = v3;
      v6 = 12;
LABEL_13:
      _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, v4, (uint8_t *)&v9, v6);
    }
  }
  return a1 == -1;
}

void sub_1ABBE6738(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABBE6704);
  }
  _Unwind_Resume(a1);
}

void IMDCleanseOrphanedStickerAttachments()
{
  NSObject *v0;
  void *v1;
  int v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  const __CFString *v17;
  NSObject *v18;
  uint64_t HaveAttachments;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint8_t v30[4];
  uint64_t v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "Beginning sticker attachment cleanse.", buf, 2u);
    }
  }
  v1 = (void *)objc_msgSend((id)objc_msgSend((id)IMStickerCacheDirectoryURL(), "path"), "stringByResolvingAndStandardizingPath");
  v2 = IMOSLoggingEnabled();
  if (v1)
  {
    if (v2)
    {
      v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v33 = v1;
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Sticker cache path %@", buf, 0xCu);
      }
    }
    v29 = 0;
    v4 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "contentsOfDirectoryAtPath:error:", v1, &v29);
    if (v29)
    {
      if (IMOSLoggingEnabled())
      {
        v5 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          v33 = v1;
          v34 = 2112;
          v35 = v29;
          v6 = "Attachments. Error getting contents of directory %@ error %@";
          v7 = v5;
          v8 = 22;
LABEL_15:
          _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, v6, buf, v8);
        }
      }
    }
    else
    {
      v10 = (void *)v4;
      v11 = (void *)objc_msgSend(v1, "lastPathComponent");
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, buf, 16);
      if (v12)
      {
        v14 = *(_QWORD *)v26;
        *(_QWORD *)&v13 = 138412290;
        v23 = v13;
        do
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v26 != v14)
              objc_enumerationMutation(v10);
            v16 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * i);
            v17 = (const __CFString *)objc_msgSend(CFSTR("%"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(v11, "stringByAppendingPathComponent:", v16, v23), "stringByAppendingString:", CFSTR("%")));
            if (IMOSLoggingEnabled())
            {
              v18 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)v30 = v23;
                v31 = (uint64_t)v17;
                _os_log_impl(&dword_1ABB60000, v18, OS_LOG_TYPE_INFO, "Searching db for filename: %@", v30, 0xCu);
              }
            }
            HaveAttachments = IMDAttachmentRecordDoesStickerPathHaveAttachments(v17);
            v20 = objc_msgSend((id)objc_msgSend(v1, "stringByAppendingPathComponent:", v16), "stringByResolvingAndStandardizingPath");
            if (_IMDSMSRecordStoreShouldDeleteStickerFromReferenceCount(HaveAttachments))
            {
              if (IMOSLoggingEnabled())
              {
                v21 = OSLogHandleForIMEventCategory();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)v30 = v23;
                  v31 = v20;
                  _os_log_impl(&dword_1ABB60000, v21, OS_LOG_TYPE_INFO, "Will delete %@", v30, 0xCu);
                }
              }
              v24 = 0;
              objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "removeItemAtPath:error:", v20, &v24);
              if (v24)
              {
                if (IMOSLoggingEnabled())
                {
                  v22 = OSLogHandleForIMFoundationCategory();
                  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)v30 = v23;
                    v31 = v20;
                    _os_log_impl(&dword_1ABB60000, v22, OS_LOG_TYPE_INFO, "Attachments. Could not delete sticker at path %@", v30, 0xCu);
                  }
                }
              }
            }
          }
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, buf, 16);
        }
        while (v12);
      }
    }
  }
  else if (v2)
  {
    v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v6 = "Attachments _IMDCleanseOrpanedStickersInStickerCachePath nil stickerCachePath";
      v7 = v9;
      v8 = 2;
      goto LABEL_15;
    }
  }
}

void IMDCleanseBrowserSnapshots()
{
  NSObject *v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint8_t buf[4];
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "Beginning browser snapshot deletion", buf, 2u);
    }
  }
  v1 = objc_msgSend((id)IMBrowserSnapshotCacheDirectoryURL(), "path");
  v3 = 0;
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "removeItemAtPath:error:", v1, &v3);
  if (v3 && IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v5 = v1;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Attachments. Could not delete browser snapshot cache at path %@", buf, 0xCu);
    }
  }
}

BOOL IMDPersistenceProtectionMerge_UnprotectedDatabaseExists()
{
  void *v0;
  int v1;
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  stat v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v0 = (void *)(*((uint64_t (**)(void))off_1EEC3FBD8 + 2))();
  v1 = stat((const char *)objc_msgSend(v0, "UTF8String", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                         0,
                         0),
         &v6);
  if (!v1 || *__error() != 2)
  {
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        v3 = objc_msgSend(v0, "UTF8String");
        v4 = "NO";
        *(_DWORD *)buf = 136315650;
        v8 = v3;
        if (!v1)
          v4 = "YES";
        v9 = 2080;
        v10 = v4;
        v11 = 1024;
        v12 = v1;
        _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "ProtectionMerge: unprotected database: %s, found: %s, error: %d\n", buf, 0x1Cu);
      }
    }
  }
  return v1 == 0;
}

BOOL IMDPersistenceProtectionMerge_DeleteUnprotectedDatabase()
{
  void *v0;
  void *v1;
  void *v2;
  const std::__fs::filesystem::path *v3;
  std::error_code *v4;
  const std::__fs::filesystem::path *v5;
  std::error_code *v6;
  const std::__fs::filesystem::path *v7;
  std::error_code *v8;
  _BOOL4 v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  _BOOL4 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v0 = (void *)(*((uint64_t (**)(void))off_1EEC3FBD8 + 2))();
  v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@-shm"), v0);
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@-wal"), v0);
  v3 = (const std::__fs::filesystem::path *)objc_msgSend(v1, "UTF8String");
  remove(v3, v4);
  v5 = (const std::__fs::filesystem::path *)objc_msgSend(v2, "UTF8String");
  remove(v5, v6);

  v7 = (const std::__fs::filesystem::path *)objc_msgSend(v0, "UTF8String");
  v9 = remove(v7, v8);
  if (IMOSLoggingEnabled())
  {
    v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = objc_msgSend(v0, "UTF8String");
      v12 = "NO";
      *(_DWORD *)buf = 136315650;
      v15 = v11;
      if (!v9)
        v12 = "YES";
      v16 = 2080;
      v17 = v12;
      v18 = 1024;
      v19 = v9;
      _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "ProtectionMerge: unprotected database: %s, deleted: %s, error: %d\n", buf, 0x1Cu);
    }
  }
  return !v9;
}

uint64_t IMDPersistenceProtectionMerge_CurrentlyUsingUnprotectedDatabase()
{
  void *v0;

  v0 = (void *)IMDSharedSqliteDatabasePath();
  return objc_msgSend(v0, "isEqualToString:", (*((uint64_t (**)(void))off_1EEC3FBD8 + 2))());
}

id sub_1ABBE7064(uint64_t a1, int a2)
{
  const __CFString *v2;

  if (a2)
    v2 = CFSTR("sms.db");
  else
    v2 = CFSTR("sms-temp.db");
  return IMDSMSRecordStoreCreatePathToFilename((uint64_t)v2);
}

void sub_1ABBE7090(_QWORD *a1)
{
  unint64_t v2;
  const __CFString *v3;
  const __CFString *v4;

  v2 = a1[6];
  if (v2 <= 3)
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = off_1E5AB8ED0[v2];
  v3 = (const __CFString *)CSDBSqliteDatabaseCopyValueForProperty();
  if (v3)
  {
    v4 = v3;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) += CFStringGetIntValue(v3);
    CFRelease(v4);
  }
}

void sub_1ABBE7154()
{
  IMDDonationManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMDDonationManager);
  v1 = (void *)qword_1ED0D3AB8;
  qword_1ED0D3AB8 = (uint64_t)v0;

}

uint64_t sub_1ABBE76C4(uint64_t a1)
{
  return dword_1ED0D39D8[a1];
}

uint64_t IMDAttachmentRecordGetTypeID()
{
  pthread_once(&stru_1ED0D2888, (void (*)(void))sub_1ABBE7700);
  return qword_1ED0D3A30;
}

uint64_t sub_1ABBE7700()
{
  objc_class *v0;
  objc_class *v1;
  uint64_t v2;
  char **v3;
  uint64_t result;

  qword_1ED0D3A30 = _CFRuntimeRegisterClass();
  v0 = (objc_class *)objc_opt_class();
  class_getName(v0);
  _CFRuntimeBridgeClasses();
  v1 = (objc_class *)objc_opt_class();
  IMDBridgedRecordPopulatePropertyImplementations(v1, (uint64_t)&off_1E5AB8F58, 22);
  v2 = 0;
  v3 = &off_1E5AB8F58;
  do
  {
    v3 += 5;
    result = CSDBRecordIndexOfPropertyNamed();
    dword_1ED0D39D8[v2++] = result;
  }
  while (v2 != 22);
  return result;
}

const void *IMDAttachmentRecordCreate(uint64_t a1, uint64_t a2, uint8_t *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t Instance;
  const void *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  _QWORD *v33;
  void (*v41[5])(void);
  uint8_t buf[8];
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if ((IMDIsRunningInDatabaseServerProcess() & 1) != 0)
  {
    pthread_once(&stru_1ED0D2888, (void (*)(void))sub_1ABBE7700);
    Instance = _CFRuntimeCreateInstance();
    v24 = (const void *)Instance;
    if (Instance)
    {
      *(_QWORD *)(Instance + 16) = 0;
      v33 = (_QWORD *)(Instance + 16);
      *(_QWORD *)(Instance + 24) = 0;
      v25 = IMLogHandleForCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v25, OS_LOG_TYPE_INFO, "_IMDAttachmentRecordCreate()", buf, 2u);
      }
      IMDEnsureSharedRecordStoreInitialized();
      v27 = a12;
      v26 = a14;
      v28 = (const void *)CSDBRecordCreate();
      if (v28)
      {
        if (a12)
          v27 = JWEncodeDictionary();
        if (a14)
          v26 = JWEncodeDictionary();
        if (a15)
          v29 = JWEncodeDictionary();
        else
          v29 = 0;
        *(_QWORD *)buf = a2;
        v43 = a3;
        v44 = a4;
        v31 = 0;
        v45 = objc_msgSend(a6, "stringByAbbreviatingWithTildeInPath");
        v46 = a7;
        v47 = a8;
        v48 = a9;
        v49 = a10;
        v50 = v27;
        v51 = a5;
        v52 = a11;
        v53 = a13;
        v54 = v26;
        v55 = v29;
        v56 = a16;
        v57 = a17;
        v58 = a18;
        v59 = a19;
        v60 = a20;
        v61 = a21;
        v62 = a22;
        v63 = a23;
        do
        {
          CSDBRecordSetProperty();
          v31 += 8;
        }
        while (v31 != 176);
        if (IMDAttachmentRecordAddAttachment((uint64_t)v28))
        {
          *v33 = (int)CSDBRecordGetID();
        }
        else
        {
          CFRelease(v24);
          v24 = 0;
        }
        CFRelease(v28);
        IMDAttachmentRecordDoubleCheckSize(a6, a11);
      }
      else
      {
        v30 = IMLogHandleForCategory();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          sub_1ABC5ED74(v30);
        CFRelease(v24);
        return 0;
      }
    }
  }
  else
  {
    *(_QWORD *)buf = 0;
    v43 = buf;
    v44 = 0x2020000000;
    v45 = 0;
    v41[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v41[1] = (void (*)(void))3221225472;
    v41[2] = (void (*)(void))sub_1ABBE7B78;
    v41[3] = (void (*)(void))&unk_1E5AAF630;
    v41[4] = (void (*)(void))buf;
    __syncXPCIMDAttachmentRecordCreate_IPCAction(v41, a2, (int)a3, a4, a5, (uint64_t)a6, a7, a8, a9, a10 != 0, a11, a12, a13 != 0, a14, a15, a16 != 0, a17, a18, a19,
      a20,
      a21,
      a22,
      a23);
    v24 = (const void *)*((_QWORD *)v43 + 3);
    _Block_object_dispose(buf, 8);
  }
  return v24;
}

void sub_1ABBE7B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBE7B78(uint64_t a1, void *a2)
{
  uint64_t result;

  result = _IMDCopyIMDAttachmentRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _IMDCopyIMDAttachmentRecordFromXPCObjectClient(void *a1)
{
  uint64_t v2;
  uint64_t Instance;
  CFIndex v4;
  __CFArray *Mutable;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  void (*v10)(void);

  if (xpc_dictionary_get_count(a1) < 3)
    return 0;
  pthread_once(&stru_1ED0D2888, (void (*)(void))sub_1ABBE7700);
  Instance = _CFRuntimeCreateInstance();
  v2 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = 0;
    *(_QWORD *)(Instance + 24) = 0;
    v4 = 22;
    Mutable = CFArrayCreateMutable(0, 22, 0);
    do
    {
      CFArrayAppendValue(Mutable, 0);
      --v4;
    }
    while (v4);
    v6 = &qword_1E5AB8F68;
    do
    {
      v7 = *v6;
      switch(*(v6 - 1))
      {
        case 0:
        case 3:
          v8 = IMGetXPCIntFromDictionary();
          goto LABEL_12;
        case 1:
          v8 = IMGetXPCStringFromDictionary();
          goto LABEL_12;
        case 2:
          v8 = IMGetXPCDataFromDictionary();
LABEL_12:
          v9 = (const void *)v8;
          break;
        default:
          v9 = 0;
          break;
      }
      if (CFArrayGetValueAtIndex(Mutable, v4))
      {
        if (v7)
        {
          v10 = *(void (**)(void))(v7 + 8);
          if (v10)
            v10();
        }
      }
      if (v9 && v7 && *(_QWORD *)v7)
        v9 = (const void *)(*(uint64_t (**)(const void *))v7)(v9);
      CFArraySetValueAtIndex(Mutable, v4++, v9);
      v6 += 5;
    }
    while (v4 != 22);
    *(_QWORD *)(v2 + 24) = Mutable;
    *(_QWORD *)(v2 + 16) = xpc_dictionary_get_int64(a1, "recordIdentifier");
  }
  return v2;
}

const void *IMDAttachmentRecordCreateFromRecordID(uint64_t a1, uint64_t a2)
{
  return sub_1ABBE7D40(a1, a2, 1);
}

const void *sub_1ABBE7D40(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t Instance;
  const void *v6;
  const void *v7;
  const void *v8;

  pthread_once(&stru_1ED0D2888, (void (*)(void))sub_1ABBE7700);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 0;
  v6 = (const void *)Instance;
  *(_QWORD *)(Instance + 16) = a2;
  *(_QWORD *)(Instance + 24) = 0;
  if (a3)
    v7 = (const void *)IMDAttachmentRecordCopyAttachmentRecord(a2);
  else
    v7 = (const void *)IMDAttachmentRecordCopyAttachmentRecordUnlocked(a2);
  if (v7)
  {
    v8 = v6;
  }
  else
  {
    v7 = v6;
    v8 = 0;
  }
  CFRelease(v7);
  return v8;
}

const void *IMDAttachmentRecordCreateFromRecordIDUnlocked(uint64_t a1, uint64_t a2)
{
  return sub_1ABBE7D40(a1, a2, 0);
}

uint64_t IMDAttachmentRecordIsSticker(uint64_t a1)
{
  const void *ValueAtIndex;
  unsigned __int8 v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 11);
      v2 = ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18630])
        return ((unsigned __int8 (*)(const void *))*MEMORY[0x1E0D18630])(ValueAtIndex);
    }
    else
    {
      v13 = 0;
      v14 = &v13;
      v15 = 0x2020000000;
      v16 = 0;
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = sub_1ABBE7EF0;
      v12[3] = &unk_1E5AB2298;
      v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      v2 = *((_BYTE *)v14 + 24);
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC5EDB4(v3, v4, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  return v2;
}

void sub_1ABBE7ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE7EF0(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordGetIdentifier(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 16);
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = 138412290;
      v4 = 0;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Attempted to get record identifier for NULL attachment record: %@", (uint8_t *)&v3, 0xCu);
    }
  }
  return 0;
}

uint64_t IMDAttachmentRecordCopyGUID(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABBE8128;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5EE24(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABBE8110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE8128(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordGetCreatedDate(uint64_t a1)
{
  const void *ValueAtIndex;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 1);
      if (ValueAtIndex && *MEMORY[0x1E0D18630])
        LODWORD(ValueAtIndex) = ((uint64_t (*)(void))*MEMORY[0x1E0D18630])();
      return (int)ValueAtIndex;
    }
    else
    {
      v13 = 0;
      v14 = &v13;
      v15 = 0x2020000000;
      v16 = 0;
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = sub_1ABBE828C;
      v12[3] = &unk_1E5AB2298;
      v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      v2 = *((int *)v14 + 6);
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC5EE94(v3, v4, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  return v2;
}

void sub_1ABBE8274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE828C(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordGetStartDate(uint64_t a1)
{
  const void *ValueAtIndex;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 2);
      if (ValueAtIndex && *MEMORY[0x1E0D18630])
        LODWORD(ValueAtIndex) = ((uint64_t (*)(void))*MEMORY[0x1E0D18630])();
      return (int)ValueAtIndex;
    }
    else
    {
      v13 = 0;
      v14 = &v13;
      v15 = 0x2020000000;
      v16 = 0;
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = sub_1ABBE83F0;
      v12[3] = &unk_1E5AB2298;
      v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      v2 = *((int *)v14 + 6);
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC5EF04(v3, v4, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  return v2;
}

void sub_1ABBE83D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE83F0(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordGetIsOutgoing(uint64_t a1)
{
  const void *ValueAtIndex;
  unsigned __int8 v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 7);
      v2 = ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18630])
        return ((unsigned __int8 (*)(const void *))*MEMORY[0x1E0D18630])(ValueAtIndex);
    }
    else
    {
      v13 = 0;
      v14 = &v13;
      v15 = 0x2020000000;
      v16 = 0;
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = sub_1ABBE855C;
      v12[3] = &unk_1E5AB2298;
      v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      v2 = *((_BYTE *)v14 + 24);
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC5EF74(v3, v4, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  return v2;
}

void sub_1ABBE8544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE855C(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

id IMDAttachmentRecordCopyFilename(uint64_t a1, uint64_t a2, int a3)
{
  const __CFArray *v4;
  void *ValueAtIndex;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  const void *v18;
  _QWORD v19[6];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  if (!a2)
  {
    v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC5EFE4(v7, v8, v9, v10, v11, v12, v13, v14);
    return 0;
  }
  v4 = *(const __CFArray **)(a2 + 24);
  if (!v4)
  {
    v20 = 0;
    v21 = &v20;
    v22 = 0x2020000000;
    v23 = 0;
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = sub_1ABBE8734;
    v19[3] = &unk_1E5AB2298;
    v19[4] = &v20;
    v19[5] = a2;
    _IMDPerformBlock((uint64_t)v19);
    v16 = (void *)v21[3];
    if (v16)
    {
      v17 = (void *)objc_msgSend(v16, "stringByResolvingAndStandardizingPath");
      v18 = (const void *)v21[3];
      if (v18)
      {
        CFRelease(v18);
        v21[3] = 0;
      }
      if (a3)
        v17 = (void *)objc_msgSend(v17, "__im_filePathWithVariant:", *MEMORY[0x1E0D38090]);
      v15 = (id)objc_msgSend(v17, "__im_apfsCompatibleFilename");
      v21[3] = (uint64_t)v15;
    }
    else
    {
      v15 = 0;
    }
    _Block_object_dispose(&v20, 8);
    return v15;
  }
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(v4, 3);
  if (!ValueAtIndex)
    return 0;
  if (a3)
    ValueAtIndex = (void *)objc_msgSend(ValueAtIndex, "__im_filePathWithVariant:", *MEMORY[0x1E0D38090]);
  return (id)objc_msgSend((id)objc_msgSend(ValueAtIndex, "stringByResolvingAndStandardizingPath"), "__im_apfsCompatibleFilename");
}

void sub_1ABBE8718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE8734(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordCopyTransferName(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 9);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABBE88A0;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5F054(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABBE8888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE88A0(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordCopyUTIType(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 4);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABBE8A0C;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5F0C4(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABBE89F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE8A0C(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

const __CFData *IMDAttachmentRecordCopyAttributionInfo(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const __CFData *ValueAtIndex;
  const __CFData *v4;
  const void *v5;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[6];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  if (!a2)
  {
    v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC5F134(v7, v8, v9, v10, v11, v12, v13, v14);
    return 0;
  }
  v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    v16 = 0;
    v17 = &v16;
    v18 = 0x2020000000;
    v19 = 0;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_1ABBE8B80;
    v15[3] = &unk_1E5AB2298;
    v15[4] = &v16;
    v15[5] = a2;
    _IMDPerformBlock((uint64_t)v15);
    v4 = (const __CFData *)v17[3];
    _Block_object_dispose(&v16, 8);
    return v4;
  }
  ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v2, 13);
  v4 = ValueAtIndex;
  if (ValueAtIndex)
  {
    if (CFDataGetLength(ValueAtIndex) >= 1)
    {
      v5 = (const void *)JWDecodeDictionary();
      if (v5)
        return (const __CFData *)CFRetain(v5);
    }
    return 0;
  }
  return v4;
}

void sub_1ABBE8B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE8B80(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const __CFData *v4;
  const __CFData *v5;
  const void *v6;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    v4 = (const __CFData *)CSDBRecordCopyProperty();
    if (v4)
    {
      v5 = v4;
      if (CFDataGetLength(v4) < 1)
      {
        v6 = 0;
      }
      else
      {
        v6 = (const void *)JWDecodeDictionary();
        if (v6)
          v6 = CFRetain(v6);
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
      CFRelease(v5);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    }
    CFRelease(v3);
  }
}

const __CFData *IMDAttachmentRecordCopyUserInfo(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const __CFData *ValueAtIndex;
  const __CFData *v4;
  const void *v5;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[6];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  if (!a2)
  {
    v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC5F1A4(v7, v8, v9, v10, v11, v12, v13, v14);
    return 0;
  }
  v2 = *(const __CFArray **)(a2 + 24);
  if (!v2)
  {
    v16 = 0;
    v17 = &v16;
    v18 = 0x2020000000;
    v19 = 0;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_1ABBE8D44;
    v15[3] = &unk_1E5AB2298;
    v15[4] = &v16;
    v15[5] = a2;
    _IMDPerformBlock((uint64_t)v15);
    v4 = (const __CFData *)v17[3];
    _Block_object_dispose(&v16, 8);
    return v4;
  }
  ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v2, 8);
  v4 = ValueAtIndex;
  if (ValueAtIndex)
  {
    if (CFDataGetLength(ValueAtIndex) >= 1)
    {
      v5 = (const void *)JWDecodeDictionary();
      if (v5)
        return (const __CFData *)CFRetain(v5);
    }
    return 0;
  }
  return v4;
}

void sub_1ABBE8D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE8D44(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const __CFData *v4;
  const __CFData *v5;
  const void *v6;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    v4 = (const __CFData *)CSDBRecordCopyProperty();
    if (v4)
    {
      v5 = v4;
      if (CFDataGetLength(v4) < 1)
      {
        v6 = 0;
      }
      else
      {
        v6 = (const void *)JWDecodeDictionary();
        if (v6)
          v6 = CFRetain(v6);
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
      CFRelease(v5);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    }
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordCopyMIMEType(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 5);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABBE8F00;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5F214(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABBE8EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE8F00(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordGetTransferState(uint64_t a1)
{
  const void *ValueAtIndex;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 6);
      if (ValueAtIndex && *MEMORY[0x1E0D18630])
        LODWORD(ValueAtIndex) = ((uint64_t (*)(void))*MEMORY[0x1E0D18630])();
      return (int)ValueAtIndex;
    }
    else
    {
      v13 = 0;
      v14 = &v13;
      v15 = 0x2020000000;
      v16 = 0;
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = sub_1ABBE9064;
      v12[3] = &unk_1E5AB2298;
      v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      v2 = *((int *)v14 + 6);
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC5F284(v3, v4, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  return v2;
}

void sub_1ABBE904C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE9064(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordGetTotalBytes(uint64_t a1)
{
  const void *ValueAtIndex;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 10);
      v2 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18630])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18630])(ValueAtIndex);
    }
    else
    {
      v13 = 0;
      v14 = &v13;
      v15 = 0x2020000000;
      v16 = 0;
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = sub_1ABBE91D0;
      v12[3] = &unk_1E5AB2298;
      v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      v2 = v14[3];
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC5F2F4(v3, v4, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  return v2;
}

void sub_1ABBE91B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE91D0(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordGetCommSafetySensitive(uint64_t a1)
{
  const void *ValueAtIndex;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 19);
      v2 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18630])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18630])(ValueAtIndex);
    }
    else
    {
      v13 = 0;
      v14 = &v13;
      v15 = 0x2020000000;
      v16 = 0;
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = sub_1ABBE933C;
      v12[3] = &unk_1E5AB2298;
      v12[4] = &v13;
      v12[5] = a1;
      _IMDPerformBlock((uint64_t)v12);
      v2 = v14[3];
      _Block_object_dispose(&v13, 8);
    }
  }
  else
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC5F364(v3, v4, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  return v2;
}

void sub_1ABBE9324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE933C(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordGetProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordCopyEmojiImageContentIdentifier(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 20);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABBE94A8;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5F3D4(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABBE9490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE94A8(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

uint64_t IMDAttachmentRecordCopyEmojiImageShortDescription(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const void *ValueAtIndex;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = *(const __CFArray **)(a2 + 24);
    if (v2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, 21);
      v4 = (uint64_t)ValueAtIndex;
      if (ValueAtIndex && *MEMORY[0x1E0D18820])
        return ((uint64_t (*)(const void *))*MEMORY[0x1E0D18820])(ValueAtIndex);
    }
    else
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 0;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = sub_1ABBE9614;
      v14[3] = &unk_1E5AB2298;
      v14[4] = &v15;
      v14[5] = a2;
      _IMDPerformBlock((uint64_t)v14);
      v4 = v16[3];
      _Block_object_dispose(&v15, 8);
    }
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC5F444(v6, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  return v4;
}

void sub_1ABBE95FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBE9614(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

void _IMDAttachmentRecordBulkCopy(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _BYTE *a10, _QWORD *a11, _QWORD *a12, _BYTE *a13, _QWORD *a14, _QWORD *a15, _BYTE *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23)
{
  _QWORD *v25;
  _QWORD *v28;
  _QWORD *v29;
  const __CFArray *v30;
  const void *ValueAtIndex;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  id v49;
  const void *v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const void *v59;
  const void *v60;
  _QWORD v65[28];

  if (a1)
  {
    v25 = a6;
    v28 = a15;
    v29 = a12;
    v30 = *(const __CFArray **)(a1 + 24);
    if (v30)
    {
      if (a2)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v30, 0);
        v32 = ValueAtIndex;
        if (ValueAtIndex)
          CFRetain(ValueAtIndex);
        *a2 = v32;
        v28 = a15;
        v29 = a12;
        v25 = a6;
      }
      if (a7)
      {
        v33 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 4);
        v34 = v33;
        if (v33)
          CFRetain(v33);
        *a7 = v34;
      }
      if (a8)
      {
        v35 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 5);
        v36 = v35;
        if (v35)
          CFRetain(v35);
        *a8 = v36;
      }
      if (a5)
      {
        v37 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 9);
        v38 = v37;
        if (v37)
          CFRetain(v37);
        *a5 = v38;
      }
      if (a3)
        *a3 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 1);
      if (a4)
        *a4 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 2);
      if (a9)
        *a9 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 6);
      if (a10)
        *a10 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 7);
      if (a11)
        *a11 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 10);
      if (a13)
        *a13 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 11);
      if (a16)
        *a16 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 14);
      if (a17)
        *a17 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 15);
      if (a18)
      {
        v39 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 16);
        v40 = v39;
        if (v39)
          CFRetain(v39);
        *a18 = v40;
      }
      if (a19)
      {
        v41 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 17);
        v42 = v41;
        if (v41)
          CFRetain(v41);
        *a19 = v42;
      }
      if (a20)
      {
        v43 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 18);
        v44 = v43;
        if (v43)
          CFRetain(v43);
        *a20 = v44;
      }
      if (a21)
        *a21 = (int)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 19);
      if (a22)
      {
        v45 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 20);
        v46 = v45;
        if (v45)
          CFRetain(v45);
        *a22 = v46;
      }
      if (a23)
      {
        v47 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 21);
        v48 = v47;
        if (v47)
          CFRetain(v47);
        *a23 = v48;
      }
      if (v25)
      {
        v49 = (id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 3);
        if (v49)
          v49 = (id)objc_msgSend((id)objc_msgSend(v49, "stringByExpandingTildeInPath"), "__im_apfsCompatibleFilename");
        *v25 = v49;
      }
      if (v29)
      {
        v50 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 8);
        if (v50)
        {
          if (CFDataGetLength((CFDataRef)v50) < 1)
          {
            v50 = 0;
          }
          else
          {
            v50 = (const void *)JWDecodeDictionary();
            if (v50)
              v50 = CFRetain(v50);
          }
        }
        *v29 = v50;
      }
      if (a14)
      {
        v59 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 12);
        if (v59)
        {
          if (CFDataGetLength((CFDataRef)v59) < 1)
          {
            v59 = 0;
          }
          else
          {
            v59 = (const void *)JWDecodeDictionary();
            if (v59)
              v59 = CFRetain(v59);
          }
        }
        *a14 = v59;
      }
      if (v28)
      {
        v60 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 13);
        if (v60)
        {
          if (CFDataGetLength((CFDataRef)v60) < 1)
          {
            v60 = 0;
          }
          else
          {
            v60 = (const void *)JWDecodeDictionary();
            if (v60)
              v60 = CFRetain(v60);
          }
        }
        *v28 = v60;
      }
    }
    else
    {
      v65[0] = MEMORY[0x1E0C809B0];
      v65[1] = 3221225472;
      v65[2] = sub_1ABBE9AF4;
      v65[3] = &unk_1E5AB8EF0;
      v65[4] = a1;
      v65[5] = a2;
      v65[6] = a6;
      v65[7] = a7;
      v65[8] = a5;
      v65[9] = a8;
      v65[10] = a12;
      v65[11] = a14;
      v65[12] = a15;
      v65[13] = a3;
      v65[14] = a4;
      v65[15] = a9;
      v65[16] = a10;
      v65[17] = a13;
      v65[18] = a11;
      v65[19] = a16;
      v65[20] = a17;
      v65[21] = a18;
      v65[22] = a19;
      v65[23] = a20;
      v65[24] = a21;
      v65[25] = a22;
      v65[26] = a23;
      _IMDPerformBlock((uint64_t)v65);
    }
  }
  else
  {
    v51 = IMLogHandleForCategory();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      sub_1ABC5F4B4(v51, v52, v53, v54, v55, v56, v57, v58);
  }
}

void sub_1ABBE9AF4(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  const void *v5;
  id v6;
  void *v7;
  const void *v8;
  const __CFData *v9;
  const __CFData *v10;
  const void *v11;
  const __CFData *v12;
  const __CFData *v13;
  const void *v14;
  const __CFData *v15;
  const __CFData *v16;
  const void *v17;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    if (*(_QWORD *)(a1 + 40))
      **(_QWORD **)(a1 + 40) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 48))
    {
      v4 = (void *)CSDBRecordCopyProperty();
      if (v4)
      {
        v5 = v4;
        v6 = (id)objc_msgSend((id)objc_msgSend(v4, "stringByResolvingAndStandardizingPath"), "__im_apfsCompatibleFilename");
        CFRelease(v5);
      }
      else
      {
        v6 = 0;
      }
      **(_QWORD **)(a1 + 48) = v6;
    }
    if (*(_QWORD *)(a1 + 56))
      **(_QWORD **)(a1 + 56) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 64))
    {
      **(_QWORD **)(a1 + 64) = CSDBRecordCopyProperty();
      if (!**(_QWORD **)(a1 + 64))
      {
        v7 = (void *)CSDBRecordCopyProperty();
        if (v7)
        {
          v8 = v7;
          **(_QWORD **)(a1 + 64) = (id)objc_msgSend((id)objc_msgSend(v7, "lastPathComponent"), "__im_apfsCompatibleFilename");
          CFRelease(v8);
        }
      }
    }
    if (*(_QWORD *)(a1 + 72))
      **(_QWORD **)(a1 + 72) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 80))
    {
      v9 = (const __CFData *)CSDBRecordCopyProperty();
      if (v9)
      {
        v10 = v9;
        if (CFDataGetLength(v9) < 1)
        {
          v11 = 0;
        }
        else
        {
          v11 = (const void *)JWDecodeDictionary();
          if (v11)
            v11 = CFRetain(v11);
        }
        **(_QWORD **)(a1 + 80) = v11;
        CFRelease(v10);
      }
      else
      {
        **(_QWORD **)(a1 + 80) = 0;
      }
    }
    if (*(_QWORD *)(a1 + 88))
    {
      v12 = (const __CFData *)CSDBRecordCopyProperty();
      if (v12)
      {
        v13 = v12;
        if (CFDataGetLength(v12) < 1)
        {
          v14 = 0;
        }
        else
        {
          v14 = (const void *)JWDecodeDictionary();
          if (v14)
            v14 = CFRetain(v14);
        }
        **(_QWORD **)(a1 + 88) = v14;
        CFRelease(v13);
      }
      else
      {
        **(_QWORD **)(a1 + 88) = 0;
      }
    }
    if (*(_QWORD *)(a1 + 96))
    {
      v15 = (const __CFData *)CSDBRecordCopyProperty();
      if (v15)
      {
        v16 = v15;
        if (CFDataGetLength(v15) < 1)
        {
          v17 = 0;
        }
        else
        {
          v17 = (const void *)JWDecodeDictionary();
          if (v17)
            v17 = CFRetain(v17);
        }
        **(_QWORD **)(a1 + 96) = v17;
        CFRelease(v16);
      }
      else
      {
        **(_QWORD **)(a1 + 96) = 0;
      }
    }
    if (*(_QWORD *)(a1 + 104))
      **(_QWORD **)(a1 + 104) = (int)CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 112))
      **(_QWORD **)(a1 + 112) = (int)CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 120))
      **(_QWORD **)(a1 + 120) = (int)CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 128))
      **(_BYTE **)(a1 + 128) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 136))
      **(_BYTE **)(a1 + 136) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 144))
      **(_QWORD **)(a1 + 144) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 152))
      **(_BYTE **)(a1 + 152) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 160))
      **(_QWORD **)(a1 + 160) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 168))
      **(_QWORD **)(a1 + 168) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 176))
      **(_QWORD **)(a1 + 176) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 184))
      **(_QWORD **)(a1 + 184) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 192))
      **(_QWORD **)(a1 + 192) = CSDBRecordGetProperty();
    if (*(_QWORD *)(a1 + 200))
      **(_QWORD **)(a1 + 200) = CSDBRecordCopyProperty();
    if (*(_QWORD *)(a1 + 208))
      **(_QWORD **)(a1 + 208) = CSDBRecordCopyProperty();
    CFRelease(v3);
  }
}

__n128 IMDAttachmentRecordBulkCopy(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _BYTE *a10, _QWORD *a11, _QWORD *a12, _BYTE *a13, _QWORD *a14, _QWORD *a15, _BYTE *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20)
{
  __n128 result;

  _IMDAttachmentRecordBulkCopy(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    0,
    0,
    0);
  return result;
}

__n128 IMDAttachmentRecordBulkCopyForPhotos(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _BYTE *a10, _QWORD *a11, _QWORD *a12, _BYTE *a13, _QWORD *a14, _QWORD *a15, _BYTE *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20)
{
  __n128 result;

  _IMDAttachmentRecordBulkCopy(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    0,
    0,
    0);
  return result;
}

void IMDAttachmentRecordBulkUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int64_t a21,uint64_t a22,uint64_t a23)
{
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v39[24];
  char v40;
  char v41;
  char v42;

  if (a1)
  {
    if ((IMDIsRunningInDatabaseServerProcess() & 1) != 0)
    {
      v39[0] = MEMORY[0x1E0C809B0];
      v39[1] = 3221225472;
      v39[2] = sub_1ABBEA1E4;
      v39[3] = &unk_1E5AB8F10;
      v39[4] = a1;
      v39[5] = a3;
      v39[6] = a4;
      v39[7] = a9;
      v40 = a10;
      v41 = a13;
      v42 = a16;
      v39[8] = a11;
      v39[9] = a2;
      v39[10] = a6;
      v39[11] = a5;
      v39[12] = a7;
      v39[13] = a8;
      v39[14] = a12;
      v39[15] = a14;
      v39[16] = a15;
      v39[17] = a17;
      v39[18] = a18;
      v39[19] = a19;
      v39[20] = a20;
      v39[21] = a21;
      v39[22] = a22;
      v39[23] = a23;
      _IMDPerformBlock((uint64_t)v39);
    }
    else
    {
      __syncXPCIMDAttachmentRecordBulkUpdate_IPCAction(0, a2, a3, a4, a5, a6, a7, a8, a9, a10 != 0, a11, a12, a13 != 0, a14, a15, a16 != 0, a17, a18, a19,
        a20,
        a21);
    }
  }
  else
  {
    v27 = IMLogHandleForCategory();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      sub_1ABC5F524(v27, v28, v29, v30, v31, v32, v33, v34);
  }
}

void sub_1ABBEA1E4(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  void *v5;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 72))
      CSDBRecordSetProperty();
    v4 = *(void **)(a1 + 80);
    if (v4)
    {
      objc_msgSend(v4, "stringByAbbreviatingWithTildeInPath");
      CSDBRecordSetProperty();
    }
    v5 = *(void **)(a1 + 88);
    if (v5)
    {
      objc_msgSend(v5, "lastPathComponent");
      CSDBRecordSetProperty();
    }
    if (*(_QWORD *)(a1 + 96))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 104))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 112))
    {
      JWEncodeDictionary();
      CSDBRecordSetProperty();
    }
    if (*(_QWORD *)(a1 + 120))
    {
      JWEncodeDictionary();
      CSDBRecordSetProperty();
    }
    if (*(_QWORD *)(a1 + 128))
    {
      JWEncodeDictionary();
      CSDBRecordSetProperty();
    }
    CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 144))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 152))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 160))
      CSDBRecordSetProperty();
    CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 176))
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 184))
      CSDBRecordSetProperty();
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v3);
    IMDAttachmentRecordDoubleCheckSize(*(void **)(a1 + 80), *(_QWORD *)(a1 + 64));
  }
}

void IMDAttachmentRecordAnonymizedUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  void (*v13)(uint64_t);
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[10];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if ((IMDIsRunningInDatabaseServerProcess() & 1) == 0)
  {
    v24 = xmmword_1E5AB8F30;
    v25 = *(_OWORD *)off_1E5AB8F40;
    v26 = 1307;
    v12 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected false '%@' in %s at %s:%d. %@"), CFSTR("IMDIsRunningInDatabaseServerProcess()"), "void IMDAttachmentRecordAnonymizedUpdate(IMDAttachmentRecordRef, CFStringRef, CFStringRef, CFDictionaryRef, CFDictionaryRef, CFDictionaryRef)", IMFileLocationTrimFileName(), 1307, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v13 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v13)
    {
      v13(v12);
    }
    else if (IMOSLoggingEnabled())
    {
      v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v28 = v12;
        _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a1)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = sub_1ABBEA62C;
    v23[3] = &unk_1E5AB5FE8;
    v23[4] = a1;
    v23[5] = a2;
    v23[6] = a3;
    v23[7] = a4;
    v23[8] = a5;
    v23[9] = a6;
    _IMDPerformBlock((uint64_t)v23);
  }
  else
  {
    v15 = IMLogHandleForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      sub_1ABC5F594(v15, v16, v17, v18, v19, v20, v21, v22);
  }
}

void sub_1ABBEA62C(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const __CFString *v4;
  const __CFString *v5;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    v4 = *(const __CFString **)(a1 + 40);
    if (v4 && CFStringGetLength(v4) >= 1)
    {
      objc_msgSend(*(id *)(a1 + 40), "stringByAbbreviatingWithTildeInPath");
      CSDBRecordSetProperty();
    }
    v5 = *(const __CFString **)(a1 + 48);
    if (v5 && CFStringGetLength(v5) >= 1)
      CSDBRecordSetProperty();
    if (*(_QWORD *)(a1 + 56))
    {
      JWEncodeDictionary();
      CSDBRecordSetProperty();
    }
    if (*(_QWORD *)(a1 + 64))
    {
      JWEncodeDictionary();
      CSDBRecordSetProperty();
    }
    if (*(_QWORD *)(a1 + 72))
    {
      JWEncodeDictionary();
      CSDBRecordSetProperty();
    }
    IMDSMSRecordStoreRecordCommitChangesAndReleaseUnlocked(v3);
  }
}

const void *_IMDCopyIMDAttachmentRecordFromXPCObjectServer(void *a1)
{
  int64_t int64;

  if (a1 && (int64 = xpc_dictionary_get_int64(a1, "recordIdentifier"), int64 >= 1))
    return sub_1ABBE7D40(0, int64, 1);
  else
    return 0;
}

xpc_object_t _IMDCopyXPCObjectFromIMDAttachmentRecordClient(uint64_t a1)
{
  xpc_object_t v2;
  CFIndex v3;
  uint64_t *v4;
  const char *v5;
  uint64_t v6;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v8;
  void *v9;
  const char *v10;
  int64_t v11;
  int64_t v12;
  int64_t valuePtr;

  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = 0;
  v4 = &qword_1E5AB8F60;
  do
  {
    v5 = (const char *)*(v4 - 1);
    v6 = *v4;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v3);
    v8 = ValueAtIndex;
    switch(v6)
    {
      case 0:
        v9 = v2;
        v10 = v5;
        v11 = (int64_t)v8;
        goto LABEL_9;
      case 1:
        IMInsertNSStringsToXPCDictionary();
        break;
      case 2:
        IMInsertDatasToXPCDictionary();
        break;
      case 3:
        valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
        v11 = valuePtr;
        v9 = v2;
        v10 = v5;
LABEL_9:
        xpc_dictionary_set_int64(v9, v10, v11);
        break;
      default:
        break;
    }
    v4 += 5;
    ++v3;
  }
  while (v3 != 22);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
    xpc_dictionary_set_int64(v2, "recordIdentifier", v12);
  return v2;
}

void _IMDAttachmentRecordBulkCopyXPCDictionary(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[7];

  if (a2)
  {
    if (a1)
    {
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = sub_1ABBEA954;
      v19[3] = &unk_1E5AB6100;
      v19[4] = a2;
      v19[5] = a1;
      v19[6] = a1;
      if (a3)
        _IMDPerformBlock((uint64_t)v19);
      else
        sub_1ABBEA954((uint64_t)v19);
    }
    else
    {
      v11 = IMLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1ABC5F674(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  else
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC5F604(v3, v4, v5, v6, v7, v8, v9, v10);
  }
}

void sub_1ABBEA954(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t *v5;
  const char *v6;
  uint64_t v7;
  const __CFNumber *Property;
  const __CFNumber *v9;
  void *v10;
  const char *v11;
  int64_t v12;
  int64_t valuePtr;

  v2 = IMDAttachmentRecordCopyAttachmentRecordUnlocked(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  if (v2)
  {
    v3 = (const void *)v2;
    v4 = 0;
    v5 = &qword_1E5AB8F60;
    do
    {
      v6 = (const char *)*(v5 - 1);
      v7 = *v5;
      Property = (const __CFNumber *)CSDBRecordGetProperty();
      v9 = Property;
      switch(v7)
      {
        case 0:
          v10 = *(void **)(a1 + 32);
          v11 = v6;
          v12 = (int64_t)v9;
          goto LABEL_8;
        case 1:
          IMInsertNSStringsToXPCDictionary();
          break;
        case 2:
          IMInsertDatasToXPCDictionary();
          break;
        case 3:
          valuePtr = 0;
          CFNumberGetValue(Property, kCFNumberSInt64Type, &valuePtr);
          v10 = *(void **)(a1 + 32);
          v12 = valuePtr;
          v11 = v6;
LABEL_8:
          xpc_dictionary_set_int64(v10, v11, v12);
          break;
        default:
          break;
      }
      v5 += 5;
      v4 += 4;
    }
    while (v4 != 88);
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "recordIdentifier", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16));
    CFRelease(v3);
  }
}

uint64_t sub_1ABBEAA78(uint64_t result)
{
  *(_QWORD *)(result + 16) = -1;
  return result;
}

void sub_1ABBEAA84(uint64_t a1)
{
  CFIndex v2;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(void);
  const void *v6;

  *(_QWORD *)(a1 + 16) = -1;
  if (*(_QWORD *)(a1 + 24))
  {
    v2 = 0;
    v3 = &qword_1E5AB8F68;
    do
    {
      v4 = *v3;
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v2))
      {
        v5 = *(void (**)(void))(v4 + 8);
        if (v5)
          v5();
      }
      ++v2;
      v3 += 5;
    }
    while (v2 != 22);
    v6 = *(const void **)(a1 + 24);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
}

BOOL sub_1ABBEAB04(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

uint64_t sub_1ABBEAB18(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

CFStringRef sub_1ABBEAB20(const void *a1)
{
  const __CFAllocator *v2;
  CFAllocatorRef v3;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    v2 = CFGetAllocator(a1);
    v3 = CFGetAllocator(a1);
    return CFStringCreateWithFormat(v2, 0, CFSTR("<IMDAttachmentRecord %p [%p]>{}"), a1, v3);
  }
  else
  {
    v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1ABC5F6E4(v5, v6, v7, v8, v9, v10, v11, v12);
    return 0;
  }
}

void sub_1ABBEADDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  int v5;
  NSObject *v6;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = *(void **)(a1 + 32);
  if (v4)
    objc_msgSend(v4, "bindParametersToSqliteWithStatement:", a4);
  v5 = CSDBSqliteStatementPerform();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7[0] = 67109120;
      v7[1] = v5;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "SQLite returned %d from deleteAttachmentsByPredicate", (uint8_t *)v7, 8u);
    }

  }
}

uint64_t sub_1ABBEB4A8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABBEB4B8(uint64_t a1)
{

}

void sub_1ABBEB4C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v5 = *(void **)(a1 + 32);
  if (v5)
    objc_msgSend(v5, "bindParametersToSqliteWithStatement:", a4);
  v9 = (id)CSDBRecordStoreProcessStatement();
  v6 = objc_msgSend(*(id *)(a1 + 40), "_copyAttachmentRecordsFromCoreSDBResults:", v9);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_1ABBEB9F0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1ABBEB848);
  }
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1ABBEBA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v5 = *(void **)(a1 + 32);
  if (v5)
    objc_msgSend(v5, "bindParametersToSqliteWithStatement:", a4);
  CSDBSqliteBindInt64();
  v9 = (id)CSDBRecordStoreProcessStatement();
  v6 = objc_msgSend(*(id *)(a1 + 40), "_copyAttachmentRecordsFromCoreSDBResults:", v9);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_1ABBEC388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBEC3EC(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1ABBEC3FC(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1ABBEC408(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1ABBEC418(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1ABBEC428(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1ABBEC438(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1ABBEC448(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1ABBEC458(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1ABBEC468(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1ABBEC478(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1ABBEC488(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1ABBEC498(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

uint64_t sub_1ABBEC4AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a3;
  return result;
}

BOOL sub_1ABBEC4C0()
{
  int v0;
  int v1;
  NSObject *v2;

  v0 = CSDBSqliteConnectionPerformSQL();
  v1 = v0;
  if (v0)
  {
    if (v0 != 101)
    {
      v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        sub_1ABC5F8FC();
    }
  }
  return !v1 || v1 == 101;
}

uint64_t sub_1ABBEC538()
{
  uint64_t v0;

  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  v0 = CSDBSqliteStatementInteger64Result();
  CSDBSqliteStatementReset();
  return v0;
}

uint64_t sub_1ABBEC590()
{
  uint64_t v0;

  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  v0 = CSDBSqliteStatementInteger64Result();
  CSDBSqliteStatementReset();
  return v0;
}

uint64_t sub_1ABBEC5E8()
{
  uint64_t v0;

  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  v0 = CSDBSqliteStatementInteger64Result();
  CSDBSqliteStatementReset();
  return v0;
}

uint64_t sub_1ABBEC640()
{
  uint64_t v0;

  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  v0 = CSDBSqliteStatementInteger64Result();
  CSDBSqliteStatementReset();
  return v0;
}

uint64_t sub_1ABBEC6B0()
{
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteBindBlobFromCFData();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt();
  CSDBSqliteStatementPerform();
  CSDBSqliteStatementReset();
  return CSDBSqliteConnectionRowidOfLastInsert();
}

uint64_t sub_1ABBEC790()
{
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteStatementPerform();
  CSDBSqliteStatementReset();
  return CSDBSqliteConnectionRowidOfLastInsert();
}

uint64_t sub_1ABBEC7F8()
{
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteStatementPerform();
  return CSDBSqliteStatementReset();
}

uint64_t sub_1ABBEC858()
{
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CSDBSqliteStatementPerform();
  CSDBSqliteStatementReset();
  return CSDBSqliteConnectionRowidOfLastInsert();
}

uint64_t sub_1ABBEC968()
{
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindBlobFromCFData();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt64();
  CSDBSqliteStatementPerform();
  CSDBSqliteStatementReset();
  return CSDBSqliteConnectionRowidOfLastInsert();
}

uint64_t sub_1ABBECBB8()
{
  CSDBSqliteConnectionStatementForSQL();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteStatementPerform();
  return CSDBSqliteStatementReset();
}

uint64_t IMDMessageImportBeginWithDatabaseAndConnection(id *a1, uint64_t a2)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  sqlite3_int64 v8;
  sqlite3_int64 v9;
  sqlite3_int64 v10;
  sqlite3_int64 v11;
  int v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint8_t v40[128];
  uint8_t buf[4];
  sqlite3_int64 v42;
  __int16 v43;
  sqlite3_int64 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  qword_1EEC405B0 = a2;
  v2 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*a1, "stringByDeletingPathExtension"), "stringByAppendingPathExtension:", CFSTR("importbackup")), "stringByAppendingPathExtension:", CFSTR("db"));
  qword_1EEC405B8 = v2;
  CSDBSqliteBackupDatabase();
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v42 = (sqlite3_int64)v2;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Backing up database to %@", buf, 0xCu);
    }
  }
  sub_1ABBEC4C0();
  v4 = sub_1ABBEC4C0();
  v5 = CSDBSqliteConnectionStatementForSQL();
  v6 = v5;
  if (v5)
  {
    v7 = *(sqlite3_stmt **)(v5 + 8);
    if (v7)
    {
      if (sqlite3_step(v7) == 100)
      {
        v8 = 0;
        do
        {
          v9 = sqlite3_column_int64(*(sqlite3_stmt **)(v6 + 8), 0);
          v10 = sqlite3_column_int64(*(sqlite3_stmt **)(v6 + 8), 1);
          v11 = v10;
          if (v8 <= v10)
          {
            v8 = v10;
          }
          else
          {
            CSDBSqliteConnectionStatementForSQL();
            CSDBSqliteBindInt64();
            CSDBSqliteBindInt64();
            v12 = CSDBSqliteStatementPerform();
            if (v12)
            {
              if (v12 != 101)
              {
                v13 = IMLogHandleForCategory();
                if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  v42 = v9;
                  v43 = 2048;
                  v44 = v11;
                  _os_log_error_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_ERROR, "Couldn't update %lld with order date %lld", buf, 0x16u);
                }
              }
            }
            CSDBSqliteStatementReset();
          }
        }
        while (sqlite3_step(*(sqlite3_stmt **)(v6 + 8)) == 100);
      }
      CSDBSqliteStatementReset();
    }
  }
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v14 = (void *)IMDDatabaseTriggers();
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
  if (v15)
  {
    v16 = *(_QWORD *)v36;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v36 != v16)
          objc_enumerationMutation(v14);
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("DROP TRIGGER IF EXISTS %@"), *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * i));
        v4 = v4 & sub_1ABBEC4C0();
      }
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
    }
    while (v15);
  }
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v18 = (void *)IMDDatabaseIndexes();
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
  if (v19)
  {
    v20 = *(_QWORD *)v32;
    do
    {
      for (j = 0; j != v19; ++j)
      {
        if (*(_QWORD *)v32 != v20)
          objc_enumerationMutation(v18);
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("DROP INDEX IF EXISTS %@"), *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * j));
        v4 = v4 & sub_1ABBEC4C0();
      }
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
    }
    while (v19);
  }
  byte_1EEC405C0 = 1;
  if ((v4 & 1) == 0)
  {
    v22 = IMLogHandleForCategory();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      sub_1ABC5F978(v22, v23, v24, v25, v26, v27, v28, v29);
    byte_1EEC405C0 = 0;
  }
  return v4;
}

void IMDMessageImportEnd()
{
  _BOOL4 v0;
  NSObject *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((byte_1EEC405C0 & 1) == 0)
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC5F9AC(v2, v3, v4, v5, v6, v7, v8, v9);
    goto LABEL_30;
  }
  if (qword_1EEC405B0)
  {
    if (sub_1ABBEC4C0())
    {
      v0 = sub_1ABBEC4C0();
      CSDBRecordStoreCreateTablesForClass();
      if (v0
        && sub_1ABBEC4C0()
        && sub_1ABBEC4C0()
        && sub_1ABBEC4C0()
        && sub_1ABBEC4C0()
        && sub_1ABBEC4C0()
        && sub_1ABBEC4C0()
        && sub_1ABBEC4C0()
        && sub_1ABBEC4C0()
        && sub_1ABBEC4C0()
        && sub_1ABBEC4C0()
        && sub_1ABBEC4C0()
        && sub_1ABBEC4C0()
        && sub_1ABBEC4C0()
        && sub_1ABBEC4C0())
      {
        goto LABEL_19;
      }
    }
    else
    {
      CSDBRecordStoreCreateTablesForClass();
    }
LABEL_28:
    if (qword_1EEC405B8)
    {
      CFRelease((CFTypeRef)qword_1EEC405B8);
      qword_1EEC405B8 = 0;
    }
    goto LABEL_30;
  }
LABEL_19:
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance"), "isInternalInstall") & 1) != 0)
    goto LABEL_28;
  if (IMOSLoggingEnabled())
  {
    v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      v10 = 138412290;
      v11 = qword_1EEC405B8;
      _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_INFO, "Successful import! This is not an internal install so let's delete the backup database stored at %@", (uint8_t *)&v10, 0xCu);
    }
  }
  if (qword_1EEC405B8)
  {
    CSDBSqliteDeleteDatabase();
    goto LABEL_28;
  }
LABEL_30:
  byte_1EEC405C0 = 0;
  qword_1EEC405B0 = 0;
}

uint64_t IMDCopyGUIDForImportedOneToOneChat()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v0 = IMCopyGUIDForChat();
  if ((byte_1EEC405C0 & 1) != 0)
  {
    v1 = sub_1ABBEC538();
    v2 = IMOSLoggingEnabled();
    if (v1 <= 0)
    {
      if (v2)
      {
        v5 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          v13 = 138412290;
          v14 = v0;
          _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Creating chat for guid: %@", (uint8_t *)&v13, 0xCu);
        }
      }
      v6 = sub_1ABBEC6B0();
      if (v6 < 1)
      {
        v10 = IMLogHandleForCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_1ABC5FA90();
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          v7 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            v13 = 134217984;
            v14 = v6;
            _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Created new chat with row id: %lld", (uint8_t *)&v13, 0xCu);
          }
        }
        v8 = sub_1ABBEC640();
        if (v8 > 0)
          goto LABEL_20;
        if (IMOSLoggingEnabled())
        {
          v9 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            v13 = 134217984;
            v14 = v8;
            _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "Creating handle for: %lld", (uint8_t *)&v13, 0xCu);
          }
        }
        if (sub_1ABBEC790() < 1)
        {
          v12 = IMLogHandleForCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            sub_1ABC5FA1C();
        }
        else
        {
LABEL_20:
          sub_1ABBEC7F8();
        }
      }
    }
    else if (v2)
    {
      v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v13 = 138412290;
        v14 = v0;
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Already have chat for guid: %@", (uint8_t *)&v13, 0xCu);
      }
    }
  }
  else
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC5FAF0();
  }
  return v0;
}

uint64_t IMDCopyGUIDForImportedChat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v25 = IMCopyGUIDForChat();
  if ((byte_1EEC405C0 & 1) != 0)
  {
    v8 = sub_1ABBEC538();
    v9 = IMOSLoggingEnabled();
    if (v8 <= 0)
    {
      if (v9)
      {
        v12 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v31 = v25;
          _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "Creating chat for guid: %@", buf, 0xCu);
        }
      }
      v13 = sub_1ABBEC6B0();
      if (v13 < 1)
      {
        v23 = IMLogHandleForCategory();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          sub_1ABC5FA90();
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          v14 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134217984;
            v31 = v13;
            _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "Created new chat: %lld", buf, 0xCu);
          }
        }
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v15 = objc_msgSend(a7, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
        if (v15)
        {
          v16 = *(_QWORD *)v27;
          do
          {
            v17 = 0;
            do
            {
              if (*(_QWORD *)v27 != v16)
                objc_enumerationMutation(a7);
              v18 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * v17);
              if (sub_1ABBEC640() > 0)
                goto LABEL_25;
              if (IMOSLoggingEnabled())
              {
                v19 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  v31 = v18;
                  _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Creating handle for: %@", buf, 0xCu);
                }
              }
              v20 = sub_1ABBEC790();
              if (v20 < 1)
              {
                v21 = IMLogHandleForCategory();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  v31 = v20;
                  v32 = 2048;
                  v33 = v13;
                  _os_log_error_impl(&dword_1ABB60000, v21, OS_LOG_TYPE_ERROR, "Failed to add handle: %lld to chat: %lld", buf, 0x16u);
                }
              }
              else
              {
LABEL_25:
                sub_1ABBEC7F8();
              }
              ++v17;
            }
            while (v15 != v17);
            v22 = objc_msgSend(a7, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
            v15 = v22;
          }
          while (v22);
        }
      }
    }
    else if (v9)
    {
      v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v31 = v25;
        _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "Already have chat for guid: %@", buf, 0xCu);
      }
    }
  }
  else
  {
    v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1ABC5FB60();
  }
  return v25;
}

void IMDImportAttachmentWithData(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  NSObject *v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = 138412290;
      v17 = a1;
      _os_log_impl(&dword_1ABB60000, v15, OS_LOG_TYPE_INFO, "Import attachment %@ with data", (uint8_t *)&v16, 0xCu);
    }
  }
  sub_1ABBEDB98(a1, a2, 0, a8, a3, a4, a6, a9);
}

void sub_1ABBEDB98(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  NSObject *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  void *v40;
  _BYTE buf[12];
  __int16 v42;
  id v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if ((byte_1EEC405C0 & 1) != 0)
  {
    if (a1)
    {
      if (sub_1ABBEC5E8() > 0)
      {
        if (IMOSLoggingEnabled())
        {
          v14 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = a1;
            _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "Already have an attachment for guid %@", buf, 0xCu);
          }
        }
        return;
      }
      v31 = IMDCopyAttachmentPersistentPath(a1, a8, a6, a5, 0, 0);
      v32 = objc_alloc_init(MEMORY[0x1E0CB3620]);
      if ((objc_msgSend(v32, "makeDirectoriesInPath:mode:", objc_msgSend(v31, "stringByDeletingLastPathComponent"), 448) & 1) == 0)
      {
        v33 = IMLogHandleForCategory();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          sub_1ABC5FC64();
      }

      if (a4)
      {
        if ((objc_msgSend(a4, "writeToFile:atomically:", v31, 0) & 1) == 0)
        {
          v34 = IMLogHandleForCategory();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            sub_1ABC5FC04();
        }
        objc_msgSend(a4, "length");
LABEL_33:
        v38 = sub_1ABBEC858();
        if (IMOSLoggingEnabled())
        {
          v39 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218498;
            *(_QWORD *)&buf[4] = v38;
            v42 = 2112;
            v43 = a3;
            v44 = 2112;
            v45 = a1;
            _os_log_impl(&dword_1ABB60000, v39, OS_LOG_TYPE_INFO, "Created attachment id %lld with path %@ for guid %@", buf, 0x20u);
          }
        }
        if (v31)
          CFRelease(v31);
        return;
      }
      v40 = 0;
      if (a3)
        v35 = objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", a3);
      else
        v35 = 0;
      if (v31)
      {
        v36 = objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:");
        if (!v35)
          goto LABEL_29;
      }
      else
      {
        v36 = 0;
        if (!v35)
          goto LABEL_29;
      }
      if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "linkItemAtURL:toURL:error:", v35, v36, &v40) & 1) != 0|| v36&& (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "copyItemAtURL:toURL:error:", v35, v36, &v40) & 1) != 0)
      {
LABEL_31:
        if (objc_msgSend(a3, "length"))
        {
          *(_QWORD *)buf = 0;
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A38], "defaultHFSFileManager"), "attributesOfItemAtPath:error:", a3, buf), "fileSize");
        }
        goto LABEL_33;
      }
LABEL_29:
      v37 = IMLogHandleForCategory();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = a3;
        v42 = 2112;
        v43 = v31;
        v44 = 2112;
        v45 = v40;
        _os_log_error_impl(&dword_1ABB60000, v37, OS_LOG_TYPE_ERROR, "MessageImport - couldn't link/copy attachment from %@ to %@ - %@", buf, 0x20u);
      }
      goto LABEL_31;
    }
    v23 = IMLogHandleForCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      sub_1ABC5FBD0(v23, v24, v25, v26, v27, v28, v29, v30);
  }
  else
  {
    v15 = IMLogHandleForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      sub_1ABC5FCCC(v15, v16, v17, v18, v19, v20, v21, v22);
  }
}

void IMDImportAttachmentWithPath(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  NSObject *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = 138412546;
      v17 = a1;
      v18 = 2112;
      v19 = a3;
      _os_log_impl(&dword_1ABB60000, v15, OS_LOG_TYPE_INFO, "Import attachment %@ with filePath %@", (uint8_t *)&v16, 0x16u);
    }
  }
  sub_1ABBEDB98(a1, a2, a3, 0, a4, a5, a7, a9);
}

void IMDImportMessage(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17)
{
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *log;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if ((byte_1EEC405C0 & 1) != 0)
  {
    if (sub_1ABBEC538() < 1)
    {
      v35 = IMLogHandleForCategory();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        sub_1ABC5FD9C();
    }
    else
    {
      v21 = sub_1ABBEC590();
      v22 = 0;
      if (v21 <= 0 && a17)
      {
        CSDBSqliteConnectionStatementForSQL();
        CSDBSqliteBindInt64();
        CSDBSqliteBindTextFromCFString();
        CSDBSqliteBindInt64();
        CSDBSqliteBindInt64();
        v23 = CSDBSqliteStatementInteger64Result();
        v22 = v23 > 0;
        if (v23 >= 1)
        {
          if (IMOSLoggingEnabled())
          {
            log = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(log, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              v40 = a3;
              v41 = 2048;
              v42 = a11;
              _os_log_impl(&dword_1ABB60000, log, OS_LOG_TYPE_INFO, "Found duplicate for %@ at %lld", buf, 0x16u);
            }
          }
        }
        CSDBSqliteStatementReset();
      }
      if (v21 > 0 || v22)
      {
        if (IMOSLoggingEnabled())
        {
          v36 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v40 = a2;
            v41 = 2112;
            v42 = a1;
            _os_log_impl(&dword_1ABB60000, v36, OS_LOG_TYPE_INFO, "Not inserting %@  already have message in chat: %@", buf, 0x16u);
          }
        }
      }
      else
      {
        if (!objc_msgSend(a2, "length"))
          a2 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
        IMComponentsFromChatGUID();
        if (IMOSLoggingEnabled())
        {
          v24 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v40 = a1;
            _os_log_impl(&dword_1ABB60000, v24, OS_LOG_TYPE_INFO, "Found chat for guid: %@", buf, 0xCu);
          }
        }
        if (sub_1ABBEC640() <= 0)
        {
          if (IMOSLoggingEnabled())
          {
            v25 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              v40 = a4;
              _os_log_impl(&dword_1ABB60000, v25, OS_LOG_TYPE_INFO, "Creating handle for: %@", buf, 0xCu);
            }
          }
          sub_1ABBEC790();
        }
        if (sub_1ABBEC968() < 1)
        {
          v37 = IMLogHandleForCategory();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            sub_1ABC5FD3C();
        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            v26 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              v40 = a2;
              v41 = 2112;
              v42 = a1;
              _os_log_impl(&dword_1ABB60000, v26, OS_LOG_TYPE_INFO, "Created message for guid: %@  associating with chat: %@", buf, 0x16u);
            }
          }
          sub_1ABBECBB8();
        }
      }
    }
  }
  else
  {
    v27 = IMLogHandleForCategory();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      sub_1ABC5FE04(v27, v28, v29, v30, v31, v32, v33, v34);
  }
}

uint64_t IMDBindAttachmentToMessage(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v7 = 138412546;
      v8 = a2;
      v9 = 2112;
      v10 = a1;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Associated attachment GUID %@ with message GUID: %@", (uint8_t *)&v7, 0x16u);
    }
  }
  v5 = sub_1ABBEC590();
  result = sub_1ABBEC5E8();
  if (v5 >= 1 && result >= 1)
  {
    CSDBSqliteConnectionStatementForSQL();
    CSDBSqliteBindInt64();
    CSDBSqliteBindInt64();
    CSDBSqliteStatementPerform();
    return CSDBSqliteStatementReset();
  }
  return result;
}

_OWORD *IMDCreateIMDMessageRecordRefFromIMMessageItem(void *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  NSObject *v5;
  _OWORD *result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  const __CFString *v39;
  uint64_t v40;
  const __CFString *v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  const __CFString *v45;
  const __CFString *v46;
  NSObject *v47;
  _BOOL4 v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  const __CFString *v52;
  unint64_t v53;
  const __CFString *v54;
  NSObject *v55;
  uint64_t v56;
  NSObject *v57;
  NSObject *v58;
  NSObject *v59;
  NSObject *v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  NSObject *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE v140[12];
  _BYTE buf[32];
  _BYTE v142[10];
  __int16 v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    switch(objc_msgSend(a1, "type"))
    {
      case 0:
        v2 = objc_msgSend(a1, "guid");
        v3 = (void *)objc_msgSend(a1, "time");
        v128 = (void *)objc_msgSend(a1, "timeRead");
        v120 = (void *)objc_msgSend(a1, "timeDelivered");
        v4 = (void *)objc_msgSend(a1, "timePlayed");
        v105 = v2;
        if (objc_msgSend(a1, "body"))
        {
          objc_msgSend(a1, "body");
          v103 = JWEncodeCodableObject();
        }
        else
        {
          v103 = 0;
        }
        v23 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(a1, "flags"));
        v24 = objc_msgSend(a1, "service");
        v25 = objc_msgSend(a1, "account");
        v26 = objc_msgSend(a1, "accountID");
        v116 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(a1, "errorCode"));
        v27 = objc_msgSend((id)objc_msgSend(a1, "roomName"), "length");
        v28 = &unk_1E5ADC0A8;
        if (!v27)
          v28 = &unk_1E5ADC090;
        v113 = v28;
        v97 = objc_msgSend(a1, "subject");
        v29 = objc_msgSend((id)objc_msgSend(a1, "body"), "string");
        v95 = objc_msgSend(a1, "partCount");
        v102 = (void *)v23;
        v101 = v24;
        v100 = v25;
        v99 = v26;
        v98 = v29;
        if (objc_msgSend(a1, "isFromMe"))
          v30 = objc_msgSend(a1, "handle");
        else
          v30 = objc_msgSend(a1, "sender");
        v96 = v30;
        v94 = objc_msgSend(a1, "expireState");
        v92 = objc_msgSend(a1, "destinationCallerID");
        v93 = objc_msgSend(a1, "balloonBundleID");
        v91 = objc_msgSend(a1, "payloadData");
        v90 = objc_msgSend(a1, "expressiveSendStyleID");
        v109 = (void *)objc_msgSend(a1, "timeExpressiveSendPlayed");
        v31 = objc_msgSend(a1, "associatedMessageGUID");
        v88 = objc_msgSend(a1, "associatedMessageType");
        v32 = objc_msgSend(a1, "associatedMessageRange");
        v86 = v33;
        v87 = v32;
        v85 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithMessageSummaryInfoDictionary:", objc_msgSend(a1, "messageSummaryInfo"));
        v89 = v31;
        if (v31)
        {
          v138 = 0;
          v139 = objc_msgSend(a1, "type");
          if (v139)
          {
            *(_OWORD *)buf = xmmword_1E5AB9E00;
            *(_OWORD *)&buf[16] = *(_OWORD *)off_1E5AB9E10;
            *(_QWORD *)v142 = 826;
            v34 = objc_msgSend(MEMORY[0x1E0CB3B18], "value:withObjCType:", &v139, "q");
            v35 = objc_msgSend(MEMORY[0x1E0CB3B18], "value:withObjCType:", &v138, "q");
            v36 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected not equal '%@ (%@) != %@ (%@)' in %s at %s:%d. %@"), CFSTR("[imMessageItem type]"), v34, CFSTR("IMDMessageRecordItemTypeMessage"), v35, "IMDMessageRecordRef IMDCreateIMDMessageRecordRefFromIMMessageItem(IMItem *)", IMFileLocationTrimFileName(), *(unsigned int *)v142, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
            v37 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
            if (v37)
            {
              v37(v36);
            }
            else if (IMOSLoggingEnabled())
            {
              v60 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)v140 = 138412290;
                *(_QWORD *)&v140[4] = v36;
                _os_log_impl(&dword_1ABB60000, v60, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", v140, 0xCu);
              }
            }
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            *(_OWORD *)buf = xmmword_1E5AB9E28;
            *(_OWORD *)&buf[16] = *(_OWORD *)off_1E5AB9E38;
            *(_QWORD *)v142 = 827;
            v61 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected false '%@' in %s at %s:%d. %@"), CFSTR("[imMessageItem isKindOfClass:[IMAssociatedMessageItem class]]"), "IMDMessageRecordRef IMDCreateIMDMessageRecordRefFromIMMessageItem(IMItem *)", IMFileLocationTrimFileName(), 827, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
            v62 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
            if (v62)
            {
              v62(v61);
            }
            else if (IMOSLoggingEnabled())
            {
              v63 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)v140 = 138412290;
                *(_QWORD *)&v140[4] = v61;
                _os_log_impl(&dword_1ABB60000, v63, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", v140, 0xCu);
              }
            }
          }
        }
        v84 = IMDDataDectorDictionaryForMessageItem(a1);
        *(_QWORD *)buf = 0;
        *(_QWORD *)v140 = 0;
        objc_msgSend(a1, "threadIdentifier");
        IMMessageThreadIdentifierGetComponents();
        v83 = objc_msgSend(MEMORY[0x1E0D39948], "serializedStringFromArray:", objc_msgSend(a1, "syndicationRanges"));
        v81 = objc_msgSend(MEMORY[0x1E0D39948], "serializedStringFromArray:", objc_msgSend(a1, "syncedSyndicationRanges"));
        v82 = (void *)objc_msgSend(a1, "dateEdited");
        v80 = objc_msgSend(a1, "biaReferenceID");
        v79 = objc_msgSend(a1, "fallbackHash");
        v78 = objc_msgSend(a1, "associatedMessageEmoji");
        v77 = objc_msgSend(a1, "scheduleType");
        v76 = objc_msgSend(a1, "scheduleState");
        v75 = objc_msgSend(v3, "__im_nanosecondTimeInterval");
        v137 = objc_msgSend(v128, "__im_nanosecondTimeInterval");
        v127 = objc_msgSend(v120, "__im_nanosecondTimeInterval");
        v74 = objc_msgSend(v4, "__im_nanosecondTimeInterval");
        v119 = objc_msgSend(v116, "intValue");
        v64 = objc_msgSend(v113, "intValue");
        v115 = objc_msgSend(a1, "replaceID");
        v73 = objc_msgSend(a1, "countryCode");
        v72 = objc_msgSend(a1, "unformattedID");
        v65 = objc_msgSend(v109, "__im_nanosecondTimeInterval");
        v66 = objc_msgSend(a1, "cloudKitSyncState");
        v67 = objc_msgSend(a1, "cloudKitRecordID");
        v68 = objc_msgSend(a1, "cloudKitServerChangeTokenBlob");
        v69 = objc_msgSend(a1, "cloudKitRecordChangeTag");
        v70 = objc_msgSend(a1, "replyToGUID");
        v71 = objc_msgSend(a1, "sortID");
        result = IMDMessageRecordCreate(0, 0, v98, v75, v137, v127, v74, v119, v64, v115, v102, v105, v103, v101, v100, v99, v97, v96, v73,
                   v72,
                   0,
                   0,
                   0,
                   0,
                   0,
                   v94,
                   0,
                   v89,
                   v88,
                   v87,
                   v86,
                   v93,
                   v91,
                   v90,
                   v65,
                   v85,
                   v66,
                   v67,
                   v68,
                   v69,
                   (uint64_t)v84,
                   v92,
                   v70,
                   v71,
                   *(uint64_t *)buf,
                   *(uint64_t *)v140,
                   v83,
                   v81,
                   v95,
                   objc_msgSend(v82, "__im_nanosecondTimeInterval"),
                   v80,
                   v79,
                   v78,
                   v77,
                   v76);
        break;
      case 1:
        if (objc_msgSend(a1, "sender"))
          v133 = objc_msgSend(a1, "sender");
        else
          v133 = objc_msgSend(a1, "handle");
        v117 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithMessageSummaryInfoDictionary:", objc_msgSend(a1, "messageSummaryInfo"));
        v122 = objc_msgSend(a1, "changeType");
        v48 = objc_msgSend(a1, "timeRead") != 0;
        if (IMOSLoggingEnabled())
        {
          v49 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
          {
            v50 = objc_msgSend(a1, "guid");
            v51 = objc_msgSend(a1, "otherHandle");
            v52 = CFSTR("remove");
            *(_DWORD *)buf = 138413058;
            *(_QWORD *)&buf[4] = v50;
            *(_WORD *)&buf[12] = 2112;
            if (!v122)
              v52 = CFSTR("invite");
            *(_QWORD *)&buf[14] = v52;
            *(_WORD *)&buf[22] = 2112;
            *(_QWORD *)&buf[24] = v133;
            *(_WORD *)v142 = 2112;
            *(_QWORD *)&v142[2] = v51;
            _os_log_impl(&dword_1ABB60000, v49, OS_LOG_TYPE_INFO, "Attempting to create participant change item with GUID: %@  %@  %@ => %@", buf, 0x2Au);
          }
        }
        v114 = objc_msgSend((id)objc_msgSend(a1, "time"), "__im_nanosecondTimeInterval");
        v110 = objc_msgSend((id)objc_msgSend(a1, "timeRead"), "__im_nanosecondTimeInterval");
        v106 = objc_msgSend(a1, "errorCode");
        result = IMDMessageRecordCreate(0, 1, 0, v114, v110, 0, 0, v106, 0, 0, (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", (unint64_t)v48 << 13), objc_msgSend(a1, "guid"), 0, objc_msgSend(a1, "service"), objc_msgSend(a1, "account"), objc_msgSend(a1, "accountID"), 0, v133, objc_msgSend(a1, "countryCode"),
                   objc_msgSend(a1, "unformattedID"),
                   objc_msgSend(a1, "otherHandle"),
                   0,
                   v122,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   v117,
                   objc_msgSend(a1, "cloudKitSyncState"),
                   objc_msgSend(a1, "cloudKitRecordID"),
                   objc_msgSend(a1, "cloudKitServerChangeTokenBlob"),
                   objc_msgSend(a1, "cloudKitRecordChangeTag"),
                   0,
                   objc_msgSend(a1, "destinationCallerID"),
                   objc_msgSend(a1, "replyToGUID"),
                   objc_msgSend(a1, "sortID"),
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0);
        break;
      case 2:
        v130 = objc_msgSend(a1, "guid");
        v7 = (void *)objc_msgSend(a1, "time");
        v8 = objc_msgSend(a1, "service");
        v9 = objc_msgSend(a1, "account");
        v10 = objc_msgSend(a1, "accountID");
        if (objc_msgSend(a1, "sender"))
          v11 = objc_msgSend(a1, "sender");
        else
          v11 = objc_msgSend(a1, "handle");
        v56 = v11;
        v104 = objc_msgSend(a1, "otherHandle");
        v118 = v8;
        v124 = objc_msgSend(a1, "title");
        if (IMOSLoggingEnabled())
        {
          v57 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = v130;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v124;
            _os_log_impl(&dword_1ABB60000, v57, OS_LOG_TYPE_INFO, "Attempting to create title item with GUID: %@   title: %@", buf, 0x16u);
          }
        }
        result = IMDMessageRecordCreate(0, 2, 0, objc_msgSend(v7, "__im_nanosecondTimeInterval"), 0, 0, 0, objc_msgSend(a1, "errorCode"), 0, 0, 0, v130, 0, v118, v9, v10, 0, v56, objc_msgSend(a1, "countryCode"),
                   objc_msgSend(a1, "unformattedID"),
                   v104,
                   v124,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   objc_msgSend(a1, "cloudKitSyncState"),
                   objc_msgSend(a1, "cloudKitRecordID"),
                   objc_msgSend(a1, "cloudKitServerChangeTokenBlob"),
                   objc_msgSend(a1, "cloudKitRecordChangeTag"),
                   0,
                   objc_msgSend(a1, "destinationCallerID"),
                   objc_msgSend(a1, "replyToGUID"),
                   objc_msgSend(a1, "sortID"),
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0);
        break;
      case 3:
        if (objc_msgSend(a1, "sender"))
          v131 = objc_msgSend(a1, "sender");
        else
          v131 = objc_msgSend(a1, "handle");
        v121 = objc_msgSend(a1, "actionType");
        if (IMOSLoggingEnabled())
        {
          v47 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412802;
            *(_QWORD *)&buf[4] = objc_msgSend(a1, "guid");
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v131;
            *(_WORD *)&buf[22] = 2112;
            *(_QWORD *)&buf[24] = objc_msgSend(a1, "otherHandle");
            _os_log_impl(&dword_1ABB60000, v47, OS_LOG_TYPE_INFO, "Attempting to add group leave GUID: %@ %@ => %@", buf, 0x20u);
          }
        }
        result = IMDMessageRecordCreate(0, 3, 0, objc_msgSend((id)objc_msgSend(a1, "time"), "__im_nanosecondTimeInterval"), 0, 0, 0, objc_msgSend(a1, "errorCode"), 0, 0, 0, objc_msgSend(a1, "guid"), 0, objc_msgSend(a1, "service"), objc_msgSend(a1, "account"), objc_msgSend(a1, "accountID"), 0, v131, objc_msgSend(a1, "countryCode"),
                   objc_msgSend(a1, "unformattedID"),
                   objc_msgSend(a1, "otherHandle"),
                   0,
                   v121,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   objc_msgSend(a1, "cloudKitSyncState"),
                   objc_msgSend(a1, "cloudKitRecordID"),
                   objc_msgSend(a1, "cloudKitServerChangeTokenBlob"),
                   objc_msgSend(a1, "cloudKitRecordChangeTag"),
                   0,
                   objc_msgSend(a1, "destinationCallerID"),
                   objc_msgSend(a1, "replyToGUID"),
                   objc_msgSend(a1, "sortID"),
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0);
        break;
      case 4:
        if (objc_msgSend(a1, "sender"))
          v129 = objc_msgSend(a1, "sender");
        else
          v129 = objc_msgSend(a1, "handle");
        v38 = objc_msgSend(a1, "status");
        if (v38 == 1)
          v39 = CFSTR("stop sharing");
        else
          v39 = CFSTR("unknown");
        v40 = objc_msgSend(a1, "direction");
        if (v40)
          v41 = CFSTR("unknown");
        else
          v41 = CFSTR("outgoing");
        if (IMOSLoggingEnabled())
        {
          v42 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
          {
            v43 = objc_msgSend(a1, "guid");
            v44 = objc_msgSend(a1, "otherHandle");
            v45 = CFSTR("incoming");
            *(_DWORD *)buf = 138413314;
            if (v40 != 1)
              v45 = v41;
            *(_QWORD *)&buf[4] = v43;
            *(_WORD *)&buf[12] = 2112;
            v46 = CFSTR("start sharing");
            if (v38)
              v46 = v39;
            *(_QWORD *)&buf[14] = v46;
            *(_WORD *)&buf[22] = 2112;
            *(_QWORD *)&buf[24] = v45;
            *(_WORD *)v142 = 2112;
            *(_QWORD *)&v142[2] = v129;
            v143 = 2112;
            v144 = v44;
            _os_log_impl(&dword_1ABB60000, v42, OS_LOG_TYPE_INFO, "Attempting location share update to chat guid GUID: %@  (%@:%@) %@ => %@", buf, 0x34u);
          }
        }
        result = IMDMessageRecordCreate(0, 4, 0, objc_msgSend((id)objc_msgSend(a1, "time"), "__im_nanosecondTimeInterval"), 0, 0, 0, 0, 0, 0, 0, objc_msgSend(a1, "guid"), 0, objc_msgSend(a1, "service"), objc_msgSend(a1, "account"), objc_msgSend(a1, "accountID"), 0, v129, objc_msgSend(a1, "countryCode"),
                   objc_msgSend(a1, "unformattedID"),
                   objc_msgSend(a1, "otherHandle"),
                   0,
                   0,
                   objc_msgSend(a1, "status"),
                   objc_msgSend(a1, "direction"),
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   objc_msgSend(a1, "cloudKitSyncState"),
                   objc_msgSend(a1, "cloudKitRecordID"),
                   objc_msgSend(a1, "cloudKitServerChangeTokenBlob"),
                   objc_msgSend(a1, "cloudKitRecordChangeTag"),
                   0,
                   objc_msgSend(a1, "destinationCallerID"),
                   objc_msgSend(a1, "replyToGUID"),
                   objc_msgSend(a1, "sortID"),
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0);
        break;
      case 5:
        if (objc_msgSend(a1, "sender"))
          v134 = objc_msgSend(a1, "sender");
        else
          v134 = objc_msgSend(a1, "handle");
        v53 = objc_msgSend(a1, "actionType");
        v123 = v53;
        if (v53 >= 3)
          v54 = CFSTR("unknown");
        else
          v54 = off_1E5AB9E50[v53];
        if (IMOSLoggingEnabled())
        {
          v55 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138413058;
            *(_QWORD *)&buf[4] = objc_msgSend(a1, "guid");
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v54;
            *(_WORD *)&buf[22] = 2112;
            *(_QWORD *)&buf[24] = v134;
            *(_WORD *)v142 = 2112;
            *(_QWORD *)&v142[2] = objc_msgSend(a1, "otherHandle");
            _os_log_impl(&dword_1ABB60000, v55, OS_LOG_TYPE_INFO, "Attempting to add message action GUID: %@ (%@) %@ => %@", buf, 0x2Au);
          }
        }
        result = IMDMessageRecordCreate(0, 5, 0, objc_msgSend((id)objc_msgSend(a1, "time"), "__im_nanosecondTimeInterval"), 0, 0, 0, 0, 0, 0, 0, objc_msgSend(a1, "guid"), 0, objc_msgSend(a1, "service"), objc_msgSend(a1, "account"), objc_msgSend(a1, "accountID"), objc_msgSend(a1, "originalMessageGUID"), v134, objc_msgSend(a1, "countryCode"),
                   objc_msgSend(a1, "unformattedID"),
                   objc_msgSend(a1, "otherHandle"),
                   0,
                   0,
                   0,
                   0,
                   0,
                   v123,
                   0,
                   0,
                   0,
                   0,
                   objc_msgSend(a1, "balloonBundleID"),
                   0,
                   0,
                   0,
                   0,
                   objc_msgSend(a1, "cloudKitSyncState"),
                   objc_msgSend(a1, "cloudKitRecordID"),
                   objc_msgSend(a1, "cloudKitServerChangeTokenBlob"),
                   objc_msgSend(a1, "cloudKitRecordChangeTag"),
                   0,
                   objc_msgSend(a1, "destinationCallerID"),
                   objc_msgSend(a1, "replyToGUID"),
                   objc_msgSend(a1, "sortID"),
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0);
        break;
      case 6:
        if (IMOSLoggingEnabled())
        {
          v17 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = objc_msgSend(a1, "guid");
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = objc_msgSend(a1, "conversationUUID");
            _os_log_impl(&dword_1ABB60000, v17, OS_LOG_TYPE_INFO, "Attempting to create a TU Conversation item with guid %@ conversationUUID: %@", buf, 0x16u);
          }
        }
        v135 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(a1, "flags"));
        result = IMDMessageRecordCreate(0, 6, 0, objc_msgSend((id)objc_msgSend(a1, "time"), "__im_nanosecondTimeInterval"), 0, 0, 0, 0, 0, 0, v135, objc_msgSend(a1, "guid"), 0, objc_msgSend(a1, "service"), objc_msgSend(a1, "account"), objc_msgSend(a1, "accountID"), 0, objc_msgSend(a1, "handle"), objc_msgSend(a1, "countryCode"),
                   objc_msgSend(a1, "unformattedID"),
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   objc_msgSend(MEMORY[0x1E0C99D50], "dataWithMessageSummaryInfoDictionary:", objc_msgSend(a1, "messageSummaryInfo")), objc_msgSend(a1, "cloudKitSyncState"), objc_msgSend(a1, "cloudKitRecordID"), objc_msgSend(a1, "cloudKitServerChangeTokenBlob"), objc_msgSend(a1, "cloudKitRecordChangeTag"), 0, objc_msgSend(a1, "destinationCallerID"), objc_msgSend(a1, "replyToGUID"), objc_msgSend(a1, "sortID"), 0, 0, 0, 0, 0, 0, 0, 0,
                   0,
                   0,
                   0);
        break;
      case 7:
        v132 = objc_msgSend(a1, "guid");
        v12 = (void *)objc_msgSend(a1, "time");
        v13 = objc_msgSend(a1, "service");
        v14 = objc_msgSend(a1, "account");
        v15 = objc_msgSend(a1, "accountID");
        if (objc_msgSend(a1, "sender"))
          v16 = objc_msgSend(a1, "sender");
        else
          v16 = objc_msgSend(a1, "handle");
        v111 = v16;
        v125 = v13;
        v107 = objc_msgSend(a1, "otherHandle");
        if (IMOSLoggingEnabled())
        {
          v58 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v132;
            _os_log_impl(&dword_1ABB60000, v58, OS_LOG_TYPE_INFO, "Attempting to create transcript sharing item with GUID: %@", buf, 0xCu);
          }
        }
        result = IMDMessageRecordCreate(0, 7, 0, objc_msgSend(v12, "__im_nanosecondTimeInterval"), 0, 0, 0, 0, 0, 0, 0, v132, 0, v125, v14, v15, 0, v111, objc_msgSend(a1, "countryCode"),
                   objc_msgSend(a1, "unformattedID"),
                   v107,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   objc_msgSend(a1, "cloudKitSyncState"),
                   objc_msgSend(a1, "cloudKitRecordID"),
                   objc_msgSend(a1, "cloudKitServerChangeTokenBlob"),
                   objc_msgSend(a1, "cloudKitRecordChangeTag"),
                   0,
                   objc_msgSend(a1, "destinationCallerID"),
                   objc_msgSend(a1, "replyToGUID"),
                   objc_msgSend(a1, "sortID"),
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0);
        break;
      case 8:
        v136 = objc_msgSend(a1, "guid");
        v18 = (void *)objc_msgSend(a1, "time");
        v19 = objc_msgSend(a1, "service");
        v20 = objc_msgSend(a1, "account");
        v21 = objc_msgSend(a1, "accountID");
        if (objc_msgSend(a1, "sender"))
          v22 = objc_msgSend(a1, "sender");
        else
          v22 = objc_msgSend(a1, "handle");
        v112 = v22;
        v126 = v19;
        v108 = objc_msgSend(a1, "otherHandle");
        if (IMOSLoggingEnabled())
        {
          v59 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v136;
            _os_log_impl(&dword_1ABB60000, v59, OS_LOG_TYPE_INFO, "Attempting to create location update item with GUID: %@", buf, 0xCu);
          }
        }
        result = IMDMessageRecordCreate(0, 8, 0, objc_msgSend(v18, "__im_nanosecondTimeInterval"), 0, 0, 0, 0, 0, 0, 0, v136, 0, v126, v20, v21, 0, v112, objc_msgSend(a1, "countryCode"),
                   objc_msgSend(a1, "unformattedID"),
                   v108,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   objc_msgSend(a1, "cloudKitSyncState"),
                   objc_msgSend(a1, "cloudKitRecordID"),
                   objc_msgSend(a1, "cloudKitServerChangeTokenBlob"),
                   objc_msgSend(a1, "cloudKitRecordChangeTag"),
                   0,
                   objc_msgSend(a1, "destinationCallerID"),
                   objc_msgSend(a1, "replyToGUID"),
                   objc_msgSend(a1, "sortID"),
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0);
        break;
      default:
        return 0;
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Attempted to create IMDMessageRecordRef from nil IMItem.", buf, 2u);
      }
    }
    return 0;
  }
  return result;
}

id IMDDataDectorDictionaryForMessageItem(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v3 = objc_msgSend(a1, "roomName");
  if (v3)
  {
    v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("msg-room-%@"), v3);
LABEL_5:
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, *MEMORY[0x1E0D37008]);
    goto LABEL_6;
  }
  v5 = objc_msgSend(a1, "handle");
  if (v5)
  {
    v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("msg-handle-%@"), v5);
    goto LABEL_5;
  }
LABEL_6:
  v6 = objc_msgSend(a1, "service");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, *MEMORY[0x1E0D37010]);
  v7 = (void *)objc_msgSend(v2, "copy");

  return v7;
}

id IMDUpdateIMMessageItemWithIMMessageItemForceReplaceReplaceError(id a1, void *a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  char isKindOfClass;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  double v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const __CFString *v80;
  const __CFString *v81;
  void *v82;
  void *v83;
  int v84;
  void *v85;
  const __CFString *v86;
  const __CFString *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  const __CFString *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  void *v136;
  void *v137;
  void *v138;
  int v139;
  void *v140;
  int v141;
  CFNumberRef v142;
  int v143;
  void *v144;
  void *v145;
  void *v146;
  int v147;
  void *v148;
  void *v149;
  void *v150;
  int v151;
  void *v152;
  void *v153;
  void *v154;
  int v155;
  void *v156;
  void *v157;
  void *v158;
  int v159;
  void *v160;
  void *v161;
  void *v162;
  int v163;
  void *v164;
  void *v165;
  void *v166;
  int v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  int v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  void *v185;
  void *v186;
  void *v187;
  int v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  int v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  void *v203;
  int v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  void *v209;
  void *v210;
  void *v211;
  int v212;
  void *v213;
  void *v214;
  void *v215;
  int v216;
  void *v217;
  void *v218;
  void *v219;
  int v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  id v225;
  void *v226;
  int v227;
  id v228;
  void *v229;
  int v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  void *v235;
  void *v236;
  void *v237;
  int v238;
  void *v239;
  uint64_t v240;
  int v241;
  void *v242;
  void *v243;
  void *v244;
  int v245;
  void *v246;
  void *v247;
  void *v248;
  int v249;
  void *v250;
  uint64_t v251;
  int v252;
  void *v253;
  uint64_t v254;
  int v255;
  _BOOL8 v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  const __CFString *v260;
  int v261;
  __CFString *v262;
  const void *v263;
  uint64_t v264;
  const void *v265;
  void *v266;
  void *v267;
  int v268;
  void *v269;
  void *v270;
  int v271;
  uint64_t v272;
  int64_t v273;
  int64_t v274;
  uint64_t Identifier;
  int v277;
  int v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  int v288;
  int64_t v289;
  int v290;
  uint64_t v291;
  int v292;
  int64_t v293;
  int v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  int v298;
  int64_t v299;
  int v300;
  int64_t v301;
  int v302;
  int64_t v303;
  int v304;
  uint64_t v305;
  int v306;
  int64_t v307;
  int v308;
  unsigned int v309;
  int v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  int v324;
  int64_t v325;
  int v326;
  int64_t v327;
  int v328;
  int64_t v329;
  int v330;
  int64_t v331;
  int v332;
  int64_t v333;
  void *v334;
  int v335;
  int v336;
  void *v337;
  int v339;
  void *v340;
  void *context;
  const __CFString *v343;
  const void *v344;
  const void *v345;
  CFTypeRef v346;
  CFTypeRef v347;
  CFTypeRef v348;
  uint64_t v349;
  uint64_t v350;
  CFTypeRef v351;
  CFTypeRef v352;
  CFTypeRef v353;
  CFTypeRef v354;
  uint64_t v355;
  CFTypeRef v356;
  CFTypeRef v357;
  CFTypeRef v358;
  CFTypeRef v359;
  CFTypeRef v360;
  const void *v361;
  CFTypeRef v362;
  CFTypeRef cf;
  uint64_t v364;
  CFTypeRef v365;
  uint64_t v366;
  CFTypeRef v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  CFTypeRef v373;
  uint64_t v374;
  uint64_t v375;
  CFTypeRef v376;
  __int16 v377;
  uint64_t v378;
  uint64_t v379;
  CFTypeRef v380;
  const void *v381;
  CFTypeRef v382;
  CFTypeRef v383;
  CFTypeRef v384;
  CFNumberRef v385;
  CFTypeRef v386;
  CFTypeRef v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  CFTypeRef v392;
  uint64_t v393;
  uint64_t v394;
  id v395;
  id v396;
  __int128 buf;
  uint64_t v398;

  v398 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      a1 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D396C8]), "initWithMessageItem:", a1);
  }
  context = (void *)MEMORY[0x1AF435474]();
  v13 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("IMMessageItem: %@"), objc_msgSend(a1, "guid"));
  v14 = (void *)objc_msgSend(a2, "plainBody");
  if ((a3 & 1) == 0
    && ((v16 = (void *)objc_msgSend(a1, "plainBody"), v16 == v14)
     || (v17 = v16, objc_msgSend(v16, "length"))
     && objc_msgSend(v14, "length")
     && objc_msgSend(v17, "isEqualToString:", v14)))
  {
    v15 = objc_msgSend(a2, "bodyData");
  }
  else
  {
    objc_msgSend(a1, "setPlainBody:", v14);
    v15 = objc_msgSend(a2, "bodyData");
    if ((a3 & 1) != 0)
      goto LABEL_17;
  }
  v18 = (void *)objc_msgSend(a1, "bodyData");
  if (v18 == (void *)v15 || v15 && v18 && objc_msgSend(v18, "isEqualToData:", v15))
  {
    v19 = (void *)objc_msgSend(a2, "body");
    goto LABEL_18;
  }
LABEL_17:
  objc_msgSend(a1, "setBodyData:", v15);
  v19 = (void *)objc_msgSend(a2, "body");
  if ((a3 & 1) != 0)
  {
LABEL_22:
    objc_msgSend(v13, "appendString:", CFSTR(", body changed"));
    objc_msgSend(a1, "setBody:", v19);
    goto LABEL_23;
  }
LABEL_18:
  v20 = (void *)objc_msgSend((id)objc_msgSend(a1, "body"), "string");
  v21 = objc_msgSend(v19, "string");
  if (v20 != (void *)v21)
  {
    v22 = (void *)v21;
    if (!objc_msgSend(v20, "length")
      || !objc_msgSend(v22, "length")
      || (objc_msgSend(v20, "isEqualToString:", v22) & 1) == 0)
    {
      goto LABEL_22;
    }
  }
LABEL_23:
  objc_msgSend(a1, "setPartCount:", objc_msgSend(a2, "partCount"));
  v23 = (void *)objc_msgSend(a2, "subject");
  if ((a3 & 1) != 0
    || (v82 = (void *)objc_msgSend(a1, "subject"), v82 != v23)
    && ((v83 = v82, !objc_msgSend(v82, "length"))
     || !objc_msgSend(v23, "length")
     || (objc_msgSend(v83, "isEqualToString:", v23) & 1) == 0))
  {
    objc_msgSend(v13, "appendString:", CFSTR(", subject changed"));
    objc_msgSend(a1, "setSubject:", v23);
  }
  if ((isKindOfClass & 1) != 0)
  {
    v24 = (void *)objc_msgSend(a1, "associatedMessageGUID");
    v25 = objc_msgSend(a2, "associatedMessageGUID");
    if (v24 != (void *)v25)
    {
      v26 = (void *)v25;
      if (!objc_msgSend(v24, "length")
        || objc_msgSend(v26, "length") && (objc_msgSend(v24, "isEqualToString:", v26) & 1) == 0)
      {
        objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", associatedMessageGUID from %@ to %@"), objc_msgSend(a1, "associatedMessageGUID"), objc_msgSend(a2, "associatedMessageGUID")));
        objc_msgSend(a1, "setAssociatedMessageGUID:", objc_msgSend(a2, "associatedMessageGUID"));
      }
    }
    v27 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(a1, "associatedMessageType"));
    v28 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(a2, "associatedMessageType"));
    if (v27 != (void *)v28 && (!v27 || (v29 = v28) != 0 && (objc_msgSend(v27, "isEqualToNumber:", v28) & 1) == 0))
    {
      v30 = (void *)MEMORY[0x1E0CB3940];
      v31 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(a1, "associatedMessageType"));
      objc_msgSend(v13, "appendString:", objc_msgSend(v30, "stringWithFormat:", CFSTR(", associatedMessageType from %@ to %@"), v31, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(a2, "associatedMessageType"))));
      objc_msgSend(a1, "setAssociatedMessageType:", objc_msgSend(a2, "associatedMessageType"));
    }
    v32 = objc_msgSend(a2, "associatedMessageRange", v29);
    v34 = v33;
    v35 = objc_msgSend(a1, "associatedMessageRange");
    v37 = v34 == v36 && v32 == v35;
    if (!v37 && v34)
      objc_msgSend(a1, "setAssociatedMessageRange:", v32, v34);
  }
  if ((a3 & 1) != 0 || objc_msgSend(a2, "payloadData") || objc_msgSend(a1, "payloadData"))
  {
    v38 = (void *)objc_msgSend(a1, "payloadData");
    v39 = objc_msgSend(a2, "payloadData");
    if (v38 != (void *)v39 && (!v38 || (v40 = v39) == 0 || (objc_msgSend(v38, "isEqualToData:", v39) & 1) == 0))
      objc_msgSend(a1, "setPayloadData:", objc_msgSend(a2, "payloadData", v40));
    if ((a3 & 1) != 0)
      goto LABEL_55;
  }
  if (objc_msgSend(a2, "messageSummaryInfo") || objc_msgSend(a1, "messageSummaryInfo"))
  {
LABEL_55:
    if ((objc_msgSend((id)objc_msgSend(a2, "messageSummaryInfo"), "isEqualToDictionary:", objc_msgSend(a1, "messageSummaryInfo")) & 1) == 0)objc_msgSend(a1, "setMessageSummaryInfo:", objc_msgSend(a2, "messageSummaryInfo"));
    if ((a3 & 1) != 0)
      goto LABEL_58;
  }
  if (objc_msgSend(a2, "fileTransferGUIDs") || objc_msgSend(a1, "fileTransferGUIDs"))
  {
LABEL_58:
    if ((objc_msgSend((id)objc_msgSend(a2, "fileTransferGUIDs"), "isEqualToArray:", objc_msgSend(a1, "fileTransferGUIDs")) & 1) == 0)
    {
      objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", fileTransferGUIDs from %@ to %@"), objc_msgSend(a1, "fileTransferGUIDs"), objc_msgSend(a2, "fileTransferGUIDs")));
      objc_msgSend(a1, "setFileTransferGUIDs:", objc_msgSend(a2, "fileTransferGUIDs"));
    }
  }
  v41 = objc_msgSend(a2, "time");
  v42 = (void *)v41;
  if ((a3 & 1) != 0 || v41)
  {
    v43 = (void *)objc_msgSend(a1, "time");
    if (v43 != v42 && (!v43 || v42 && (objc_msgSend(v43, "isEqualToDate:", v42) & 1) == 0))
    {
      if ((a3 & 1) != 0
        || (objc_msgSend((id)objc_msgSend(a1, "time"), "timeIntervalSinceReferenceDate"), v44 >= 0.00000011920929))
      {
        objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", time from %@ to %@"), objc_msgSend(a1, "time"), v42));
        objc_msgSend(a1, "setTime:", v42);
      }
    }
  }
  v45 = objc_msgSend(a2, "timeDelivered");
  if (v45 || a3)
  {
    v46 = (void *)objc_msgSend(a1, "timeDelivered");
    if (v46 != (void *)v45 && (!v46 || v45 && (objc_msgSend(v46, "isEqualToDate:", v45) & 1) == 0))
    {
      objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", timeDelivered from %@ to %@"), objc_msgSend(a1, "timeDelivered"), v45));
      objc_msgSend(a1, "setTimeDelivered:", v45);
    }
  }
  v47 = objc_msgSend(a2, "timeRead");
  if (v47 || a3)
  {
    v48 = (void *)objc_msgSend(a1, "timeRead");
    if (v48 != (void *)v47 && (!v48 || v47 && (objc_msgSend(v48, "isEqualToDate:", v47) & 1) == 0))
    {
      objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", timeRead from %@ to %@"), objc_msgSend(a1, "timeRead"), v47));
      objc_msgSend(a1, "setTimeRead:", v47);
    }
  }
  v49 = objc_msgSend(a2, "timePlayed");
  if (v49 || a3)
  {
    v50 = (void *)objc_msgSend(a1, "timePlayed");
    if (v50 != (void *)v49 && (!v50 || v49 && (objc_msgSend(v50, "isEqualToDate:", v49) & 1) == 0))
    {
      objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", timePlayed from %@ to %@"), objc_msgSend(a1, "timePlayed"), v49));
      objc_msgSend(a1, "setTimePlayed:", v49);
    }
  }
  v51 = objc_msgSend(a2, "dateEdited");
  if (v51 || a3)
  {
    v52 = (void *)objc_msgSend(a1, "dateEdited");
    if (v52 != (void *)v51 && (!v52 || v51 && (objc_msgSend(v52, "isEqualToDate:", v51) & 1) == 0))
    {
      objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", dateEdited from %@ to %@"), objc_msgSend(a1, "dateEdited"), v51));
      objc_msgSend(a1, "setDateEdited:", v51);
    }
  }
  v53 = (void *)objc_msgSend(a2, "account");
  v54 = (void *)objc_msgSend(a1, "account");
  if (v54 != v53)
  {
    v55 = v54;
    if (!objc_msgSend(v54, "length")
      || objc_msgSend(v53, "length") && (objc_msgSend(v55, "isEqualToString:", v53) & 1) == 0)
    {
      objc_msgSend(a1, "setAccount:", v53);
    }
  }
  v56 = (void *)objc_msgSend(a2, "accountID");
  v57 = (void *)objc_msgSend(a1, "accountID");
  if (v57 != v56)
  {
    v58 = v57;
    if (!objc_msgSend(v57, "length")
      || objc_msgSend(v56, "length") && (objc_msgSend(v58, "isEqualToString:", v56) & 1) == 0)
    {
      objc_msgSend(a1, "setAccountID:", v56);
    }
  }
  v59 = (void *)objc_msgSend(a2, "service");
  v60 = (void *)objc_msgSend(a1, "service");
  if (v60 != v59)
  {
    v61 = v60;
    if (!objc_msgSend(v60, "length")
      || objc_msgSend(v59, "length") && (objc_msgSend(v61, "isEqualToString:", v59) & 1) == 0)
    {
      objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", service from %@ to %@"), objc_msgSend(a1, "service"), v59));
      objc_msgSend(a1, "setService:", v59);
    }
  }
  v62 = (void *)objc_msgSend(a2, "destinationCallerID");
  if (v62 || a3)
  {
    v63 = (void *)objc_msgSend(a1, "destinationCallerID");
    if (v63 != v62)
    {
      v64 = v63;
      if (!objc_msgSend(v63, "length")
        || objc_msgSend(v62, "length") && (objc_msgSend(v64, "isEqualToString:", v62) & 1) == 0)
      {
        objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", destinationCallerID from %@ to %@"), objc_msgSend(a1, "destinationCallerID"), v62));
        objc_msgSend(a1, "setDestinationCallerID:", v62);
      }
    }
  }
  if ((a3 & 1) != 0 || a4)
  {
    v65 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(a2, "errorCode"));
    v66 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(a1, "errorCode"));
    if (v66 != v65)
    {
      v67 = v66;
      if (!v66 || v65 && (objc_msgSend(v66, "isEqualToNumber:", v65) & 1) == 0)
      {
        objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", errorCode from %@ to %@"), v67, v65));
        objc_msgSend(a1, "setErrorCode:", objc_msgSend(v65, "unsignedIntValue"));
      }
    }
  }
  v68 = objc_msgSend(a2, "expireState");
  if ((a3 & 1) != 0 || v68 > objc_msgSend(a1, "expireState"))
  {
    objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", expireState from %lld to %lld"), objc_msgSend(a1, "expireState"), v68));
    objc_msgSend(a1, "setExpireState:", v68);
  }
  v69 = objc_msgSend(a2, "timeExpressiveSendPlayed");
  if (v69 || a3)
  {
    v70 = (void *)objc_msgSend(a1, "timeExpressiveSendPlayed");
    if (v70 != (void *)v69 && (!v70 || v69 && (objc_msgSend(v70, "isEqualToDate:", v69) & 1) == 0))
    {
      objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", timeExpressiveSendPlayed from %@ to %@"), objc_msgSend(a1, "timeExpressiveSendPlayed"), v69));
      objc_msgSend(a1, "setTimeExpressiveSendPlayed:", v69);
    }
  }
  if (a5)
  {
    v71 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(a2, "flags"));
    v72 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(a1, "flags"));
    if (v72 != (void *)v71)
    {
      v73 = v72;
      if (!v72 || v71 && (objc_msgSend(v72, "isEqualToNumber:", v71) & 1) == 0)
      {
        v74 = objc_msgSend(a1, "flags");
        v75 = objc_msgSend(a2, "flags");
        objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", flags from %@ to %@"), v73, v71));
        if (a6)
          v76 = -1;
        else
          v76 = a7;
        v77 = v75 & v76;
        if ((a3 & 1) == 0 && (v74 & 8) == 0 && objc_msgSend(a2, "isEmpty"))
          v77 &= ~8uLL;
        v78 = v77 | v74;
        if (((a7 & 0x2000) != 0 || a6)
          && objc_msgSend(a1, "isRead")
          && !objc_msgSend(a2, "isRead"))
        {
          v78 &= ~0x2000uLL;
        }
        if (((a7 & 0x8000) != 0 || a6)
          && objc_msgSend(a1, "isSent")
          && !objc_msgSend(a2, "isSent"))
        {
          v78 &= ~0x8000uLL;
        }
        if (((a7 & 0x1000) != 0 || a6)
          && objc_msgSend(a1, "isDelivered")
          && !objc_msgSend(a2, "isDelivered"))
        {
          v78 &= ~0x1000uLL;
        }
        if (((a7 & 0x4000000) != 0 || a6)
          && objc_msgSend(a1, "isCorrupt")
          && !objc_msgSend(a2, "isCorrupt"))
        {
          v78 &= ~0x4000000uLL;
        }
        if (((a7 & 0x8000000) != 0 || a6)
          && objc_msgSend(a1, "isSpam")
          && !objc_msgSend(a2, "isSpam"))
        {
          v78 &= ~0x8000000uLL;
        }
        if (((a7 & 0x20000000000) != 0 || a6)
          && objc_msgSend(a1, "isPendingSatelliteSend")
          && !objc_msgSend(a2, "isPendingSatelliteSend"))
        {
          v78 &= ~0x20000000000uLL;
        }
        if (((a7 & 0x40000000000) != 0 || a6)
          && objc_msgSend(a1, "needsRelay")
          && !objc_msgSend(a2, "needsRelay"))
        {
          v78 &= ~0x40000000000uLL;
        }
        objc_msgSend(a1, "setFlags:", v78);
      }
    }
  }
  if ((a3 & 1) != 0)
  {
    v79 = (void *)MEMORY[0x1E0CB3940];
    if (objc_msgSend(a1, "hasUnseenMention"))
      v80 = CFSTR("YES");
    else
      v80 = CFSTR("NO");
    if (objc_msgSend(a2, "hasUnseenMention"))
      v81 = CFSTR("YES");
    else
      v81 = CFSTR("NO");
    objc_msgSend(v13, "appendString:", objc_msgSend(v79, "stringWithFormat:", CFSTR(", hasUnseenMention from %@ to %@"), v80, v81));
    objc_msgSend(a1, "setHasUnseenMention:", objc_msgSend(a2, "hasUnseenMention"));
  }
  else
  {
    v84 = objc_msgSend(a1, "hasUnseenMention");
    if (v84 != objc_msgSend(a2, "hasUnseenMention"))
    {
      v85 = (void *)MEMORY[0x1E0CB3940];
      if (objc_msgSend(a1, "hasUnseenMention"))
        v86 = CFSTR("YES");
      else
        v86 = CFSTR("NO");
      if (objc_msgSend(a2, "hasUnseenMention"))
        v87 = CFSTR("YES");
      else
        v87 = CFSTR("NO");
      objc_msgSend(v13, "appendString:", objc_msgSend(v85, "stringWithFormat:", CFSTR(", hasUnseenMention from %@ to %@"), v86, v87));
      objc_msgSend(a1, "setHasUnseenMention:", objc_msgSend(a2, "hasUnseenMention"));
    }
    v88 = objc_msgSend(a1, "cloudKitSyncState");
    if (v88 == objc_msgSend(a2, "cloudKitSyncState"))
    {
LABEL_208:
      v89 = (void *)objc_msgSend(a1, "cloudKitRecordID");
      v90 = objc_msgSend(a2, "cloudKitRecordID");
      if (v89 != (void *)v90)
      {
        v91 = (void *)v90;
        if (!objc_msgSend(v89, "length")
          || objc_msgSend(v91, "length") && (objc_msgSend(v89, "isEqualToString:", v91) & 1) == 0)
        {
          objc_msgSend(a1, "setCloudKitRecordID:", objc_msgSend(a2, "cloudKitRecordID"));
        }
      }
      v92 = (void *)objc_msgSend(a1, "cloudKitRecordChangeTag");
      v93 = objc_msgSend(a2, "cloudKitRecordChangeTag");
      if (v92 == (void *)v93)
        goto LABEL_219;
      v94 = (void *)v93;
      if (objc_msgSend(v92, "length"))
      {
        if (!objc_msgSend(v94, "length") || (objc_msgSend(v92, "isEqualToString:", v94) & 1) != 0)
          goto LABEL_219;
      }
      goto LABEL_217;
    }
  }
  objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", cloudKitSyncState from %lld to %lld"), objc_msgSend(a1, "cloudKitSyncState"), objc_msgSend(a2, "cloudKitSyncState")));
  objc_msgSend(a1, "setCloudKitSyncState:", objc_msgSend(a2, "cloudKitSyncState"));
  if ((a3 & 1) == 0)
    goto LABEL_208;
  objc_msgSend(a1, "setCloudKitRecordID:", objc_msgSend(a2, "cloudKitRecordID"));
LABEL_217:
  objc_msgSend(a1, "setCloudKitRecordChangeTag:", objc_msgSend(a2, "cloudKitRecordChangeTag"));
  objc_msgSend(a1, "setCloudKitServerChangeTokenBlob:", objc_msgSend(a2, "cloudKitServerChangeTokenBlob"));
  if ((a3 & 1) != 0)
  {
    objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", replyToGUID from %@ to %@"), objc_msgSend(a1, "replyToGUID"), objc_msgSend(a2, "replyToGUID")));
    objc_msgSend(a1, "setReplyToGUID:", objc_msgSend(a2, "replyToGUID"));
    goto LABEL_228;
  }
LABEL_219:
  v95 = (void *)objc_msgSend(a1, "replyToGUID");
  v96 = objc_msgSend(a2, "replyToGUID");
  if (v95 != (void *)v96)
  {
    v97 = (void *)v96;
    if (!objc_msgSend(v95, "length")
      || objc_msgSend(v97, "length") && (objc_msgSend(v95, "isEqualToString:", v97) & 1) == 0)
    {
      objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", replyToGUID from %@ to %@"), objc_msgSend(a1, "replyToGUID"), objc_msgSend(a2, "replyToGUID")));
      objc_msgSend(a1, "setReplyToGUID:", objc_msgSend(a2, "replyToGUID"));
    }
  }
  v98 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(a1, "sortID"));
  v99 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(a2, "sortID"));
  if (v98 == (void *)v99 || v98 && ((v100 = v99) == 0 || (objc_msgSend(v98, "isEqualToNumber:", v99) & 1) != 0))
  {
LABEL_230:
    v104 = (void *)objc_msgSend(a1, "threadIdentifier", v100);
    v105 = objc_msgSend(a2, "threadIdentifier");
    if (v104 != (void *)v105)
    {
      v106 = (void *)v105;
      if (!objc_msgSend(v104, "length")
        || objc_msgSend(v106, "length") && (objc_msgSend(v104, "isEqualToString:", v106) & 1) == 0)
      {
        objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", threadIdentifier from %@ to %@"), objc_msgSend(a1, "threadIdentifier"), objc_msgSend(a2, "threadIdentifier")));
        objc_msgSend(a1, "setThreadIdentifier:", objc_msgSend(a2, "threadIdentifier"));
      }
    }
    v107 = (void *)objc_msgSend(a1, "syndicationRanges");
    v108 = objc_msgSend(a2, "syndicationRanges");
    if (v107 == (void *)v108)
      goto LABEL_241;
    if (v107)
    {
      v103 = v108;
      if (v108)
      {
        if ((objc_msgSend(v107, "isEqualToArray:", v108) & 1) != 0)
          goto LABEL_241;
      }
    }
    goto LABEL_239;
  }
LABEL_228:
  v101 = (void *)MEMORY[0x1E0CB3940];
  v102 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(a1, "sortID"));
  objc_msgSend(v13, "appendString:", objc_msgSend(v101, "stringWithFormat:", CFSTR(", sortID from %@ to %@"), v102, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(a2, "sortID"))));
  objc_msgSend(a1, "setSortID:", objc_msgSend(a2, "sortID"));
  if ((a3 & 1) == 0)
    goto LABEL_230;
  objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", threadIdentifier from %@ to %@"), objc_msgSend(a1, "threadIdentifier"), objc_msgSend(a2, "threadIdentifier")));
  objc_msgSend(a1, "setThreadIdentifier:", objc_msgSend(a2, "threadIdentifier"));
LABEL_239:
  objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", syndicationRanges from %@ to %@"), objc_msgSend(a1, "syndicationRanges", v103), objc_msgSend(a2, "syndicationRanges")));
  objc_msgSend(a1, "setSyndicationRanges:", objc_msgSend(a2, "syndicationRanges"));
  if ((a3 & 1) != 0)
  {
    objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", syncedSyndicationRanges from %@ to %@"), objc_msgSend(a1, "syncedSyndicationRanges"), objc_msgSend(a2, "syncedSyndicationRanges")));
    objc_msgSend(a1, "setSyncedSyndicationRanges:", objc_msgSend(a2, "syncedSyndicationRanges"));
    goto LABEL_250;
  }
LABEL_241:
  v109 = (void *)objc_msgSend(a1, "syncedSyndicationRanges");
  v110 = objc_msgSend(a2, "syncedSyndicationRanges");
  if (v109 != (void *)v110 && (!v109 || (v111 = v110) == 0 || (objc_msgSend(v109, "isEqualToArray:", v110) & 1) == 0))
  {
    objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", syncedSyndicationRanges from %@ to %@"), objc_msgSend(a1, "syncedSyndicationRanges", v111), objc_msgSend(a2, "syncedSyndicationRanges")));
    objc_msgSend(a1, "setSyncedSyndicationRanges:", objc_msgSend(a2, "syncedSyndicationRanges"));
  }
  v112 = (void *)objc_msgSend(a1, "expressiveSendStyleID");
  v113 = objc_msgSend(a2, "expressiveSendStyleID");
  if (v112 == (void *)v113
    || (v114 = (void *)v113, objc_msgSend(v112, "length"))
    && (!objc_msgSend(v114, "length") || (objc_msgSend(v112, "isEqualToString:", v114) & 1) != 0))
  {
LABEL_252:
    v115 = objc_msgSend(a1, "scheduleType");
    if (v115 != objc_msgSend(a2, "scheduleType"))
    {
      objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", scheduleType from %lu to %lu"), objc_msgSend(a1, "scheduleType"), objc_msgSend(a2, "scheduleType")));
      objc_msgSend(a1, "setScheduleType:", objc_msgSend(a2, "scheduleType"));
    }
    v116 = objc_msgSend(a1, "scheduleState");
    if (v116 == objc_msgSend(a2, "scheduleState"))
      goto LABEL_256;
    goto LABEL_255;
  }
LABEL_250:
  objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", expressiveSendStyleID from %@ to %@"), objc_msgSend(a1, "expressiveSendStyleID"), objc_msgSend(a2, "expressiveSendStyleID")));
  objc_msgSend(a1, "setExpressiveSendStyleID:", objc_msgSend(a2, "expressiveSendStyleID"));
  if ((a3 & 1) == 0)
    goto LABEL_252;
  objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", scheduleType from %lu to %lu"), objc_msgSend(a1, "scheduleType"), objc_msgSend(a2, "scheduleType")));
  objc_msgSend(a1, "setScheduleType:", objc_msgSend(a2, "scheduleType"));
LABEL_255:
  objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", scheduleState from %lu to %lu"), objc_msgSend(a1, "scheduleState"), objc_msgSend(a2, "scheduleState")));
  objc_msgSend(a1, "setScheduleState:", objc_msgSend(a2, "scheduleState"));
  if ((a3 & 1) != 0)
  {
LABEL_257:
    objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", fallbackHash from %@ to %@"), objc_msgSend(a1, "fallbackHash"), objc_msgSend(a2, "fallbackHash")));
    objc_msgSend(a1, "setFallbackHash:", objc_msgSend(a2, "fallbackHash"));
    goto LABEL_258;
  }
LABEL_256:
  v117 = objc_msgSend(a1, "fallbackHash");
  if (v117 != objc_msgSend(a2, "fallbackHash"))
    goto LABEL_257;
LABEL_258:
  v395 = 0;
  v396 = 0;
  objc_msgSend(a1, "threadIdentifier");
  IMMessageThreadIdentifierGetComponents();
  if (IMOSLoggingEnabled())
  {
    v118 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v13;
      _os_log_impl(&dword_1ABB60000, v118, OS_LOG_TYPE_INFO, "Updating %@", (uint8_t *)&buf, 0xCu);
    }
  }
  v119 = IMDMessageRecordCopyMessageForGUID((const __CFString *)objc_msgSend(a1, "guid"));
  v343 = v119;
  if (v119)
  {
    v393 = 0;
    v394 = 0;
    v391 = 0;
    v392 = 0;
    v389 = 0;
    v390 = 0;
    v387 = 0;
    v388 = 0;
    v385 = 0;
    v386 = 0;
    v383 = 0;
    v384 = 0;
    v381 = 0;
    v382 = 0;
    v379 = 0;
    v380 = 0;
    v378 = 0;
    v377 = 0;
    v376 = 0;
    v375 = 0;
    v374 = 0;
    v373 = 0;
    v372 = 0;
    v371 = 0;
    v370 = 0;
    v369 = 0;
    v368 = 0;
    v367 = 0;
    v366 = 0;
    buf = 0uLL;
    v365 = 0;
    v364 = 0;
    cf = 0;
    v362 = 0;
    v361 = 0;
    v360 = 0;
    v359 = 0;
    v358 = 0;
    v357 = 0;
    v356 = 0;
    v355 = 0;
    v354 = 0;
    v353 = 0;
    v352 = 0;
    v351 = 0;
    v350 = 0;
    v349 = 0;
    v348 = 0;
    v347 = 0;
    v346 = 0;
    v345 = 0;
    v344 = 0;
    IMDMessageRecordBulkCopy((uint64_t)v119, &v374, &v394, &v393, &v392, &v391, &v390, &v389, &v388, &v387, &v386, &v385, &v384, &v383, &v382, &v381, &v380, &v379, &v378,
      (_BYTE *)&v377 + 1,
      &v377,
      &v376,
      &v372,
      &v373,
      &v369,
      &v370,
      &v371,
      &v375,
      &v368,
      &v367,
      &v366,
      &buf,
      0,
      &cf,
      &v365,
      &v364,
      &v362,
      &v361,
      &v360,
      (uint64_t)&v359,
      &v358,
      &v357,
      &v356,
      &v355,
      &v354,
      &v353,
      &v352,
      &v351,
      &v350,
      &v349,
      &v348,
      &v347,
      &v346,
      &v345,
      &v344);
    v120 = (void *)objc_msgSend(a1, "time");
    v121 = objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v391);
    v122 = v121;
    if (v120 != (void *)v121)
    {
      if (!v120)
      {
        v123 = 1;
        goto LABEL_268;
      }
      if (v121)
      {
        v123 = objc_msgSend(v120, "isEqualToDate:", v121) ^ 1;
LABEL_268:
        v336 = v123;
LABEL_269:
        v124 = (void *)objc_msgSend(a1, "timeRead", v122);
        v125 = objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v390);
        v126 = v125;
        if (v124 != (void *)v125)
        {
          if (!v124)
          {
            v127 = 1;
            goto LABEL_275;
          }
          if (v125)
          {
            v127 = objc_msgSend(v124, "isEqualToDate:", v125) ^ 1;
LABEL_275:
            v332 = v127;
LABEL_276:
            v128 = (void *)objc_msgSend(a1, "timeDelivered", v126);
            v129 = objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v389);
            v130 = v129;
            if (v128 != (void *)v129)
            {
              if (!v128)
              {
                v131 = 1;
                goto LABEL_282;
              }
              if (v129)
              {
                v131 = objc_msgSend(v128, "isEqualToDate:", v129) ^ 1;
LABEL_282:
                v330 = v131;
LABEL_283:
                v132 = (void *)objc_msgSend(a1, "timePlayed", v130);
                v133 = objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v388);
                v134 = v133;
                if (v132 != (void *)v133)
                {
                  if (!v132)
                  {
                    v135 = 1;
                    goto LABEL_289;
                  }
                  if (v133)
                  {
                    v135 = objc_msgSend(v132, "isEqualToDate:", v133) ^ 1;
LABEL_289:
                    v328 = v135;
LABEL_290:
                    v136 = (void *)objc_msgSend(a1, "plainBody", v134);
                    v137 = v136;
                    v138 = (void *)v387;
                    if (v136 == v387)
                    {
                      v326 = 0;
                    }
                    else
                    {
                      if (objc_msgSend(v136, "length") && objc_msgSend(v138, "length"))
                        v139 = objc_msgSend(v137, "isEqualToString:", v138) ^ 1;
                      else
                        v139 = 1;
                      v326 = v139;
                    }
                    v140 = (void *)objc_msgSend(a1, "bodyData");
                    if (v140 == v386)
                    {
                      v141 = 0;
                    }
                    else
                    {
                      v141 = 1;
                      if (v140 && v386)
                        v141 = objc_msgSend(v140, "isEqualToData:") ^ 1;
                    }
                    v324 = v141;
                    v142 = (CFNumberRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(a1, "flags"));
                    if (v142 != v385)
                    {
                      if (!v142)
                      {
                        v143 = 1;
                        goto LABEL_308;
                      }
                      if (v385)
                      {
                        v143 = -[__CFNumber isEqualToNumber:](v142, "isEqualToNumber:") ^ 1;
LABEL_308:
                        v322 = v143;
LABEL_309:
                        v144 = (void *)objc_msgSend(a1, "service");
                        v145 = v144;
                        v146 = (void *)v384;
                        if (v144 != v384)
                        {
                          if (!objc_msgSend(v144, "length"))
                          {
                            v147 = 1;
                            goto LABEL_315;
                          }
                          if (objc_msgSend(v146, "length"))
                          {
                            v147 = objc_msgSend(v145, "isEqualToString:", v146) ^ 1;
LABEL_315:
                            v320 = v147;
LABEL_316:
                            v148 = (void *)objc_msgSend(a1, "destinationCallerID");
                            v149 = v148;
                            v150 = (void *)v357;
                            if (v148 != v357)
                            {
                              if (!objc_msgSend(v148, "length"))
                              {
                                v151 = 1;
                                goto LABEL_322;
                              }
                              if (objc_msgSend(v150, "length"))
                              {
                                v151 = objc_msgSend(v149, "isEqualToString:", v150) ^ 1;
LABEL_322:
                                v318 = v151;
LABEL_323:
                                v152 = (void *)objc_msgSend(a1, "roomName");
                                v153 = v152;
                                v154 = (void *)v376;
                                if (v152 != v376)
                                {
                                  if (!objc_msgSend(v152, "length"))
                                  {
                                    v155 = 1;
                                    goto LABEL_329;
                                  }
                                  if (objc_msgSend(v154, "length"))
                                  {
                                    v155 = objc_msgSend(v153, "isEqualToString:", v154) ^ 1;
LABEL_329:
                                    v316 = v155;
LABEL_330:
                                    v156 = (void *)objc_msgSend(a1, "account");
                                    v157 = v156;
                                    v158 = (void *)v383;
                                    if (v156 != v383)
                                    {
                                      if (!objc_msgSend(v156, "length"))
                                      {
                                        v159 = 1;
                                        goto LABEL_336;
                                      }
                                      if (objc_msgSend(v158, "length"))
                                      {
                                        v159 = objc_msgSend(v157, "isEqualToString:", v158) ^ 1;
LABEL_336:
                                        v314 = v159;
LABEL_337:
                                        v160 = (void *)objc_msgSend(a1, "accountID");
                                        v161 = v160;
                                        v162 = (void *)v382;
                                        if (v160 != v382)
                                        {
                                          if (!objc_msgSend(v160, "length"))
                                          {
                                            v163 = 1;
                                            goto LABEL_343;
                                          }
                                          if (objc_msgSend(v162, "length"))
                                          {
                                            v163 = objc_msgSend(v161, "isEqualToString:", v162) ^ 1;
LABEL_343:
                                            v312 = v163;
LABEL_344:
                                            v164 = (void *)objc_msgSend(a1, "subject");
                                            v165 = v164;
                                            v166 = (void *)v380;
                                            if (v164 == v380)
                                            {
                                              v310 = 0;
                                            }
                                            else
                                            {
                                              if (objc_msgSend(v164, "length") && objc_msgSend(v166, "length"))
                                                v167 = objc_msgSend(v165, "isEqualToString:", v166) ^ 1;
                                              else
                                                v167 = 1;
                                              v310 = v167;
                                            }
                                            v168 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(a1, "errorCode"));
                                            v169 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v379);
                                            v170 = v169;
                                            if (v168 != (void *)v169)
                                            {
                                              if (!v168)
                                              {
                                                v171 = 1;
                                                goto LABEL_357;
                                              }
                                              if (v169)
                                              {
                                                v171 = objc_msgSend(v168, "isEqualToNumber:", v169) ^ 1;
LABEL_357:
                                                v308 = v171;
LABEL_358:
                                                v172 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a1, "expireState", v170));
                                                v173 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v375);
                                                v174 = v173;
                                                if (v172 != (void *)v173)
                                                {
                                                  if (!v172)
                                                  {
                                                    v175 = 1;
                                                    goto LABEL_364;
                                                  }
                                                  if (v173)
                                                  {
                                                    v175 = objc_msgSend(v172, "isEqualToNumber:", v173) ^ 1;
LABEL_364:
                                                    v306 = v175;
LABEL_365:
                                                    v176 = (void *)objc_msgSend(a1, "payloadData", v174);
                                                    if (v176 == cf)
                                                    {
                                                      v339 = 0;
                                                    }
                                                    else
                                                    {
                                                      v339 = 1;
                                                      if (v176 && cf)
                                                        v339 = objc_msgSend(v176, "isEqualToData:") ^ 1;
                                                    }
                                                    v177 = (void *)objc_msgSend(a1, "associatedMessageGUID");
                                                    v178 = v177;
                                                    v179 = (void *)v367;
                                                    if (v177 != v367)
                                                    {
                                                      if (!objc_msgSend(v177, "length"))
                                                      {
                                                        v180 = 1;
                                                        goto LABEL_376;
                                                      }
                                                      if (objc_msgSend(v179, "length"))
                                                      {
                                                        v180 = objc_msgSend(v178, "isEqualToString:", v179) ^ 1;
LABEL_376:
                                                        v304 = v180;
LABEL_377:
                                                        v181 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a1, "associatedMessageType"));
                                                        v182 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v366);
                                                        v183 = v182;
                                                        if (v181 != (void *)v182)
                                                        {
                                                          if (!v181)
                                                          {
                                                            v184 = 1;
                                                            goto LABEL_383;
                                                          }
                                                          if (v182)
                                                          {
                                                            v184 = objc_msgSend(v181, "isEqualToNumber:", v182) ^ 1;
LABEL_383:
                                                            v302 = v184;
LABEL_384:
                                                            v185 = (void *)objc_msgSend(a1, "expressiveSendStyleID", v183);
                                                            v186 = v185;
                                                            v187 = (void *)v365;
                                                            if (v185 != v365)
                                                            {
                                                              if (!objc_msgSend(v185, "length"))
                                                              {
                                                                v188 = 1;
                                                                goto LABEL_390;
                                                              }
                                                              if (objc_msgSend(v187, "length"))
                                                              {
                                                                v188 = objc_msgSend(v186, "isEqualToString:", v187) ^ 1;
LABEL_390:
                                                                v300 = v188;
LABEL_391:
                                                                v189 = (void *)objc_msgSend(a1, "timeExpressiveSendPlayed");
                                                                v190 = objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v364);
                                                                v191 = v190;
                                                                if (v189 != (void *)v190)
                                                                {
                                                                  if (!v189)
                                                                  {
                                                                    v192 = 1;
                                                                    goto LABEL_397;
                                                                  }
                                                                  if (v190)
                                                                  {
                                                                    v192 = objc_msgSend(v189, "isEqualToDate:", v190) ^ 1;
LABEL_397:
                                                                    v298 = v192;
LABEL_398:
                                                                    v193 = objc_msgSend(a1, "associatedMessageRange", v191);
                                                                    v195 = v194;
                                                                    v196 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v193);
                                                                    v197 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", (_QWORD)buf);
                                                                    if (v196 != (void *)v197)
                                                                    {
                                                                      if (!v196)
                                                                      {
                                                                        v198 = 1;
                                                                        goto LABEL_404;
                                                                      }
                                                                      if (v197)
                                                                      {
                                                                        v198 = objc_msgSend(v196, "isEqualToNumber:", v197) ^ 1;
LABEL_404:
                                                                        v296 = v198;
LABEL_405:
                                                                        v199 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v195);
                                                                        v200 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *((_QWORD *)&buf + 1));
                                                                        v201 = v200;
                                                                        if (v199 != (void *)v200)
                                                                        {
                                                                          if (!v199)
                                                                          {
                                                                            v202 = 1;
                                                                            goto LABEL_411;
                                                                          }
                                                                          if (v200)
                                                                          {
                                                                            v202 = objc_msgSend(v199, "isEqualToNumber:", v200) ^ 1;
LABEL_411:
                                                                            v294 = v202;
LABEL_412:
                                                                            v203 = (void *)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithMessageSummaryInfoDictionary:", objc_msgSend(a1, "messageSummaryInfo", v201));
                                                                            if (v203 == v362)
                                                                            {
                                                                              v204 = 0;
                                                                            }
                                                                            else
                                                                            {
                                                                              v204 = 1;
                                                                              if (v203 && v362)
                                                                                v204 = objc_msgSend(v203, "isEqualToData:") ^ 1;
                                                                            }
                                                                            v292 = v204;
                                                                            v205 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a1, "cloudKitSyncState"));
                                                                            v206 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v361);
                                                                            v207 = v206;
                                                                            if (v205 != (void *)v206)
                                                                            {
                                                                              if (!v205)
                                                                              {
                                                                                v208 = 1;
                                                                                goto LABEL_423;
                                                                              }
                                                                              if (v206)
                                                                              {
                                                                                v208 = objc_msgSend(v205, "isEqualToNumber:", v206) ^ 1;
LABEL_423:
                                                                                v290 = v208;
LABEL_424:
                                                                                v209 = (void *)objc_msgSend(a1, "cloudKitRecordID", v207);
                                                                                v210 = v209;
                                                                                v211 = (void *)v360;
                                                                                if (v209 != v360)
                                                                                {
                                                                                  if (!objc_msgSend(v209, "length"))
                                                                                  {
                                                                                    v212 = 1;
                                                                                    goto LABEL_430;
                                                                                  }
                                                                                  if (objc_msgSend(v211, "length"))
                                                                                  {
                                                                                    v212 = objc_msgSend(v210, "isEqualToString:", v211) ^ 1;
LABEL_430:
                                                                                    v288 = v212;
LABEL_431:
                                                                                    v213 = (void *)objc_msgSend(a1, "cloudKitRecordChangeTag");
                                                                                    v214 = v213;
                                                                                    v215 = (void *)v358;
                                                                                    if (v213 != v358)
                                                                                    {
                                                                                      if (!objc_msgSend(v213, "length"))
                                                                                      {
                                                                                        v216 = 1;
                                                                                        goto LABEL_437;
                                                                                      }
                                                                                      if (objc_msgSend(v215, "length"))
                                                                                      {
                                                                                        v216 = objc_msgSend(v214, "isEqualToString:", v215) ^ 1;
LABEL_437:
                                                                                        v286 = v216;
LABEL_438:
                                                                                        v217 = (void *)objc_msgSend(a1, "replyToGUID");
                                                                                        v218 = v217;
                                                                                        v219 = (void *)v356;
                                                                                        if (v217 != v356)
                                                                                        {
                                                                                          if (!objc_msgSend(v217, "length"))
                                                                                          {
                                                                                            v220 = 1;
                                                                                            goto LABEL_444;
                                                                                          }
                                                                                          if (objc_msgSend(v219, "length"))
                                                                                          {
                                                                                            v220 = objc_msgSend(v218, "isEqualToString:", v219) ^ 1;
LABEL_444:
                                                                                            v284 = v220;
LABEL_445:
                                                                                            v221 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(a1, "sortID"));
                                                                                            v222 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v355);
                                                                                            v223 = v222;
                                                                                            if (v221 != (void *)v222)
                                                                                            {
                                                                                              if (!v221)
                                                                                              {
                                                                                                v224 = 1;
                                                                                                goto LABEL_451;
                                                                                              }
                                                                                              if (v222)
                                                                                              {
                                                                                                v224 = objc_msgSend(v221, "isEqualToNumber:", v222) ^ 1;
LABEL_451:
                                                                                                v282 = v224;
LABEL_452:
                                                                                                v225 = v396;
                                                                                                v226 = (void *)v354;
                                                                                                if (v396 != v354)
                                                                                                {
                                                                                                  if (!objc_msgSend(v396, "length", v223))
                                                                                                  {
                                                                                                    v227 = 1;
                                                                                                    goto LABEL_458;
                                                                                                  }
                                                                                                  if (objc_msgSend(v226, "length"))
                                                                                                  {
                                                                                                    v227 = objc_msgSend(v225, "isEqualToString:", v226) ^ 1;
LABEL_458:
                                                                                                    v280 = v227;
LABEL_459:
                                                                                                    v228 = v395;
                                                                                                    v229 = (void *)v353;
                                                                                                    if (v395 != v353)
                                                                                                    {
                                                                                                      if (!objc_msgSend(v395, "length"))
                                                                                                      {
                                                                                                        v230 = 1;
                                                                                                        goto LABEL_465;
                                                                                                      }
                                                                                                      if (objc_msgSend(v229, "length"))
                                                                                                      {
                                                                                                        v230 = objc_msgSend(v228, "isEqualToString:", v229) ^ 1;
LABEL_465:
                                                                                                        v278 = v230;
LABEL_466:
                                                                                                        v231 = (void *)objc_msgSend(a1, "dateEdited");
                                                                                                        v232 = objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v349);
                                                                                                        v233 = v232;
                                                                                                        if (v231 != (void *)v232)
                                                                                                        {
                                                                                                          if (!v231)
                                                                                                          {
                                                                                                            v234 = 1;
                                                                                                            goto LABEL_472;
                                                                                                          }
                                                                                                          if (v232)
                                                                                                          {
                                                                                                            v234 = objc_msgSend(v231, "isEqualToDate:", v232) ^ 1;
LABEL_472:
                                                                                                            v277 = v234;
                                                                                                            goto LABEL_473;
                                                                                                          }
                                                                                                        }
                                                                                                        v277 = 0;
LABEL_473:
                                                                                                        v235 = (void *)objc_msgSend(a1, "biaReferenceID", v233);
                                                                                                        v236 = v235;
                                                                                                        v237 = (void *)v348;
                                                                                                        if (v235 == v348)
                                                                                                          goto LABEL_477;
                                                                                                        if (!objc_msgSend(v235, "length"))
                                                                                                        {
                                                                                                          v238 = 1;
                                                                                                          goto LABEL_479;
                                                                                                        }
                                                                                                        if (!objc_msgSend(v237, "length"))
LABEL_477:
                                                                                                          v238 = 0;
                                                                                                        else
                                                                                                          v238 = objc_msgSend(v236, "isEqualToString:", v237) ^ 1;
LABEL_479:
                                                                                                        v239 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(a1, "partCount"));
                                                                                                        v240 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v350);
                                                                                                        if (v239 == (void *)v240)
                                                                                                          goto LABEL_483;
                                                                                                        if (!v239)
                                                                                                        {
                                                                                                          v241 = 1;
                                                                                                          goto LABEL_485;
                                                                                                        }
                                                                                                        if (!v240)
LABEL_483:
                                                                                                          v241 = 0;
                                                                                                        else
                                                                                                          v241 = objc_msgSend(v239, "isEqualToNumber:", v240) ^ 1;
LABEL_485:
                                                                                                        v242 = (void *)objc_msgSend(a1, "fallbackHash");
                                                                                                        v243 = v242;
                                                                                                        v244 = (void *)v347;
                                                                                                        if (v242 == v347)
                                                                                                          goto LABEL_489;
                                                                                                        if (!objc_msgSend(v242, "length"))
                                                                                                        {
                                                                                                          v245 = 1;
                                                                                                          goto LABEL_491;
                                                                                                        }
                                                                                                        if (!objc_msgSend(v244, "length"))
LABEL_489:
                                                                                                          v245 = 0;
                                                                                                        else
                                                                                                          v245 = objc_msgSend(v243, "isEqualToString:", v244) ^ 1;
LABEL_491:
                                                                                                        v246 = (void *)objc_msgSend(a1, "associatedMessageEmoji");
                                                                                                        v247 = v246;
                                                                                                        v248 = (void *)v346;
                                                                                                        if (v246 == v346)
                                                                                                          goto LABEL_495;
                                                                                                        if (!objc_msgSend(v246, "length"))
                                                                                                        {
                                                                                                          v249 = 1;
                                                                                                          goto LABEL_497;
                                                                                                        }
                                                                                                        if (!objc_msgSend(v248, "length"))
LABEL_495:
                                                                                                          v249 = 0;
                                                                                                        else
                                                                                                          v249 = objc_msgSend(v247, "isEqualToString:", v248) ^ 1;
LABEL_497:
                                                                                                        v250 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(a1, "scheduleType"));
                                                                                                        v251 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v345);
                                                                                                        if (v250 == (void *)v251)
                                                                                                          goto LABEL_501;
                                                                                                        if (!v250)
                                                                                                        {
                                                                                                          v252 = 1;
                                                                                                          goto LABEL_503;
                                                                                                        }
                                                                                                        if (!v251)
LABEL_501:
                                                                                                          v252 = 0;
                                                                                                        else
                                                                                                          v252 = objc_msgSend(v250, "isEqualToNumber:", v251) ^ 1;
LABEL_503:
                                                                                                        v253 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(a1, "scheduleState"));
                                                                                                        v254 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v344);
                                                                                                        if (v253 == (void *)v254)
                                                                                                          goto LABEL_507;
                                                                                                        if (!v253)
                                                                                                        {
                                                                                                          v255 = 1;
                                                                                                          goto LABEL_509;
                                                                                                        }
                                                                                                        if (!v254)
LABEL_507:
                                                                                                          v255 = 0;
                                                                                                        else
                                                                                                          v255 = objc_msgSend(v253, "isEqualToNumber:", v254) ^ 1;
LABEL_509:
                                                                                                        v256 = objc_msgSend((id)objc_msgSend(a1, "roomName"), "length") != 0;
                                                                                                        v334 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v256);
                                                                                                        v257 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v378);
                                                                                                        if (v334 == (void *)v257)
                                                                                                          goto LABEL_513;
                                                                                                        if (!v334)
                                                                                                        {
                                                                                                          v258 = 1;
                                                                                                          goto LABEL_515;
                                                                                                        }
                                                                                                        if (!v257)
LABEL_513:
                                                                                                          v258 = 0;
                                                                                                        else
                                                                                                          v258 = objc_msgSend(v334, "isEqualToNumber:") ^ 1;
LABEL_515:
                                                                                                        Identifier = (uint64_t)v381;
                                                                                                        if (objc_msgSend(a1, "isFromMe"))
                                                                                                          v259 = objc_msgSend(a1, "handle");
                                                                                                        else
                                                                                                          v259 = objc_msgSend(a1, "sender");
                                                                                                        v260 = (const __CFString *)v259;
                                                                                                        v261 = v336 | v332 | v330 | v328 | v326 | v324 | v322 | v320 | v318 | v316 | v314 | v312 | v310 | v308 | v306 | v339 | v304 | v302 | v300 | v298 | v296 | v294 | v292 | v290 | v288 | v286 | v284 | v282 | v280 | v278 | v277 | v238 | v241 | v245 | v249 | v252 | v255 | v258;
                                                                                                        if (v259)
                                                                                                        {
                                                                                                          v262 = (__CFString *)objc_msgSend(a1, "service");
                                                                                                          if (v262)
                                                                                                          {
                                                                                                            v263 = (const void *)IMDHandleRecordCopyHandleForIDOnService(v260, v262);
                                                                                                            if (v263 || (v264 = IMCountryCodeForIncomingTextMessage(), (v263 = IMDHandleRecordCreate(*MEMORY[0x1E0C9AE00], (uint64_t)v260, v264, v262, 0, 0)) != 0))
                                                                                                            {
                                                                                                              v265 = v381;
                                                                                                              if (v265 != (const void *)IMDHandleRecordGetIdentifier((uint64_t)v263))
                                                                                                                v261 = 1;
                                                                                                              Identifier = IMDHandleRecordGetIdentifier((uint64_t)v263);
                                                                                                              CFRelease(v263);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        v266 = (void *)objc_msgSend(MEMORY[0x1E0D39948], "serializedStringFromArray:", objc_msgSend(a1, "syndicationRanges"));
                                                                                                        v340 = v266;
                                                                                                        v267 = (void *)v352;
                                                                                                        if (v266 == v352)
                                                                                                          goto LABEL_529;
                                                                                                        if (!objc_msgSend(v266, "length"))
                                                                                                        {
                                                                                                          v268 = 1;
                                                                                                          goto LABEL_531;
                                                                                                        }
                                                                                                        if (!objc_msgSend(v267, "length"))
LABEL_529:
                                                                                                          v268 = 0;
                                                                                                        else
                                                                                                          v268 = objc_msgSend(v340, "isEqualToString:", v267) ^ 1;
LABEL_531:
                                                                                                        v269 = (void *)objc_msgSend(MEMORY[0x1E0D39948], "serializedStringFromArray:", objc_msgSend(a1, "syncedSyndicationRanges"));
                                                                                                        v337 = v269;
                                                                                                        v270 = (void *)v351;
                                                                                                        if (v269 == v351)
                                                                                                          goto LABEL_535;
                                                                                                        if (!objc_msgSend(v269, "length"))
                                                                                                        {
                                                                                                          v271 = 1;
                                                                                                          goto LABEL_537;
                                                                                                        }
                                                                                                        if (!objc_msgSend(v270, "length"))
LABEL_535:
                                                                                                          v271 = 0;
                                                                                                        else
                                                                                                          v271 = objc_msgSend(v337, "isEqualToString:", v270) ^ 1;
LABEL_537:
                                                                                                        if (v392)
                                                                                                          CFRelease(v392);
                                                                                                        if (v387)
                                                                                                          CFRelease(v387);
                                                                                                        if (v386)
                                                                                                          CFRelease(v386);
                                                                                                        if (cf)
                                                                                                          CFRelease(cf);
                                                                                                        if (v385)
                                                                                                          CFRelease(v385);
                                                                                                        if (v384)
                                                                                                          CFRelease(v384);
                                                                                                        if (v383)
                                                                                                          CFRelease(v383);
                                                                                                        if (v382)
                                                                                                          CFRelease(v382);
                                                                                                        if (v380)
                                                                                                          CFRelease(v380);
                                                                                                        if (v376)
                                                                                                          CFRelease(v376);
                                                                                                        if (v373)
                                                                                                          CFRelease(v373);
                                                                                                        if (v367)
                                                                                                          CFRelease(v367);
                                                                                                        if (v365)
                                                                                                          CFRelease(v365);
                                                                                                        if (v362)
                                                                                                          CFRelease(v362);
                                                                                                        if (v360)
                                                                                                          CFRelease(v360);
                                                                                                        if (v358)
                                                                                                          CFRelease(v358);
                                                                                                        if (v359)
                                                                                                          CFRelease(v359);
                                                                                                        if (v357)
                                                                                                          CFRelease(v357);
                                                                                                        if (v356)
                                                                                                          CFRelease(v356);
                                                                                                        if (v354)
                                                                                                          CFRelease(v354);
                                                                                                        if (v353)
                                                                                                          CFRelease(v353);
                                                                                                        if (v352)
                                                                                                          CFRelease(v352);
                                                                                                        if (v351)
                                                                                                          CFRelease(v351);
                                                                                                        if (v348)
                                                                                                          CFRelease(v348);
                                                                                                        if (v347)
                                                                                                          CFRelease(v347);
                                                                                                        if (v346)
                                                                                                          CFRelease(v346);
                                                                                                        if ((v261 | v268 | v271 | a3) == 1)
                                                                                                        {
                                                                                                          v333 = objc_msgSend(a1, "replaceID");
                                                                                                          v331 = objc_msgSend((id)objc_msgSend(a1, "time"), "__im_nanosecondTimeInterval");
                                                                                                          v329 = objc_msgSend((id)objc_msgSend(a1, "timeRead"), "__im_nanosecondTimeInterval");
                                                                                                          v327 = objc_msgSend((id)objc_msgSend(a1, "timeDelivered"), "__im_nanosecondTimeInterval");
                                                                                                          v325 = objc_msgSend((id)objc_msgSend(a1, "timePlayed"), "__im_nanosecondTimeInterval");
                                                                                                          v323 = objc_msgSend(a1, "plainBody");
                                                                                                          v321 = objc_msgSend(a1, "bodyData");
                                                                                                          v319 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(a1, "flags"));
                                                                                                          v317 = objc_msgSend(a1, "service");
                                                                                                          v315 = objc_msgSend(a1, "account");
                                                                                                          v313 = objc_msgSend(a1, "accountID");
                                                                                                          v311 = objc_msgSend(a1, "subject");
                                                                                                          v309 = objc_msgSend(a1, "errorCode");
                                                                                                          v335 = objc_msgSend(v334, "intValue");
                                                                                                          v307 = objc_msgSend(a1, "expireState");
                                                                                                          v305 = objc_msgSend(a1, "associatedMessageGUID");
                                                                                                          v303 = objc_msgSend(a1, "associatedMessageType");
                                                                                                          v272 = objc_msgSend(a1, "associatedMessageRange");
                                                                                                          v299 = v273;
                                                                                                          v301 = v272;
                                                                                                          v297 = objc_msgSend(a1, "payloadData");
                                                                                                          v295 = objc_msgSend(a1, "expressiveSendStyleID");
                                                                                                          v293 = objc_msgSend((id)objc_msgSend(a1, "timeExpressiveSendPlayed"), "__im_nanosecondTimeInterval");
                                                                                                          v291 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithMessageSummaryInfoDictionary:", objc_msgSend(a1, "messageSummaryInfo"));
                                                                                                          v289 = objc_msgSend(a1, "cloudKitSyncState");
                                                                                                          v287 = objc_msgSend(a1, "cloudKitRecordID");
                                                                                                          v285 = objc_msgSend(a1, "cloudKitServerChangeTokenBlob");
                                                                                                          v283 = objc_msgSend(a1, "cloudKitRecordChangeTag");
                                                                                                          v281 = objc_msgSend(a1, "destinationCallerID");
                                                                                                          v279 = objc_msgSend(a1, "replyToGUID");
                                                                                                          v274 = objc_msgSend(a1, "sortID");
                                                                                                          IMDMessageRecordBulkUpdate((uint64_t)v343, v333, 0, v331, v329, v327, v325, v323, v321, v319, v317, v315, v313, Identifier, v311, v309, v335, 0, 0, 0, 0, 0, v307, 0, v305, v303, v301, v299, v297, v295, v293, v291, v289, v287, v285, v283, v281, v279, v274, (uint64_t)v396, (uint64_t)v395, (uint64_t)v340, (uint64_t)v337, objc_msgSend(a1, "partCount"), objc_msgSend((id)objc_msgSend(a1, "dateEdited"), "__im_nanosecondTimeInterval"), objc_msgSend(a1, "biaReferenceID"), objc_msgSend(a1, "fallbackHash"), objc_msgSend(a1, "associatedMessageEmoji"), objc_msgSend(a1, "scheduleType"), objc_msgSend(a1, "scheduleState"));
                                                                                                        }
                                                                                                        CFRelease(v343);
                                                                                                        goto LABEL_592;
                                                                                                      }
                                                                                                    }
                                                                                                    v278 = 0;
                                                                                                    goto LABEL_466;
                                                                                                  }
                                                                                                }
                                                                                                v280 = 0;
                                                                                                goto LABEL_459;
                                                                                              }
                                                                                            }
                                                                                            v282 = 0;
                                                                                            goto LABEL_452;
                                                                                          }
                                                                                        }
                                                                                        v284 = 0;
                                                                                        goto LABEL_445;
                                                                                      }
                                                                                    }
                                                                                    v286 = 0;
                                                                                    goto LABEL_438;
                                                                                  }
                                                                                }
                                                                                v288 = 0;
                                                                                goto LABEL_431;
                                                                              }
                                                                            }
                                                                            v290 = 0;
                                                                            goto LABEL_424;
                                                                          }
                                                                        }
                                                                        v294 = 0;
                                                                        goto LABEL_412;
                                                                      }
                                                                    }
                                                                    v296 = 0;
                                                                    goto LABEL_405;
                                                                  }
                                                                }
                                                                v298 = 0;
                                                                goto LABEL_398;
                                                              }
                                                            }
                                                            v300 = 0;
                                                            goto LABEL_391;
                                                          }
                                                        }
                                                        v302 = 0;
                                                        goto LABEL_384;
                                                      }
                                                    }
                                                    v304 = 0;
                                                    goto LABEL_377;
                                                  }
                                                }
                                                v306 = 0;
                                                goto LABEL_365;
                                              }
                                            }
                                            v308 = 0;
                                            goto LABEL_358;
                                          }
                                        }
                                        v312 = 0;
                                        goto LABEL_344;
                                      }
                                    }
                                    v314 = 0;
                                    goto LABEL_337;
                                  }
                                }
                                v316 = 0;
                                goto LABEL_330;
                              }
                            }
                            v318 = 0;
                            goto LABEL_323;
                          }
                        }
                        v320 = 0;
                        goto LABEL_316;
                      }
                    }
                    v322 = 0;
                    goto LABEL_309;
                  }
                }
                v328 = 0;
                goto LABEL_290;
              }
            }
            v330 = 0;
            goto LABEL_283;
          }
        }
        v332 = 0;
        goto LABEL_276;
      }
    }
    v336 = 0;
    goto LABEL_269;
  }
LABEL_592:
  objc_autoreleasePoolPop(context);
  return a1;
}

void *IMDUpdateIMItemWithIMItemForceReplace(void *a1, void *a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  const __CFString *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *v38;
  void *v39;
  void *v40;
  int v41;
  void *v42;
  void *v43;
  void *v44;
  int v45;
  void *v46;
  void *v47;
  void *v48;
  int v49;
  void *v50;
  void *v51;
  void *v52;
  int v53;
  void *v54;
  void *v55;
  void *v56;
  int v57;
  void *v58;
  uint64_t v59;
  int v60;
  void *v61;
  void *v62;
  void *v63;
  int v64;
  void *v65;
  void *v66;
  void *v67;
  int v68;
  void *v69;
  void *v70;
  void *v71;
  int v72;
  void *v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  const __CFString *v79;
  __CFString *v80;
  const void *v81;
  uint64_t v82;
  const void *v83;
  int64_t v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int64_t v102;
  int v103;
  int64_t v104;
  int v105;
  uint64_t Identifier;
  void *context;
  const __CFString *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  CFTypeRef v112;
  CFTypeRef v113;
  CFTypeRef cf;
  CFTypeRef v115;
  const void *v116;
  int64_t v117;
  int64_t v118;
  int64_t v119;
  int64_t v120;
  int64_t v121;
  int64_t v122;
  CFTypeRef v123;
  const void *v124;
  CFTypeRef v125;
  CFTypeRef v126;
  CFTypeRef v127;
  uint64_t v128;
  CFTypeRef v129;
  uint64_t v130;
  _BYTE buf[22];
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  context = (void *)MEMORY[0x1AF435474]();
  if (IMOSLoggingEnabled())
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = a2;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Updating IMItem: %@ from IMItem: %@", buf, 0x16u);
    }
  }
  v7 = objc_msgSend(a2, "time");
  v8 = (void *)v7;
  if ((a3 & 1) != 0 || v7)
  {
    v9 = (void *)objc_msgSend(a1, "time");
    if (v9 != v8 && (!v9 || v8 && (objc_msgSend(v9, "isEqualToDate:", v8) & 1) == 0))
    {
      if ((a3 & 1) != 0
        || (objc_msgSend((id)objc_msgSend(a1, "time"), "timeIntervalSinceReferenceDate"), v10 >= 0.00000011920929))
      {
        objc_msgSend(a1, "setTime:", v8);
      }
    }
  }
  v11 = (void *)objc_msgSend(a2, "account");
  v12 = (void *)objc_msgSend(a1, "account");
  v13 = v12;
  if (v12 != v11
    && (!objc_msgSend(v12, "length")
     || objc_msgSend(v11, "length") && (objc_msgSend(v13, "isEqualToString:", v11) & 1) == 0))
  {
    objc_msgSend(a1, "setAccount:", v11);
  }
  v14 = (void *)objc_msgSend(a2, "accountID");
  v15 = (void *)objc_msgSend(a1, "accountID");
  v16 = v15;
  if (v15 != v14
    && (!objc_msgSend(v15, "length")
     || objc_msgSend(v14, "length") && (objc_msgSend(v16, "isEqualToString:", v14) & 1) == 0))
  {
    objc_msgSend(a1, "setAccountID:", v14);
  }
  v17 = (void *)objc_msgSend(a2, "service");
  v18 = (void *)objc_msgSend(a1, "service");
  v19 = v18;
  if (v18 != v17
    && (!objc_msgSend(v18, "length")
     || objc_msgSend(v17, "length") && (objc_msgSend(v19, "isEqualToString:", v17) & 1) == 0))
  {
    objc_msgSend(a1, "setService:", v17);
  }
  v20 = (void *)objc_msgSend(a2, "destinationCallerID");
  v21 = (void *)objc_msgSend(a1, "destinationCallerID");
  v22 = v21;
  if (v21 != v20
    && (!objc_msgSend(v21, "length")
     || objc_msgSend(v20, "length") && (objc_msgSend(v22, "isEqualToString:", v20) & 1) == 0))
  {
    objc_msgSend(a1, "setDestinationCallerID:", v20);
  }
  if (objc_msgSend(a1, "conformsToProtocol:", &unk_1EEC559C0)
    && objc_msgSend(a2, "conformsToProtocol:", &unk_1EEC559C0))
  {
    objc_msgSend(a1, "setErrorCode:", objc_msgSend(a2, "errorCode"));
  }
  if ((a3 & 1) != 0)
  {
    objc_msgSend(a1, "setCloudKitSyncState:", objc_msgSend(a2, "cloudKitSyncState"));
  }
  else
  {
    v23 = objc_msgSend(a1, "cloudKitSyncState");
    if (v23 != objc_msgSend(a2, "cloudKitSyncState"))
      objc_msgSend(a1, "setCloudKitSyncState:", objc_msgSend(a2, "cloudKitSyncState"));
    v24 = (void *)objc_msgSend(a1, "cloudKitRecordID");
    v25 = (void *)objc_msgSend(a2, "cloudKitRecordID");
    if (v24 == v25
      || objc_msgSend(v24, "length")
      && (!objc_msgSend(v25, "length") || (objc_msgSend(v24, "isEqualToString:", v25) & 1) != 0))
    {
      goto LABEL_46;
    }
  }
  objc_msgSend(a1, "setCloudKitRecordID:", objc_msgSend(a2, "cloudKitRecordID"));
  if ((a3 & 1) != 0)
  {
    objc_msgSend(a1, "setCloudKitRecordChangeTag:", objc_msgSend(a2, "cloudKitRecordChangeTag"));
    objc_msgSend(a1, "setCloudKitServerChangeTokenBlob:", objc_msgSend(a2, "cloudKitServerChangeTokenBlob"));
    goto LABEL_55;
  }
LABEL_46:
  v26 = (void *)objc_msgSend(a1, "cloudKitRecordChangeTag");
  v27 = (void *)objc_msgSend(a2, "cloudKitRecordChangeTag");
  if (v26 != v27
    && (!objc_msgSend(v26, "length")
     || objc_msgSend(v27, "length") && (objc_msgSend(v26, "isEqualToString:", v27) & 1) == 0))
  {
    objc_msgSend(a1, "setCloudKitRecordChangeTag:", objc_msgSend(a2, "cloudKitRecordChangeTag"));
    objc_msgSend(a1, "setCloudKitServerChangeTokenBlob:", objc_msgSend(a2, "cloudKitServerChangeTokenBlob"));
  }
  v28 = (void *)objc_msgSend(a1, "replyToGUID");
  v29 = (void *)objc_msgSend(a2, "replyToGUID");
  if (v28 == v29
    || objc_msgSend(v28, "length")
    && (!objc_msgSend(v29, "length") || (objc_msgSend(v28, "isEqualToString:", v29) & 1) != 0))
  {
LABEL_56:
    v30 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(a1, "sortID"));
    v31 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(a2, "sortID"));
    v32 = v31;
    if (v30 == (void *)v31 || v30 && (!v31 || (objc_msgSend(v30, "isEqualToNumber:", v31) & 1) != 0))
      goto LABEL_61;
    goto LABEL_60;
  }
LABEL_55:
  objc_msgSend(a1, "setReplyToGUID:", objc_msgSend(a2, "replyToGUID"));
  if ((a3 & 1) == 0)
    goto LABEL_56;
LABEL_60:
  objc_msgSend(a1, "setSortID:", objc_msgSend(a2, "sortID"));
LABEL_61:
  v33 = IMDMessageRecordCopyMessageForGUID((const __CFString *)objc_msgSend(a1, "guid", v32));
  v108 = v33;
  if (!v33)
    goto LABEL_168;
  v129 = 0;
  v130 = 0;
  v127 = 0;
  v128 = 0;
  v125 = 0;
  v126 = 0;
  v123 = 0;
  v124 = 0;
  v121 = 0;
  v122 = 0;
  v119 = 0;
  v120 = 0;
  v117 = 0;
  v118 = 0;
  *(_OWORD *)buf = 0u;
  v115 = 0;
  v116 = 0;
  v113 = 0;
  cf = 0;
  v111 = 0;
  v112 = 0;
  v109 = 0;
  v110 = 0;
  IMDMessageRecordBulkCopy((uint64_t)v33, 0, &v130, 0, &v129, &v128, 0, 0, 0, 0, 0, 0, &v127, &v126, &v125, &v124, 0, &v109, 0,
    0,
    0,
    &v123,
    &v122,
    0,
    &v119,
    &v120,
    &v121,
    0,
    &v118,
    0,
    &v117,
    buf,
    0,
    0,
    0,
    0,
    0,
    &v116,
    &v115,
    (uint64_t)&cf,
    &v113,
    &v112,
    &v111,
    &v110,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v34 = (void *)objc_msgSend(a1, "time");
  v35 = objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v128);
  v36 = v35;
  if (v34 == (void *)v35)
    goto LABEL_66;
  if (!v34)
  {
    v37 = 1;
    goto LABEL_68;
  }
  if (!v35)
  {
LABEL_66:
    v105 = 0;
    goto LABEL_69;
  }
  v37 = objc_msgSend(v34, "isEqualToDate:", v35) ^ 1;
LABEL_68:
  v105 = v37;
LABEL_69:
  v38 = (void *)objc_msgSend(a1, "service", v36);
  v39 = v38;
  v40 = (void *)v127;
  if (v38 != v127)
  {
    if (!objc_msgSend(v38, "length"))
    {
      v41 = 1;
      goto LABEL_75;
    }
    if (objc_msgSend(v40, "length"))
    {
      v41 = objc_msgSend(v39, "isEqualToString:", v40) ^ 1;
LABEL_75:
      v103 = v41;
      goto LABEL_76;
    }
  }
  v103 = 0;
LABEL_76:
  v42 = (void *)objc_msgSend(a1, "destinationCallerID");
  v43 = v42;
  v44 = (void *)v112;
  if (v42 == v112)
    goto LABEL_80;
  if (!objc_msgSend(v42, "length"))
  {
    v45 = 1;
    goto LABEL_82;
  }
  if (!objc_msgSend(v44, "length"))
  {
LABEL_80:
    v101 = 0;
    goto LABEL_83;
  }
  v45 = objc_msgSend(v43, "isEqualToString:", v44) ^ 1;
LABEL_82:
  v101 = v45;
LABEL_83:
  v46 = (void *)objc_msgSend(a1, "roomName");
  v47 = v46;
  v48 = (void *)v123;
  if (v46 == v123)
  {
LABEL_87:
    v49 = 0;
    goto LABEL_89;
  }
  if (objc_msgSend(v46, "length"))
  {
    if (objc_msgSend(v48, "length"))
    {
      v49 = objc_msgSend(v47, "isEqualToString:", v48) ^ 1;
      goto LABEL_89;
    }
    goto LABEL_87;
  }
  v49 = 1;
LABEL_89:
  v50 = (void *)objc_msgSend(a1, "account");
  v51 = v50;
  v52 = (void *)v126;
  if (v50 == v126)
  {
LABEL_93:
    v53 = 0;
    goto LABEL_95;
  }
  if (objc_msgSend(v50, "length"))
  {
    if (objc_msgSend(v52, "length"))
    {
      v53 = objc_msgSend(v51, "isEqualToString:", v52) ^ 1;
      goto LABEL_95;
    }
    goto LABEL_93;
  }
  v53 = 1;
LABEL_95:
  v54 = (void *)objc_msgSend(a1, "accountID");
  v55 = v54;
  v56 = (void *)v125;
  if (v54 == v125)
  {
LABEL_99:
    v57 = 0;
    goto LABEL_101;
  }
  if (objc_msgSend(v54, "length"))
  {
    if (objc_msgSend(v56, "length"))
    {
      v57 = objc_msgSend(v55, "isEqualToString:", v56) ^ 1;
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  v57 = 1;
LABEL_101:
  v58 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a1, "cloudKitSyncState"));
  v59 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v116);
  if (v58 == (void *)v59)
  {
LABEL_105:
    v60 = 0;
    goto LABEL_107;
  }
  if (v58)
  {
    if (v59)
    {
      v60 = objc_msgSend(v58, "isEqualToNumber:", v59) ^ 1;
      goto LABEL_107;
    }
    goto LABEL_105;
  }
  v60 = 1;
LABEL_107:
  v61 = (void *)objc_msgSend(a1, "cloudKitRecordID");
  v62 = v61;
  v63 = (void *)v115;
  if (v61 == v115)
  {
LABEL_111:
    v64 = 0;
    goto LABEL_113;
  }
  if (objc_msgSend(v61, "length"))
  {
    if (objc_msgSend(v63, "length"))
    {
      v64 = objc_msgSend(v62, "isEqualToString:", v63) ^ 1;
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  v64 = 1;
LABEL_113:
  v65 = (void *)objc_msgSend(a1, "cloudKitRecordChangeTag");
  v66 = v65;
  v67 = (void *)v113;
  if (v65 == v113)
  {
LABEL_117:
    v68 = 0;
    goto LABEL_119;
  }
  if (objc_msgSend(v65, "length"))
  {
    if (objc_msgSend(v67, "length"))
    {
      v68 = objc_msgSend(v66, "isEqualToString:", v67) ^ 1;
      goto LABEL_119;
    }
    goto LABEL_117;
  }
  v68 = 1;
LABEL_119:
  v69 = (void *)objc_msgSend(a1, "replyToGUID");
  v70 = v69;
  v71 = v111;
  if (v69 == v111)
  {
LABEL_123:
    v72 = 0;
    goto LABEL_125;
  }
  if (objc_msgSend(v69, "length"))
  {
    if (objc_msgSend(v71, "length"))
    {
      v72 = objc_msgSend(v70, "isEqualToString:", v71) ^ 1;
      goto LABEL_125;
    }
    goto LABEL_123;
  }
  v72 = 1;
LABEL_125:
  v73 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(a1, "sortID"));
  v74 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v110);
  if (v73 == (void *)v74)
  {
LABEL_129:
    v75 = 0;
    goto LABEL_131;
  }
  if (v73)
  {
    if (v74)
    {
      v75 = objc_msgSend(v73, "isEqualToNumber:", v74) ^ 1;
      goto LABEL_131;
    }
    goto LABEL_129;
  }
  v75 = 1;
LABEL_131:
  v76 = v105 | v103 | v101 | v49 | v53 | v57 | v60 | v64 | v68 | v72 | v75;
  if (objc_msgSend(a1, "conformsToProtocol:", &unk_1EEC559C0))
  {
    v77 = v109;
    if (v77 != objc_msgSend(a1, "errorCode"))
      v76 = 1;
  }
  Identifier = (uint64_t)v124;
  if (objc_msgSend(a1, "sender"))
    v78 = objc_msgSend(a1, "sender");
  else
    v78 = objc_msgSend(a1, "handle");
  v79 = (const __CFString *)v78;
  if (v78)
  {
    v80 = (__CFString *)objc_msgSend(a1, "service");
    if (v80)
    {
      v81 = (const void *)IMDHandleRecordCopyHandleForIDOnService(v79, v80);
      if (v81
        || (v82 = IMCountryCodeForIncomingTextMessage(),
            (v81 = IMDHandleRecordCreate(*MEMORY[0x1E0C9AE00], (uint64_t)v79, v82, v80, 0, 0)) != 0))
      {
        v83 = v124;
        if (v83 != (const void *)IMDHandleRecordGetIdentifier((uint64_t)v81))
          v76 = 1;
        Identifier = IMDHandleRecordGetIdentifier((uint64_t)v81);
        CFRelease(v81);
      }
    }
  }
  if (objc_msgSend(a1, "conformsToProtocol:", &unk_1EEC559C0))
    v104 = objc_msgSend(a1, "errorCode");
  else
    v104 = 0;
  if (v129)
    CFRelease(v129);
  if (v127)
    CFRelease(v127);
  if (v126)
    CFRelease(v126);
  if (v125)
    CFRelease(v125);
  if (v123)
    CFRelease(v123);
  if (cf)
    CFRelease(cf);
  if (v113)
    CFRelease(v113);
  if (v115)
    CFRelease(v115);
  if (v112)
    CFRelease(v112);
  if ((v76 | a3) == 1)
  {
    v102 = objc_msgSend((id)objc_msgSend(a1, "time"), "__im_nanosecondTimeInterval");
    v100 = objc_msgSend(a1, "service");
    v99 = objc_msgSend(a1, "account");
    v98 = objc_msgSend(a1, "accountID");
    v84 = v121;
    v85 = v118;
    v96 = v119;
    v97 = v122;
    v95 = v120;
    v86 = v117;
    v87 = objc_msgSend(a1, "cloudKitSyncState");
    v88 = objc_msgSend(a1, "cloudKitRecordID");
    v89 = objc_msgSend(a1, "cloudKitServerChangeTokenBlob");
    v90 = objc_msgSend(a1, "cloudKitRecordChangeTag");
    v91 = objc_msgSend(a1, "destinationCallerID");
    v92 = objc_msgSend(a1, "replyToGUID");
    v93 = objc_msgSend(a1, "sortID");
    IMDMessageRecordBulkUpdate((uint64_t)v108, 0, 0, v102, 0, 0, 0, 0, 0, 0, v100, v99, v98, Identifier, 0, v104, 0, v97, 0,
      v96,
      v95,
      v84,
      0,
      v85,
      0,
      v86,
      *(int64_t *)buf,
      *(int64_t *)&buf[8],
      0,
      0,
      0,
      0,
      v87,
      v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0);
  }
  CFRelease(v108);
LABEL_168:
  objc_autoreleasePoolPop(context);
  return a1;
}

uint64_t IMDSharedSqliteDatabasePath()
{
  NSObject *v0;
  uint64_t v1;
  NSObject *v2;

  if (!sub_1ABB6A050(1))
  {
    v0 = IMLogHandleForCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
      sub_1ABC60088();
  }
  v1 = CSDBSqliteDatabasePath();
  if (!v1)
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC5FFEC();
  }
  return v1;
}

BOOL IMDSharedThreadedRecordStoreIsNull()
{
  return qword_1ED0D3A50 == 0;
}

void sub_1ABBF4978(uint64_t a1)
{
  NSObject *v2;

  CSDBSetCorruptedDatabaseHandler();
  if (!qword_1ED0D3A50)
  {
    qword_1ED0D3A50 = CSDBCreateThreadedRecordStore();
    if (!qword_1ED0D3A50)
    {
      v2 = IMLogHandleForCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        sub_1ABC601A0();
    }
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
}

uint64_t CSDBSharedRecordStore()
{
  NSObject *v0;
  uint64_t v1;
  NSObject *v2;

  if (!IMDSharedThreadedRecordStore())
  {
    v0 = IMLogHandleForCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
      sub_1ABC602D8();
  }
  v1 = CSDBRecordStoreRefFromThreadedRecordStoreRef();
  if (!v1)
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC6023C();
  }
  return v1;
}

uint64_t _IMDSetSharedMessageRecordStore(uint64_t result)
{
  qword_1ED0D3A50 = result;
  return result;
}

uint64_t IMDRecordStoreInitializeCount()
{
  return 1;
}

void IMDRecordStoreIncrementInitializeCount()
{
  ++qword_1EEC405C8;
}

uint64_t IMDCreateThreadedRecordStoreWithPath(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  v2 = CSDBCreateThreadedRecordStore();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1ABBF4B28;
  v4[3] = &unk_1E5AB9E70;
  v4[4] = a1;
  _IMDInitializeMessagesRecordStoreWithVersion(v2, (uint64_t)v4, 0);
  return v2;
}

id sub_1ABBF4B28(uint64_t a1)
{
  return (id)objc_msgSend(*(id *)(a1 + 32), "stringByResolvingAndStandardizingPath");
}

void IMDSMSRecordStoreClose()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];
  uint8_t v5[16];
  uint8_t buf[16];

  v0 = IMLogHandleForCategory();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "Saving database.", buf, 2u);
  }
  _IMDSMSRecordStoreSaveAndInvalidateCaches();
  if (IMDSharedThreadedRecordStore())
  {
    v1 = IMLogHandleForCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_INFO, "Destroying database.", v5, 2u);
    }
    v2 = IMDSharedThreadedRecordStore();
    MEMORY[0x1AF434A60](v2);
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Closed database.", v4, 2u);
    }
  }
}

BOOL sub_1ABBF4C40(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t Database;
  _OWORD v8[10];
  __int128 v9;

  if (!a1 && (v3 = IMLogHandleForCategory(), os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC604AC();
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v4 = IMLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1ABC60410();
LABEL_6:
  v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Create tables...", (uint8_t *)v8, 2u);
  }
  CSDBSqliteConnectionCommit();
  v9 = 0u;
  memset(v8, 0, sizeof(v8));
  Database = CSDBRecordStoreGetDatabase();
  IMDSqlOperationInitWithCSDBConnection(a2, Database, (uint64_t)v8);
  IMDSqlOperationBeginTransaction(v8);
  if (*((_QWORD *)&v9 + 1))
    goto LABEL_13;
  IMDCreateTablesWithOperation((uint64_t)v8, 1);
  if (*((_QWORD *)&v9 + 1)
    || (IMDCreateIndexesWithOperation((uint64_t)v8, 1), *((_QWORD *)&v9 + 1))
    || (IMDCreateTriggersWithOperation((uint64_t)v8, 1), *((_QWORD *)&v9 + 1))
    || (CSDBSqliteConnectionSetValueForProperty(),
        CSDBSqliteConnectionSetValueForProperty(),
        CSDBSqliteConnectionSetValueForProperty(),
        CSDBSqliteConnectionSetValueForProperty(),
        CSDBSqliteConnectionSetValueForProperty(),
        *((_QWORD *)&v9 + 1)))
  {
LABEL_13:
    IMDSqlOperationRevertTransaction(v8);
  }
  else
  {
    IMDSqlOperationCommitTransaction(v8);
  }
  return IMDSqlOperationRelease((uint64_t)v8, 0);
}

void sub_1ABBF4E2C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t v10[16];
  uint8_t v11[16];
  uint8_t buf[16];

  if (a1)
  {
    if (a2)
    {
      v3 = IMLogHandleForCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Setting page size.", buf, 2u);
      }
      CSDBSqliteConnectionPerformSQL();
      v4 = IMLogHandleForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Enabling WAL journal mode.", v11, 2u);
      }
      CSDBSqliteConnectionPerformSQL();
      v5 = IMLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Enabling Foreign Key support.", v10, 2u);
      }
      CSDBSqliteConnectionPerformSQL();
      if (*(_QWORD *)(a2 + 8))
      {
        v6 = IMLogHandleForCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Registering external functions.", v9, 2u);
        }
        CSDBSqliteDatabaseRegisterFunctionForDB();
        CSDBSqliteDatabaseRegisterFunctionForDB();
        CSDBSqliteDatabaseRegisterFunctionForDB();
        CSDBSqliteDatabaseRegisterFunctionForDB();
      }
      return;
    }
    goto LABEL_16;
  }
  v7 = IMLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    sub_1ABC605E4();
  if (!a2)
  {
LABEL_16:
    v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1ABC60548();
  }
}

void IMDSqliteDatabaseClean(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  double v7;
  NSObject *v8;
  int v9;
  double v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v2 = (void *)objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Performing a pre-checkpoint vacuum.", (uint8_t *)&v9, 2u);
    }
    sqlite3_exec(*(sqlite3 **)(a1 + 8), "vacuum;", 0, 0, 0);
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Performing Analyze to optimize the database", (uint8_t *)&v9, 2u);
    }
    sqlite3_exec(*(sqlite3 **)(a1 + 8), "ANALYZE;", 0, 0, 0);
    v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Performing a WAL checkpoint.", (uint8_t *)&v9, 2u);
    }
    sqlite3_exec(*(sqlite3 **)(a1 + 8), "PRAGMA wal_checkpoint(RESTART);", 0, 0, 0);
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v2, "timeIntervalSinceNow");
      v9 = 134217984;
      v10 = -v7;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Database Clean up took: %f seconds", (uint8_t *)&v9, 0xCu);
    }
  }
  else
  {
    v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1ABC60680();
  }
}

BOOL _IMDInitializeMessagesRecordStoreWithVersion(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  NSObject *v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  uint8_t buf[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  _IMDAllowLocalMigration();
  if (a3)
    v4 = 0;
  else
    v4 = 2;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1ABBF58D4;
  v11[3] = &unk_1E5AB9E98;
  v11[4] = &v12;
  LODWORD(v9) = v4;
  CSDBThreadedRecordStoreEnsureDatabaseSetupWithProtection();
  if (*((_BYTE *)v13 + 24))
  {
    v10 = 0;
    IMDCreateTriggers((uint64_t)&v10, 0);
    if (v10)
    {
      v5 = IMLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = IMDSharedThreadedRecordStore();
        sub_1ABC606AC(v6, objc_msgSend(v10, "localizedDescription", v9, v11), buf, v5);
      }
    }
    v7 = *((_BYTE *)v13 + 24) != 0;
  }
  else
  {
    v7 = 0;
  }
  _Block_object_dispose(&v12, 8);
  return v7;
}

void sub_1ABBF5424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1ABBF5450(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v5;
  NSObject *v6;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  const __CFString *v12;
  const __CFString *v13;
  int v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const __CFString *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1 && (v5 = IMLogHandleForCategory(), os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC6079C();
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v6 = IMLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    sub_1ABC60700();
LABEL_6:
  v8 = a3 > 1 && a3 < 18016;
  v9 = IMLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v12 = CFSTR("NO");
    v14 = 67109634;
    v15 = a3;
    if ((_DWORD)v8)
      v12 = CFSTR("YES");
    v16 = 1024;
    v17 = 18016;
    v18 = 2112;
    v19 = v12;
    _os_log_error_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_ERROR, "The current SMS database is v%d.  The current schema version is v%d. Can be migrated: %@", (uint8_t *)&v14, 0x18u);
  }
  if (a3 > 18016)
  {
    v8 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance"), "isInternalInstall");
    v10 = IMLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = CFSTR("NO");
      v14 = 67109634;
      v15 = a3;
      if ((_DWORD)v8)
        v13 = CFSTR("YES");
      v16 = 1024;
      v17 = 18016;
      v18 = 2112;
      v19 = v13;
      _os_log_error_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_ERROR, "The current SMS database has a NEWER version (%d) than expected (%d), internal build allows newer DB? %@", (uint8_t *)&v14, 0x18u);
    }
  }
  return v8;
}

uint64_t sub_1ABBF5648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  double v9;
  double v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  char v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  int v21;
  id v22;
  uint8_t buf[16];

  if (!a1 && (v6 = IMLogHandleForCategory(), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC60B2C();
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v7 = IMLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    sub_1ABC60A90();
LABEL_6:
  v8 = IMLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    sub_1ABC60A08(a3, v8);
  CSDBSqliteConnectionCommit();
  objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
  v10 = v9;
  v11 = sub_1ABBF5A60(a1, a2);
  v12 = IMLogHandleForCategory();
  v13 = v12;
  if (!v11)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_1ABC609DC();
    return 2;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "Initial Integrity checked success", buf, 2u);
  }
  v22 = 0;
  v21 = a3;
  if (!_IMDDatabasePerformMigrations(a1, a2, a3, &v21, &v22))
    goto LABEL_21;
  CSDBSqliteConnectionPerformSQL();
  if (!sub_1ABBF5A60(a1, a2))
  {
    v17 = IMLogHandleForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_1ABC609B0();
LABEL_21:
    v15 = 1;
    v16 = 3;
    goto LABEL_22;
  }
  IMDPersistenceSubmitEvent(CFSTR("com.apple.MobileSMS.Migration.Migration_Successful"));
  v14 = IMLogHandleForCategory();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    sub_1ABC60984();
  if (!v22)
  {
    v16 = 0;
    goto LABEL_27;
  }
  v15 = 0;
  v16 = 0;
LABEL_22:
  IMDPersistenceSubmitEvent(CFSTR("com.apple.MobileSMS.Migration.Migration_Failure"));
  v18 = IMLogHandleForCategory();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    sub_1ABC608D8(&v21, &v22, v18);
  if ((v15 & 1) != 0)
    return 2;
LABEL_27:
  v19 = IMLogHandleForCategory();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    sub_1ABC60838(v19, v10);
  return v16;
}

uint64_t sub_1ABBF58D4(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  CSDBThreadedRecordStoreRegisterClass();
  CSDBThreadedRecordStoreRegisterClass();
  CSDBThreadedRecordStoreRegisterClass();
  return CSDBThreadedRecordStoreRegisterClass();
}

id sub_1ABBF593C()
{
  return _IMDCreateDatabasePathIfNecessary();
}

uint64_t _IMDSMSRecordStoreUpdateLastDeleteSequenceNumberUnlocked()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v6 = -1;
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = sub_1ABBF59EC;
  v2[3] = &unk_1E5AB9EE0;
  v2[4] = &v3;
  _IMDPerformLockedConnectionBlock((uint64_t)v2);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1ABBF59D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBF59EC(uint64_t a1)
{
  CSDBSqliteConnectionBeginTransactionType();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CSDBRecordStoreGetSequenceNumber();
  IMSetDomainIntForKey();
  return CSDBSqliteConnectionCommit();
}

uint64_t sub_1ABBF5A60(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  __CFString *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  __CFString *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  uint8_t v35[16];
  uint8_t v36[16];
  uint8_t v37[16];
  uint8_t v38[16];
  uint8_t buf[16];

  if (!a1 && (v3 = IMLogHandleForCategory(), os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC60D58();
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v4 = IMLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1ABC60CBC();
LABEL_6:
  if ((sub_1ABBF5D94(a2) & 1) != 0)
  {
    v5 = IMLogHandleForCategory();
    v6 = 1;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Integrity checked success", v35, 2u);
    }
    v7 = CFSTR("com.apple.MobileSMS.InitialIntegrityCheck_Success");
    goto LABEL_37;
  }
  IMDPersistenceSubmitEvent(CFSTR("com.apple.MobileSMS.InitialIntegrityCheck_Failure"));
  v8 = CSDBSqliteConnectionPerformSQL();
  if ((_DWORD)v8 != 101 && (v9 = v8, (_DWORD)v8))
  {
    v12 = IMLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_1ABC60C58(v9, v12, v13, v14, v15, v16, v17, v18);
    v11 = CFSTR("com.apple.MobileSMS.Migration.Reindex_Failure");
  }
  else
  {
    v10 = IMLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "Reindexing the DB worked.", buf, 2u);
    }
    v11 = CFSTR("com.apple.MobileSMS.Migration.Reindex_Success");
  }
  IMDPersistenceSubmitEvent(v11);
  if ((sub_1ABBF5D94(a2) & 1) != 0)
    goto LABEL_31;
  IMDPersistenceSubmitEvent(CFSTR("com.apple.MobileSMS.PostReindex.IntegrityCheck_Failure"));
  v19 = CSDBSqliteDatabaseVacuum();
  if ((_DWORD)v19 != 101 && (v20 = v19, (_DWORD)v19))
  {
    v23 = IMLogHandleForCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      sub_1ABC60BF4(v20, v23, v24, v25, v26, v27, v28, v29);
    v22 = CFSTR("com.apple.MobileSMS.Migration.Vacuum_Failure");
  }
  else
  {
    v21 = IMLogHandleForCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1ABB60000, v21, OS_LOG_TYPE_INFO, "Vacuuming DB success", v38, 2u);
    }
    v22 = CFSTR("com.apple.MobileSMS.Migration.Vacuum_Success");
  }
  IMDPersistenceSubmitEvent(v22);
  v30 = sub_1ABBF5D94(a2);
  v31 = IMLogHandleForCategory();
  v32 = v31;
  if (v30)
  {
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_1ABB60000, v32, OS_LOG_TYPE_INFO, "Post Vacuuming integrity check success", v37, 2u);
    }
    IMDPersistenceSubmitEvent(CFSTR("com.apple.MobileSMS.Migration.PostVacuum.IntegrityCheck_Success"));
LABEL_31:
    v33 = IMLogHandleForCategory();
    v6 = 1;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_1ABB60000, v33, OS_LOG_TYPE_INFO, "Integrity checked success", v36, 2u);
    }
    v7 = CFSTR("com.apple.MobileSMS.PostReindex.IntegrityCheck_Success");
    goto LABEL_37;
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    sub_1ABC60BC8();
  v6 = 0;
  v7 = CFSTR("com.apple.MobileSMS.Migration.PostVacuum.IntegrityCheck_Failure");
LABEL_37:
  IMDPersistenceSubmitEvent(v7);
  return v6;
}

uint64_t sub_1ABBF5D94(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;

  if (!a1)
  {
    v1 = IMLogHandleForCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1ABC60DF4();
  }
  v2 = CSDBSqliteDatabaseCheckIntegrity();
  if ((v2 & 1) == 0)
    IMDPersistenceSubmitEvent(CFSTR("com.apple.MobileSMS.Migration.IntegrityCheck_Failure"));
  return v2;
}

void sub_1ABBF5DFC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

BOOL IMDSqlOperationIsQueryIndexed(uint64_t a1, _QWORD *a2)
{
  id v4;
  uint64_t v5;
  const __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  _BOOL8 v10;
  NSObject *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a2)
    *a2 = 0;
  if (a1)
  {
    v18 = 0;
    v19 = &v18;
    v20 = 0x2020000000;
    v21 = 0;
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v5 = MEMORY[0x1E0C809B0];
    while (IMDSqlOperationHasRows(a1))
    {
      v17[0] = v5;
      v17[1] = 3221225472;
      v17[2] = sub_1ABBF6060;
      v17[3] = &unk_1E5ABB808;
      v17[4] = v4;
      v17[5] = &v18;
      IMDSqlOperationIterateRow(a1, (uint64_t)v17);
    }
    if (*((_BYTE *)v19 + 24))
      v6 = CFSTR("YES");
    else
      v6 = CFSTR("NO");
    NSLog(CFSTR("*** Query is indexed: %@"), v6);
    NSLog(CFSTR("    query: %@"), *(_QWORD *)(a1 + 48));
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v22, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v14;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v14 != v8)
            objc_enumerationMutation(v4);
          NSLog(CFSTR("         : %@"), *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i));
        }
        v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v22, 16);
      }
      while (v7);
    }
    if (a2)
      *a2 = v4;

    v10 = *((_BYTE *)v19 + 24) != 0;
    _Block_object_dispose(&v18, 8);
  }
  else
  {
    v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1ABC60E90();
    return 0;
  }
  return v10;
}

void sub_1ABBF6030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Unwind_Resume(exception_object);
}

void sub_1ABBF6060(uint64_t a1, __int128 *a2, _BYTE *a3)
{
  const char *v6;
  const unsigned __int8 *v7;
  const unsigned __int8 *v8;
  void *v9;
  __int128 v10;
  uint64_t v11;

  v6 = (const char *)*((_QWORD *)a2 + 1);
  if (!v6)
  {
    v6 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *((_DWORD *)a2 + 4));
    *((_QWORD *)a2 + 1) = v6;
  }
  if (!strncmp(v6, "detail", 0x100uLL))
  {
    v10 = *a2;
    v11 = *((_QWORD *)a2 + 2);
    v7 = IMDStringFromSqlColumn((uint64_t)&v10);
    if (v7)
    {
      v8 = v7;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = CFStringFind((CFStringRef)v7, CFSTR("SCAN TABLE"), 1uLL).length == 0;
      v9 = *(void **)(a1 + 32);
      if (v9)
        objc_msgSend(v9, "addObject:", v8);
      CFRelease(v8);
    }
    *a3 = 1;
  }
}

uint64_t IMDSqlOperationColumnExistsOnTableWithOperation(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  const __CFString *v9;
  char v10;
  int v11;
  const char *v12;
  const unsigned __int8 *v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int N[2];

  if (!a1 && (v6 = IMLogHandleForCategory(), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC61064();
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v7 = IMLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    sub_1ABC60FC8();
LABEL_6:
  if (a3 || (v8 = IMLogHandleForCategory(), !os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)))
  {
    if (a1)
      goto LABEL_9;
    return 0;
  }
  sub_1ABC60F2C();
  if (!a1)
    return 0;
LABEL_9:
  v9 = CFStringCreateWithFormat(0, 0, CFSTR("PRAGMA table_info(%@);"), a2);
  _IMDSqlOperationBeginQuery(a1, v9);
  CFRelease(v9);
  v10 = 0;
  while (IMDSqlOperationHasRows(a1))
  {
    if (IMDSqlOperationColumnCount(a1))
    {
      v11 = 0;
      while (1)
      {
        v18 = 0uLL;
        *(_QWORD *)N = 0;
        IMDSqlOperationColumnByIndex(a1, v11, (uint64_t)&v18);
        v12 = (const char *)*((_QWORD *)&v18 + 1);
        if (!*((_QWORD *)&v18 + 1))
        {
          v12 = sqlite3_column_name(*(sqlite3_stmt **)v18, N[0]);
          *((_QWORD *)&v18 + 1) = v12;
        }
        if (!strncmp(v12, "name", 0x100uLL))
          break;
        if (++v11 >= IMDSqlOperationColumnCount(a1))
          goto LABEL_17;
      }
      v16 = v18;
      v17 = *(_QWORD *)N;
      v13 = IMDStringFromSqlColumn((uint64_t)&v16);
      if (CFStringCompare((CFStringRef)v13, a3, 0) == kCFCompareEqualTo)
        v10 = 1;
      CFRelease(v13);
      if ((v10 & 1) != 0)
      {
LABEL_22:
        v14 = 1;
        goto LABEL_24;
      }
    }
    else
    {
LABEL_17:
      if ((v10 & 1) != 0)
        goto LABEL_22;
    }
  }
  v14 = v10 & 1;
LABEL_24:
  IMDSqlOperationFinishQuery(a1);
  return v14;
}

BOOL IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(uint64_t a1, uint64_t a2, const __CFString *a3, const __CFString *a4)
{
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  _BOOL8 v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  const __CFString *v16;
  const __CFString *v17;
  uint64_t v18;
  NSObject *v19;
  const __CFString *v20;
  uint8_t buf[4];
  const __CFString *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  const __CFString *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a2 && (v8 = IMLogHandleForCategory(), os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC61238();
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v9 = IMLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    sub_1ABC6119C();
LABEL_6:
  if (!a4)
  {
    v10 = IMLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1ABC61100();
  }
  if (IMDSqlOperationColumnExistsOnTableWithOperation(a1, a2, a3))
  {
    v11 = IMLogHandleForCategory();
    v12 = 1;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v23 = a3;
      v24 = 2112;
      v25 = a2;
      v13 = "Found column %@ on %@, no need to add it";
      v14 = v11;
      v15 = 22;
LABEL_18:
      _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, v13, buf, v15);
    }
  }
  else
  {
    v16 = &stru_1E5AC1D70;
    if (a4)
      v16 = a4;
    v17 = CFStringCreateWithFormat(0, 0, CFSTR("ALTER TABLE %@ ADD COLUMN %@ %@;"), a2, a3, v16);
    _IMDSqlOperationBeginQuery(a1, v17);
    IMDSqlOperationFinishQuery(a1);
    CFRelease(v17);
    v18 = *(_QWORD *)(a1 + 168);
    v12 = v18 == 0;
    v19 = IMLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v20 = CFSTR("NO");
      *(_DWORD *)buf = 138412802;
      v23 = a3;
      v24 = 2112;
      if (!v18)
        v20 = CFSTR("YES");
      v25 = a2;
      v26 = 2112;
      v27 = v20;
      v13 = "Adding column %@ to %@ succeeded: %@";
      v14 = v19;
      v15 = 32;
      goto LABEL_18;
    }
  }
  return v12;
}

BOOL IMDSqlOperationDropColumnIfExistsToTableWithOperation(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  NSObject *v6;
  NSObject *v7;
  const __CFString *v8;
  uint64_t v9;
  _BOOL8 v10;
  NSObject *v11;
  const __CFString *v12;
  NSObject *v13;
  uint8_t buf[4];
  const __CFString *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  const __CFString *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a2 && (v6 = IMLogHandleForCategory(), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC61370();
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v7 = IMLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    sub_1ABC612D4();
LABEL_6:
  if (IMDSqlOperationColumnExistsOnTableWithOperation(a1, a2, a3))
  {
    v8 = CFStringCreateWithFormat(0, 0, CFSTR("ALTER TABLE %@ DROP COLUMN %@;"), a2, a3);
    _IMDSqlOperationBeginQuery(a1, v8);
    IMDSqlOperationFinishQuery(a1);
    CFRelease(v8);
    v9 = *(_QWORD *)(a1 + 168);
    v10 = v9 == 0;
    v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = CFSTR("NO");
      *(_DWORD *)buf = 138412802;
      v16 = a3;
      v17 = 2112;
      if (!v9)
        v12 = CFSTR("YES");
      v18 = a2;
      v19 = 2112;
      v20 = v12;
      _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "Dropping column %@ to %@ succeeded: %@", buf, 0x20u);
    }
  }
  else
  {
    v13 = IMLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v16 = a3;
      v17 = 2112;
      v18 = a2;
      _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "No column %@ on %@, no need to drop it", buf, 0x16u);
    }
    return 0;
  }
  return v10;
}

BOOL IMDSqlOperationAddColumnIfNotExistsToTable(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  _BOOL8 v9;
  _OWORD v11[11];

  if (!a1 && (v6 = IMLogHandleForCategory(), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC61544();
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v7 = IMLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    sub_1ABC614A8();
LABEL_6:
  if (!a3)
  {
    v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1ABC6140C();
  }
  memset(v11, 0, sizeof(v11));
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v11);
  v9 = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation((uint64_t)v11, a1, a2, a3);
  IMDSqlOperationRelease((uint64_t)v11, 0);
  return v9;
}

uint64_t IMDSqlOperationColumnExistsOnTable(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;
  _OWORD v6[11];

  memset(v6, 0, sizeof(v6));
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v6);
  v4 = IMDSqlOperationColumnExistsOnTableWithOperation((uint64_t)v6, a1, a2);
  IMDSqlOperationRelease((uint64_t)v6, 0);
  return v4;
}

id IMDSqlOperationReadTableInfo(uint64_t a1)
{
  id Rows;
  _OWORD v4[11];

  memset(v4, 0, sizeof(v4));
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v4);
  Rows = _IMDSqlOperationGetRows((uint64_t)v4, (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("PRAGMA table_info(%@);"),
                                 a1));
  IMDSqlOperationRelease((uint64_t)v4, 0);
  return Rows;
}

id IMDDatabaseReadTableInfo(uint64_t a1, uint64_t a2)
{
  return _IMDSqlOperationGetRows(a1, (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("PRAGMA table_info(%@);"),
                                 a2));
}

uint64_t IMDSqlOperationErrorDescription(uint64_t a1)
{
  void *v1;

  if (a1 && (v1 = *(void **)(a1 + 168)) != 0)
    return objc_msgSend(v1, "localizedDescription");
  else
    return 0;
}

sqlite3_int64 IMDSqlOperationGetRowCountForTable(uint64_t a1)
{
  NSObject *v2;
  sqlite3_int64 v3;
  _BYTE v5[24];
  _OWORD v6[11];

  if (!a1)
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC615E0();
  }
  memset(v6, 0, sizeof(v6));
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v6);
  _IMDSqlOperationBeginQuery((uint64_t)v6, (CFStringRef)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT count(*) from %@;"), a1));
  v3 = 0;
  if (IMDSqlOperationHasRows((uint64_t)v6))
  {
    IMDSqlOperationColumnByIndex((uint64_t)v6, 0, (uint64_t)v5);
    v3 = IMDInt64FromSqlColumn((uint64_t)v5);
  }
  IMDSqlOperationFinishQuery((uint64_t)v6);
  IMDSqlOperationRelease((uint64_t)v6, 0);
  return v3;
}

CFStringRef IMDSqlOperationGetDatabasePath(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;

  if (!a1 || (v2 = *(_QWORD *)(a1 + 8)) == 0)
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_1ABC61718();
      if (!a1)
        return 0;
    }
    else if (!a1)
    {
      return 0;
    }
    v2 = *(_QWORD *)(a1 + 8);
    if (!v2)
      return 0;
  }
  v4 = sqlite3_db_filename(*(sqlite3 **)(v2 + 8), "main");
  if (v4)
    return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 0x8000100u);
  v6 = IMLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    sub_1ABC6167C();
  return 0;
}

BOOL IMDDatabaseCopy(void *a1, void *a2, _QWORD *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  void (*v9)(uint64_t);
  NSObject *v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  NSObject *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  _BOOL8 v30;
  void *v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  void *v35;
  sqlite3 *ppDb;
  char v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _BYTE buf[24];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v38 = xmmword_1E5ABB828;
    v39 = *(_OWORD *)off_1E5ABB838;
    v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("fromPath"), "BOOL IMDDatabaseCopy(NSString *, NSString *, NSError **)", IMFileLocationTrimFileName(), 259, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v9 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v9)
    {
      v9(v8);
    }
    else if (IMOSLoggingEnabled())
    {
      v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v8;
        _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
    if (a2)
      return 0;
    goto LABEL_12;
  }
  if (!a2)
  {
LABEL_12:
    v38 = xmmword_1E5ABB850;
    v39 = *(_OWORD *)off_1E5ABB860;
    v11 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("toPath"), "BOOL IMDDatabaseCopy(NSString *, NSString *, NSError **)", IMFileLocationTrimFileName(), 260, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v12 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v12)
    {
      v12(v11);
    }
    else if (IMOSLoggingEnabled())
    {
      v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v11;
        _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
    return 0;
  }
  if ((objc_msgSend((id)objc_msgSend(a1, "pathExtension"), "isEqualToString:", CFSTR("db")) & 1) == 0)
  {
    v38 = xmmword_1E5ABB878;
    v39 = *(_OWORD *)off_1E5ABB888;
    v40 = 266;
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected false '%@' in %s at %s:%d. %@"), CFSTR("[[fromPath pathExtension] isEqualToString:@\"db\"]"), "BOOL IMDDatabaseCopy(NSString *, NSString *, NSError **)", IMFileLocationTrimFileName(), 266, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if ((objc_msgSend((id)objc_msgSend(a2, "pathExtension"), "isEqualToString:", CFSTR("db")) & 1) == 0)
  {
    v38 = xmmword_1E5ABB8A0;
    v39 = *(_OWORD *)off_1E5ABB8B0;
    v40 = 267;
    v15 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected false '%@' in %s at %s:%d. %@"), CFSTR("[[toPath pathExtension] isEqualToString:@\"db\"]"), "BOOL IMDDatabaseCopy(NSString *, NSString *, NSError **)", IMFileLocationTrimFileName(), 267, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v16 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v16)
    {
      v16(v15);
    }
    else if (IMOSLoggingEnabled())
    {
      v17 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v15;
        _os_log_impl(&dword_1ABB60000, v17, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a3)
    *a3 = 0;
  v18 = (void *)objc_msgSend(a1, "stringByExpandingTildeInPath");
  v19 = (void *)objc_msgSend(a2, "stringByExpandingTildeInPath");
  v37 = 0;
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:isDirectory:", v18, &v37) & 1) == 0)
  {
    if (a3)
    {
      v25 = (void *)MEMORY[0x1E0CB35C8];
      v26 = (void *)MEMORY[0x1E0C99D80];
      v27 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Database not found at %@"), v18);
      v28 = objc_msgSend(v26, "dictionaryWithObject:forKey:", v27, *MEMORY[0x1E0CB2D50]);
      v29 = (id)objc_msgSend(v25, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 4, v28);
      v30 = 0;
LABEL_57:
      *a3 = v29;
      return v30;
    }
    return 0;
  }
  *(_QWORD *)buf = 0;
  ppDb = 0;
  v20 = sqlite3_open_v2((const char *)objc_msgSend(v18, "UTF8String"), (sqlite3 **)buf, 1, 0);
  if ((v20 - 100) >= 2 && (_DWORD)v20)
  {
    v35 = IMDCreateCFErrorWithQueryErrorCode(v20, *(sqlite3 **)buf, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unable to open source database at %@ (%d)"), v18, v20));
    if (v35)
      goto LABEL_46;
  }
  else
  {
    v35 = 0;
  }
  v21 = objc_msgSend(v19, "stringByDeletingLastPathComponent");
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:isDirectory:", v21, &v37) & 1) != 0|| (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v21, 1, 0, &v35), !v35))
  {
    v22 = sqlite3_open_v2((const char *)objc_msgSend(v19, "UTF8String"), &ppDb, 6, 0);
    if ((v22 - 100) >= 2 && (_DWORD)v22)
    {
      v35 = IMDCreateCFErrorWithQueryErrorCode(v22, ppDb, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unable to open destination database at %@ (%d)"), v19, v22));
      if (v35)
        goto LABEL_46;
    }
    else
    {
      v35 = 0;
    }
    v23 = sqlite3_file_control(ppDb, 0, 102, *(void **)buf);
    v24 = 0;
    if ((v23 - 100) >= 2 && (_DWORD)v23)
      v24 = IMDCreateCFErrorWithQueryErrorCode(v23, ppDb, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unable to replace database at %@ (%d)"), v19, v23));
    v35 = v24;
  }
LABEL_46:
  if (*(_QWORD *)buf)
  {
    sqlite3_close(*(sqlite3 **)buf);
    *(_QWORD *)buf = 0;
  }
  if (ppDb)
  {
    sqlite3_close(ppDb);
    ppDb = 0;
  }
  v31 = v35;
  v30 = v35 == 0;
  if (a3 && v35)
  {
    if (*a3)
    {
      v38 = xmmword_1E5ABB8C8;
      v39 = *(_OWORD *)off_1E5ABB8D8;
      v40 = 59;
      v32 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected not nil '%@' in %s at %s:%d. %@"), CFSTR("*outError"), "BOOL IMDSetOutError(NSError **, NSError *)", IMFileLocationTrimFileName(), 59, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("outError is already pointing at an error, this could be a leak")));
      v33 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
      if (v33)
        v33(v32);
      else
        _IMWarn();
    }
    v29 = v31;
    goto LABEL_57;
  }
  return v30;
}

uint64_t IMDDatabaseDelete(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  v14[0] = a1;
  v14[1] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-shm"), a1);
  v14[2] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-wal"), a1);
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v14, 3);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v6);
        if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", v7))objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "removeItemAtPath:error:", v7, 0);
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  return 1;
}

uint64_t IMDSqlOperationGetError(uint64_t result, _QWORD *a2)
{
  void *v2;

  if (result)
  {
    v2 = *(void **)(result + 168);
    if (v2)
    {
      if (a2)
        *a2 = v2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL IMDSqlOperationRunCountQuery(uint64_t a1, const __CFString *a2, sqlite3_int64 *a3)
{
  _BYTE v6[24];

  *a3 = 0;
  _IMDSqlOperationBeginQuery(a1, a2);
  if (IMDSqlOperationHasRows(a1))
  {
    IMDSqlOperationColumnByIndex(a1, 0, (uint64_t)v6);
    *a3 = IMDInt64FromSqlColumn((uint64_t)v6);
  }
  return IMDSqlOperationFinishQuery(a1);
}

uint64_t IMDDatabaseIndexes()
{
  if (qword_1EEC405D8 != -1)
    dispatch_once(&qword_1EEC405D8, &unk_1E5AAF2C8);
  return qword_1EEC405D0;
}

uint64_t sub_1ABBF753C()
{
  uint64_t v0;
  const __CFString *v1;
  uint64_t v2;
  uint64_t result;

  v0 = 0;
  v1 = CFSTR("chat_message_join_idx_message_id_only");
  qword_1EEC405D0 = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
  do
  {
    v2 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("CREATE INDEX IF NOT EXISTS %@ ON %@;"),
           v1,
           off_1E5ABB8F0[v0 + 1]);
    result = objc_msgSend((id)qword_1EEC405D0, "setObject:forKey:", v2, v1);
    v1 = off_1E5ABB8F0[v0 + 2];
    v0 += 2;
  }
  while (v0 != 64);
  return result;
}

BOOL IMDCreateIndexesWithOperation(uint64_t a1, int a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  NSObject *v12;
  _BOOL8 result;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t v20[128];
  uint8_t buf[4];
  uint64_t v22;
  _BYTE v23[32];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    *(_OWORD *)v23 = xmmword_1E5ABBB00;
    *(_OWORD *)&v23[16] = *(_OWORD *)off_1E5ABBB10;
    v24 = 97;
    v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("operation"), "BOOL IMDCreateIndexesWithOperation(IMDSqlOperation *, BOOL)", IMFileLocationTrimFileName(), 97, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v22 = v4;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (qword_1EEC405D8 != -1)
    dispatch_once(&qword_1EEC405D8, &unk_1E5AAF2C8);
  v7 = (void *)qword_1EEC405D0;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = objc_msgSend((id)qword_1EEC405D0, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v17;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v17 != v9)
          objc_enumerationMutation(v7);
        v11 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i);
        if (!_IMDSqlOperationRunQuery(a1, (CFStringRef)objc_msgSend(v7, "objectForKey:", v11), 0, 0))
        {
          v14 = IMLogHandleForCategory();
          result = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
          if (result)
          {
            v15 = IMDSqlOperationErrorDescription(a1);
            *(_DWORD *)v23 = 138412546;
            *(_QWORD *)&v23[4] = v11;
            *(_WORD *)&v23[12] = 2112;
            *(_QWORD *)&v23[14] = v15;
            _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "Create index failed: %@: %@", v23, 0x16u);
            return 0;
          }
          return result;
        }
        if (a2)
        {
          v12 = IMLogHandleForCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v23 = 138412290;
            *(_QWORD *)&v23[4] = v11;
            _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "Created index ok: %@", v23, 0xCu);
          }
        }
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v8)
        continue;
      break;
    }
  }
  return 1;
}

BOOL IMDCreateIndexes(uint64_t a1, char a2)
{
  _QWORD v3[5];
  char v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABBF7958;
  v3[3] = &unk_1E5AB73F8;
  v4 = a2;
  v3[4] = a1;
  return IMDRunSqlOperation((uint64_t)v3);
}

uint64_t sub_1ABBF7958(uint64_t a1, uint64_t a2)
{
  IMDCreateIndexesWithOperation(a2, *(unsigned __int8 *)(a1 + 40));
  return IMDSqlOperationGetError(a2, *(_QWORD **)(a1 + 32));
}

BOOL IMDDropAllIndexesWithOperation(uint64_t a1, int a2)
{
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[6];
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = sub_1ABBF7BF0;
  v17[3] = &unk_1E5AB2098;
  v17[4] = v4;
  v17[5] = a1;
  _IMDSqlOperationRunQuery(a1, CFSTR("SELECT name, sql FROM sqlite_master WHERE type = 'index'"), 0, (uint64_t)v17);
  if (!*(_QWORD *)(a1 + 168))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v22, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v14;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v14 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
          if (!_IMDSqlOperationRunQuery(a1, (CFStringRef)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("DROP INDEX %@"), v9), 0, 0))
          {
            v11 = IMLogHandleForCategory();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
            {
              v12 = IMDSqlOperationErrorDescription(a1);
              *(_DWORD *)buf = 138412546;
              v19 = v9;
              v20 = 2112;
              v21 = v12;
              _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "Dropped index failed: %@: %@", buf, 0x16u);
            }
            return *(_QWORD *)(a1 + 168) == 0;
          }
          if (a2)
          {
            v10 = IMLogHandleForCategory();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              v19 = v9;
              _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "Dropped index: %@", buf, 0xCu);
            }
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v22, 16);
        if (v6)
          continue;
        break;
      }
    }
  }
  return *(_QWORD *)(a1 + 168) == 0;
}

BOOL sub_1ABBF7BF0(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  uint64_t v21;

  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v16 = 0;
      v17 = &v16;
      v18 = 0x3052000000;
      v19 = sub_1ABBF7D7C;
      v20 = sub_1ABBF7D8C;
      v21 = 0;
      v10 = 0;
      v11 = &v10;
      v12 = 0x3052000000;
      v13 = sub_1ABBF7D7C;
      v14 = sub_1ABBF7D8C;
      v15 = 0;
      v4 = *(_QWORD *)(a1 + 40);
      v9[0] = v3;
      v9[1] = 3221225472;
      v9[2] = sub_1ABBF7D98;
      v9[3] = &unk_1E5AB2DE0;
      v9[4] = &v16;
      v9[5] = &v10;
      IMDSqlOperationIterateRow(v4, (uint64_t)v9);
      v5 = (void *)v11[5];
      if (v5)
      {
        if (objc_msgSend(v5, "length"))
        {
          objc_msgSend((id)v17[5], "rangeOfString:", CFSTR("sqlite_autoindex"));
          if (!v6)
            objc_msgSend(*(id *)(a1 + 32), "addObject:", v17[5]);
        }
      }
      v7 = (const void *)v17[5];
      if (v7)
      {
        CFRelease(v7);
        v17[5] = 0;
      }
      v8 = (const void *)v11[5];
      if (v8)
      {
        CFRelease(v8);
        v11[5] = 0;
      }
      _Block_object_dispose(&v10, 8);
      _Block_object_dispose(&v16, 8);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1ABBF7D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBF7D7C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1ABBF7D8C(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_1ABBF7D98(uint64_t a1, __int128 *a2)
{
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  const char *v6;
  CFTypeRef v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  v4 = IMDStringFromSqlColumn((uint64_t)&v9);
  if (v4)
  {
    v5 = v4;
    v6 = (const char *)*((_QWORD *)a2 + 1);
    if (!v6)
    {
      v6 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *((_DWORD *)a2 + 4));
      *((_QWORD *)a2 + 1) = v6;
    }
    if (!strncmp(v6, "name", 0x100uLL))
    {
      v7 = CFRetain(v5);
      v8 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      if (!v6)
      {
        v6 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *((_DWORD *)a2 + 4));
        *((_QWORD *)a2 + 1) = v6;
      }
      if (strncmp(v6, "sql", 0x100uLL))
        goto LABEL_11;
      v7 = CFRetain(v5);
      v8 = *(_QWORD *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 40) = v7;
LABEL_11:
    CFRelease(v5);
  }
}

BOOL IMDDropAllIndexes(uint64_t a1, char a2)
{
  _QWORD v3[5];
  char v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABBF7ED4;
  v3[3] = &unk_1E5AB73F8;
  v4 = a2;
  v3[4] = a1;
  return IMDRunSqlOperation((uint64_t)v3);
}

uint64_t sub_1ABBF7ED4(uint64_t a1, uint64_t a2)
{
  IMDDropAllIndexesWithOperation(a2, *(unsigned __int8 *)(a1 + 40));
  return IMDSqlOperationGetError(a2, *(_QWORD **)(a1 + 32));
}

BOOL IMDDropUnknownIndexesWithOperation(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[6];
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = sub_1ABBF819C;
  v19[3] = &unk_1E5AB2098;
  v19[4] = v4;
  v19[5] = a1;
  _IMDSqlOperationRunQuery(a1, CFSTR("SELECT name FROM sqlite_master WHERE type = 'index';"), 0, (uint64_t)v19);
  if (qword_1EEC405D8 != -1)
    dispatch_once(&qword_1EEC405D8, &unk_1E5AAF2C8);
  v5 = (void *)qword_1EEC405D0;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v24, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v16 != v8)
          objc_enumerationMutation(v4);
        v10 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * i);
        if (!objc_msgSend(v5, "objectForKey:", v10))
        {
          if (!_IMDSqlOperationRunQuery(a1, (CFStringRef)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("DROP INDEX %@"), v10), 0, 0))
          {
            v12 = IMLogHandleForCategory();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
            {
              v13 = IMDSqlOperationErrorDescription(a1);
              *(_DWORD *)buf = 138412546;
              v21 = v10;
              v22 = 2112;
              v23 = v13;
              _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "Dropping unknown index failed: %@: %@", buf, 0x16u);
            }
            return *(_QWORD *)(a1 + 168) == 0;
          }
          if (a2)
          {
            v11 = IMLogHandleForCategory();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              v21 = v10;
              _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "Dropped unknown index: %@", buf, 0xCu);
            }
          }
        }
      }
      v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v24, 16);
      if (v7)
        continue;
      break;
    }
  }
  return *(_QWORD *)(a1 + 168) == 0;
}

BOOL sub_1ABBF819C(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      v5[2] = sub_1ABBF8224;
      v5[3] = &unk_1E5AB7420;
      v4 = *(_QWORD *)(a1 + 40);
      v5[4] = *(_QWORD *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1ABBF8224(uint64_t a1, __int128 *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v3 = (unsigned __int8 *)IMDStringFromSqlColumn((uint64_t)&v6);
  if (v3)
  {
    v4 = v3;
    if (objc_msgSend(v3, "length"))
    {
      objc_msgSend(v4, "rangeOfString:", CFSTR("sqlite_autoindex"));
      if (!v5)
        objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
    }
    CFRelease(v4);
  }
}

BOOL IMDDropUnknownIndexes(uint64_t a1, char a2)
{
  _QWORD v3[5];
  char v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABBF82EC;
  v3[3] = &unk_1E5AB73F8;
  v4 = a2;
  v3[4] = a1;
  return IMDRunSqlOperation((uint64_t)v3);
}

uint64_t sub_1ABBF82EC(uint64_t a1, uint64_t a2)
{
  IMDDropUnknownIndexesWithOperation(a2, *(unsigned __int8 *)(a1 + 40));
  return IMDSqlOperationGetError(a2, *(_QWORD **)(a1 + 32));
}

void *sub_1ABBF8320(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)objc_msgSend((id)objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("IF NOT EXISTS"), &stru_1E5AC1D70), "stringByReplacingOccurrencesOfString:withString:", CFSTR(";"),
                 &stru_1E5AC1D70);
  objc_msgSend(v1, "rangeOfString:", CFSTR("  "));
  if (v2)
  {
    do
    {
      v1 = (void *)objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("  "), CFSTR(" "));
      objc_msgSend(v1, "rangeOfString:", CFSTR("  "));
    }
    while (v3);
  }
  return v1;
}

BOOL IMDConfirmIndexesCreatedAsExpected(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  __CFString *v11;
  __CFString *v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  void *v19;
  const __CFString *v20;
  __CFString *v21;
  __CFString *v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[6];
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = sub_1ABBF86A4;
  v32[3] = &unk_1E5AB2E08;
  v32[4] = v2;
  v32[5] = a1;
  IMDRunSqlOperation((uint64_t)v32);
  if (qword_1EEC405D8 != -1)
    dispatch_once(&qword_1EEC405D8, &unk_1E5AAF2C8);
  v3 = (void *)qword_1EEC405D0;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v4 = objc_msgSend((id)qword_1EEC405D0, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v29 != v7)
          objc_enumerationMutation(v3);
        v9 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * i);
        v10 = (void *)objc_msgSend(v3, "objectForKey:", v9);
        if (v10)
          v11 = (__CFString *)sub_1ABBF8320(v10);
        else
          v11 = 0;
        v12 = (__CFString *)objc_msgSend(v2, "objectForKey:", v9);
        if (v12)
          v12 = (__CFString *)sub_1ABBF8320(v12);
        if (v12)
          v13 = v12;
        else
          v13 = CFSTR("NIL");
        if (!v11)
          v11 = CFSTR("NIL");
        if ((-[__CFString isEqualToString:](v11, "isEqualToString:", v13) & 1) == 0)
        {
          NSLog(CFSTR("expected: %@:%@"), v9, v11);
          NSLog(CFSTR("  actual: %@:%@"), v9, v13);
          v6 = 1;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v14 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v25;
    do
    {
      for (j = 0; j != v15; ++j)
      {
        if (*(_QWORD *)v25 != v16)
          objc_enumerationMutation(v2);
        v18 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * j);
        v19 = (void *)objc_msgSend(v2, "objectForKey:", v18);
        if (v19)
          v20 = (const __CFString *)sub_1ABBF8320(v19);
        else
          v20 = 0;
        v21 = (__CFString *)objc_msgSend(v3, "objectForKey:", v18);
        if (v21)
          v21 = (__CFString *)sub_1ABBF8320(v21);
        if (!v20)
          v20 = &stru_1E5AC1D70;
        if (v21)
          v22 = v21;
        else
          v22 = &stru_1E5AC1D70;
        if ((-[__CFString isEqualToString:](v22, "isEqualToString:", v20) & 1) == 0)
        {
          NSLog(CFSTR("expected: %@:%@"), v18, v22);
          NSLog(CFSTR("  actual: %@:%@"), v18, v20);
          v6 = 1;
        }
      }
      v15 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
    }
    while (v15);
  }
  return (v6 & 1) == 0;
}

BOOL sub_1ABBF86A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[7];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1ABBF8714;
  v4[3] = &unk_1E5AB6100;
  v2 = *(_QWORD *)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v4[5] = a2;
  v4[6] = v2;
  return _IMDSqlOperationRunQuery(a2, CFSTR("SELECT name, sql FROM sqlite_master WHERE type = 'index';"),
           0,
           (uint64_t)v4);
}

uint64_t sub_1ABBF8714(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  uint64_t v19;

  if (IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40)))
  {
    v2 = MEMORY[0x1E0C809B0];
    do
    {
      v14 = 0;
      v15 = &v14;
      v16 = 0x3052000000;
      v17 = sub_1ABBF7D7C;
      v18 = sub_1ABBF7D8C;
      v19 = 0;
      v8 = 0;
      v9 = &v8;
      v10 = 0x3052000000;
      v11 = sub_1ABBF7D7C;
      v12 = sub_1ABBF7D8C;
      v13 = 0;
      v3 = *(_QWORD *)(a1 + 40);
      v7[0] = v2;
      v7[1] = 3221225472;
      v7[2] = sub_1ABBF8878;
      v7[3] = &unk_1E5AB2DE0;
      v7[4] = &v14;
      v7[5] = &v8;
      IMDSqlOperationIterateRow(v3, (uint64_t)v7);
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v9[5], v15[5]);
      v4 = (const void *)v15[5];
      if (v4)
      {
        CFRelease(v4);
        v15[5] = 0;
      }
      v5 = (const void *)v9[5];
      if (v5)
      {
        CFRelease(v5);
        v9[5] = 0;
      }
      _Block_object_dispose(&v8, 8);
      _Block_object_dispose(&v14, 8);
    }
    while (IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40)));
  }
  return IMDSqlOperationGetError(*(_QWORD *)(a1 + 40), *(_QWORD **)(a1 + 48));
}

void sub_1ABBF8854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1ABBF8878(uint64_t a1, __int128 *a2)
{
  const unsigned __int8 *v4;
  const __CFString *v5;
  const char *v6;
  CFTypeRef v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  v4 = IMDStringFromSqlColumn((uint64_t)&v9);
  if (v4)
    v5 = (const __CFString *)v4;
  else
    v5 = &stru_1E5AC1D70;
  v6 = (const char *)*((_QWORD *)a2 + 1);
  if (!v6)
  {
    v6 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *((_DWORD *)a2 + 4));
    *((_QWORD *)a2 + 1) = v6;
  }
  if (!strncmp(v6, "name", 0x100uLL))
  {
    v7 = CFRetain(v5);
    v8 = *(_QWORD *)(a1 + 32);
    goto LABEL_12;
  }
  if (!v6)
  {
    v6 = sqlite3_column_name(**(sqlite3_stmt ***)a2, *((_DWORD *)a2 + 4));
    *((_QWORD *)a2 + 1) = v6;
  }
  if (!strncmp(v6, "sql", 0x100uLL))
  {
    v7 = CFRetain(v5);
    v8 = *(_QWORD *)(a1 + 40);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 40) = v7;
  }
  CFRelease(v5);
}

uint64_t sub_1ABBF8968()
{
  if ((IMGetCachedDomainBoolForKeyWithDefaultValue() & 1) != 0)
    return 4;
  if ((IMGetCachedDomainBoolForKeyWithDefaultValue() & 1) != 0)
    return 3;
  if ((IMGetCachedDomainBoolForKeyWithDefaultValue() & 1) != 0)
    return 2;
  return IMGetCachedDomainBoolForKeyWithDefaultValue();
}

uint64_t sub_1ABBF8A00()
{
  return IMGetDomainIntForKey();
}

uint64_t sub_1ABBF8A14(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  IMGetCachedDomainValueForKey();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
    v4 = objc_msgSend(v2, "unsignedLongLongValue");
  else
    v4 = objc_msgSend(a1, "_readInitialReindexRowID");
  v5 = v4;

  return v5;
}

uint64_t sub_1ABBF8A70()
{
  return IMGetDomainIntForKey();
}

uint64_t sub_1ABBF8A84(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  IMGetCachedDomainValueForKey();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    v4 = objc_msgSend(v2, "unsignedLongLongValue");
  }
  else
  {
    v5 = objc_msgSend(a1, "_readInitialReindexRowID");
    v4 = v5 - objc_msgSend(a1, "_readLastIndexedRowID");
  }

  return v4;
}

uint64_t sub_1ABBF8AF8(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  IMGetCachedDomainValueForKey();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
    v4 = objc_msgSend(v2, "unsignedLongLongValue");
  else
    v4 = objc_msgSend(a1, "_readIndexedMessagesWithFallback");
  v5 = v4;

  return v5;
}

id sub_1ABBF8B54(void *a1)
{
  id v1;
  void *v2;
  objc_super v4;

  v4.receiver = a1;
  v4.super_class = (Class)&off_1EEC4E680;
  v1 = objc_msgSendSuper2(&v4, sel_init);
  if (v1)
  {
    objc_msgSend(v1, "setLastIndexedRowID:", objc_msgSend(MEMORY[0x1E0D39B00], "_readLastIndexedRowID"));
    objc_msgSend(v1, "setInitialReindexRowID:", objc_msgSend(MEMORY[0x1E0D39B00], "_readInitialReindexRowID"));
    objc_msgSend(v1, "setIndexRevision:", IMGetDomainIntForKey());
    objc_msgSend(v1, "setIndexVersion:", objc_msgSend(MEMORY[0x1E0D39B00], "_readCurrentIndexVersionFromDefaults"));
    objc_msgSend(v1, "setInitialIndexedMessages:", objc_msgSend(MEMORY[0x1E0D39B00], "_readIndexedMessagesWithFallback"));
    objc_msgSend(v1, "setInitialTotalMessages:", objc_msgSend(MEMORY[0x1E0D39B00], "_readTotalMessagesWithFallback"));
    objc_msgSend(v1, "setProcessedMessageRecords:", objc_msgSend(MEMORY[0x1E0D39B00], "_readProcessedMessageRecordsWithFallback"));
    IMGetCachedDomainValueForKey();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "setIndexBeginDate:", v2);

  }
  return v1;
}

void sub_1ABBF8C6C(void *a1)
{
  void *v2;
  id v3;

  objc_msgSend(a1, "lastIndexedRowID");
  IMSetDomainIntForKey();
  objc_msgSend(a1, "initialReindexRowID");
  IMSetDomainIntForKey();
  objc_msgSend(a1, "indexRevision");
  IMSetDomainIntForKey();
  if (objc_msgSend(a1, "indexVersion") < 1)
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("IMCSBypassIndexVersionCheckV%lld"), objc_msgSend(MEMORY[0x1E0D39B00], "_latestIndexVersion"));
  else
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("IMCSBypassIndexVersionCheckV%lld"), objc_msgSend(a1, "indexVersion"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  IMSetDomainBoolForKey();

  objc_msgSend(a1, "initialIndexedMessages");
  IMSetDomainIntForKey();
  objc_msgSend(a1, "initialTotalMessages");
  IMSetDomainIntForKey();
  objc_msgSend(a1, "processedMessageRecords");
  IMSetDomainIntForKey();
  objc_msgSend(a1, "indexBeginDate");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  IMSetDomainValueForKey();

}

uint64_t sub_1ABBF8DFC()
{
  return IMGetCachedDomainIntForKeyWithDefaultValue();
}

uint64_t sub_1ABBF8E14()
{
  void *v0;
  unsigned int v1;

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isSpotlightClientStateEnabled");

  return v1;
}

uint64_t sub_1ABBF8E50(void *a1)
{
  objc_msgSend(a1, "_currentClientStateStorageMechanism");
  return IMSetDomainIntForKey();
}

BOOL sub_1ABBF8E78(void *a1)
{
  return objc_msgSend(a1, "_currentClientStateStorageMechanism") == 1
      && objc_msgSend(a1, "_lastClientStateStorageMechanism") == 0;
}

BOOL sub_1ABBF8EB8(void *a1)
{
  return !objc_msgSend(a1, "_currentClientStateStorageMechanism")
      && objc_msgSend(a1, "_lastClientStateStorageMechanism") == 1;
}

void sub_1ABBF9160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABBF9188(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABBF9198(uint64_t a1)
{

}

void sub_1ABBF91A0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

xpc_object_t IMDSqlOperationGetXpcRows(uint64_t a1)
{
  xpc_object_t v2;
  NSObject *v3;
  xpc_object_t XPCRow;
  void *v5;
  NSObject *v6;

  if (!a1)
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC617B4();
    return 0;
  }
  v2 = xpc_array_create(0, 0);
  if (!v2)
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC61850();
  }
  while (IMDSqlOperationHasRows(a1))
  {
    if (v2)
    {
      XPCRow = IMDSqlStatementGetXPCRow((sqlite3_stmt **)(a1 + 32));
      if (XPCRow)
      {
        v5 = XPCRow;
        xpc_array_append_value(v2, XPCRow);
        xpc_release(v5);
      }
    }
  }
  if (v2 && *(_QWORD *)(a1 + 168))
  {
    xpc_release(v2);
    return 0;
  }
  return v2;
}

xpc_object_t IMDSqlOperationGetXpcRowsForQuery(const __CFString *a1)
{
  xpc_object_t XpcRows;
  NSObject *v3;
  _OWORD v5[10];
  __int128 v6;

  if (a1)
  {
    v6 = 0u;
    memset(v5, 0, sizeof(v5));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v5);
    _IMDSqlOperationBeginQuery((uint64_t)v5, a1);
    XpcRows = IMDSqlOperationGetXpcRows((uint64_t)v5);
    IMDSqlOperationFinishQuery((uint64_t)v5);
    if (*((_QWORD *)&v6 + 1) && XpcRows)
    {
      xpc_release(XpcRows);
      XpcRows = 0;
    }
    IMDSqlOperationRelease((uint64_t)v5, 0);
  }
  else
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1ABC618EC();
    return 0;
  }
  return XpcRows;
}

void __syncXPCIMDMessageStoreSave_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 0);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageStoreIsFull_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 1);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageStoreSchemaVersion_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 2);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageStoreSchema_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 3);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentRecordCreate_IPCAction(void (**a1)(void), uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, int64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,int64_t a21,uint64_t a22,uint64_t a23)
{
  xpc_object_t v30;
  void *v31;

  v30 = xpc_dictionary_create(0, 0, 0);
  if (v30)
  {
    v31 = v30;
    xpc_dictionary_set_int64(v30, "__xpc__event_code__", 4);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      xpc_dictionary_set_int64(v31, "createdDate", a3);
    if (a4)
      xpc_dictionary_set_int64(v31, "startDate", a4);
    if (a5)
      IMInsertNSStringsToXPCDictionary();
    if (a6)
      IMInsertNSStringsToXPCDictionary();
    if (a7)
      IMInsertNSStringsToXPCDictionary();
    if (a8)
      IMInsertNSStringsToXPCDictionary();
    if (a9)
      xpc_dictionary_set_int64(v31, "transferState", a9);
    if (a10)
      xpc_dictionary_set_BOOL(v31, "isOutgoing", 1);
    if (a12)
      IMInsertDictionariesToXPCDictionary();
    if (a14)
      IMInsertDictionariesToXPCDictionary();
    if (a13)
      xpc_dictionary_set_BOOL(v31, "isSticker", 1);
    if (a15)
      IMInsertDictionariesToXPCDictionary();
    if (a16)
      xpc_dictionary_set_BOOL(v31, "hideAttachment", 1);
    if (a21)
      xpc_dictionary_set_int64(v31, "isCommSafetySensitive", a21);
    if (a22)
      IMInsertNSStringsToXPCDictionary();
    if (a23)
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v31, "totalBytes", a11);
    xpc_dictionary_set_int64(v31, "cloudKitSyncState", a17);
    if (a18)
      IMInsertDatasToXPCDictionary();
    if (a19)
      IMInsertNSStringsToXPCDictionary();
    if (a20)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v31, a1, 0);
    xpc_release(v31);
  }
}

void __syncXPCIMDAttachmentRecordRIDForGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 5);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordCopyAttachmentForGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 6);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    IMInsertBoolsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordCopyStickerAttachmentForStickerCachePath_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 7);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordDoesStickerPathHaveAttachments_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 11);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordDeleteAttachmentForGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 8);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordDeleteAttachmentsOlderThanDays_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 9);
    xpc_dictionary_set_int64(v5, "days", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordEstimateSpaceTakenByAttachmentsOlderThanDays_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 182);
    xpc_dictionary_set_int64(v5, "days", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordFindLargestConversations_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 183);
    xpc_dictionary_set_int64(v5, "options", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordFindLargestAttachmentGUIDsWithLimitAndOffset_IPCAction(void (**a1)(void), void *a2, int64_t a3, int64_t a4, int64_t a5)
{
  xpc_object_t v10;
  void *v11;
  const char *v12;

  v10 = xpc_dictionary_create(0, 0, 0);
  if (v10)
  {
    v11 = v10;
    xpc_dictionary_set_int64(v10, "__xpc__event_code__", 184);
    if (a2)
    {
      v12 = (const char *)objc_msgSend(a2, "cStringUsingEncoding:", 4);
      if (v12)
        xpc_dictionary_set_string(v11, "attachmentClass", v12);
    }
    xpc_dictionary_set_int64(v11, "options", a3);
    xpc_dictionary_set_int64(v11, "limit", a4);
    xpc_dictionary_set_int64(v11, "offset", a5);
    __XPCIMDMessageStoreSendXPCMessage(v11, a1, 0);
    xpc_release(v11);
  }
}

void __syncXPCIMDAttachmentRecordSpaceTakenByAttachmentClass_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 185);
    xpc_dictionary_set_int64(v5, "options", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordCopyRecentFilenames_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 12);
    if (a2)
      xpc_dictionary_set_int64(v5, "numRecents", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordGetPurgeableDiskSpace_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 20);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentRecordGetNonSyncedAttachmentDiskSpace_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 21);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentRecordCopyAttachmentsToMetricForDiskSpace_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 22);
    xpc_dictionary_set_int64(v5, "bytesToFreeUp", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordCopyMostRecentAttachmentsInMostRecentChats_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 23);
    xpc_dictionary_set_int64(v7, "chatLimit", a2);
    xpc_dictionary_set_int64(v7, "attachmentLimit", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentUpdateAttachmentFileSizeWithRowIDGreaterThanWatermark_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 24);
    xpc_dictionary_set_int64(v5, "watermark", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordCopyAttachmentsToPurgeForDiskSpace_IPCAction(void (**a1)(void), int64_t a2, int a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 25);
    xpc_dictionary_set_int64(v7, "bytesToFreeUp", a2);
    xpc_dictionary_set_int64(v7, "startingOffset", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordCopyAttachmentsForQueryWithLimit_IPCAction(void (**a1)(void), int64_t a2, void *a3, int64_t a4)
{
  xpc_object_t v8;
  void *v9;

  v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 13);
    if (a2)
      xpc_dictionary_set_int64(v9, "queryType", a2);
    if (a3)
      xpc_dictionary_set_int64(v9, "afterRow", objc_msgSend(a3, "longLongValue"));
    if (a4)
      xpc_dictionary_set_int64(v9, "limit", a4);
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDAttachmentRecordMarkAttachmentWithROWIDWithSyncState_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 14);
    xpc_dictionary_set_int64(v7, "rowid", a2);
    xpc_dictionary_set_int64(v7, "syncState", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordMarkAttachmentWithROWIDAsSyncedWithCloudKit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 15);
    xpc_dictionary_set_int64(v5, "rowid", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordMarkAllAttachmentsAsNeedingCloudKitSync_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 16);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentResetAllAttachmentsInFailedCloudDownloadState_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 17);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentRecordCopyMessageForAttachmentGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 18);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordUpdateAttachmentGUIDWithGUID_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 19);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordDeleteAttachmentPreviewsOlderThan_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 26);
    if (a2)
      xpc_dictionary_set_int64(v5, "numRecents", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDDatabaseClean_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 208);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentRecordCopyAttachmentGUIDsAndPathsForChatIdentifiersOnServices_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 27);
    if (a2)
      IMInsertArraysToXPCDictionary();
    if (a3)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordCopyPurgedAttachmentsForChatIdentifiersOnServices_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 28);
    if (a2)
      IMInsertArraysToXPCDictionary();
    if (a3)
      IMInsertArraysToXPCDictionary();
    IMInsertIntsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordCopyPurgedAttachmentsCountForChatIdentifiersOnServices_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 29);
    if (a2)
      IMInsertArraysToXPCDictionary();
    if (a3)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordCopyStickers_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 30);
    if (a2)
      xpc_dictionary_set_int64(v5, "numRecents", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordDoesAttachmentWithGUIDExist_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 10);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDAttachmentRecordBulkUpdate_IPCAction(void (**a1)(void), uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, int64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,int64_t a21)
{
  xpc_object_t v28;
  void *v29;

  v28 = xpc_dictionary_create(0, 0, 0);
  if (v28)
  {
    v29 = v28;
    xpc_dictionary_set_int64(v28, "__xpc__event_code__", 31);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      xpc_dictionary_set_int64(v29, "createdDate", a3);
    if (a4)
      xpc_dictionary_set_int64(v29, "startDate", a4);
    if (a5)
      IMInsertNSStringsToXPCDictionary();
    if (a6)
      IMInsertNSStringsToXPCDictionary();
    if (a7)
      IMInsertNSStringsToXPCDictionary();
    if (a8)
      IMInsertNSStringsToXPCDictionary();
    if (a9)
      xpc_dictionary_set_int64(v29, "transferState", a9);
    if (a10)
      xpc_dictionary_set_BOOL(v29, "isOutgoing", 1);
    if (a12)
      IMInsertDictionariesToXPCDictionary();
    if (a11)
      xpc_dictionary_set_int64(v29, "totalBytes", a11);
    if (a13)
      xpc_dictionary_set_BOOL(v29, "isSticker", 1);
    if (a14)
      IMInsertDictionariesToXPCDictionary();
    if (a15)
      IMInsertDictionariesToXPCDictionary();
    if (a16)
      xpc_dictionary_set_BOOL(v29, "hideAttachment", 1);
    if (a21)
      xpc_dictionary_set_int64(v29, "isCommSafetySensitive", a21);
    xpc_dictionary_set_int64(v29, "cloudKitSyncState", a17);
    if (a18)
      IMInsertDatasToXPCDictionary();
    if (a19)
      IMInsertNSStringsToXPCDictionary();
    if (a20)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v29, a1, 0);
    xpc_release(v29);
  }
}

void __asyncXPCIMDCNRecordIDAndHistoryTokenForAliases_IPAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 36);
    if (a2)
      IMInsertDictionariesToXPCDictionary();
    if (a3)
      IMInsertDatasToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 1);
    xpc_release(v7);
  }
}

void __syncXPCIMDCNRecordIDAndHistoryTokenForAliases_IPAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 35);
    if (a2)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDCNRecordIDForAliases_IPAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 37);
    if (a2)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDIsFavoritedContact_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 38);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDCNGivenNameAndBirthdayForHandleID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 243);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDSaveWallpaperForCNContact_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 242);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDHandleRecordCreate_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  xpc_object_t v12;
  void *v13;

  v12 = xpc_dictionary_create(0, 0, 0);
  if (v12)
  {
    v13 = v12;
    xpc_dictionary_set_int64(v12, "__xpc__event_code__", 39);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    if (a4)
      IMInsertNSStringsToXPCDictionary();
    if (a5)
      IMInsertNSStringsToXPCDictionary();
    if (a6)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v13, a1, 0);
    xpc_release(v13);
  }
}

void __syncXPCIMDHandleRecordBulkUpdate_IPCAction(void (**a1)(void), int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  xpc_object_t v14;
  void *v15;

  v14 = xpc_dictionary_create(0, 0, 0);
  if (v14)
  {
    v15 = v14;
    xpc_dictionary_set_int64(v14, "__xpc__event_code__", 40);
    if (a2)
      xpc_dictionary_set_int64(v15, "handleID", a2);
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    if (a4)
      IMInsertNSStringsToXPCDictionary();
    if (a5)
      IMInsertNSStringsToXPCDictionary();
    if (a6)
      IMInsertNSStringsToXPCDictionary();
    if (a7)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v15, a1, 0);
    xpc_release(v15);
  }
}

void __syncXPCIMDHandleRecordCopyHandleForIDOnService_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 41);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordUnassociateMessageWithGUIDFromAttachmentWithGUID_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 42);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 43);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesForAssociatedGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 45);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesForGUIDs_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 44);
    if (a2)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesBetweenRowIDs_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 46);
    if (a2)
      xpc_dictionary_set_int64(v7, "lowerRowID", a2);
    if (a3)
      xpc_dictionary_set_int64(v7, "maxRowID", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordCopyMessageForGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 47);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyLastReadMessageForChatIdentifier_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 169);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessageForRowID_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 51);
    if (a2)
      xpc_dictionary_set_int64(v5, "rowID", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesForRowIDs_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 52);
    if (a2)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyNewMessagesForKnownRowIDs_IPCAction(void (**a1)(void), void *a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 53);
    if (objc_msgSend(a2, "count"))
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyLastReceivedMessage_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 49);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordCopyLastReceivedMessageLimit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 50);
    if (a2)
      xpc_dictionary_set_int64(v5, "limit", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordDeleteMessagesForGUIDs_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 54);
    if (a2)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordDeleteMessagesOlderThanDays_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 55);
    if (a2)
      xpc_dictionary_set_int64(v5, "days", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesWithRoomnameOnServiceLimit_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, int64_t a4)
{
  xpc_object_t v8;
  void *v9;

  v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 56);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    if (a4)
      xpc_dictionary_set_int64(v9, "limit", a4);
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesWithOptionalThreadIdentifierAndLimit_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int64_t a6, int a7, int a8)
{
  xpc_object_t v16;
  void *v17;

  v16 = xpc_dictionary_create(0, 0, 0);
  if (v16)
  {
    v17 = v16;
    xpc_dictionary_set_int64(v16, "__xpc__event_code__", 57);
    if (a2)
      IMInsertArraysToXPCDictionary();
    if (a3)
      IMInsertArraysToXPCDictionary();
    if (a4)
      IMInsertNSStringsToXPCDictionary();
    if (a5)
      IMInsertNSStringsToXPCDictionary();
    if (a6)
      xpc_dictionary_set_int64(v17, "limit", a6);
    if (a7)
      xpc_dictionary_set_BOOL(v17, "only_messages", 1);
    if (a8)
      xpc_dictionary_set_BOOL(v17, "only_unread", 1);
    __XPCIMDMessageStoreSendXPCMessage(v17, a1, 0);
    xpc_release(v17);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifier_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int64_t a6, int64_t a7)
{
  xpc_object_t v14;
  void *v15;

  v14 = xpc_dictionary_create(0, 0, 0);
  if (v14)
  {
    v15 = v14;
    xpc_dictionary_set_int64(v14, "__xpc__event_code__", 58);
    if (a2)
      IMInsertArraysToXPCDictionary();
    if (a3)
      IMInsertArraysToXPCDictionary();
    if (a4)
      IMInsertNSStringsToXPCDictionary();
    if ((a6 & 0x8000000000000000) == 0)
      xpc_dictionary_set_int64(v15, "numberOfMessagesBefore", a6);
    if ((a7 & 0x8000000000000000) == 0)
      xpc_dictionary_set_int64(v15, "numberOfMessagesAfter", a7);
    if (a5)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v15, a1, 0);
    xpc_release(v15);
  }
}

void __syncXPCIMDMessageRecordCopyFrequentRepliesForChatIdentifiersOnServicesLimit_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, int64_t a4)
{
  xpc_object_t v8;
  void *v9;

  v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 61);
    if (a2)
      IMInsertArraysToXPCDictionary();
    if (a3)
      IMInsertArraysToXPCDictionary();
    if (a4)
      xpc_dictionary_set_int64(v9, "limit", a4);
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDMessageRecordCopyGUIDsForMessagesWithChatIdentifiersOnServices_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 62);
    if (a2)
      IMInsertArraysToXPCDictionary();
    if (a3)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatGetMessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 79);
    if (a2)
      IMInsertArraysToXPCDictionary();
    if (a3)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRemapChatsWithLastAddressedSIMIDToNewLastAddressedIDs_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 81);
    IMInsertNSStringsToXPCDictionary();
    IMInsertNSStringsToXPCDictionary();
    IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatGetMessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 80);
    if (a2)
      IMInsertArraysToXPCDictionary();
    if (a3)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatGetChatsThatContainRecipient_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 64);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServices_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  xpc_object_t v8;
  void *v9;

  v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 63);
    if (a2)
      IMInsertArraysToXPCDictionary();
    if (a3)
      IMInsertArraysToXPCDictionary();
    if (a4)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesWithHandleOnServiceLimit_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, int64_t a4)
{
  xpc_object_t v8;
  void *v9;

  v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 65);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    if (a4)
      xpc_dictionary_set_int64(v9, "limit", a4);
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDMessageRecordCopyMessageMatchingBodyStringWithChatIdentifiersServicesSkippingGUIDs_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, double a9)
{
  xpc_object_t v18;
  void *v19;

  v18 = xpc_dictionary_create(0, 0, 0);
  if (v18)
  {
    v19 = v18;
    xpc_dictionary_set_int64(v18, "__xpc__event_code__", 66);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    if (a4)
      IMInsertArraysToXPCDictionary();
    if (a5)
      IMInsertArraysToXPCDictionary();
    if (a9 != 0.0)
      xpc_dictionary_set_double(v19, "searchAfter", a9);
    if (a7)
      IMInsertArraysToXPCDictionary();
    if (a8)
      IMInsertArraysToXPCDictionary();
    if (a6)
      xpc_dictionary_set_BOOL(v19, "includeFromMe", 1);
    __XPCIMDMessageStoreSendXPCMessage(v19, a1, 0);
    xpc_release(v19);
  }
}

void __syncXPCIMDMessageRecordCopyMessageMatchingBodyStringWithHandleSkippingServicesSkippingGUIDs_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  xpc_object_t v12;
  void *v13;

  v12 = xpc_dictionary_create(0, 0, 0);
  if (v12)
  {
    v13 = v12;
    xpc_dictionary_set_int64(v12, "__xpc__event_code__", 67);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    if (a4)
      IMInsertArraysToXPCDictionary();
    if (a5)
      IMInsertArraysToXPCDictionary();
    if (a6 != 0.0)
      xpc_dictionary_set_double(v13, "searchAfter", a6);
    __XPCIMDMessageStoreSendXPCMessage(v13, a1, 0);
    xpc_release(v13);
  }
}

void __syncXPCIMDMessageRecordCopyMessageMatchingBodyStringWithHandleMatchingServiceMatchingSOSSkippingGUID_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, double a5, uint64_t a6, uint64_t a7)
{
  xpc_object_t v13;
  void *v14;

  v13 = xpc_dictionary_create(0, 0, 0);
  if (v13)
  {
    v14 = v13;
    xpc_dictionary_set_int64(v13, "__xpc__event_code__", 68);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    if (a4)
      IMInsertNSStringsToXPCDictionary();
    IMInsertBoolsToXPCDictionary();
    if (a7)
      IMInsertNSStringsToXPCDictionary();
    if (a5 != 0.0)
      xpc_dictionary_set_double(v14, "searchAfter", a5);
    __XPCIMDMessageStoreSendXPCMessage(v14, a1, 0);
    xpc_release(v14);
  }
}

void __syncXPCIMDMessageRecordCopyMessageWithHandleOnServiceWithReplaceID_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, int64_t a4)
{
  xpc_object_t v8;
  void *v9;

  v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 69);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    if (a4)
      xpc_dictionary_set_int64(v9, "replaceID", a4);
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDMessageRecordCopyUndeliveredOneToOneiMessages_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 75);
    if (a2)
      xpc_dictionary_set_int64(v5, "afterRowID", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyExpiringOrExpiredMessages_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 76);
    if (a2)
      xpc_dictionary_set_int64(v5, "afterRowID", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyUnsentUnfailedMessages_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 77);
    if (a2)
      xpc_dictionary_set_int64(v5, "afterRowID", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessageActionItemsForOriginalMessageGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 78);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCountAllUnreadMessages_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 82);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordCountAllUnreadMessagesForChatGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 83);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCountAllUnreadMessagesForChatRowID_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 84);
    if (a2)
      xpc_dictionary_set_int64(v5, "chatID", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordLastFailedMessageRowID_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 86);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordLastSyncedMessageRowID_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 87);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordLastFailedMessageDate_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 88);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordGetMostRecentMessageDate_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 89);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordGetIndentifierForMessageWithGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 90);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordMaxMessageIDFromChatMessageJoin_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 91);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordMarkMessageGUIDAsDeduplicated_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 93);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordGetMessagesSequenceNumber_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 92);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordMarkFailedAllUnsentUnfailedMessages_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 94);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordDeleteOrphanedMessages_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 95);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordCopyAndMarkAsReadMessagesPriorToGuidMatchingChatGUIDs_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  xpc_object_t v10;
  void *v11;

  v10 = xpc_dictionary_create(0, 0, 0);
  if (v10)
  {
    v11 = v10;
    xpc_dictionary_set_int64(v10, "__xpc__event_code__", 96);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertArraysToXPCDictionary();
    if (a4)
      IMInsertCodableObjectsToXPCDictionary();
    if (a5)
      xpc_dictionary_set_BOOL(v11, "fromMe", 1);
    __XPCIMDMessageStoreSendXPCMessage(v11, a1, 0);
    xpc_release(v11);
  }
}

void __syncXPCIMDMessageRecordCopyAllUnplayedMessageGUIDsForChatGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 97);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 98);
    if (a2)
      xpc_dictionary_set_int64(v7, "limit", a2);
    if (a3)
      xpc_dictionary_set_int64(v7, "rowID", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordCopyUnreadIncomingMessagesWithChatIdentifiersOnServicesToLimitFallbackGUID_IPCAction(void (**a1)(void), int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  xpc_object_t v10;
  void *v11;

  v10 = xpc_dictionary_create(0, 0, 0);
  if (v10)
  {
    v11 = v10;
    xpc_dictionary_set_int64(v10, "__xpc__event_code__", 70);
    if (a2)
      xpc_dictionary_set_int64(v11, "limit", a2);
    if (a3)
      IMInsertArraysToXPCDictionary();
    if (a4)
      IMInsertArraysToXPCDictionary();
    if (a5)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v11, a1, 0);
    xpc_release(v11);
  }
}

void __syncXPCIMDMessageRecordCopyNewestFailedOutgoingMessagesToLimitAfterDate_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 99);
    if (a2)
      xpc_dictionary_set_int64(v7, "limit", a2);
    if (a3)
      xpc_dictionary_set_int64(v7, "date", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesDataDetectionResults_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 100);
    if (a2)
      xpc_dictionary_set_int64(v7, "limit", a2);
    if (a3)
      xpc_dictionary_set_int64(v7, "rowID", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordCopyMostRecentUseageOfAddresses_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 101);
    if (a2)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCreate_IPCAction(void (**a1)(void), uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int64_t a20,uint64_t a21,int64_t a22,int64_t a23,int64_t a24,uint64_t a25,int64_t a26,int64_t a27,uint64_t a28,int64_t a29,int64_t a30,int64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int64_t a35,uint64_t a36,int64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int64_t a49,int64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int64_t a54,int64_t a55)
{
  xpc_object_t v61;
  void *v62;

  v61 = xpc_dictionary_create(0, 0, 0);
  if (v61)
  {
    v62 = v61;
    xpc_dictionary_set_int64(v61, "__xpc__event_code__", 102);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      xpc_dictionary_set_int64(v62, "date", a3);
    if (a4)
      xpc_dictionary_set_int64(v62, "dateRead", a4);
    if (a5)
      xpc_dictionary_set_int64(v62, "dateDelivered", a5);
    if (a6)
      xpc_dictionary_set_int64(v62, "datePlayed", a6);
    if (a7)
      xpc_dictionary_set_int64(v62, "error", a7);
    if (a8)
      xpc_dictionary_set_int64(v62, "type", a8);
    if (a9)
      xpc_dictionary_set_int64(v62, "replaceID", a9);
    if (a10)
      IMInsertCodableObjectsToXPCDictionary();
    if (a11)
      IMInsertNSStringsToXPCDictionary();
    if (a12)
      IMInsertDatasToXPCDictionary();
    if (a13)
      IMInsertNSStringsToXPCDictionary();
    if (a14)
      IMInsertNSStringsToXPCDictionary();
    if (a15)
      IMInsertNSStringsToXPCDictionary();
    if (a16)
      IMInsertNSStringsToXPCDictionary();
    if (a17)
      IMInsertNSStringsToXPCDictionary();
    if (a19)
      IMInsertNSStringsToXPCDictionary();
    if (a18)
      IMInsertNSStringsToXPCDictionary();
    if (a20)
      xpc_dictionary_set_int64(v62, "itemType", a20);
    if (a21)
      IMInsertNSStringsToXPCDictionary();
    if (a22)
      xpc_dictionary_set_int64(v62, "groupActionType", a22);
    if (a23)
      xpc_dictionary_set_int64(v62, "shareStatus", a23);
    if (a24)
      xpc_dictionary_set_int64(v62, "shareDirection", a24);
    if (a25)
      IMInsertNSStringsToXPCDictionary();
    if (a26)
      xpc_dictionary_set_int64(v62, "expireState", a26);
    if (a27)
      xpc_dictionary_set_int64(v62, "messageActionType", a27);
    if (a28)
      IMInsertNSStringsToXPCDictionary();
    if (a29)
      xpc_dictionary_set_int64(v62, "associatedMessageType", a29);
    if (a31)
    {
      xpc_dictionary_set_int64(v62, "associatedMessageRangeLocation", a30);
      xpc_dictionary_set_int64(v62, "associatedMessageRangeLength", a31);
    }
    if (a32)
      IMInsertNSStringsToXPCDictionary();
    if (a33)
      IMInsertDatasToXPCDictionary();
    if (a34)
      IMInsertNSStringsToXPCDictionary();
    if (a35)
      xpc_dictionary_set_int64(v62, "timeExpressiveSendPlayed", a35);
    if (a36)
      IMInsertDatasToXPCDictionary();
    xpc_dictionary_set_int64(v62, "cloudKitSyncState", a37);
    if (a38)
      IMInsertNSStringsToXPCDictionary();
    if (a39)
      IMInsertDatasToXPCDictionary();
    if (a40)
      IMInsertNSStringsToXPCDictionary();
    if (a41)
      IMInsertDictionariesToXPCDictionary();
    if (a42)
      IMInsertNSStringsToXPCDictionary();
    if (a43)
      IMInsertNSStringsToXPCDictionary();
    if (a44)
      xpc_dictionary_set_int64(v62, "sortID", a44);
    if (a45)
      IMInsertNSStringsToXPCDictionary();
    if (a46)
      IMInsertNSStringsToXPCDictionary();
    if (a47)
      IMInsertNSStringsToXPCDictionary();
    if (a48)
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v62, "partCount", a49);
    if (a50)
      xpc_dictionary_set_int64(v62, "dateEdited", a50);
    if (a51)
      IMInsertNSStringsToXPCDictionary();
    if (a52)
      IMInsertNSStringsToXPCDictionary();
    if (a53)
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v62, "scheduleType", a54);
    xpc_dictionary_set_int64(v62, "scheduleState", a55);
    __XPCIMDMessageStoreSendXPCMessage(v62, a1, 0);
    xpc_release(v62);
  }
}

void __syncXPCIMDMessageRecordCopyChats_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 103);
    if (a2)
      xpc_dictionary_set_int64(v5, "messageID", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordChatForMessageGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 104);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyAttachments_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 105);
    if (a2)
      xpc_dictionary_set_int64(v5, "messageID", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordSetHandle_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 106);
    if (a2)
      xpc_dictionary_set_int64(v7, "messageID", a2);
    if (a3)
      xpc_dictionary_set_int64(v7, "handleID", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordCopyHandle_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 107);
    if (a2)
      xpc_dictionary_set_int64(v5, "messageID", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyOtherHandle_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 108);
    if (a2)
      xpc_dictionary_set_int64(v5, "messageID", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordBulkUpdate_IPCAction(void (**a1)(void), int64_t a2, int64_t a3, uint64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int64_t a15, uint64_t a16, int64_t a17, int64_t a18, int64_t a19, int64_t a20,int64_t a21,int64_t a22,uint64_t a23,int64_t a24,int64_t a25,uint64_t a26,int64_t a27,int64_t a28,int64_t a29,uint64_t a30,uint64_t a31,int64_t a32,uint64_t a33,int64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int64_t a45,int64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int64_t a50,int64_t a51)
{
  xpc_object_t v57;
  void *v58;

  v57 = xpc_dictionary_create(0, 0, 0);
  if (v57)
  {
    v58 = v57;
    xpc_dictionary_set_int64(v57, "__xpc__event_code__", 109);
    if (a2)
      xpc_dictionary_set_int64(v58, "messageID", a2);
    if (a3)
      xpc_dictionary_set_int64(v58, "replaceID", a3);
    if (a4)
      IMInsertNSStringsToXPCDictionary();
    if (a5)
      xpc_dictionary_set_int64(v58, "fzDate", a5);
    if (a6)
      xpc_dictionary_set_int64(v58, "fzDateRead", a6);
    if (a7)
      xpc_dictionary_set_int64(v58, "fzDateDelivered", a7);
    if (a8)
      xpc_dictionary_set_int64(v58, "fzDatePlayed", a8);
    if (a9)
      IMInsertNSStringsToXPCDictionary();
    if (a10)
      IMInsertDatasToXPCDictionary();
    if (a11)
      IMInsertCodableObjectsToXPCDictionary();
    if (a12)
      IMInsertNSStringsToXPCDictionary();
    if (a13)
      IMInsertNSStringsToXPCDictionary();
    if (a14)
      IMInsertNSStringsToXPCDictionary();
    if (a15)
      xpc_dictionary_set_int64(v58, "handleID", a15);
    if (a16)
      IMInsertNSStringsToXPCDictionary();
    if (a17)
      xpc_dictionary_set_int64(v58, "fzError", a17);
    if (a18)
      xpc_dictionary_set_int64(v58, "fzType", a18);
    if (a19)
      xpc_dictionary_set_int64(v58, "otherHandleID", a19);
    if (a20)
      xpc_dictionary_set_int64(v58, "groupActionType", a20);
    if (a21)
      xpc_dictionary_set_int64(v58, "shareStatus", a21);
    if (a22)
      xpc_dictionary_set_int64(v58, "shareDirection", a22);
    if (a23)
      IMInsertNSStringsToXPCDictionary();
    if (a24)
      xpc_dictionary_set_int64(v58, "expireState", a24);
    if (a25)
      xpc_dictionary_set_int64(v58, "messageActionType", a25);
    if (a26)
      IMInsertNSStringsToXPCDictionary();
    if (a27)
      xpc_dictionary_set_int64(v58, "associatedMessageType", a27);
    if (a29)
    {
      xpc_dictionary_set_int64(v58, "associatedMessageRangeLocation", a28);
      xpc_dictionary_set_int64(v58, "associatedMessageRangeLength", a29);
    }
    if (a30)
      IMInsertDatasToXPCDictionary();
    if (a31)
      IMInsertNSStringsToXPCDictionary();
    if (a32)
      xpc_dictionary_set_int64(v58, "timePlayedExpressiveSend", a32);
    if (a33)
      IMInsertDatasToXPCDictionary();
    xpc_dictionary_set_int64(v58, "cloudKitSyncState", a34);
    if (a35)
      IMInsertNSStringsToXPCDictionary();
    if (a36)
      IMInsertDatasToXPCDictionary();
    if (a37)
      IMInsertNSStringsToXPCDictionary();
    if (a38)
      IMInsertNSStringsToXPCDictionary();
    if (a39)
      IMInsertNSStringsToXPCDictionary();
    if (a40)
      xpc_dictionary_set_int64(v58, "sortID", a40);
    if (a41)
      IMInsertNSStringsToXPCDictionary();
    if (a42)
      IMInsertNSStringsToXPCDictionary();
    if (a43)
      IMInsertNSStringsToXPCDictionary();
    if (a44)
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v58, "partCount", a45);
    if (a46)
      xpc_dictionary_set_int64(v58, "dateEdited", a46);
    if (a47)
      IMInsertNSStringsToXPCDictionary();
    if (a48)
      IMInsertNSStringsToXPCDictionary();
    if (a49)
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v58, "scheduleType", a50);
    xpc_dictionary_set_int64(v58, "scheduleState", a51);
    __XPCIMDMessageStoreSendXPCMessage(v58, a1, 0);
    xpc_release(v58);
  }
}

void __syncXPCIMDMessagePTaskInsertRow_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 110);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertIntsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessagePTaskSelectWithLimit_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 111);
    if (a2)
      IMInsertIntsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessagePTaskUpdateTaskFlagsForGUID_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 112);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertIntsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessagePTaskDeleteAllCompletedTask_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 113);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatRecordCreate_IPCAction(void (**a1)(void), int64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int64_t a14, int64_t a15, int64_t a16, uint64_t a17, uint64_t a18, int64_t a19, uint64_t a20,int64_t a21,uint64_t a22,uint64_t a23,int64_t a24,int64_t a25,int64_t a26,int64_t a27,int64_t a28)
{
  xpc_object_t v35;
  void *v36;

  v35 = xpc_dictionary_create(0, 0, 0);
  if (v35)
  {
    v36 = v35;
    xpc_dictionary_set_int64(v35, "__xpc__event_code__", 114);
    if (a2)
      xpc_dictionary_set_int64(v36, "style", a2);
    if (a3)
      xpc_dictionary_set_int64(v36, "state", a3);
    if (a4)
      IMInsertNSStringsToXPCDictionary();
    if (a5)
      IMInsertDatasToXPCDictionary();
    if (a6)
      IMInsertNSStringsToXPCDictionary();
    if (a7)
      IMInsertNSStringsToXPCDictionary();
    if (a8)
      IMInsertNSStringsToXPCDictionary();
    if (a9)
      IMInsertNSStringsToXPCDictionary();
    if (a10)
      IMInsertNSStringsToXPCDictionary();
    if (a11)
      IMInsertNSStringsToXPCDictionary();
    if (a12)
      IMInsertNSStringsToXPCDictionary();
    if (a13)
      IMInsertNSStringsToXPCDictionary();
    if (a14)
      xpc_dictionary_set_int64(v36, "isArchived", a14);
    if (a15)
      xpc_dictionary_set_int64(v36, "isFiltered", a15);
    if (a24)
      xpc_dictionary_set_int64(v36, "isBlackholed", a24);
    if (a16)
      xpc_dictionary_set_int64(v36, "hasHadSuccessfulQuery", a16);
    if (a17)
      IMInsertNSStringsToXPCDictionary();
    if (a18)
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v36, "ckSyncState", a19);
    if (a20)
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v36, "lastReadMessageTimeStamp", a21);
    if (a22)
      IMInsertNSStringsToXPCDictionary();
    if (a23)
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v36, "syndicationType", a25);
    xpc_dictionary_set_int64(v36, "syndicationDate", a26);
    if (a27)
      xpc_dictionary_set_int64(v36, "isRecovered", a27);
    if (a28)
      xpc_dictionary_set_int64(v36, "isDeletingIncomingMessages", a28);
    __XPCIMDMessageStoreSendXPCMessage(v36, a1, 0);
    xpc_release(v36);
  }
}

void __syncXPCIMDChatRecordCopyHandles_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 115);
    if (a2)
      xpc_dictionary_set_int64(v5, "chatRowID", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatRecordCopyMessagesWithLimit_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 116);
    if (a2)
      xpc_dictionary_set_int64(v7, "chatRowID", a2);
    if (a3)
      xpc_dictionary_set_int64(v7, "limit", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordSetIsArchived_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 117);
    if (a2)
      xpc_dictionary_set_int64(v7, "chatRowID", a2);
    if (a3)
      xpc_dictionary_set_int64(v7, "isArchived", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordSetIsBlackholed_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 221);
    if (a2)
      xpc_dictionary_set_int64(v7, "chatRowID", a2);
    if (a3)
      xpc_dictionary_set_int64(v7, "isBlackholed", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordSetIsRecovered_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 236);
    if (a2)
      xpc_dictionary_set_int64(v7, "chatRowID", a2);
    if (a3)
      xpc_dictionary_set_int64(v7, "isRecovered", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordSetIsDeletingIncomingMessages_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 237);
    if (a2)
      xpc_dictionary_set_int64(v7, "chatRowID", a2);
    if (a3)
      xpc_dictionary_set_int64(v7, "isDeletingIncomingMessages", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordAddHandle_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 118);
    if (a2)
      xpc_dictionary_set_int64(v7, "chatRowID", a2);
    if (a3)
      xpc_dictionary_set_int64(v7, "handleID", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordRemoveHandle_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 119);
    if (a2)
      xpc_dictionary_set_int64(v7, "chatRowID", a2);
    if (a3)
      xpc_dictionary_set_int64(v7, "handleID", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordBulkUpdate_IPCAction(void (**a1)(void), int64_t a2, int64_t a3, int64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int64_t a15, int64_t a16, int64_t a17, uint64_t a18, uint64_t a19, int64_t a20,uint64_t a21,int64_t a22,uint64_t a23,uint64_t a24,int64_t a25,int64_t a26,int64_t a27,int64_t a28,int64_t a29)
{
  xpc_object_t v36;
  void *v37;

  v36 = xpc_dictionary_create(0, 0, 0);
  if (v36)
  {
    v37 = v36;
    xpc_dictionary_set_int64(v36, "__xpc__event_code__", 120);
    if (a2)
      xpc_dictionary_set_int64(v37, "identifier", a2);
    if (a3)
      xpc_dictionary_set_int64(v37, "style", a3);
    if (a4)
      xpc_dictionary_set_int64(v37, "state", a4);
    if (a5)
      IMInsertNSStringsToXPCDictionary();
    if (a6)
      IMInsertDatasToXPCDictionary();
    if (a7)
      IMInsertNSStringsToXPCDictionary();
    if (a8)
      IMInsertNSStringsToXPCDictionary();
    if (a9)
      IMInsertNSStringsToXPCDictionary();
    if (a10)
      IMInsertNSStringsToXPCDictionary();
    if (a11)
      IMInsertNSStringsToXPCDictionary();
    if (a12)
      IMInsertNSStringsToXPCDictionary();
    if (a13)
      IMInsertNSStringsToXPCDictionary();
    if (a14)
      IMInsertNSStringsToXPCDictionary();
    if (a15)
      xpc_dictionary_set_int64(v37, "isArchived", a15);
    if (a16)
      xpc_dictionary_set_int64(v37, "isFiltered", a16);
    if (a25)
      xpc_dictionary_set_int64(v37, "isBlackholed", a25);
    if (a17)
      xpc_dictionary_set_int64(v37, "hasHadSuccessfulQuery", a17);
    if (a18)
      IMInsertNSStringsToXPCDictionary();
    if (a19)
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v37, "ckSyncState", a20);
    if (a21)
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v37, "lastReadMessageTimeStamp", a22);
    if (a23)
      IMInsertNSStringsToXPCDictionary();
    if (a24)
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v37, "syndicationType", a26);
    xpc_dictionary_set_int64(v37, "syndicationDate", a27);
    if (a28)
      xpc_dictionary_set_int64(v37, "isRecovered", a28);
    if (a29)
      xpc_dictionary_set_int64(v37, "isDeletingIncomingMessages", a29);
    __XPCIMDMessageStoreSendXPCMessage(v37, a1, 0);
    xpc_release(v37);
  }
}

void __syncXPCIMDChatRecordCopyAllChats_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 121);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatRecordCopyAllNamedChats_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 174);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatRecordCopyAllActiveChatsWithLimit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 122);
    xpc_dictionary_set_int64(v5, "limit", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatRecordCopyAllActiveChatsProgressivelyWithLimit_IPCAction(void (*a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;
  double Current;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  NSObject *v19;
  const __CFString *v20;
  void (*v21[6])(void);
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint8_t buf[4];
  const __CFString *v27;
  __int16 v28;
  unsigned int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = xpc_dictionary_create(0, 0, 0);
  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  if (v4)
  {
    v5 = v4;
    Current = CFAbsoluteTimeGetCurrent();
    v21[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v21[1] = (void (*)(void))3221225472;
    v21[2] = (void (*)(void))sub_1ABBFFD90;
    v21[3] = (void (*)(void))&unk_1E5ABBB30;
    v21[4] = a1;
    v21[5] = (void (*)(void))&v22;
    xpc_dictionary_set_int64(v5, "__xpc__event_code__", 123);
    xpc_dictionary_set_int64(v5, "request", (uint64_t)Current);
    xpc_dictionary_set_int64(v5, "limit", a2);
    v7 = IMOSLoggingEnabled();
    if ((_DWORD)v7)
    {
      v14 = OSLogHandleForIMFoundationCategory();
      v7 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
      if ((_DWORD)v7)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "Progressive copy of all chats started", buf, 2u);
      }
    }
    if (*((_BYTE *)v23 + 24))
    {
      v15 = 0;
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = (void *)MEMORY[0x1AF435474](v7, v8, v9, v10, v11, v12, v13);
        __XPCIMDMessageStoreSendXPCMessage(v5, v21, 0);
        objc_autoreleasePoolPop(v17);
        v15 = v16 + 1;
        if (*((_BYTE *)v23 + 24))
          break;
      }
      while (v16++ < 0x95);
    }
    if (IMOSLoggingEnabled())
    {
      v19 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        if (*((_BYTE *)v23 + 24))
          v20 = CFSTR("completed");
        else
          v20 = CFSTR("stopped early");
        *(_DWORD *)buf = 138412546;
        v27 = v20;
        v28 = 1024;
        v29 = v15;
        _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Progressive copy of all chats %@ with %d messages", buf, 0x12u);
      }
    }
    xpc_release(v5);
  }
  _Block_object_dispose(&v22, 8);
}

BOOL sub_1ABBFFD90(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v4;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(uint64_t, xpc_object_t))(v4 + 16))(v4, xdict);
  result = xpc_dictionary_get_BOOL(xdict, "complete");
  if (result)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

void __syncXPCIMDChatRecordCopyAllUnreadChatsAndRecentChatsWithLimit_IPCAction(void (**a1)(void), int64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 124);
    xpc_dictionary_set_int64(v7, "knownSenderLimit", a2);
    xpc_dictionary_set_int64(v7, "otherFilterLimit", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDCoreSpotlightAddMessageGUID_IPCAction(void (**a1)(void), uint64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 125);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDCoreSpotlightAddMessageGUIDs_IPCAction(void (**a1)(void), uint64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 126);
    if (a2)
      IMInsertArraysToXPCDictionary();
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDCoreSpotlightDeleteMessageGUIDs_IPCAction(void (**a1)(void), uint64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 127);
    if (a2)
      IMInsertArraysToXPCDictionary();
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDCoreSpotlightAddChatGUID_IPCAction(void (**a1)(void), uint64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 128);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDCoreSpotlightDeleteChatGUID_IPCAction(void (**a1)(void), uint64_t a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 129);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __XPCIMDCoreSpotlightSetNeedsMessageReindex_IPCAction(void (**a1)(void), int a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 130);
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, a2 ^ 1);
    xpc_release(v7);
  }
}

void __XPCIMDCoreSpotlightIndexNextMessageBatchIfNeeded_IPCAction(void (**a1)(void), int a2, uint64_t a3, int64_t a4)
{
  xpc_object_t v7;
  void *v8;

  v7 = xpc_dictionary_create(0, 0, 0);
  if (v7)
  {
    v8 = v7;
    xpc_dictionary_set_int64(v7, "__xpc__event_code__", 131);
    IMInsertIntsToXPCDictionary();
    xpc_dictionary_set_int64(v8, "reason", a4);
    __XPCIMDMessageStoreSendXPCMessage(v8, a1, a2 ^ 1);
    xpc_release(v8);
  }
}

void __syncXPCIMDCoreSpotlightReindexMessages_IPCAction(void (**a1)(void), void *a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 132);
    if (objc_msgSend(a2, "count"))
      IMInsertArraysToXPCDictionary();
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __asyncXPCIMDCoreSpotlightReindexMessages_IPCAction(void (**a1)(void), void *a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 132);
    if (objc_msgSend(a2, "count"))
      IMInsertArraysToXPCDictionary();
    xpc_dictionary_set_int64(v7, "reason", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 1);
    xpc_release(v7);
  }
}

void __syncXPCIMDCoreSpotlightReindexMessagesWithCollaborationMetadata_IPCAction(void (**a1)(void), void *a2, uint64_t a3, int64_t a4)
{
  xpc_object_t v8;
  void *v9;

  v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 133);
    if (objc_msgSend(a2, "count"))
      IMInsertArraysToXPCDictionary();
    xpc_dictionary_set_int64(v9, "reason", a4);
    if (objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", a3, 1, 0))
      IMInsertDatasToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDChatRecordCopyChatRecordForIdentifier_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 248);
    if (a2 != -1)
      xpc_dictionary_set_int64(v5, "identifier", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatRecordCopyChatForGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 140);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatRecordCopyChatForMessageID_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 141);
    if (a2)
      xpc_dictionary_set_int64(v5, "messageID", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatRecordCopyChatsWithHandleOnService_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 142);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordCopyChatsWithHandlesOnServiceWithDisplayNameGroupIDStyle_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int64_t a6)
{
  xpc_object_t v12;
  void *v13;

  v12 = xpc_dictionary_create(0, 0, 0);
  if (v12)
  {
    v13 = v12;
    xpc_dictionary_set_int64(v12, "__xpc__event_code__", 143);
    if (a2)
      IMInsertArraysToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    if (a4)
      IMInsertNSStringsToXPCDictionary();
    if (a5)
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v13, "style", a6);
    __XPCIMDMessageStoreSendXPCMessage(v13, a1, 0);
    xpc_release(v13);
  }
}

void __syncXPCIMDChatRecordCopyChatsWithIdentifierOnService_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 149);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordCopyChatsWithRoomnameOnService_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 151);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordCopyChatsWithGroupID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 152);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatRecordCopyNewestChatForGroupIDOnService_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 156);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    IMInsertBoolsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordDeleteChatForGUID_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 157);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatRecordAssociateMessageWithGUIDToChatWithGUIDIfNeeded_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 162);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordDisassociateMessageWithGUIDFromChatWithGUIDIfNeeded_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 163);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDChatRecordCopyChatGUIDsWithUnplayedAudioMessages_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 164);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatRecordCopyChatGUIDsWithUnreadMessages_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 220);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatRecordSetIsFiltered_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v3;
  void *v4;

  if (a2)
  {
    v3 = xpc_dictionary_create(0, 0, 0);
    if (v3)
    {
      v4 = v3;
      xpc_dictionary_set_int64(v3, "__xpc__event_code__", 165);
      IMInsertNSStringsToXPCDictionary();
      IMInsertIntsToXPCDictionary();
      __XPCIMDMessageStoreSendXPCMessage(v4, a1, 0);
      xpc_release(v4);
    }
  }
}

void __syncXPCIMDChatRecordDeleteEmptyChats_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 166);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatRecordCopyChatIdentitiesForMessageWithGUIDs_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 167);
    IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDRepairDuplicateChats_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, void *a4)
{
  xpc_object_t v7;
  void *v8;

  v7 = xpc_dictionary_create(0, 0, 0);
  if (v7)
  {
    v8 = v7;
    xpc_dictionary_set_int64(v7, "__xpc__event_code__", 170);
    IMInsertNSStringsToXPCDictionary();
    IMInsertArraysToXPCDictionary();
    if (objc_msgSend(a4, "length", a2, 0))
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v8, a1, 0);
    xpc_release(v8);
  }
}

void __syncXPCIMDSplitDatabaseByDays_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 171);
    IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v5, "days", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDSplitDatabaseByRecentCount_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 172);
    IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v5, "message_count", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDSwitchToDatabase_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 173);
    IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordCopyArrayOfAssociatedMessagesForMessageGUIDFromSender_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 175);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDCoreSpotlightMarkAttachment_IPCAction(void (**a1)(void), void *a2, uint64_t a3, uint64_t a4, int a5)
{
  xpc_object_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v10 = xpc_dictionary_create(0, 0, 0);
  if (!v10)
    return;
  v11 = v10;
  xpc_dictionary_set_int64(v10, "__xpc__event_code__", 139);
  if (a2)
  {
    IMInsertNSStringsToXPCDictionary();
    objc_msgSend(a2, "UTF8String", a2, 0);
    v12 = sandbox_extension_issue_file();
    if (v12)
    {
      v13 = (void *)v12;
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v12, 4), "UTF8String");
      IMInsertStringsToXPCDictionary();
      free(v13);
      if (!a3)
        goto LABEL_14;
      goto LABEL_13;
    }
    if (IMOSLoggingEnabled())
    {
      v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = *__error();
        *(_DWORD *)buf = 138412546;
        v18 = a2;
        v19 = 1024;
        v20 = v15;
        _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "Could not generate sandbox extension for path %@, errno %d", buf, 0x12u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v18 = a2;
        _os_log_impl(&dword_1ABB60000, v16, OS_LOG_TYPE_INFO, "Could not generate sandbox extension for path %@", buf, 0xCu);
      }
    }
  }
  if (a3)
LABEL_13:
    IMInsertNSStringsToXPCDictionary();
LABEL_14:
  if (a4)
    IMInsertArraysToXPCDictionary();
  if (a5)
    IMInsertBoolsToXPCDictionary();
  __XPCIMDMessageStoreSendXPCMessage(v11, a1, 0);
  xpc_release(v11);
}

void __IMDDowngradeDatabaseToVersion_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 176);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    IMInsertIntsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesToUploadToCloudKit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 177);
    xpc_dictionary_set_int64(v5, "limit", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesPendingUpdateT1ToCloudKit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 178);
    xpc_dictionary_set_int64(v5, "limit", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesPendingUpdateT2ToCloudKit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 179);
    xpc_dictionary_set_int64(v5, "limit", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesPendingUpdateT3ToCloudKit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 180);
    xpc_dictionary_set_int64(v5, "limit", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordMarkAllMessagesAsNeedingCloudKitSync(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 181);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesToDeleteFromCloudKit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 186);
    xpc_dictionary_set_int64(v5, "limit", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordAddGUIDAndCKRecordIDToDeleteFromCloudKit_IPCAction(void (**a1)(void), void *a2, void *a3)
{
  xpc_object_t v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 187);
    if (objc_msgSend(a2, "length"))
    {
      v8 = a2;
      v9 = 0;
      IMInsertNSStringsToXPCDictionary();
    }
    if (objc_msgSend(a3, "length", v8, v9))
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAddIncompatibleGroupPhotoChangedMessagesToDeleteFromCloudKit_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 188);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordCopyMessagesWithReplyToGUIDs_IPCAction(void (**a1)(void), void *a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 214);
    if (objc_msgSend(a2, "length"))
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordMarkDeletedTombStonedMessagesAsNeedingCloudKitSync_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 189);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordDeleteTombStonedMessagesForRecordIDs_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 190);
    if (a2)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCInsertIntoDeletedChatsTable_IPCAction(void (**a1)(void), void *a2, void *a3, int64_t a4)
{
  xpc_object_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 191);
    if (objc_msgSend(a2, "length"))
    {
      v10 = a2;
      v11 = 0;
      IMInsertNSStringsToXPCDictionary();
    }
    if (objc_msgSend(a3, "length", v10, v11))
      IMInsertNSStringsToXPCDictionary();
    xpc_dictionary_set_int64(v9, "timeStamp", a4);
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDChatRecordCopyChatRecordIDsAndGUIDsToDeleteFromCloudKitWithLimit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 192);
    xpc_dictionary_set_int64(v5, "limit", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDChatClearPendingDeleteChatsTable_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 193);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDChatRemapMessagesWithErrorCodeToErrorCode_IPCAction(void (**a1)(void), uint64_t a2, int64_t a3, int64_t a4)
{
  xpc_object_t v8;
  void *v9;

  v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 194);
    if (a2)
      IMInsertArraysToXPCDictionary();
    xpc_dictionary_set_int64(v9, "fromError", a3);
    xpc_dictionary_set_int64(v9, "toError", a4);
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDMessageRecordCalculateLocalCloudKitStatistics_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 195);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordCalculateTotalCounts_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 196);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordMarkMessageWithROWIDAsSyncedWithCloudKit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 197);
    xpc_dictionary_set_int64(v5, "rowID", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordMarkMessageWithROWIDAsIgnoreButNeedingSyncWithCloudKit_IPCAction(void (**a1)(void), int64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 198);
    xpc_dictionary_set_int64(v5, "rowID", a2);
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordSetCloudKitSyncCounts_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 199);
    IMInsertDictionariesToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentRecordMarkFailedAttachmentsAsNeedingSync_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 202);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDAttachmentRecordCopyAttachmentsToDeleteFromCloudKit_IPCAction(void (**a1)(void), void *a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 203);
    if (a2)
      xpc_dictionary_set_int64(v7, "afterRow", objc_msgSend(a2, "longLongValue"));
    xpc_dictionary_set_int64(v7, "limit", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordCopyAttachmentGUIDs_IPCAction(void (**a1)(void), void *a2, int64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 204);
    if (a2)
      xpc_dictionary_set_int64(v7, "afterRow", objc_msgSend(a2, "longLongValue"));
    xpc_dictionary_set_int64(v7, "limit", a3);
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDAttachmentRecordDeleteTombStonedAttachmentsForRecordIDs_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 205);
    if (a2)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCMDAttachmentRecordDeleteTombStonedAttachmentsToDeleteFromCloudKit_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 206);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDMessageRecordMarkAllUnsuccessFullSyncMessagesAsNeedingSync_IPCAction(void (**a1)(void))
{
  xpc_object_t v2;
  void *v3;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    xpc_dictionary_set_int64(v2, "__xpc__event_code__", 209);
    __XPCIMDMessageStoreSendXPCMessage(v3, a1, 0);
    xpc_release(v3);
  }
}

void __syncXPCIMDKVValueForKey_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 210);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDKVPersistValueForKey_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 212);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertDatasToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __asyncXPCIMDNotificationsPostNotifications_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 213);
    if (a2)
      IMInsertDictionariesToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 1);
    xpc_release(v5);
  }
}

void __asyncXPCIMDNotificationsRetractNotificationsForReadMessages_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 215);
    if (a2)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 1);
    xpc_release(v5);
  }
}

void __asyncXPCIMDMessageRecordRetractNotificationsForChatGuids_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 239);
    if (a2)
      IMInsertArraysToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 1);
    xpc_release(v5);
  }
}

void __asyncXPCIMDNotificationsRetractNotificationsFromFirstUnlock_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 216);
    if (a2)
      IMInsertDictionariesToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 1);
    xpc_release(v5);
  }
}

void __syncXPCIMDNotificationsPostUrgentNotificationsForMessages_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 217);
    if (a2)
      IMInsertArraysToXPCDictionary();
    if (a3)
      IMInsertDictionariesToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDNotificationsUpdatePostedNotificationsForMessages_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 218);
    if (a2)
      IMInsertArraysToXPCDictionary();
    if (a3)
      IMInsertDictionariesToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDNotificationsPostFirstUnlockMessage_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  xpc_object_t v6;
  void *v7;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    v7 = v6;
    xpc_dictionary_set_int64(v6, "__xpc__event_code__", 219);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v7, a1, 0);
    xpc_release(v7);
  }
}

void __syncXPCIMDMessageRecordMarkMessageGUIDUnread_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_int64(v4, "__xpc__event_code__", 222);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    __XPCIMDMessageStoreSendXPCMessage(v5, a1, 0);
    xpc_release(v5);
  }
}

void __syncXPCIMDMessageRecordMarkMessagesAsUnreadWithChatGUIDUpToGUIDFromMe_IPCAction(void (**a1)(void), uint64_t a2, uint64_t a3, int a4)
{
  xpc_object_t v8;
  void *v9;

  v8 = xpc_dictionary_create(0, 0, 0);
  if (v8)
  {
    v9 = v8;
    xpc_dictionary_set_int64(v8, "__xpc__event_code__", 223);
    if (a2)
      IMInsertNSStringsToXPCDictionary();
    if (a3)
      IMInsertNSStringsToXPCDictionary();
    if (a4)
      xpc_dictionary_set_BOOL(v9, "fromMe", 1);
    __XPCIMDMessageStoreSendXPCMessage(v9, a1, 0);
    xpc_release(v9);
  }
}

void __syncXPCIMDChatRecordPurgeAttachments_IPCAction(void (**a1)(void), uint64_t a2)
{
  xpc_object_t v3;
  void *v4;

  if (a2)
  {
    v3 = xpc_dictionary_create(0, 0, 0);
    if (v3)
    {
      v4 = v3;
      xpc_dictionary_set_int64(v3, "__xpc__event_code__", 224);
      IMInsertNSStringsToXPCDictionary();
      __XPCIMDMessageStoreSendXPCMessage(v4, a1, 0);
      xpc_release(v4);
    }
  }
}

uint64_t sub_1ABC02D24(uint64_t result, void *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, objc_msgSend(a2, "object"));
  return result;
}

Class sub_1ABC04814(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!qword_1EEC405E8)
  {
    v4 = xmmword_1E5ABBB78;
    v5 = 0;
    qword_1EEC405E8 = _sl_dlopen();
  }
  if (!qword_1EEC405E8)
    sub_1ABC61B00(&v3);
  result = objc_getClass("FAFetchFamilyCircleRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1ABC61B7C();
  qword_1EEC405E0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void IMDDatabaseClean()
{
  NSObject *v0;
  uint8_t v1[16];

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "Cleaning Database", v1, 2u);
    }
  }
  if ((IMDIsRunningInDatabaseServerProcess() & 1) != 0)
    IMDSMSRecordStoreClean();
  else
    __syncXPCIMDDatabaseClean_IPCAction(0);
}

void *IMDHandleCanonicalizedIDsBulkUpdateQuery(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  void *v11;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "count"))
  {
    v3 = (void *)objc_msgSend(CFSTR("UPDATE OR IGNORE handle SET id = CASE ROWID "), "mutableCopy");
    v4 = (void *)objc_msgSend(CFSTR("("), "mutableCopy");
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v13 = v2;
    v5 = v2;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v15 != v8)
            objc_enumerationMutation(v5);
          v10 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i);
          objc_msgSend(v5, "objectForKeyedSubscript:", v10);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "appendFormat:", CFSTR("WHEN %@ THEN '%@' "), v10, v11);

          objc_msgSend(v4, "appendFormat:", CFSTR("%@, "), v10);
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v7);
    }

    objc_msgSend(v4, "replaceCharactersInRange:withString:", objc_msgSend(v4, "length") - 2, 2, CFSTR(")"));
    objc_msgSend(v3, "appendFormat:", CFSTR("END WHERE ROWID IN %@"), v4);

    v2 = v13;
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t IMDHandleRecordCopyHandlesFilteredUsingPredicateQuery(void *a1)
{
  objc_class *v1;
  id v2;
  uint64_t v3;

  v1 = (objc_class *)MEMORY[0x1E0CB3940];
  v2 = a1;
  v3 = objc_msgSend([v1 alloc], "initWithFormat:", CFSTR("%@ WHERE %@"), CFSTR("SELECT ROWID, id, country, service, uncanonicalized_id, person_centric_id FROM handle "), v2);

  return v3;
}

uint64_t IMDHandleRecordCopySortedHandlesFilteredUsingPredicateWithLimitQuery(void *a1, void *a2)
{
  id v3;
  id v4;
  __CFString *v5;
  void *v6;
  __CFString *v7;
  uint64_t v8;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("WHERE %@"), v3);
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = &stru_1E5AC1D70;
  }
  if (objc_msgSend(v4, "count"))
  {
    objc_msgSend(v4, "componentsJoinedByString:", CFSTR(", "));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("ORDER BY %@ "), v6);
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = &stru_1E5AC1D70;
  }
  v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@ %@ %@ LIMIT ?"), CFSTR("SELECT ROWID, id, country, service, uncanonicalized_id, person_centric_id FROM handle "), v5, v7);

  return v8;
}

uint64_t sub_1ABC052F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABC05304(uint64_t a1)
{

}

void sub_1ABC0530C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  objc_msgSend(*(id *)(a1 + 32), "bindParametersToSqliteWithStatement:", a4);
  v8 = (id)CSDBRecordStoreProcessStatement();
  v5 = objc_msgSend(*(id *)(a1 + 40), "_copyChatRecordsFromCoreSDBResults:", v8);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_1ABC05838(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1ABC05690);
  }
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1ABC058CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v5 = *(void **)(a1 + 32);
  if (v5)
    objc_msgSend(v5, "bindParametersToSqliteWithStatement:", a4);
  CSDBSqliteBindInt64();
  v9 = (id)CSDBRecordStoreProcessStatement();
  v6 = objc_msgSend(*(id *)(a1 + 40), "_copyChatRecordsFromCoreSDBResults:", v9);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_1ABC05B44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  CSDBSqliteBindTextFromCFString();
  v5 = (id)CSDBRecordStoreProcessStatement();
  v2 = objc_msgSend(*(id *)(a1 + 40), "_copyChatRecordsFromCoreSDBResults:", v5);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1ABC06044(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABC05FDCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1ABC06390(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    if (!v23)
      JUMPOUT(0x1ABC0632CLL);
    JUMPOUT(0x1ABC06318);
  }
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1ABC063E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  CSDBSqliteBindTextFromCFArrayOfCFStrings();
  CSDBSqliteBindTextFromCFString();
  if (*(_BYTE *)(a1 + 88))
    CSDBSqliteBindTextFromCFString();
  if (*(_BYTE *)(a1 + 89))
    CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  if (!*(_BYTE *)(a1 + 91))
    CSDBSqliteBindInt64();
  v5 = (id)CSDBRecordStoreProcessStatement();
  v2 = objc_msgSend(*(id *)(a1 + 64), "_copyChatRecordsFromCoreSDBResults:", v5);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1ABC065F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABC0660C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1ABC073D0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1ABC07364);
  }
  _Unwind_Resume(a1);
}

void sub_1ABC07430(uint64_t a1, __int128 *a2)
{
  NSObject *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  uint64_t v8;

  if (*((_DWORD *)a2 + 4))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        LOWORD(v7) = 0;
        _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Select guid default", (uint8_t *)&v7, 2u);
      }

    }
  }
  else
  {
    v7 = *a2;
    v8 = *((_QWORD *)a2 + 2);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", IMDInt64FromSqlColumn((uint64_t)&v7));
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
}

void sub_1ABC07518(uint64_t a1, void *a2)
{
  IMDCoreSpotlightDeleteChatGUID(a2, 1005);
}

void sub_1ABC07AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x1ABC07A7CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ABC07B34(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  const unsigned __int8 *v9;
  uint64_t v10;
  void *v11;
  _BYTE v12[24];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  IMLogHandleForCategory();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)v12 = 138412290;
    *(_QWORD *)&v12[4] = v5;
    _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Recently Deleted: message GUID in recovery for chat %@, iterating", v12, 0xCu);
  }

  if (*(_DWORD *)(a2 + 16))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)(a1 + 32);
        v8 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)v12 = 138412546;
        *(_QWORD *)&v12[4] = v7;
        *(_WORD *)&v12[12] = 1024;
        *(_DWORD *)&v12[14] = v8;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Recently Deleted: Unexpected column in recoverable message in chat %@ with index %d", v12, 0x12u);
      }

    }
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)a2;
    *(_QWORD *)&v12[16] = *(_QWORD *)(a2 + 16);
    v9 = IMDStringFromSqlColumn((uint64_t)v12);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

  }
}

void sub_1ABC07FE0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[11];

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "_restoredAttributedBodyForMessageGUID:withRecoveredAttributedParts:", v5, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = *(void **)(a1 + 32);
    v8 = *(_OWORD *)(a1 + 152);
    v9 = *(_OWORD *)(a1 + 184);
    v13[8] = *(_OWORD *)(a1 + 168);
    v13[9] = v9;
    v13[10] = *(_OWORD *)(a1 + 200);
    v10 = *(_OWORD *)(a1 + 88);
    v11 = *(_OWORD *)(a1 + 120);
    v13[4] = *(_OWORD *)(a1 + 104);
    v13[5] = v11;
    v13[6] = *(_OWORD *)(a1 + 136);
    v13[7] = v8;
    v12 = *(_OWORD *)(a1 + 56);
    v13[0] = *(_OWORD *)(a1 + 40);
    v13[1] = v12;
    v13[2] = *(_OWORD *)(a1 + 72);
    v13[3] = v10;
    objc_msgSend(v7, "_updateMessageRecordForGUID:withAttributedBody:operation:", v5, v6, v13);
  }

}

void sub_1ABC088E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABC08908(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v4 = MEMORY[0x1E0C809B0];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC089C4;
  v6[3] = &unk_1E5AB6308;
  v8 = a2;
  v7 = *(id *)(a1 + 32);
  v5[0] = v4;
  v5[1] = 3221225472;
  v5[2] = sub_1ABC089D0;
  v5[3] = &unk_1E5AB2298;
  v5[4] = *(_QWORD *)(a1 + 40);
  v5[5] = a2;
  _IMDSqlOperationRunQuery(a2, CFSTR("SELECT attributedBody FROM message WHERE message.guid = ?;"),
    (uint64_t)v6,
    (uint64_t)v5);

}

void sub_1ABC089C4(uint64_t a1)
{
  IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 40) + 32, *(_QWORD *)(a1 + 32));
}

BOOL sub_1ABC089D0(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD v12[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;
  uint8_t buf[4];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v13 = 0;
      v14 = &v13;
      v15 = 0x3032000000;
      v16 = sub_1ABC052F4;
      v17 = sub_1ABC05304;
      v18 = 0;
      IMLogHandleForCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Recently Deleted: body will iterate", buf, 2u);
      }

      v5 = *(_QWORD *)(a1 + 40);
      v12[0] = v3;
      v12[1] = 3221225472;
      v12[2] = sub_1ABC08C40;
      v12[3] = &unk_1E5AB2AC0;
      v12[4] = &v13;
      IMDSqlOperationIterateRow(v5, (uint64_t)v12);
      if (v14[5])
      {
        IMLogHandleForCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v7 = v14[5];
          *(_DWORD *)buf = 138412290;
          v20 = v7;
          _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Recently Deleted:Parts: Success in column values returned: %@", buf, 0xCu);
        }

        JWDecodeCodableObjectWithStandardAllowlist();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v10 = *(NSObject **)(v9 + 40);
        *(_QWORD *)(v9 + 40) = v8;
      }
      else
      {
        IMLogHandleForCategory();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          v11 = v14[5];
          *(_DWORD *)buf = 138412290;
          v20 = v11;
          _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "Recently Deleted:Parts: Error in column values returned: %@", buf, 0xCu);
        }
      }

      _Block_object_dispose(&v13, 8);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1ABC08C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABC08C40(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  NSObject *v5;
  int v6;
  CFDataRef v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  IMLogHandleForCategory();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LOWORD(v10) = 0;
    _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Recently Deleted: body iterating", (uint8_t *)&v10, 2u);
  }

  if (*((_DWORD *)a2 + 4))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = *((_DWORD *)a2 + 4);
        LODWORD(v10) = 67109120;
        DWORD1(v10) = v6;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Recently Deleted: Unexpected column in recoverable message parts metadata query with index %d", (uint8_t *)&v10, 8u);
      }

    }
  }
  else
  {
    v10 = *a2;
    v11 = *((_QWORD *)a2 + 2);
    v7 = IMDBlobFromSqlColumn((uint64_t)&v10);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

  }
}

void sub_1ABC08F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABC08F78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v4 = MEMORY[0x1E0C809B0];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC09034;
  v6[3] = &unk_1E5AB6308;
  v8 = a2;
  v7 = *(id *)(a1 + 32);
  v5[0] = v4;
  v5[1] = 3221225472;
  v5[2] = sub_1ABC09040;
  v5[3] = &unk_1E5AB2298;
  v5[4] = *(_QWORD *)(a1 + 40);
  v5[5] = a2;
  _IMDSqlOperationRunQuery(a2, CFSTR("SELECT m.guid, rmp.part_text FROM recoverable_message_part AS rmp JOIN chat AS c ON c.ROWID = rmp.chat_id AND c.guid = ? JOIN message AS m ON m.ROWID = rmp.message_id;"),
    (uint64_t)v6,
    (uint64_t)v5);

}

void sub_1ABC09034(uint64_t a1)
{
  IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 40) + 32, *(_QWORD *)(a1 + 32));
}

BOOL sub_1ABC09040(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  void *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  int *v11;
  _QWORD *v12;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;
  uint64_t v20;
  _QWORD v21[4];
  id v22;
  uint8_t v23[4];
  int v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v11 = &v24;
    v12 = v21;
    do
    {
      v20 = 0;
      v21[0] = &v20;
      v21[1] = 0x3032000000;
      v21[2] = sub_1ABC052F4;
      v21[3] = sub_1ABC05304;
      v22 = 0;
      v14 = 0;
      v15 = &v14;
      v16 = 0x3032000000;
      v17 = sub_1ABC052F4;
      v18 = sub_1ABC05304;
      v19 = 0;
      v3 = *(_QWORD *)(a1 + 40);
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = sub_1ABC09358;
      v13[3] = &unk_1E5AB2DE0;
      v13[4] = &v20;
      v13[5] = &v14;
      IMDSqlOperationIterateRow(v3, (uint64_t)v13);
      if (!objc_msgSend(*(id *)(v21[0] + 40), "length") || !v15[5])
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v6 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
          {
            v7 = *(_QWORD *)(v21[0] + 40);
            v8 = v15[5];
            *(_DWORD *)buf = 138412546;
            v26 = v7;
            v27 = 2112;
            v28 = v8;
            _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Parts: Error in column values returned: %@|%@", buf, 0x16u);
          }

        }
        goto LABEL_17;
      }
      JWDecodeCodableObjectWithStandardAllowlist();
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "objectForKeyedSubscript:", *(_QWORD *)(v21[0] + 40));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (v5)
      {
        if (!v4)
          goto LABEL_13;
      }
      else
      {
        v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v9, *(_QWORD *)(v21[0] + 40));

        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "objectForKeyedSubscript:", *(_QWORD *)(v21[0] + 40));
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v4)
        {
LABEL_13:
          IMLogHandleForCategory();
          v10 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            sub_1ABC62254(v23, (uint64_t)v12, v11, v10);

          goto LABEL_16;
        }
      }
      objc_msgSend(v5, "addObject:", v4, v11, v12);
LABEL_16:

LABEL_17:
      _Block_object_dispose(&v14, 8);

      _Block_object_dispose(&v20, 8);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1ABC09320()
{
  JUMPOUT(0x1ABC09330);
}

void sub_1ABC09358(uint64_t a1, __int128 *a2)
{
  int v4;
  const unsigned __int8 *v5;
  uint64_t v6;
  void *v7;
  CFDataRef v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a2 + 4);
  if (v4 == 1)
  {
    v13 = *a2;
    v14 = *((_QWORD *)a2 + 2);
    v8 = IMDBlobFromSqlColumn((uint64_t)&v13);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
  else if (v4)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = *((_DWORD *)a2 + 4);
        LODWORD(v13) = 67109120;
        DWORD1(v13) = v12;
        _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "Unexpected column in recoverable message parts metadata query with index %d", (uint8_t *)&v13, 8u);
      }

    }
  }
  else
  {
    v13 = *a2;
    v14 = *((_QWORD *)a2 + 2);
    v5 = IMDStringFromSqlColumn((uint64_t)&v13);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

  }
}

void sub_1ABC094B8(_QWORD *a1, __int128 *a2)
{
  const unsigned __int8 *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  int v8;
  sqlite3_int64 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      v11 = *a2;
      v12 = *((_QWORD *)a2 + 2);
      v4 = IMDStringFromSqlColumn((uint64_t)&v11);
      v5 = *(_QWORD *)(a1[4] + 8);
      v6 = *(void **)(v5 + 40);
      *(_QWORD *)(v5 + 40) = v4;

      return;
    case 1:
      v11 = *a2;
      v12 = *((_QWORD *)a2 + 2);
      v9 = IMDInt64FromSqlColumn((uint64_t)&v11);
      v10 = a1[5];
      goto LABEL_11;
    case 2:
      v11 = *a2;
      v12 = *((_QWORD *)a2 + 2);
      v9 = IMDInt64FromSqlColumn((uint64_t)&v11);
      v10 = a1[6];
      goto LABEL_11;
    case 3:
      v11 = *a2;
      v12 = *((_QWORD *)a2 + 2);
      v9 = IMDInt64FromSqlColumn((uint64_t)&v11);
      v10 = a1[7];
      goto LABEL_11;
    case 4:
      v11 = *a2;
      v12 = *((_QWORD *)a2 + 2);
      v9 = IMDInt64FromSqlColumn((uint64_t)&v11);
      v10 = a1[8];
LABEL_11:
      *(_QWORD *)(*(_QWORD *)(v10 + 8) + 24) = v9;
      break;
    default:
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          v8 = *((_DWORD *)a2 + 4);
          LODWORD(v11) = 67109120;
          DWORD1(v11) = v8;
          _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Unexpected column in recoverable message metadata query with index %d", (uint8_t *)&v11, 8u);
        }

      }
      break;
  }
}

void sub_1ABC0982C(uint64_t a1)
{
  IMDSqlStatementBindInt64(*(_QWORD *)(a1 + 40) + 32, objc_msgSend(*(id *)(a1 + 32), "__im_nanosecondTimeInterval"));
}

BOOL sub_1ABC09858(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      v5[2] = sub_1ABC098F8;
      v5[3] = &unk_1E5AB72A8;
      v4 = *(_QWORD *)(a1 + 40);
      v6 = *(id *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);

      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1ABC098F8(uint64_t a1, __int128 *a2)
{
  NSObject *v3;
  int v4;
  unsigned __int8 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a2 + 4))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v4 = *((_DWORD *)a2 + 4);
        LODWORD(v7) = 67109120;
        DWORD1(v7) = v4;
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Unexpected column in affected chat query with index %d", (uint8_t *)&v7, 8u);
      }

    }
  }
  else
  {
    v7 = *a2;
    v8 = *((_QWORD *)a2 + 2);
    v6 = (unsigned __int8 *)IMDStringFromSqlColumn((uint64_t)&v7);
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);

  }
}

void sub_1ABC09BC8(uint64_t a1)
{
  IMDSqlStatementBindInt64(*(_QWORD *)(a1 + 40) + 32, objc_msgSend(*(id *)(a1 + 32), "__im_nanosecondTimeInterval"));
}

BOOL sub_1ABC09BF4(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      v5[2] = sub_1ABC09C94;
      v5[3] = &unk_1E5AB72A8;
      v4 = *(_QWORD *)(a1 + 40);
      v6 = *(id *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);

      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1ABC09C94(uint64_t a1, __int128 *a2)
{
  NSObject *v3;
  int v4;
  unsigned __int8 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a2 + 4))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v4 = *((_DWORD *)a2 + 4);
        LODWORD(v7) = 67109120;
        DWORD1(v7) = v4;
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Unexpected column in affected chat query with index %d", (uint8_t *)&v7, 8u);
      }

    }
  }
  else
  {
    v7 = *a2;
    v8 = *((_QWORD *)a2 + 2);
    v6 = (unsigned __int8 *)IMDStringFromSqlColumn((uint64_t)&v7);
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);

  }
}

void sub_1ABC0A390(uint64_t a1, void *a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  id obj;
  _QWORD v14[4];
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  obj = a3;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v17;
    v8 = *MEMORY[0x1E0D36430];
    v9 = MEMORY[0x1E0C809B0];
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v17 != v7)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        v12 = objc_msgSend(v11, "length");
        v14[0] = v9;
        v14[1] = 3221225472;
        v14[2] = sub_1ABC0A50C;
        v14[3] = &unk_1E5AB7DE8;
        v15 = v4;
        objc_msgSend(v11, "enumerateAttribute:inRange:options:usingBlock:", v8, 0, v12, 0, v14);

      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v6);
  }

}

void sub_1ABC0A50C(uint64_t a1, void *a2)
{
  __CFString *v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  __CFString *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412546;
      v7 = v3;
      v8 = 2112;
      v9 = v5;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Recently Deleted | Parts: Deleting transfer GUID: %@ for recoverable message part for messageGUID: %@", (uint8_t *)&v6, 0x16u);
    }

  }
  IMDAttachmentRecordDeleteAttachmentForGUID(v3);

}

void sub_1ABC0A9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABC0A9CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  CSDBSqliteBindInt64();
  v5 = (id)CSDBRecordStoreProcessStatement();
  v2 = objc_msgSend(*(id *)(a1 + 32), "_copyChatRecordsFromCoreSDBResults:", v5);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1ABC0AD80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[4];
  _QWORD v5[5];

  v5[4] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0D37470];
  v4[0] = CFSTR("rowID");
  v4[1] = v0;
  v5[0] = CFSTR("ROWID");
  v5[1] = CFSTR("guid");
  v1 = *MEMORY[0x1E0D37478];
  v4[2] = *MEMORY[0x1E0D37468];
  v4[3] = v1;
  v5[2] = CFSTR("filename");
  v5[3] = CFSTR("original_guid");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, v4, 4);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED0D3798;
  qword_1ED0D3798 = v2;

}

id sub_1ABC0AE68(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v15;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v15 != v8)
            objc_enumerationMutation(v5);
          sub_1ABB6AA7C(a1, *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v9));
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "addObject:", v10);

          ++v9;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v7);
    }

    v11 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v4, "componentsJoinedByString:", CFSTR(", "));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "stringWithFormat:", CFSTR("( %@)"), v12);
    a1 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return a1;
}

uint64_t _IMDSMSDatabaseMigrateData_34_35()
{
  uint64_t v0;
  uint64_t v1;
  sqlite3_stmt *v2;
  const __CFAllocator *v3;
  const unsigned __int8 *v4;
  __CFString *v5;
  uint64_t v6;

  v0 = CSDBSqliteConnectionStatementForSQL();
  if (v0)
  {
    v1 = v0;
    v2 = *(sqlite3_stmt **)(v0 + 8);
    if (v2)
    {
      if (sqlite3_step(v2) == 100)
      {
        v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        do
        {
          sqlite3_column_int(*(sqlite3_stmt **)(v1 + 8), 0);
          if (sqlite3_column_text(*(sqlite3_stmt **)(v1 + 8), 1))
          {
            v4 = sqlite3_column_text(*(sqlite3_stmt **)(v1 + 8), 1);
            v5 = (__CFString *)CFStringCreateWithCString(v3, (const char *)v4, 0x8000100u);
          }
          else
          {
            v5 = 0;
          }
          IMComponentsFromChatGUID();
          v6 = CSDBSqliteConnectionStatementForSQL();
          if (v6 && *(_QWORD *)(v6 + 8))
          {
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindTextFromCFString();
            CSDBSqliteBindInt();
            CSDBSqliteStatementPerform();
            CSDBSqliteStatementReset();
          }

        }
        while (sqlite3_step(*(sqlite3_stmt **)(v1 + 8)) == 100);
      }
      CSDBSqliteStatementReset();
    }
  }
  return 1;
}

uint64_t IMDAttachmentRecordDeleteUsingPredicateQuery(uint64_t a1)
{
  __CFString *v1;
  uint64_t v2;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("WHERE %@"), a1);
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = &stru_1E5AC1D70;
  }
  v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%s%@"), "DELETE FROM attachment ", v1);

  return v2;
}

uint64_t IMDAttachmentRecordCopyFilteredUsingPredicateWithLimitQuery(uint64_t a1)
{
  __CFString *v1;
  uint64_t v2;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("WHERE %@"), a1);
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = &stru_1E5AC1D70;
  }
  v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%s%@"), "SELECT ROWID, guid, created_date, start_date, filename, uti, mime_type, transfer_state, is_outgoing, user_info, transfer_name, total_bytes, is_sticker, sticker_user_info, attribution_info, hide_attachment, ck_sync_state, ck_server_change_token_blob, ck_record_id, original_guid, is_commsafety_sensitive, emoji_image_content_identifier, emoji_image_short_description FROM attachment ", v1);

  return v2;
}

uint64_t IMDAttachmentRecordCopySortedAttachmentsFilteredUsingPredicateWithLimitQuery(void *a1, void *a2)
{
  id v3;
  id v4;
  __CFString *v5;
  void *v6;
  __CFString *v7;
  uint64_t v8;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("WHERE %@"), v3);
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = &stru_1E5AC1D70;
  }
  if (objc_msgSend(v4, "count"))
  {
    objc_msgSend(v4, "componentsJoinedByString:", CFSTR(", "));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("ORDER BY %@ "), v6);
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = &stru_1E5AC1D70;
  }
  v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@ %@ %@ LIMIT ?"), CFSTR("SELECT ROWID, guid, created_date, start_date, filename, uti, mime_type, transfer_state, is_outgoing, user_info, transfer_name, total_bytes, is_sticker, sticker_user_info, attribution_info, hide_attachment, ck_sync_state, ck_server_change_token_blob, ck_record_id, original_guid, is_commsafety_sensitive, emoji_image_content_identifier, emoji_image_short_description FROM attachment "), v5, v7);

  return v8;
}

void sub_1ABC0B334(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  _BOOL4 v4;

  if (a2 == 1)
  {
    v4 = (sqlite3_value_int(*a3) & 0x403) != 0;
    sqlite3_result_int(a1, v4);
  }
  else
  {
    sqlite3_result_error(a1, "wrong number of arguments", -1);
  }
}

uint64_t sub_1ABC0B38C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a4, "length"))
  {
    v7 = CSDBSqliteConnectionPerformSQL();
    if (v7)
      v8 = v7 == 101;
    else
      v8 = 1;
    v9 = v8;
    if (v7 && (v10 = v7, v7 != 101))
    {
      v13 = IMLogHandleForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = sqlite3_errmsg(*(sqlite3 **)(a1 + 8));
        v16 = 138412802;
        v17 = a2;
        v18 = 1024;
        v19 = v10;
        v20 = 2080;
        v21 = v15;
        _os_log_error_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_ERROR, "%@ SQLiteResult: %d SQLite Message: %s", (uint8_t *)&v16, 0x1Cu);
      }
    }
    else
    {
      v11 = IMLogHandleForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v16 = 138412290;
        v17 = a3;
        _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "%@", (uint8_t *)&v16, 0xCu);
      }
    }
  }
  else
  {
    v12 = IMLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_1ABC623A0(v12);
    return 1;
  }
  return v9;
}

uint64_t sub_1ABC0B52C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint8_t v10[16];

  v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Updating madrid indices.", v10, 2u);
  }
  v3 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_handle_index."), (uint64_t)CFSTR("Created index madrid_handle_index."), CFSTR("CREATE INDEX madrid_handle_index ON message(madrid_handle);"));
  v4 = v3 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_guid_index."), (uint64_t)CFSTR("Created index madrid_guid_index."), CFSTR("CREATE INDEX madrid_guid_index ON message(madrid_guid);"));
  v5 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_roomname_index."), (uint64_t)CFSTR("Created index madrid_roomname_index."), CFSTR("CREATE INDEX madrid_roomname_index ON message(madrid_roomname);"));
  v6 = v4 & v5 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_service_index."), (uint64_t)CFSTR("Created index madrid_service_index."), CFSTR("CREATE INDEX madrid_service_index ON message(madrid_service);"));
  v7 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_account_index."), (uint64_t)CFSTR("Created index madrid_account_index."), CFSTR("CREATE INDEX madrid_account_index ON message(madrid_account);"));
  v8 = v7 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_url_index."), (uint64_t)CFSTR("Created index madrid_url_index."), CFSTR("CREATE INDEX madrid_url_index ON message(madrid_url);"));
  return v6 & v8 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_flags_index."), (uint64_t)CFSTR("Created index madrid_flags_index."), CFSTR("CREATE INDEX madrid_flags_index ON message(madrid_flags);"));
}

uint64_t sub_1ABC0B6A0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint8_t v11[16];

  v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Nuking bogus madrid message indices.", v11, 2u);
  }
  v3 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to drop index madrid_handle_index."), (uint64_t)CFSTR("Dropped index madrid_handle_index."), CFSTR("DROP INDEX madrid_handle_index;"));
  v4 = v3 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to drop index madrid_roomname_index."), (uint64_t)CFSTR("Dropped index madrid_roomname_index."), CFSTR("DROP INDEX madrid_roomname_index;"));
  v5 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to drop index madrid_service_index."), (uint64_t)CFSTR("Dropped index madrid_service_index."), CFSTR("DROP INDEX madrid_service_index;"));
  v6 = v4 & v5 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to drop index madrid_account_index."), (uint64_t)CFSTR("Dropped index madrid_account_index."), CFSTR("DROP INDEX madrid_account_index;"));
  v7 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to drop index madrid_url_index."), (uint64_t)CFSTR("Dropped index madrid_url_index."), CFSTR("DROP INDEX madrid_url_index;"));
  v8 = v7 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to drop index madrid_flags_index."), (uint64_t)CFSTR("Dropped index madrid_flags_index."), CFSTR("DROP INDEX madrid_flags_index;"));
  v9 = v6 & v8 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_roomname_service_index."), (uint64_t)CFSTR("Created index madrid_roomname_service_index."), CFSTR("CREATE INDEX madrid_roomname_service_index ON message(madrid_roomname, madrid_service);"));
  return v9 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_handle_service_index."), (uint64_t)CFSTR("Created index madrid_handle_service_index."), CFSTR("CREATE INDEX madrid_handle_service_index ON message(madrid_handle, madrid_service);"));
}

uint64_t sub_1ABC0B838(uint64_t a1)
{
  int v2;
  int v3;

  v2 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_attachment_message_index."), (uint64_t)CFSTR("Created index madrid_attachment_message_index."), CFSTR("CREATE INDEX IF NOT EXISTS madrid_attachment_message_index ON madrid_attachment(message_id);"));
  v3 = v2 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_attachment_guid_index."), (uint64_t)CFSTR("Created index madrid_attachment_guid_index."), CFSTR("CREATE INDEX IF NOT EXISTS madrid_attachment_guid_index ON madrid_attachment(attachment_guid);"));
  return v3 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_attachment_filename_index."), (uint64_t)CFSTR("Created index madrid_attachment_filename_index."), CFSTR("CREATE INDEX IF NOT EXISTS madrid_attachment_filename_index ON madrid_attachment(filename);"));
}

uint64_t sub_1ABC0B8BC(uint64_t a1)
{
  int v2;

  v2 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create madrid_attachment table"), (uint64_t)CFSTR("Created madrid_attachment table"), CFSTR("CREATE TABLE IF NOT EXISTS madrid_attachment (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, attachment_guid TEXT, created_date INTEGER, start_date INTEGER, filename TEXT, uti_type TEXT, mime_type TEXT, transfer_state INTEGER, is_incoming INTEGER, message_id INTEGER)"));
  return v2 & sub_1ABC0B838(a1);
}

uint64_t sub_1ABC0B904(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v2 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create madrid_chat table"), (uint64_t)CFSTR("Created madrid_chat table"), CFSTR("CREATE TABLE madrid_chat (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, style INTEGER, state INTEGER, account_id TEXT, properties BLOB, chat_identifier TEXT, service_name TEXT, guid TEXT, room_name TEXT, account_login TEXT, participants BLOB)"));
  v3 = v2 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_chat_style_index."), (uint64_t)CFSTR("Created index madrid_chat_style_index."), CFSTR("CREATE INDEX IF NOT EXISTS madrid_chat_style_index ON madrid_chat(style)"));
  v4 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_chat_state_index."), (uint64_t)CFSTR("Created index madrid_chat_state_index."), CFSTR("CREATE INDEX IF NOT EXISTS madrid_chat_state_index ON madrid_chat(state)"));
  v5 = v3 & v4 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_chat_account_id_index."), (uint64_t)CFSTR("Created index madrid_chat_account_id_index."), CFSTR("CREATE INDEX IF NOT EXISTS madrid_chat_account_id_index ON madrid_chat(account_id)"));
  v6 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_chat_chat_identifier_index."), (uint64_t)CFSTR("Created index madrid_chat_chat_identifier_index."), CFSTR("CREATE INDEX IF NOT EXISTS madrid_chat_chat_identifier_index ON madrid_chat(chat_identifier)"));
  v7 = v6 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_chat_service_name_index."), (uint64_t)CFSTR("Created index madrid_chat_service_name_index."), CFSTR("CREATE INDEX IF NOT EXISTS madrid_chat_service_name_index ON madrid_chat(service_name)"));
  v8 = v5 & v7 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_chat_guid_index."), (uint64_t)CFSTR("Created index madrid_chat_guid_index."), CFSTR("CREATE INDEX IF NOT EXISTS madrid_chat_guid_index ON madrid_chat(guid)"));
  v9 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_chat_room_name_index."), (uint64_t)CFSTR("Created index madrid_chat_room_name_index."), CFSTR("CREATE INDEX IF NOT EXISTS madrid_chat_room_name_index ON madrid_chat(room_name)"));
  return v8 & v9 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index madrid_chat_account_login_index."), (uint64_t)CFSTR("Created index madrid_chat_account_login_index."), CFSTR("CREATE INDEX IF NOT EXISTS madrid_chat_account_login_index ON madrid_chat(account_login)"));
}

uint64_t sub_1ABC0BA74(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Failed to drop table: %@"), a2);
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Successfully dropped table: %@"), a2);
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("DROP TABLE IF EXISTS %@;"), a2);
  v7 = sub_1ABC0B38C(a1, (uint64_t)v4, (uint64_t)v5, v6);

  return v7;
}

uint64_t sub_1ABC0BB2C(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Failed to drop index: %@"), a2);
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Successfully dropped index: %@"), a2);
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("DROP INDEX IF EXISTS %@;"), a2);
  v7 = sub_1ABC0B38C(a1, (uint64_t)v4, (uint64_t)v5, v6);

  return v7;
}

uint64_t sub_1ABC0BBE4(uint64_t a1, uint64_t a2, void *a3)
{
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v6 = sub_1ABC0BB2C(a1, a2);
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Failed to create index: %@"), a2);
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Successfully created index: %@"), a2);
  v9 = v6 & sub_1ABC0B38C(a1, (uint64_t)v7, (uint64_t)v8, a3);

  return v9;
}

uint64_t sub_1ABC0BC88(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column subject."), (uint64_t)CFSTR("Added column subject."), CFSTR("ALTER TABLE message ADD COLUMN subject TEXT"));
  v3 = v2 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column country."), (uint64_t)CFSTR("Added column country."), CFSTR("ALTER TABLE message ADD COLUMN country TEXT"));
  v4 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column headers."), (uint64_t)CFSTR("Added column headers."), CFSTR("ALTER TABLE message ADD COLUMN headers BLOB"));
  v5 = v3 & v4 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column recipients."), (uint64_t)CFSTR("Added column recipients."), CFSTR("ALTER TABLE message ADD COLUMN recipients BLOB"));
  v6 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column hash."), (uint64_t)CFSTR("Added column hash."), CFSTR("ALTER TABLE msg_group ADD COLUMN hash INTEGER"));
  v7 = v6 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add index hash_index."), (uint64_t)CFSTR("Added index hash_index."), CFSTR("CREATE INDEX hash_index ON msg_group(hash)"));
  v8 = v5 & v7 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column country."), (uint64_t)CFSTR("Added column country."), CFSTR("ALTER TABLE group_member ADD COLUMN country TEXT"));
  v9 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column content_id."), (uint64_t)CFSTR("Added column content_id."), CFSTR("ALTER TABLE msg_pieces ADD COLUMN content_id TEXT;"));
  v10 = v9 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column content_loc."), (uint64_t)CFSTR("Added column content_loc."), CFSTR("ALTER TABLE msg_pieces ADD COLUMN content_loc TEXT;"));
  return v8 & v10 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column headers."), (uint64_t)CFSTR("Added column headers."), CFSTR("ALTER TABLE msg_pieces ADD COLUMN headers BLOB;"));
}

uint64_t sub_1ABC0BE2C(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v2 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column madrid_attributedBody."), (uint64_t)CFSTR("Added column madrid_attributedBody."), CFSTR("ALTER TABLE message ADD COLUMN madrid_attributedBody BLOB"));
  v3 = v2 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column madrid_handle."), (uint64_t)CFSTR("Added column madrid_handle."), CFSTR("ALTER TABLE message ADD COLUMN madrid_handle TEXT"));
  v4 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column madrid_version."), (uint64_t)CFSTR("Added column madrid_version."), CFSTR("ALTER TABLE message ADD COLUMN madrid_version INTEGER"));
  v5 = v3 & v4 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column madrid_guid."), (uint64_t)CFSTR("Added column madrid_guid."), CFSTR("ALTER TABLE message ADD COLUMN madrid_guid TEXT"));
  v6 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column madrid_type."), (uint64_t)CFSTR("Added column madrid_type."), CFSTR("ALTER TABLE message ADD COLUMN madrid_type INTEGER"));
  v7 = v6 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column madrid_roomname."), (uint64_t)CFSTR("Added column madrid_roomname."), CFSTR("ALTER TABLE message ADD COLUMN madrid_roomname TEXT"));
  v8 = v5 & v7 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column madrid_service."), (uint64_t)CFSTR("Added column madrid_service."), CFSTR("ALTER TABLE message ADD COLUMN madrid_service TEXT"));
  v9 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column madrid_account."), (uint64_t)CFSTR("Added column madrid_account."), CFSTR("ALTER TABLE message ADD COLUMN madrid_account TEXT"));
  v10 = v9 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column madrid_flags."), (uint64_t)CFSTR("Added column madrid_flags."), CFSTR("ALTER TABLE message ADD COLUMN madrid_flags INTEGER"));
  v11 = v10 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column madrid_attachmentInfo."), (uint64_t)CFSTR("Added column madrid_attachmentInfo."), CFSTR("ALTER TABLE message ADD COLUMN madrid_attachmentInfo BLOB;"));
  v12 = v8 & v11 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column madrid_url."), (uint64_t)CFSTR("Added column madrid_url."), CFSTR("ALTER TABLE message ADD COLUMN madrid_url TEXT"));
  v13 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column madrid_error."), (uint64_t)CFSTR("Added column madrid_error."), CFSTR("ALTER TABLE message ADD COLUMN madrid_error INTEGER"));
  return v12 & v13 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column is_madrid."), (uint64_t)CFSTR("Added column is_madrid."), CFSTR("ALTER TABLE message ADD COLUMN is_madrid INTEGER;"));
}

uint64_t sub_1ABC0C030(uint64_t a1)
{
  int v2;
  int v3;

  v2 = sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to add column read."), (uint64_t)CFSTR("Added column read."), CFSTR("ALTER TABLE message ADD COLUMN read INTEGER"));
  v3 = v2 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to update flags."), (uint64_t)CFSTR("Updated flags."), CFSTR("UPDATE message SET read = ((flags >> 1) & 1)"));
  return v3 & sub_1ABC0B38C(a1, (uint64_t)CFSTR("Failed to create index update message_groupid_read_index."), (uint64_t)CFSTR("Created index message_groupid_read_index."), CFSTR("CREATE INDEX message_groupid_read_index ON message(group_id, read)"));
}

uint64_t sub_1ABC0C0B4()
{
  NSObject *v0;
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint32_t v6;
  NSObject *v8;
  _DWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v0 = IMLogHandleForCategory();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    LOWORD(v9[0]) = 0;
    _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "Create tables...", (uint8_t *)v9, 2u);
  }
  CSDBRecordStoreCreateTablesForClass();
  CSDBRecordStoreCreateTablesForClass();
  CSDBRecordStoreCreateTablesForClass();
  v1 = CSDBSqliteConnectionStatementForSQL();
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = CSDBSqliteStatementPerform();
      CSDBSqliteStatementReset();
      if (v2 != 101)
      {
        if (v2)
        {
          v8 = IMLogHandleForCategory();
          if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
            goto LABEL_10;
          v9[0] = 67109120;
          v9[1] = v2;
          v4 = "Failed to create table for handle. SQLiteError: %d";
          v5 = v8;
          v6 = 8;
          goto LABEL_9;
        }
      }
    }
  }
  v3 = IMLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    LOWORD(v9[0]) = 0;
    v4 = "Table for handle was created successfully.";
    v5 = v3;
    v6 = 2;
LABEL_9:
    _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, v4, (uint8_t *)v9, v6);
  }
LABEL_10:
  sub_1ABC0C27C();
  sub_1ABC0C398();
  sub_1ABC0C4B4();
  return 1;
}

void sub_1ABC0C27C()
{
  uint64_t v0;
  int v1;
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  uint32_t v5;
  NSObject *v6;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v0 = CSDBSqliteConnectionStatementForSQL();
  if (!v0 || !*(_QWORD *)(v0 + 8) || (v1 = CSDBSqliteStatementPerform(), CSDBSqliteStatementReset(), v1 == 101) || !v1)
  {
    v2 = IMLogHandleForCategory();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      return;
    LOWORD(v7[0]) = 0;
    v3 = "Join table for Message <--> Attachment was created successfully.";
    v4 = v2;
    v5 = 2;
    goto LABEL_7;
  }
  v6 = IMLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109120;
    v7[1] = v1;
    v3 = "Failed to create join table for Message <--> Attachment. SQLiteError: %d";
    v4 = v6;
    v5 = 8;
LABEL_7:
    _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, v3, (uint8_t *)v7, v5);
  }
}

void sub_1ABC0C398()
{
  uint64_t v0;
  int v1;
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  uint32_t v5;
  NSObject *v6;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v0 = CSDBSqliteConnectionStatementForSQL();
  if (!v0 || !*(_QWORD *)(v0 + 8) || (v1 = CSDBSqliteStatementPerform(), CSDBSqliteStatementReset(), v1 == 101) || !v1)
  {
    v2 = IMLogHandleForCategory();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      return;
    LOWORD(v7[0]) = 0;
    v3 = "Join table for Chat <--> Handle was created successfully.";
    v4 = v2;
    v5 = 2;
    goto LABEL_7;
  }
  v6 = IMLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109120;
    v7[1] = v1;
    v3 = "Failed to create join table for Chat <--> Handle. SQLiteError: %d";
    v4 = v6;
    v5 = 8;
LABEL_7:
    _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, v3, (uint8_t *)v7, v5);
  }
}

void sub_1ABC0C4B4()
{
  uint64_t v0;
  int v1;
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  uint32_t v5;
  NSObject *v6;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v0 = CSDBSqliteConnectionStatementForSQL();
  if (!v0 || !*(_QWORD *)(v0 + 8) || (v1 = CSDBSqliteStatementPerform(), CSDBSqliteStatementReset(), v1 == 101) || !v1)
  {
    v2 = IMLogHandleForCategory();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      return;
    LOWORD(v7[0]) = 0;
    v3 = "Join table for Chat <--> Message was created successfully.";
    v4 = v2;
    v5 = 2;
    goto LABEL_7;
  }
  v6 = IMLogHandleForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109120;
    v7[1] = v1;
    v3 = "Failed to create join table for Chat <--> Message. SQLiteError: %d";
    v4 = v6;
    v5 = 8;
LABEL_7:
    _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, v3, (uint8_t *)v7, v5);
  }
}

uint64_t IMDLegacyMigrator(uint64_t *a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t result;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  int v18;
  char v19;
  NSObject *v20;
  int v21;
  int v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  int v37;
  NSObject *v38;
  NSObject *v39;
  int v40;
  int v41;
  char v42;
  int v43;
  NSObject *v44;
  NSObject *v45;
  int v46;
  NSObject *v47;
  int v48;
  NSObject *v49;
  NSObject *v50;
  int v51;
  NSObject *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  NSObject *v65;
  NSObject *v66;
  int v67;
  NSObject *v68;
  NSObject *v69;
  NSObject *v70;
  NSObject *v71;
  int v72;
  NSObject *v73;
  NSObject *v74;
  int v75;
  NSObject *v76;
  NSObject *v77;
  int v78;
  NSObject *v79;
  NSObject *v80;
  int v81;
  NSObject *v82;
  NSObject *v83;
  NSObject *v84;
  NSObject *v85;
  int v86;
  NSObject *v87;
  int v88;
  int v89;
  int v90;
  NSObject *v91;
  NSObject *v92;
  int v93;
  NSObject *v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  NSObject *v102;
  NSObject *v103;
  int v104;
  NSObject *v105;
  int v106;
  int v107;
  int v108;
  NSObject *v109;
  int v110;
  NSObject *v111;
  int v112;
  int v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC6261C();
  }
  v5 = *a1;
  v6 = a1[1];
  if (!v5 && (v7 = IMLogHandleForCategory(), os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)))
  {
    sub_1ABC62580();
    if (v6)
      goto LABEL_9;
  }
  else if (v6)
  {
    goto LABEL_9;
  }
  v8 = IMLogHandleForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    sub_1ABC624E4();
LABEL_9:
  if (a2 - 2 <= 2)
  {
    CSDBSqliteConnectionBeginTransactionType();
    v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1ABC62458(a2, v9);
    goto LABEL_12;
  }
  result = 1;
  if ((int)a2 < 5 || (int)a2 > 18016)
    return result;
  CSDBSqliteDatabaseRegisterFunctionForDB();
  CSDBSqliteConnectionBeginTransactionType();
  if (a2 == 5)
  {
    CSDBSqliteDatabaseSetVersion();
    v12 = IMLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "Updating DB to sort by ROWID instead of date.", (uint8_t *)&v112, 2u);
    }
    v13 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB Migration failed while dropping message_group_index."), (uint64_t)CFSTR("Successfully dropped index message_group_index."), CFSTR("DROP INDEX message_group_index;"));
    v14 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB Migration failed while creating message_group_index."), (uint64_t)CFSTR("Created index message_group_index"), CFSTR("CREATE INDEX message_group_index ON message(group_id, ROWID);"));
    if (!v13 || !v14)
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_25;
  }
  if (a2 <= 6)
  {
LABEL_25:
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_26;
  }
  if (a2 == 7)
  {
LABEL_26:
    CSDBSqliteDatabaseSetVersion();
    v15 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("Failed to create table msg_pieces."), (uint64_t)CFSTR("Created table msg_pieces."), CFSTR("CREATE TABLE IF NOT EXISTS msg_pieces (ROWID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, message_id INTEGER, data BLOB, part_id INTEGER, preview_part INTEGER, content_type TEXT, height INTEGER, version INTEGER, flags INTEGER, content_id TEXT, content_loc TEXT, headers BLOB);"));
    v16 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("Failed to create index pieces_message_index."), (uint64_t)CFSTR("Created index pieces_message_index."), CFSTR("CREATE INDEX pieces_message_index ON msg_pieces(message_id);"));
    if (!v15 || !v16)
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_29;
  }
  if (a2 <= 8)
  {
LABEL_29:
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1ABC0BC88(v6))
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_31;
  }
  if (a2 == 10)
  {
    CSDBSqliteDatabaseSetVersion();
    if ((sub_1ABC0C030(v6) & 1) == 0)
      goto LABEL_12;
LABEL_32:
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_33;
  }
  if (a2 == 9)
  {
LABEL_31:
    CSDBSqliteDatabaseSetVersion();
    if ((sub_1ABC0C030(v6) & 1) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
  if (a2 < 0xC)
  {
LABEL_33:
    v17 = IMLogHandleForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v17, OS_LOG_TYPE_INFO, "Updating DB to support madrid.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    v18 = sub_1ABC0BE2C(v6);
    v19 = sub_1ABC0B52C(v6);
    if (!v18 || (v19 & 1) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
  if (a2 == 12)
  {
    v39 = IMLogHandleForCategory();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v39, OS_LOG_TYPE_INFO, "Updating DB from version 12 to current.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    v40 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB Migration failed adding madrid_error column to message table."), (uint64_t)CFSTR("Added madrid_error column."), CFSTR("ALTER TABLE message ADD COLUMN madrid_error INTEGER;"));
    v41 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB Migration failed adding is_madrid column to message table."), (uint64_t)CFSTR("Added column is_madrid"), CFSTR("ALTER TABLE message ADD COLUMN is_madrid INTEGER;"));
    v42 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB Migration failed creating index madrid_flags_index."), (uint64_t)CFSTR("Added index madrid_flags_index."), CFSTR("CREATE INDEX madrid_flags_index ON message(madrid_flags);"));
    if (!v40 || !v41 || (v42 & 1) == 0)
      goto LABEL_12;
LABEL_37:
    CSDBSqliteDatabaseSetVersion();
LABEL_38:
    CSDBSqliteDatabaseSetVersion();
    v20 = IMLogHandleForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v20, OS_LOG_TYPE_INFO, "Updating DB from version 13 to current.", (uint8_t *)&v112, 2u);
    }
    v21 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB Migration failed adding column madrid_date_read."), (uint64_t)CFSTR("Added column madrid_date_read."), CFSTR("ALTER TABLE message ADD COLUMN madrid_date_read INTEGER;"));
    v22 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB Migration failed adding column madrid_date_delivered."), (uint64_t)CFSTR("Added column madrid_date_delivered."), CFSTR("ALTER TABLE message ADD COLUMN madrid_date_delivered INTEGER;"));
    if (!v21 || !v22)
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_43;
  }
  if (a2 < 0xE)
    goto LABEL_38;
  if (a2 == 14)
  {
LABEL_43:
    v23 = IMLogHandleForCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v23, OS_LOG_TYPE_INFO, "Updating DB from version 14 to current.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1ABC0B8BC(v6))
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_47;
  }
  if (a2 <= 0xF)
  {
LABEL_47:
    CSDBSqliteDatabaseSetVersion();
LABEL_48:
    v24 = IMLogHandleForCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v24, OS_LOG_TYPE_INFO, "Adding index for group_id on group_member", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB Migration failed adding index group_id_index"), (uint64_t)CFSTR("Added index group_id_index"), CFSTR("CREATE INDEX group_id_index ON group_member(group_id);")))
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_52;
  }
  if (a2 == 16)
    goto LABEL_48;
  if (a2 <= 0x11)
  {
LABEL_52:
    v25 = IMLogHandleForCategory();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v25, OS_LOG_TYPE_INFO, "Adding support for Chats and Participants.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1ABC0B904(v6))
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_56;
  }
  if (a2 == 18)
  {
LABEL_56:
    v26 = IMLogHandleForCategory();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v26, OS_LOG_TYPE_INFO, "Ensuring sanity of is_madrid column.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB Migration failed updating the values for is_madrid."), (uint64_t)CFSTR("Updated values for is_madrid."), CFSTR("UPDATE message SET is_madrid = 0 WHERE is_madrid IS NULL;")))
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_60;
  }
  if (a2 <= 0x13)
  {
LABEL_60:
    v27 = IMLogHandleForCategory();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v27, OS_LOG_TYPE_INFO, "Cleaning message indices for iMessage.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1ABC0B6A0(v6))
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_64;
  }
  if (a2 == 20)
  {
LABEL_64:
    v28 = IMLogHandleForCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v28, OS_LOG_TYPE_INFO, "Adding column for iMessage Account GUID", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB Migration failed adding column madrid_account_guid."), (uint64_t)CFSTR("Added column madrid_account_guid."), CFSTR("ALTER TABLE message ADD COLUMN madrid_account_guid TEXT;")))
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_68;
  }
  if (a2 <= 0x15)
  {
LABEL_68:
    v29 = IMLogHandleForCategory();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v29, OS_LOG_TYPE_INFO, "Moving old tables to *_legacy and adding tables for the new schema.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    v30 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to rename group_member table."), (uint64_t)CFSTR("Renamed group_member table."), CFSTR("ALTER TABLE group_member RENAME TO group_member_legacy;"));
    v31 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to rename madrid_attachment table."), (uint64_t)CFSTR("Renamed madrid_attachment table."), CFSTR("ALTER TABLE madrid_attachment RENAME TO madrid_attachment_legacy;"));
    v32 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to rename madrid_chat table."), (uint64_t)CFSTR("Renamed madrid_chat table."), CFSTR("ALTER TABLE madrid_chat RENAME TO madrid_chat_legacy;"));
    v33 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to rename group_member table."), (uint64_t)CFSTR("Renamed message table."), CFSTR("ALTER TABLE message RENAME TO message_legacy;"));
    v34 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to rename msg_group table."), (uint64_t)CFSTR("Renamed msg_group table."), CFSTR("ALTER TABLE msg_group RENAME TO msg_group_legacy;"));
    v35 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to rename msg_pieces table."), (uint64_t)CFSTR("Renamed msg_pieces table."), CFSTR("ALTER TABLE msg_pieces RENAME TO msg_pieces_legacy;"));
    sub_1ABC0C0B4();
    v36 = _IMDSMSDatabaseMigrateData_21_22(v5, v6);
    if (!v30 || !v31 || !v32 || !v33 || !v34 || !v35 || (v36 & 1) == 0)
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_78;
  }
  if (a2 == 22)
  {
LABEL_78:
    CSDBSqliteDatabaseSetVersion();
    v37 = CSDBSqliteConnectionPerformSQL();
    if ((v37 - 100) >= 2 && v37)
    {
      if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column is_archived to the chat table."), (uint64_t)CFSTR("Added is_archived column to the chat table."), CFSTR("ALTER TABLE chat ADD COLUMN is_archived DEFAULT 0")))goto LABEL_12;
    }
    else
    {
      v38 = IMLogHandleForCategory();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1ABB60000, v38, OS_LOG_TYPE_INFO, "The is_archived column already exists on chat, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_141;
  }
  if (a2 <= 0x17)
  {
LABEL_141:
    CSDBSqliteDatabaseSetVersion();
    v43 = CSDBSqliteConnectionPerformSQL();
    v44 = IMLogHandleForCategory();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
    {
      v112 = 67109120;
      v113 = v43;
      _os_log_impl(&dword_1ABB60000, v44, OS_LOG_TYPE_INFO, "SQLite result was %d", (uint8_t *)&v112, 8u);
    }
    if (v43 != 101 && v43)
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_146;
  }
  if (a2 == 24)
  {
LABEL_146:
    CSDBSqliteDatabaseSetVersion();
    v45 = IMLogHandleForCategory();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v45, OS_LOG_TYPE_INFO, "Fixing missing text in group field", (uint8_t *)&v112, 2u);
    }
    if ((_IMDSMSDatabaseMigrateData_24_25() & 1) == 0)
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_150;
  }
  if (a2 <= 0x19)
  {
LABEL_150:
    CSDBSqliteDatabaseSetVersion();
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_151;
  }
  if (a2 == 26)
  {
LABEL_151:
    CSDBSqliteDatabaseSetVersion();
    CSDBSqliteDatabaseSetVersion();
LABEL_152:
    CSDBSqliteDatabaseSetVersion();
    v46 = CSDBSqliteConnectionPerformSQL();
    if ((v46 - 100) >= 2 && v46)
    {
      if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column was_data_detected to the message table."), (uint64_t)CFSTR("Added was_data_detected column to the message table."), CFSTR("ALTER TABLE message ADD COLUMN was_data_detected INTEGER DEFAULT 0")))goto LABEL_12;
    }
    else
    {
      v47 = IMLogHandleForCategory();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1ABB60000, v47, OS_LOG_TYPE_INFO, "The was_data_detected column already exists on message, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_158;
  }
  if (a2 <= 0x1B)
    goto LABEL_152;
  if (a2 == 28)
  {
LABEL_158:
    CSDBSqliteDatabaseSetVersion();
    v48 = CSDBSqliteConnectionPerformSQL();
    v49 = IMLogHandleForCategory();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      v112 = 67109120;
      v113 = v48;
      _os_log_impl(&dword_1ABB60000, v49, OS_LOG_TYPE_INFO, "SQLite result was %d", (uint8_t *)&v112, 8u);
    }
    if ((v48 - 100) >= 2 && v48)
    {
      if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column last_addressed_handle to the chat table."), (uint64_t)CFSTR("Added last_addressed_handle column to the chat table."), CFSTR("ALTER TABLE chat ADD COLUMN last_addressed_handle TEXT")))goto LABEL_12;
    }
    else
    {
      v50 = IMLogHandleForCategory();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1ABB60000, v50, OS_LOG_TYPE_INFO, "The last_addressed_handle column already exists on chat, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_166;
  }
  if (a2 <= 0x1D)
  {
LABEL_166:
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to delete V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP."), (uint64_t)CFSTR("Dropped unneeded V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP."), CFSTR("DROP TABLE IF EXISTS V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP")))goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_168;
  }
  if (a2 == 30)
  {
LABEL_168:
    CSDBSqliteDatabaseSetVersion();
    v51 = CSDBSqliteConnectionPerformSQL();
    if ((v51 - 100) >= 2 && v51)
    {
      if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column was_deduplicated to the message table."), (uint64_t)CFSTR("Added was_deduplicated column to the message table."), CFSTR("ALTER TABLE message ADD COLUMN was_deduplicated INTEGER DEFAULT 0")))goto LABEL_12;
    }
    else
    {
      v52 = IMLogHandleForCategory();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1ABB60000, v52, OS_LOG_TYPE_INFO, "The was_deduplicated column already exists on message, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_174;
  }
  if (a2 <= 0x1F)
  {
LABEL_174:
    CSDBSqliteDatabaseSetVersion();
    if (!sub_1ABC0BBE4(v6, (uint64_t)CFSTR("message_idx_is_read"), CFSTR("CREATE INDEX message_idx_is_read ON message(is_read, is_from_me, is_finished);")))
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_176;
  }
  if (a2 == 32)
  {
LABEL_176:
    CSDBSqliteDatabaseSetVersion();
    v53 = sub_1ABC0BBE4(v6, (uint64_t)CFSTR("message_idx_failed"), CFSTR("CREATE INDEX message_idx_failed ON message(is_finished, is_from_me, error)"));
    v54 = sub_1ABC0BBE4(v6, (uint64_t)CFSTR("message_idx_handle"), CFSTR("CREATE INDEX IF NOT EXISTS message_idx_handle ON message(handle_id, date);"));
    v55 = sub_1ABC0BBE4(v6, (uint64_t)CFSTR("chat_idx_identifier"), CFSTR("CREATE INDEX IF NOT EXISTS chat_idx_identifier ON chat(chat_identifier)"));
    v56 = sub_1ABC0BBE4(v6, (uint64_t)CFSTR("chat_idx_room_name"), CFSTR("CREATE INDEX IF NOT EXISTS chat_idx_room_name ON chat(room_name)"));
    v57 = sub_1ABC0BBE4(v6, (uint64_t)CFSTR("message_idx_was_downgraded"), CFSTR("CREATE INDEX IF NOT EXISTS message_idx_was_downgraded ON message(was_downgraded);"));
    v58 = sub_1ABC0BBE4(v6, (uint64_t)CFSTR("chat_message_join_idx_message_id"), CFSTR("CREATE INDEX IF NOT EXISTS chat_message_join_idx_message_date_id_chat_id ON chat_message_join(chat_id, message_date, message_id)"));
    if (!v53 || !v54 || !v55 || !v56 || !v57 || !v58)
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_183;
  }
  if (a2 <= 0x21)
  {
LABEL_183:
    CSDBSqliteDatabaseSetVersion();
    v59 = sub_1ABC0BA74(v6, (uint64_t)CFSTR("madrid_attachment_legacy"));
    v60 = sub_1ABC0BA74(v6, (uint64_t)CFSTR("group_member_legacy"));
    v61 = sub_1ABC0BA74(v6, (uint64_t)CFSTR("madrid_chat_legacy"));
    v62 = sub_1ABC0BA74(v6, (uint64_t)CFSTR("message_legacy"));
    v63 = sub_1ABC0BA74(v6, (uint64_t)CFSTR("msg_group_legacy"));
    v64 = sub_1ABC0BA74(v6, (uint64_t)CFSTR("msg_pieces_legacy"));
    if (!v59 || !v60 || !v61 || !v62 || !v63 || !v64)
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_190;
  }
  if (a2 == 34)
  {
LABEL_190:
    CSDBSqliteDatabaseSetVersion();
    v65 = IMLogHandleForCategory();
    if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v65, OS_LOG_TYPE_INFO, "Fixing busted chat identifiers for group chats", (uint8_t *)&v112, 2u);
    }
    if ((_IMDSMSDatabaseMigrateData_34_35() & 1) == 0)
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_194;
  }
  if (a2 <= 0x23)
  {
LABEL_194:
    CSDBSqliteDatabaseSetVersion();
    v66 = IMLogHandleForCategory();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v66, OS_LOG_TYPE_INFO, "Adding attachment is_outgoing column", (uint8_t *)&v112, 2u);
    }
    v67 = CSDBSqliteConnectionPerformSQL();
    if ((v67 - 100) >= 2 && v67)
    {
      if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column is_outgoing to the attachment table."), (uint64_t)CFSTR("Added is_outgoing column to the attachment table."), CFSTR("ALTER TABLE attachment ADD COLUMN is_outgoing INTEGER DEFAULT 0")))goto LABEL_12;
    }
    else
    {
      v68 = IMLogHandleForCategory();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1ABB60000, v68, OS_LOG_TYPE_INFO, "The is_outgoing column already exists on attachment, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_202;
  }
  if (a2 == 36)
  {
LABEL_202:
    CSDBSqliteDatabaseSetVersion();
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_203;
  }
  if (a2 <= 0x25)
  {
LABEL_203:
    v69 = IMLogHandleForCategory();
    if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v69, OS_LOG_TYPE_INFO, "Fixing up uncanonicalized identifiers that had previously been incorrectly treated as canonicalized.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_206;
  }
  if (a2 == 38)
  {
LABEL_206:
    v70 = IMLogHandleForCategory();
    if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v70, OS_LOG_TYPE_INFO, "Fixing up uncanonicalized handle identifiers that failed to migrate due to conflicts.", (uint8_t *)&v112, 2u);
    }
    CSDBSqliteDatabaseSetVersion();
    if ((_IMDSMSDatabaseMigrateData_38_6100() & 1) == 0)
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_210;
  }
  if (a2 <= 0x17D4)
  {
LABEL_210:
    CSDBSqliteDatabaseSetVersion();
    v71 = IMLogHandleForCategory();
    if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v71, OS_LOG_TYPE_INFO, "Adding attachment user_info column", (uint8_t *)&v112, 2u);
    }
    v72 = CSDBSqliteConnectionPerformSQL();
    if ((v72 - 100) >= 2 && v72)
    {
      if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column user_info to the attachment table."), (uint64_t)CFSTR("Added user_info column to the attachment table."), CFSTR("ALTER TABLE attachment ADD COLUMN user_info BLOB")))goto LABEL_12;
    }
    else
    {
      v73 = IMLogHandleForCategory();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1ABB60000, v73, OS_LOG_TYPE_INFO, "The user_info column already exists on attachment, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_218;
  }
  if (a2 <= 0x1B58)
  {
LABEL_218:
    CSDBSqliteDatabaseSetVersion();
    v74 = IMLogHandleForCategory();
    if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v74, OS_LOG_TYPE_INFO, "Adding attachment transfer_name column", (uint8_t *)&v112, 2u);
    }
    v75 = CSDBSqliteConnectionPerformSQL();
    if ((v75 - 100) >= 2 && v75)
    {
      if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column transfer_name to the attachment table."), (uint64_t)CFSTR("Added transfer_name column to the attachment table."), CFSTR("ALTER TABLE attachment ADD COLUMN transfer_name TEXT")))goto LABEL_12;
    }
    else
    {
      v76 = IMLogHandleForCategory();
      if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1ABB60000, v76, OS_LOG_TYPE_INFO, "The transfer_name column already exists on attachment, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_226;
  }
  if (a2 == 7001)
  {
LABEL_226:
    CSDBSqliteDatabaseSetVersion();
    v77 = IMLogHandleForCategory();
    if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v77, OS_LOG_TYPE_INFO, "Adding chat display_name column", (uint8_t *)&v112, 2u);
    }
    v78 = CSDBSqliteConnectionPerformSQL();
    if ((v78 - 100) >= 2 && v78)
    {
      if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column display_name to the display_name table."), (uint64_t)CFSTR("Added display_name column to the display_name table."), CFSTR("ALTER TABLE chat ADD COLUMN display_name TEXT")))goto LABEL_12;
    }
    else
    {
      v79 = IMLogHandleForCategory();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1ABB60000, v79, OS_LOG_TYPE_INFO, "The display_name column already exists on chat, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_234;
  }
  if (a2 >> 2 <= 0x6D6)
  {
LABEL_234:
    CSDBSqliteDatabaseSetVersion();
    v80 = IMLogHandleForCategory();
    if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v80, OS_LOG_TYPE_INFO, "Adding attachment total_bytes column", (uint8_t *)&v112, 2u);
    }
    v81 = CSDBSqliteConnectionPerformSQL();
    if ((v81 - 100) >= 2 && v81)
    {
      if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column total_bytes to the attachment table."), (uint64_t)CFSTR("Added total_bytes column to the attachment table."), CFSTR("ALTER TABLE attachment ADD COLUMN total_bytes INTEGER DEFAULT -1")))goto LABEL_12;
    }
    else
    {
      v82 = IMLogHandleForCategory();
      if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1ABB60000, v82, OS_LOG_TYPE_INFO, "The transfer_name column already exists on attachment, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_242;
  }
  if (a2 == 7004)
  {
LABEL_242:
    CSDBSqliteDatabaseSetVersion();
    v83 = IMLogHandleForCategory();
    if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v83, OS_LOG_TYPE_INFO, "Purging orphaned messages", (uint8_t *)&v112, 2u);
    }
    if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("Purged orphaned messages failed :-(."), (uint64_t)CFSTR("Purged orphaned messages."), CFSTR("DELETE FROM message WHERE (SELECT 1 from chat_message_join cmj WHERE message.ROWID = cmj.message_id LIMIT 1) IS NULL;")))
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_246;
  }
  if (a2 >> 1 <= 0xDAE)
  {
LABEL_246:
    CSDBSqliteDatabaseSetVersion();
    v84 = IMLogHandleForCategory();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v84, OS_LOG_TYPE_INFO, "Purging orphaned messages", (uint8_t *)&v112, 2u);
    }
    if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("Purged orphaned messages failed :-(."), (uint64_t)CFSTR("Purged orphaned messages."), CFSTR("DELETE FROM message WHERE (SELECT 1 from chat_message_join cmj WHERE message.ROWID = cmj.message_id LIMIT 1) IS NULL;")))
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_250;
  }
  if (a2 == 7006)
  {
LABEL_250:
    CSDBSqliteDatabaseSetVersion();
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_251;
  }
  if (a2 <= 0x1F40)
  {
LABEL_251:
    CSDBSqliteDatabaseSetVersion();
    v85 = IMLogHandleForCategory();
    if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v85, OS_LOG_TYPE_INFO, "Adding message is_audio_message, is_played, and date_played column", (uint8_t *)&v112, 2u);
    }
    v86 = CSDBSqliteConnectionPerformSQL();
    if ((v86 - 100) >= 2 && v86)
    {
      v88 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column is_audio_message to the message table."), (uint64_t)CFSTR("Added is_audio_message column to the message table."), CFSTR("ALTER TABLE message ADD COLUMN is_audio_message INTEGER DEFAULT 0"));
      v89 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column is_played to the message table."), (uint64_t)CFSTR("Added is_played column to the message table."), CFSTR("ALTER TABLE message ADD COLUMN is_played INTEGER DEFAULT 0"));
      v90 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column date_played to the message table."), (uint64_t)CFSTR("Added date_played column to the message table."), CFSTR("ALTER TABLE message ADD COLUMN date_played INTEGER"));
      if (!v88 || !v89 || !v90)
        goto LABEL_12;
    }
    else
    {
      v87 = IMLogHandleForCategory();
      if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1ABB60000, v87, OS_LOG_TYPE_INFO, "The is_audio_message, is_played, and date_played columns already exist on message, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_261;
  }
  if (a2 == 8001)
  {
LABEL_261:
    CSDBSqliteDatabaseSetVersion();
    v91 = IMLogHandleForCategory();
    if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v91, OS_LOG_TYPE_INFO, "Purging orphaned messages - again", (uint8_t *)&v112, 2u);
    }
    if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("Purged orphaned messages failed :-(."), (uint64_t)CFSTR("Purged orphaned messages."), CFSTR("DELETE FROM message WHERE (SELECT 1 from chat_message_join cmj WHERE message.ROWID = cmj.message_id LIMIT 1) IS NULL;")))
      goto LABEL_12;
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_265;
  }
  if (a2 <= 0x1F42)
  {
LABEL_265:
    CSDBSqliteDatabaseSetVersion();
    v92 = IMLogHandleForCategory();
    if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v92, OS_LOG_TYPE_INFO, "Adding message item_type, other_handle, group_title, group_action_type, share_status, share_direction", (uint8_t *)&v112, 2u);
    }
    v93 = CSDBSqliteConnectionPerformSQL();
    if ((v93 - 100) >= 2 && v93)
    {
      v95 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column item_type to the message table."), (uint64_t)CFSTR("Added item_type column to the message table."), CFSTR("ALTER TABLE message ADD COLUMN item_type INTEGER DEFAULT 0"));
      v96 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column other_handle to the message table."), (uint64_t)CFSTR("Added other_handle column to the message table."), CFSTR("ALTER TABLE message ADD COLUMN other_handle INTEGER DEFAULT -1"));
      v97 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column group_title to the message table."), (uint64_t)CFSTR("Added group_title column to the message table."), CFSTR("ALTER TABLE message ADD COLUMN group_title TEXT"));
      v98 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column group_action_type to the message table."), (uint64_t)CFSTR("Added group_action_type column to the message table."), CFSTR("ALTER TABLE message ADD COLUMN group_action_type INTEGER DEFAULT 0"));
      v99 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column share_status to the message table."), (uint64_t)CFSTR("Added share_status column to the message table."), CFSTR("ALTER TABLE message ADD COLUMN share_status INTEGER"));
      v100 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column share_direction to the message table."), (uint64_t)CFSTR("Added share_direction column to the message table."), CFSTR("ALTER TABLE message ADD COLUMN share_direction INTEGER"));
      if (!v95 || !v96 || !v97 || !v98 || !v99 || !v100)
        goto LABEL_12;
    }
    else
    {
      v94 = IMLogHandleForCategory();
      if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1ABB60000, v94, OS_LOG_TYPE_INFO, "The item_type, other_handle, group_title, group_action_type, share_status, share_direction columns already exist on message, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    v101 = CSDBSqliteConnectionPerformSQL();
    if ((v101 - 100) >= 2 && v101)
    {
      if (!sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column group_id to the chat table."), (uint64_t)CFSTR("Added group_id column to the chat table."), CFSTR("ALTER TABLE chat ADD COLUMN group_id TEXT")))goto LABEL_12;
    }
    else
    {
      v102 = IMLogHandleForCategory();
      if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1ABB60000, v102, OS_LOG_TYPE_INFO, "The group_id columns already exist on chat, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_283;
  }
  if (a2 >> 1 <= 0xFA2)
  {
LABEL_283:
    CSDBSqliteDatabaseSetVersion();
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_284;
  }
  if (a2 == 8006)
  {
LABEL_284:
    CSDBSqliteDatabaseSetVersion();
    v103 = IMLogHandleForCategory();
    if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v103, OS_LOG_TYPE_INFO, "Adding message is_expirable, expire_state, and message_action_type column", (uint8_t *)&v112, 2u);
    }
    v104 = CSDBSqliteConnectionPerformSQL();
    if ((v104 - 100) >= 2 && v104)
    {
      v106 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column is_expirable to the message table."), (uint64_t)CFSTR("Added is_expirable column to the message table."), CFSTR("ALTER TABLE message ADD COLUMN is_expirable INTEGER DEFAULT 0"));
      v107 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column expire_state to the message table."), (uint64_t)CFSTR("Added expire_state column to the message table."), CFSTR("ALTER TABLE message ADD COLUMN expire_state INTEGER DEFAULT 0"));
      v108 = sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column message_action_type to the message table."), (uint64_t)CFSTR("Added message_action_type column to the message table."), CFSTR("ALTER TABLE message ADD COLUMN message_action_type INTEGER DEFAULT 0"));
      if (!v106 || !v107 || !v108)
        goto LABEL_12;
    }
    else
    {
      v105 = IMLogHandleForCategory();
      if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
      {
        LOWORD(v112) = 0;
        _os_log_impl(&dword_1ABB60000, v105, OS_LOG_TYPE_INFO, "The is_expirable, expire_state, and message_action_type columns already exist on message, skipping this step.", (uint8_t *)&v112, 2u);
      }
    }
    CSDBSqliteDatabaseSetVersion();
    goto LABEL_294;
  }
  if (a2 >> 3 > 0x3E8)
  {
    if (a2 != 8008)
      return 1;
    goto LABEL_302;
  }
LABEL_294:
  CSDBSqliteDatabaseSetVersion();
  v109 = IMLogHandleForCategory();
  if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
  {
    LOWORD(v112) = 0;
    _os_log_impl(&dword_1ABB60000, v109, OS_LOG_TYPE_INFO, "Adding message message_source column", (uint8_t *)&v112, 2u);
  }
  v110 = CSDBSqliteConnectionPerformSQL();
  if ((v110 - 100) < 2 || !v110)
  {
    v111 = IMLogHandleForCategory();
    if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
    {
      LOWORD(v112) = 0;
      _os_log_impl(&dword_1ABB60000, v111, OS_LOG_TYPE_INFO, "The message_source column already exists on message, skipping this step.", (uint8_t *)&v112, 2u);
    }
    goto LABEL_301;
  }
  if (sub_1ABC0B38C(v6, (uint64_t)CFSTR("MobileSMS DB migration failed to add column message_source to the message table."), (uint64_t)CFSTR("Added message_source column to the message table."), CFSTR("ALTER TABLE message ADD COLUMN message_source INTEGER DEFAULT 0")))
  {
LABEL_301:
    CSDBSqliteDatabaseSetVersion();
LABEL_302:
    CSDBSqliteDatabaseSetVersion();
    CSDBSqliteDatabaseSetVersion();
    return 1;
  }
LABEL_12:
  v10 = IMLogHandleForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    sub_1ABC623E0(v5, v10);
  CSDBSqliteConnectionCommit();
  IMDPersistenceSubmitEvent(CFSTR("com.apple.MobileSMS.Migration.Migration_Failure"));
  return 0;
}

BOOL IMDMigrateTo8200(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("is_filtered"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo9002(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("successful_query"), CFSTR("INTEGER DEFAULT 1"));
}

BOOL IMDMigrateTo10000(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("associated_message_guid"), CFSTR("STRING DEFAULT NULL"));
}

BOOL IMDMigrateTo10001(uint64_t a1)
{
  _BOOL8 result;

  result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("balloon_bundle_id"), CFSTR("STRING DEFAULT NULL"));
  if (result)
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("payload_data"), CFSTR("BLOB"));
  return result;
}

BOOL IMDMigrateTo10002(uint64_t a1)
{
  _BOOL8 result;

  result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("is_sticker"), CFSTR("INTEGER DEFAULT 0"));
  if (result)
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("sticker_user_info"), CFSTR("BLOB"));
  return result;
}

BOOL IMDMigrateTo10004(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("associated_message_type"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo10005(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("expressive_send_style_id"), CFSTR("STRING DEFAULT NULL"));
}

BOOL IMDMigrateTo10007(uint64_t a1)
{
  _BOOL8 result;

  result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("associated_message_range_location"), CFSTR("INTEGER DEFAULT 0"));
  if (result)
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("associated_message_range_length"), CFSTR("INTEGER DEFAULT 0"));
  return result;
}

BOOL IMDMigrateTo10008(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("time_expressive_send_played"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo10010(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("message_summary_info"), CFSTR("BLOB DEFAULT NULL"));
}

BOOL IMDMigrateTo10011(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("attribution_info"), CFSTR("BLOB"));
}

BOOL IMDMigrateTo10012(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("hide_attachment"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo10013(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE message SET message_summary_info = NULL WHERE message_summary_info IS NOT NULL;"),
           0);
}

BOOL IMDMigrateTo11000(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("engram_id"), CFSTR("TEXT"));
}

BOOL IMDMigrateTo11001(uint64_t a1)
{
  _BOOL8 result;

  result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("server_change_token"), CFSTR("TEXT"));
  if (result)
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("ck_sync_state"), CFSTR("INTEGER DEFAULT 0"));
  return result;
}

BOOL IMDMigrateTo11002(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("last_read_message_timestamp"), CFSTR("INTEGER DEFAULT 0"));
}

uint64_t IMDMigrateTo11003()
{
  return 1;
}

uint64_t IMDMigrateTo11004()
{
  return 1;
}

BOOL IMDMigrateTo11005(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("ck_sync_state"), CFSTR("INTEGER DEFAULT 0"))&& IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("ck_record_id"), CFSTR("TEXT DEFAULT NULL"))&& IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("ck_record_change_tag"), CFSTR("TEXT DEFAULT NULL"));
}

BOOL IMDMigrateTo11006(uint64_t a1)
{
  _BOOL8 result;

  result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("ck_sync_state"), CFSTR("INTEGER DEFAULT 0"));
  if (result)
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("ck_server_change_token_blob"), CFSTR("BLOB DEFAULT NULL"));
  return result;
}

uint64_t IMDMigrateTo11007()
{
  return 1;
}

uint64_t IMDMigrateTo11008()
{
  return 1;
}

BOOL IMDMigrateTo11009(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("original_group_id"), CFSTR("TEXT DEFAULT NULL"));
}

BOOL IMDMigrateTo11010(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("ck_record_id"), CFSTR("TEXT DEFAULT NULL"));
}

BOOL IMDMigrateTo11011(uint64_t a1)
{
  _BOOL8 result;

  result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat_message_join"), CFSTR("message_date"), CFSTR("INTEGER DEFAULT 0"));
  if (result)
    return IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE chat_message_join SET message_date = (select m.date from message m where m.ROWID = message_id);"),
             0);
  return result;
}

BOOL IMDMigrateTo11012(uint64_t a1)
{
  _BOOL8 result;

  result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("original_guid"), CFSTR("TEXT"));
  if (result)
    return IMDSqlOperationExecuteQuery(a1, CFSTR("update attachment set original_guid=guid;"), 0);
  return result;
}

BOOL IMDMigrateTo11013(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("destination_caller_id"), CFSTR("TEXT DEFAULT NULL"));
}

uint64_t IMDMigrateTo11014()
{
  return 1;
}

uint64_t IMDMigrateTo11015()
{
  return 1;
}

BOOL IMDMigrateTo11016(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE message SET date = date * 1000000000.0 WHERE date < 1000000000.0 ;"),
           0);
}

uint64_t IMDMigrateTo11017()
{
  return 1;
}

uint64_t IMDMigrateTo11018()
{
  return 1;
}

uint64_t IMDMigrateTo11019()
{
  return 1;
}

BOOL IMDMigrateTo11020(uint64_t a1)
{
  _BOOL8 v2;

  v2 = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("sr_server_change_token"), CFSTR("TEXT"));
  if (v2)
    IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("sr_ck_sync_state"), CFSTR("INTEGER DEFAULT 0"));
  return v2;
}

BOOL IMDMigrateTo11021(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("sr_ck_sync_state"), CFSTR("INTEGER DEFAULT 0"))&& IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("sr_ck_record_id"), CFSTR("TEXT DEFAULT NULL"))&& IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("sr_ck_record_change_tag"), CFSTR("TEXT DEFAULT NULL"));
}

BOOL IMDMigrateTo11022(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("sr_ck_record_id"), CFSTR("TEXT DEFAULT NULL"))&& IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("sr_ck_sync_state"), CFSTR("INTEGER DEFAULT 0"))&& IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("sr_ck_server_change_token_blob"), CFSTR("BLOB DEFAULT NULL"));
}

BOOL IMDMigrateTo11023(uint64_t a1)
{
  return !objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance"), "isInternalInstall")
      || IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE chat SET room_name = chat_identifier WHERE style = 43 AND room_name is null;"),
           0);
}

BOOL IMDMigrateTo11024(uint64_t a1)
{
  _BOOL4 v2;
  int v3;
  int v4;
  const __CFString *v5;
  const __CFString *v6;

  v2 = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("cloudkit_record_id"), CFSTR("TEXT DEFAULT NULL"))&& IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("sr_cloudkit_record_id"), CFSTR("TEXT DEFAULT NULL"));
  v3 = IMDSqlOperationColumnExistsOnTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("ck_record_system_property_blob"));
  v4 = IMDSqlOperationColumnExistsOnTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("sr_ck_record_system_property_blob"));
  if (!v2)
    return 0;
  if ((v3 | v4) != 1)
    return 1;
  v5 = CFSTR("UPDATE chat SET ck_record_system_property_blob = NULL;");
  if ((v3 & v4) != 0)
    v5 = CFSTR("UPDATE chat SET ck_record_system_property_blob = NULL, sr_ck_record_system_property_blob = NULL;");
  if (v3)
    v6 = v5;
  else
    v6 = CFSTR("UPDATE chat SET sr_ck_record_system_property_blob = NULL;");
  return IMDSqlOperationExecuteQuery(a1, v6, 0);
}

uint64_t IMDMigrateTo11025()
{
  return 1;
}

uint64_t IMDMigrateTo11026()
{
  return 1;
}

uint64_t IMDMigrateTo11027()
{
  return 1;
}

BOOL IMDMigrateTo12000(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("handle"), CFSTR("person_centric_id"), CFSTR("TEXT DEFAULT NULL"));
}

BOOL IMDMigrateTo12001(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("handle"), CFSTR("person_centric_id"), CFSTR("TEXT DEFAULT NULL"));
}

uint64_t IMDMigrateTo12002()
{
  return 1;
}

uint64_t IMDMigrateTo12003()
{
  return 1;
}

BOOL IMDMigrateTo12004(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("is_corrupt"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo12005(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("last_addressed_sim_id"), CFSTR("TEXT DEFAULT NULL"));
}

BOOL IMDMigrateTo13000(uint64_t a1)
{
  _BOOL8 result;

  result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("reply_to_guid"), CFSTR("TEXT DEFAULT NULL"));
  if (result)
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("sort_id"), CFSTR("INTEGER DEFAULT 0"));
  return result;
}

BOOL IMDMigrateTo13001(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("is_spam"), CFSTR("INTEGER DEFAULT 0"));
}

uint64_t IMDMigrateTo13002()
{
  return 1;
}

uint64_t IMDMigrateTo13003()
{
  return 1;
}

uint64_t IMDMigrateTo13004()
{
  return 1;
}

BOOL IMDMigrateTo13500(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("is_blackholed"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo14000(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("has_unseen_mention"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo14001(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("thread_originator_guid"), CFSTR("TEXT DEFAULT NULL"));
}

uint64_t IMDMigrateTo14002()
{
  return 1;
}

BOOL IMDMigrateTo14003(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("thread_originator_part"), CFSTR("TEXT DEFAULT NULL"));
}

uint64_t IMDMigrateTo14004(uint64_t a1)
{
  if (IMDSqlOperationColumnExistsOnTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("is_filtered")))
    IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE chat SET is_filtered = 1 WHERE is_filtered = 0 AND service_name = 'SMS';"),
      0);
  return 1;
}

uint64_t IMDMigrateTo14005()
{
  return 1;
}

BOOL IMDMigrateTo14006(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE message SET ck_sync_state=8 WHERE thread_originator_guid is not null and ck_sync_state=1"), 0);
}

BOOL IMDMigrateTo15000(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("syndication_ranges"), CFSTR("TEXT DEFAULT NULL"));
}

uint64_t IMDMigrateTo15001()
{
  return 1;
}

BOOL IMDMigrateTo15002(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("is_commsafety_sensitive"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo15003(uint64_t a1)
{
  _BOOL8 result;

  result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("was_delivered_quietly"), CFSTR("INTEGER DEFAULT 0"));
  if (result)
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("did_notify_recipient"), CFSTR("INTEGER DEFAULT 0"));
  return result;
}

BOOL IMDMigrateTo15004(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("synced_syndication_ranges"), CFSTR("TEXT DEFAULT NULL"));
}

BOOL IMDMigrateTo15005(uint64_t a1)
{
  _BOOL8 result;

  result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("syndication_date"), CFSTR("INTEGER DEFAULT 0"));
  if (result)
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("syndication_type"), CFSTR("INTEGER DEFAULT 0"));
  return result;
}

uint64_t IMDMigrateTo15007(uint64_t a1)
{
  IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE chat SET syndication_type = 0"), 0);
  IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE chat SET syndication_date = 0"), 0);
  return 1;
}

uint64_t IMDMigrateTo15008()
{
  return 1;
}

uint64_t IMDMigrateTo15009(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (!IMDSqlOperationExecuteQuery(a1, CFSTR("INSERT OR REPLACE INTO kvtable (key, value) VALUES ('lastFailedMessageDate', COALESCE((SELECT m.date FROM message m WHERE m.error != 0 AND m.is_from_me == 1 AND m.is_finished == 1 ORDER BY date DESC, ROWID DESC LIMIT 1), 0)), ('lastFailedMessageRowID', COALESCE((SELECT m.ROWID FROM message m WHERE m.error != 0 AND m.is_from_me == 1 AND m.is_finished == 1 ORDER BY date DESC, ROWID DESC LIMIT 1), 0));"),
          0))
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Failed to assign lastFailedMessageDate with query, attempting to set to zero instead", v4, 2u);
    }
    IMDSqlOperationExecuteQuery(a1, CFSTR("INSERT OR REPLACE INTO kvtable (key, value) VALUES ('lastFailedMessageDate', 0), ('lastFailedMessageRowID', 0);"),
      0);
  }
  return 1;
}

uint64_t IMDMigrateTo15010(uint64_t a1)
{
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABC0F0CC;
  v3[3] = &unk_1E5AB2298;
  v3[4] = &v4;
  v3[5] = a1;
  _IMDSqlOperationRunQuery(a1, CFSTR("select name from sqlite_master where sql LIKE '%_legacy%' and type = 'index';"),
    0,
    (uint64_t)v3);
  if (*((_BYTE *)v5 + 24))
    IMDDropAllIndexesWithOperation(a1, 1);
  _Block_object_dispose(&v4, 8);
  return 1;
}

void sub_1ABC0F0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABC0F0CC(uint64_t a1)
{
  _BOOL4 HasRows;
  NSObject *v3;
  _BOOL4 v4;
  uint8_t v5[16];
  uint8_t buf[16];

  HasRows = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  v3 = IMLogHandleForCategory();
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (HasRows)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Found an index referencing *_legacy!", buf, 2u);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  else if (v4)
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Did not find index referencing *_legacy!", v5, 2u);
  }
}

uint64_t IMDMigrateTo15011(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v5[16];
  uint8_t buf[16];

  v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Attempting to re-add iOS 6, 7 and 8 column additions", buf, 2u);
  }
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("item_type"), CFSTR("INTEGER DEFAULT 0"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("other_handle"), CFSTR("INTEGER DEFAULT -1"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("group_title"), CFSTR("TEXT"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("group_action_type"), CFSTR("INTEGER DEFAULT 0"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("share_status"), CFSTR("INTEGER"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("share_direction"), CFSTR("INTEGER"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("is_audio_message"), CFSTR("INTEGER DEFAULT 0"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("is_played"), CFSTR("INTEGER DEFAULT 0"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("date_played"), CFSTR("INTEGER"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("is_expirable"), CFSTR("INTEGER DEFAULT 0"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("expire_state"), CFSTR("INTEGER DEFAULT 0"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("message_action_type"), CFSTR("INTEGER DEFAULT 0"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("message_source"), CFSTR("INTEGER DEFAULT 0"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("group_id"), CFSTR("TEXT"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("display_name"), CFSTR("TEXT"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("user_info"), CFSTR("BLOB"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("transfer_name"), CFSTR("BLOB"));
  IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("total_bytes"), CFSTR("INTEGER DEFAULT -1"));
  v3 = IMLogHandleForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Finished re-adding iOS 6, 7 and 8 column additions", v5, 2u);
  }
  return 1;
}

BOOL IMDMigrateTo16000(uint64_t a1)
{
  _BOOL8 result;

  result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("date_retracted"), CFSTR("INTEGER DEFAULT 0"));
  if (result)
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("date_edited"), CFSTR("INTEGER DEFAULT 0"));
  return result;
}

uint64_t IMDMigrateTo16001()
{
  return 1;
}

BOOL IMDMigrateTo16002(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat_recoverable_message_join"), CFSTR("ck_sync_state"), CFSTR("INTEGER DEFAULT 0"));
}

uint64_t IMDMigrateTo16003()
{
  return 1;
}

BOOL IMDMigrateTo16004(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("unsynced_removed_recoverable_messages"), CFSTR("part_index"), CFSTR("INTEGER"));
}

BOOL IMDMigrateTo16005(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("was_detonated"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo16006(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("part_count"), CFSTR("INTEGER"));
}

BOOL IMDMigrateTo16007(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE chat SET state = 3 WHERE state = 4"), 0);
}

BOOL IMDMigrateTo16008(uint64_t a1)
{
  _BOOL8 v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABC0F5E8;
  v3[3] = &unk_1E5AB2298;
  v3[4] = &v4;
  v3[5] = a1;
  _IMDSqlOperationRunQuery(a1, CFSTR("select name from sqlite_master where sql LIKE '%_legacy%';"), 0, (uint64_t)v3);
  v1 = *((_BYTE *)v5 + 24) == 0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1ABC0F5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABC0F5E8(uint64_t a1)
{
  _BOOL4 HasRows;
  NSObject *v3;
  _BOOL4 v4;
  uint8_t v5[16];
  uint8_t buf[16];

  HasRows = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  v3 = IMLogHandleForCategory();
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (HasRows)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Found table referencing *_legacy!", buf, 2u);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  else if (v4)
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Did not find any table referencing *_legacy!", v5, 2u);
  }
}

BOOL IMDMigrateTo16100(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("is_stewie"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo16101(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("is_recovered"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo16102(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE chat_message_join SET message_date = (select m.date from message m where m.ROWID = message_id) where message_date = 0;"),
           0);
}

uint64_t IMDMigrateTo16200(uint64_t a1)
{
  id Rows;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __CFString *updated;
  NSObject *v14;
  int v16[2];
  uint64_t v17;
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  __CFString *v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v16 = a1;
  Rows = _IMDSqlOperationGetRows(a1, CFSTR("SELECT ROWID, id FROM handle"));
  IMCountryCodeForIncomingTextMessage();
  v18 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v2 = objc_msgSend(Rows, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v20;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v20 != v4)
          objc_enumerationMutation(Rows);
        v6 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v5);
        v7 = objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("id"), *(_QWORD *)v16);
        if (v7)
        {
          v8 = v7;
          if (MEMORY[0x1AF434F40]())
          {
            if (!IMCountryCodeForNumber())
            {
              v9 = objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ROWID"));
              v10 = (void *)IMInternationalForPhoneNumberWithOptions();
              if (v10)
              {
                v11 = v10;
                if ((objc_msgSend(v10, "isEqualToString:", v8) & 1) == 0)
                  objc_msgSend(v18, "setObject:forKeyedSubscript:", v11, v9);
              }
            }
          }
        }
        ++v5;
      }
      while (v3 != v5);
      v12 = objc_msgSend(Rows, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
      v3 = v12;
    }
    while (v12);
  }
  if (objc_msgSend(v18, "count", *(_QWORD *)v16))
  {
    updated = (__CFString *)IMDHandleCanonicalizedIDsBulkUpdateQuery(v18);
    v14 = IMLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v24 = updated;
      _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "IMDMigrateTo16200 canonicalize handles with query: %@", buf, 0xCu);
    }
    IMDSqlOperationExecuteQuery(v17, updated, 0);
    if (updated)

  }
  if (Rows)

  if (v18)
  return 1;
}

BOOL IMDMigrateTo16300(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("is_kt_verified"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo16301(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE chat SET state = 3 WHERE state = 4 AND (style = 43 OR is_filtered = 0)"), 0);
}

BOOL IMDMigrateTo16302(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE chat SET state = 3 WHERE state = 4 AND (style = 43 OR is_filtered = 0)"), 0);
}

uint64_t IMDMigrateTo17000(uint64_t a1)
{
  _BOOL4 v2;

  v2 = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("is_sos"), CFSTR("INTEGER DEFAULT 0"));
  return v2 & IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("is_critical"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo17001(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("bia_reference_id"), CFSTR("TEXT DEFAULT NULL"));
}

BOOL IMDMigrateTo17002(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("is_kt_verified"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo17003(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE chat SET state = 3 WHERE state = 4 AND (style = 43 OR is_filtered = 0)"), 0);
}

BOOL IMDMigrateTo17005(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("is_deleting_incoming_messages"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo17006(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("fallback_hash"), CFSTR("TEXT DEFAULT NULL"));
}

BOOL IMDMigrateTo17008(uint64_t a1)
{
  return !objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance"), "isInternalInstall")
      || IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("is_scheduled"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo17010(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE chat SET service_name = substr(guid,1,instr(guid,\";\")-1)  WHERE service_name IS NULL OR service_name == \"\";"),
           0);
}

uint64_t IMDMigrateTo17011()
{
  return 1;
}

uint64_t IMDMigrateTo17012(uint64_t a1)
{
  IMDSqlOperationExecuteQuery(a1, CFSTR("INSERT INTO deleted_messages (guid) SELECT guid FROM message WHERE error != 0 AND ROWID NOT IN (SELECT message_id FROM chat_message_join);"),
    0);
  IMDSqlOperationExecuteQuery(a1, CFSTR("INSERT INTO sync_deleted_messages (guid, recordID) SELECT guid, ck_record_id FROM message WHERE error != 0 AND ROWID NOT IN (SELECT message_id FROM chat_message_join);"),
    0);
  IMDSqlOperationExecuteQuery(a1, CFSTR("DELETE FROM message WHERE associated_message_guid IS NOT NULL AND LENGTH(SUBSTR(associated_message_guid, -36)) = 36 AND SUBSTR(associated_message_guid, -36) IN (SELECT guid FROM message WHERE associated_message_guid IS NULL AND error != 0 AND ROWID NOT IN (SELECT message_id FROM chat_message_join))"), 0);
  IMDSqlOperationExecuteQuery(a1, CFSTR("DELETE FROM message WHERE error != 0 AND ROWID NOT IN (SELECT message_id FROM chat_message_join);"),
    0);
  return 1;
}

uint64_t IMDMigrateTo17013()
{
  return 1;
}

uint64_t IMDMigrateTo17014()
{
  return 1;
}

BOOL IMDMigrateTo18000(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("associated_message_emoji"), CFSTR("TEXT DEFAULT NULL"));
}

BOOL IMDMigrateTo18001(uint64_t a1)
{
  _BOOL8 result;

  result = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("is_pending_satellite_send"), CFSTR("INTEGER DEFAULT 0"));
  if (result)
    return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("needs_relay"), CFSTR("INTEGER DEFAULT 0"));
  return result;
}

BOOL IMDMigrateTo18002(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("schedule_type"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo18004(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE chat SET service_name = substr(guid,1,instr(guid,\";\")-1)  WHERE service_name IS NULL OR service_name == \"\";"),
           0);
}

BOOL IMDMigrateTo18005(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("schedule_state"), CFSTR("INTEGER DEFAULT 0"))&& IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE message SET schedule_state = 2 WHERE schedule_type = 2;"), 0)
      && IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE message SET schedule_state = 3, schedule_type = 2 WHERE schedule_type = 10;"),
           0);
}

uint64_t IMDMigrateTo18006(uint64_t a1)
{
  _BOOL4 v2;

  v2 = IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("emoji_image_content_identifier"), CFSTR("TEXT DEFAULT NULL"));
  return v2 & IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("attachment"), CFSTR("emoji_image_short_description"), CFSTR("TEXT DEFAULT NULL"));
}

uint64_t IMDMigrateTo18007()
{
  return 1;
}

uint64_t IMDMigrateTo18008()
{
  return 1;
}

uint64_t IMDMigrateTo18009()
{
  return 1;
}

BOOL IMDMigrateTo18010(uint64_t a1)
{
  return IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(a1, (uint64_t)CFSTR("message"), CFSTR("sent_or_received_off_grid"), CFSTR("INTEGER DEFAULT 0"));
}

BOOL IMDMigrateTo18011(uint64_t a1)
{
  _BOOL8 v2;

  v2 = IMDSqlOperationExecuteQuery(a1, CFSTR("DROP INDEX IF EXISTS message_idx_undelivered_one_to_one_imessage;"), 0);
  IMDCreateIndexesWithOperation(a1, 1);
  return v2;
}

uint64_t IMDMigrateTo18012(uint64_t a1)
{
  if (IMDSqlOperationColumnExistsOnTableWithOperation(a1, (uint64_t)CFSTR("chat"), CFSTR("is_filtered")))
    IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE chat SET is_filtered = 1 WHERE is_filtered = 0;"), 0);
  return 1;
}

BOOL IMDMigrateTo18013(uint64_t a1)
{
  return IMDSqlOperationExecuteQuery(a1, CFSTR("UPDATE attachment SET ck_sync_state = 0 WHERE ck_sync_state = 64 OR ck_sync_state = 2;"),
           0);
}

uint64_t IMDMigrateTo18014()
{
  return 1;
}

BOOL IMDMigrateTo18015(uint64_t a1)
{
  id v2;

  v2 = objc_alloc(MEMORY[0x1E0CB3940]);
  return IMDSqlOperationExecuteQuery(a1, (CFStringRef)objc_msgSend(v2, "initWithFormat:", CFSTR("UPDATE message SET is_read = 1, date_read = %lld WHERE (is_read == 0 AND is_finished == 1 AND is_from_me == 0 AND item_type == 1 AND is_system_message == 0);"),
                          objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "now"), "__im_nanosecondTimeInterval")),
           0);
}

uint64_t IMDMigrateTo18016()
{
  return 1;
}

uint64_t sub_1ABC0FE04()
{
  return MEMORY[0x1E0DE7D20](&stru_1E5AC1D70, sel_stringByPaddingToLength_withString_startingAtIndex_);
}

uint64_t IMDMessageRecordAddMessageRecord(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABC0FED0;
  v3[3] = &unk_1E5AB1FA8;
  v3[4] = &v4;
  v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1ABC0FEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABC0FED0(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 40))
  {
    v1 = result;
    CSDBRecordStoreAddRecord();
    result = CSDBRecordSaveStore();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t IMDMessageRecordCopyMessageRecord(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABC0FFB8;
  v3[3] = &unk_1E5AB1FA8;
  v3[4] = &v4;
  v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1ABC0FFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABC0FFB8(uint64_t a1)
{
  uint64_t result;

  result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyMessageRecordUnlocked(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABC1009C;
  v3[3] = &unk_1E5AB1FA8;
  v3[4] = &v4;
  v3[5] = a1;
  _IMDPerformLockedMessageStoreBlock((uint64_t)v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1ABC10084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABC1009C(uint64_t a1)
{
  uint64_t result;

  result = CSDBRecordStoreCopyInstanceOfClassWithUID();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void IMDMessageRecordUnassociateMessageWithGUIDFromAttachmentWithGUID(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  _QWORD v7[6];
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412546;
      v9 = a1;
      v10 = 2112;
      v11 = a2;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_DEBUG, "IMDMessageRecordUnassociateMessageWithGUIDFromAttachmentWithGUID [MessageGUID: %@] [AttachmentGUID: %@", buf, 0x16u);
    }
  }
  if (a1)
  {
    if (a2)
    {
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v7[0] = MEMORY[0x1E0C809B0];
        v7[1] = 3221225472;
        v7[2] = sub_1ABC102C0;
        v7[3] = &unk_1E5AB4AF0;
        v7[4] = a1;
        v7[5] = a2;
        _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("DELETE FROM message_attachment_join WHERE   ROWID IN(    SELECT       j.ROWID     FROM       message_attachment_join j     INNER JOIN message m ON j.message_id = m.ROWID     INNER JOIN attachment a ON j.attachment_id = a.ROWID     WHERE       m.guid = ?       AND a.guid = ?  ) "), (uint64_t)v7);
      }
      else
      {
        __syncXPCIMDMessageRecordUnassociateMessageWithGUIDFromAttachmentWithGUID_IPCAction(0, a1, a2);
      }
      return;
    }
    if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        v6 = "Cannot unassociate attachment with empty attachment GUID";
LABEL_15:
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, v6, buf, 2u);
      }
    }
  }
  else if (IMOSLoggingEnabled())
  {
    v5 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v6 = "Cannot unassociate attachment from empty message GUID";
      goto LABEL_15;
    }
  }
}

void sub_1ABC102C0()
{
  int v0;
  int v1;
  NSObject *v2;
  _DWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  v0 = CSDBSqliteStatementPerform();
  if (v0 != 101)
  {
    v1 = v0;
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        v3[0] = 67109120;
        v3[1] = v1;
        _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_DEBUG, "SQLite returned %d from IMDChatRecordAddMessageIfNeeded", (uint8_t *)v3, 8u);
      }
    }
  }
}

void IMDMessageRecordDeleteOrphanedMessages()
{
  uint64_t v0;
  NSObject *v1;
  void *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (IMDIsRunningInDatabaseServerProcess())
  {
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("DELETE FROM message WHERE message.ROWID NOT IN (SELECT message_id from chat_message_join);"),
      (uint64_t)&unk_1E5AAF328);
    v0 = IMDMessageRecordCountChangesUnlocked();
    if (IMOSLoggingEnabled())
    {
      v1 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        v3 = 134217984;
        v4 = v0;
        _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_INFO, "Deleted %llu orphaned messages", (uint8_t *)&v3, 0xCu);
      }
    }
    v2 = (void *)objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    objc_msgSend(v2, "trackDeleteMessages:sourceType:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v0), 6);
  }
  else
  {
    __syncXPCIMDMessageRecordDeleteOrphanedMessages_IPCAction(0);
  }
}

void sub_1ABC10510()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = IMLogHandleForCategory();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "Orphaned messages cleanup complete", v1, 2u);
  }
}

uint64_t IMDMessageRecordCountChangesUnlocked()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v6 = 0;
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = sub_1ABC19EC0;
  v2[3] = &unk_1E5AB2070;
  v2[4] = &v3;
  _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT changes();"), (uint64_t)v2);
  v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1ABC10608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void IMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];
  uint8_t buf[4];
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_1ABC10774;
    v5[3] = &unk_1E5AB2248;
    v5[4] = a2;
    v5[5] = a1;
    if (IMOSLoggingEnabled())
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        v7 = a1;
        v8 = 2112;
        v9 = a2;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_DEBUG, "IMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID [MessageGUID: %@] [AttachmentGUID: %@", buf, 0x16u);
      }
    }
    _IMDPerformBlock((uint64_t)v5);
  }
  else
  {
    __syncXPCIMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID_IPCAction(0, a1, a2);
  }
}

void sub_1ABC10774(uint64_t a1)
{
  const __CFString *v2;
  const __CFString *v3;
  CFStringRef v4;
  const __CFString *v5;
  const __CFString *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  __int16 v10;
  __int16 v11;

  v2 = *(const __CFString **)(a1 + 32);
  if (v2 && CFStringGetLength(v2))
  {
    v3 = *(const __CFString **)(a1 + 40);
    if (v3 && CFStringGetLength(v3))
    {
      v4 = IMDAttachmentRecordCopyAttachmentForGUIDUnlocked(*(CFStringRef *)(a1 + 32));
      v5 = IMDMessageRecordCopyMessageForGUIDUnlocked(*(const __CFString **)(a1 + 40));
      v6 = v5;
      if (v4 && v5)
      {
        IMDMessageRecordAddAttachmentIfNeededUnlocked((uint64_t)v5, (uint64_t)v4);
      }
      else if (!v5)
      {
        goto LABEL_17;
      }
      CFRelease(v6);
LABEL_17:
      if (v4)
        CFRelease(v4);
      return;
    }
    if (IMOSLoggingEnabled())
    {
      v7 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v10 = 0;
        v8 = "Unable to associate message and attachment, empty message GUID.";
        v9 = (uint8_t *)&v10;
        goto LABEL_14;
      }
    }
  }
  else if (IMOSLoggingEnabled())
  {
    v7 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v11 = 0;
      v8 = "Unable to associate message and attachment, empty attachment GUID.";
      v9 = (uint8_t *)&v11;
LABEL_14:
      _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, v8, v9, 2u);
    }
  }
}

const __CFString *IMDMessageRecordCopyMessageForGUIDUnlocked(const __CFString *a1)
{
  NSObject *v2;
  _QWORD v4[6];
  __int128 buf;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessageForGUID [%@]", (uint8_t *)&buf, 0xCu);
    }
  }
  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v6 = 0x2020000000;
      v7 = 0;
      v4[0] = MEMORY[0x1E0C809B0];
      v4[1] = 3221225472;
      v4[2] = sub_1ABC13068;
      v4[3] = &unk_1E5AB2200;
      v4[4] = &buf;
      v4[5] = a1;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE guid = ? ORDER BY message.ROWID ASC;"),
        (uint64_t)v4);
      a1 = *(const __CFString **)(*((_QWORD *)&buf + 1) + 24);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

void sub_1ABC109F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *IMDMessageRecordCopyMessagesForAssociatedGUID(const __CFString *a1)
{
  NSObject *v2;
  void (*v4[5])(void);
  _QWORD v5[6];
  __int128 buf;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessagesForAssociatedGUID [%@]", (uint8_t *)&buf, 0xCu);
    }
  }
  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v7 = 0x2020000000;
      v8 = 0;
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v5[0] = MEMORY[0x1E0C809B0];
        v5[1] = 3221225472;
        v5[2] = sub_1ABC10BF4;
        v5[3] = &unk_1E5AB2200;
        v5[4] = &buf;
        v5[5] = a1;
        _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE associated_message_guid = ? ORDER BY message.ROWID ASC;"),
          (uint64_t)v5);
      }
      else
      {
        v4[0] = (void (*)(void))MEMORY[0x1E0C809B0];
        v4[1] = (void (*)(void))3221225472;
        v4[2] = (void (*)(void))sub_1ABC10D18;
        v4[3] = (void (*)(void))&unk_1E5AAF630;
        v4[4] = (void (*)(void))&buf;
        __syncXPCIMDMessageRecordCopyMessagesForAssociatedGUID_IPCAction(v4, (uint64_t)a1);
      }
      a1 = *(const __CFString **)(*((_QWORD *)&buf + 1) + 24);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

void sub_1ABC10BB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1ABC10BF4(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const __CFAllocator *v7;
  const CFArrayCallBacks *v8;
  int ID;
  const void *v10;
  uint64_t v11;
  CFMutableArrayRef Mutable;

  CSDBSqliteBindTextFromCFString();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    Count = CFArrayGetCount(v2);
    if (Count)
    {
      v5 = Count;
      v6 = 0;
      v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      do
      {
        CFArrayGetValueAtIndex(v3, v6);
        ID = CSDBRecordGetID();
        v10 = IMDMessageRecordCreateFromRecordIDUnlocked((uint64_t)v7, ID);
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        Mutable = *(CFMutableArrayRef *)(v11 + 24);
        if (!Mutable)
        {
          Mutable = CFArrayCreateMutable(v7, v5, v8);
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        }
        *(_QWORD *)(v11 + 24) = Mutable;
        if (v10)
        {
          CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v10);
          CFRelease(v10);
        }
        ++v6;
      }
      while (v5 != v6);
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1ABC10D18(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC10D90;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABC10D90(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

const __CFArray *IMDMessageRecordCopyMessagesForGUIDs(const __CFArray *a1)
{
  NSObject *v2;
  void (*v4[5])(void);
  _QWORD v5[6];
  __int128 buf;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessagesForGUIDs [%@]", (uint8_t *)&buf, 0xCu);
    }
  }
  if (a1)
  {
    if (CFArrayGetCount(a1))
    {
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v7 = 0x2020000000;
      v8 = 0;
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v5[0] = MEMORY[0x1E0C809B0];
        v5[1] = 3221225472;
        v5[2] = sub_1ABC10FC4;
        v5[3] = &unk_1E5ABDD68;
        v5[4] = &buf;
        v5[5] = a1;
        _IMDPerformLockedDatabaseBlock((uint64_t)v5);
      }
      else
      {
        v4[0] = (void (*)(void))MEMORY[0x1E0C809B0];
        v4[1] = (void (*)(void))3221225472;
        v4[2] = (void (*)(void))sub_1ABC1115C;
        v4[3] = (void (*)(void))&unk_1E5AAF630;
        v4[4] = (void (*)(void))&buf;
        __syncXPCIMDMessageRecordCopyMessagesForGUIDs_IPCAction(v4, (uint64_t)a1);
      }
      a1 = *(const __CFArray **)(*((_QWORD *)&buf + 1) + 24);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

void sub_1ABC10FC4(uint64_t a1)
{
  int Count;
  __CFString *v3;
  NSObject *v4;
  uint64_t v5;
  const __CFArray *v6;
  int v7;
  CFIndex v8;
  const __CFAllocator *v9;
  CFIndex v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  int ID;
  const void *v14;
  const void *v15;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
  v3 = IMDMessageRecordCopyMessagesForGUIDsQuery(Count);
  if (!v3)
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC626B8();
  }
  v5 = CSDBSqliteDatabaseStatementForWriting();
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    CSDBSqliteBindTextFromCFArrayOfCFStrings();
    v6 = (const __CFArray *)CSDBRecordStoreProcessStatement();
    v7 = CFArrayGetCount(v6);
    if (v7 >= 1)
    {
      v8 = 0;
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v10 = v7;
      v11 = v7;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        CFArrayGetValueAtIndex(v6, v8);
        ID = CSDBRecordGetID();
        v14 = IMDMessageRecordCreateFromRecordIDUnlocked((uint64_t)v9, ID);
        v15 = v14;
        if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
          break;
        if (v14)
          goto LABEL_10;
LABEL_11:
        if (v11 == ++v8)
          goto LABEL_15;
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(v9, v10, v12);
      if (!v15)
        goto LABEL_11;
LABEL_10:
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v15);
      CFRelease(v15);
      goto LABEL_11;
    }
LABEL_15:
    CSDBSqliteStatementReset();
    if (v6)
      CFRelease(v6);
  }
  if (v3)
    CFRelease(v3);
}

xpc_object_t sub_1ABC1115C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC111D4;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABC111D4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  const void *v6;
  const void *v7;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (void *)MEMORY[0x1AF435474]();
  v6 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v6)
  {
    v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v6);
    CFRelease(v7);
  }
  objc_autoreleasePoolPop(v5);
  return 1;
}

const __CFString *IMDMessageRecordCopyMessageForGUID(const __CFString *a1)
{
  NSObject *v2;
  void (*v4[5])(void);
  _QWORD v5[6];
  __int128 buf;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessageForGUID [%@]", (uint8_t *)&buf, 0xCu);
    }
  }
  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v7 = 0x2020000000;
      v8 = 0;
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v5[0] = MEMORY[0x1E0C809B0];
        v5[1] = 3221225472;
        v5[2] = sub_1ABC1142C;
        v5[3] = &unk_1E5AB2200;
        v5[4] = &buf;
        v5[5] = a1;
        _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE guid = ? ORDER BY message.ROWID ASC;"),
          (uint64_t)v5);
      }
      else
      {
        v4[0] = (void (*)(void))MEMORY[0x1E0C809B0];
        v4[1] = (void (*)(void))3221225472;
        v4[2] = (void (*)(void))sub_1ABC114D4;
        v4[3] = (void (*)(void))&unk_1E5AAF630;
        v4[4] = (void (*)(void))&buf;
        __syncXPCIMDMessageRecordCopyMessageForGUID_IPCAction(v4, (uint64_t)a1);
      }
      a1 = *(const __CFString **)(*((_QWORD *)&buf + 1) + 24);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

void sub_1ABC113E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1ABC1142C(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  int ID;

  CSDBSqliteBindTextFromCFString();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      ID = CSDBRecordGetID();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], ID);
    }
    CFRelease(v3);
  }
}

uint64_t sub_1ABC114D4(uint64_t a1, void *a2)
{
  uint64_t result;

  result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyGUIDForMessage(uint64_t a1)
{
  NSObject *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v4 = 138412290;
      v5 = a1;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyGUID [%@]", (uint8_t *)&v4, 0xCu);
    }
  }
  if (a1)
    return IMDMessageRecordCopyGUID(*MEMORY[0x1E0C9AE00], a1);
  else
    return 0;
}

const __CFString *IMDMessageRecordCopyLastReadMessageForChatIdentifier(const __CFString *a1)
{
  NSObject *v2;
  void (*v4[5])(void);
  _QWORD v5[6];
  __int128 buf;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyLastReadMessageForChatGUID [%@]", (uint8_t *)&buf, 0xCu);
    }
  }
  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v7 = 0x2020000000;
      v8 = 0;
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v5[0] = MEMORY[0x1E0C809B0];
        v5[1] = 3221225472;
        v5[2] = sub_1ABC117A4;
        v5[3] = &unk_1E5AB2200;
        v5[4] = &buf;
        v5[5] = a1;
        _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INNER JOIN chat_message_join j ON m.ROWID = j.message_id INNER JOIN chat c ON c.ROWID = j.chat_id WHERE c.chat_identifier = ? AND m.is_read == 1 AND is_from_me == 0 AND is_finished == 1 ORDER BY m.date DESC LIMIT 1"), (uint64_t)v5);
      }
      else
      {
        v4[0] = (void (*)(void))MEMORY[0x1E0C809B0];
        v4[1] = (void (*)(void))3221225472;
        v4[2] = (void (*)(void))sub_1ABC1184C;
        v4[3] = (void (*)(void))&unk_1E5AAF630;
        v4[4] = (void (*)(void))&buf;
        __syncXPCIMDMessageRecordCopyLastReadMessageForChatIdentifier_IPCAction(v4, (uint64_t)a1);
      }
      a1 = *(const __CFString **)(*((_QWORD *)&buf + 1) + 24);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

void sub_1ABC11760(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1ABC117A4(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  int ID;

  CSDBSqliteBindTextFromCFString();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      ID = CSDBRecordGetID();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], ID);
    }
    CFRelease(v3);
  }
}

uint64_t sub_1ABC1184C(uint64_t a1, void *a2)
{
  uint64_t result;

  result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyLastReceivedMessage()
{
  uint64_t v0;
  void (*v2[5])(void);
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1ABC11970;
    v3[3] = &unk_1E5AB2070;
    v3[4] = &v4;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message INNER JOIN chat_message_join AS cmj ON message.ROWID = cmj.message_id WHERE error == 0 AND is_from_me == 0 AND is_finished == 1 ORDER BY date DESC, ROWID DESC LIMIT 1;"),
      (uint64_t)v3);
  }
  else
  {
    v2[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v2[1] = (void (*)(void))3221225472;
    v2[2] = (void (*)(void))sub_1ABC11AA8;
    v2[3] = (void (*)(void))&unk_1E5AAF630;
    v2[4] = (void (*)(void))&v4;
    __syncXPCIMDMessageRecordCopyLastReceivedMessage_IPCAction(v2);
  }
  v0 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v0;
}

void sub_1ABC11954(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1ABC11970(uint64_t a1)
{
  const __CFArray *v2;
  NSObject *v3;
  int ID;
  int v5;
  const __CFArray *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_DEBUG, "results from last received: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  if (v2)
  {
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v2, 0);
      ID = CSDBRecordGetID();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], ID);
    }
    CFRelease(v2);
  }
}

uint64_t sub_1ABC11AA8(uint64_t a1, void *a2)
{
  uint64_t result;

  result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyLastReceivedMessageLimit(int64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  void (*v6[5])(void);
  uint8_t v7[16];
  _QWORD v8[6];
  __int128 buf;
  uint64_t v10;
  CFMutableArrayRef Mutable;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = a1;
    _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyLastReceivedMessageLimit with limit %lld", (uint8_t *)&buf, 0xCu);
  }
  if ((unint64_t)(a1 - 51) < 0xFFFFFFFFFFFFFFCELL)
    return 0;
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v10 = 0x2020000000;
  Mutable = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1ABC11CE0;
    v8[3] = &unk_1E5AB2200;
    v8[4] = &buf;
    v8[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message INNER JOIN chat_message_join AS cmj ON message.ROWID = cmj.message_id WHERE error == 0 AND is_from_me == 0 AND item_type == 0 AND is_finished == 1 ORDER BY date DESC, ROWID DESC LIMIT ?;"),
      (uint64_t)v8);
  }
  else
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyLastReceivedMessageLimit syncXPC", v7, 2u);
    }
    v6[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v6[1] = (void (*)(void))3221225472;
    v6[2] = (void (*)(void))sub_1ABC11DCC;
    v6[3] = (void (*)(void))&unk_1E5AAF630;
    v6[4] = (void (*)(void))&buf;
    __syncXPCIMDMessageRecordCopyLastReceivedMessageLimit_IPCAction(v6, a1);
  }
  v3 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 24);
  _Block_object_dispose(&buf, 8);
  return v3;
}

void sub_1ABC11CB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1ABC11CE0(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex v4;
  uint64_t v5;
  int ID;
  const void *v7;
  const void *v8;

  CSDBSqliteBindInt64();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    if ((int)CFArrayGetCount(v2) >= 1)
    {
      v4 = 0;
      v5 = *MEMORY[0x1E0C9AE00];
      do
      {
        CFArrayGetValueAtIndex(v3, v4);
        ID = CSDBRecordGetID();
        v7 = IMDMessageRecordCreateFromRecordIDUnlocked(v5, ID);
        if (v7)
        {
          v8 = v7;
          CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v7);
          CFRelease(v8);
        }
        ++v4;
      }
      while (v4 < (int)CFArrayGetCount(v3));
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1ABC11DCC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC11E44;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABC11E44(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMessageForRowID(int64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void (*v5[5])(void);
  _QWORD v6[6];
  __int128 buf;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessageForRowID [%lld]", (uint8_t *)&buf, 0xCu);
    }
  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v8 = 0x2020000000;
  v9 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_1ABC12060;
    v6[3] = &unk_1E5AB2200;
    v6[4] = &buf;
    v6[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE ROWID = ? ORDER BY message.ROWID ASC;"),
      (uint64_t)v6);
  }
  else
  {
    v5[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v5[1] = (void (*)(void))3221225472;
    v5[2] = (void (*)(void))sub_1ABC12108;
    v5[3] = (void (*)(void))&unk_1E5AAF630;
    v5[4] = (void (*)(void))&buf;
    __syncXPCIMDMessageRecordCopyMessageForRowID_IPCAction(v5, a1);
  }
  v3 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 24);
  _Block_object_dispose(&buf, 8);
  return v3;
}

void sub_1ABC12028(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1ABC12060(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  int ID;

  CSDBSqliteBindInt64();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      ID = CSDBRecordGetID();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], ID);
    }
    CFRelease(v3);
  }
}

uint64_t sub_1ABC12108(uint64_t a1, void *a2)
{
  uint64_t result;

  result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyMessagesForRowIDs(const __CFArray *a1)
{
  int Count;
  CFIndex v3;
  uint64_t v4;
  const __CFNumber *ValueAtIndex;
  const void *v6;
  uint64_t v7;
  void (*v9[5])(void);
  int64_t valuePtr;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  CFMutableArrayRef Mutable;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  Mutable = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a1 && CFArrayGetCount(a1))
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        v3 = 0;
        if (Count <= 1uLL)
          v4 = 1;
        else
          v4 = Count;
        do
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, v3);
          valuePtr = -1;
          if (ValueAtIndex)
          {
            CFNumberGetValue(ValueAtIndex, kCFNumberLongLongType, &valuePtr);
            if (valuePtr != -1)
            {
              v6 = (const void *)IMDMessageRecordCopyMessageForRowID(valuePtr);
              if (v6)
              {
                CFArrayAppendValue((CFMutableArrayRef)v12[3], v6);
                CFRelease(v6);
              }
            }
          }
          ++v3;
        }
        while (v4 != v3);
      }
    }
    else
    {
      v9[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v9[1] = (void (*)(void))3221225472;
      v9[2] = (void (*)(void))sub_1ABC122C0;
      v9[3] = (void (*)(void))&unk_1E5AAF630;
      v9[4] = (void (*)(void))&v11;
      __syncXPCIMDMessageRecordCopyMessagesForRowIDs_IPCAction(v9, (uint64_t)a1);
    }
  }
  v7 = v12[3];
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1ABC12298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

xpc_object_t sub_1ABC122C0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC12338;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABC12338(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v4)
  {
    v5 = v4;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v4);
    CFRelease(v5);
  }
  return 1;
}

uint64_t IMDMessageRecordMaxMessageIDFromChatMessageJoin()
{
  uint64_t v0;
  void (*v2[5])(void);
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1ABC12478;
    v3[3] = &unk_1E5AB2070;
    v3[4] = &v4;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT MAX(message_id) FROM chat_message_join"), (uint64_t)v3);
  }
  else
  {
    v2[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v2[1] = (void (*)(void))3221225472;
    v2[2] = (void (*)(void))sub_1ABC124B8;
    v2[3] = (void (*)(void))&unk_1E5AAF630;
    v2[4] = (void (*)(void))&v4;
    __syncXPCIMDMessageRecordMaxMessageIDFromChatMessageJoin_IPCAction(v2);
  }
  v0 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v0;
}

void sub_1ABC1245C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABC12478(uint64_t a1)
{
  uint64_t result;

  result = CSDBSqliteStatementInteger64Result();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

int64_t sub_1ABC124B8(uint64_t a1, xpc_object_t xdict)
{
  int64_t result;

  result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyMessagesFromRowIDDescLimit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  CFMutableArrayRef Mutable;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  Mutable = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a1 && a2 && IMDIsRunningInDatabaseServerProcess())
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_1ABC125E4;
    v6[3] = &unk_1E5AB2228;
    v6[5] = a1;
    v6[6] = a2;
    v6[4] = &v7;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE ROWID IN (SELECT message_id FROM chat_message_join WHERE message_id < ?) AND item_type = 0 ORDER BY ROWID DESC LIMIT ?"), (uint64_t)v6);
  }
  v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1ABC125C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1ABC125E4(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex v4;
  uint64_t v5;
  int ID;
  const void *v7;
  const void *v8;

  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v3 = v2;
    if ((int)CFArrayGetCount(v2) >= 1)
    {
      v4 = 0;
      v5 = *MEMORY[0x1E0C9AE00];
      do
      {
        CFArrayGetValueAtIndex(v3, v4);
        ID = CSDBRecordGetID();
        v7 = IMDMessageRecordCreateFromRecordIDUnlocked(v5, ID);
        if (v7)
        {
          v8 = v7;
          CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v7);
          CFRelease(v8);
        }
        ++v4;
      }
      while (v4 < (int)CFArrayGetCount(v3));
    }
    CFRelease(v3);
  }
}

void _IMDMessageRecordComputeNewMessagesForKnownRowIDs(const __CFArray *a1, uint64_t a2, __CFDictionary *a3)
{
  const __CFAllocator *v6;
  __CFArray *Mutable;
  const __CFSet *v8;
  __CFSet *v9;
  CFIndex Count;
  CFIndex v11;
  uint64_t v12;
  const void *ValueAtIndex;
  CFNumberRef v14;
  uint64_t valuePtr;

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v8 = (const __CFSet *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithArray:", a2);
  v9 = CFSetCreateMutable(v6, 0, MEMORY[0x1E0C9B3B0]);
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count << 32 >= 1)
    {
      v11 = 0;
      v12 = (int)Count;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v11);
        valuePtr = 0;
        valuePtr = IMDMessageRecordGetIdentifier((uint64_t)ValueAtIndex);
        CFSetAddValue(v9, (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", valuePtr));
        v14 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
        if (!v8 || !CFSetContainsValue(v8, v14))
          CFArrayAppendValue(Mutable, ValueAtIndex);
        if (v14)
          CFRelease(v14);
        ++v11;
      }
      while (v12 != v11);
    }
  }
  CFDictionarySetValue(a3, CFSTR("newMessages"), Mutable);
  if (Mutable)
    CFRelease(Mutable);
  if (v8)
  {
    -[__CFSet minusSet:](v8, "minusSet:", v9);
    CFDictionarySetValue(a3, CFSTR("readMessageIDs"), (const void *)-[__CFSet allObjects](v8, "allObjects"));
    CFRelease(v8);
  }
  if (v9)
    CFRelease(v9);
}

uint64_t IMDMessageRecordCopyNewMessagesForKnownRowIDs(void *a1)
{
  const __CFArray *v2;
  CFNumberRef v3;
  uint64_t v4;
  void (*v6[5])(void);
  uint64_t valuePtr;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  CFMutableDictionaryRef Mutable;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  Mutable = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v2 = (const __CFArray *)IMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID(-1, 0);
    _IMDMessageRecordComputeNewMessagesForKnownRowIDs(v2, (uint64_t)a1, (__CFDictionary *)v9[3]);
    if (v2)
      CFRelease(v2);
    valuePtr = IMDMessageRecordLastFailedMessageDate();
    v3 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
    if (v3)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v9[3], CFSTR("lastFailedDate"), v3);
      CFRelease(v3);
    }
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v6[1] = (void (*)(void))3221225472;
    v6[2] = (void (*)(void))sub_1ABC12D84;
    v6[3] = (void (*)(void))&unk_1E5AAF630;
    v6[4] = (void (*)(void))&v8;
    __syncXPCIMDMessageRecordCopyNewMessagesForKnownRowIDs_IPCAction(v6, a1);
  }
  v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1ABC129C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t IMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID(int64_t a1, int64_t a2)
{
  uint64_t MessagesSequenceNumber;
  NSObject *v5;
  NSObject *v6;
  const __CFString *v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v12[5])(void);
  _QWORD v13[7];
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    MessagesSequenceNumber = IMDMessageRecordGetMessagesSequenceNumber();
    if ((a2 & ~(a2 >> 63)) <= MessagesSequenceNumber)
    {
      if (IMOSLoggingEnabled())
      {
        v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134218240;
          v21 = a1;
          v22 = 2048;
          v23 = a2 & ~(a2 >> 63);
          _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID limit: %lld  rowID: %lld", buf, 0x16u);
        }
      }
      v7 = CFSTR("SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m  INDEXED BY message_idx_isRead_isFromMe_itemType  INNER JOIN chat_message_join cm ON cm.message_id = m.rowid  INNER JOIN chat c ON c.ROWID = cm.chat_id  WHERE m.is_read == 0  AND m.is_finished == 1  AND m.is_from_me == 0  AND m.item_type == 0  AND m.is_system_message == 0  AND c.is_filtered != ?  ORDER BY m.date DESC, m.ROWID DESC LIMIT ?;");
      v13[0] = MEMORY[0x1E0C809B0];
      if (a2 > 0)
        v7 = CFSTR("SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m  INDEXED BY message_idx_isRead_isFromMe_itemType  INNER JOIN chat_message_join cm ON cm.message_id = m.rowid  INNER JOIN chat c ON c.ROWID = cm.chat_id  WHERE m.ROWID > ?  AND m.is_read == 0  AND m.is_finished == 1  AND m.is_from_me == 0  AND m.item_type == 0  AND m.is_system_message == 0  AND c.is_filtered != ?  ORDER BY m.date DESC, m.ROWID DESC LIMIT ?;");
      v8 = CFSTR("SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m  INDEXED BY message_idx_isRead_isFromMe_itemType  INNER JOIN chat_message_join cm ON cm.message_id = m.rowid  INNER JOIN chat c ON c.ROWID = cm.chat_id  WHERE m.is_read == 0  AND m.is_finished == 1  AND m.is_from_me == 0  AND m.item_type == 0  AND m.is_system_message == 0  AND c.is_filtered != ?  ORDER BY m.ROWID DESC;");
      v13[1] = 3221225472;
      v13[2] = sub_1ABC1C5A0;
      v13[3] = &unk_1E5ABE308;
      v14 = a2 > 0;
      if (a2 > 0)
        v8 = CFSTR("SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m  INDEXED BY message_idx_isRead_isFromMe_itemType  INNER JOIN chat_message_join cm ON cm.message_id = m.rowid  INNER JOIN chat c ON c.ROWID = cm.chat_id  WHERE m.ROWID > ?  AND m.is_read == 0  AND m.is_finished == 1  AND m.is_from_me == 0  AND m.item_type == 0  AND m.is_system_message == 0  AND c.is_filtered != ?  ORDER BY m.ROWID DESC;");
      if (a1 <= 0)
        v9 = (uint64_t)v8;
      else
        v9 = (uint64_t)v7;
      v15 = a1 > 0;
      v13[5] = a2 & ~(a2 >> 63);
      v13[6] = a1;
      v13[4] = &v16;
      _IMDPerformLockedStatementBlockWithQuery(v9, (uint64_t)v13);
    }
    else
    {
      v5 = IMLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218240;
        v21 = a2 & ~(a2 >> 63);
        v22 = 2048;
        v23 = MessagesSequenceNumber;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "The RowID is out of bounds.  We were asked for rows after [%lld] which exceeds the current sequence number [%lld]", buf, 0x16u);
      }
    }
  }
  else
  {
    v12[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v12[1] = (void (*)(void))3221225472;
    v12[2] = (void (*)(void))sub_1ABC1C804;
    v12[3] = (void (*)(void))&unk_1E5AAF630;
    v12[4] = (void (*)(void))&v16;
    __syncXPCIMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID_IPCAction(v12, a1, a2);
  }
  v10 = v17[3];
  _Block_object_dispose(&v16, 8);
  return v10;
}

uint64_t IMDMessageRecordLastFailedMessageDate()
{
  IMDRemoteDatabaseProtocol *v0;
  uint64_t v1;
  void (*v3[5])(void);
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = -1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v0 = +[IMDDatabase synchronousDatabase](IMDDatabase, "synchronousDatabase");
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = sub_1ABC1ACC8;
    v4[3] = &unk_1E5AB8938;
    v4[4] = &v5;
    -[IMDRemoteDatabaseProtocol fetchInteger64ForKey:completionHandler:](v0, "fetchInteger64ForKey:completionHandler:", CFSTR("lastFailedMessageDate"), v4);
  }
  else
  {
    v3[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v3[1] = (void (*)(void))3221225472;
    v3[2] = (void (*)(void))sub_1ABC1ACD8;
    v3[3] = (void (*)(void))&unk_1E5AAF630;
    v3[4] = (void (*)(void))&v5;
    __syncXPCIMDMessageRecordLastFailedMessageDate_IPCAction(v3);
  }
  v1 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v1;
}

void sub_1ABC12D6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

xpc_object_t sub_1ABC12D84(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  uint64_t v4;
  _QWORD v5[6];

  result = xpc_dictionary_get_value(xdict, "dictionary_result");
  if (result)
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_1ABC12DFC;
    v5[3] = &unk_1E5ABDDB8;
    v4 = *(_QWORD *)(a1 + 32);
    v5[4] = result;
    v5[5] = v4;
    return (xpc_object_t)xpc_dictionary_apply(result, v5);
  }
  return result;
}

uint64_t sub_1ABC12DFC(uint64_t a1, char *__s1, void *a3)
{
  CFNumberRef v6;
  CFNumberRef v7;
  CFMutableArrayRef v8;
  CFMutableArrayRef Mutable;
  __CFDictionary *v10;
  const __CFString *v11;
  int64_t int64;
  _QWORD v14[6];
  _QWORD applier[5];

  if (!strcmp(__s1, "newMessages"))
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC12FBC;
    applier[3] = &unk_1E5AB5E88;
    applier[4] = Mutable;
    xpc_array_apply(a3, applier);
    v10 = *(__CFDictionary **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v11 = CFSTR("newMessages");
  }
  else
  {
    if (strcmp(__s1, "readMessageIDs"))
    {
      if (!strcmp(__s1, "lastFailedDate"))
      {
        int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), __s1);
        v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongLongType, &int64);
        if (v6)
        {
          v7 = v6;
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), CFSTR("lastFailedDate"), v6);
          v8 = v7;
LABEL_10:
          CFRelease(v8);
          return 1;
        }
      }
      return 1;
    }
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = sub_1ABC13000;
    v14[3] = &unk_1E5ABDD90;
    v14[4] = a3;
    v14[5] = Mutable;
    xpc_array_apply(a3, v14);
    v10 = *(__CFDictionary **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v11 = CFSTR("readMessageIDs");
  }
  CFDictionarySetValue(v10, v11, Mutable);
  if (Mutable)
  {
    v8 = Mutable;
    goto LABEL_10;
  }
  return 1;
}

uint64_t sub_1ABC12FBC(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v4)
  {
    v5 = v4;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v4);
    CFRelease(v5);
  }
  return 1;
}

uint64_t sub_1ABC13000(uint64_t a1, size_t a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  int64_t valuePtr;

  valuePtr = xpc_array_get_int64(*(xpc_object_t *)(a1 + 32), a2);
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongLongType, &valuePtr);
  if (v3)
  {
    v4 = v3;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v3);
    CFRelease(v4);
  }
  return 1;
}

void sub_1ABC13068(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  int ID;
  NSObject *v5;
  uint8_t v6[16];

  CSDBSqliteBindTextFromCFString();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2))
    {
      CFArrayGetValueAtIndex(v3, 0);
      ID = CSDBRecordGetID();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], ID);
    }
    CFRelease(v3);
  }
  else if (IMOSLoggingEnabled())
  {
    v5 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessageForGUIDUnlocked failed to get results", v6, 2u);
    }
  }
}

BOOL IMDMessageRecordDeleteBatchOfDeletedMessageGuids(int a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t);
  NSObject *v8;
  _BOOL8 v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  NSObject *v14;
  unint64_t v15;
  id v17;
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t v30[4];
  uint64_t v31;
  uint8_t buf[16];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (a1 <= 0)
  {
    v19 = xmmword_1E5ABDDD8;
    v20 = *(_OWORD *)off_1E5ABDDE8;
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected false '%@' in %s at %s:%d. %@"), CFSTR("batchAmount > 0"), "BOOL IMDMessageRecordDeleteBatchOfDeletedMessageGuids(int, NSArray **, NSError **)", IMFileLocationTrimFileName(), 793, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a2)
    *a2 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)&v19);
  IMDSqlOperationBeginTransaction(&v19);
  if (*((_QWORD *)&v29 + 1))
  {
    v9 = 0;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    sub_1ABC13540((uint64_t)&v19, (uint64_t)&v18, (uint64_t)&v17, a1);
    v9 = 0;
    v10 = v18;
    if (!*((_QWORD *)&v29 + 1) && v18)
    {
      if (objc_msgSend(v18, "count"))
      {
        v11 = objc_msgSend(v17, "count");
        if (v11 != objc_msgSend(v18, "count"))
        {
          *(_OWORD *)buf = xmmword_1E5ABDE00;
          v33 = *(_OWORD *)off_1E5ABDE10;
          v34 = 812;
          v12 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected false '%@' in %s at %s:%d. %@"), CFSTR("rowIDs.count == guids.count"), "BOOL IMDMessageRecordDeleteBatchOfDeletedMessageGuids(int, NSArray **, NSError **)", IMFileLocationTrimFileName(), 812, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
          v13 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
          if (v13)
          {
            v13(v12);
          }
          else if (IMOSLoggingEnabled())
          {
            v14 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)v30 = 138412290;
              v31 = v12;
              _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", v30, 0xCu);
            }
          }
        }
        if (objc_msgSend(v17, "count"))
        {
          v15 = objc_msgSend((id)objc_msgSend(v17, "objectAtIndex:", 0), "unsignedLongLongValue");
          sub_1ABC13638((uint64_t)&v19, v15, objc_msgSend((id)objc_msgSend(v17, "objectAtIndex:", objc_msgSend(v17, "count") - 1), "unsignedLongLongValue"));
        }
        v9 = *((_QWORD *)&v29 + 1) == 0;
        if (a2 && !*((_QWORD *)&v29 + 1))
        {
          *a2 = v18;
          v9 = 1;
        }
      }
      else
      {
        v9 = 0;
      }
      v10 = v18;
    }
    if (v10)
    {

      v18 = 0;
    }
    if (v17)

  }
  IMDSqlOperationCommitOrRevertTransaction(&v19);
  IMDSqlOperationRelease((uint64_t)&v19, a3);
  return v9;
}

BOOL sub_1ABC13540(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  id v8;
  id v9;
  const __CFString *v10;
  _QWORD v12[9];
  _QWORD v13[5];
  int v14;

  if (a3)
  {
    v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if (a2)
    {
LABEL_3:
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      goto LABEL_6;
    }
  }
  else
  {
    v8 = 0;
    if (a2)
      goto LABEL_3;
  }
  v9 = 0;
LABEL_6:
  v13[0] = MEMORY[0x1E0C809B0];
  v13[2] = sub_1ABC13DD4;
  v13[3] = &unk_1E5ABDE48;
  v13[1] = 3221225472;
  if (a4)
    v10 = CFSTR("SELECT * from deleted_messages ORDER BY ROWID ASC LIMIT ?;");
  else
    v10 = CFSTR("SELECT * from deleted_messages ORDER BY ROWID ASC;");
  v14 = a4;
  v13[4] = a1;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1ABC13DEC;
  v12[3] = &unk_1E5ABDE98;
  v12[4] = v8;
  v12[5] = v9;
  v12[6] = a1;
  v12[7] = a2;
  v12[8] = a3;
  return _IMDSqlOperationRunQuery(a1, v10, (uint64_t)v13, (uint64_t)v12);
}

BOOL sub_1ABC13638(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t);
  NSObject *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  _BOOL8 v11;
  NSObject *v12;
  _QWORD v14[7];
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v15 = xmmword_1E5ABDEB8;
    v16 = *(_OWORD *)off_1E5ABDEC8;
    v17 = 1017;
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("operation"), "BOOL _IMDDeleteDeletedMessagesWithRangeOfRowIDs(IMDSqlOperation *, uint64_t, uint64_t)", IMFileLocationTrimFileName(), 1017, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v19 = v6;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  if (a3 >= a2)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = sub_1ABC13F8C;
    v14[3] = &unk_1E5ABDF08;
    v14[4] = a1;
    v14[5] = a2;
    v14[6] = a3;
    v11 = _IMDSqlOperationRunQuery(a1, CFSTR("DELETE FROM deleted_messages where ROWID >= ? AND ROWID <= ?;"),
            (uint64_t)v14,
            0);
    CFRelease(CFSTR("DELETE FROM deleted_messages where ROWID >= ? AND ROWID <= ?;"));
  }
  else
  {
    v15 = xmmword_1E5ABDEE0;
    v16 = *(_OWORD *)off_1E5ABDEF0;
    v9 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected false '%@' in %s at %s:%d. %@"), CFSTR("lastRowID >= firstRowID"), "BOOL _IMDDeleteDeletedMessagesWithRangeOfRowIDs(IMDSqlOperation *, uint64_t, uint64_t)", IMFileLocationTrimFileName(), 1018, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v10 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v10)
    {
      v10(v9);
    }
    else if (IMOSLoggingEnabled())
    {
      v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v19 = v9;
        _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
    return 0;
  }
  return v11;
}

void IMDMessageRecordDeleteMessagesForGUIDs(const __CFArray *a1, uint64_t a2)
{
  NSObject *v4;
  CFIndex Count;
  __CFString *v6;
  NSObject *v7;
  _QWORD v8[7];
  uint8_t buf[4];
  const __CFArray *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v10 = a1;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_DEBUG, "IMDMessageRecordDeleteMessagesForGUIDs %@", buf, 0xCu);
    }
  }
  if (a1 && CFArrayGetCount(a1))
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      Count = CFArrayGetCount(a1);
      v6 = IMDCreateQueryRemoveMessagesFromMessageTableWithMessageGuidCount(Count);
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = sub_1ABC13AC0;
      v8[3] = &unk_1E5ABDE28;
      v8[4] = v6;
      v8[5] = a1;
      v8[6] = a2;
      IMDRunSqlOperation((uint64_t)v8);
      CFRelease(v6);
      IMDCoreSpotlightScheduleUpdateForDeletedMessages(1006);
    }
    else
    {
      __syncXPCIMDMessageRecordDeleteMessagesForGUIDs_IPCAction(0, (uint64_t)a1);
    }
  }
  else if (IMOSLoggingEnabled())
  {
    v7 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "IMDMessageRecordDeleteMessagesForGUIDs has no GUIDs to delete.", buf, 2u);
    }
  }
}

uint64_t sub_1ABC13AC0(uint64_t a1, uint64_t a2)
{
  const __CFString *v4;
  uint64_t v5;
  _QWORD v7[6];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC13B4C;
  v7[3] = &unk_1E5AB2248;
  v4 = *(const __CFString **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7[4] = a2;
  v7[5] = v5;
  _IMDSqlOperationRunQuery(a2, v4, (uint64_t)v7, 0);
  if (!*(_QWORD *)(a2 + 168))
    IMDSqlOperationUpdateLastDeleteSequenceNumber(a2);
  return IMDSqlOperationGetError(a2, *(_QWORD **)(a1 + 48));
}

void sub_1ABC13B4C(uint64_t a1)
{
  IMDSqlStatementBindTextFromArrayOfCFStrings(*(_QWORD *)(a1 + 32) + 32, *(CFArrayRef *)(a1 + 40));
}

void IMDSelectMessagesForDeletionAfterDaysWithQuery(uint64_t a1, const __CFString *a2, _QWORD *a3, _QWORD *a4)
{
  NSObject *v8;
  double v9;
  id v10;
  const unsigned __int8 *v11;
  uint8_t v12[24];
  uint8_t buf[16];
  __int128 v14;
  _OWORD v15[9];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a1;
      _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_DEBUG, "IMDSelectMessagesForDeletionAfterDaysWithQuery %lld", buf, 0xCu);
    }
  }
  v9 = sub_1ABC13D34(a1);
  if (a3)
    *a3 = 0;
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  *(_OWORD *)buf = 0u;
  IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
  _IMDSqlOperationBeginQuery((uint64_t)buf, a2);
  IMDSqlStatementBindInt64((uint64_t)v15, (uint64_t)v9);
  v10 = 0;
  while (IMDSqlOperationHasRows((uint64_t)buf))
  {
    IMDSqlOperationColumnByIndex((uint64_t)buf, 0, (uint64_t)v12);
    v11 = IMDStringFromSqlColumn((uint64_t)v12);
    if (v11)
    {
      if (!v10)
        v10 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      objc_msgSend(v10, "addObject:", v11);
      CFRelease(v11);
    }
  }
  IMDSqlOperationFinishQuery((uint64_t)buf);
  if (((a3 != 0) & IMDSqlOperationRelease((uint64_t)buf, a4)) == 1)
    *a3 = v10;
  if (v10)

}

double sub_1ABC13D34(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;

  v2 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v2, "setDay:", -a1);
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v4 = (void *)objc_msgSend(v3, "dateByAddingComponents:toDate:options:", v2, objc_msgSend(MEMORY[0x1E0C99D68], "date"), 0);

  return (double)objc_msgSend(v4, "__im_nanosecondTimeInterval");
}

void IMDSelectAllMessagesForDeletionAfterDays(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  IMDSelectMessagesForDeletionAfterDaysWithQuery(a1, CFSTR("SELECT guid from message WHERE date >= 1000000000.0 AND date < ?;"),
    a2,
    a3);
}

void IMDSelectMessagesForDeletionAfterDays(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  IMDSelectMessagesForDeletionAfterDaysWithQuery(a1, CFSTR("SELECT guid from message WHERE date >= 1000000000.0 AND date < ? LIMIT 100;"),
    a2,
    a3);
}

void sub_1ABC13DD4(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 40);
  if (v1)
    IMDSqlStatementBindInt(*(_QWORD *)(a1 + 32) + 32, v1);
}

void sub_1ABC13DEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];
  __int128 v5;

  if (IMDSqlOperationHasRows(*(_QWORD *)(a1 + 48)))
  {
    v2 = MEMORY[0x1E0C809B0];
    do
    {
      v3 = *(_QWORD *)(a1 + 48);
      v4[0] = v2;
      v4[1] = 3221225472;
      v4[2] = sub_1ABC13EDC;
      v4[3] = &unk_1E5ABDE70;
      v5 = *(_OWORD *)(a1 + 32);
      IMDSqlOperationIterateRow(v3, (uint64_t)v4);
    }
    while (IMDSqlOperationHasRows(*(_QWORD *)(a1 + 48)));
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 48) + 168))
  {
    if (*(_QWORD *)(a1 + 56) && objc_msgSend(*(id *)(a1 + 40), "count"))
      **(_QWORD **)(a1 + 56) = *(id *)(a1 + 40);
    if (*(_QWORD *)(a1 + 64) && objc_msgSend(*(id *)(a1 + 32), "count"))
      **(_QWORD **)(a1 + 64) = *(id *)(a1 + 32);
  }

}

void sub_1ABC13EDC(uint64_t a1, __int128 *a2)
{
  int v3;
  void *v4;
  const unsigned __int8 *v5;
  __int128 v6;
  uint64_t v7;

  v3 = *((_DWORD *)a2 + 4);
  if (v3 == 1)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v6 = *a2;
      v7 = *((_QWORD *)a2 + 2);
      v5 = IMDStringFromSqlColumn((uint64_t)&v6);
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v5);
      CFRelease(v5);
    }
  }
  else if (!v3)
  {
    v4 = *(void **)(a1 + 32);
    if (v4)
    {
      v6 = *a2;
      v7 = *((_QWORD *)a2 + 2);
      objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", IMDInt64FromSqlColumn((uint64_t)&v6)));
    }
  }
}

void sub_1ABC13F8C(_QWORD *a1)
{
  IMDSqlStatementBindInt64(a1[4] + 32, a1[5]);
  IMDSqlStatementBindInt64(a1[4] + 32, a1[6]);
}

BOOL IMDSelectDeletedMessages(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD v5[7];
  int v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC14018;
  v5[3] = &unk_1E5ABDF28;
  v5[4] = a1;
  v5[5] = a2;
  v6 = a3;
  v5[6] = a4;
  return IMDRunSqlOperation((uint64_t)v5);
}

uint64_t sub_1ABC14018(uint64_t a1, uint64_t a2)
{
  sub_1ABC13540(a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56));
  return IMDSqlOperationGetError(a2, *(_QWORD **)(a1 + 48));
}

void IMDMessageRecordDeleteMessagesOlderThanDays(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _OWORD v10[2];
  _OWORD v11[9];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = IMLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LODWORD(v10[0]) = 134217984;
    *(_QWORD *)((char *)v10 + 4) = a1;
    _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "IMDMessageRecordDeleteMessagesOlderThanDays %lld", (uint8_t *)v10, 0xCu);
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v5 = sub_1ABC13D34(a1);
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(v10[0]) = 134217984;
      *(double *)((char *)v10 + 4) = v5;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "IMDMessageRecordDeleteMessagesOlderThanDays interval is %f", (uint8_t *)v10, 0xCu);
    }
    memset(v11, 0, sizeof(v11));
    memset(v10, 0, sizeof(v10));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v10);
    _IMDSqlOperationBeginQuery((uint64_t)v10, CFSTR("DELETE from message WHERE date >= 1000000000.0  AND date < ?  AND NOT (group_action_type IN (1,3) AND (ROWID IN (SELECT message_id FROM message_attachment_join)))  AND NOT (ROWID IN (SELECT message_id FROM chat_recoverable_message_join));"));
    IMDSqlStatementBindInt64((uint64_t)v11, (uint64_t)v5);
    if (IMDSqlOperationFinishQuery((uint64_t)v10))
    {
      v7 = IMDMessageRecordCountChangesUnlocked();
      v8 = (void *)objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
      v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v7);
      objc_msgSend(v8, "trackDeleteMessages:sourceType:", v9, objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance"), "keepMessagesSourceTypeForDays:", a1));
      IMDSqlOperationUpdateLastDeleteSequenceNumber((uint64_t)v10);
    }
    if (IMDSqlOperationRelease((uint64_t)v10, a2))
      IMDCoreSpotlightScheduleUpdateForDeletedMessages(1006);
  }
  else
  {
    __syncXPCIMDMessageRecordDeleteMessagesOlderThanDays_IPCAction(0, a1);
  }
}

uint64_t IMDMessageRecordCopyMessagesWithRoomnameOnServiceLimit(CFStringRef theString, const __CFString *a2, int64_t a3)
{
  _BOOL4 v6;
  uint64_t v7;
  NSObject *v9;
  void (*v10[5])(void);
  _QWORD v11[8];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  if (theString)
  {
    v6 = CFStringGetLength(theString) == 0;
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v6 = 1;
    if (!a2)
      goto LABEL_7;
  }
  if (!v6 || CFStringGetLength(a2))
  {
LABEL_7:
    v12 = 0;
    v13 = &v12;
    v14 = 0x2020000000;
    v15 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = sub_1ABC143C0;
      v11[3] = &unk_1E5ABDF50;
      v11[6] = a2;
      v11[7] = a3;
      v11[4] = &v12;
      v11[5] = theString;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INNER JOIN chat_message_join j ON   m.ROWID = j.message_id INNER JOIN chat c ON   c.ROWID = j.chat_id WHERE   c.room_name = ?   AND c.service_name = ? ORDER BY   m.ROWID DESC LIMIT ?"), (uint64_t)v11);
    }
    else
    {
      v10[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v10[1] = (void (*)(void))3221225472;
      v10[2] = (void (*)(void))sub_1ABC144F8;
      v10[3] = (void (*)(void))&unk_1E5AAF630;
      v10[4] = (void (*)(void))&v12;
      __syncXPCIMDMessageRecordCopyMessagesWithRoomnameOnServiceLimit_IPCAction(v10, (uint64_t)theString, (uint64_t)a2, a3);
    }
    v7 = v13[3];
    _Block_object_dispose(&v12, 8);
    return v7;
  }
  v9 = IMLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    sub_1ABC62754();
  return 0;
}

void sub_1ABC143A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1ABC143C0(uint64_t a1)
{
  uint64_t v2;
  const __CFArray *v3;
  uint64_t v4;
  CFIndex v5;
  int ID;
  const void *v7;
  const void *v8;

  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  v2 = CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = (const __CFArray *)v2;
    v4 = *MEMORY[0x1E0C9AE00];
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) && (int)CFArrayGetCount(v3) >= 1)
    {
      v5 = 0;
      do
      {
        CFArrayGetValueAtIndex(v3, v5);
        ID = CSDBRecordGetID();
        v7 = IMDMessageRecordCreateFromRecordIDUnlocked(v4, ID);
        if (v7)
        {
          v8 = v7;
          CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v7);
          CFRelease(v8);
        }
        ++v5;
      }
      while (v5 < (int)CFArrayGetCount(v3));
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1ABC144F8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC14570;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABC14570(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMessagesWithHandleIDLimit(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[7];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1ABC146A0;
  v4[3] = &unk_1E5AB2228;
  v4[5] = a1;
  v4[6] = a2;
  v4[4] = &v5;
  _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id INNER JOIN chat c ON   c.ROWID = cm.chat_id INNER JOIN chat_handle_join ch ON   c.ROWID = ch.chat_id WHERE   ch.handle_id = ?   AND c.room_name IS NULL ORDER BY m.ROWID DESC LIMIT ?"), (uint64_t)v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1ABC14688(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABC146A0(uint64_t a1)
{
  uint64_t result;

  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  result = CSDBRecordStoreProcessStatement();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyNewParticipantChangeItems()
{
  NSObject *v0;
  uint64_t v1;
  _QWORD v3[5];
  uint8_t buf[8];
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyNewParticipantChangeItems", buf, 2u);
    }
  }
  *(_QWORD *)buf = 0;
  v5 = buf;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABC14820;
  v3[3] = &unk_1E5AB2070;
  v3[4] = buf;
  _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m  INDEXED BY message_idx_isRead_isFromMe_itemType  INNER JOIN chat_message_join cm ON cm.message_id = m.rowid  INNER JOIN chat c ON c.ROWID = cm.chat_id  WHERE m.is_read == 0  AND m.is_from_me == 0  AND m.item_type == 1  ORDER BY m.date DESC;"),
    (uint64_t)v3);
  v1 = *((_QWORD *)v5 + 3);
  _Block_object_dispose(buf, 8);
  return v1;
}

void sub_1ABC14820(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  NSObject *v6;
  uint64_t v7;
  __CFArray *Mutable;
  CFIndex v9;
  uint64_t v10;
  int ID;
  const void *v12;
  int v13;
  CFIndex v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      v5 = (int)Count;
      if (IMOSLoggingEnabled())
      {
        v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v13 = 134217984;
          v14 = v5;
          _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyNewParticipantChangeItems got back %ld rows", (uint8_t *)&v13, 0xCu);
        }
      }
      v7 = *MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v9 = 0;
        if (v5 <= 1)
          v10 = 1;
        else
          v10 = v5;
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          ID = CSDBRecordGetID();
          v12 = IMDMessageRecordCreateFromRecordIDUnlocked(v7, ID);
          if (v12)
          {
            CFArrayAppendValue(Mutable, v12);
            CFRelease(v12);
          }
          ++v9;
        }
        while (v10 != v9);
        -[__CFArray sortUsingComparator:](Mutable, "sortUsingComparator:", &unk_1E5AAF408);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = Mutable;
      }
    }
    CFRelease(v3);
  }
}

uint64_t sub_1ABC149D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Date;
  uint64_t Identifier;

  Date = IMDMessageRecordGetDate(a2, 0);
  Identifier = IMDMessageRecordGetDate(a3, 0);
  if (!Date || !Identifier || Date == Identifier)
  {
    Date = IMDMessageRecordGetIdentifier(a2);
    Identifier = IMDMessageRecordGetIdentifier(a3);
  }
  if (Date > Identifier)
    return 1;
  else
    return -1;
}

uint64_t IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesLimit(void *a1, void *a2, int a3, int64_t a4)
{
  return IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifier(a1, a2, 0, 0, a3, 0, a4);
}

uint64_t IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifier(void *a1, void *a2, uint64_t a3, const __CFString *a4, int a5, int a6, int64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex Length;
  BOOL v14;
  void *v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const __CFArray *MessagesInSet;
  NSObject *v23;
  uint64_t v24;
  void (*v27[5])(void);
  _QWORD v28[12];
  BOOL v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint8_t buf[4];
  id v38;
  _DWORD v39[12];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a3 || a5)
    return _IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifier_Original(a1, a2, a3, a4, a5, a6, a7);
  v10 = objc_msgSend(a1, "count");
  v11 = objc_msgSend(a2, "count");
  v12 = v11;
  v35 = 0;
  v36 = 0;
  if (!a4)
  {
    if (v10 && v11 && v10 == v11)
      goto LABEL_14;
LABEL_24:
    v23 = IMLogHandleForCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      sub_1ABC627D8();
    return 0;
  }
  Length = CFStringGetLength(a4);
  if (!v10 || !v12 || v10 != v12)
    goto LABEL_24;
  if (Length < 1 || (IMMessageThreadIdentifierGetComponents(), !objc_msgSend(v36, "length")))
  {
LABEL_14:
    v14 = 0;
    goto LABEL_15;
  }
  v14 = objc_msgSend(v35, "length") != 0;
LABEL_15:
  v31 = 0;
  v32 = &v31;
  v33 = 0x2020000000;
  v34 = 0;
  if ((IMDIsRunningInDatabaseServerProcess() & 1) != 0)
  {
    v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", a7);
    if (!v16)
    {
      v17 = IMLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        sub_1ABC62780(objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70), v39);
    }
    v18 = objc_alloc_init(MEMORY[0x1E0D36AE8]);
    objc_msgSend(v18, "startTimingForKey:", CFSTR("sqlite-timing"));
    v19 = 0;
    v20 = MEMORY[0x1E0C809B0];
    do
    {
      v28[0] = v20;
      v28[1] = 3221225472;
      v28[2] = sub_1ABC150F4;
      v28[3] = &unk_1E5ABDFC8;
      v29 = v14;
      v30 = a6;
      v28[8] = a1;
      v28[9] = v19;
      v28[4] = v36;
      v28[5] = v35;
      v28[10] = a2;
      v28[11] = a4;
      v28[6] = v16;
      v28[7] = a7;
      IMDRunSqlOperation((uint64_t)v28);
      ++v19;
    }
    while (v10 != v19);
    objc_msgSend(v18, "stopTimingForKey:", CFSTR("sqlite-timing"));
    v21 = IMLogHandleForCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v38 = v18;
      _os_log_impl(&dword_1ABB60000, v21, OS_LOG_TYPE_INFO, "sqlite query timing: %@", buf, 0xCu);
    }

    MessagesInSet = IMDMessageRecordLoadMessagesInSet(v16, a7, 1);
    v32[3] = (uint64_t)MessagesInSet;

  }
  else
  {
    v27[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v27[1] = (void (*)(void))3221225472;
    v27[2] = (void (*)(void))sub_1ABC15490;
    v27[3] = (void (*)(void))&unk_1E5AAF630;
    v27[4] = (void (*)(void))&v31;
    __syncXPCIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesWithOptionalThreadIdentifierAndLimit_IPCAction(v27, (uint64_t)a1, (uint64_t)a2, 0, (uint64_t)a4, a7, 0, a6 != 0);
  }
  v24 = v32[3];
  _Block_object_dispose(&v31, 8);
  return v24;
}

void sub_1ABC14DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

uint64_t IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesWithOnlyUnreadAndLimit(void *a1, void *a2, int a3, int a4, int64_t a5)
{
  return IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifier(a1, a2, 0, 0, a3, a4, a5);
}

const __CFArray *IMDMessageRecordLoadMessagesInSet(void *a1, int64_t a2, char a3)
{
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  CFIndex v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  NSObject *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = (const __CFArray *)objc_msgSend((id)objc_msgSend(a1, "allObjects"), "mutableCopy");
  v6 = v5;
  if (v5)
  {
    Count = CFArrayGetCount(v5);
    v8 = Count << 32;
    if (Count << 32)
    {
      v9 = (int)Count;
      if ((int)Count >= a2)
        v10 = a2;
      else
        v10 = (int)Count;
      if (a2)
        v11 = v10;
      else
        v11 = (int)Count;
      v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", (int)Count);
      if (v8 >= 1)
      {
        v13 = 0;
        v14 = *MEMORY[0x1E0C9AE00];
        if (v9 <= 1)
          v15 = 1;
        else
          v15 = v9;
        do
        {
          v16 = objc_msgSend((id)CFArrayGetValueAtIndex(v6, v13), "integerValue");
          v17 = IMDMessageRecordCreateFromRecordIDUnlocked(v14, v16);
          if (v17)
          {
            v18 = v17;
            objc_msgSend(v12, "addObject:", v17);
            CFRelease(v18);
          }
          ++v13;
        }
        while (v15 != v13);
      }
      if ((a3 & 1) != 0)
        v19 = IMDCreateMessageSortComparatorDescending();
      else
        v19 = IMDCreateMessageSortComparatorAscending();
      v20 = v19;
      CFRelease(v6);
      if (!v20)
      {
        v21 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("comparator"), "CFMutableArrayRef IMDMessageRecordLoadMessagesInSet(NSSet *, uint64_t, BOOL)", IMFileLocationTrimFileName(), 1304, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
        v22 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
        if (v22)
        {
          v22(v21);
        }
        else if (IMOSLoggingEnabled())
        {
          v23 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v29 = v21;
            _os_log_impl(&dword_1ABB60000, v23, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
          }
        }
      }
      v24 = (void *)MEMORY[0x1AF435474]();
      v25 = (void *)objc_msgSend(v12, "sortedArrayUsingComparator:", v20);
      if (objc_msgSend(v12, "count") < v11)
        v11 = objc_msgSend(v12, "count");
      v6 = (const __CFArray *)objc_msgSend((id)objc_msgSend(v25, "subarrayWithRange:", 0, v11), "mutableCopy");
      objc_autoreleasePoolPop(v24);
      if ((a3 & 1) == 0)
      {
        v26 = objc_msgSend((id)objc_msgSend((id)-[__CFArray reverseObjectEnumerator](v6, "reverseObjectEnumerator"), "allObjects"), "mutableCopy");

        v6 = (const __CFArray *)v26;
      }

      _Block_release(v20);
    }
  }
  return v6;
}

void sub_1ABC150F4(uint64_t a1, uint64_t a2)
{
  __CFString *HistoryAllItemsWithOptionalThreadIdentifierQuery;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char v17;

  HistoryAllItemsWithOptionalThreadIdentifierQuery = IMDMessageRecordGetHistoryAllItemsWithOptionalThreadIdentifierQuery(*(unsigned __int8 *)(a1 + 96), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 97) != 0);
  if (!HistoryAllItemsWithOptionalThreadIdentifierQuery)
  {
    v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1ABC62804();
  }
  v10[2] = sub_1ABC15208;
  v10[3] = &unk_1E5ABDFA0;
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v12 = a2;
  v13 = v6;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v14 = v7;
  v17 = *(_BYTE *)(a1 + 96);
  v11 = *(_OWORD *)(a1 + 32);
  v15 = *(_OWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 56);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1ABC152C0;
  v9[3] = &unk_1E5AB2098;
  v9[4] = v8;
  v9[5] = a2;
  _IMDSqlOperationRunQuery(a2, HistoryAllItemsWithOptionalThreadIdentifierQuery, (uint64_t)v10, (uint64_t)v9);
  if (HistoryAllItemsWithOptionalThreadIdentifierQuery)
    CFRelease(HistoryAllItemsWithOptionalThreadIdentifierQuery);
}

void sub_1ABC15208(uint64_t a1)
{
  uint64_t v2;
  const void *ValueAtIndex;
  uint64_t v4;
  const void *v5;
  void *AssociatedMessageGUIDFromThreadIdentifier;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 48) + 32;
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), *(_QWORD *)(a1 + 64));
  IMDSqlStatementBindTextFromCFString(v2, (uint64_t)ValueAtIndex);
  v4 = *(_QWORD *)(a1 + 48) + 32;
  v5 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), *(_QWORD *)(a1 + 64));
  IMDSqlStatementBindTextFromCFString(v4, (uint64_t)v5);
  if (*(_BYTE *)(a1 + 96))
  {
    IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 48) + 32, *(_QWORD *)(a1 + 32));
    IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 48) + 32, *(_QWORD *)(a1 + 40));
    AssociatedMessageGUIDFromThreadIdentifier = (void *)IMMessageCreateAssociatedMessageGUIDFromThreadIdentifier();
    IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 48) + 32, (uint64_t)AssociatedMessageGUIDFromThreadIdentifier);

  }
  v7 = *(_QWORD *)(a1 + 88);
  if (v7 >= 1)
    IMDSqlStatementBindInt(*(_QWORD *)(a1 + 48) + 32, v7);
}

void sub_1ABC152C0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[5];
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 32))
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC628A0();
  }
  if (IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40)))
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v7[0] = v3;
      v7[1] = 3221225472;
      v7[2] = sub_1ABC153FC;
      v7[3] = &unk_1E5AB7420;
      v4 = *(_QWORD *)(a1 + 40);
      v7[4] = *(_QWORD *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v7);
    }
    while (IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40)));
  }
  v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)buf = 134217984;
    v9 = v6;
    _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "history query got %lu rows", buf, 0xCu);
  }
}

uint64_t sub_1ABC153FC(uint64_t a1, __int128 *a2)
{
  sqlite3_int64 v3;
  NSObject *v4;
  __int128 v6;
  uint64_t v7;

  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v3 = IMDInt64FromSqlColumn((uint64_t)&v6);
  if (!v3)
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC6293C();
  }
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v3));
}

void sub_1ABC15490(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  NSObject *v5;
  NSObject *v6;
  _QWORD v7[6];
  __int128 buf;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v9 = 0x2020000000;
    v10 = 0;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1ABC155F0;
    v7[3] = &unk_1E5ABDFF0;
    v7[4] = *(_QWORD *)(a1 + 32);
    v7[5] = &buf;
    xpc_array_apply(value, v7);
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1ABC629D8();
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = xdict;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "IMDP client got null array_result back: %@", (uint8_t *)&buf, 0xCu);
    }
  }
}

void sub_1ABC155D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1ABC155F0(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  NSObject *v6;
  int v8;
  const void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v8 = 138412290;
      v9 = v5;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "history query: IMDP client got at least one message: %@", (uint8_t *)&v8, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  if (v5)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v5);
  }
  return 1;
}

const __CFArray *IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUID(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifier(a1, a2, a3, a4, a5, 0, 0, 0);
}

const __CFArray *IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifier(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFString *a6, void (*a7)(void), void (*a8)(void))
{
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  NSObject *v17;
  _BOOL4 v18;
  void *AssociatedMessageGUIDFromThreadIdentifier;
  id v20;
  NSObject *v21;
  const __CFArray *MessagesInSet;
  const __CFArray *v23;
  const __CFArray *v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  _BOOL4 v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL *v34;
  const __CFArray *v35;
  const __CFArray *v36;
  const __CFArray *v37;
  BOOL *v38;
  BOOL *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  void (*v46[7])(void);
  _QWORD v47[10];
  char v48;
  _QWORD v49[11];
  char v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  _BYTE buf[24];
  id v58;
  _BYTE v59[20];
  __int16 v60;
  const __CFString *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v14 = objc_msgSend(a1, "count");
  v15 = objc_msgSend(a2, "count");
  if (a6)
  {
    v16 = CFStringGetLength(a6) > 0;
    if (!v14)
      goto LABEL_34;
  }
  else
  {
    v16 = 0;
    if (!v14)
      goto LABEL_34;
  }
  if (v15 && v14 == v15)
  {
    v17 = IMLogHandleForCategory();
    v18 = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
    if (!a3)
    {
      if (v18)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v17, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUID We have a NULL messageGUID, early returning ****--We should have not gotten to this point if we had a null messageGUID, please file a radar--****", buf, 2u);
      }
      return 0;
    }
    if (v18)
    {
      *(_DWORD *)buf = 138413570;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2112;
      v58 = (id)a3;
      *(_WORD *)v59 = 2048;
      *(_QWORD *)&v59[2] = a4;
      *(_WORD *)&v59[10] = 2048;
      *(_QWORD *)&v59[12] = a5;
      v60 = 2112;
      v61 = a6;
      _os_log_impl(&dword_1ABB60000, v17, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUID with ids: %@ services: %@ messageGUID: %@ numberOfMessagesBefore: %lld numberOfMessagesAfter: %lld threadIdentifier: %@", buf, 0x3Eu);
    }
    v51 = 0;
    v52 = &v51;
    v53 = 0x2020000000;
    v54 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      if (v16)
      {
        v55 = 0;
        v56 = 0;
        AssociatedMessageGUIDFromThreadIdentifier = (void *)IMMessageCreateAssociatedMessageGUIDFromThreadIdentifier();
        IMMessageThreadIdentifierGetComponents();
        if (objc_msgSend(v56, "length") && objc_msgSend(v55, "length"))
        {
          v42 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", a4);
          v40 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", a5);
          v20 = objc_alloc_init(MEMORY[0x1E0C99E20]);
          if (a4 >= 1)
            sub_1ABC2349C((uint64_t)CFSTR("SELECT   m.ROWID FROM   message m INDEXED BY   message_idx_thread_originator_guid INNER JOIN   chat_message_join cmj ON cmj.message_id = m.ROWID WHERE   m.thread_originator_guid = ? AND m.thread_originator_part = ?   AND m.date < (SELECT om.date FROM message om WHERE om.guid = ?) ORDER BY   m.date DESC LIMIT ?"), a3, (uint64_t)v56, (uint64_t)v55, a4, (uint64_t)v42);
          if (a5 >= 1)
            sub_1ABC2349C((uint64_t)CFSTR("SELECT   m.ROWID FROM   message m INDEXED BY   message_idx_thread_originator_guid INNER JOIN   chat_message_join cmj ON cmj.message_id = m.ROWID WHERE   m.thread_originator_guid = ? AND m.thread_originator_part = ?   AND m.date >= (SELECT om.date FROM message om WHERE om.guid = ?) ORDER BY   m.date ASC LIMIT ? + 1"), a3, (uint64_t)v56, (uint64_t)v55, a5, (uint64_t)v40);
          if (objc_msgSend(AssociatedMessageGUIDFromThreadIdentifier, "length"))
          {
            if (IMOSLoggingEnabled())
            {
              v21 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = AssociatedMessageGUIDFromThreadIdentifier;
                _os_log_impl(&dword_1ABB60000, v21, OS_LOG_TYPE_INFO, "Performing threaded history query for thread originator associated messages without thread_originator_guid with associated message GUID: %@", buf, 0xCu);
              }
            }
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = sub_1ABC23800;
            v58 = &unk_1E5AB2E08;
            *(_QWORD *)v59 = v20;
            *(_QWORD *)&v59[8] = AssociatedMessageGUIDFromThreadIdentifier;
            IMDRunSqlOperation((uint64_t)buf);
          }
          MessagesInSet = IMDMessageRecordLoadMessagesInSet(v42, a4, 1);
          v23 = IMDMessageRecordLoadMessagesInSet(v40, a5 + 1, 0);
          v24 = IMDMessageRecordLoadMessagesInSet(v20, a5, 0);
          if (a4 >= 1 && a7 && -[__CFArray count](MessagesInSet, "count") < (unint64_t)a4)
            *(_BYTE *)a7 = 0;
          if (a5 >= 1 && a8 && -[__CFArray count](v23, "count") < (unint64_t)(a5 + 1))
            *(_BYTE *)a8 = 0;
          -[__CFArray addObjectsFromArray:](v23, "addObjectsFromArray:", v24);
          -[__CFArray addObjectsFromArray:](v23, "addObjectsFromArray:", MessagesInSet);

          if (IMOSLoggingEnabled())
          {
            v25 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
            {
              v26 = -[__CFArray count](v23, "count");
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v26;
              _os_log_impl(&dword_1ABB60000, v25, OS_LOG_TYPE_INFO, "Threaded history query got %llu items", buf, 0xCu);
            }
          }
        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            v31 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412802;
              *(_QWORD *)&buf[4] = a6;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v56;
              *(_WORD *)&buf[22] = 2112;
              v58 = v55;
              _os_log_impl(&dword_1ABB60000, v31, OS_LOG_TYPE_INFO, "Bad thread identifier given to paged history query, identifier: %@ guid: %@ part: %@", buf, 0x20u);
            }
          }

          v23 = 0;
        }
        goto LABEL_41;
      }
      v38 = (BOOL *)a7;
      v39 = (BOOL *)a8;
      v30 = a4 > 0 && a5 > 0;
      v43 = objc_alloc_init(MEMORY[0x1E0C99E20]);
      if (v30)
        v41 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", a5);
      else
        v41 = 0;
      v32 = 0;
      v33 = MEMORY[0x1E0C809B0];
      do
      {
        while (1)
        {
          v49[0] = v33;
          v49[1] = 3221225472;
          v49[2] = sub_1ABC15F30;
          v49[3] = &unk_1E5ABE060;
          v50 = 0;
          v49[6] = a5;
          v49[7] = a1;
          v49[8] = v32;
          v49[9] = a2;
          v49[10] = a3;
          v49[4] = v43;
          v49[5] = a4;
          IMDRunSqlOperation((uint64_t)v49);
          if (v30)
            break;
          if (++v32 == v14)
          {
            if (a4 < 1)
            {
              if (v39)
                *v39 = objc_msgSend(v43, "count") > (unint64_t)a5;
              v34 = v38;
              if (v38)
LABEL_65:
                *v34 = 0;
            }
            else
            {
              v34 = v39;
              if (v38)
                *v38 = objc_msgSend(v43, "count") > (unint64_t)a4;
              a5 = a4;
              if (v39)
                goto LABEL_65;
            }
            v35 = IMDMessageRecordLoadMessagesInSet(v43, a5 + 1, a4 > 0);
            v52[3] = (uint64_t)v35;

            goto LABEL_40;
          }
        }
        v47[0] = v33;
        v47[1] = 3221225472;
        v47[2] = sub_1ABC16288;
        v47[3] = &unk_1E5ABE088;
        v48 = 0;
        v47[6] = a1;
        v47[7] = v32;
        v47[8] = a2;
        v47[9] = a3;
        v47[4] = v41;
        v47[5] = a5;
        IMDRunSqlOperation((uint64_t)v47);
        ++v32;
      }
      while (v32 != v14);
      v36 = IMDMessageRecordLoadMessagesInSet(v43, a4, 1);
      v37 = IMDMessageRecordLoadMessagesInSet(v41, a5 + 1, 0);
      if (v38)
        *v38 = -[__CFArray count](v36, "count") == a4;
      if (v39)
        *v39 = -[__CFArray count](v37, "count") == a5 + 1;
      -[__CFArray addObjectsFromArray:](v37, "addObjectsFromArray:", v36, v38, v39);
      v52[3] = (uint64_t)v37;

    }
    else
    {
      v46[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v46[1] = (void (*)(void))3221225472;
      v46[2] = (void (*)(void))sub_1ABC165D0;
      v46[3] = (void (*)(void))&unk_1E5ABE0B0;
      v46[4] = (void (*)(void))&v51;
      v46[5] = a7;
      v46[6] = a8;
      __syncXPCIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifier_IPCAction(v46, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)a6, a4, a5);
    }
LABEL_40:
    v23 = (const __CFArray *)v52[3];
LABEL_41:
    _Block_object_dispose(&v51, 8);
    return v23;
  }
LABEL_34:
  v27 = IMLogHandleForCategory();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    sub_1ABC62A74();
  return 0;
}

void sub_1ABC15E98(_Unwind_Exception *exc_buf, int a2)
{
  uint64_t v2;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1ABC15BACLL);
  }
  _Block_object_dispose((const void *)(v2 - 240), 8);
  _Unwind_Resume(exc_buf);
}

void sub_1ABC15F30(uint64_t a1, uint64_t a2)
{
  __CFString *MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];
  _QWORD v10[7];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery = IMDMessageRecordGetMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery(*(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if (!MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery)
  {
    v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1ABC62AA0();
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1ABC16030;
  v10[3] = &unk_1E5ABE010;
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v10[4] = a2;
  v10[5] = v6;
  v10[6] = *(_QWORD *)(a1 + 64);
  v11 = *(_OWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = v7;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1ABC160B0;
  v9[3] = &unk_1E5ABE038;
  v9[4] = v8;
  v9[5] = v12;
  v9[6] = v7;
  v9[7] = a2;
  _IMDSqlOperationRunQuery(a2, MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery, (uint64_t)v10, (uint64_t)v9);
  if (MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery)
    CFRelease(MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery);
}

void sub_1ABC16030(uint64_t a1)
{
  uint64_t v2;
  const void *ValueAtIndex;
  uint64_t v4;
  const void *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32) + 32;
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), *(_QWORD *)(a1 + 48));
  IMDSqlStatementBindTextFromCFString(v2, (uint64_t)ValueAtIndex);
  v4 = *(_QWORD *)(a1 + 32) + 32;
  v5 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), *(_QWORD *)(a1 + 48));
  IMDSqlStatementBindTextFromCFString(v4, (uint64_t)v5);
  IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 32) + 32, *(_QWORD *)(a1 + 64));
  v6 = *(_QWORD *)(a1 + 72);
  if (v6 <= 0)
    v6 = *(_QWORD *)(a1 + 80) & ~(*(uint64_t *)(a1 + 80) >> 63);
  IMDSqlStatementBindInt(*(_QWORD *)(a1 + 32) + 32, v6);
}

void sub_1ABC160B0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[5];
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 32))
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC62B3C(a1);
  }
  if (IMDSqlOperationHasRows(*(_QWORD *)(a1 + 56)))
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v4 = *(_QWORD *)(a1 + 56);
      v7[0] = v3;
      v7[1] = 3221225472;
      v7[2] = sub_1ABC161F4;
      v7[3] = &unk_1E5AB7420;
      v7[4] = *(_QWORD *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v7);
    }
    while (IMDSqlOperationHasRows(*(_QWORD *)(a1 + 56)));
  }
  v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)buf = 134217984;
    v9 = v6;
    _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Paged history query got %lu rows", buf, 0xCu);
  }
}

uint64_t sub_1ABC161F4(uint64_t a1, __int128 *a2)
{
  sqlite3_int64 v3;
  NSObject *v4;
  __int128 v6;
  uint64_t v7;

  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v3 = IMDInt64FromSqlColumn((uint64_t)&v6);
  if (!v3)
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC62BF8();
  }
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v3));
}

void sub_1ABC16288(uint64_t a1, uint64_t a2)
{
  __CFString *MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[7];
  _QWORD v10[7];
  __int128 v11;
  uint64_t v12;

  MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery = IMDMessageRecordGetMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery(*(unsigned __int8 *)(a1 + 80), 0, *(_QWORD *)(a1 + 40));
  if (!MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery)
  {
    v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1ABC62C94();
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1ABC16388;
  v10[3] = &unk_1E5AB5FE8;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v10[4] = a2;
  v10[5] = v6;
  v10[6] = v7;
  v11 = *(_OWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1ABC163F8;
  v9[3] = &unk_1E5AB6100;
  v9[4] = v8;
  v9[5] = v12;
  v9[6] = a2;
  _IMDSqlOperationRunQuery(a2, MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery, (uint64_t)v10, (uint64_t)v9);
  if (MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery)
    CFRelease(MessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifierQuery);
}

void sub_1ABC16388(uint64_t a1)
{
  uint64_t v2;
  const void *ValueAtIndex;
  uint64_t v4;
  const void *v5;

  v2 = *(_QWORD *)(a1 + 32) + 32;
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), *(_QWORD *)(a1 + 48));
  IMDSqlStatementBindTextFromCFString(v2, (uint64_t)ValueAtIndex);
  v4 = *(_QWORD *)(a1 + 32) + 32;
  v5 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), *(_QWORD *)(a1 + 48));
  IMDSqlStatementBindTextFromCFString(v4, (uint64_t)v5);
  IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 32) + 32, *(_QWORD *)(a1 + 64));
  IMDSqlStatementBindInt(*(_QWORD *)(a1 + 32) + 32, *(_DWORD *)(a1 + 72));
}

void sub_1ABC163F8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[5];
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 32))
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC62D30(a1);
  }
  if (IMDSqlOperationHasRows(*(_QWORD *)(a1 + 48)))
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v4 = *(_QWORD *)(a1 + 48);
      v7[0] = v3;
      v7[1] = 3221225472;
      v7[2] = sub_1ABC1653C;
      v7[3] = &unk_1E5AB7420;
      v7[4] = *(_QWORD *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v7);
    }
    while (IMDSqlOperationHasRows(*(_QWORD *)(a1 + 48)));
  }
  v5 = IMLogHandleForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)buf = 134217984;
    v9 = v6;
    _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Paged history query got %lu rows for second load", buf, 0xCu);
  }
}

uint64_t sub_1ABC1653C(uint64_t a1, __int128 *a2)
{
  sqlite3_int64 v3;
  NSObject *v4;
  __int128 v6;
  uint64_t v7;

  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v3 = IMDInt64FromSqlColumn((uint64_t)&v6);
  if (!v3)
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC62DEC();
  }
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v3));
}

uint64_t sub_1ABC165D0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  NSObject *v5;
  NSObject *v6;
  xpc_object_t v7;
  uint64_t result;
  void *v9;
  _QWORD applier[5];
  uint8_t buf[4];
  xpc_object_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC16748;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    xpc_array_apply(value, applier);
  }
  else
  {
    v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1ABC62E88();
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v12 = xdict;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUID IMDP client got null array_result back: %@", buf, 0xCu);
    }
  }
  v7 = xpc_dictionary_get_value(xdict, "has_messages_before");
  result = (uint64_t)xpc_dictionary_get_value(xdict, "has_messages_after");
  v9 = (void *)result;
  if (v7)
  {
    result = xpc_BOOL_get_value(v7);
    **(_BYTE **)(a1 + 40) = result;
  }
  if (v9)
  {
    result = xpc_BOOL_get_value(v9);
    **(_BYTE **)(a1 + 48) = result;
  }
  return result;
}

uint64_t sub_1ABC16748(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyFrequentRepliesForChatIdentifiersOnServicesUpToLimit(void *a1, void *a2, int64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const CFArrayCallBacks *v14;
  CFMutableArrayRef Mutable;
  const void *v16;
  NSObject *v17;
  uint64_t v18;
  void (*v20[5])(void);
  _QWORD v21[5];
  _QWORD v22[9];
  _QWORD v23[6];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = objc_msgSend(a1, "count");
  v7 = objc_msgSend(a2, "count");
  if (v6 && v7 && v6 == v7)
  {
    v24 = 0;
    v25 = &v24;
    v26 = 0x2020000000;
    v27 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3550]), "initWithCapacity:", a3 + a3 * v6);
      v9 = MEMORY[0x1E0C809B0];
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = sub_1ABC16A58;
      v23[3] = &unk_1E5ABE0D8;
      v23[4] = v8;
      v23[5] = a3;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT count(*) as count, m.text as reply FROM(  SELECT text FROM message WHERE is_from_me == 1 AND text != '\uFFFC' ORDER BY ROWID DESC LIMIT 1000) m GROUP BY m.text ORDER BY count DESC LIMIT ?;"),
        (uint64_t)v23);
      v22[0] = v9;
      v22[1] = 3221225472;
      v22[2] = sub_1ABC16B7C;
      v22[3] = &unk_1E5ABE100;
      v22[6] = a1;
      v22[7] = a2;
      v22[8] = a3;
      v22[4] = v8;
      v22[5] = v6;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT count(*) as count, m.text as reply FROM message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id WHERE m.is_from_me == 1 AND text != '\uFFFC' AND   cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) GROUP BY m.text ORDER BY count DESC, m.date DESC LIMIT ?"), (uint64_t)v22);
      v21[0] = v9;
      v21[1] = 3221225472;
      v21[2] = sub_1ABC16CE4;
      v21[3] = &unk_1E5ABE128;
      v21[4] = v8;
      v10 = (void *)objc_msgSend((id)objc_msgSend(v8, "allObjects"), "sortedArrayUsingComparator:", v21);
      v11 = objc_msgSend(v10, "count");
      if (a3 >= 1)
      {
        v12 = v11;
        v13 = 0;
        v14 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
        do
        {
          if (!v25[3])
          {
            Mutable = CFArrayCreateMutable(0, 0, v14);
            v25[3] = (uint64_t)Mutable;
          }
          if (v12 > v13)
          {
            v16 = (const void *)objc_msgSend(v10, "objectAtIndexedSubscript:", v13);
            CFArrayAppendValue((CFMutableArrayRef)v25[3], v16);
          }
          ++v13;
        }
        while (a3 != v13);
      }
    }
    else
    {
      v20[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v20[1] = (void (*)(void))3221225472;
      v20[2] = (void (*)(void))sub_1ABC16D34;
      v20[3] = (void (*)(void))&unk_1E5AAF630;
      v20[4] = (void (*)(void))&v24;
      __syncXPCIMDMessageRecordCopyFrequentRepliesForChatIdentifiersOnServicesLimit_IPCAction(v20, (uint64_t)a1, (uint64_t)a2, a3);
    }
    v18 = v25[3];
    _Block_object_dispose(&v24, 8);
  }
  else
  {
    v17 = IMLogHandleForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_1ABC627D8();
    return 0;
  }
  return v18;
}

void sub_1ABC16A24(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABC16A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const __CFAllocator *v6;
  int v7;
  const unsigned __int8 *v8;
  __CFString *v9;
  __CFString *v10;
  BOOL v11;
  uint64_t v12;

  CSDBSqliteBindInt64();
  if (sqlite3_step(*(sqlite3_stmt **)(a4 + 8)) == 100)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v7 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
      if (sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 1))
      {
        v8 = sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 1);
        v9 = (__CFString *)CFStringCreateWithCString(v6, (const char *)v8, 0x8000100u);
        v10 = v9;
        if (v9)
          v11 = v7 < 3;
        else
          v11 = 1;
        if (!v11)
        {
          v12 = objc_msgSend((id)-[__CFString stringByReplacingOccurrencesOfString:withString:](v9, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\uFFFC"), &stru_1E5AC1D70), "stringByReplacingOccurrencesOfString:withString:", CFSTR("\uFFFD"), &stru_1E5AC1D70);
          do
          {
            objc_msgSend(*(id *)(a1 + 32), "addObject:", v12);
            --v7;
          }
          while (v7);
        }
        if (v10)
          CFRelease(v10);
      }
    }
    while (sqlite3_step(*(sqlite3_stmt **)(a4 + 8)) == 100);
  }
  return CSDBSqliteStatementReset();
}

uint64_t sub_1ABC16B7C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  const __CFAllocator *v7;
  int v8;
  const unsigned __int8 *v9;
  __CFString *v10;
  __CFString *v11;
  BOOL v12;
  uint64_t v13;

  if (*(_QWORD *)(result + 40))
  {
    v5 = result;
    v6 = 0;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 48), v6);
      CSDBSqliteBindTextFromCFString();
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 56), v6);
      CSDBSqliteBindTextFromCFString();
      CSDBSqliteBindInt64();
      while (sqlite3_step(*(sqlite3_stmt **)(a4 + 8)) == 100)
      {
        v8 = sqlite3_column_int(*(sqlite3_stmt **)(a4 + 8), 0);
        if (sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 1))
        {
          v9 = sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 1);
          v10 = (__CFString *)CFStringCreateWithCString(v7, (const char *)v9, 0x8000100u);
          v11 = v10;
          if (v10)
            v12 = v8 < 3;
          else
            v12 = 1;
          if (!v12)
          {
            v13 = objc_msgSend((id)-[__CFString stringByReplacingOccurrencesOfString:withString:](v10, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\uFFFC"), &stru_1E5AC1D70), "stringByReplacingOccurrencesOfString:withString:", CFSTR("\uFFFD"), &stru_1E5AC1D70);
            do
            {
              objc_msgSend(*(id *)(v5 + 32), "addObject:", v13);
              --v8;
            }
            while (v8);
          }
          if (v11)
            CFRelease(v11);
        }
      }
      result = CSDBSqliteStatementReset();
      ++v6;
    }
    while (v6 < *(_QWORD *)(v5 + 40));
  }
  return result;
}

uint64_t sub_1ABC16CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = objc_msgSend(*(id *)(a1 + 32), "countForObject:", a2);
  v6 = objc_msgSend(*(id *)(a1 + 32), "countForObject:", a3);
  if (v5 == v6)
    v7 = 0;
  else
    v7 = -1;
  if (v5 < v6)
    return 1;
  else
    return v7;
}

void sub_1ABC16D34(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v4;
  size_t count;
  size_t v6;
  size_t v7;
  const CFArrayCallBacks *v8;
  const char *string;
  const void *v10;

  value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    v4 = value;
    count = xpc_array_get_count(value);
    if (count)
    {
      v6 = count;
      v7 = 0;
      v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      do
      {
        if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
        string = xpc_array_get_string(v4, v7);
        if (string)
        {
          v10 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", string);
          if (v10)
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v10);
        }
        ++v7;
      }
      while (v6 != v7);
    }
  }
}

uint64_t IMDMessageRecordCopyGUIDsForMessagesWithChatIdentifiersOnServices(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void (*v9[5])(void);
  _QWORD v10[8];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = objc_msgSend(a1, "count");
  v5 = objc_msgSend(a2, "count");
  if (v4 && v5 && v4 == v5)
  {
    v11 = 0;
    v12 = &v11;
    v13 = 0x2020000000;
    v14 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = sub_1ABC16F64;
      v10[3] = &unk_1E5ABDF50;
      v10[6] = a1;
      v10[7] = a2;
      v10[4] = &v11;
      v10[5] = v4;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT m.guid FROM message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id WHERE cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?)"), (uint64_t)v10);
    }
    else
    {
      v9[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v9[1] = (void (*)(void))3221225472;
      v9[2] = (void (*)(void))sub_1ABC1708C;
      v9[3] = (void (*)(void))&unk_1E5AAF630;
      v9[4] = (void (*)(void))&v11;
      __syncXPCIMDMessageRecordCopyGUIDsForMessagesWithChatIdentifiersOnServices_IPCAction(v9, (uint64_t)a1, (uint64_t)a2);
    }
    v7 = v12[3];
    _Block_object_dispose(&v11, 8);
  }
  else
  {
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1ABC627D8();
    return 0;
  }
  return v7;
}

void sub_1ABC16F48(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABC16F64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  const __CFAllocator *v7;
  const CFArrayCallBacks *v8;
  const unsigned __int8 *v9;
  CFStringRef v10;
  CFStringRef v11;
  __CFArray *v12;

  if (*(_QWORD *)(result + 40))
  {
    v5 = result;
    v6 = 0;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 48), v6);
      CSDBSqliteBindTextFromCFString();
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 56), v6);
      CSDBSqliteBindTextFromCFString();
      while (sqlite3_step(*(sqlite3_stmt **)(a4 + 8)) == 100)
      {
        if (sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 0))
        {
          v9 = sqlite3_column_text(*(sqlite3_stmt **)(a4 + 8), 0);
          v10 = CFStringCreateWithCString(v7, (const char *)v9, 0x8000100u);
          if (v10)
          {
            v11 = v10;
            v12 = *(__CFArray **)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 24);
            if (!v12)
            {
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
              v12 = *(__CFArray **)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 24);
            }
            CFArrayAppendValue(v12, v11);
            CFRelease(v11);
          }
        }
      }
      result = CSDBSqliteStatementReset();
      ++v6;
    }
    while (v6 < *(_QWORD *)(v5 + 40));
  }
  return result;
}

void sub_1ABC1708C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v4;
  size_t count;
  size_t v6;
  size_t v7;
  const CFArrayCallBacks *v8;
  const char *string;
  const void *v10;

  value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    v4 = value;
    count = xpc_array_get_count(value);
    if (count)
    {
      v6 = count;
      v7 = 0;
      v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      do
      {
        if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
        string = xpc_array_get_string(v4, v7);
        if (string)
        {
          v10 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", string);
          if (v10)
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v10);
        }
        ++v7;
      }
      while (v6 != v7);
    }
  }
}

uint64_t IMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServices(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  __CFString *v12;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v15;
  _BOOL8 v16;
  NSObject *v17;
  double v18;
  NSObject *v19;
  _OWORD v21[2];
  _OWORD v22[9];
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  double v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend(a2, "count");
  v7 = objc_msgSend(a3, "count");
  v8 = objc_msgSend(a1, "count");
  if (v8 && v6 && v7 && v6 == v7)
  {
    v9 = v8;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
      v11 = v10;
      memset(v22, 0, sizeof(v22));
      memset(v21, 0, sizeof(v21));
      IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v21);
      IMDSqlOperationBeginTransaction(v21);
      v12 = IMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServicesQuery1(v9);
      for (i = 0; i != v6; ++i)
      {
        _IMDSqlOperationBeginQuery((uint64_t)v21, v12);
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
        IMDSqlStatementBindTextFromCFString((uint64_t)v22, (uint64_t)ValueAtIndex);
        v15 = CFArrayGetValueAtIndex((CFArrayRef)a3, i);
        IMDSqlStatementBindTextFromCFString((uint64_t)v22, (uint64_t)v15);
        IMDSqlStatementBindTextFromArrayOfCFStrings((uint64_t)v22, (CFArrayRef)a1);
        IMDSqlOperationFinishQuery((uint64_t)v21);
      }
      IMDSqlOperationCommitOrRevertTransaction(v21);
      v16 = IMDSqlOperationRelease((uint64_t)v21, 0);
      CFRelease(v12);
      v17 = IMLogHandleForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
        *(_DWORD *)buf = 134218752;
        v24 = v9;
        v25 = 2048;
        v26 = v18 - v11;
        v27 = 2048;
        v28 = v6;
        v29 = 2048;
        v30 = v6;
        _os_log_impl(&dword_1ABB60000, v17, OS_LOG_TYPE_INFO, "Deleted %ld messages in %f seconds on %ld chats and %ld services", buf, 0x2Au);
      }
      IMDCoreSpotlightScheduleUpdateForDeletedMessages(1006);
    }
    else
    {
      __syncXPCIMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServices_IPCAction(0, (uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
      return 1;
    }
  }
  else
  {
    v19 = IMLogHandleForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      sub_1ABC62F24();
    return 0;
  }
  return v16;
}

void IMDMessageRecordMarkMessagesAsUnreadWithChatGUIDUpToGUIDFromMe(const __CFString *a1, uint64_t a2, int a3)
{
  CFStringRef v6;
  CFStringRef v7;
  uint64_t Identifier;
  _QWORD v9[5];
  char v10;

  if (IMDIsRunningInDatabaseServerProcess())
  {
    v6 = IMDChatRecordCopyChatForGUID(a1);
    if (v6)
    {
      v7 = v6;
      Identifier = IMDChatRecordGetIdentifier((uint64_t)v6);
      CFRelease(v7);
    }
    else
    {
      Identifier = -1;
    }
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_1ABC17498;
    v9[3] = &unk_1E5ABE148;
    v9[4] = Identifier;
    v10 = a3;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("UPDATE   message SET   is_read = 0, date_read = 0 WHERE   rowid in(    select m.rowid from message m       INNER JOIN chat_message_join       cm ON m.ROWID = cm.message_id     WHERE       cm.chat_id = ?       AND m.item_type == 0       AND m.is_from_me == ?  )"), (uint64_t)v9);
  }
  else
  {
    __syncXPCIMDMessageRecordMarkMessagesAsUnreadWithChatGUIDUpToGUIDFromMe_IPCAction(qword_1E5AAEAC0, (uint64_t)a1, a2, a3);
  }
}

void sub_1ABC17498()
{
  int v0;
  NSObject *v1;
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  v0 = CSDBSqliteStatementPerform();
  if (IMOSLoggingEnabled())
  {
    v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      v2[0] = 67109120;
      v2[1] = v0;
      _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_INFO, "SQLite returned %d from IMDMessageRecordMarkMessagesAsUnreadWithChatGUIDUpToGUIDFromMe", (uint8_t *)v2, 8u);
    }
  }
}

void IMDMessageRecordMarkMessageGUIDUnread(uint64_t a1)
{
  _QWORD v2[5];

  if (IMDIsRunningInDatabaseServerProcess())
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = sub_1ABC17630;
    v2[3] = &unk_1E5AB0D80;
    v2[4] = a1;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("update message set is_read = 0 where guid = ?;"),
      (uint64_t)v2);
  }
  else
  {
    __syncXPCIMDMessageRecordMarkMessageGUIDUnread_IPCAction(qword_1E5AAE7F8, a1);
  }
}

void sub_1ABC17630()
{
  int v0;
  int v1;
  NSObject *v2;
  _DWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  CSDBSqliteBindTextFromCFString();
  v0 = CSDBSqliteStatementPerform();
  if (v0 != 101)
  {
    v1 = v0;
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        v3[0] = 67109120;
        v3[1] = v1;
        _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "SQLite returned %d from IMDMessageRecordMarkMessageGUIDUnread", (uint8_t *)v3, 8u);
      }
    }
  }
}

uint64_t IMDMessageRecordCopyMessagesWithRoomNamesOnServicesUpToGUIDOrLimit(void *a1, void *a2, uint64_t a3, int64_t a4)
{
  return IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifier(a1, a2, a3, 0, 0, 0, a4);
}

uint64_t IMDMessageRecordCopyMessagesWithHandlesOnServicesLimit(void *a1, void *a2, int64_t a3)
{
  return _IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifier_Original(a1, a2, 0, 0, 1, 0, a3);
}

uint64_t IMDMessageRecordCopyMessagesWithHandleOnServiceLimit(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;
  uint64_t Identifier;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void (*v13[5])(void);
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  if ((a1 || CFStringGetLength(0)) && (a2 || CFStringGetLength(0)))
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v6 = IMDHandleRecordCopyHandleForIDOnService(a1, a2);
      v7 = (const void *)v6;
      if (v6)
      {
        Identifier = IMDHandleRecordGetIdentifier(v6);
        v9 = IMDMessageRecordCopyMessagesWithHandleIDLimit(Identifier, a3);
        v15[3] = v9;
        CFRelease(v7);
      }
    }
    else
    {
      v13[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v13[1] = (void (*)(void))3221225472;
      v13[2] = (void (*)(void))sub_1ABC178BC;
      v13[3] = (void (*)(void))&unk_1E5AAF630;
      v13[4] = (void (*)(void))&v14;
      __syncXPCIMDMessageRecordCopyMessagesWithHandleOnServiceLimit_IPCAction(v13, (uint64_t)a1, (uint64_t)a2, a3);
    }
    v10 = v15[3];
  }
  else
  {
    v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1ABC62F50();
    v10 = 0;
  }
  _Block_object_dispose(&v14, 8);
  return v10;
}

void sub_1ABC17898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

xpc_object_t sub_1ABC178BC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC17934;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABC17934(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMessageMatchingBodyStringWithChatIdentifiersServicesSkippingGUIDs(const __CFString *a1, const __CFString *a2, const __CFArray *a3, const __CFArray *a4, int a5, const __CFArray *a6, const __CFArray *a7, double a8)
{
  uint64_t v8;
  uint64_t Count;
  int v18;
  uint64_t v19;
  uint64_t v21;
  CFTypeRef v22;
  uint64_t v23;
  void (*v24[5])(void);
  _QWORD v25[15];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v8 = 0;
  if (!a1 || !a2)
    return v8;
  if (!CFStringGetLength(a1) || !CFStringGetLength(a2))
    return 0;
  if (!a6)
  {
    Count = 0;
    if (a7)
      goto LABEL_7;
    return 0;
  }
  Count = (int)CFArrayGetCount(a6);
  if (!a7)
    return 0;
LABEL_7:
  v18 = CFArrayGetCount(a7);
  v8 = 0;
  if (Count && v18)
  {
    v23 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a8), "__im_nanosecondTimeInterval");
    v26 = 0;
    v27 = &v26;
    v28 = 0x2020000000;
    v29 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      if (a3)
        v19 = (int)CFArrayGetCount(a3);
      else
        v19 = 0;
      if (a4)
        v21 = (int)CFArrayGetCount(a4);
      else
        v21 = 0;
      v22 = IMDMessageRecordCopyMessageMatchingBodyStringWithChatIdentifiersServicesSkippingGUIDsQuery(v19, v21, a5);
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = sub_1ABC17BF4;
      v25[3] = &unk_1E5ABE170;
      v25[6] = a2;
      v25[7] = v19;
      v25[8] = a3;
      v25[9] = v23;
      v25[10] = v21;
      v25[11] = a4;
      v25[12] = a1;
      v25[13] = a6;
      v25[14] = a7;
      v25[4] = &v26;
      v25[5] = Count;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)v22, (uint64_t)v25);
      if (v22)
        CFRelease(v22);
    }
    else
    {
      v24[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v24[1] = (void (*)(void))3221225472;
      v24[2] = (void (*)(void))sub_1ABC17D4C;
      v24[3] = (void (*)(void))&unk_1E5AAF630;
      v24[4] = (void (*)(void))&v26;
      __syncXPCIMDMessageRecordCopyMessageMatchingBodyStringWithChatIdentifiersServicesSkippingGUIDs_IPCAction(v24, (uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, (uint64_t)a7, a8);
    }
    v8 = v27[3];
    _Block_object_dispose(&v26, 8);
  }
  return v8;
}

void sub_1ABC17BD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABC17BF4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  CFIndex v4;
  CFIndex v5;
  uint64_t v6;

  if (*(_QWORD *)(result + 40))
  {
    v1 = result;
    v2 = 0;
    v3 = 0;
    do
    {
      CSDBSqliteBindTextFromCFString();
      if (*(uint64_t *)(v1 + 56) >= 1)
      {
        v4 = 0;
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 64), v4);
          CSDBSqliteBindTextFromCFString();
          ++v4;
        }
        while (v4 < *(_QWORD *)(v1 + 56));
      }
      CSDBSqliteBindInt64();
      if (*(uint64_t *)(v1 + 80) >= 1)
      {
        v5 = 0;
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 88), v5);
          CSDBSqliteBindTextFromCFString();
          ++v5;
        }
        while (v5 < *(_QWORD *)(v1 + 80));
      }
      CSDBSqliteBindTextFromCFString();
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 104), v3);
      CSDBSqliteBindTextFromCFString();
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 112), v3);
      CSDBSqliteBindTextFromCFString();
      v6 = CSDBSqliteStatementInteger64Result();
      if (v6 > v2)
        v2 = v6;
      result = CSDBSqliteStatementReset();
      ++v3;
    }
    while (v3 < *(_QWORD *)(v1 + 40));
    if (v2 > 0)
    {
      result = (uint64_t)IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], v2);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t sub_1ABC17D4C(uint64_t a1, void *a2)
{
  uint64_t result;

  result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyMessageMatchingBodyStringWithHandleSkippingServicesSkippingGUIDs(const __CFString *a1, const __CFString *a2, const __CFArray *a3, const __CFArray *a4, double a5)
{
  uint64_t v5;
  uint64_t v11;
  int Count;
  int v13;
  uint64_t v14;
  CFStringRef v15;
  NSObject *v16;
  void (*v18[5])(void);
  _QWORD v19[12];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD v24[10];
  uint64_t v25;

  v5 = 0;
  v25 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    if (CFStringGetLength(a1) && CFStringGetLength(a2))
    {
      v20 = 0;
      v21 = &v20;
      v22 = 0x2020000000;
      v23 = 0;
      v11 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a5), "__im_nanosecondTimeInterval");
      if (!IMDIsRunningInDatabaseServerProcess())
      {
        v18[0] = (void (*)(void))MEMORY[0x1E0C809B0];
        v18[1] = (void (*)(void))3221225472;
        v18[2] = (void (*)(void))sub_1ABC180D8;
        v18[3] = (void (*)(void))&unk_1E5AAF630;
        v18[4] = (void (*)(void))&v20;
        __syncXPCIMDMessageRecordCopyMessageMatchingBodyStringWithHandleSkippingServicesSkippingGUIDs_IPCAction(v18, (uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5);
LABEL_18:
        v5 = v21[3];
        _Block_object_dispose(&v20, 8);
        return v5;
      }
      if (a3)
      {
        Count = CFArrayGetCount(a3);
        if (a4)
        {
LABEL_8:
          v13 = CFArrayGetCount(a4);
          goto LABEL_13;
        }
      }
      else
      {
        Count = 0;
        if (a4)
          goto LABEL_8;
      }
      v13 = 0;
LABEL_13:
      v14 = Count;
      v15 = IMDMessageRecordCopyMessageMatchingBodyStringWithHandleSkippingServicesSkippingGUIDsQuery(Count, v13);
      if (!v15)
      {
        v16 = IMLogHandleForCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          sub_1ABC62F7C(objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70), v24);
      }
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = sub_1ABC17FE8;
      v19[3] = &unk_1E5ABE198;
      v19[6] = v14;
      v19[7] = a3;
      v19[8] = v11;
      v19[9] = v13;
      v19[10] = a4;
      v19[11] = a1;
      v19[4] = &v20;
      v19[5] = a2;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)v15, (uint64_t)v19);
      if (v15)
        CFRelease(v15);
      goto LABEL_18;
    }
    return 0;
  }
  return v5;
}

void sub_1ABC17FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1ABC17FE8(uint64_t a1)
{
  CFIndex v2;
  CFIndex v3;
  uint64_t result;

  CSDBSqliteBindTextFromCFString();
  if (*(uint64_t *)(a1 + 48) >= 1)
  {
    v2 = 0;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v2);
      CSDBSqliteBindTextFromCFString();
      ++v2;
    }
    while (v2 < *(_QWORD *)(a1 + 48));
  }
  CSDBSqliteBindInt64();
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    v3 = 0;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v3);
      CSDBSqliteBindTextFromCFString();
      ++v3;
    }
    while (v3 < *(_QWORD *)(a1 + 72));
  }
  CSDBSqliteBindTextFromCFString();
  result = CSDBSqliteStatementInteger64Result();
  if (result > 0)
  {
    result = (uint64_t)IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], result);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t sub_1ABC180D8(uint64_t a1, void *a2)
{
  uint64_t result;

  result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyMessageMatchingBodyStringWithHandleMatchingServiceMatchingSOSSkippingGUID(const __CFString *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  uint64_t v13;
  CFStringRef v14;
  NSObject *v15;
  void (*v17[5])(void);
  _QWORD v18[10];
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD v24[10];
  uint64_t v25;

  v6 = 0;
  v25 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    if (CFStringGetLength(a1) && CFStringGetLength(a2))
    {
      v20 = 0;
      v21 = &v20;
      v22 = 0x2020000000;
      v23 = 0;
      v13 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a6), "__im_nanosecondTimeInterval");
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT   MAX(m.ROWID) FROM   message m   INDEXED BY message_idx_handle WHERE   m.handle_id IN(   SELECT       h.rowid     FROM       handle h     WHERE       h.id = ?  )  AND m.date >= ?   AND m.is_from_me = 0   AND m.was_deduplicated = 0   AND m.cache_roomnames IS NULL   AND m.is_sos  = ?   AND m.service = ?   AND m.guid NOT IN (?)   AND m.text = ? "));
        if (!v14)
        {
          v15 = IMLogHandleForCategory();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            sub_1ABC62FD4(objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70), v24);
        }
        v18[0] = MEMORY[0x1E0C809B0];
        v18[1] = 3221225472;
        v18[2] = sub_1ABC1834C;
        v18[3] = &unk_1E5ABE1C0;
        v19 = a4;
        v18[6] = v13;
        v18[7] = a3;
        v18[8] = a5;
        v18[9] = a1;
        v18[4] = &v20;
        v18[5] = a2;
        _IMDPerformLockedStatementBlockWithQuery((uint64_t)v14, (uint64_t)v18);
        if (v14)
          CFRelease(v14);
      }
      else
      {
        v17[0] = (void (*)(void))MEMORY[0x1E0C809B0];
        v17[1] = (void (*)(void))3221225472;
        v17[2] = (void (*)(void))sub_1ABC183E8;
        v17[3] = (void (*)(void))&unk_1E5AAF630;
        v17[4] = (void (*)(void))&v20;
        __syncXPCIMDMessageRecordCopyMessageMatchingBodyStringWithHandleMatchingServiceMatchingSOSSkippingGUID_IPCAction(v17, (uint64_t)a1, (uint64_t)a2, a3, a6, a4, a5);
      }
      v6 = v21[3];
      _Block_object_dispose(&v20, 8);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_1ABC18320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1ABC1834C(uint64_t a1)
{
  uint64_t result;

  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  result = CSDBSqliteStatementInteger64Result();
  if (result >= 1)
  {
    result = (uint64_t)IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], result);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t sub_1ABC183E8(uint64_t a1, void *a2)
{
  uint64_t result;

  result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyMessageWithHandleOnServiceWithReplaceID(const __CFString *a1, const __CFString *a2, int64_t a3)
{
  uint64_t v6;
  const void *v7;
  uint64_t Identifier;
  const __CFArray *v9;
  int ID;
  const void *v11;
  uint64_t v12;
  NSObject *v13;
  void (*v15[5])(void);
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[8];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  if ((a1 || CFStringGetLength(0)) && (a2 || CFStringGetLength(0)))
  {
    v16 = 0;
    v17 = &v16;
    v18 = 0x2020000000;
    v19 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v6 = IMDHandleRecordCopyHandleForIDOnService(a1, a2);
      v7 = (const void *)v6;
      if (v6)
      {
        Identifier = IMDHandleRecordGetIdentifier(v6);
        v21 = 0;
        v22 = &v21;
        v23 = 0x2020000000;
        v24 = 0;
        v20[0] = MEMORY[0x1E0C809B0];
        v20[1] = 3221225472;
        v20[2] = sub_1ABC2397C;
        v20[3] = &unk_1E5ABDF50;
        v20[6] = a3;
        v20[7] = 1;
        v20[4] = &v21;
        v20[5] = Identifier;
        _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id INNER JOIN chat c ON   c.ROWID = cm.chat_id INNER JOIN chat_handle_join ch ON   c.ROWID = ch.chat_id WHERE   ch.handle_id = ?   AND c.room_name IS NULL   AND m.replace = ? ORDER BY m.ROWID DESC LIMIT ?"), (uint64_t)v20);
        v9 = (const __CFArray *)v22[3];
        _Block_object_dispose(&v21, 8);
        if (v9)
        {
          if (CFArrayGetCount(v9))
          {
            CFArrayGetValueAtIndex(v9, 0);
            ID = CSDBRecordGetID();
            v11 = IMDMessageRecordCreateFromRecordIDUnlocked(*MEMORY[0x1E0C9AE00], ID);
            v17[3] = (uint64_t)v11;
          }
          CFRelease(v9);
        }
        CFRelease(v7);
      }
    }
    else
    {
      v15[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v15[1] = (void (*)(void))3221225472;
      v15[2] = (void (*)(void))sub_1ABC18638;
      v15[3] = (void (*)(void))&unk_1E5AAF630;
      v15[4] = (void (*)(void))&v16;
      __syncXPCIMDMessageRecordCopyMessageWithHandleOnServiceWithReplaceID_IPCAction(v15, (uint64_t)a1, (uint64_t)a2, a3);
    }
    v12 = v17[3];
    _Block_object_dispose(&v16, 8);
  }
  else
  {
    v13 = IMLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_1ABC62F50();
    return 0;
  }
  return v12;
}

void sub_1ABC185FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABC18638(uint64_t a1, void *a2)
{
  uint64_t result;

  result = _IMDCopyIMDMessageRecordFromXPCObjectClient(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyUndeliveredOneToOneiMessages(int64_t a1)
{
  NSObject *v2;
  CFStringRef v3;
  uint64_t v4;
  void (*v6[5])(void);
  _QWORD v7[6];
  uint8_t buf[8];
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyUndeliveredOneToOneMadridMessages", buf, 2u);
    }
  }
  *(_QWORD *)buf = 0;
  v9 = buf;
  v10 = 0x2020000000;
  v11 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INDEXED BY message_idx_undelivered_one_to_one_imessage WHERE   m.cache_roomnames IS NULL   AND m.service IN ('%@', '%@')   AND m.is_sent = 1   AND m.is_delivered = 0   AND m.was_downgraded = 0   AND m.item_type == 0   AND m.schedule_type == 0   AND m.ROWID > ? ORDER BY m.date ASC"), CFSTR("iMessage"), CFSTR("RCS"));
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1ABC18814;
    v7[3] = &unk_1E5AB2200;
    v7[4] = buf;
    v7[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v3, (uint64_t)v7);
    if (v3)
      CFRelease(v3);
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v6[1] = (void (*)(void))3221225472;
    v6[2] = (void (*)(void))sub_1ABC18940;
    v6[3] = (void (*)(void))&unk_1E5AAF630;
    v6[4] = (void (*)(void))buf;
    __syncXPCIMDMessageRecordCopyUndeliveredOneToOneiMessages_IPCAction(v6, a1);
  }
  v4 = *((_QWORD *)v9 + 3);
  _Block_object_dispose(buf, 8);
  return v4;
}

void sub_1ABC18814(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex v4;
  uint64_t v5;
  int ID;
  const void *v7;
  const void *v8;

  CSDBSqliteBindInt64();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2) >= 1)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      {
        if ((int)CFArrayGetCount(v3) >= 1)
        {
          v4 = 0;
          v5 = *MEMORY[0x1E0C9AE00];
          do
          {
            CFArrayGetValueAtIndex(v3, v4);
            ID = CSDBRecordGetID();
            v7 = IMDMessageRecordCreateFromRecordIDUnlocked(v5, ID);
            if (v7)
            {
              v8 = v7;
              CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v7);
              CFRelease(v8);
            }
            ++v4;
          }
          while (v4 < (int)CFArrayGetCount(v3));
        }
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1ABC18940(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC189B8;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABC189B8(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyExpiringOrExpiredMessages(int64_t a1)
{
  NSObject *v2;
  CFStringRef v3;
  uint64_t v4;
  void (*v6[5])(void);
  _QWORD v7[6];
  uint8_t buf[8];
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyExpiredOrExpiringiMessages", buf, 2u);
    }
  }
  *(_QWORD *)buf = 0;
  v9 = buf;
  v10 = 0x2020000000;
  v11 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INDEXED BY message_idx_expire_state WHERE   (m.expire_state = %d OR m.expire_state = %d)  AND m.item_type == 0   AND m.schedule_type == 0   AND m.ROWID > ? ORDER BY m.date ASC"), 1, 2);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1ABC18BD4;
    v7[3] = &unk_1E5AB2200;
    v7[4] = buf;
    v7[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v3, (uint64_t)v7);
    if (v3)
      CFRelease(v3);
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v6[1] = (void (*)(void))3221225472;
    v6[2] = (void (*)(void))sub_1ABC18D00;
    v6[3] = (void (*)(void))&unk_1E5AAF630;
    v6[4] = (void (*)(void))buf;
    __syncXPCIMDMessageRecordCopyExpiringOrExpiredMessages_IPCAction(v6, a1);
  }
  v4 = *((_QWORD *)v9 + 3);
  _Block_object_dispose(buf, 8);
  return v4;
}

void sub_1ABC18BD4(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex v4;
  uint64_t v5;
  int ID;
  const void *v7;
  const void *v8;

  CSDBSqliteBindInt64();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2) >= 1)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      {
        if ((int)CFArrayGetCount(v3) >= 1)
        {
          v4 = 0;
          v5 = *MEMORY[0x1E0C9AE00];
          do
          {
            CFArrayGetValueAtIndex(v3, v4);
            ID = CSDBRecordGetID();
            v7 = IMDMessageRecordCreateFromRecordIDUnlocked(v5, ID);
            if (v7)
            {
              v8 = v7;
              CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v7);
              CFRelease(v8);
            }
            ++v4;
          }
          while (v4 < (int)CFArrayGetCount(v3));
        }
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1ABC18D00(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC18D78;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABC18D78(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyUnsentUnfailedMessages(int64_t a1)
{
  NSObject *v2;
  CFStringRef v3;
  uint64_t v4;
  void (*v6[5])(void);
  _QWORD v7[6];
  uint8_t buf[8];
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyUnsentUnfailedMessages", buf, 2u);
    }
  }
  *(_QWORD *)buf = 0;
  v9 = buf;
  v10 = 0x2020000000;
  v11 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m WHERE   m.is_from_me = 1   AND m.is_sent = 0   AND m.error = 0   AND m.item_type = 0   AND m.schedule_type = 0   AND m.ROWID > ? "));
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1ABC18F88;
    v7[3] = &unk_1E5AB2200;
    v7[4] = buf;
    v7[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v3, (uint64_t)v7);
    if (v3)
      CFRelease(v3);
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v6[1] = (void (*)(void))3221225472;
    v6[2] = (void (*)(void))sub_1ABC190B4;
    v6[3] = (void (*)(void))&unk_1E5AAF630;
    v6[4] = (void (*)(void))buf;
    __syncXPCIMDMessageRecordCopyUnsentUnfailedMessages_IPCAction(v6, a1);
  }
  v4 = *((_QWORD *)v9 + 3);
  _Block_object_dispose(buf, 8);
  return v4;
}

void sub_1ABC18F88(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex v4;
  uint64_t v5;
  int ID;
  const void *v7;
  const void *v8;

  CSDBSqliteBindInt64();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2) >= 1)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      {
        if ((int)CFArrayGetCount(v3) >= 1)
        {
          v4 = 0;
          v5 = *MEMORY[0x1E0C9AE00];
          do
          {
            CFArrayGetValueAtIndex(v3, v4);
            ID = CSDBRecordGetID();
            v7 = IMDMessageRecordCreateFromRecordIDUnlocked(v5, ID);
            if (v7)
            {
              v8 = v7;
              CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v7);
              CFRelease(v8);
            }
            ++v4;
          }
          while (v4 < (int)CFArrayGetCount(v3));
        }
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1ABC190B4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC1912C;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABC1912C(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMessageActionItemsForOriginalMessageGUID(uint64_t a1)
{
  NSObject *v2;
  void (*v4[5])(void);
  _QWORD v5[6];
  __int128 buf;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessageActionItemsForOriginalMessageGUID [%@]", (uint8_t *)&buf, 0xCu);
    }
  }
  if (a1)
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v7 = 0x2020000000;
    v8 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 3221225472;
      v5[2] = sub_1ABC19350;
      v5[3] = &unk_1E5AB2200;
      v5[4] = &buf;
      v5[5] = a1;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE subject = ?   AND item_type = ? ORDER BY message.ROWID ASC;"),
        (uint64_t)v5);
    }
    else
    {
      v4[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v4[1] = (void (*)(void))3221225472;
      v4[2] = (void (*)(void))sub_1ABC1947C;
      v4[3] = (void (*)(void))&unk_1E5AAF630;
      v4[4] = (void (*)(void))&buf;
      __syncXPCIMDMessageRecordCopyMessageActionItemsForOriginalMessageGUID_IPCAction(v4, a1);
    }
    a1 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 24);
    _Block_object_dispose(&buf, 8);
  }
  return a1;
}

void sub_1ABC19314(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1ABC19350(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  CFMutableArrayRef Mutable;
  __CFArray *v8;
  CFIndex v9;
  uint64_t v10;
  int ID;
  const void *v12;
  const void *v13;

  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindInt64();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      v5 = (int)Count;
      v6 = *MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (int)Count, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v8 = Mutable;
        v9 = 0;
        if (v5 <= 1)
          v10 = 1;
        else
          v10 = v5;
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          ID = CSDBRecordGetID();
          v12 = IMDMessageRecordCreateFromRecordIDUnlocked(v6, ID);
          if (v12)
          {
            v13 = v12;
            CFArrayAppendValue(v8, v12);
            CFRelease(v13);
          }
          ++v9;
        }
        while (v10 != v9);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1ABC1947C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC194F4;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABC194F4(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCountAllUnreadMessages()
{
  NSObject *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  unint64_t i;
  void *v6;
  char v7;
  void *v8;
  char v9;
  int v10;
  uint64_t v11;
  __CFString *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  void (*v17[5])(void);
  _QWORD v18[7];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t buf[4];
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = -1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      v0 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "Counting all unread messages...", buf, 2u);
      }
    }
    v1 = objc_alloc_init(MEMORY[0x1E0D36AE8]);
    objc_msgSend(v1, "startTimingForKey:", CFSTR("IMDMessageRecordCountAllUnreadMessages"));
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", &unk_1E5ADC0C0, 0);
    if (+[IMDNotificationsController isSpamFilteringOn](IMDNotificationsController, "isSpamFilteringOn"))
      v3 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("IncomingMessageAlertFiltrationUnknownSenders"), CFSTR("IncomingMessageAlertFiltrationTransactions"), CFSTR("IncomingMessageAlertFiltrationPromotions"), 0);
    else
      v3 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("IncomingMessageAlertFiltrationUnknownSenders"), 0);
    v4 = (void *)v3;
    if (v3)
    {
      for (i = 0; objc_msgSend(v4, "count") > i; ++i)
      {
        v6 = (void *)objc_msgSend(v4, "objectAtIndexedSubscript:", i);
        if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D397E8], "sharedInstance"), "getBoolFromDomain:forKey:", CFSTR("com.apple.MobileSMS"), v6))
        {
          v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("IncomingMessageAlertFiltrationUnknownSenders"));
          v8 = &unk_1E5ADC0D8;
          if ((v7 & 1) != 0
            || (v9 = objc_msgSend(v6, "isEqualToString:", CFSTR("IncomingMessageAlertFiltrationTransactions")),
                v8 = &unk_1E5ADC0F0,
                (v9 & 1) != 0)
            || (v10 = objc_msgSend(v6, "isEqualToString:", CFSTR("IncomingMessageAlertFiltrationPromotions")),
                v8 = &unk_1E5ADC108,
                v10))
          {
            objc_msgSend(v2, "addObject:", v8);
          }
        }
      }
    }
    v11 = objc_msgSend(v2, "count");
    v12 = IMDMessageRecordCountAllUnreadMessagesQuery(v11);
    if (IMOSLoggingEnabled())
    {
      v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v24 = v2;
        _os_log_impl(&dword_1ABB60000, v13, OS_LOG_TYPE_INFO, "Inboxes to exclude from unread messages count: %@", buf, 0xCu);
      }
    }
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = sub_1ABC199C4;
    v18[3] = &unk_1E5ABE1E8;
    v18[4] = v2;
    v18[5] = &v19;
    v18[6] = v11;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v12, (uint64_t)v18);
    if (v12)
      CFRelease(v12);
    objc_msgSend(v1, "stopTimingForKey:", CFSTR("IMDMessageRecordCountAllUnreadMessages"));
    if (IMOSLoggingEnabled())
    {
      v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v24 = v1;
        _os_log_impl(&dword_1ABB60000, v14, OS_LOG_TYPE_INFO, "IMDMessageRecordCountAllUnreadMessages timing: %@", buf, 0xCu);
      }
    }

  }
  else
  {
    v17[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v17[1] = (void (*)(void))3221225472;
    v17[2] = (void (*)(void))sub_1ABC19A50;
    v17[3] = (void (*)(void))&unk_1E5AAF630;
    v17[4] = (void (*)(void))&v19;
    __syncXPCIMDMessageRecordCountAllUnreadMessages_IPCAction(v17);
  }
  v15 = v20[3];
  _Block_object_dispose(&v19, 8);
  return v15;
}

void sub_1ABC199C4(uint64_t a1)
{
  unint64_t v2;

  if (*(_QWORD *)(a1 + 48))
  {
    v2 = 0;
    do
    {
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v2), "integerValue");
      CSDBSqliteBindInt();
      ++v2;
    }
    while (v2 < *(_QWORD *)(a1 + 48));
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = CSDBSqliteStatementInteger64Result();

}

int64_t sub_1ABC19A50(uint64_t a1, xpc_object_t xdict)
{
  int64_t result;

  result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCountAllUnreadMessagesForChatGUID(const __CFString *a1)
{
  CFStringRef v2;
  CFStringRef v3;
  int64_t Identifier;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void (*v10[5])(void);
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t buf[4];
  const __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = -1;
  if (a1 && CFStringGetLength(a1) > 0)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v2 = IMDChatRecordCopyChatForGUID(a1);
      v3 = v2;
      if (!v2 || (Identifier = IMDChatRecordGetIdentifier((uint64_t)v2), Identifier == -1))
      {
        if (IMOSLoggingEnabled())
        {
          v5 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v16 = a1;
            _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "** WARNING ** counting all unread messages for chat row id of -1 because no chat record for guid (%@) could be found!", buf, 0xCu);
          }
        }
        Identifier = -1;
      }
      v6 = IMDMessageRecordCountAllUnreadMessagesForChatRowID(Identifier);
      v12[3] = v6;
      if (v3)
        CFRelease(v3);
    }
    else
    {
      v10[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v10[1] = (void (*)(void))3221225472;
      v10[2] = (void (*)(void))sub_1ABC19D7C;
      v10[3] = (void (*)(void))&unk_1E5AAF630;
      v10[4] = (void (*)(void))&v11;
      __syncXPCIMDMessageRecordCountAllUnreadMessagesForChatGUID_IPCAction(v10, (uint64_t)a1);
    }
  }
  else
  {
    v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1ABC6302C();
  }
  v8 = v12[3];
  _Block_object_dispose(&v11, 8);
  return v8;
}

uint64_t IMDMessageRecordCountAllUnreadMessagesForChatRowID(int64_t a1)
{
  uint64_t v2;
  void (*v4[5])(void);
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = -1;
  if ((a1 & 0x8000000000000000) == 0)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 3221225472;
      v5[2] = sub_1ABC19F00;
      v5[3] = &unk_1E5AB2200;
      v5[4] = &v6;
      v5[5] = a1;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT   COUNT(m.ROWID) FROM   message m   INDEXED BY message_idx_isRead_isFromMe_itemType INNER JOIN chat_message_join   cm ON m.ROWID = cm.message_id WHERE   cm.chat_id = ?   AND m.item_type == 0   AND m.is_read == 0   AND m.is_from_me == 0 "), (uint64_t)v5);
    }
    else
    {
      v4[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v4[1] = (void (*)(void))3221225472;
      v4[2] = (void (*)(void))sub_1ABC19F54;
      v4[3] = (void (*)(void))&unk_1E5AAF630;
      v4[4] = (void (*)(void))&v6;
      __syncXPCIMDMessageRecordCountAllUnreadMessagesForChatRowID_IPCAction(v4, a1);
    }
  }
  v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_1ABC19D60(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

int64_t sub_1ABC19D7C(uint64_t a1, xpc_object_t xdict)
{
  int64_t result;

  result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCountAllUnreadMessagesForChatRowIDUnlocked(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v1 = -1;
  v7 = -1;
  if ((a1 & 0x8000000000000000) == 0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1ABC19E6C;
    v3[3] = &unk_1E5AB2200;
    v3[4] = &v4;
    v3[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT   COUNT(m.ROWID) FROM   message m INNER JOIN chat_message_join   cm ON m.ROWID = cm.message_id WHERE   cm.chat_id = ?   AND m.item_type == 0   AND m.is_read == 0   AND m.is_from_me == 0 "), (uint64_t)v3);
    v1 = v5[3];
  }
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1ABC19E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABC19E6C(uint64_t a1)
{
  uint64_t result;

  CSDBSqliteBindInt64();
  result = CSDBSqliteStatementInteger64Result();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1ABC19EC0(uint64_t a1)
{
  uint64_t result;

  result = CSDBSqliteStatementInteger64Result();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1ABC19F00(uint64_t a1)
{
  uint64_t result;

  CSDBSqliteBindInt64();
  result = CSDBSqliteStatementInteger64Result();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

int64_t sub_1ABC19F54(uint64_t a1, xpc_object_t xdict)
{
  int64_t result;

  result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _IMDMessageRecordCountAllUnreadMessagesForChatQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  NSObject *v6;
  uint64_t result;
  _QWORD v8[5];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((IMDIsRunningInDatabaseServerProcess() & 1) == 0)
  {
    v9 = xmmword_1E5ABE208;
    v10 = *(_OWORD *)off_1E5ABE218;
    v11 = 2765;
    v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected false '%@' in %s at %s:%d. %@"), CFSTR("IMDIsRunningInDatabaseServerProcess()"), "void _IMDMessageRecordCountAllUnreadMessagesForChatQuery(CFStringRef, void (^)(int64_t, SInt64))", IMFileLocationTrimFileName(), 2765, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("_IMDMessageRecordCountAllUnreadMessagesForAllUnreadChats can only be called from IMDPersistenceAgent")));
    v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v13 = v4;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  result = IMDIsRunningInDatabaseServerProcess();
  if ((_DWORD)result)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1ABC1A13C;
    v8[3] = &unk_1E5ABE238;
    v8[4] = a2;
    return _IMDPerformLockedStatementBlockWithQuery(a1, (uint64_t)v8);
  }
  return result;
}

uint64_t sub_1ABC1A13C(uint64_t a1)
{
  uint64_t result;

  result = CSDBSqliteStep();
  if ((_DWORD)result)
  {
    do
    {
      CSDBSqliteStatementInteger64ResultColumn();
      CSDBSqliteStatementInteger64ResultColumn();
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      result = CSDBSqliteStep();
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t _IMDMessageRecordCountAllUnreadMessagesForAllUnreadChats(uint64_t a1)
{
  return _IMDMessageRecordCountAllUnreadMessagesForChatQuery((uint64_t)CFSTR("SELECT cm.chat_id, COUNT(1) FROM message m INNER JOIN chat_message_join cm ON m.ROWiD = cm.message_id WHERE m.item_type == 0 AND m.is_read == 0 AND m.is_from_me == 0 GROUP BY +cm.chat_id"), a1);
}

const __CFString *IMDMessageRecordCountMessagesWithThreadOriginatorGroupedByParts(const __CFString *a1)
{
  NSObject *v2;
  _QWORD v4[6];
  uint8_t buf[8];
  uint8_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  uint64_t v10;

  if (IMDIsRunningInDatabaseServerProcess())
  {
    *(_QWORD *)buf = 0;
    v6 = buf;
    v7 = 0x3052000000;
    v8 = sub_1ABC1A308;
    v9 = sub_1ABC1A318;
    v10 = 0;
    if (a1)
    {
      if (CFStringGetLength(a1))
      {
        v4[0] = MEMORY[0x1E0C809B0];
        v4[1] = 3221225472;
        v4[2] = sub_1ABC1A324;
        v4[3] = &unk_1E5AB22C0;
        v4[4] = buf;
        v4[5] = a1;
        IMDRunSqlOperation((uint64_t)v4);
        a1 = (const __CFString *)*((_QWORD *)v6 + 5);
      }
      else
      {
        a1 = 0;
      }
    }
    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "IMDMessageRecordCountMessagesWithThreadOriginatorGroupedByParts called by client", buf, 2u);
      }
    }
    return 0;
  }
  return a1;
}

void sub_1ABC1A308(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1ABC1A318(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

BOOL sub_1ABC1A324(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC1A3B0;
  v6[3] = &unk_1E5AB2248;
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v6[4] = a2;
  v6[5] = v2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC1A3BC;
  v5[3] = &unk_1E5AB2298;
  v5[4] = v3;
  v5[5] = a2;
  return _IMDSqlOperationRunQuery(a2, CFSTR("SELECT   m.thread_originator_part, SUM(IFNULL(part_count, 1)) FROM   message m INDEXED BY   message_idx_thread_originator_guid INNER JOIN   chat_message_join cmj ON cmj.message_id = m.ROWID WHERE   m.thread_originator_guid == ?   AND m.associated_message_guid IS NULL GROUP BY  m.thread_originator_part"), (uint64_t)v6, (uint64_t)v5);
}

void sub_1ABC1A3B0(uint64_t a1)
{
  IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 32) + 32, *(_QWORD *)(a1 + 40));
}

BOOL sub_1ABC1A3BC(uint64_t a1)
{
  _BOOL8 result;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v4 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v3 = 138412546;
    v11 = v3;
    do
    {
      v19 = 0;
      v20 = &v19;
      v21 = 0x3052000000;
      v22 = sub_1ABC1A308;
      v23 = sub_1ABC1A318;
      v24 = 0;
      v13 = 0;
      v14 = &v13;
      v15 = 0x3052000000;
      v16 = sub_1ABC1A308;
      v17 = sub_1ABC1A318;
      v18 = 0;
      v5 = *(_QWORD *)(a1 + 40);
      v12[0] = v4;
      v12[1] = 3221225472;
      v12[2] = sub_1ABC1A624;
      v12[3] = &unk_1E5AB2DE0;
      v12[4] = &v19;
      v12[5] = &v13;
      IMDSqlOperationIterateRow(v5, (uint64_t)v12);
      if (objc_msgSend((id)v20[5], "length") && (v6 = v14[5]) != 0)
      {
        v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
        if (!v7)
        {
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = objc_alloc_init(MEMORY[0x1E0C99E08]);
          v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
          v6 = v14[5];
        }
        objc_msgSend(v7, "setObject:forKey:", v6, v20[5], v11);

      }
      else if (IMOSLoggingEnabled())
      {
        v8 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          v9 = v20[5];
          v10 = v14[5];
          *(_DWORD *)buf = v11;
          v26 = v9;
          v27 = 2112;
          v28 = v10;
          _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "Reply count query got invalid column data back: %@|%@", buf, 0x16u);
        }
      }
      _Block_object_dispose(&v13, 8);
      _Block_object_dispose(&v19, 8);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

void sub_1ABC1A5F8()
{
  JUMPOUT(0x1ABC1A61CLL);
}

void sub_1ABC1A624(uint64_t a1, __int128 *a2)
{
  int v4;
  const unsigned __int8 *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a2 + 4);
  if (v4 == 1)
  {
    v9 = *a2;
    v10 = *((_QWORD *)a2 + 2);
    v5 = (const unsigned __int8 *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", IMDInt64FromSqlColumn((uint64_t)&v9));
    v6 = *(_QWORD *)(a1 + 40);
    goto LABEL_5;
  }
  if (!v4)
  {
    v9 = *a2;
    v10 = *((_QWORD *)a2 + 2);
    v5 = IMDStringFromSqlColumn((uint64_t)&v9);
    v6 = *(_QWORD *)(a1 + 32);
LABEL_5:
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 40) = v5;
    return;
  }
  if (IMOSLoggingEnabled())
  {
    v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = *((_DWORD *)a2 + 4);
      LODWORD(v9) = 67109120;
      DWORD1(v9) = v8;
      _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Unexpected column in reply count query with index %d", (uint8_t *)&v9, 8u);
    }
  }
}

CFMutableArrayRef IMDMessageRecordCopyAllUnplayedMessageGUIDsForChatGUID(const __CFString *a1)
{
  NSObject *v2;
  CFMutableArrayRef Mutable;
  NSObject *v4;
  void (*v6[5])(void);
  uint8_t buf[8];
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  CFMutableArrayRef v12;

  if (a1 && CFStringGetLength(a1) > 0)
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      if (IMOSLoggingEnabled())
      {
        v2 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyAllUnplayedMessageGUIDsForChatGUID", buf, 2u);
        }
      }
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v8 = 3221225472;
      v9 = (uint64_t)sub_1ABC239F4;
      v10 = &unk_1E5ABF280;
      v11 = a1;
      v12 = Mutable;
      _IMDPerformLockedDatabaseBlock((uint64_t)buf);
    }
    else
    {
      *(_QWORD *)buf = 0;
      v8 = (uint64_t)buf;
      v9 = 0x2020000000;
      v10 = 0;
      v6[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v6[1] = (void (*)(void))3221225472;
      v6[2] = (void (*)(void))sub_1ABC1A934;
      v6[3] = (void (*)(void))&unk_1E5AAF630;
      v6[4] = (void (*)(void))buf;
      __syncXPCIMDMessageRecordCopyAllUnplayedMessageGUIDsForChatGUID_IPCAction(v6, (uint64_t)a1);
      Mutable = *(CFMutableArrayRef *)(v8 + 24);
      _Block_object_dispose(buf, 8);
    }
  }
  else
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC63058();
    return 0;
  }
  return Mutable;
}

void sub_1ABC1A934(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v4;
  size_t count;
  size_t v6;
  size_t v7;
  const CFArrayCallBacks *v8;
  const char *string;
  const void *v10;

  value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    v4 = value;
    count = xpc_array_get_count(value);
    if (count)
    {
      v6 = count;
      v7 = 0;
      v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      do
      {
        if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
        string = xpc_array_get_string(v4, v7);
        if (string)
        {
          v10 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", string);
          if (v10)
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v10);
        }
        ++v7;
      }
      while (v6 != v7);
    }
  }
}

uint64_t IMDMessageRecordLastFailedMessageRowID()
{
  IMDRemoteDatabaseProtocol *v0;
  uint64_t v1;
  void (*v3[5])(void);
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = -1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v0 = +[IMDDatabase synchronousDatabase](IMDDatabase, "synchronousDatabase");
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = sub_1ABC1AB08;
    v4[3] = &unk_1E5AB8938;
    v4[4] = &v5;
    -[IMDRemoteDatabaseProtocol fetchInteger64ForKey:completionHandler:](v0, "fetchInteger64ForKey:completionHandler:", CFSTR("lastFailedMessageRowID"), v4);
  }
  else
  {
    v3[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v3[1] = (void (*)(void))3221225472;
    v3[2] = (void (*)(void))sub_1ABC1AB18;
    v3[3] = (void (*)(void))&unk_1E5AAF630;
    v3[4] = (void (*)(void))&v5;
    __syncXPCIMDMessageRecordLastFailedMessageRowID_IPCAction(v3);
  }
  v1 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v1;
}

void sub_1ABC1AAF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABC1AB08(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

int64_t sub_1ABC1AB18(uint64_t a1, xpc_object_t xdict)
{
  int64_t result;

  result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordLastSyncedMessageRowID()
{
  uint64_t v0;
  void (*v2[5])(void);
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = -1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1ABC1AC4C;
    v3[3] = &unk_1E5AB2070;
    v3[4] = &v4;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("select ROWID from message where LENGTH(ck_record_id) > 0 AND ck_sync_state=1 ORDER BY ROWID DESC limit 1;"),
      (uint64_t)v3);
  }
  else
  {
    v2[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v2[1] = (void (*)(void))3221225472;
    v2[2] = (void (*)(void))sub_1ABC1AC8C;
    v2[3] = (void (*)(void))&unk_1E5AAF630;
    v2[4] = (void (*)(void))&v4;
    __syncXPCIMDMessageRecordLastSyncedMessageRowID_IPCAction(v2);
  }
  v0 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v0;
}

void sub_1ABC1AC30(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABC1AC4C(uint64_t a1)
{
  uint64_t result;

  result = CSDBSqliteStatementInteger64Result();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

int64_t sub_1ABC1AC8C(uint64_t a1, xpc_object_t xdict)
{
  int64_t result;

  result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1ABC1ACC8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

int64_t sub_1ABC1ACD8(uint64_t a1, xpc_object_t xdict)
{
  int64_t result;

  result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordGetMostRecentMessageDate()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v4[5])(void);
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = -1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_1ABC1AEC4;
    v5[3] = &unk_1E5AB2070;
    v5[4] = &v6;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT date FROM message ORDER BY date DESC, ROWID DESC LIMIT 1;"),
      (uint64_t)v5);
  }
  else
  {
    v4[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v4[1] = (void (*)(void))3221225472;
    v4[2] = (void (*)(void))sub_1ABC1AF04;
    v4[3] = (void (*)(void))&unk_1E5AAF630;
    v4[4] = (void (*)(void))&v6;
    __syncXPCIMDMessageRecordGetMostRecentMessageDate_IPCAction(v4);
  }
  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      v1 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v7[3]);
      *(_DWORD *)buf = 138412290;
      v11 = v1;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "Most recent date: %@", buf, 0xCu);
    }
  }
  v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_1ABC1AE88(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1ABC1AE44);
  }
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1ABC1AEC4(uint64_t a1)
{
  uint64_t result;

  result = CSDBSqliteStatementInteger64Result();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

int64_t sub_1ABC1AF04(uint64_t a1, xpc_object_t xdict)
{
  int64_t result;

  result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void IMDMessageRecordMarkFailedAllUnsentUnfailedMessages()
{
  NSObject *v0;
  uint8_t v1[16];

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_DEBUG, "Marking all unsent and failed messages as sent.", v1, 2u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("UPDATE message SET error = ? WHERE (is_sent = 0 AND is_from_me = 1 AND error = 0)"), (uint64_t)&unk_1E5ABE258);
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("UPDATE message SET schedule_state = 4 WHERE (is_sent = 0 AND is_from_me = 1 AND error = 39)"), (uint64_t)&unk_1E5ABE278);
  }
  else
  {
    __syncXPCIMDMessageRecordMarkFailedAllUnsentUnfailedMessages_IPCAction(0);
  }
}

uint64_t sub_1ABC1B008()
{
  CSDBSqliteBindInt();
  CSDBSqliteStatementPerform();
  CSDBRecordSaveStore();
  return CSDBRecordStoreInvalidateCachesWithStore();
}

uint64_t sub_1ABC1B048()
{
  CSDBSqliteStatementPerform();
  CSDBRecordSaveStore();
  return CSDBRecordStoreInvalidateCachesWithStore();
}

const __CFString *IMDMessageRecordGetIndentifierForMessageWithGUID(CFStringRef theString)
{
  const __CFString *v1;
  const __CFString *v2;
  const __CFString *v3;
  uint64_t Identifier;
  NSObject *v5;
  uint64_t v6;
  void (*v8[5])(void);
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  const __CFString *v16;
  uint64_t v17;

  v1 = theString;
  v17 = *MEMORY[0x1E0C80C00];
  if (theString)
  {
    if (CFStringGetLength(theString))
    {
      v9 = 0;
      v10 = &v9;
      v11 = 0x2020000000;
      v12 = -1;
      if (IMDIsRunningInDatabaseServerProcess())
      {
        v2 = IMDMessageRecordCopyMessageForGUID(v1);
        v3 = v2;
        if (v2)
        {
          Identifier = IMDMessageRecordGetIdentifier((uint64_t)v2);
          v10[3] = Identifier;
          if (IMOSLoggingEnabled())
          {
            v5 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
            {
              v6 = v10[3];
              *(_DWORD *)buf = 134218242;
              v14 = v6;
              v15 = 2112;
              v16 = v1;
              _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_DEBUG, "Row ID is %lld for message with guid [%@]", buf, 0x16u);
            }
          }
          CFRelease(v3);
        }
      }
      else
      {
        v8[0] = (void (*)(void))MEMORY[0x1E0C809B0];
        v8[1] = (void (*)(void))3221225472;
        v8[2] = (void (*)(void))sub_1ABC1B234;
        v8[3] = (void (*)(void))&unk_1E5AAF630;
        v8[4] = (void (*)(void))&v9;
        __syncXPCIMDMessageRecordGetIndentifierForMessageWithGUID_IPCAction(v8, (uint64_t)v1);
      }
      v1 = (const __CFString *)v10[3];
      _Block_object_dispose(&v9, 8);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

int64_t sub_1ABC1B234(uint64_t a1, xpc_object_t xdict)
{
  int64_t result;

  result = xpc_dictionary_get_int64(xdict, "sint64_result");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void IMDMessageRecordRetractNotificationsForMessagesMatchingChatGUIDs(const __CFArray *a1)
{
  NSObject *v2;
  void *v3;
  int Count;
  CFIndex v5;
  uint64_t v6;
  const __CFString *ValueAtIndex;
  CFStringRef v8;
  CFStringRef v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  const void *v18;
  const void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[8];
  uint64_t v25;
  void (*v26)(uint64_t);
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "IMDMessageRecordRetractNotificationsForMessagesMatchingChatGUIDs", buf, 2u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v3 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v5 = 0;
      if (Count <= 1uLL)
        v6 = 1;
      else
        v6 = Count;
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, v5);
        v8 = IMDChatRecordCopyChatForGUID(ValueAtIndex);
        v9 = v8;
        if (v8)
        {
          objc_msgSend(v3, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", IMDChatRecordGetIdentifier((uint64_t)v8)));
          CFRelease(v9);
        }
        else
        {
          objc_msgSend(v3, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -1));
        }
        ++v5;
      }
      while (v6 != v5);
    }
    if (IMOSLoggingEnabled())
    {
      v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "_IMDMessageRecordCopyUnreadMessagesMatchingRecoverableChatIDs", buf, 2u);
      }
    }
    v11 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v12 = objc_msgSend(v3, "count");
    if (v12)
    {
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v25 = 3221225472;
      v26 = sub_1ABC23AFC;
      v27 = &unk_1E5ABF2A8;
      v29 = v11;
      v30 = v12;
      v28 = v3;
      _IMDPerformLockedDatabaseBlock((uint64_t)buf);
    }
    else
    {

      v11 = 0;
    }
    v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v14 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v31, 16);
    if (v14)
    {
      v15 = *(_QWORD *)v21;
      v16 = *MEMORY[0x1E0C9AE00];
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v21 != v15)
            objc_enumerationMutation(v11);
          v18 = IMDMessageRecordCreateFromRecordIDUnlocked(v16, objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * i), "integerValue"));
          v19 = (const void *)IMDMessageRecordCopyGUIDForMessage((uint64_t)v18);
          objc_msgSend(v13, "addObject:", v19);
          if (v19)
            CFRelease(v19);
          if (v18)
            CFRelease(v18);
        }
        v14 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v31, 16);
      }
      while (v14);
    }
    if (objc_msgSend(v13, "count"))
      -[IMDNotificationsController retractNotificationsForReadMessages:](+[IMDNotificationsController sharedInstance](IMDNotificationsController, "sharedInstance"), "retractNotificationsForReadMessages:", v13);
    if (v13)

  }
  else
  {
    __asyncXPCIMDMessageRecordRetractNotificationsForChatGuids_IPCAction(qword_1E5ABE298, (uint64_t)a1);
  }
}

CFArrayRef IMDMessageRecordCopyAndMarkAsReadMessagesPriorToGuidMatchingChatGUIDs(__CFString *a1, const __CFArray *a2, uint64_t a3, int a4)
{
  NSObject *v7;
  id v8;
  NSObject *v9;
  uint64_t IndentifierForMessageWithGUID;
  __CFArray *Mutable;
  __CFString *v12;
  int Count;
  CFIndex v14;
  uint64_t v15;
  const __CFString *ValueAtIndex;
  CFStringRef v17;
  CFStringRef v18;
  void *v19;
  CFStringRef v20;
  id v21;
  const __CFString *v22;
  const __CFString *v23;
  uint64_t Identifier;
  NSObject *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  int v32;
  NSObject *v33;
  NSObject *v34;
  CFIndex v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  const void *v40;
  const void *v41;
  NSObject *v42;
  NSObject *v43;
  void (*v46[5])(void);
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *values;
  uint8_t v52[128];
  __int128 buf;
  uint64_t v54;
  void *v55;
  __int128 *v56;
  CFStringRef v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint8_t v63[4];
  id v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  values = a1;
  if (IMOSLoggingEnabled())
  {
    v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyAndMarkAsReadMessagesPriorToGuidMatchingChatGUIDs", (uint8_t *)&buf, 2u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v8 = objc_alloc_init(MEMORY[0x1E0D36AE8]);
    v9 = IMDDatabaseTelemetryLogHandle();
    if (os_signpost_enabled(v9))
    {
      LOWORD(buf) = 0;
      _os_signpost_emit_with_name_impl(&dword_1ABB60000, v9, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "MarkAsRead-Database", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
    }
    if (a1)
    {
      objc_msgSend(v8, "startTimingForKey:", CFSTR("1. QueryHighestRowID"));
      IndentifierForMessageWithGUID = (uint64_t)IMDMessageRecordGetIndentifierForMessageWithGUID(a1);
      objc_msgSend(v8, "stopTimingForKey:", CFSTR("1. QueryHighestRowID"));
      if (IndentifierForMessageWithGUID == -1)
      {

        return 0;
      }
    }
    else
    {
      IndentifierForMessageWithGUID = -1;
    }
    objc_msgSend(v8, "startTimingForKey:", CFSTR("2. QueryChatRecordIDs"));
    v12 = (__CFString *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      v14 = 0;
      if (Count <= 1uLL)
        v15 = 1;
      else
        v15 = Count;
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v14);
        v17 = IMDChatRecordCopyChatForGUID(ValueAtIndex);
        v18 = v17;
        if (v17)
        {
          -[__CFString addObject:](v12, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", IMDChatRecordGetIdentifier((uint64_t)v17)));
          CFRelease(v18);
        }
        else
        {
          -[__CFString addObject:](v12, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -1));
        }
        ++v14;
      }
      while (v15 != v14);
    }
    objc_msgSend(v8, "stopTimingForKey:", CFSTR("2. QueryChatRecordIDs"));
    objc_msgSend(v8, "startTimingForKey:", CFSTR("3. MarkAsRead"));
    if (a4)
    {
      *(_QWORD *)&v65 = 0;
      *((_QWORD *)&v65 + 1) = &v65;
      v66 = 0x2020000000;
      v67 = 0;
      v19 = IMDGenerateInClauseForCount(1);
      v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("UPDATE   message SET   is_read = 1,   date_read = ? WHERE rowid %@"), v19);
      if (v20)
      {
        v21 = objc_alloc_init(MEMORY[0x1E0D36AE8]);
        v22 = IMDMessageRecordCopyMessageForGUIDUnlocked(a1);
        v23 = v22;
        if (v22)
        {
          Identifier = IMDMessageRecordGetIdentifier((uint64_t)v22);
          objc_msgSend(v21, "startTimingForKey:", CFSTR("Query2-Update"));
          *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
          *((_QWORD *)&buf + 1) = 3221225472;
          v54 = (uint64_t)sub_1ABC240B8;
          v55 = &unk_1E5ABF2F8;
          v58 = a3;
          v59 = Identifier;
          v56 = &v65;
          v57 = v20;
          _IMDPerformLockedDatabaseBlock((uint64_t)&buf);
          CFRelease(v23);
        }
        else if (IMOSLoggingEnabled())
        {
          v30 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            LODWORD(buf) = 138412290;
            *(_QWORD *)((char *)&buf + 4) = a1;
            _os_log_impl(&dword_1ABB60000, v30, OS_LOG_TYPE_INFO, "Unable to create message record for guid %@", (uint8_t *)&buf, 0xCu);
          }
        }
        CFRelease(v20);
        objc_msgSend(v21, "stopTimingForKey:", CFSTR("Query2-Update"));
        if (IMOSLoggingEnabled())
        {
          v31 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v63 = 138412290;
            v64 = v21;
            _os_log_impl(&dword_1ABB60000, v31, OS_LOG_TYPE_INFO, "Time to run db query for marking 1:1 as read when receiving remote read receipt: %@", v63, 0xCu);
          }
        }

      }
      v32 = *(unsigned __int8 *)(*((_QWORD *)&v65 + 1) + 24);
      _Block_object_dispose(&v65, 8);
      objc_msgSend(v8, "stopTimingForKey:", CFSTR("3. MarkAsRead"));
      v33 = IMDDatabaseTelemetryLogHandle();
      if (os_signpost_enabled(v33))
      {
        LOWORD(buf) = 0;
        _os_signpost_emit_with_name_impl(&dword_1ABB60000, v33, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "MarkAsRead-Database", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
      }
      if (IMOSLoggingEnabled())
      {
        v34 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v8;
          _os_log_impl(&dword_1ABB60000, v34, OS_LOG_TYPE_INFO, "Time to mark 1:1 as read when receiving read receipt from receiver: %@", (uint8_t *)&buf, 0xCu);
        }
      }

      if (!v32)
        return 0;
      return CFArrayCreate(0, (const void **)&values, 1, 0);
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        v25 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1ABB60000, v25, OS_LOG_TYPE_INFO, "_IMDMessageRecordCopyAndMarkAsReadMessagesReceivedPriorToGuidMatchingChatGUIDs", (uint8_t *)&buf, 2u);
        }
      }
      v26 = (__int128 *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v27 = -[__CFString count](v12, "count");
      if (v27)
      {
        v28 = (__int128 *)objc_alloc_init(MEMORY[0x1E0D36AE8]);
        *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
        *((_QWORD *)&buf + 1) = 3221225472;
        v54 = (uint64_t)sub_1ABC23CC8;
        v55 = &unk_1E5ABF2D0;
        v62 = IndentifierForMessageWithGUID != -1;
        v56 = v28;
        v57 = v12;
        v58 = (uint64_t)v26;
        v59 = v27;
        v60 = IndentifierForMessageWithGUID;
        v61 = a3;
        _IMDPerformLockedDatabaseBlock((uint64_t)&buf);
        if (IMOSLoggingEnabled())
        {
          v29 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            LODWORD(v65) = 138412290;
            *(_QWORD *)((char *)&v65 + 4) = v28;
            _os_log_impl(&dword_1ABB60000, v29, OS_LOG_TYPE_INFO, "Time to run db query for marking 1:1 as read when tapping/reflecting read receipt: %@", (uint8_t *)&v65, 0xCu);
          }
        }
      }
      else
      {
        v28 = v26;
        v26 = 0;
      }

      objc_msgSend(v8, "stopTimingForKey:", CFSTR("3. MarkAsRead"));
      objc_msgSend(v8, "startTimingForKey:", CFSTR("4. QueryMessageGUIDsFromRowIDs"));
      v35 = objc_msgSend(v26, "count");
      Mutable = CFArrayCreateMutable(0, v35, MEMORY[0x1E0C9B378]);
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v36 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
      if (v36)
      {
        v37 = *(_QWORD *)v48;
        v38 = *MEMORY[0x1E0C9AE00];
        do
        {
          for (i = 0; i != v36; ++i)
          {
            if (*(_QWORD *)v48 != v37)
              objc_enumerationMutation(v26);
            v40 = IMDMessageRecordCreateFromRecordIDUnlocked(v38, objc_msgSend(*(id *)(*((_QWORD *)&v47 + 1) + 8 * i), "integerValue"));
            v41 = (const void *)IMDMessageRecordCopyGUIDForMessage((uint64_t)v40);
            CFArrayAppendValue(Mutable, v41);
            if (v41)
              CFRelease(v41);
            if (v40)
              CFRelease(v40);
          }
          v36 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
        }
        while (v36);
      }
      objc_msgSend(v8, "stopTimingForKey:", CFSTR("4. QueryMessageGUIDsFromRowIDs"));
      v42 = IMDDatabaseTelemetryLogHandle();
      if (os_signpost_enabled(v42))
      {
        LOWORD(buf) = 0;
        _os_signpost_emit_with_name_impl(&dword_1ABB60000, v42, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "MarkAsRead-Database", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
      }
      if (IMOSLoggingEnabled())
      {
        v43 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v8;
          _os_log_impl(&dword_1ABB60000, v43, OS_LOG_TYPE_INFO, "Time to mark 1:1 as read when tapping/reflecting read receipt: %@", (uint8_t *)&buf, 0xCu);
        }
      }

    }
  }
  else
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v54 = 0x2020000000;
    v55 = 0;
    v46[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v46[1] = (void (*)(void))3221225472;
    v46[2] = (void (*)(void))sub_1ABC1BF2C;
    v46[3] = (void (*)(void))&unk_1E5AAF630;
    v46[4] = (void (*)(void))&buf;
    __syncXPCIMDMessageRecordCopyAndMarkAsReadMessagesPriorToGuidMatchingChatGUIDs_IPCAction(v46, (uint64_t)a1, (uint64_t)a2, a3, a4 != 0);
    Mutable = *(__CFArray **)(*((_QWORD *)&buf + 1) + 24);
    _Block_object_dispose(&buf, 8);
  }
  return Mutable;
}

void sub_1ABC1BF2C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v4;
  size_t count;
  size_t v6;
  size_t v7;
  const CFArrayCallBacks *v8;
  const char *string;
  const void *v10;

  value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    v4 = value;
    count = xpc_array_get_count(value);
    if (count)
    {
      v6 = count;
      v7 = 0;
      v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      do
      {
        if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
        string = xpc_array_get_string(v4, v7);
        if (string)
        {
          v10 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", string);
          if (v10)
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v10);
        }
        ++v7;
      }
      while (v6 != v7);
    }
  }
}

uint64_t IMDMessageRecordGetMessagesSequenceNumber()
{
  uint64_t v0;
  void (*v2[5])(void);
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = -1;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1ABC1C0F4;
    v3[3] = &unk_1E5AB2070;
    v3[4] = &v4;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT seq FROM SQLITE_SEQUENCE WHERE name = 'message';"),
      (uint64_t)v3);
  }
  else
  {
    v2[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v2[1] = (void (*)(void))3221225472;
    v2[2] = (void (*)(void))sub_1ABC1C13C;
    v2[3] = (void (*)(void))&unk_1E5AAF630;
    v2[4] = (void (*)(void))&v4;
    __syncXPCIMDMessageRecordGetMessagesSequenceNumber_IPCAction(v2);
  }
  v0 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v0;
}

void sub_1ABC1C0D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

sqlite3_int64 sub_1ABC1C0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sqlite3_int64 result;

  result = sqlite3_step(*(sqlite3_stmt **)(a4 + 8));
  if ((_DWORD)result == 100)
  {
    result = sqlite3_column_int64(*(sqlite3_stmt **)(a4 + 8), 0);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

int64_t sub_1ABC1C13C(uint64_t a1, xpc_object_t xdict)
{
  int64_t result;

  result = xpc_dictionary_get_int64(xdict, "int64_result");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t IMDMessageRecordCopyMessagesBetweenRowIDs(int64_t a1, int64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  void (*v7[5])(void);
  _QWORD v8[7];
  _BYTE buf[24];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a2;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessagesBetweenRowIDs [%lld:%lld]", buf, 0x16u);
    }
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v10 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1ABC1C328;
    v8[3] = &unk_1E5ABE2C0;
    v8[5] = a1;
    v8[6] = a2;
    v8[4] = buf;
    _IMDPerformLockedDatabaseBlock((uint64_t)v8);
  }
  else
  {
    v7[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v7[1] = (void (*)(void))3221225472;
    v7[2] = (void (*)(void))sub_1ABC1C48C;
    v7[3] = (void (*)(void))&unk_1E5AAF630;
    v7[4] = (void (*)(void))buf;
    __syncXPCIMDMessageRecordCopyMessagesBetweenRowIDs_IPCAction(v7, a1, a2);
  }
  v5 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
  _Block_object_dispose(buf, 8);
  return v5;
}

void sub_1ABC1C328(uint64_t a1)
{
  uint64_t v2;
  const __CFArray *v3;
  int Count;
  CFIndex v5;
  const __CFAllocator *v6;
  CFIndex v7;
  uint64_t v8;
  const CFArrayCallBacks *v9;
  int ID;
  const void *v11;
  const void *v12;

  v2 = CSDBSqliteDatabaseStatementForWriting();
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    CSDBSqliteBindInt64();
    CSDBSqliteBindInt64();
    v3 = (const __CFArray *)CSDBRecordStoreProcessStatement();
    Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      v5 = 0;
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v7 = Count;
      v8 = Count;
      v9 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        CFArrayGetValueAtIndex(v3, v5);
        ID = CSDBRecordGetID();
        v11 = IMDMessageRecordCreateFromRecordIDUnlocked((uint64_t)v6, ID);
        v12 = v11;
        if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
          break;
        if (v11)
          goto LABEL_7;
LABEL_8:
        if (v8 == ++v5)
          goto LABEL_12;
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(v6, v7, v9);
      if (!v12)
        goto LABEL_8;
LABEL_7:
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v12);
      CFRelease(v12);
      goto LABEL_8;
    }
LABEL_12:
    CSDBSqliteStatementReset();
    if (v3)
      CFRelease(v3);
  }
  CFRelease(CFSTR("SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE rowID >= ?   AND rowID <= ?   AND item_type == 0 ORDER BY message.ROWID ASC;"));
}

xpc_object_t sub_1ABC1C48C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC1C504;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABC1C504(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  const void *v6;
  const void *v7;

  v5 = (void *)MEMORY[0x1AF435474]();
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v6 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v6)
  {
    v7 = v6;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v6);
    CFRelease(v7);
  }
  objc_autoreleasePoolPop(v5);
  return 1;
}

void sub_1ABC1C5A0(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  NSObject *v6;
  uint64_t v7;
  __CFArray *Mutable;
  CFIndex v9;
  uint64_t v10;
  int ID;
  const void *v12;
  int v13;
  CFIndex v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 56))
    CSDBSqliteBindInt();
  CSDBSqliteBindInt64();
  if (*(_BYTE *)(a1 + 57))
    CSDBSqliteBindInt();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      v5 = (int)Count;
      if (IMOSLoggingEnabled())
      {
        v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v13 = 134217984;
          v14 = v5;
          _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyNewestUnreadIncomingMessagesAfterRowID got back %ld rows", (uint8_t *)&v13, 0xCu);
        }
      }
      v7 = *MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v9 = 0;
        if (v5 <= 1)
          v10 = 1;
        else
          v10 = v5;
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          ID = CSDBRecordGetID();
          v12 = IMDMessageRecordCreateFromRecordIDUnlocked(v7, ID);
          if (v12)
          {
            CFArrayAppendValue(Mutable, v12);
            CFRelease(v12);
          }
          ++v9;
        }
        while (v10 != v9);
        if (!*(_BYTE *)(a1 + 57))
          -[__CFArray sortUsingComparator:](Mutable, "sortUsingComparator:", &unk_1E5ABE2E0);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = Mutable;
      }
    }
    CFRelease(v3);
  }
}

uint64_t sub_1ABC1C790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Date;
  uint64_t Identifier;

  Date = IMDMessageRecordGetDate(a2, 0);
  Identifier = IMDMessageRecordGetDate(a3, 0);
  if (!Date || !Identifier || Date == Identifier)
  {
    Date = IMDMessageRecordGetIdentifier(a2);
    Identifier = IMDMessageRecordGetIdentifier(a3);
  }
  if (Date > Identifier)
    return 1;
  else
    return -1;
}

void sub_1ABC1C804(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v4;
  size_t count;
  NSObject *v6;
  const __CFArray *v7;
  int v8;
  NSObject *v9;
  _QWORD applier[5];
  uint8_t buf[4];
  size_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    v4 = value;
    count = xpc_array_get_count(value);
    if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v12 = count;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID got back %zu rows from XPC", buf, 0xCu);
      }
    }
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC1C9BC;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    xpc_array_apply(v4, applier);
  }
  v7 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v7)
    v8 = CFArrayGetCount(v7);
  else
    v8 = 0;
  if (IMOSLoggingEnabled())
  {
    v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v12) = v8;
      _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID got back %d rows after deserialization", buf, 8u);
    }
  }
}

uint64_t sub_1ABC1C9BC(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyUnreadIncomingMessagesWithChatIdentifiersOnServicesToLimitFallbackGUID(void *a1, void *a2, int64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void (*v14[5])(void);
  _QWORD v15[10];
  __int128 buf;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v8 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = a4;
      _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "Asked to load up to oldest unread or fallback message: %@", (uint8_t *)&buf, 0xCu);
    }
  }
  v9 = objc_msgSend(a1, "count");
  v10 = objc_msgSend(a2, "count");
  if (v9 && v10 && v9 == v10)
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v17 = 0x2020000000;
    v18 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = sub_1ABC1CC54;
      v15[3] = &unk_1E5ABE350;
      v15[6] = a4;
      v15[7] = a1;
      v15[8] = a2;
      v15[9] = a3;
      v15[4] = &buf;
      v15[5] = v9;
      _IMDPerformLockedDatabaseBlock((uint64_t)v15);
    }
    else
    {
      v14[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v14[1] = (void (*)(void))3221225472;
      v14[2] = (void (*)(void))sub_1ABC1D11C;
      v14[3] = (void (*)(void))&unk_1E5AAF630;
      v14[4] = (void (*)(void))&buf;
      __syncXPCIMDMessageRecordCopyUnreadIncomingMessagesWithChatIdentifiersOnServicesToLimitFallbackGUID_IPCAction(v14, a3, (uint64_t)a1, (uint64_t)a2, a4);
    }
    v12 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 24);
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1ABC627D8();
    return 0;
  }
  return v12;
}

uint64_t sub_1ABC1CC54(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  const __CFArray *v13;
  const __CFArray *v14;
  CFIndex v15;
  void *v16;
  void *v17;
  const __CFArray *v18;
  CFIndex Count;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __CFArray *Mutable;
  CFIndex v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  result = CSDBSqliteDatabaseConnectionForReading();
  if (result)
  {
    CSDBSqliteConnectionBeginTransactionType();
    v3 = CSDBSqliteDatabaseStatementForWriting();
    if (v3 && *(_QWORD *)(v3 + 8) && *(_QWORD *)(a1 + 40))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        CSDBSqliteBindTextFromCFString();
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v5);
        CSDBSqliteBindTextFromCFString();
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v5);
        CSDBSqliteBindTextFromCFString();
        v6 = CSDBSqliteStatementInteger64Result();
        if (!v6)
        {
          if (IMOSLoggingEnabled())
          {
            v7 = OSLogHandleForIMEventCategory();
            if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
            {
              v8 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)buf = 138412546;
              v29 = v8;
              v30 = 1024;
              v31 = 0;
              _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Query failed to look up message for guid: %@ error: %d", buf, 0x12u);
            }
          }
        }
        if (!v4 || v6 >= 1 && v6 < v4)
          v4 = v6;
        v9 = IMLogHandleForCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v29 = v4;
          _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "Final adjusted row ID: %lld", buf, 0xCu);
        }
        CSDBSqliteStatementReset();
        ++v5;
      }
      while (v5 < *(_QWORD *)(a1 + 40));
    }
    CFRelease(CFSTR("SELECT * FROM( SELECT ROWID from(     SELECT m1.ROWID FROM message m1 WHERE m1.GUID = ?    UNION      SELECT m2.ROWID FROM message m2        INNER JOIN chat_message_join cm ON          m2.ROWID = cm.message_id        WHERE cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?)        AND m2.is_read = 0        AND m2.item_type = 0        AND m2.is_from_me = 0 )) ORDER BY ROWID ASC LIMIT 1;"));
    v10 = CSDBSqliteDatabaseStatementForWriting();
    if (v10 && *(_QWORD *)(v10 + 8))
    {
      v11 = objc_alloc_init(MEMORY[0x1E0C99E20]);
      if (*(_QWORD *)(a1 + 40))
      {
        v12 = 0;
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v12);
          CSDBSqliteBindTextFromCFString();
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v12);
          CSDBSqliteBindTextFromCFString();
          CSDBSqliteBindInt();
          CSDBSqliteBindInt();
          v13 = (const __CFArray *)CSDBRecordStoreProcessStatement();
          v14 = v13;
          if (v13)
          {
            if (CFArrayGetCount(v13) && (int)CFArrayGetCount(v14) >= 1)
            {
              v15 = 0;
              do
              {
                CFArrayGetValueAtIndex(v14, v15);
                v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithInteger:", (int)CSDBRecordGetID());
                if (v16)
                  objc_msgSend(v11, "addObject:", v16);

                ++v15;
              }
              while (v15 < (int)CFArrayGetCount(v14));
            }
            CFRelease(v14);
          }
          CSDBSqliteStatementReset();
          ++v12;
        }
        while (v12 < *(_QWORD *)(a1 + 40));
      }
      v17 = (void *)MEMORY[0x1AF435474]();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (id)objc_msgSend((id)objc_msgSend(v11, "allObjects"), "sortedArrayUsingComparator:", &unk_1E5ABE328);
      objc_autoreleasePoolPop(v17);

      v18 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (v18)
      {
        Count = CFArrayGetCount(v18);
        v20 = Count << 32;
        if (Count << 32)
        {
          v21 = (int)Count;
          v22 = *MEMORY[0x1E0C9AE00];
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (int)Count, MEMORY[0x1E0C9B378]);
          if (v20 >= 1)
          {
            v24 = 0;
            if (v21 <= 1)
              v25 = 1;
            else
              v25 = v21;
            do
            {
              if (*(_QWORD *)(a1 + 72) <= v24)
                break;
              v26 = objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v24), "integerValue");
              v27 = IMDMessageRecordCreateFromRecordIDUnlocked(v22, v26);
              if (v27)
              {
                CFArrayAppendValue(Mutable, v27);
                CFRelease(v27);
              }
              ++v24;
            }
            while (v25 != v24);
          }
          CFRelease(*(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = Mutable;
        }
      }
    }
    CFRelease(CFSTR("SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info, m.ck_sync_state, m.ck_record_id, m.ck_record_change_tag, m.destination_caller_id, m.is_corrupt, m.reply_to_guid, m.sort_id, m.is_spam, m.has_unseen_mention, m.thread_originator_guid, m.thread_originator_part, m.syndication_ranges, m.synced_syndication_ranges, m.was_delivered_quietly, m.did_notify_recipient, m.date_retracted, m.date_edited, m.was_detonated, m.part_count, m.is_stewie, m.is_sos, m.is_critical, m.bia_reference_id, m.is_kt_verified, m.fallback_hash, m.associated_message_emoji, m.is_pending_satellite_send, m.needs_relay, m.schedule_type, m.schedule_state, m.sent_or_received_off_grid FROM message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id WHERE cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) AND m.ROWID >= ? AND m.item_type == 0  AND m.is_read == 0 ORDER BY cm.chat_id, cm.message_id DESC LIMIT ?;"));
    CSDBSqliteConnectionCommit();
    return CSDBSqliteDatabaseReleaseSqliteConnection();
  }
  return result;
}

uint64_t sub_1ABC1D110(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "compare:", a2);
}

xpc_object_t sub_1ABC1D11C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC1D194;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABC1D194(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyNewestFailedOutgoingMessagesToLimitAfterDate(int64_t a1, int64_t a2)
{
  uint64_t MostRecentMessageDate;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  void (*v10[5])(void);
  _QWORD v11[7];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    MostRecentMessageDate = IMDMessageRecordGetMostRecentMessageDate();
    v5 = a2 & ~(a2 >> 63);
    if (v5 <= MostRecentMessageDate)
    {
      if (IMOSLoggingEnabled())
      {
        v7 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134218240;
          v17 = a1;
          v18 = 2048;
          v19 = v5;
          _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyNewestFailedOutgoingMessagesToLimitAfterDate limit: %lld  date: %lld", buf, 0x16u);
        }
      }
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = sub_1ABC1D460;
      v11[3] = &unk_1E5AB2228;
      v11[5] = v5;
      v11[6] = a1;
      v11[4] = &v12;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE date > ?   AND item_type == 0   AND error != 0   AND is_from_me == 1   AND is_finished == 1 ORDER BY date DESC, ROWID DESC LIMIT ?;"),
        (uint64_t)v11);
    }
    else
    {
      v6 = IMLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218240;
        v17 = a2 & ~(a2 >> 63);
        v18 = 2048;
        v19 = MostRecentMessageDate;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "The date is out of bounds.  We were asked for rows after date: [%lld] which exceeds the most recent message [%lld]", buf, 0x16u);
      }
    }
  }
  else
  {
    v10[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v10[1] = (void (*)(void))3221225472;
    v10[2] = (void (*)(void))sub_1ABC1D58C;
    v10[3] = (void (*)(void))&unk_1E5AAF630;
    v10[4] = (void (*)(void))&v12;
    __syncXPCIMDMessageRecordCopyNewestFailedOutgoingMessagesToLimitAfterDate_IPCAction(v10, a1, a2);
  }
  v8 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1ABC1D460(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  CFMutableArrayRef Mutable;
  __CFArray *v8;
  CFIndex v9;
  uint64_t v10;
  int ID;
  const void *v12;
  const void *v13;

  CSDBSqliteBindInt64();
  CSDBSqliteBindInt64();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      v5 = (int)Count;
      v6 = *MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (int)Count, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v8 = Mutable;
        v9 = 0;
        if (v5 <= 1)
          v10 = 1;
        else
          v10 = v5;
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          ID = CSDBRecordGetID();
          v12 = IMDMessageRecordCreateFromRecordIDUnlocked(v6, ID);
          if (v12)
          {
            v13 = v12;
            CFArrayAppendValue(v8, v12);
            CFRelease(v13);
          }
          ++v9;
        }
        while (v10 != v9);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1ABC1D58C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC1D604;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABC1D604(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMessagesDataDetectionResults(int64_t a1, int64_t a2)
{
  uint64_t MessagesSequenceNumber;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  void (*v10[5])(void);
  _QWORD v11[7];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    MessagesSequenceNumber = IMDMessageRecordGetMessagesSequenceNumber();
    v5 = a2 & ~(a2 >> 63);
    if (v5 <= MessagesSequenceNumber)
    {
      if (IMOSLoggingEnabled())
      {
        v7 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218240;
          v17 = a1;
          v18 = 2048;
          v19 = v5;
          _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_DEBUG, "IMDMessageRecordCopyMessagesDataDetectionResults limit: %lld  rowID: %lld", buf, 0x16u);
        }
      }
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = sub_1ABC1D8D0;
      v11[3] = &unk_1E5AB2228;
      v11[5] = v5;
      v11[6] = a1;
      v11[4] = &v12;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE ROWID > ?   AND item_type == 0   AND has_dd_results == 1 ORDER BY ROWID DESC LIMIT ?;"),
        (uint64_t)v11);
    }
    else
    {
      v6 = IMLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218240;
        v17 = a2 & ~(a2 >> 63);
        v18 = 2048;
        v19 = MessagesSequenceNumber;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "The RowID is out of bounds.  We were asked for rows after [%lld] which exceeds the current sequence number [%lld]", buf, 0x16u);
      }
    }
  }
  else
  {
    v10[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v10[1] = (void (*)(void))3221225472;
    v10[2] = (void (*)(void))sub_1ABC1D9FC;
    v10[3] = (void (*)(void))&unk_1E5AAF630;
    v10[4] = (void (*)(void))&v12;
    __syncXPCIMDMessageRecordCopyMessagesDataDetectionResults_IPCAction(v10, a1, a2);
  }
  v8 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1ABC1D8D0(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  CFMutableArrayRef Mutable;
  __CFArray *v8;
  CFIndex v9;
  uint64_t v10;
  int ID;
  const void *v12;
  const void *v13;

  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  if (v2)
  {
    v3 = v2;
    Count = CFArrayGetCount(v2);
    if (Count << 32 >= 1)
    {
      v5 = (int)Count;
      v6 = *MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (int)Count, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v8 = Mutable;
        v9 = 0;
        if (v5 <= 1)
          v10 = 1;
        else
          v10 = v5;
        do
        {
          CFArrayGetValueAtIndex(v3, v9);
          ID = CSDBRecordGetID();
          v12 = IMDMessageRecordCreateFromRecordIDUnlocked(v6, ID);
          if (v12)
          {
            v13 = v12;
            CFArrayAppendValue(v8, v12);
            CFRelease(v13);
          }
          ++v9;
        }
        while (v10 != v9);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
      }
    }
    CFRelease(v3);
  }
}

xpc_object_t sub_1ABC1D9FC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC1DA74;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABC1DA74(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v5;
  const void *v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v5);
    CFRelease(v6);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMostRecentUseageOfAddresses(const __CFArray *a1)
{
  int Count;
  __CFString *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void (*v10[5])(void);
  _QWORD v11[7];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  if (!IMDIsRunningInDatabaseServerProcess())
  {
    v10[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v10[1] = (void (*)(void))3221225472;
    v10[2] = (void (*)(void))sub_1ABC1DE44;
    v10[3] = (void (*)(void))&unk_1E5AAF630;
    v10[4] = (void (*)(void))&v12;
    __syncXPCIMDMessageRecordCopyMostRecentUseageOfAddresses_IPCAction(v10, (uint64_t)a1);
    goto LABEL_14;
  }
  if (!a1)
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC63084();
    goto LABEL_9;
  }
  Count = CFArrayGetCount(a1);
  if (Count > 0)
  {
    v3 = IMDMessageRecordCopyMostRecentUseageOfAddressesQuery(Count);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = sub_1ABC1DD14;
    v11[3] = &unk_1E5ABE2C0;
    v11[5] = v3;
    v11[6] = a1;
    v11[4] = &v12;
    _IMDPerformLockedDatabaseBlock((uint64_t)v11);
    if (v3)
      CFRelease(v3);
LABEL_9:
    if (v13[3])
    {
      v5 = IMLogHandleForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = v13[3];
        *(_DWORD *)buf = 138412290;
        v17 = v6;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Matching addresses (in order) are %@", buf, 0xCu);
      }
    }
    goto LABEL_14;
  }
  v7 = IMLogHandleForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    sub_1ABC630B0();
LABEL_14:
  v8 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1ABC1DCE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABC1DD14(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  const __CFAllocator *v3;
  const CFArrayCallBacks *v4;
  const unsigned __int8 *v5;
  CFStringRef v6;
  CFStringRef v7;
  __CFArray *v8;

  if (*(_QWORD *)(result + 40))
  {
    v1 = result;
    result = CSDBSqliteDatabaseConnectionForReading();
    if (result)
    {
      result = CSDBSqliteConnectionStatementForSQL();
      if (result)
      {
        v2 = result;
        if (*(_QWORD *)(result + 8))
        {
          CSDBSqliteBindTextFromCFArrayOfCFStrings();
          if (sqlite3_step(*(sqlite3_stmt **)(v2 + 8)) == 100)
          {
            v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v4 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
            do
            {
              if (sqlite3_column_text(*(sqlite3_stmt **)(v2 + 8), 1))
              {
                v5 = sqlite3_column_text(*(sqlite3_stmt **)(v2 + 8), 1);
                v6 = CFStringCreateWithCString(v3, (const char *)v5, 0x8000100u);
                if (v6)
                {
                  v7 = v6;
                  v8 = *(__CFArray **)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24);
                  if (!v8)
                  {
                    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = CFArrayCreateMutable(v3, 0, v4);
                    v8 = *(__CFArray **)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24);
                  }
                  CFArrayAppendValue(v8, v7);
                  CFRelease(v7);
                }
              }
            }
            while (sqlite3_step(*(sqlite3_stmt **)(v2 + 8)) == 100);
          }
          return CSDBSqliteStatementReset();
        }
      }
    }
  }
  return result;
}

void sub_1ABC1DE44(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v4;
  size_t count;
  size_t v6;
  size_t v7;
  const CFArrayCallBacks *v8;
  const char *string;
  const void *v10;

  value = xpc_dictionary_get_value(xdict, "array_result");
  if (value)
  {
    v4 = value;
    count = xpc_array_get_count(value);
    if (count)
    {
      v6 = count;
      v7 = 0;
      v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      do
      {
        if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, v8);
        string = xpc_array_get_string(v4, v7);
        if (string)
        {
          v10 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", string);
          if (v10)
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v10);
        }
        ++v7;
      }
      while (v6 != v7);
    }
  }
}

uint64_t IMDMessageRecordCopyArrayOfAssociatedMessagesForMessageGUIDFromSender(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v6;
  void (*v7)(uint64_t);
  NSObject *v8;
  _QWORD *v9;
  __int128 **v10;
  const __CFString *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v16[6])(void);
  _QWORD v17[5];
  uint64_t v18;
  _QWORD v19[6];
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v21 = xmmword_1E5ABE370;
    v22 = *(_OWORD *)off_1E5ABE380;
    v23 = 4009;
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("messageGUID"), "CFArrayRef IMDMessageRecordCopyArrayOfAssociatedMessagesForMessageGUIDFromSender(NSString *, NSString *, NSError **)", IMFileLocationTrimFileName(), 4009, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E5AC1D70));
    v7 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v7)
    {
      v7(v6);
    }
    else if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v25 = v6;
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
  *(_QWORD *)&v21 = 0;
  *((_QWORD *)&v21 + 1) = &v21;
  v22 = 0x2020000000uLL;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (a2)
    {
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = sub_1ABC1E22C;
      v19[3] = &unk_1E5ABE3A0;
      v19[4] = a1;
      v19[5] = a2;
      v9 = v19;
      v10 = (__int128 **)&v20;
      v11 = CFSTR("SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE (associated_message_guid = ?) AND (handle_id IN (SELECT ROWID FROM handle where id = ?));");
    }
    else
    {
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = sub_1ABC1E374;
      v17[3] = &unk_1E5AB0D30;
      v17[4] = a1;
      v9 = v17;
      v10 = (__int128 **)&v18;
      v11 = CFSTR("SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE ((associated_message_guid = ?) AND (is_from_me = 1));");
    }
    *v10 = &v21;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)v11, (uint64_t)v9);
  }
  else
  {
    v16[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v16[1] = (void (*)(void))3221225472;
    v16[2] = (void (*)(void))sub_1ABC1E3D8;
    v16[3] = (void (*)(void))&unk_1E5AB7770;
    v16[4] = (void (*)(void))&v21;
    v16[5] = a3;
    __syncXPCIMDMessageRecordCopyArrayOfAssociatedMessagesForMessageGUIDFromSender_IPCAction(v16, a1, a2);
  }
  v12 = IMLogHandleForCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    v13 = objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 24), "count");
    *(_DWORD *)buf = 134218498;
    v25 = v13;
    v26 = 2112;
    v27 = a1;
    v28 = 2112;
    v29 = a2;
    _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "Found %ld associated messages for messageGUID: %@, forSender: %@", buf, 0x20u);
  }
  v14 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 24);
  _Block_object_dispose(&v21, 8);
  return v14;
}

__CFArray *sub_1ABC1E22C(uint64_t a1)
{
  const __CFArray *v2;
  __CFArray *result;

  CSDBSqliteBindTextFromCFString();
  CSDBSqliteBindTextFromCFString();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  result = sub_1ABC1E29C(v2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
  return result;
}

__CFArray *sub_1ABC1E29C(const __CFArray *a1)
{
  CFIndex Count;
  uint64_t v3;
  uint64_t v4;
  __CFArray *Mutable;
  CFIndex v6;
  uint64_t v7;
  int ID;
  const void *v9;
  const void *v10;

  if (!a1)
    return 0;
  Count = CFArrayGetCount(a1);
  if (Count << 32 < 1)
  {
    Mutable = 0;
  }
  else
  {
    v3 = (int)Count;
    v4 = *MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (int)Count, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v6 = 0;
      if (v3 <= 1)
        v7 = 1;
      else
        v7 = v3;
      do
      {
        CFArrayGetValueAtIndex(a1, v6);
        ID = CSDBRecordGetID();
        v9 = IMDMessageRecordCreateFromRecordIDUnlocked(v4, ID);
        if (v9)
        {
          v10 = v9;
          CFArrayAppendValue(Mutable, v9);
          CFRelease(v10);
        }
        ++v6;
      }
      while (v7 != v6);
    }
  }
  CFRelease(a1);
  return Mutable;
}

__CFArray *sub_1ABC1E374(uint64_t a1)
{
  const __CFArray *v2;
  __CFArray *result;

  CSDBSqliteBindTextFromCFString();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  result = sub_1ABC1E29C(v2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1ABC1E3D8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result;
  void *v5;
  CFMutableArrayRef Mutable;
  uint64_t v7;
  const char *string;
  const char *v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[5];
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  result = (uint64_t)xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    v5 = (void *)result;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_1ABC1E584;
    v12[3] = &unk_1E5AB5E88;
    v12[4] = Mutable;
    result = xpc_array_apply(v5, v12);
  }
  else
  {
    Mutable = 0;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = Mutable;
  if (*(_QWORD *)(a1 + 40))
  {
    result = xpc_dictionary_get_int64(xdict, "error_code");
    if (result)
    {
      v7 = result;
      string = xpc_dictionary_get_string(xdict, "error_domain");
      result = (uint64_t)xpc_dictionary_get_string(xdict, "error_description");
      if (string)
      {
        if (result)
          v9 = (const char *)result;
        else
          v9 = "";
        v10 = (void *)MEMORY[0x1E0CB35C8];
        v11 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", string);
        v13 = *MEMORY[0x1E0CB2D50];
        v14[0] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
        result = objc_msgSend(v10, "errorWithDomain:code:userInfo:", v11, v7, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1));
        **(_QWORD **)(a1 + 40) = result;
      }
    }
  }
  return result;
}

uint64_t sub_1ABC1E584(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v4)
  {
    v5 = v4;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v4);
    CFRelease(v5);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMessagesToUploadToCloudKitWithLimit(int64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  void (*v6[5])(void);
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[4];
  int64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v13 = a1;
        _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessagesToUploadToCloudKitWithLimit called with limit %lld", buf, 0xCu);
      }
    }
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1ABC1E7D4;
    v7[3] = &unk_1E5AB2200;
    v7[4] = &v8;
    v7[5] = a1;
    _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE ck_sync_state == 0 AND TRIM(guid) <> '' AND (service in ('iMessage', 'SMS', 'RCS', 'SatelliteSMS', 'iMessageLite'))AND was_detonated == 0 AND schedule_type != 2 ORDER BY date LIMIT ? ;"),
      (uint64_t)v7);
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v6[1] = (void (*)(void))3221225472;
    v6[2] = (void (*)(void))sub_1ABC1E970;
    v6[3] = (void (*)(void))&unk_1E5AAF630;
    v6[4] = (void (*)(void))&v8;
    __syncXPCIMDMessageRecordCopyMessagesToUploadToCloudKit_IPCAction(v6, a1);
    if (IMOSLoggingEnabled())
    {
      v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Returned from DB call.", buf, 2u);
      }
    }
  }
  v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1ABC1E7D4(uint64_t a1)
{
  const __CFArray *v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  CFIndex Count;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  NSObject *v10;
  int v11;
  CFIndex v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  CSDBSqliteBindInt64();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_1ABC1E29C(v2);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v4 = IMOSLoggingEnabled();
  if (v3)
  {
    if (v4)
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        Count = CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
        v11 = 134217984;
        v12 = Count;
        v7 = "Number of results %ld";
        v8 = v5;
        v9 = 12;
LABEL_8:
        _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v11, v9);
      }
    }
  }
  else if (v4)
  {
    v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      LOWORD(v11) = 0;
      v7 = "Number of results 0";
      v8 = v10;
      v9 = 2;
      goto LABEL_8;
    }
  }
}

uint64_t sub_1ABC1E970(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result;
  void *v4;
  CFMutableArrayRef Mutable;
  _QWORD applier[5];

  result = (uint64_t)xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    v4 = (void *)result;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC1EA20;
    applier[3] = &unk_1E5AB5E88;
    applier[4] = Mutable;
    result = xpc_array_apply(v4, applier);
  }
  else
  {
    Mutable = 0;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = Mutable;
  return result;
}

uint64_t sub_1ABC1EA20(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v4)
  {
    v5 = v4;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v4);
    CFRelease(v5);
  }
  return 1;
}

uint64_t IMDMessageRecordCopyMessagesPendingUpdateT1ToCloudKitWithLimit(int64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  void (*v6[5])(void);
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[4];
  int64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v13 = a1;
        _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessagesPendingUpdateT1ToCloudKitWithLimit called with limit %lld", buf, 0xCu);
      }
    }
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1ABC1EC60;
    v7[3] = &unk_1E5AB22C0;
    v7[4] = &v8;
    v7[5] = a1;
    IMDRunSqlOperation((uint64_t)v7);
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v6[1] = (void (*)(void))3221225472;
    v6[2] = (void (*)(void))sub_1ABC1F364;
    v6[3] = (void (*)(void))&unk_1E5AAF630;
    v6[4] = (void (*)(void))&v8;
    __syncXPCIMDMessageRecordCopyMessagesPendingUpdateT1ToCloudKit_IPCAction(v6, a1);
    if (IMOSLoggingEnabled())
    {
      v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Returned from DB call.", buf, 2u);
      }
    }
  }
  v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

BOOL sub_1ABC1EC60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC1ECEC;
  v6[3] = &unk_1E5AB2248;
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v6[4] = a2;
  v6[5] = v2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC1ECF8;
  v5[3] = &unk_1E5AB2298;
  v5[4] = v3;
  v5[5] = a2;
  return _IMDSqlOperationRunQuery(a2, CFSTR("SELECT ROWID, guid, thread_originator_guid, thread_originator_part FROM message where ck_sync_state == 8 AND (service == 'iMessage' OR service == 'SMS') order by date limit ? ;"),
           (uint64_t)v6,
           (uint64_t)v5);
}

void sub_1ABC1ECEC(uint64_t a1)
{
  IMDSqlStatementBindInt64(*(_QWORD *)(a1 + 32) + 32, *(_QWORD *)(a1 + 40));
}

BOOL sub_1ABC1ECF8(uint64_t a1)
{
  _BOOL8 result;
  __CFArray *v3;
  uint64_t v4;
  __CFDictionary *Mutable;
  CFNumberRef v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __CFArray *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint32_t v19;
  NSObject *v20;
  uint64_t v21;
  const __CFAllocator *allocator;
  _QWORD v23[8];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  v3 = 0;
  if (result)
  {
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v42 = 0;
      v43 = &v42;
      v44 = 0x2020000000;
      v45 = 0;
      v36 = 0;
      v37 = &v36;
      v38 = 0x3052000000;
      v39 = sub_1ABC1A308;
      v40 = sub_1ABC1A318;
      v41 = 0;
      v30 = 0;
      v31 = &v30;
      v32 = 0x3052000000;
      v33 = sub_1ABC1A308;
      v34 = sub_1ABC1A318;
      v35 = 0;
      v24 = 0;
      v25 = &v24;
      v26 = 0x3052000000;
      v27 = sub_1ABC1A308;
      v28 = sub_1ABC1A318;
      v29 = 0;
      v4 = *(_QWORD *)(a1 + 40);
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = sub_1ABC1F1C8;
      v23[3] = &unk_1E5ABE3C8;
      v23[4] = &v42;
      v23[5] = &v36;
      v23[6] = &v30;
      v23[7] = &v24;
      IMDSqlOperationIterateRow(v4, (uint64_t)v23);
      if (!v43[3] || !objc_msgSend((id)v37[5], "length") || !objc_msgSend((id)v31[5], "length"))
        break;
      Mutable = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v6 = CFNumberCreate(allocator, kCFNumberLongLongType, v43 + 3);
        CFDictionarySetValue(Mutable, CFSTR("ROWID"), v6);
        CFDictionarySetValue(Mutable, CFSTR("MID"), (const void *)v37[5]);
        CFDictionarySetValue(Mutable, CFSTR("TOID"), (const void *)v31[5]);
        if (objc_msgSend((id)v25[5], "length"))
          CFDictionarySetValue(Mutable, CFSTR("TOPart"), (const void *)v25[5]);
        if (IMOSLoggingEnabled())
        {
          v7 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            v8 = v43[3];
            v9 = v37[5];
            v10 = v31[5];
            v11 = v25[5];
            *(_DWORD *)buf = 134218754;
            v47 = v8;
            v48 = 2112;
            v49 = v9;
            v50 = 2112;
            v51 = v10;
            v52 = 2112;
            v53 = v11;
            _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Found message %lld/%@ to update : originator GUID/part: %@/%@", buf, 0x2Au);
          }
        }
        v12 = v3;
        if (!v3)
          v12 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
        v3 = v12;
        CFArrayAppendValue(v12, Mutable);
        CFRelease(Mutable);
        if (v6)
          CFRelease(v6);
        goto LABEL_20;
      }
      if (IMOSLoggingEnabled())
      {
        v20 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          v21 = v37[5];
          *(_DWORD *)buf = 138412290;
          v47 = v21;
          v17 = v20;
          v18 = "Message Update v1 Query - unable to create row dictionary for messageId: %@, skipping!";
          v19 = 12;
LABEL_19:
          _os_log_impl(&dword_1ABB60000, v17, OS_LOG_TYPE_INFO, v18, buf, v19);
        }
      }
LABEL_20:
      _Block_object_dispose(&v24, 8);
      _Block_object_dispose(&v30, 8);
      _Block_object_dispose(&v36, 8);
      _Block_object_dispose(&v42, 8);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
      if (!result)
        goto LABEL_25;
    }
    if (!IMOSLoggingEnabled())
      goto LABEL_20;
    v13 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      goto LABEL_20;
    v14 = v43[3];
    v15 = v37[5];
    v16 = v31[5];
    *(_DWORD *)buf = 134218498;
    v47 = v14;
    v48 = 2112;
    v49 = v15;
    v50 = 2112;
    v51 = v16;
    v17 = v13;
    v18 = "Message Update v1 query got invalid column data back: rowid %lld messageId:%@ threadOriginatorGUID:%@";
    v19 = 32;
    goto LABEL_19;
  }
LABEL_25:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  return result;
}

void sub_1ABC1F17C()
{
  JUMPOUT(0x1ABC1F190);
}

void sub_1ABC1F1C8(_QWORD *a1, __int128 *a2)
{
  NSObject *v4;
  int v5;
  const unsigned __int8 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = IMDInt64FromSqlColumn((uint64_t)&v8);
      return;
    case 1:
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
      v6 = IMDStringFromSqlColumn((uint64_t)&v8);
      v7 = a1[5];
      goto LABEL_9;
    case 2:
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
      v6 = IMDStringFromSqlColumn((uint64_t)&v8);
      v7 = a1[6];
      goto LABEL_9;
    case 3:
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
      v6 = IMDStringFromSqlColumn((uint64_t)&v8);
      v7 = a1[7];
LABEL_9:
      *(_QWORD *)(*(_QWORD *)(v7 + 8) + 40) = v6;
      break;
    default:
      if (IMOSLoggingEnabled())
      {
        v4 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          v5 = *((_DWORD *)a2 + 4);
          LODWORD(v8) = 67109120;
          DWORD1(v8) = v5;
          _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Unexpected column in Message Update v1 with index %d", (uint8_t *)&v8, 8u);
        }
      }
      break;
  }
}

uint64_t sub_1ABC1F364(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result;
  void *v4;
  id v5;
  _QWORD applier[5];

  result = (uint64_t)xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    v4 = (void *)result;
    result = xpc_array_get_count((xpc_object_t)result);
    if (result)
    {
      v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = sub_1ABC1F40C;
      applier[3] = &unk_1E5AB60D8;
      applier[4] = v5;
      result = xpc_array_apply(v4, applier);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
    }
  }
  return result;
}

uint64_t sub_1ABC1F40C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  const char *string;

  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 4);
  objc_msgSend(v5, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", xpc_dictionary_get_int64(a3, "ROWID")), CFSTR("ROWID"));
  objc_msgSend(v5, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", xpc_dictionary_get_string(a3, "MID")), CFSTR("MID"));
  objc_msgSend(v5, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", xpc_dictionary_get_string(a3, "TOID")), CFSTR("TOID"));
  string = xpc_dictionary_get_string(a3, "TOPart");
  if (string)
    objc_msgSend(v5, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", string), CFSTR("TOPart"));
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);

  return 1;
}

uint64_t IMDMessageRecordCopyMessagesPendingUpdateT2ToCloudKitWithLimit(int64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  void (*v6[5])(void);
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[4];
  int64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v13 = a1;
        _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessagesPendingUpdateT2ToCloudKitWithLimit called with limit %lld", buf, 0xCu);
      }
    }
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1ABC1F73C;
    v7[3] = &unk_1E5AB22C0;
    v7[4] = &v8;
    v7[5] = a1;
    IMDRunSqlOperation((uint64_t)v7);
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v6[1] = (void (*)(void))3221225472;
    v6[2] = (void (*)(void))sub_1ABC1FE54;
    v6[3] = (void (*)(void))&unk_1E5AAF630;
    v6[4] = (void (*)(void))&v8;
    __syncXPCIMDMessageRecordCopyMessagesPendingUpdateT2ToCloudKit_IPCAction(v6, a1);
    if (IMOSLoggingEnabled())
    {
      v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Returned from DB call.", buf, 2u);
      }
    }
  }
  v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

BOOL sub_1ABC1F73C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC1F7C8;
  v6[3] = &unk_1E5AB2248;
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v6[4] = a2;
  v6[5] = v2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC1F7D4;
  v5[3] = &unk_1E5AB2298;
  v5[4] = v3;
  v5[5] = a2;
  return _IMDSqlOperationRunQuery(a2, CFSTR("SELECT ROWID, guid, syndication_ranges, synced_syndication_ranges FROM message where syndication_ranges is not null AND (synced_syndication_ranges is null or syndication_ranges != synced_syndication_ranges) AND (service == 'iMessage' OR service == 'SMS') order by date limit ? ;"),
           (uint64_t)v6,
           (uint64_t)v5);
}

void sub_1ABC1F7C8(uint64_t a1)
{
  IMDSqlStatementBindInt64(*(_QWORD *)(a1 + 32) + 32, *(_QWORD *)(a1 + 40));
}

BOOL sub_1ABC1F7D4(uint64_t a1)
{
  _BOOL8 result;
  __int128 v3;
  __CFArray *v4;
  uint64_t v5;
  __CFDictionary *Mutable;
  CFNumberRef v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __CFArray *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint32_t v21;
  NSObject *v22;
  uint64_t v23;
  __int128 v24;
  const __CFAllocator *allocator;
  _QWORD v26[8];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t buf[4];
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  v4 = 0;
  if (result)
  {
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    *(_QWORD *)&v3 = 138412290;
    v24 = v3;
    while (1)
    {
      v45 = 0;
      v46 = &v45;
      v47 = 0x2020000000;
      v48 = 0;
      v39 = 0;
      v40 = &v39;
      v41 = 0x3052000000;
      v42 = sub_1ABC1A308;
      v43 = sub_1ABC1A318;
      v44 = 0;
      v33 = 0;
      v34 = &v33;
      v35 = 0x3052000000;
      v36 = sub_1ABC1A308;
      v37 = sub_1ABC1A318;
      v38 = 0;
      v27 = 0;
      v28 = &v27;
      v29 = 0x3052000000;
      v30 = sub_1ABC1A308;
      v31 = sub_1ABC1A318;
      v32 = 0;
      v5 = *(_QWORD *)(a1 + 40);
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = sub_1ABC1FCB8;
      v26[3] = &unk_1E5ABE3C8;
      v26[4] = &v45;
      v26[5] = &v39;
      v26[6] = &v33;
      v26[7] = &v27;
      IMDSqlOperationIterateRow(v5, (uint64_t)v26);
      if (!v46[3] || !objc_msgSend((id)v40[5], "length") || !objc_msgSend((id)v34[5], "length"))
        break;
      Mutable = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v7 = CFNumberCreate(allocator, kCFNumberLongLongType, v46 + 3);
        CFDictionarySetValue(Mutable, CFSTR("ROWID"), v7);
        CFDictionarySetValue(Mutable, CFSTR("MID"), (const void *)v40[5]);
        if (objc_msgSend((id)v34[5], "length"))
          CFDictionarySetValue(Mutable, CFSTR("SR"), (const void *)v34[5]);
        if (objc_msgSend((id)v28[5], "length", v24))
          CFDictionarySetValue(Mutable, CFSTR("SSR"), (const void *)v28[5]);
        if (IMOSLoggingEnabled())
        {
          v8 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            v9 = v46[3];
            v10 = v40[5];
            v11 = v34[5];
            v12 = v28[5];
            *(_DWORD *)buf = 134218754;
            v50 = v9;
            v51 = 2112;
            v52 = v10;
            v53 = 2112;
            v54 = v11;
            v55 = 2112;
            v56 = v12;
            _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "Found message %lld/%@ to update : originator GUID/part: %@/%@", buf, 0x2Au);
          }
        }
        v13 = v4;
        if (!v4)
          v13 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
        v4 = v13;
        CFArrayAppendValue(v13, Mutable);
        CFRelease(Mutable);
        if (v7)
          CFRelease(v7);
        goto LABEL_22;
      }
      if (IMOSLoggingEnabled())
      {
        v22 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          v23 = v40[5];
          *(_DWORD *)buf = v24;
          v50 = v23;
          v19 = v22;
          v20 = "Message Update v1 Query - unable to create row dictionary for messageId: %@, skipping!";
          v21 = 12;
LABEL_21:
          _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, v20, buf, v21);
        }
      }
LABEL_22:
      _Block_object_dispose(&v27, 8);
      _Block_object_dispose(&v33, 8);
      _Block_object_dispose(&v39, 8);
      _Block_object_dispose(&v45, 8);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
      if (!result)
        goto LABEL_27;
    }
    if (!IMOSLoggingEnabled())
      goto LABEL_22;
    v14 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      goto LABEL_22;
    v15 = v46[3];
    v16 = v40[5];
    v17 = v34[5];
    v18 = v28[5];
    *(_DWORD *)buf = 134218754;
    v50 = v15;
    v51 = 2112;
    v52 = v16;
    v53 = 2112;
    v54 = v17;
    v55 = 2112;
    v56 = v18;
    v19 = v14;
    v20 = "Message Update T2 query got invalid column data back: rowid %lld messageId:%@ syndicationRanges:%@ syncedSyndicationRanges:%@";
    v21 = 42;
    goto LABEL_21;
  }
LABEL_27:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
  return result;
}

void sub_1ABC1FC6C()
{
  JUMPOUT(0x1ABC1FC80);
}

void sub_1ABC1FCB8(_QWORD *a1, __int128 *a2)
{
  NSObject *v4;
  int v5;
  const unsigned __int8 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = IMDInt64FromSqlColumn((uint64_t)&v8);
      return;
    case 1:
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
      v6 = IMDStringFromSqlColumn((uint64_t)&v8);
      v7 = a1[5];
      goto LABEL_9;
    case 2:
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
      v6 = IMDStringFromSqlColumn((uint64_t)&v8);
      v7 = a1[6];
      goto LABEL_9;
    case 3:
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
      v6 = IMDStringFromSqlColumn((uint64_t)&v8);
      v7 = a1[7];
LABEL_9:
      *(_QWORD *)(*(_QWORD *)(v7 + 8) + 40) = v6;
      break;
    default:
      if (IMOSLoggingEnabled())
      {
        v4 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          v5 = *((_DWORD *)a2 + 4);
          LODWORD(v8) = 67109120;
          DWORD1(v8) = v5;
          _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Unexpected column in Message Update v1 with index %d", (uint8_t *)&v8, 8u);
        }
      }
      break;
  }
}

uint64_t sub_1ABC1FE54(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result;
  void *v4;
  id v5;
  _QWORD applier[5];

  result = (uint64_t)xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    v4 = (void *)result;
    result = xpc_array_get_count((xpc_object_t)result);
    if (result)
    {
      v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = sub_1ABC1FEFC;
      applier[3] = &unk_1E5AB60D8;
      applier[4] = v5;
      result = xpc_array_apply(v4, applier);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
    }
  }
  return result;
}

uint64_t sub_1ABC1FEFC(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  const char *string;
  const char *v7;

  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 4);
  objc_msgSend(v5, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", xpc_dictionary_get_int64(a3, "ROWID")), CFSTR("ROWID"));
  objc_msgSend(v5, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", xpc_dictionary_get_string(a3, "MID")), CFSTR("MID"));
  string = xpc_dictionary_get_string(a3, "SR");
  if (string)
    objc_msgSend(v5, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", string), CFSTR("SR"));
  v7 = xpc_dictionary_get_string(a3, "SSR");
  if (v7)
    objc_msgSend(v5, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7), CFSTR("SSR"));
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);
  if (v5)

  return 1;
}

uint64_t IMDMessageRecordCopyMessagesPendingUpdateT3ToCloudKitWithLimit(int64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  void (*v6[5])(void);
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[4];
  int64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v13 = a1;
        _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyMessagesPendingUpdateT3ToCloudKitWithLimit called with limit %lld", buf, 0xCu);
      }
    }
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1ABC20230;
    v7[3] = &unk_1E5AB22C0;
    v7[4] = &v8;
    v7[5] = a1;
    IMDRunSqlOperation((uint64_t)v7);
  }
  else
  {
    v6[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v6[1] = (void (*)(void))3221225472;
    v6[2] = (void (*)(void))sub_1ABC20858;
    v6[3] = (void (*)(void))&unk_1E5AAF630;
    v6[4] = (void (*)(void))&v8;
    __syncXPCIMDMessageRecordCopyMessagesPendingUpdateT3ToCloudKit_IPCAction(v6, a1);
    if (IMOSLoggingEnabled())
    {
      v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Returned from DB call.", buf, 2u);
      }
    }
  }
  v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

BOOL sub_1ABC20230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC202BC;
  v6[3] = &unk_1E5AB2248;
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v6[4] = a2;
  v6[5] = v2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC202C8;
  v5[3] = &unk_1E5AB2298;
  v5[4] = v3;
  v5[5] = a2;
  return _IMDSqlOperationRunQuery(a2, CFSTR("SELECT ROWID, guid FROM message where ck_sync_state == 9 AND (service in ('iMessage', 'SMS', 'RCS', 'SatelliteSMS', 'iMessageLite')) order by date limit ? ;"),
           (uint64_t)v6,
           (uint64_t)v5);
}

void sub_1ABC202BC(uint64_t a1)
{
  IMDSqlStatementBindInt64(*(_QWORD *)(a1 + 32) + 32, *(_QWORD *)(a1 + 40));
}

BOOL sub_1ABC202C8(uint64_t a1)
{
  _BOOL8 result;
  __CFArray *v3;
  uint64_t v4;
  uint64_t v5;
  __CFDictionary *Mutable;
  CFNumberRef v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  NSObject *v16;
  uint64_t v17;
  const __CFAllocator *allocator;
  _QWORD v19[6];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  v3 = 0;
  if (result)
  {
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      v26 = 0;
      v27 = &v26;
      v28 = 0x2020000000;
      v29 = 0;
      v20 = 0;
      v21 = &v20;
      v22 = 0x3052000000;
      v23 = sub_1ABC1A308;
      v24 = sub_1ABC1A318;
      v25 = 0;
      v5 = *(_QWORD *)(a1 + 40);
      v19[0] = v4;
      v19[1] = 3221225472;
      v19[2] = sub_1ABC20710;
      v19[3] = &unk_1E5AB2DE0;
      v19[4] = &v26;
      v19[5] = &v20;
      IMDSqlOperationIterateRow(v5, (uint64_t)v19);
      if (v27[3] && objc_msgSend((id)v21[5], "length"))
      {
        Mutable = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v7 = CFNumberCreate(allocator, kCFNumberLongLongType, v27 + 3);
          CFDictionarySetValue(Mutable, CFSTR("ROWID"), v7);
          CFDictionarySetValue(Mutable, CFSTR("MID"), (const void *)v21[5]);
          if (IMOSLoggingEnabled())
          {
            v8 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
            {
              v9 = v27[3];
              v10 = v21[5];
              *(_DWORD *)buf = 134218242;
              v31 = v9;
              v32 = 2112;
              v33 = v10;
              _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "Found message %lld/%@ to update", buf, 0x16u);
            }
          }
          if (!v3)
            v3 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
          CFArrayAppendValue(v3, Mutable);
          v11 = (const void *)v21[5];
          if (v11)
          {
            CFRelease(v11);
            v21[5] = 0;
          }
          CFRelease(Mutable);
          if (v7)
            CFRelease(v7);
          goto LABEL_20;
        }
        if (IMOSLoggingEnabled())
        {
          v16 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            v17 = v21[5];
            *(_DWORD *)buf = 138412290;
            v31 = v17;
            _os_log_impl(&dword_1ABB60000, v16, OS_LOG_TYPE_INFO, "Message Update v3 Query - unable to create row dictionary for messageId: %@, skipping!", buf, 0xCu);
          }
        }
        v15 = (const void *)v21[5];
        if (!v15)
          goto LABEL_20;
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          v12 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            v13 = v27[3];
            v14 = v21[5];
            *(_DWORD *)buf = 134218242;
            v31 = v13;
            v32 = 2112;
            v33 = v14;
            _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "Message Update v3 query got invalid column data back: rowid %lld messageId:%@", buf, 0x16u);
          }
        }
        v15 = (const void *)v21[5];
        if (!v15)
          goto LABEL_20;
      }
      CFRelease(v15);
      v21[5] = 0;
LABEL_20:
      _Block_object_dispose(&v20, 8);
      _Block_object_dispose(&v26, 8);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  return result;
}

void sub_1ABC206DC()
{
  JUMPOUT(0x1ABC206F0);
}

void sub_1ABC20710(uint64_t a1, __int128 *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)a2 + 4);
  if (v3 == 1)
  {
    v6 = *a2;
    v7 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = IMDStringFromSqlColumn((uint64_t)&v6);
  }
  else if (v3)
  {
    if (IMOSLoggingEnabled())
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *((_DWORD *)a2 + 4);
        LODWORD(v6) = 67109120;
        DWORD1(v6) = v5;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Unexpected column in Message Update v3 with index %d", (uint8_t *)&v6, 8u);
      }
    }
  }
  else
  {
    v6 = *a2;
    v7 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IMDInt64FromSqlColumn((uint64_t)&v6);
  }
}

uint64_t sub_1ABC20858(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result;
  void *v4;
  id v5;
  _QWORD applier[5];

  result = (uint64_t)xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    v4 = (void *)result;
    result = xpc_array_get_count((xpc_object_t)result);
    if (result)
    {
      v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = sub_1ABC20900;
      applier[3] = &unk_1E5AB60D8;
      applier[4] = v5;
      result = xpc_array_apply(v4, applier);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
    }
  }
  return result;
}

uint64_t sub_1ABC20900(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;

  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 4);
  objc_msgSend(v5, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", xpc_dictionary_get_int64(a3, "ROWID")), CFSTR("ROWID"));
  objc_msgSend(v5, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", xpc_dictionary_get_string(a3, "MID")), CFSTR("MID"));
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);

  return 1;
}

void IMDMessageRecordMarkAllMessagesAsNeedingCloudKitSync()
{
  NSObject *v0;
  NSObject *v1;
  _OWORD v2[11];

  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      v0 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
      {
        LOWORD(v2[0]) = 0;
        _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "IMDMessageRecordMarkAllMessagesAsNeedingCloudKitSync", (uint8_t *)v2, 2u);
      }
    }
    memset(v2, 0, sizeof(v2));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v2);
    IMDSqlOperationExecuteQuery((uint64_t)v2, CFSTR("update message set ck_sync_state=0,ck_record_id='',ck_record_change_tag='';update attachment set ck_sync_state=0, ck_server_change_token_blob='';update recoverable_message_part set ck_sync_state=0;"),
      (uint64_t)&unk_1E5AAE8B8);
    IMDSqlOperationExecuteQuery((uint64_t)v2, CFSTR("update message set synced_syndication_ranges=NULL where synced_syndication_ranges is not null;"),
      (uint64_t)&unk_1E5ABE3E8);
    IMDSqlOperationRelease((uint64_t)v2, 0);
  }
  else
  {
    __syncXPCIMDMessageRecordMarkAllMessagesAsNeedingCloudKitSync(0);
    if (IMOSLoggingEnabled())
    {
      v1 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        LOWORD(v2[0]) = 0;
        _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_INFO, "Returned from DB call after marking all msgs as dirty.", (uint8_t *)v2, 2u);
      }
    }
  }
}

void sub_1ABC20B24()
{
  NSObject *v0;
  uint8_t v1[16];

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "IMDMessageRecordMarkAllMessagesAsNeedingCloudKitSync updated messages as dirty ", v1, 2u);
    }
  }
}

void sub_1ABC20BB0()
{
  NSObject *v0;
  uint8_t v1[16];

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "IMDMarkMessageForT2UpdateSync updated messages with syndicationRanges as dirty for T2 update", v1, 2u);
    }
  }
}

uint64_t IMDMessageRecordCopyRecordIDsAndGUIDsToDeleteWithLimit(sqlite3_int64 a1)
{
  NSObject *v2;
  __CFDictionary *Row;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v11[5])(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;
  uint8_t buf[16];
  __int128 v20;
  _OWORD v21[9];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v14 = &v13;
  v15 = 0x3052000000;
  v16 = sub_1ABC1A308;
  v17 = sub_1ABC1A318;
  v18 = 0;
  v18 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a1;
        _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyRecordIDsAndGUIDsToDeleteWithLimit is in IMDP with limit %lld", buf, 0xCu);
      }
    }
    v20 = 0u;
    memset(v21, 0, sizeof(v21));
    *(_OWORD *)buf = 0u;
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    _IMDSqlOperationBeginQuery((uint64_t)buf, CFSTR(" select * from sync_deleted_messages where LENGTH(recordID) > 0 limit ?;"));
    IMDSqlStatementBindInt64((uint64_t)v21, a1);
    while (IMDSqlOperationHasRows((uint64_t)buf))
    {
      Row = IMDSqlStatementGetRow((sqlite3_stmt **)v21);
      if (Row)
        objc_msgSend((id)v14[5], "addObject:", Row);

    }
    IMDSqlOperationFinishQuery((uint64_t)buf);
    v12 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v12);
    if (v12)
    {
      v7 = IMLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1ABC630DC(&v12, v7, v8);
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a1;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "IMDMessageRecordCopyRecordIDsAndGUIDsToDeleteWithLimit is in imagent with limit %lld", buf, 0xCu);
      }
    }
    v11[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v11[1] = (void (*)(void))3221225472;
    v11[2] = (void (*)(void))sub_1ABC20FA0;
    v11[3] = (void (*)(void))&unk_1E5AAF630;
    v11[4] = (void (*)(void))&v13;
    __syncXPCIMDMessageRecordCopyMessagesToDeleteFromCloudKit_IPCAction(v11, a1);
    if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = objc_msgSend((id)v14[5], "count");
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Returned from DB call after loading messages to delete messages count %lu", buf, 0xCu);
      }
    }
  }
  v9 = v14[5];
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_1ABC20F14(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1ABC20ECCLL);
  }
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(exc_buf);
}

xpc_object_t sub_1ABC20FA0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t result;
  _QWORD applier[5];

  result = xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC21018;
    applier[3] = &unk_1E5AAF608;
    applier[4] = *(_QWORD *)(a1 + 32);
    return (xpc_object_t)xpc_array_apply(result, applier);
  }
  return result;
}

uint64_t sub_1ABC21018(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v5;

  v5 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", xpc_dictionary_get_string(xdict, "guid"), 4);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v5, CFSTR("guid"), objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", xpc_dictionary_get_string(xdict, "recordID"), 4), CFSTR("recordID"), 0));
  return 1;
}

void IMDMessageRecordAddGUIDAndCKRecordIDToDeleteFromCloudKit(void *a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  _DWORD v6[8];
  _OWORD v7[9];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v6[0] = 138412546;
      *(_QWORD *)&v6[1] = a1;
      LOWORD(v6[3]) = 2112;
      *(_QWORD *)((char *)&v6[3] + 2) = a2;
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Request to add message with guid (%@) and recordID (%@) to delete table", (uint8_t *)v6, 0x16u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v7, 0, sizeof(v7));
    memset(v6, 0, sizeof(v6));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v6);
    _IMDSqlOperationBeginQuery((uint64_t)v6, CFSTR(" INSERT INTO sync_deleted_messages (guid, recordID) VALUES (?, ?);"));
    IMDSqlStatementBindTextFromCFString((uint64_t)v7, (uint64_t)a1);
    IMDSqlStatementBindTextFromCFString((uint64_t)v7, (uint64_t)a2);
    IMDSqlOperationFinishQuery((uint64_t)v6);
    IMDSqlOperationRelease((uint64_t)v6, 0);
  }
  else
  {
    __syncXPCIMDMessageRecordAddGUIDAndCKRecordIDToDeleteFromCloudKit_IPCAction(0, a1, a2);
  }
  if (IMOSLoggingEnabled())
  {
    v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6[0] = 138412546;
      *(_QWORD *)&v6[1] = a1;
      LOWORD(v6[3]) = 2112;
      *(_QWORD *)((char *)&v6[3] + 2) = a2;
      _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Finished adding message with guid (%@) and recordID (%@) to delete table", (uint8_t *)v6, 0x16u);
    }
  }
}

void IMDAddIncompatibleGroupPhotoChangedMessagesToDeleteFromCloudKit()
{
  NSObject *v0;
  NSObject *v1;
  _OWORD v2[11];

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      LOWORD(v2[0]) = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "Request to add incompatible group photo to delete table", (uint8_t *)v2, 2u);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v2, 0, sizeof(v2));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v2);
    _IMDSqlOperationBeginQuery((uint64_t)v2, CFSTR(" INSERT INTO sync_deleted_messages (guid, recordID) SELECT guid,ck_record_id FROM message WHERE item_type = 3 AND group_action_type != 0 AND length(ck_record_id) > 0;"));
    IMDSqlOperationFinishQuery((uint64_t)v2);
    IMDSqlOperationRelease((uint64_t)v2, 0);
  }
  else
  {
    __syncXPCIMDAddIncompatibleGroupPhotoChangedMessagesToDeleteFromCloudKit_IPCAction(0);
  }
  if (IMOSLoggingEnabled())
  {
    v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      LOWORD(v2[0]) = 0;
      _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_INFO, "Finished adding incompatible group photo to delete table", (uint8_t *)v2, 2u);
    }
  }
}

void IMDMessageRecordClearDeleteTombStones()
{
  NSObject *v0;
  NSObject *v1;
  _OWORD v2[11];

  if (IMDIsRunningInDatabaseServerProcess())
  {
    if (IMOSLoggingEnabled())
    {
      v0 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
      {
        LOWORD(v2[0]) = 0;
        _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "IMDMessageRecordClearDeleteTombStones", (uint8_t *)v2, 2u);
      }
    }
    memset(v2, 0, sizeof(v2));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v2);
    IMDSqlOperationExecuteQuery((uint64_t)v2, CFSTR("delete from sync_deleted_messages;"), (uint64_t)&unk_1E5AAE638);
    IMDSqlOperationRelease((uint64_t)v2, 0);
  }
  else
  {
    __syncXPCIMDMessageRecordMarkDeletedTombStonedMessagesAsNeedingCloudKitSync_IPCAction(0);
    if (IMOSLoggingEnabled())
    {
      v1 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        LOWORD(v2[0]) = 0;
        _os_log_impl(&dword_1ABB60000, v1, OS_LOG_TYPE_INFO, "Returned from DB call after marking clearing all tombstones", (uint8_t *)v2, 2u);
      }
    }
  }
}

void sub_1ABC21540()
{
  NSObject *v0;
  uint8_t v1[16];

  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_1ABB60000, v0, OS_LOG_TYPE_INFO, "IMDMessageRecordMarkAllMessagesAsNeedingCloudKitSync deleted pending sync table", v1, 2u);
    }
  }
}

void IMDMessageRecordDeleteTombStonedMessagesWithRecordIDs(const __CFArray *a1)
{
  CFIndex Count;
  __CFString *v3;
  NSObject *v4;
  const char *v5;
  _QWORD v6[6];
  uint8_t buf[16];

  if (a1 && CFArrayGetCount(a1))
  {
    if (IMDIsRunningInDatabaseServerProcess())
    {
      Count = CFArrayGetCount(a1);
      v3 = IMDCreateQueryRemoveMessagesFromTombStoneTableQuery(Count);
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = sub_1ABC21710;
      v6[3] = &unk_1E5ABE408;
      v6[4] = v3;
      v6[5] = a1;
      IMDRunSqlOperation((uint64_t)v6);
      CFRelease(v3);
      return;
    }
    __syncXPCIMDMessageRecordDeleteTombStonedMessagesForRecordIDs_IPCAction(0, (uint64_t)a1);
    if (IMOSLoggingEnabled())
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        v5 = "Returned from DB call after deleting RecordIDs from Tombstone table";
        goto LABEL_11;
      }
    }
  }
  else if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v5 = "IMDMessageRecordDeleteTombStonedMessagesWithGUIDs has no GUIDs to delete.";
LABEL_11:
      _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, v5, buf, 2u);
    }
  }
}

BOOL sub_1ABC21710(uint64_t a1, uint64_t a2)
{
  const __CFString *v3;
  uint64_t v4;
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC21774;
  v6[3] = &unk_1E5AB2248;
  v3 = *(const __CFString **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6[4] = a2;
  v6[5] = v4;
  return _IMDSqlOperationRunQuery(a2, v3, (uint64_t)v6, 0);
}

void sub_1ABC21774(uint64_t a1)
{
  IMDSqlStatementBindTextFromArrayOfCFStrings(*(_QWORD *)(a1 + 32) + 32, *(CFArrayRef *)(a1 + 40));
}

void IMDMessageRecordMarkMessageWithROWIDAsIgnoreButNeedingSyncWithCloudKit(sqlite3_int64 a1)
{
  NSObject *v2;
  NSObject *v3;
  _OWORD v4[2];
  _OWORD v5[9];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LODWORD(v4[0]) = 134217984;
      *(_QWORD *)((char *)v4 + 4) = a1;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Request to mark message with ROWID %lld as ignore but needing sync", (uint8_t *)v4, 0xCu);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v5, 0, sizeof(v5));
    memset(v4, 0, sizeof(v4));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v4);
    _IMDSqlOperationBeginQuery((uint64_t)v4, CFSTR("update message set ck_sync_state = 2 where rowid=?"));
    IMDSqlStatementBindInt64((uint64_t)v5, a1);
    IMDSqlOperationFinishQuery((uint64_t)v4);
    IMDSqlOperationRelease((uint64_t)v4, 0);
  }
  else
  {
    __syncXPCIMDMessageRecordMarkMessageWithROWIDAsIgnoreButNeedingSyncWithCloudKit_IPCAction(0, a1);
  }
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      LODWORD(v4[0]) = 134217984;
      *(_QWORD *)((char *)v4 + 4) = a1;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Finised marking message with ROWID %lld as ignore but needing sync", (uint8_t *)v4, 0xCu);
    }
  }
}

void IMDMessageRecordMarkMessageWithROWIDAsSyncedWithCloudKit(sqlite3_int64 a1)
{
  NSObject *v2;
  NSObject *v3;
  _OWORD v4[2];
  _OWORD v5[9];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LODWORD(v4[0]) = 134217984;
      *(_QWORD *)((char *)v4 + 4) = a1;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Request to mark message with ROWID %lld as clean", (uint8_t *)v4, 0xCu);
    }
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    memset(v5, 0, sizeof(v5));
    memset(v4, 0, sizeof(v4));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v4);
    _IMDSqlOperationBeginQuery((uint64_t)v4, CFSTR("update message set ck_sync_state = 1 where rowid=?"));
    IMDSqlStatementBindInt64((uint64_t)v5, a1);
    IMDSqlOperationFinishQuery((uint64_t)v4);
    IMDSqlOperationRelease((uint64_t)v4, 0);
  }
  else
  {
    __syncXPCIMDMessageRecordMarkMessageWithROWIDAsSyncedWithCloudKit_IPCAction(0, a1);
  }
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      LODWORD(v4[0]) = 134217984;
      *(_QWORD *)((char *)v4 + 4) = a1;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Finised marking message with ROWID %lld as clean", (uint8_t *)v4, 0xCu);
    }
  }
}

sqlite3_int64 sub_1ABC21AC0(uint64_t a1, const __CFString *a2)
{
  sqlite3_int64 v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  _IMDSqlOperationBeginQuery(a1, a2);
  v7 = 0uLL;
  v8 = 0;
  IMDSqlOperationColumnByIndex(a1, 0, (uint64_t)&v7);
  v3 = 0;
  if (IMDSqlOperationHasRows(a1))
  {
    v5 = v7;
    v6 = v8;
    v3 = IMDInt64FromSqlColumn((uint64_t)&v5);
  }
  IMDSqlOperationFinishQuery(a1);
  return v3;
}

id sub_1ABC21B3C(uint64_t a1, const __CFString *a2)
{
  id v3;
  uint64_t v4;
  sqlite3_int64 v5;
  sqlite3_int64 v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  _IMDSqlOperationBeginQuery(a1, a2);
  v13 = 0uLL;
  v14 = 0;
  IMDSqlOperationColumnByIndex(a1, 0, (uint64_t)&v13);
  v11 = 0uLL;
  v12 = 0;
  IMDSqlOperationColumnByIndex(a1, 1, (uint64_t)&v11);
  v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v4 = 0;
  if (IMDSqlOperationHasRows(a1))
  {
    v4 = 0;
    do
    {
      v9 = v13;
      v10 = v14;
      v5 = IMDInt64FromSqlColumn((uint64_t)&v9);
      v9 = v11;
      v10 = v12;
      v6 = IMDInt64FromSqlColumn((uint64_t)&v9);
      v7 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Status %ld"), v5);
      objc_msgSend(v3, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v6), v7);
      v4 += v6;
    }
    while (IMDSqlOperationHasRows(a1));
  }
  objc_msgSend(v3, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v4), CFSTR("total"));
  IMDSqlOperationFinishQuery(a1);
  return v3;
}

uint64_t sub_1ABC21C8C(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  NSObject *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint8_t buf[8];
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", CFSTR("Status 1"), CFSTR("total"), 0);
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithArray:", objc_msgSend(a1, "allKeys"));
    objc_msgSend(v3, "minusSet:", v2);
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
    if (v4)
    {
      v5 = v4;
      v6 = 0;
      v7 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v3);
          v6 += objc_msgSend((id)objc_msgSend(a1, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i)), "longLongValue");
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
      }
      while (v5);
    }
    else
    {
      v6 = 0;
    }

  }
  else
  {
    v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "Expecting statistics dictionary to calculate unresolved counts, but found nil, returning 0", buf, 2u);
    }
    return 0;
  }
  return v6;
}

id IMDMessageRecordCalculateLocalCloudKitStatistics()
{
  double v0;
  double v1;
  id v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48[5])(void);
  id v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  void (*v54)(uint64_t);
  uint64_t v55;
  uint8_t v56[4];
  double v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  _QWORD v90[24];
  _QWORD v91[24];
  uint8_t buf[16];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v50 = 0;
  v51 = &v50;
  v52 = 0x3052000000;
  v53 = sub_1ABC1A308;
  v54 = sub_1ABC1A318;
  v55 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
    v1 = v0;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    *(_OWORD *)buf = 0u;
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    IMDSqlOperationBeginTransaction(buf);
    v2 = sub_1ABC21B3C((uint64_t)buf, CFSTR("SELECT ck_sync_state, COUNT(*) FROM chat GROUP BY ck_sync_state;"));
    v3 = v2;
    if (v2)
    {
      v39 = objc_msgSend((id)objc_msgSend(v2, "objectForKey:", CFSTR("total")), "longLongValue");
      v47 = objc_msgSend((id)objc_msgSend(v3, "objectForKey:", CFSTR("Status 1")), "longLongValue");
      v46 = sub_1ABC21C8C(v3);
    }
    else
    {
      v39 = 0;
      v46 = 0;
      v47 = 0;
    }
    v7 = sub_1ABC21B3C((uint64_t)buf, CFSTR("SELECT ck_sync_state, COUNT(*) AS total_count FROM message GROUP BY ck_sync_state;"));
    v8 = v7;
    if (v7)
    {
      v45 = objc_msgSend((id)objc_msgSend(v7, "objectForKey:", CFSTR("total")), "longLongValue");
      v44 = objc_msgSend((id)objc_msgSend(v8, "objectForKey:", CFSTR("Status 1")), "longLongValue");
      v43 = sub_1ABC21C8C(v8);
    }
    else
    {
      v44 = 0;
      v45 = 0;
      v43 = 0;
    }
    v9 = sub_1ABC21B3C((uint64_t)buf, CFSTR("SELECT ck_sync_state, COUNT(1) AS total_count FROM attachment GROUP BY ck_sync_state;"));
    v10 = v9;
    if (v9)
    {
      v42 = objc_msgSend((id)objc_msgSend(v9, "objectForKey:", CFSTR("total")), "longLongValue");
      v41 = objc_msgSend((id)objc_msgSend(v10, "objectForKey:", CFSTR("Status 1")), "longLongValue");
      v40 = sub_1ABC21C8C(v10);
    }
    else
    {
      v41 = 0;
      v42 = 0;
      v40 = 0;
    }
    v11 = sub_1ABC21B3C((uint64_t)buf, CFSTR("SELECT ck_sync_state, COUNT(*) AS total_count FROM message WHERE ck_sync_state = 8 AND (service == 'iMessage' OR service == 'SMS') GROUP BY ck_sync_state;"));
    if (v11)
      v38 = objc_msgSend((id)objc_msgSend(v11, "objectForKey:", CFSTR("total")), "longLongValue");
    else
      v38 = 0;
    v12 = sub_1ABC21B3C((uint64_t)buf, CFSTR("SELECT 0, COUNT(*) AS total_count FROM message WHERE syndication_ranges IS NOT NULL AND (synced_syndication_ranges IS NULL OR syndication_ranges != synced_syndication_ranges) AND (service = 'iMessage' OR service = 'SMS');"));
    if (v12)
      v37 = objc_msgSend((id)objc_msgSend(v12, "objectForKey:", CFSTR("total")), "longLongValue");
    else
      v37 = 0;
    v13 = sub_1ABC21B3C((uint64_t)buf, CFSTR("SELECT ck_sync_state, SUM(total_count) AS total_count FROM(SELECT crmj.ck_sync_state, COUNT(*) AS total_count FROM chat_recoverable_message_join AS crmj JOIN chat AS c ON c.ROWID = crmj.chat_id JOIN message AS m ON m.ROWID = crmj.message_id GROUP BY crmj.ck_sync_state UNION ALL SELECT rmp.ck_sync_state, COUNT(1) AS total_count FROM recoverable_message_part AS rmp JOIN chat AS c ON c.ROWID = rmp.chat_id JOIN message AS m ON m.ROWID = rmp.message_id GROUP BY rmp.ck_sync_state);"));
    v14 = v13;
    if (v13)
    {
      v15 = objc_msgSend((id)objc_msgSend(v13, "objectForKey:", CFSTR("total")), "longLongValue");
      v16 = objc_msgSend((id)objc_msgSend(v14, "objectForKey:", CFSTR("Status 1")), "longLongValue");
      v17 = sub_1ABC21C8C(v14);
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
    }
    v18 = sub_1ABC21B3C((uint64_t)buf, CFSTR("SELECT 0, COUNT(*) AS total_count FROM sync_deleted_chats WHERE LENGTH(recordID) > 0;"));
    if (v18)
      v19 = objc_msgSend((id)objc_msgSend(v18, "objectForKey:", CFSTR("total")), "longLongValue");
    else
      v19 = 0;
    v20 = sub_1ABC21B3C((uint64_t)buf, CFSTR("SELECT 0, COUNT(*) AS total_count FROM sync_deleted_messages WHERE LENGTH(recordID) > 0;"));
    if (v20)
      v21 = objc_msgSend((id)objc_msgSend(v20, "objectForKey:", CFSTR("total")), "longLongValue");
    else
      v21 = 0;
    v22 = sub_1ABC21B3C((uint64_t)buf, CFSTR("SELECT 0, COUNT(1) AS total_count FROM sync_deleted_attachments WHERE LENGTH(recordID) > 0;"));
    if (v22)
      v23 = objc_msgSend((id)objc_msgSend(v22, "objectForKey:", CFSTR("total")), "longLongValue");
    else
      v23 = 0;
    v24 = sub_1ABC21B3C((uint64_t)buf, CFSTR("SELECT 0, COUNT(*) AS total_count FROM unsynced_removed_recoverable_messages;"));
    if (v24)
      v25 = objc_msgSend((id)objc_msgSend(v24, "objectForKey:", CFSTR("total")), "longLongValue");
    else
      v25 = 0;
    IMDSqlOperationCommitOrRevertTransaction(buf);
    v49 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v49);
    if (v49)
    {
      v26 = IMLogHandleForCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        *(double *)&v27 = COERCE_DOUBLE(objc_msgSend(v49, "localizedDescription"));
        *(_DWORD *)v56 = 138412290;
        v57 = *(double *)&v27;
        _os_log_impl(&dword_1ABB60000, v26, OS_LOG_TYPE_INFO, "IMDMessageRecordCalculateLocalCloudKitStatistics failed with error: %@", v56, 0xCu);
      }
      v6 = 0;
      goto LABEL_40;
    }
    objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
    v30 = v29;
    v90[0] = CFSTR("chatStats");
    v90[1] = CFSTR("msgStats");
    v91[0] = v3;
    v91[1] = v8;
    v91[2] = v10;
    v31 = *MEMORY[0x1E0D37D48];
    v90[2] = CFSTR("attStats");
    v90[3] = v31;
    v91[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v39);
    v90[4] = *MEMORY[0x1E0D37D28];
    v91[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v47);
    v90[5] = *MEMORY[0x1E0D37CF8];
    v91[5] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v19);
    v90[6] = *MEMORY[0x1E0D37D70];
    v91[6] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v46);
    v90[7] = *MEMORY[0x1E0D37D58];
    v91[7] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v45);
    v90[8] = *MEMORY[0x1E0D37D30];
    v91[8] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v44);
    v90[9] = *MEMORY[0x1E0D37D00];
    v91[9] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v21);
    v90[10] = *MEMORY[0x1E0D37D80];
    v91[10] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v43);
    v90[11] = *MEMORY[0x1E0D37D40];
    v91[11] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v42);
    v90[12] = *MEMORY[0x1E0D37D20];
    v91[12] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v41);
    v90[13] = *MEMORY[0x1E0D37CF0];
    v91[13] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v23);
    v90[14] = *MEMORY[0x1E0D37D68];
    v91[14] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v40);
    v90[15] = *MEMORY[0x1E0D37D60];
    v91[15] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v15);
    v90[16] = *MEMORY[0x1E0D37D38];
    v91[16] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v16);
    v90[17] = *MEMORY[0x1E0D37D08];
    v91[17] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v25);
    v90[18] = *MEMORY[0x1E0D37D88];
    v91[18] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v17);
    v90[19] = *MEMORY[0x1E0D37D10];
    v91[19] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v38);
    v90[20] = *MEMORY[0x1E0D37D18];
    v32 = v44 + v47 + v41 + v16;
    v91[20] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v37);
    v90[21] = *MEMORY[0x1E0D37CE8];
    v33 = v45 + v39 + v42 + v15;
    v91[21] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v32);
    v90[22] = *MEMORY[0x1E0D37D50];
    v91[22] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v33);
    v90[23] = *MEMORY[0x1E0D37D78];
    v91[23] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v43 + v46 + v40 + v17);
    v34 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v91, v90, 24);
    v51[5] = (uint64_t)v34;
    v35 = v34;
    v36 = IMLogHandleForCategory();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v56 = 134222080;
      v57 = v30 - v1;
      v58 = 2048;
      v59 = v32;
      v60 = 2048;
      v61 = v33;
      v62 = 2048;
      v63 = v33 - v32;
      v64 = 2048;
      v65 = v43 + v46 + v40 + v17;
      v66 = 2048;
      v67 = v44;
      v68 = 2048;
      v69 = v45;
      v70 = 2048;
      v71 = v45 - v44;
      v72 = 2048;
      v73 = v43;
      v74 = 2048;
      v75 = v47;
      v76 = 2048;
      v77 = v39;
      v78 = 2048;
      v79 = v39 - v47;
      v80 = 2048;
      v81 = v46;
      v82 = 2048;
      v83 = v41;
      v84 = 2048;
      v85 = v42;
      v86 = 2048;
      v87 = v42 - v41;
      v88 = 2048;
      v89 = v40;
      _os_log_impl(&dword_1ABB60000, v36, OS_LOG_TYPE_INFO, "Calculated sync stats in %f seconds. All Records: %lld of %lld, %lld remaining, %lld unresolved. Messages : %lld of %lld, %lld remaining, %lld unresolved. Chats : %lld of %lld, %lld remaining, %lld unresolved. Attachments : %lld of %lld, %lld remaining, %lld unresolved.", v56, 0xACu);
    }
  }
  else
  {
    v48[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v48[1] = (void (*)(void))3221225472;
    v48[2] = (void (*)(void))sub_1ABC227D0;
    v48[3] = (void (*)(void))&unk_1E5AAF630;
    v48[4] = (void (*)(void))&v50;
    __syncXPCIMDMessageRecordCalculateLocalCloudKitStatistics_IPCAction(v48);
  }
  v4 = IMLogHandleForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = objc_msgSend((id)objc_msgSend((id)v51[5], "description"), "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), &stru_1E5AC1D70);
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "IMDMessageRecordCalculateLocalCloudKitStatistics loaded stats: %@", buf, 0xCu);
  }
  v6 = (id)v51[5];
LABEL_40:
  _Block_object_dispose(&v50, 8);
  return v6;
}

void sub_1ABC22768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1ABC227D0(uint64_t a1, xpc_object_t xdict)
{
  NSObject *v3;
  uint8_t v4[16];

  if (xpc_dictionary_get_value(xdict, "dictionary_result"))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = IMCreateDictionaryFromXPCObjectWithStandardAllowlist();
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Expected dictionary of cloudkit stats is nil 2", v4, 2u);
    }
  }
}

id IMDMessageRecordCalculateTotalCounts()
{
  double v0;
  double v1;
  sqlite3_int64 v2;
  sqlite3_int64 v3;
  sqlite3_int64 v4;
  sqlite3_int64 v5;
  NSObject *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  double v12;
  double v13;
  void *v14;
  id v15;
  NSObject *v16;
  void (*v17[5])(void);
  id v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  uint64_t v24;
  uint8_t buf[4];
  double v26;
  __int16 v27;
  sqlite3_int64 v28;
  __int16 v29;
  sqlite3_int64 v30;
  __int16 v31;
  sqlite3_int64 v32;
  __int16 v33;
  sqlite3_int64 v34;
  __int16 v35;
  sqlite3_int64 v36;
  _QWORD v37[5];
  _QWORD v38[5];
  uint8_t v39[16];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = &v19;
  v21 = 0x3052000000;
  v22 = sub_1ABC1A308;
  v23 = sub_1ABC1A318;
  v24 = 0;
  if (IMDIsRunningInDatabaseServerProcess())
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
    v1 = v0;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    *(_OWORD *)v39 = 0u;
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)v39);
    IMDSqlOperationBeginTransaction(v39);
    v2 = sub_1ABC21AC0((uint64_t)v39, CFSTR("SELECT COUNT(*) FROM chat;"));
    v3 = sub_1ABC21AC0((uint64_t)v39, CFSTR("SELECT COUNT(*) FROM message;"));
    v4 = sub_1ABC21AC0((uint64_t)v39, CFSTR("SELECT COUNT(*) FROM attachment;"));
    v5 = sub_1ABC21AC0((uint64_t)v39, CFSTR("SELECT SUM(total_count) AS total_count FROM(SELECT COUNT(*) AS total_count FROM chat_recoverable_message_join AS crmj JOIN chat AS c ON c.ROWID = crmj.chat_id JOIN message AS m ON m.ROWID = crmj.message_id UNION ALL SELECT COUNT(1) AS total_count FROM recoverable_message_part AS rmp JOIN chat AS c ON c.ROWID = rmp.chat_id JOIN message AS m ON m.ROWID = rmp.message_id);"));
    IMDSqlOperationCommitOrRevertTransaction(v39);
    v18 = 0;
    IMDSqlOperationRelease((uint64_t)v39, &v18);
    if (v18)
    {
      v6 = IMLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(double *)&v7 = COERCE_DOUBLE(objc_msgSend(v18, "localizedDescription"));
        *(_DWORD *)buf = 138412290;
        v26 = *(double *)&v7;
        _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "IMDMessageRecordCalculateLocalCloudKitStatistics failed with error: %@", buf, 0xCu);
      }
      v8 = 0;
      goto LABEL_10;
    }
    objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
    v13 = v12;
    v37[0] = *MEMORY[0x1E0D37D48];
    v38[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v2);
    v37[1] = *MEMORY[0x1E0D37D58];
    v38[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v3);
    v37[2] = *MEMORY[0x1E0D37D40];
    v38[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v4);
    v37[3] = *MEMORY[0x1E0D37D60];
    v38[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v5);
    v37[4] = *MEMORY[0x1E0D37D50];
    v38[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v3 + v2 + v4 + v5);
    v14 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v38, v37, 5);
    v20[5] = (uint64_t)v14;
    v15 = v14;
    v16 = IMLogHandleForCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134219264;
      v26 = v13 - v1;
      v27 = 2048;
      v28 = v3 + v2 + v4 + v5;
      v29 = 2048;
      v30 = v3;
      v31 = 2048;
      v32 = v2;
      v33 = 2048;
      v34 = v4;
      v35 = 2048;
      v36 = v5;
      _os_log_impl(&dword_1ABB60000, v16, OS_LOG_TYPE_INFO, "Calculated total counts in %f seconds. All Records: %lld, Messages: %lld, Chats: %lld, Attachments: %lld, RecoverableMessages: %lld", buf, 0x3Eu);
    }
  }
  else
  {
    v17[0] = (void (*)(void))MEMORY[0x1E0C809B0];
    v17[1] = (void (*)(void))3221225472;
    v17[2] = (void (*)(void))sub_1ABC22CA0;
    v17[3] = (void (*)(void))&unk_1E5AAF630;
    v17[4] = (void (*)(void))&v19;
    __syncXPCIMDMessageRecordCalculateTotalCounts_IPCAction(v17);
  }
  v9 = IMLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = objc_msgSend((id)objc_msgSend((id)v20[5], "description"), "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), &stru_1E5AC1D70);
    *(_DWORD *)v39 = 138412290;
    *(_QWORD *)&v39[4] = v10;
    _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "IMDMessageRecordCalculateTotalCounts loaded totals: %@", v39, 0xCu);
  }
  v8 = (id)v20[5];
LABEL_10:
  _Block_object_dispose(&v19, 8);
  return v8;
}

void sub_1ABC22C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1ABC22CA0(uint64_t a1, xpc_object_t xdict)
{
  NSObject *v3;
  uint8_t v4[16];

  if (xpc_dictionary_get_value(xdict, "dictionary_result"))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = IMCreateDictionaryFromXPCObjectWithStandardAllowlist();
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Expected dictionary of record totals is nil", v4, 2u);
    }
  }
}

uint64_t sub_1ABC22D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id RowsForQuery;
  void *v7;
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint8_t v20[128];
  uint8_t buf[4];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!IMDSqlOperationExecuteQuery(a1, (CFStringRef)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE %@ SET ck_sync_state = 0;"),
                         a2),
          0))
    return 0;
  v19 = 0;
  RowsForQuery = _IMDSqlOperationGetRowsForQuery((const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT ROWID from %@ LIMIT %lld"), a2, a3), &v19);
  v7 = RowsForQuery;
  if (v19)
  {
    v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v22 = v19;
      _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "_IMDMessageRecordSetSyncCountOnTable got error: %@", buf, 0xCu);
    }

    return 0;
  }
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v11 = objc_msgSend(RowsForQuery, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v16;
LABEL_10:
    v14 = 0;
    while (1)
    {
      if (*(_QWORD *)v16 != v13)
        objc_enumerationMutation(v7);
      v9 = IMDSqlOperationExecuteQuery(a1, (CFStringRef)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE %@ SET ck_sync_state = 1 WHERE ROWID = %lld;"),
                            a2,
                            objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * v14), "objectForKey:", CFSTR("ROWID")), "longLongValue")), 0);
      if (!v9)
        break;
      if (v12 == ++v14)
      {
        v12 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
        if (v12)
          goto LABEL_10;
        break;
      }
    }

  }
  else
  {

    return 1;
  }
  return v9;
}

void _IMDMessageRecordSetCloudKitSyncCounts(void *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  id v11;
  uint8_t v12[4];
  uint64_t v13;
  _OWORD buf[11];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = IMLogHandleForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 138412290;
    *(_QWORD *)((char *)buf + 4) = objc_msgSend((id)objc_msgSend(a1, "description"), "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), &stru_1E5AC1D70);
    _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Write cloudkit sync counts: %@", (uint8_t *)buf, 0xCu);
  }
  if (IMDIsRunningInDatabaseServerProcess())
  {
    v3 = objc_msgSend((id)objc_msgSend(a1, "objectForKey:", *MEMORY[0x1E0D37D30]), "longLongValue");
    v4 = objc_msgSend((id)objc_msgSend(a1, "objectForKey:", *MEMORY[0x1E0D37D28]), "longLongValue");
    v5 = objc_msgSend((id)objc_msgSend(a1, "objectForKey:", *MEMORY[0x1E0D37D20]), "longLongValue");
    v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134218496;
      *(_QWORD *)((char *)buf + 4) = v3;
      WORD6(buf[0]) = 2048;
      *(_QWORD *)((char *)buf + 14) = v4;
      WORD3(buf[1]) = 2048;
      *((_QWORD *)&buf[1] + 1) = v5;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "setting new stats: messageSyncCount: %lld, chatSyncCount: %lld, attachmentCount: %lld", (uint8_t *)buf, 0x20u);
    }
    memset(buf, 0, sizeof(buf));
    IMDSqlOperationInitWithSharedCSDBDatabase((uint64_t)buf);
    IMDSqlOperationBeginTransaction(buf);
    sub_1ABC22D40((uint64_t)buf, (uint64_t)CFSTR("message"), v3);
    sub_1ABC22D40((uint64_t)buf, (uint64_t)CFSTR("chat"), v4);
    sub_1ABC22D40((uint64_t)buf, (uint64_t)CFSTR("attachment"), v5);
    IMDSqlOperationCommitOrRevertTransaction(buf);
    v11 = 0;
    IMDSqlOperationRelease((uint64_t)buf, &v11);
    if (v11)
    {
      v7 = IMLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1ABC6314C(&v11, v7);
    }
    v8 = IMDMessageRecordCalculateLocalCloudKitStatistics();
    v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = objc_msgSend((id)objc_msgSend(v8, "description"), "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), &stru_1E5AC1D70);
      *(_DWORD *)v12 = 138412290;
      v13 = v10;
      _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "new stats: %@", v12, 0xCu);
    }
  }
  else
  {
    __syncXPCIMDMessageRecordSetCloudKitSyncCounts_IPCAction(0);
  }
}

uint64_t IMDMessageRecordCopyMessagesWithReplyToGUIDs(void *a1)
{
  NSObject *v2;
  uint64_t v3;
  void (*v5[5])(void);
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (objc_msgSend(a1, "length"))
  {
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 0;
    if (IMDIsRunningInDatabaseServerProcess())
    {
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = sub_1ABC23344;
      v6[3] = &unk_1E5AB0D30;
      v6[4] = a1;
      v6[5] = &v7;
      _IMDPerformLockedStatementBlockWithQuery((uint64_t)CFSTR("SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info, ck_sync_state, ck_record_id, ck_record_change_tag, destination_caller_id, is_corrupt, reply_to_guid, sort_id, is_spam, has_unseen_mention, thread_originator_guid, thread_originator_part, syndication_ranges, synced_syndication_ranges, was_delivered_quietly, did_notify_recipient, date_retracted, date_edited, was_detonated, part_count, is_stewie, is_sos, is_critical, bia_reference_id, is_kt_verified, fallback_hash, associated_message_emoji, is_pending_satellite_send, needs_relay, schedule_type, schedule_state, sent_or_received_off_grid FROM message WHERE reply_to_guid = ?;"),
        (uint64_t)v6);
    }
    else
    {
      v5[0] = (void (*)(void))MEMORY[0x1E0C809B0];
      v5[1] = (void (*)(void))3221225472;
      v5[2] = (void (*)(void))sub_1ABC233A8;
      v5[3] = (void (*)(void))&unk_1E5AAF630;
      v5[4] = (void (*)(void))&v7;
      __syncXPCIMDMessageRecordCopyMessagesWithReplyToGUIDs_IPCAction(v5, a1);
    }
    v3 = v8[3];
    _Block_object_dispose(&v7, 8);
  }
  else
  {
    v2 = IMLogHandleForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1ABC631D0();
    return 0;
  }
  return v3;
}

void sub_1ABC23328(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

__CFArray *sub_1ABC23344(uint64_t a1)
{
  const __CFArray *v2;
  __CFArray *result;

  CSDBSqliteBindTextFromCFString();
  v2 = (const __CFArray *)CSDBRecordStoreProcessStatement();
  result = sub_1ABC1E29C(v2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1ABC233A8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result;
  void *v4;
  CFMutableArrayRef Mutable;
  _QWORD applier[5];

  result = (uint64_t)xpc_dictionary_get_value(xdict, "array_result");
  if (result)
  {
    v4 = (void *)result;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = sub_1ABC23458;
    applier[3] = &unk_1E5AB5E88;
    applier[4] = Mutable;
    result = xpc_array_apply(v4, applier);
  }
  else
  {
    Mutable = 0;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = Mutable;
  return result;
}

uint64_t sub_1ABC23458(uint64_t a1, uint64_t a2, void *a3)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)_IMDCopyIMDMessageRecordFromXPCObjectClient(a3);
  if (v4)
  {
    v5 = v4;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v4);
    CFRelease(v5);
  }
  return 1;
}

BOOL sub_1ABC2349C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v12;
  _QWORD v14[10];
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138413314;
      v16 = a2;
      v17 = 2112;
      v18 = a3;
      v19 = 2112;
      v20 = a4;
      v21 = 2048;
      v22 = a5;
      v23 = 2112;
      v24 = a6;
      _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "Performing threaded history query ref msg: %@ originator guid: %@ part: %@ limit: %llu results: %@", buf, 0x34u);
    }
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1ABC235F0;
  v14[3] = &unk_1E5ABF260;
  v14[6] = a3;
  v14[7] = a4;
  v14[8] = a2;
  v14[9] = a5;
  v14[4] = a6;
  v14[5] = a1;
  return IMDRunSqlOperation((uint64_t)v14);
}

BOOL sub_1ABC235F0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  const __CFString *v6;
  _QWORD v8[6];
  _QWORD v9[5];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 40))
  {
    v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1ABC631FC();
  }
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1ABC236C8;
  v9[3] = &unk_1E5ABF238;
  v9[4] = a2;
  v10 = *(_OWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = v5;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABC2371C;
  v8[3] = &unk_1E5AB2098;
  v6 = *(const __CFString **)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v8[5] = a2;
  return _IMDSqlOperationRunQuery(a2, v6, (uint64_t)v9, (uint64_t)v8);
}

void sub_1ABC236C8(uint64_t a1)
{
  IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 32) + 32, *(_QWORD *)(a1 + 40));
  IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 32) + 32, *(_QWORD *)(a1 + 48));
  IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 32) + 32, *(_QWORD *)(a1 + 56));
  IMDSqlStatementBindInt(*(_QWORD *)(a1 + 32) + 32, *(_DWORD *)(a1 + 64));
}

BOOL sub_1ABC2371C(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      v5[2] = sub_1ABC237A4;
      v5[3] = &unk_1E5AB7420;
      v4 = *(_QWORD *)(a1 + 40);
      v5[4] = *(_QWORD *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

uint64_t sub_1ABC237A4(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", IMDInt64FromSqlColumn((uint64_t)&v3)));
}

BOOL sub_1ABC23800(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2388C;
  v6[3] = &unk_1E5AB2248;
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v6[4] = a2;
  v6[5] = v2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC23898;
  v5[3] = &unk_1E5AB2098;
  v5[4] = v3;
  v5[5] = a2;
  return _IMDSqlOperationRunQuery(a2, CFSTR("SELECT   m.ROWID FROM   message m WHERE   m.associated_message_guid = ?  AND m.thread_originator_guid IS NULL"), (uint64_t)v6, (uint64_t)v5);
}

void sub_1ABC2388C(uint64_t a1)
{
  IMDSqlStatementBindTextFromCFString(*(_QWORD *)(a1 + 32) + 32, *(_QWORD *)(a1 + 40));
}

BOOL sub_1ABC23898(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v5[0] = v3;
      v5[1] = 3221225472;
      v5[2] = sub_1ABC23920;
      v5[3] = &unk_1E5AB7420;
      v4 = *(_QWORD *)(a1 + 40);
      v5[4] = *(_QWORD *)(a1 + 32);
      IMDSqlOperationIterateRow(v4, (uint64_t)v5);
      result = IMDSqlOperationHasRows(*(_QWORD *)(a1 + 40));
    }
    while (result);
  }
  return result;
}

uint64_t sub_1ABC23920(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", IMDInt64FromSqlColumn((uint64_t)&v3)));
}

uint64_t sub_1ABC2397C(uint64_t a1)
{
  uint64_t result;

  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  CSDBSqliteBindInt();
  result = CSDBRecordStoreProcessStatement();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1ABC239F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const __CFAllocator *v4;
  const unsigned __int8 *v5;
  CFStringRef v6;
  CFStringRef v7;

  if (CSDBSqliteDatabaseConnectionForReading())
  {
    v2 = CSDBSqliteConnectionStatementForSQL();
    if (v2)
    {
      v3 = v2;
      if (*(_QWORD *)(v2 + 8))
      {
        CSDBSqliteBindTextFromCFString();
        if (sqlite3_step(*(sqlite3_stmt **)(v3 + 8)) == 100)
        {
          v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          do
          {
            if (sqlite3_column_text(*(sqlite3_stmt **)(v3 + 8), 0))
            {
              v5 = sqlite3_column_text(*(sqlite3_stmt **)(v3 + 8), 0);
              v6 = CFStringCreateWithCString(v4, (const char *)v5, 0x8000100u);
              if (v6)
              {
                v7 = v6;
                CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v6);
                CFRelease(v7);
              }
            }
          }
          while (sqlite3_step(*(sqlite3_stmt **)(v3 + 8)) == 100);
        }
        CSDBSqliteStatementReset();
      }
    }
    CSDBSqliteDatabaseReleaseSqliteConnection();
  }
  CFRelease(CFSTR("SELECT   m.guid FROM   message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id INNER JOIN chat c ON   c.ROWID = cm.chat_id WHERE   m.is_from_me = 0   AND m.is_played = 0   AND m.is_audio_message = 1   AND c.guid = ? ORDER BY m.ROWID ASC"));
  CSDBRecordSaveStore();
  return CSDBRecordStoreInvalidateCachesWithStore();
}

void sub_1ABC23AFC(uint64_t a1)
{
  const __CFAllocator *v2;
  void *v3;
  CFStringRef v4;
  CFStringRef v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  sqlite3_int64 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = IMDGenerateInClauseForCount(*(_DWORD *)(a1 + 48));
  v4 = CFStringCreateWithFormat(v2, 0, CFSTR("SELECT   message_id FROM chat_recoverable_message_join WHERE message_id in (SELECT rowid FROM message INDEXED BY message_idx_isRead_isFromMe_itemType  WHERE (is_read == 0     AND is_finished == 1     AND is_from_me == 0     AND item_type == 0     AND is_system_message == 0)) AND chat_id %@"), v3);
  if (v4)
  {
    v5 = v4;
    if (CSDBSqliteDatabaseConnectionForReading())
    {
      v6 = CSDBSqliteConnectionStatementForSQL();
      if (v6)
      {
        v7 = v6;
        if (*(_QWORD *)(v6 + 8))
        {
          v16 = 0u;
          v17 = 0u;
          v14 = 0u;
          v15 = 0u;
          v8 = *(void **)(a1 + 32);
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
          if (v9)
          {
            v10 = v9;
            v11 = *(_QWORD *)v15;
            do
            {
              for (i = 0; i != v10; ++i)
              {
                if (*(_QWORD *)v15 != v11)
                  objc_enumerationMutation(v8);
                objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * i), "integerValue");
                CSDBSqliteBindInt64();
              }
              v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
            }
            while (v10);
          }
          while (sqlite3_step(*(sqlite3_stmt **)(v7 + 8)) == 100)
          {
            v13 = sqlite3_column_int64(*(sqlite3_stmt **)(v7 + 8), 0);
            if (v13 != -1)
              objc_msgSend(*(id *)(a1 + 40), "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v13));
          }
          CSDBSqliteStatementReset();
        }
      }
      CSDBSqliteDatabaseReleaseSqliteConnection();
    }
    CFRelease(v5);
  }
}

uint64_t sub_1ABC23CC8(uint64_t a1)
{
  const __CFAllocator *v2;
  const char *v3;
  void *v4;
  CFStringRef v5;
  CFStringRef v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  sqlite3_int64 v13;
  uint64_t v14;
  void *v15;
  CFStringRef v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  uint64_t v35;
  _BYTE v36[128];
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*(_BYTE *)(a1 + 80))
    v3 = " AND rowid <= ?";
  else
    v3 = "";
  v4 = IMDGenerateInClauseForCount(*(_DWORD *)(a1 + 56));
  v5 = CFStringCreateWithFormat(v2, 0, CFSTR("SELECT   message_id FROM chat_message_join WHERE message_id in (SELECT rowid FROM message INDEXED BY message_idx_isRead_isFromMe_itemType  WHERE (is_read == 0     AND is_finished == 1     AND is_from_me == 0     AND (item_type == 0         OR item_type == 1)     AND is_system_message == 0     %s)) AND chat_id %@"), v3, v4);
  if (v5)
  {
    v6 = v5;
    objc_msgSend(*(id *)(a1 + 32), "startTimingForKey:", CFSTR("Query1"));
    if (CSDBSqliteDatabaseConnectionForReading())
    {
      v7 = CSDBSqliteConnectionStatementForSQL();
      if (v7)
      {
        v8 = v7;
        if (*(_QWORD *)(v7 + 8))
        {
          if (*(_BYTE *)(a1 + 80))
            CSDBSqliteBindInt64();
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          v9 = *(void **)(a1 + 40);
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v30, v37, 16);
          if (v10)
          {
            v11 = *(_QWORD *)v31;
            do
            {
              for (i = 0; i != v10; ++i)
              {
                if (*(_QWORD *)v31 != v11)
                  objc_enumerationMutation(v9);
                objc_msgSend(*(id *)(*((_QWORD *)&v30 + 1) + 8 * i), "integerValue");
                CSDBSqliteBindInt64();
              }
              v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v30, v37, 16);
            }
            while (v10);
          }
          while (sqlite3_step(*(sqlite3_stmt **)(v8 + 8)) == 100)
          {
            v13 = sqlite3_column_int64(*(sqlite3_stmt **)(v8 + 8), 0);
            if (v13 != -1)
              objc_msgSend(*(id *)(a1 + 48), "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v13));
          }
          CSDBSqliteStatementReset();
        }
      }
      CSDBSqliteDatabaseReleaseSqliteConnection();
    }
    CFRelease(v6);
    objc_msgSend(*(id *)(a1 + 32), "stopTimingForKey:", CFSTR("Query1"));
  }
  v14 = objc_msgSend(*(id *)(a1 + 48), "count");
  if (v14 < 1)
  {
    if (IMOSLoggingEnabled())
    {
      v19 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v20 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        v35 = v20;
        _os_log_impl(&dword_1ABB60000, v19, OS_LOG_TYPE_INFO, "Query results were null or empty bulk reading messages for %@", buf, 0xCu);
      }
    }
  }
  else
  {
    v15 = IMDGenerateInClauseForCount(v14);
    v16 = CFStringCreateWithFormat(v2, 0, CFSTR("UPDATE   message SET   is_read = 1,   date_read = ? WHERE rowid %@"), v15);
    if (v16)
    {
      objc_msgSend(*(id *)(a1 + 32), "startTimingForKey:", CFSTR("Query2-Update"));
      v17 = CSDBSqliteDatabaseStatementForWriting();
      if (v17 && *(_QWORD *)(v17 + 8))
      {
        v18 = *(void **)(a1 + 72);
        if (v18)
          objc_msgSend(v18, "__im_nanosecondTimeInterval");
        else
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "date"), "__im_nanosecondTimeInterval");
        CSDBSqliteBindInt64();
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v21 = *(void **)(a1 + 48);
        v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v26, v36, 16);
        if (v22)
        {
          v23 = *(_QWORD *)v27;
          do
          {
            for (j = 0; j != v22; ++j)
            {
              if (*(_QWORD *)v27 != v23)
                objc_enumerationMutation(v21);
              objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * j), "integerValue");
              CSDBSqliteBindInt64();
            }
            v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v26, v36, 16);
          }
          while (v22);
        }
        CSDBSqliteStatementPerform();
        CSDBSqliteStatementReset();
      }
      CFRelease(v16);
      objc_msgSend(*(id *)(a1 + 32), "stopTimingForKey:", CFSTR("Query2-Update"));
    }
  }
  CSDBRecordSaveStore();
  return CSDBRecordStoreInvalidateCachesWithStore();
}

uint64_t sub_1ABC240B8(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = CSDBSqliteDatabaseStatementForWriting();
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = *(void **)(a1 + 48);
    if (!v3)
      v3 = (void *)objc_msgSend(MEMORY[0x1E0C99D68], "date");
    objc_msgSend(v3, "__im_nanosecondTimeInterval");
    CSDBSqliteBindInt64();
    CSDBSqliteBindInt64();
    CSDBSqliteStatementPerform();
    CSDBSqliteStatementReset();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  CSDBRecordSaveStore();
  return CSDBRecordStoreInvalidateCachesWithStore();
}

void sub_1ABC24158(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  NSObject *v5;

  _os_log_error_impl(a1, v5, OS_LOG_TYPE_ERROR, a4, a5, 0x26u);
}

void sub_1ABC24168(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x26u);
}

uint64_t sub_1ABC24174@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  *(_DWORD *)(a2 + 24) = a3;
  *(_WORD *)(a2 + 28) = 2112;
  *(_QWORD *)(a2 + 30) = result;
  return result;
}

void sub_1ABC24188(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a1 + 14) = a2;
  *(_WORD *)(a1 + 22) = 1024;
}

void sub_1ABC24198(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
}

void sub_1ABC242C0(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "_createDataProviders", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_msgSend(v8, "typeIdentifier");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, v9);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

  v10 = objc_msgSend(v2, "copy");
  v11 = (void *)qword_1EEC405F0;
  qword_1EEC405F0 = v10;

}

void *IMDCreateIMItemFromIMDMessageRecordRefWithAccountLookup(const __CFArray **a1, void *a2, char a3, uint64_t a4)
{
  return IMDCreateIMItemFromIMDMessageRecordRefCopyAttachmentsIfNeededWithAccountLookup(a1, a2, a3, 1, a4);
}

void *IMDCreateIMItemFromIMDMessageRecordRefCopyAttachmentsIfNeededWithAccountLookup(const __CFArray **a1, void *a2, char a3, int a4, uint64_t a5)
{
  id v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  const __CFArray *v18;
  const __CFArray *v19;
  id v20;
  CFIndex v21;
  uint64_t v22;
  const void *ValueAtIndex;
  const void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  id v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  IMDRemoteDatabaseProtocol *v72;
  uint64_t v73;
  void *v74;
  const __CFString *v75;
  __CFString *v76;
  id v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  id v83;
  id v84;
  uint64_t v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  id v107;
  id v108;
  void *v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  void *ThreadIdentifierWithComponents;
  void *v118;
  _QWORD v119[5];
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t);
  void (*v124)(uint64_t);
  uint64_t v125;
  const void *v126;
  const void *v127;
  id v128;
  id v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  id v134;
  id v135;
  id v136;
  uint64_t v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  const void *v143;
  id v144;
  uint64_t v145;
  id v146;
  id v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  id v153;
  id v154;
  id v155;
  id v156;
  id v157;
  CFNumberRef v158;
  id v159;
  id v160;
  id v161;
  id v162;
  __int16 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;

  if (!a1)
    return 0;
  v178 = 0;
  v179 = 0;
  v176 = 0;
  v177 = 0;
  v174 = 0;
  v175 = 0;
  v172 = 0;
  v173 = 0;
  v170 = 0;
  v171 = 0;
  v168 = 0;
  v169 = 0;
  v166 = 0;
  v167 = 0;
  v164 = 0;
  v165 = 0;
  v163 = 0;
  v161 = 0;
  v162 = 0;
  v159 = 0;
  v160 = 0;
  v158 = 0;
  v157 = 0;
  v156 = 0;
  v155 = 0;
  v154 = 0;
  v153 = 0;
  v152 = 0;
  v151 = 0;
  v150 = 0;
  v149 = 0;
  v148 = 0;
  v147 = 0;
  v146 = 0;
  v145 = 0;
  v144 = 0;
  v143 = 0;
  v142 = 0;
  v141 = 0;
  v140 = 0;
  v139 = 0;
  v138 = 0;
  v137 = 0;
  v136 = 0;
  v135 = 0;
  v134 = 0;
  v133 = 0;
  v132 = 0;
  v131 = 0;
  v130 = 0;
  v129 = 0;
  v128 = 0;
  v127 = 0;
  v126 = 0;
  IMDMessageRecordBulkCopy((uint64_t)a1, &v170, &v175, &v174, &v161, &v178, &v179, &v177, &v176, &v160, &v159, &v158, &v157, &v156, &v155, (const void **)&v171, &v154, &v172, &v173,
    (_BYTE *)&v163 + 1,
    &v163,
    &v162,
    &v169,
    &v153,
    &v168,
    &v167,
    &v166,
    &v165,
    &v164,
    &v152,
    &v151,
    &v149,
    &v148,
    &v147,
    &v146,
    &v145,
    &v144,
    &v143,
    &v142,
    (uint64_t)&v141,
    &v140,
    &v139,
    &v138,
    &v137,
    &v136,
    &v135,
    &v134,
    &v133,
    &v132,
    &v131,
    &v130,
    &v129,
    &v128,
    &v127,
    &v126);
  v116 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v175);
  v115 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v174);
  v106 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v173);
  v114 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v172);
  ThreadIdentifierWithComponents = 0;
  v105 = v137;
  if (v136 && v135)
    ThreadIdentifierWithComponents = (void *)IMMessageCreateThreadIdentifierWithComponents();
  if (v178)
    v108 = (id)objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v178);
  else
    v108 = 0;
  if (v179)
    v10 = (id)objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v179);
  else
    v10 = 0;
  if (v177)
    v113 = (id)objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v177);
  else
    v113 = 0;
  if (v176)
    v112 = (id)objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v176);
  else
    v112 = 0;
  if (v145)
    v111 = (id)objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v145);
  else
    v111 = 0;
  if (v131)
  {
    v107 = (id)objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v131);
    if (a2)
    {
LABEL_22:
      v11 = a2;
      goto LABEL_28;
    }
  }
  else
  {
    v107 = 0;
    if (a2)
      goto LABEL_22;
  }
  if (v171 >= 1)
  {
    v12 = IMDMessageRecordCopyHandle(a1);
    if (v12)
    {
      v13 = *MEMORY[0x1E0C9AE00];
      v11 = (id)IMDHandleRecordCopyID(*MEMORY[0x1E0C9AE00], (uint64_t)v12);
      v118 = (void *)IMDHandleRecordCopyUncanonicalizedID(v13, (uint64_t)v12);
      v14 = IMDHandleRecordCopyCountry(v13, (uint64_t)v12);
      CFRelease(v12);
      goto LABEL_29;
    }
  }
  v11 = 0;
LABEL_28:
  v118 = 0;
  v14 = 0;
LABEL_29:
  if (v169 >= 1 && (v15 = IMDMessageRecordCopyOtherHandle(a1)) != 0)
  {
    v16 = *MEMORY[0x1E0C9AE00];
    v104 = IMDHandleRecordCopyID(*MEMORY[0x1E0C9AE00], (uint64_t)v15);
    v103 = IMDHandleRecordCopyUncanonicalizedID(v16, (uint64_t)v15);
    v102 = IMDHandleRecordCopyCountry(v16, (uint64_t)v15);
    CFRelease(v15);
  }
  else
  {
    v104 = 0;
    v102 = 0;
    v103 = 0;
  }
  if (v173 == 1
    && (v17 = (void *)objc_msgSend(v162, "componentsSeparatedByString:", CFSTR(",")), objc_msgSend(v17, "count")))
  {
    v110 = (id)objc_msgSend(v17, "objectAtIndex:", 0);
  }
  else
  {
    v110 = 0;
  }
  if (v162)
  {
    CFRelease(v162);
    v162 = 0;
  }
  if (a4
    && (HIBYTE(v163) || (a3 & 1) == 0)
    && (v18 = (const __CFArray *)IMDMessageRecordCopyAttachments((uint64_t)a1), (v19 = v18) != 0))
  {
    if ((int)CFArrayGetCount(v18) < 1)
    {
      v20 = 0;
    }
    else
    {
      v20 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v21 = 0;
      v22 = *MEMORY[0x1E0C9AE00];
      while (v21 < (int)CFArrayGetCount(v19))
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v19, v21);
        v24 = (const void *)IMDAttachmentRecordCopyGUID(v22, (uint64_t)ValueAtIndex);
        if (v24)
        {
          objc_msgSend(v20, "addObject:", v24);
          CFRelease(v24);
        }
        ++v21;
      }
    }
    CFRelease(v19);
  }
  else
  {
    v20 = 0;
  }
  v25 = v157;
  if (a5)
  {
    v26 = (*(uint64_t (**)(uint64_t, id, id, id))(a5 + 16))(a5, v155, v156, v157);
    if (v26)
    {
      v27 = (void *)v26;

      v156 = (id)objc_msgSend(v27, "loginID");
      v155 = (id)objc_msgSend(v27, "accountID");
    }
  }
  v109 = v10;
  v101 = v20;
  switch(v170)
  {
    case 0:
      v28 = MEMORY[0x1AF435474]();
      v29 = -[__CFNumber unsignedLongLongValue](v158, "unsignedLongLongValue");
      v30 = 0;
      if ((v29 & 4) == 0 && v11)
        v30 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v11, *MEMORY[0x1E0D36D90]);
      v97 = v30;
      if (v144)
        v96 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithMessageSummaryInfoData:");
      else
        v96 = 0;
      v95 = (void *)v28;
      v98 = (void *)v14;
      v100 = v11;
      if (v152)
      {
        v92 = objc_alloc(MEMORY[0x1E0D396C8]);
        v90 = v159;
        v55 = -[__CFNumber unsignedLongLongValue](v158, "unsignedLongLongValue");
        v86 = v161;
        v88 = v55;
        v56 = objc_msgSend(v116, "longLongValue");
        v57 = v156;
        v58 = v155;
        v59 = v165;
        v60 = v148;
        v61 = v147;
        v62 = v146;
        LODWORD(v79) = objc_msgSend(v114, "unsignedIntValue");
        v78 = v61;
        v33 = v108;
        v34 = (void *)objc_msgSend(v92, "initWithSenderInfo:time:timeRead:timeDelivered:timePlayed:subject:body:bodyData:attributes:fileTransferGUIDs:flags:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:expireState:balloonBundleID:payloadData:expressiveSendStyleID:timeExpressiveSendPlayed:errorType:associatedMessageGUID:associatedMessageType:associatedMessageRange:associatedMessageEmoji:bizIntent:locale:biaReferenceID:messageSummaryInfo:partCount:threadIdentifier:scheduleType:scheduleState:", v97, 0, v90, 0, v20, v88, v86, v56, v57, v58, v25, v100, v110,
                        v118,
                        v98,
                        v59,
                        v60,
                        v78,
                        v62,
                        v111,
                        v79,
                        v152,
                        v151,
                        v149,
                        v150,
                        v128,
                        0,
                        0,
                        v130,
                        v96,
                        v132,
                        ThreadIdentifierWithComponents,
                        v127,
                        v126);
      }
      else
      {
        v93 = objc_alloc(MEMORY[0x1E0D39918]);
        v94 = v154;
        v91 = v159;
        v64 = -[__CFNumber unsignedLongLongValue](v158, "unsignedLongLongValue");
        v87 = v161;
        v89 = v64;
        v65 = objc_msgSend(v116, "longLongValue");
        v84 = v156;
        v85 = v65;
        v82 = v165;
        v83 = v155;
        v81 = v148;
        v66 = v147;
        v67 = v146;
        v68 = v130;
        v69 = objc_msgSend(v114, "unsignedIntValue");
        v70 = objc_msgSend(MEMORY[0x1E0D39948], "rangesFromSerializedString:", v134);
        v71 = objc_msgSend(MEMORY[0x1E0D39948], "rangesFromSerializedString:", v133);
        LODWORD(v80) = v69;
        v34 = (void *)objc_msgSend(v93, "initWithSenderInfo:time:timeRead:timeDelivered:timePlayed:subject:body:bodyData:attributes:fileTransferGUIDs:flags:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:expireState:balloonBundleID:payloadData:expressiveSendStyleID:timeExpressiveSendPlayed:bizIntent:locale:biaReferenceID:errorType:threadIdentifier:syndicationRanges:syncedSyndicationRanges:partCount:dateEdited:scheduleType:scheduleState:", v97, v108, v109, v113, v112, v94, 0, v91, 0, v20, v89, v87, v85,
                        v84,
                        v83,
                        v25,
                        v100,
                        v110,
                        v118,
                        v98,
                        v82,
                        v81,
                        v66,
                        v67,
                        v111,
                        0,
                        0,
                        v68,
                        v80,
                        ThreadIdentifierWithComponents,
                        v70,
                        v71,
                        v132,
                        v107,
                        v127,
                        v126);
        if (objc_msgSend(v34, "isReply"))
        {
          v120 = 0;
          v121 = &v120;
          v122 = 0x3052000000;
          v123 = sub_1ABC25724;
          v124 = sub_1ABC25734;
          v125 = 0;
          v72 = +[IMDDatabase synchronousDatabase](IMDDatabase, "synchronousDatabase");
          v119[0] = MEMORY[0x1E0C809B0];
          v119[1] = 3221225472;
          v119[2] = sub_1ABC25740;
          v119[3] = &unk_1E5AB7658;
          v119[4] = &v120;
          -[IMDRemoteDatabaseProtocol fetchMessageRecordWithGUID:excludeRecoverableMessages:completionHandler:](v72, "fetchMessageRecordWithGUID:excludeRecoverableMessages:completionHandler:", v136, 1, v119);
          v73 = v121[5];
          if (v73)
          {
            v74 = (void *)IMDCreateIMItemFromIMDMessageRecordRefCopyAttachmentsIfNeededWithAccountLookup(v73, 0, 1, 1, a5);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              objc_msgSend(v34, "setThreadOriginator:", v74);

          }
          _Block_object_dispose(&v120, 8);
        }
        if (v96)
          objc_msgSend(v34, "setMessageSummaryInfo:");
        v33 = v108;
      }
      objc_msgSend(v34, "setDestinationCallerID:", v139);
      objc_msgSend(v34, "setThreadIdentifier:", ThreadIdentifierWithComponents);
      objc_msgSend(v34, "setReplaceID:", objc_msgSend(v115, "longLongValue"));
      objc_msgSend(v34, "setFallbackHash:", v129);
      v75 = IMDMessageRecordCopyThreadCountsByPart((uint64_t)a1);
      if (v75)
      {
        v76 = (__CFString *)v75;
        objc_msgSend(v34, "setReplyCountsByPart:", v75);

      }
      v42 = v106;
      v41 = v114;
      v39 = v105;
      if (!objc_msgSend(v20, "count")
        && objc_msgSend(v160, "length")
        && (objc_msgSend(v34, "hasDataDetectorResults") & 1) == 0)
      {
        objc_msgSend(v34, "setPlainBody:", v160);
      }
      if ((objc_msgSend(v34, "flags") & 4) == 0 && !objc_msgSend(v34, "sender")
        || (objc_msgSend(v34, "isFromMe") & 1) == 0 && !objc_msgSend(v34, "sender")
        || !objc_msgSend((id)objc_msgSend(v34, "guid"), "length"))
      {

        v34 = 0;
      }
      objc_autoreleasePoolPop(v95);
      v32 = v98;
      v40 = v100;
      goto LABEL_102;
    case 1:
      v51 = v10;
      v32 = (void *)v14;
      v99 = v11;
      v33 = v108;
      v34 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D399A8]), "initWithSender:time:guid:type:", v11);
      if (v144)
        v52 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithMessageSummaryInfoData:");
      else
        v52 = 0;
      v41 = v114;
      objc_msgSend(v34, "setChangeType:", v168);
      objc_msgSend(v34, "setUnformattedID:", v118);
      objc_msgSend(v34, "setCountryCode:", v32);
      v36 = (void *)v104;
      objc_msgSend(v34, "setOtherHandle:", v104);
      v37 = (void *)v103;
      objc_msgSend(v34, "setOtherUnformattedID:", v103);
      v38 = (void *)v102;
      objc_msgSend(v34, "setOtherCountryCode:", v102);
      objc_msgSend(v34, "setService:", v25);
      objc_msgSend(v34, "setAccount:", v156);
      objc_msgSend(v34, "setAccountID:", v155);
      objc_msgSend(v34, "_setMessageID:", v175);
      objc_msgSend(v34, "setDestinationCallerID:", v139);
      objc_msgSend(v34, "setReplyToGUID:", v138);
      v39 = v105;
      objc_msgSend(v34, "setSortID:", v105);
      objc_msgSend(v34, "setErrorCode:", objc_msgSend(v114, "unsignedIntValue"));
      objc_msgSend(v34, "setMessageSummaryInfo:", v52);
      objc_msgSend(v34, "setTimeRead:", v51);
      v42 = v106;
      v40 = v99;
      break;
    case 2:
      v31 = objc_alloc(MEMORY[0x1E0D39870]);
      v32 = (void *)v14;
      v33 = v108;
      v34 = (void *)objc_msgSend(v31, "initWithSender:time:guid:type:", v11, v108, v161, 2);
      objc_msgSend(v34, "setTitle:", v153);
      goto LABEL_61;
    case 3:
      v35 = objc_alloc(MEMORY[0x1E0D39860]);
      v32 = (void *)v14;
      v33 = v108;
      v34 = (void *)objc_msgSend(v35, "initWithSender:time:guid:type:", v11, v108, v161, 3);
      objc_msgSend(v34, "setActionType:", v168);
LABEL_61:
      objc_msgSend(v34, "setUnformattedID:", v118);
      objc_msgSend(v34, "setCountryCode:", v32);
      v36 = (void *)v104;
      objc_msgSend(v34, "setOtherHandle:", v104);
      v37 = (void *)v103;
      objc_msgSend(v34, "setOtherUnformattedID:", v103);
      v38 = (void *)v102;
      objc_msgSend(v34, "setOtherCountryCode:", v102);
      objc_msgSend(v34, "setService:", v25);
      objc_msgSend(v34, "setAccount:", v156);
      objc_msgSend(v34, "setAccountID:", v155);
      objc_msgSend(v34, "_setMessageID:", v175);
      objc_msgSend(v34, "setDestinationCallerID:", v139);
      objc_msgSend(v34, "setReplyToGUID:", v138);
      v39 = v105;
      objc_msgSend(v34, "setSortID:", v105);
      v40 = v11;
      v41 = v114;
      objc_msgSend(v34, "setErrorCode:", objc_msgSend(v114, "unsignedIntValue"));
      v42 = v106;
      break;
    case 4:
      v43 = objc_alloc(MEMORY[0x1E0D398C8]);
      v32 = (void *)v14;
      v33 = v108;
      v34 = (void *)objc_msgSend(v43, "initWithSender:time:guid:type:", v11, v108, v161, 4);
      objc_msgSend(v34, "setStatus:", v167);
      objc_msgSend(v34, "setDirection:", v166);
      v44 = v34;
      goto LABEL_72;
    case 5:
      v53 = objc_alloc(MEMORY[0x1E0D398F0]);
      v32 = (void *)v14;
      v33 = v108;
      v34 = (void *)objc_msgSend(v53, "initWithSender:time:guid:type:", v11, v108, v161, 5);
      objc_msgSend(v34, "setActionType:", v164);
      objc_msgSend(v34, "setUnformattedID:", v118);
      objc_msgSend(v34, "setCountryCode:", v32);
      v36 = (void *)v104;
      objc_msgSend(v34, "setOtherHandle:", v104);
      v37 = (void *)v103;
      objc_msgSend(v34, "setOtherUnformattedID:", v103);
      v38 = (void *)v102;
      objc_msgSend(v34, "setOtherCountryCode:", v102);
      objc_msgSend(v34, "setOriginalMessageGUID:", v154);
      objc_msgSend(v34, "setService:", v25);
      objc_msgSend(v34, "setAccount:", v156);
      objc_msgSend(v34, "setAccountID:", v155);
      objc_msgSend(v34, "_setMessageID:", v175);
      objc_msgSend(v34, "setBalloonBundleID:", v148);
      goto LABEL_73;
    case 6:
      v32 = (void *)v14;
      if (v144)
        v54 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithMessageSummaryInfoData:");
      else
        v54 = MEMORY[0x1E0C9AA70];
      v33 = v108;
      v63 = objc_alloc(MEMORY[0x1E0D39B38]);
      v34 = (void *)objc_msgSend(v63, "initWithSender:time:guid:messageSummaryInfo:", v11, v108, v161, v54);
      objc_msgSend(v34, "setService:", v25);
      objc_msgSend(v34, "setAccount:", v156);
      objc_msgSend(v34, "setAccountID:", v155);
      objc_msgSend(v34, "_setMessageID:", v175);
      objc_msgSend(v34, "setUnformattedID:", v118);
      objc_msgSend(v34, "setCountryCode:", v32);
      objc_msgSend(v34, "setDestinationCallerID:", v139);
      objc_msgSend(v34, "setFlags:", -[__CFNumber unsignedLongLongValue](v158, "unsignedLongLongValue"));
      objc_msgSend(v34, "setReplyToGUID:", v138);
      v39 = v105;
      objc_msgSend(v34, "setSortID:", v105);
      v42 = v106;
      v40 = v11;
      v41 = v114;
      goto LABEL_102;
    case 7:
      v45 = objc_alloc(MEMORY[0x1E0D39B60]);
      v46 = v161;
      v47 = v11;
      v32 = (void *)v14;
      v33 = v108;
      v48 = v108;
      v49 = 7;
      goto LABEL_71;
    case 8:
      v45 = objc_alloc(MEMORY[0x1E0D398D0]);
      v46 = v161;
      v47 = v11;
      v32 = (void *)v14;
      v33 = v108;
      v48 = v108;
      v49 = 8;
LABEL_71:
      v44 = (void *)objc_msgSend(v45, "initWithSender:time:guid:type:", v47, v48, v46, v49);
      v34 = v44;
LABEL_72:
      objc_msgSend(v44, "setUnformattedID:", v118);
      objc_msgSend(v34, "setCountryCode:", v32);
      v36 = (void *)v104;
      objc_msgSend(v34, "setOtherHandle:", v104);
      v37 = (void *)v103;
      objc_msgSend(v34, "setOtherUnformattedID:", v103);
      v38 = (void *)v102;
      objc_msgSend(v34, "setOtherCountryCode:", v102);
      objc_msgSend(v34, "setService:", v25);
      objc_msgSend(v34, "setAccount:", v156);
      objc_msgSend(v34, "setAccountID:", v155);
      objc_msgSend(v34, "_setMessageID:", v175);
LABEL_73:
      objc_msgSend(v34, "setDestinationCallerID:", v139);
      objc_msgSend(v34, "setReplyToGUID:", v138);
      v39 = v105;
      objc_msgSend(v34, "setSortID:", v105);
      v42 = v106;
      v40 = v11;
      v41 = v114;
      break;
    default:
      v34 = 0;
      v42 = v106;
      v40 = v11;
      v41 = v114;
      v50 = (void *)v14;
      v33 = v108;
      v39 = v105;
      v32 = v50;
LABEL_102:
      v36 = (void *)v104;
      v38 = (void *)v102;
      v37 = (void *)v103;
      break;
  }
  objc_msgSend(v34, "setCloudKitSyncState:", v143);
  objc_msgSend(v34, "setCloudKitRecordID:", v142);
  objc_msgSend(v34, "setCloudKitServerChangeTokenBlob:", v141);
  objc_msgSend(v34, "setCloudKitRecordChangeTag:", v140);
  objc_msgSend(v34, "setReplyToGUID:", v138);
  objc_msgSend(v34, "setSortID:", v39);

  return v34;
}

void sub_1ABC25724(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1ABC25734(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

id sub_1ABC25740(uint64_t a1, void *a2)
{
  id result;

  result = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_1ABC258FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1ABC25918(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateClientState");

}

uint64_t sub_1ABC25944(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateClientState");
}

void sub_1ABC25ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1ABC25AF4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1ABC25B04(uint64_t a1)
{

}

void sub_1ABC25B0C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

uint64_t sub_1ABC25B1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) + 16))();
}

uint64_t sub_1ABC25C3C()
{
  uint64_t result;

  result = MEMORY[0x1AF434FF4](CFSTR("LPSharedObjectMetadata"), CFSTR("LinkPresentation"));
  qword_1EEC40600 = result;
  return result;
}

uint64_t sub_1ABC25CA8()
{
  uint64_t result;

  result = MEMORY[0x1AF434FF4](CFSTR("LPSpecializationMetadata"), CFSTR("LinkPresentation"));
  qword_1EEC40610 = result;
  return result;
}

void sub_1ABC27D88(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0DBD1C0], "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "groupUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "callForConversationWithGroupUUID:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("md"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(v4, "dateConnected");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6 && v5)
    {
      objc_msgSend(v4, "dateConnected");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "compare:", v5);

      if (v9 != 1)
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v10 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v4, "dateConnected");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = 138412546;
            v16 = v11;
            v17 = 2112;
            v18 = v5;
            _os_log_impl(&dword_1ABB60000, v10, OS_LOG_TYPE_INFO, "Updating conversation with highlight dictionary since call start date %@ is before message date %@", (uint8_t *)&v15, 0x16u);

          }
        }
        objc_msgSend(*(id *)(a1 + 48), "addCollaborationDictionary:forConversation:fromMe:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 56));
        goto LABEL_15;
      }
    }
    else
    {

    }
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v4, "dateConnected");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 40);
      v15 = 138412802;
      v16 = v13;
      v17 = 2112;
      v18 = v5;
      v19 = 2112;
      v20 = v14;
      _os_log_impl(&dword_1ABB60000, v12, OS_LOG_TYPE_INFO, "Message was not sent after call start time %@ message send time: %@, so not updating conversation with highlight dictionary %@", (uint8_t *)&v15, 0x20u);

    }
  }
LABEL_15:

}

void sub_1ABC28E74()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_highlightedContentServerDate"), 0, 0, 1, 0);
  v1 = (void *)qword_1ED0D37F8;
  qword_1ED0D37F8 = v0;

}

void sub_1ABC28EF8()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_syndicationContentType"), 0, 0, 1, 0);
  v1 = (void *)qword_1EEC40620;
  qword_1EEC40620 = v0;

}

void sub_1ABC28F7C()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_collaborationIdentifier"), 0, 0, 1, 0);
  v1 = (void *)qword_1EEC40630;
  qword_1EEC40630 = v0;

}

void sub_1ABC29000()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_ckBundleIDs"), 0, 0, 1, 0);
  v1 = (void *)qword_1EEC40640;
  qword_1EEC40640 = v0;

}

void sub_1ABC29084()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_lpTitle"), 1, 0, 0, 0);
  v1 = (void *)qword_1EEC40650;
  qword_1EEC40650 = v0;

}

void sub_1ABC29108()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_collaborationMetadata"), 0, 0, 1, 0);
  v1 = (void *)qword_1EEC40660;
  qword_1EEC40660 = v0;

}

void sub_1ABC2918C()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA6AC0]), "initWithKeyName:searchable:searchableByDefault:unique:multiValued:", CFSTR("com_apple_mobilesms_dataDetectedLink"), 0, 0, 1, 0);
  v1 = (void *)qword_1EEC40670;
  qword_1EEC40670 = v0;

}

Class sub_1ABC291D0(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!qword_1EEC40688)
  {
    v4 = xmmword_1E5ABF410;
    v5 = 0;
    qword_1EEC40688 = _sl_dlopen();
  }
  if (!qword_1EEC40688)
    sub_1ABC63468(&v3);
  result = objc_getClass("LPLinkMetadataSharedWithYouTransformer");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1ABC634E4();
  qword_1EEC40680 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __XPCServerIMDMessageStoreSave_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[5];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC29308;
  v5[3] = &unk_1E5AB43E8;
  v5[4] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC29308(uint64_t a1)
{
  uint64_t result;

  IMDSMSRecordStoreSave();
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

BOOL sub_1ABC29340(uint64_t a1)
{
  _BOOL8 v2;
  NSObject *v3;
  const __CFString *v4;
  int v6;
  const __CFString *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = a1 != 0;
  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance"), "isInternalInstall"))
  {
    if (qword_1ED0D3738 != -1)
      dispatch_once(&qword_1ED0D3738, &unk_1E5ABF9B0);
    if (byte_1EEC402E8)
    {
      if (IMOSLoggingEnabled())
      {
        v3 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          v4 = CFSTR("NO");
          if (a1)
            v4 = CFSTR("YES");
          v6 = 138412290;
          v7 = v4;
          _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Database client wants response: %@, but DisablePriorityInversionFixIMDP is YES", (uint8_t *)&v6, 0xCu);
        }
      }
      return 0;
    }
  }
  return v2;
}

void __XPCServerIMDMessageStoreIsFull_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC294CC;
  v5[3] = &unk_1E5ABF430;
  v5[4] = a3;
  v5[5] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC294CC(uint64_t a1)
{
  int IsFull;
  NSObject *v3;
  const __CFString *v4;
  void *v5;
  uint64_t result;
  int v7;
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  IsFull = IMDSMSRecordIsFull();
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = CFSTR("NO");
      if (IsFull)
        v4 = CFSTR("YES");
      v7 = 138412290;
      v8 = v4;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Is database full? %@", (uint8_t *)&v7, 0xCu);
    }
  }
  v5 = *(void **)(a1 + 32);
  if (v5)
    xpc_dictionary_set_BOOL(v5, "BOOL_result", IsFull != 0);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageStoreSchemaVersion_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC2963C;
  v5[3] = &unk_1E5ABF430;
  v5[4] = a3;
  v5[5] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC2963C(uint64_t a1)
{
  unsigned int SchemaVersion;
  NSObject *v3;
  uint64_t result;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  SchemaVersion = IMDSMSRecordStoreGetSchemaVersion();
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5[0] = 67109120;
      v5[1] = SchemaVersion;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Database schema version? %u", (uint8_t *)v5, 8u);
    }
  }
  if (SchemaVersion)
    xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 32), "uint64_result", SchemaVersion);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageStoreSchema_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC29794;
  v5[3] = &unk_1E5ABF430;
  v5[4] = a3;
  v5[5] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC29794(uint64_t a1)
{
  __CFString *Schema;
  NSObject *v3;
  uint64_t result;
  uint8_t v5[16];

  Schema = (__CFString *)IMDSMSRecordStoreGetSchema();
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Fetched Database schema", v5, 2u);
    }
  }
  if (Schema)
    xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 32), "schema", (const char *)-[__CFString UTF8String](Schema, "UTF8String"));
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordCreate_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, __int128 a9, uint64_t a10, int a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, int a19, __int128 a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _BOOL4 v24;
  _QWORD v25[6];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  char v43;
  char v44;
  char v45;

  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = sub_1ABC2993C;
  v25[3] = &unk_1E5ABF458;
  v39 = a6;
  v40 = a7;
  v25[4] = a5;
  v25[5] = a8;
  v26 = a9;
  v43 = a12;
  v27 = a10;
  v28 = a14;
  v44 = a15;
  v29 = a16;
  v30 = a17;
  v45 = a18;
  v41 = a11;
  v42 = a19;
  v31 = a20;
  v37 = a13;
  v38 = a22;
  v32 = a21;
  v33 = a23;
  v34 = a24;
  v35 = a3;
  v36 = a4;
  v24 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v25, v24);
}

void sub_1ABC2993C(uint64_t a1)
{
  const void *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = IMDAttachmentRecordCreate(0, *(_QWORD *)(a1 + 32), (uint8_t *)*(int *)(a1 + 168), *(int *)(a1 + 172), *(_QWORD *)(a1 + 40), *(void **)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(int *)(a1 + 176), *(_BYTE *)(a1 + 184), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 185), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 186), *(int *)(a1 + 180), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104),
         *(_QWORD *)(a1 + 112),
         *(_QWORD *)(a1 + 160),
         *(_QWORD *)(a1 + 120),
         *(_QWORD *)(a1 + 128));
  v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v6 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412546;
        v11 = v5;
        v12 = 2112;
        v13 = v6;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Created attachment record for guid: %@ with filename %@", buf, 0x16u);
      }
    }
    _IMDAttachmentRecordBulkCopyXPCDictionary((uint64_t)v2, *(_QWORD *)(a1 + 136), 1);
  }
  else if (v3)
  {
    v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v11 = v8;
      _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Failed to create attachment record for guid: %@", buf, 0xCu);
    }
  }
  v9 = *(_QWORD *)(a1 + 144);
  if (v9)
    (*(void (**)(void))(v9 + 16))();
  if (v2)
    CFRelease(v2);
}

void __XPCServerIMDAttachmentRecordRIDForGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC29B80;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC29B80(uint64_t a1)
{
  int64_t v2;
  uint64_t result;

  v2 = IMDAttachmentRecordRowIDForGUID(*(const __CFString **)(a1 + 32));
  xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 40), "rrid", v2);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordCopyAttachmentForGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _BOOL4 v6;
  _QWORD v7[7];
  char v8;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC29C34;
  v7[3] = &unk_1E5ABF4A8;
  v8 = a6;
  v7[4] = a5;
  v7[5] = a3;
  v7[6] = a4;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

void sub_1ABC29C34(uint64_t a1)
{
  CFStringRef v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = IMDAttachmentRecordCopyAttachmentForGUIDIsLegacyGUID(*(CFStringRef *)(a1 + 32), *(unsigned __int8 *)(a1 + 56));
  v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v9 = 138412290;
        v10 = v5;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Copied attachment record for guid: %@", (uint8_t *)&v9, 0xCu);
      }
    }
    _IMDAttachmentRecordBulkCopyXPCDictionary((uint64_t)v2, *(_QWORD *)(a1 + 40), 1);
  }
  else if (v3)
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v9 = 138412290;
      v10 = v7;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "No attachment record found for guid: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(void))(v8 + 16))();
  if (v2)
    CFRelease(v2);
}

void __XPCServerIMDAttachmentRecordCopyStickerAttachmentForStickerCachePath_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC29E10;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

void sub_1ABC29E10(uint64_t a1)
{
  const void *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = IMDAttachmentCopyAttachmentWithStickerPath(*(CFStringRef *)(a1 + 32));
  v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v9 = 138412290;
        v10 = v5;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Copied attachment record for path: %@", (uint8_t *)&v9, 0xCu);
      }
    }
    _IMDAttachmentRecordBulkCopyXPCDictionary((uint64_t)v2, *(_QWORD *)(a1 + 40), 1);
  }
  else if (v3)
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v9 = 138412290;
      v10 = v7;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "No attachment record found for path: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(void))(v8 + 16))();
  if (v2)
    CFRelease(v2);
}

void __XPCServerIMDAttachmentRecordDeleteAttachmentForGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC29FE4;
  v6[3] = &unk_1E5ABF430;
  v6[4] = a5;
  v6[5] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC29FE4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v5 = 138412290;
      v6 = v3;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Delete attachment for guid: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  IMDAttachmentRecordDeleteAttachmentForGUID(*(CFStringRef *)(a1 + 32));
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordDeleteAttachmentsOlderThanDays_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2A11C;
  v6[3] = &unk_1E5ABF4D0;
  v6[4] = a4;
  v6[5] = a5;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2A11C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 40);
      v5 = 134217984;
      v6 = v3;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Deleting attachments older than %lld days", (uint8_t *)&v5, 0xCu);
    }
  }
  IMDAttachmentRecordDeleteAttachmentsOlderThanDays(*(_QWORD *)(a1 + 40));
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordEstimateSpaceTakenByAttachmentsOlderThanDays_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2A258;
  v6[3] = &unk_1E5ABF4F8;
  v6[5] = a4;
  v6[6] = a5;
  v6[4] = a3;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2A258(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 48);
      v6 = 134217984;
      v7 = v3;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Query space saved by deleting attachments older than %lld days", (uint8_t *)&v6, 0xCu);
    }
  }
  v4 = IMDAttachmentRecordEstimateSpaceTakenByAttachmentsOlderThanDays(*(_QWORD *)(a1 + 48));
  xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 32), "bytes", v4);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDDatabaseClean_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[5];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC2A3A4;
  v5[3] = &unk_1E5AB43E8;
  v5[4] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC2A3A4(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  uint8_t v4[16];

  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Clean database", v4, 2u);
    }
  }
  IMDDatabaseClean();
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordFindLargestConversations_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2A4A0;
  v6[3] = &unk_1E5ABF4F8;
  v6[5] = a4;
  v6[6] = a5;
  v6[4] = a3;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2A4A0(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t result;
  uint8_t v6[16];

  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Query largest conversations", v6, 2u);
    }
  }
  if (IMDAttachmentFindLargestConversations(*(_QWORD *)(a1 + 48)))
  {
    v3 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (v3)
    {
      v4 = v3;
      xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), "result", v3);
      xpc_release(v4);
    }
  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordFindLargestAttachmentGUIDsWithLimitAndOffset_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BOOL4 v7;
  _QWORD v8[10];

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABC2A5D0;
  v8[3] = &unk_1E5ABF520;
  v8[8] = a6;
  v8[9] = a7;
  v8[4] = a2;
  v8[5] = a3;
  v8[6] = a4;
  v8[7] = a5;
  v7 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v8, v7);
}

uint64_t sub_1ABC2A5D0(uint64_t a1)
{
  NSObject *v2;
  char *string;
  void *v4;
  void *v5;
  uint64_t result;
  uint8_t v7[16];

  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Query largest attachment GUIDs", v7, 2u);
    }
  }
  string = (char *)xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 32), "attachmentClass");
  if (string)
    string = (char *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", string);
  if (IMDAttachmentFindLargestAttachmentGUIDsForAttachmentClassWithLimitAndOffset(string, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72)))
  {
    v4 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (v4)
    {
      v5 = v4;
      xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), "result", v4);
      xpc_release(v5);
    }
  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordSpaceTakenByAttachmentClass_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2A724;
  v6[3] = &unk_1E5ABF4F8;
  v6[5] = a4;
  v6[6] = a5;
  v6[4] = a3;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2A724(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t result;
  uint8_t v6[16];

  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Query space taken by attachment class", v6, 2u);
    }
  }
  if (IMDAttachmentSpaceTakenByAttachmentClass(*(_QWORD *)(a1 + 48)))
  {
    v3 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (v3)
    {
      v4 = v3;
      xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), "result", v3);
      xpc_release(v4);
    }
  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordDoesAttachmentWithGUIDExist_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2A850;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2A850(uint64_t a1)
{
  int DoesAttachmentWithGUIDExist;
  NSObject *v3;
  const __CFString *v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  __int16 v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DoesAttachmentWithGUIDExist = IMDAttachmentRecordDoesAttachmentWithGUIDExist(*(const __CFString **)(a1 + 32));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = CFSTR("NO");
      v5 = *(_QWORD *)(a1 + 32);
      if (DoesAttachmentWithGUIDExist)
        v4 = CFSTR("YES");
      v8 = 138412546;
      v9 = v5;
      v10 = 2112;
      v11 = v4;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Does attachment exist for guid: %@? %@", (uint8_t *)&v8, 0x16u);
    }
  }
  v6 = *(void **)(a1 + 40);
  if (v6)
    xpc_dictionary_set_BOOL(v6, "BOOL_result", DoesAttachmentWithGUIDExist != 0);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordDoesStickerPathHaveAttachments_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2A9D8;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2A9D8(uint64_t a1)
{
  uint64_t HaveAttachments;
  int64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  __int16 v9;
  int64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  HaveAttachments = IMDAttachmentRecordDoesStickerPathHaveAttachments(*(CFStringRef *)(a1 + 32));
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = HaveAttachments;
    if (IMOSLoggingEnabled())
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v7 = 138412546;
        v8 = v5;
        v9 = 2048;
        v10 = v3;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Attachment count at sticker: %@ is %lld", (uint8_t *)&v7, 0x16u);
      }
    }
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 40), "int64_result", v3);
  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordCopyRecentFilenames_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2AB48;
  v6[3] = &unk_1E5ABF4F8;
  v6[5] = a4;
  v6[6] = a5;
  v6[4] = a3;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2AB48(_QWORD *a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  xpc_object_t v9;
  void *v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDAttachmentRecordCopyRecentFilenames(a1[6]);
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = a1[6];
      v12 = 134218240;
      v13 = v4;
      v14 = 2048;
      v15 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copying filenames for most recent %lld attachments (Results: %ld)", (uint8_t *)&v12, 0x16u);
    }
  }
  v5 = xpc_array_create(0, 0);
  if (v5)
  {
    v6 = objc_msgSend(v2, "count");
    if (v6)
    {
      v7 = 0;
      do
      {
        v8 = (void *)objc_msgSend(v2, "objectAtIndex:", v7);
        v9 = xpc_dictionary_create(0, 0, 0);
        if (v9)
        {
          xpc_array_set_string(v5, 0xFFFFFFFFFFFFFFFFLL, (const char *)objc_msgSend(v8, "UTF8String"));
          xpc_release(v9);
        }
        ++v7;
      }
      while (v6 != v7);
    }
    v10 = (void *)a1[4];
    if (v10)
      xpc_dictionary_set_value(v10, "array_result", v5);
    xpc_release(v5);
  }
  if (v2)
    CFRelease(v2);
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordCopyAttachmentsForQueryWithLimit_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BOOL4 v7;
  _QWORD v8[9];

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABC2AD64;
  v8[3] = &unk_1E5ABF548;
  v8[7] = a5;
  v8[8] = a7;
  v8[4] = a6;
  v8[5] = a3;
  v8[6] = a4;
  v7 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v8, v7);
}

uint64_t sub_1ABC2AD64(uint64_t a1)
{
  __CFArray *v2;
  xpc_object_t v3;
  CFIndex Count;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  CFIndex i;
  const void *ValueAtIndex;
  xpc_object_t v10;
  void *v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  CFIndex v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = IMDAttachmentRecordCopyAttachmentsForQueryWithLimit(*(_QWORD *)(a1 + 56), *(void **)(a1 + 32), *(_QWORD *)(a1 + 64));
  v3 = xpc_array_create(0, 0);
  if (v3 && v2)
  {
    Count = CFArrayGetCount(v2);
    if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)(a1 + 56);
        v6 = *(_QWORD *)(a1 + 64);
        v13 = 134218496;
        v14 = v6;
        v15 = 2048;
        v16 = v7;
        v17 = 2048;
        v18 = Count;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Copying most recent %lld attachments for queryType: %lld (Results: %ld)", (uint8_t *)&v13, 0x20u);
      }
    }
    if (Count)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
        v10 = xpc_dictionary_create(0, 0, 0);
        if (v10)
        {
          _IMDAttachmentRecordBulkCopyXPCDictionary((uint64_t)ValueAtIndex, (uint64_t)v10, 1);
          xpc_array_set_value(v3, 0xFFFFFFFFFFFFFFFFLL, v10);
          xpc_release(v10);
        }
      }
    }
    v11 = *(void **)(a1 + 40);
    if (v11)
      xpc_dictionary_set_value(v11, "array_result", v3);
  }
  if (v3)
    xpc_release(v3);
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordMarkAttachmentWithROWIDWithSyncState_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v6;
  _QWORD v7[7];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC2AF94;
  v7[3] = &unk_1E5ABF570;
  v7[5] = a5;
  v7[6] = a6;
  v7[4] = a4;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1ABC2AF94(_QWORD *a1)
{
  uint64_t result;

  IMDAttachmentRecordMarkAttachmentWithROWIDWithSyncState(a1[5], a1[6]);
  result = a1[4];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordMarkAttachmentWithROWIDAsSyncedWithCloudKit_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2B030;
  v6[3] = &unk_1E5ABF4D0;
  v6[4] = a4;
  v6[5] = a5;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2B030(uint64_t a1)
{
  uint64_t result;

  IMDAttachmentRecordMarkAttachmentWithROWIDAsSyncedWithCloudKit(*(_QWORD *)(a1 + 40));
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordMarkAllAttachmentsAsNeedingCloudKitSync_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[5];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC2B0C8;
  v5[3] = &unk_1E5AB43E8;
  v5[4] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC2B0C8(uint64_t a1)
{
  uint64_t result;

  IMDAttachmentRecordMarkAllAttachmentsAsNeedingCloudKitSync();
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentResetAllAttachmentsInFailedCloudDownloadState_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[5];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC2B15C;
  v5[3] = &unk_1E5AB43E8;
  v5[4] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC2B15C(uint64_t a1)
{
  uint64_t result;

  IMDAttachmentResetAllAttachmentsInFailedCloudDownloadState();
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordCopyMessageForAttachmentGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2B1F4;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

void sub_1ABC2B1F4(uint64_t a1)
{
  const void *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)IMDAttachmentRecordCopyMessageForAttachmentGUID(*(const __CFString **)(a1 + 32));
  v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v9 = 138412290;
        v10 = v5;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Getting message record for attachment GUID %@", (uint8_t *)&v9, 0xCu);
      }
    }
    _IMDMessageRecordBulkCopyXPCDictionary((uint64_t)v2, *(_QWORD *)(a1 + 40), 1, 0);
  }
  else if (v3)
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v9 = 138412290;
      v10 = v7;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Failed to copy message for attachment GUID %@", (uint8_t *)&v9, 0xCu);
    }
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(void))(v8 + 16))();
  if (v2)
    CFRelease(v2);
}

void __XPCServerIMDAttachmentRecordUpdateAttachmentGUIDWithGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v6;
  _QWORD v7[8];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC2B3D4;
  v7[3] = &unk_1E5ABF598;
  v7[4] = a5;
  v7[5] = a6;
  v7[6] = a3;
  v7[7] = a4;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1ABC2B3D4(uint64_t *a1)
{
  int updated;
  void *v3;
  uint64_t result;

  updated = IMDAttachmentRecordUpdateAttachmentGUIDWithGUID(a1[4], a1[5]);
  v3 = (void *)a1[6];
  if (v3)
    xpc_dictionary_set_BOOL(v3, "BOOL_result", updated != 0);
  result = a1[7];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordGetPurgeableDiskSpace_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC2B490;
  v5[3] = &unk_1E5ABF430;
  v5[4] = a3;
  v5[5] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC2B490(uint64_t a1)
{
  uint64_t PurgeableDiskSpace;
  int64_t v3;
  NSObject *v4;
  uint64_t result;
  int v6;
  int64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  PurgeableDiskSpace = IMDAttachmentRecordGetPurgeableDiskSpace();
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = PurgeableDiskSpace;
    if (IMOSLoggingEnabled())
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v6 = 134217984;
        v7 = v3;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Purgeable disk space is %lld", (uint8_t *)&v6, 0xCu);
      }
    }
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "purgeableDiskSpace", v3);
  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordGetNonSyncedAttachmentDiskSpace_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC2B5E8;
  v5[3] = &unk_1E5ABF430;
  v5[4] = a3;
  v5[5] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC2B5E8(uint64_t a1)
{
  uint64_t NonSyncedAttachmentDiskSpace;
  int64_t v3;
  NSObject *v4;
  uint64_t result;
  int v6;
  int64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  NonSyncedAttachmentDiskSpace = IMDAttachmentRecordGetNonSyncedAttachmentDiskSpace();
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = NonSyncedAttachmentDiskSpace;
    if (IMOSLoggingEnabled())
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v6 = 134217984;
        v7 = v3;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Non synced attachment disk space is %lld", (uint8_t *)&v6, 0xCu);
      }
    }
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "diskSpace", v3);
  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordCopyAttachmentsToMetricForDiskSpace_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2B744;
  v6[3] = &unk_1E5ABF4F8;
  v6[5] = a4;
  v6[6] = a5;
  v6[4] = a3;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2B744(_QWORD *a1)
{
  const __CFArray *v2;
  xpc_object_t v3;
  CFIndex Count;
  NSObject *v5;
  uint64_t v6;
  CFIndex i;
  const void *ValueAtIndex;
  xpc_object_t v9;
  void *v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  __int16 v14;
  CFIndex v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFArray *)IMDAttachmentRecordCopyAttachmentsToMetricForDiskSpace(a1[6]);
  v3 = xpc_array_create(0, 0);
  if (v3 && v2)
  {
    Count = CFArrayGetCount(v2);
    if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = a1[6];
        v12 = 134218240;
        v13 = v6;
        v14 = 2048;
        v15 = Count;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Copying oldest attachments to delete to free up: %lld bytes (Results: %ld)", (uint8_t *)&v12, 0x16u);
      }
    }
    if (Count)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
        v9 = xpc_dictionary_create(0, 0, 0);
        if (v9)
        {
          _IMDAttachmentRecordBulkCopyXPCDictionary((uint64_t)ValueAtIndex, (uint64_t)v9, 1);
          xpc_array_set_value(v3, 0xFFFFFFFFFFFFFFFFLL, v9);
          xpc_release(v9);
        }
      }
    }
    v10 = (void *)a1[4];
    if (v10)
      xpc_dictionary_set_value(v10, "array_result", v3);
  }
  if (v3)
    xpc_release(v3);
  if (v2)
    CFRelease(v2);
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordCopyMostRecentAttachmentsInMostRecentChats_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v6;
  _QWORD v7[8];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC2B964;
  v7[3] = &unk_1E5ABF5C0;
  v7[6] = a5;
  v7[7] = a6;
  v7[4] = a3;
  v7[5] = a4;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1ABC2B964(_QWORD *a1)
{
  __CFDictionary *v1;
  void *v2;
  xpc_object_t v3;
  __int128 v4;
  unint64_t v5;
  void *v6;
  void *v7;
  xpc_object_t v8;
  _BOOL4 v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex i;
  const void *ValueAtIndex;
  xpc_object_t v16;
  void *v17;
  uint64_t result;
  __int128 v19;
  uint64_t v21;
  __CFDictionary *cf;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = IMDAttachmentRecordCopyMostRecentAttachmentsInMostRecentChatsTest(a1[6], a1[7]);
  v21 = -[__CFDictionary allValues](v1, "allValues");
  cf = v1;
  v2 = (void *)-[__CFDictionary allKeys](v1, "allKeys");
  v3 = xpc_dictionary_create(0, 0, 0);
  if (objc_msgSend(v2, "count"))
  {
    v5 = 0;
    *(_QWORD *)&v4 = 134218496;
    v19 = v4;
    do
    {
      v6 = (void *)objc_msgSend(v2, "objectAtIndexedSubscript:", v5);
      v7 = (void *)-[__CFDictionary valueForKey:](cf, "valueForKey:", v6);
      v8 = xpc_array_create(0, 0);
      if (v8)
        v9 = v21 != 0;
      else
        v9 = 0;
      if (v9)
      {
        v10 = objc_msgSend(v7, "count");
        if (IMOSLoggingEnabled())
        {
          v11 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            v13 = a1[6];
            v12 = a1[7];
            *(_DWORD *)buf = v19;
            v24 = v12;
            v25 = 2048;
            v26 = v13;
            v27 = 2048;
            v28 = v10;
            _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "Copying most recent attachments %ld from %ld most recent chats: (Results: %ld)", buf, 0x20u);
          }
        }
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v7, i);
            v16 = xpc_dictionary_create(0, 0, 0);
            if (v16)
            {
              _IMDAttachmentRecordBulkCopyXPCDictionary((uint64_t)ValueAtIndex, (uint64_t)v16, 1);
              xpc_array_set_value(v8, 0xFFFFFFFFFFFFFFFFLL, v16);
              xpc_release(v16);
            }
          }
        }
      }
      xpc_dictionary_set_value(v3, (const char *)objc_msgSend(v6, "cStringUsingEncoding:", 1), v8);
      if (v8)
        xpc_release(v8);
      ++v5;
    }
    while (objc_msgSend(v2, "count", v19) > v5);
  }
  v17 = (void *)a1[4];
  if (v17)
    xpc_dictionary_set_value(v17, "dictionary_result", v3);
  if (v3)
    xpc_release(v3);
  if (cf)
    CFRelease(cf);
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordCopyAttachmentsToPurgeForDiskSpace_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _BOOL4 v6;
  _QWORD v7[7];
  int v8;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC2BC68;
  v7[3] = &unk_1E5ABF5E8;
  v7[5] = a4;
  v7[6] = a5;
  v8 = a6;
  v7[4] = a3;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1ABC2BC68(uint64_t a1)
{
  const __CFArray *v2;
  xpc_object_t v3;
  CFIndex Count;
  NSObject *v5;
  uint64_t v6;
  int v7;
  CFIndex i;
  const void *ValueAtIndex;
  xpc_object_t v10;
  void *v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  __int16 v17;
  CFIndex v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFArray *)IMDAttachmentRecordCopyAttachmentsToPurgeForDiskSpace(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 56));
  v3 = xpc_array_create(0, 0);
  if (v3 && v2)
  {
    Count = CFArrayGetCount(v2);
    if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = *(_QWORD *)(a1 + 48);
        v7 = *(_DWORD *)(a1 + 56);
        v13 = 134218496;
        v14 = v6;
        v15 = 1024;
        v16 = v7;
        v17 = 2048;
        v18 = Count;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Copying oldest attachments to delete to free up: %lld bytes starting offset: %d (Results: %ld)", (uint8_t *)&v13, 0x1Cu);
      }
    }
    if (Count)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
        v10 = xpc_dictionary_create(0, 0, 0);
        if (v10)
        {
          _IMDAttachmentRecordBulkCopyXPCDictionary((uint64_t)ValueAtIndex, (uint64_t)v10, 1);
          xpc_array_set_value(v3, 0xFFFFFFFFFFFFFFFFLL, v10);
          xpc_release(v10);
        }
      }
    }
    v11 = *(void **)(a1 + 32);
    if (v11)
      xpc_dictionary_set_value(v11, "array_result", v3);
  }
  if (v3)
    xpc_release(v3);
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentUpdateAttachmentFileSizeWithRowIDGreaterThanWatermark_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2BE9C;
  v6[3] = &unk_1E5ABF4F8;
  v6[5] = a4;
  v6[6] = a5;
  v6[4] = a3;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2BE9C(uint64_t a1)
{
  uint64_t v1;
  void *updated;
  xpc_object_t v3;
  void *v4;
  unint64_t v5;
  void *v6;
  xpc_object_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = a1;
  updated = IMDAttachmentUpdateAttachmentFileSizeWithRowIDGreaterThanWatermark(*(_QWORD *)(a1 + 48));
  v3 = xpc_array_create(0, 0);
  if (v3)
  {
    v4 = v3;
    v15 = v1;
    if (objc_msgSend(updated, "count"))
    {
      v5 = 0;
      do
      {
        v6 = (void *)objc_msgSend(updated, "objectAtIndex:", v5);
        v7 = xpc_dictionary_create(0, 0, 0);
        if (v7)
        {
          v8 = v7;
          if (objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("rowID")))
          {
            v11 = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("rowID")), "intValue");
            v13 = 0;
            IMInsertIntsToXPCDictionary();
          }
          if (objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("filename"), v11, v13))
          {
            v12 = objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("filename"));
            v14 = 0;
            IMInsertNSStringsToXPCDictionary();
          }
          if (objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("guid"), v12, v14))
          {
            v11 = objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("guid"));
            v13 = 0;
            IMInsertNSStringsToXPCDictionary();
          }
          xpc_array_append_value(v4, v8);
          xpc_release(v8);
        }
        ++v5;
      }
      while (v5 < objc_msgSend(updated, "count", v11, v13));
    }
    v1 = v15;
    if (updated)
    {
      v9 = *(void **)(v15 + 32);
      if (v9)
        xpc_dictionary_set_value(v9, "array_result", v4);
    }
    xpc_release(v4);
  }
  if (updated)
    CFRelease(updated);
  result = *(_QWORD *)(v1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordDeleteAttachmentPreviewsOlderThan_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2C0D4;
  v6[3] = &unk_1E5ABF4D0;
  v6[4] = a4;
  v6[5] = a5;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2C0D4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  IMDAttachmentRecordDeleteAttachmentPreviewsOlderThan(*(_QWORD *)(a1 + 40));
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 40);
      v5 = 134217984;
      v6 = v3;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Deleting files older than %lld recent attachments", (uint8_t *)&v5, 0xCu);
    }
  }
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordCopyAttachmentGUIDsAndPathsForChatIdentifiersOnServices_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v6;
  _QWORD v7[8];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC2C210;
  v7[3] = &unk_1E5ABF598;
  v7[4] = a5;
  v7[5] = a6;
  v7[6] = a3;
  v7[7] = a4;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1ABC2C210(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  xpc_object_t v9;
  const char *v10;
  void *v11;
  uint64_t result;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = (void *)IMDAttachmentRecordCopyAttachmentGUIDsAndPathsForChatIdentifiersOnServices(*(void **)(a1 + 32), *(void **)(a1 + 40));
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v3 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      v15 = v4;
      v16 = 2112;
      v17 = v3;
      v18 = 2048;
      v19 = objc_msgSend(v1, "count");
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Copying filenames for attachments for chat identifiers: %@ on services: %@   (Results: %ld)", buf, 0x20u);
    }
  }
  v5 = xpc_array_create(0, 0);
  if (v5)
  {
    v6 = objc_msgSend(v1, "count");
    if (v6)
    {
      v7 = 0;
      do
      {
        v8 = (void *)objc_msgSend(v1, "objectAtIndex:", v7);
        v9 = xpc_dictionary_create(0, 0, 0);
        if (v9)
        {
          v10 = (const char *)objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("path")), "UTF8String");
          xpc_dictionary_set_string(v9, "guid", (const char *)objc_msgSend((id)objc_msgSend(v8, "objectForKey:", CFSTR("guid")), "UTF8String"));
          if (v10)
            xpc_dictionary_set_string(v9, "path", v10);
          xpc_dictionary_set_BOOL(v9, "isSticker", objc_msgSend((id)objc_msgSend(v8, "objectForKey:", CFSTR("isSticker")), "BOOLValue"));
          xpc_dictionary_set_int64(v9, "createdDate", objc_msgSend((id)objc_msgSend(v8, "objectForKey:", CFSTR("createdDate")), "unsignedLongLongValue"));
          xpc_dictionary_set_int64(v9, "transferState", objc_msgSend((id)objc_msgSend(v8, "objectForKey:", CFSTR("transferState")), "unsignedLongLongValue"));
          xpc_array_append_value(v5, v9);
          xpc_release(v9);
        }
        ++v7;
      }
      while (v6 != v7);
    }
    v11 = *(void **)(a1 + 48);
    if (v11)
      xpc_dictionary_set_value(v11, "array_result", v5);
    xpc_release(v5);
  }
  if (v1)
    CFRelease(v1);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordCopyPurgedAttachmentsForChatIdentifiersOnServices_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BOOL4 v7;
  _QWORD v8[9];

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABC2C524;
  v8[3] = &unk_1E5ABF610;
  v8[4] = a5;
  v8[5] = a6;
  v8[7] = a4;
  v8[8] = a7;
  v8[6] = a3;
  v7 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v8, v7);
}

uint64_t sub_1ABC2C524(uint64_t a1)
{
  __CFArray *v2;
  xpc_object_t v3;
  CFIndex Count;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFIndex i;
  const void *ValueAtIndex;
  xpc_object_t v11;
  void *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = IMDAttachmentRecordCopyPurgedAttachmentsForChatIdentifiersOnServices(*(void **)(a1 + 32), *(void **)(a1 + 40), *(_QWORD *)(a1 + 64));
  v3 = xpc_array_create(0, 0);
  if (v3 && v2)
  {
    Count = CFArrayGetCount(v2);
    if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)(a1 + 32);
        v6 = *(_QWORD *)(a1 + 40);
        v8 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 64));
        v14 = 138412802;
        v15 = v7;
        v16 = 2112;
        v17 = v6;
        v18 = 2112;
        v19 = v8;
        _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Copying purged attachments for chat %@ services %@ limit %@", (uint8_t *)&v14, 0x20u);
      }
    }
    if (Count)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
        v11 = xpc_dictionary_create(0, 0, 0);
        if (v11)
        {
          _IMDAttachmentRecordBulkCopyXPCDictionary((uint64_t)ValueAtIndex, (uint64_t)v11, 1);
          xpc_array_set_value(v3, 0xFFFFFFFFFFFFFFFFLL, v11);
          xpc_release(v11);
        }
      }
    }
    v12 = *(void **)(a1 + 48);
    if (v12)
      xpc_dictionary_set_value(v12, "array_result", v3);
  }
  if (v3)
    xpc_release(v3);
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDChatGetChatsThatContainRecipient_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2C768;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2C768(uint64_t a1)
{
  uint64_t v1;
  __CFArray *ChatsThatContainRecipient;
  const __CFArray *v3;
  xpc_object_t v4;
  void *v5;
  CFIndex Count;
  NSObject *v7;
  uint64_t v8;
  CFIndex i;
  void *ValueAtIndex;
  xpc_object_t v11;
  void *v12;
  void *v13;
  xpc_object_t v14;
  void *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  xpc_object_t v19;
  uint64_t result;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  uint64_t v24;

  v1 = a1;
  v24 = *MEMORY[0x1E0C80C00];
  ChatsThatContainRecipient = IMDChatGetChatsThatContainRecipient(*(_QWORD *)(a1 + 32));
  if (ChatsThatContainRecipient)
  {
    v3 = ChatsThatContainRecipient;
    v21 = v1;
    v4 = xpc_array_create(0, 0);
    if (v4)
    {
      v5 = v4;
      Count = CFArrayGetCount(v3);
      if (IMOSLoggingEnabled())
      {
        v7 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          v8 = *(_QWORD *)(v21 + 32);
          *(_DWORD *)buf = 138412290;
          v23 = v8;
          _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "All chats that have %@ as a participant.", buf, 0xCu);
        }
      }
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, i);
          v11 = xpc_dictionary_create(0, 0, 0);
          if (v11)
          {
            v12 = (void *)objc_msgSend(ValueAtIndex, "valueForKey:", CFSTR("chatGUID"));
            if (v12)
              xpc_dictionary_set_string(v11, "chatGUID", (const char *)objc_msgSend(v12, "UTF8String"));
            v13 = (void *)objc_msgSend(ValueAtIndex, "valueForKey:", CFSTR("displayName"));
            if (v13)
              xpc_dictionary_set_string(v11, "displayName", (const char *)objc_msgSend(v13, "UTF8String"));
            v14 = xpc_array_create(0, 0);
            v15 = (void *)objc_msgSend(ValueAtIndex, "valueForKey:", CFSTR("handles"));
            v16 = v15;
            if (v15 && objc_msgSend(v15, "count"))
            {
              v17 = 0;
              do
              {
                v18 = objc_msgSend(v16, "objectAtIndex:", v17);
                v19 = xpc_dictionary_create(0, 0, 0);
                if (v19)
                {
                  _IMDHandleRecordBulkCopyXPCDictionary(v18, (uint64_t)v19, 1);
                  xpc_array_append_value(v14, v19);
                  xpc_release(v19);
                }
                ++v17;
              }
              while (v17 < objc_msgSend(v16, "count"));
            }
            if (v14)
            {
              xpc_dictionary_set_value(v11, "handles", v14);
              xpc_release(v14);
            }
            xpc_array_set_value(v5, 0xFFFFFFFFFFFFFFFFLL, v11);
            xpc_release(v11);
          }
        }
      }
      xpc_dictionary_set_value(*(xpc_object_t *)(v21 + 40), "array_result", v5);
      xpc_release(v5);
    }
    CFRelease(v3);
    v1 = v21;
  }
  result = *(_QWORD *)(v1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordCopyPurgedAttachmentsCountForChatIdentifiersOnServices_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v6;
  _QWORD v7[8];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC2CA88;
  v7[3] = &unk_1E5ABF598;
  v7[4] = a5;
  v7[5] = a6;
  v7[6] = a3;
  v7[7] = a4;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1ABC2CA88(uint64_t a1)
{
  __CFArray *v2;
  xpc_object_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  xpc_object_t v9;
  void *v10;
  void *v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = IMDAttachmentRecordCopyPurgedAttachmentsCountForChatIdentifiersOnServices(*(void **)(a1 + 32), *(void **)(a1 + 40));
  v3 = xpc_array_create(0, 0);
  v4 = v3;
  if (v3 && v2)
  {
    if (CFArrayGetCount(v2) == 1)
    {
      if (IMOSLoggingEnabled())
      {
        v5 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          v6 = *(_QWORD *)(a1 + 32);
          v7 = *(_QWORD *)(a1 + 40);
          v13 = 138412546;
          v14 = v6;
          v15 = 2112;
          v16 = v7;
          _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Copying purged attachments count for chat %@ services %@", (uint8_t *)&v13, 0x16u);
        }
      }
      v8 = objc_msgSend((id)CFArrayGetValueAtIndex(v2, 0), "unsignedIntegerValue");
      v9 = xpc_dictionary_create(0, 0, 0);
      v10 = v9;
      if (v9)
      {
        xpc_dictionary_set_int64(v9, "purgedCount", v8);
        xpc_array_set_value(v4, 0xFFFFFFFFFFFFFFFFLL, v10);
        xpc_release(v10);
      }
      v11 = *(void **)(a1 + 48);
      if (v11)
        xpc_dictionary_set_value(v11, "array_result", v4);
    }
  }
  else if (!v3)
  {
    goto LABEL_13;
  }
  xpc_release(v4);
LABEL_13:
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordCopyStickers_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2CC9C;
  v6[3] = &unk_1E5ABF4F8;
  v6[5] = a4;
  v6[6] = a5;
  v6[4] = a3;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2CC9C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  NSObject *v3;
  xpc_object_t v4;
  void *v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t v12;
  void *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint8_t buf[16];

  v1 = a1;
  v2 = (void *)IMDAttachmentRecordCopyAttachmentStickers(*(_QWORD *)(a1 + 48));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copying filenames for sticker attachments", buf, 2u);
    }
  }
  v4 = xpc_array_create(0, 0);
  if (v4)
  {
    v5 = v4;
    v17 = v1;
    if (objc_msgSend(v2, "count"))
    {
      v6 = 0;
      v18 = v2;
      do
      {
        v7 = (void *)objc_msgSend(v2, "objectAtIndex:", v6);
        v8 = objc_msgSend(v7, "valueForKey:", CFSTR("sticker_user_info"));
        v9 = objc_msgSend(v7, "valueForKey:", CFSTR("filename"));
        objc_msgSend((id)objc_msgSend(v7, "valueForKey:", CFSTR("created_date")), "intValue");
        v10 = objc_msgSend(v7, "valueForKey:", CFSTR("accessibility_string"));
        if (v8 && v9)
        {
          v11 = v10;
          v12 = xpc_dictionary_create(0, 0, 0);
          IMInsertDatasToXPCDictionary();
          IMInsertNSStringsToXPCDictionary();
          v2 = v18;
          IMInsertIntsToXPCDictionary();
          v15 = v11;
          v16 = 0;
          IMInsertNSStringsToXPCDictionary();
          xpc_array_append_value(v5, v12);
          xpc_release(v12);
        }
        ++v6;
      }
      while (v6 < objc_msgSend(v2, "count", v15, v16));
    }
    v1 = v17;
    v13 = *(void **)(v17 + 32);
    if (v13)
      xpc_dictionary_set_value(v13, "array_result", v5);
    xpc_release(v5);
  }
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(v1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDAttachmentRecordBulkUpdate_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, __int128 a9, uint64_t a10, int a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, int a19, __int128 a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _BOOL4 v24;
  _QWORD v25[6];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  char v42;
  char v43;
  char v44;

  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = sub_1ABC2CFB4;
  v25[3] = &unk_1E5ABF638;
  v38 = a6;
  v39 = a7;
  v25[4] = a5;
  v25[5] = a8;
  v26 = a9;
  v42 = a12;
  v27 = a10;
  v28 = a14;
  v43 = a15;
  v29 = a16;
  v30 = a17;
  v44 = a18;
  v40 = a11;
  v41 = a19;
  v31 = a20;
  v36 = a13;
  v37 = a22;
  v32 = a21;
  v33 = a23;
  v34 = a24;
  v35 = a4;
  v24 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v25, v24);
}

uint64_t sub_1ABC2CFB4(uint64_t a1)
{
  CFStringRef v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t result;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = IMDAttachmentRecordCopyAttachmentForGUID(*(const __CFString **)(a1 + 32));
  v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v10 = v5;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Updating attachment for guid: %@", buf, 0xCu);
      }
    }
    IMDAttachmentRecordBulkUpdate((uint64_t)v2, *(_QWORD *)(a1 + 32), *(int *)(a1 + 160), *(int *)(a1 + 164), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(int *)(a1 + 168), *(_BYTE *)(a1 + 176), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 177), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 178), *(int *)(a1 + 172), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104),
      *(_QWORD *)(a1 + 112),
      *(_QWORD *)(a1 + 152),
      *(_QWORD *)(a1 + 120),
      *(_QWORD *)(a1 + 128));
    CFRelease(v2);
  }
  else if (v3)
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v10 = v7;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "No attachment found to update for guid: %@", buf, 0xCu);
    }
  }
  result = *(_QWORD *)(a1 + 136);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDCNRecordIDAndHistoryTokenForAliases_IPAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2D1DC;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2D1DC(uint64_t a1)
{
  uint64_t result;

  IMDCNRecordIDAndHistoryTokenForAliases(*(void **)(a1 + 32));
  if (*(_QWORD *)(a1 + 40))
    IMInsertDictionariesToXPCDictionary();
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDCNRecordIDForAliases_IPAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2D2A0;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2D2A0(uint64_t a1)
{
  uint64_t result;

  IMDCNRecordIDForAliases(*(void **)(a1 + 32));
  if (*(_QWORD *)(a1 + 40))
    IMInsertDictionariesToXPCDictionary();
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDCNRecordIDAndHistoryTokenForAliases_asyncIPAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v10[8];

  if (qword_1ED0D3728 != -1)
    dispatch_once(&qword_1ED0D3728, &unk_1E5AAF368);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1ABC2D3D0;
  v10[3] = &unk_1E5ABF598;
  v10[4] = a5;
  v10[5] = a6;
  v10[6] = a3;
  v10[7] = a4;
  dispatch_async((dispatch_queue_t)qword_1ED0D3730, v10);
}

dispatch_queue_t sub_1ABC2D3A8()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("_IMDPersistenceQueueForAsyncIPAction", 0);
  qword_1ED0D3730 = (uint64_t)result;
  return result;
}

void sub_1ABC2D3D0(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[4];
  __int128 v4;

  v2 = *(void **)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1ABC2D42C;
  v3[3] = &unk_1E5ABF660;
  v4 = *(_OWORD *)(a1 + 48);
  IMDCNRecordIDAndHistoryTokenForAliasesWithCompletionHandler(v2, v1, v3);
}

uint64_t sub_1ABC2D42C(uint64_t a1)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 32))
    IMInsertDictionariesToXPCDictionary();
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDIsFavoritedContact_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2D4E4;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2D4E4(uint64_t a1)
{
  char v2;
  void *v3;
  uint64_t result;

  v2 = IMDIsFavoritedContact(*(void **)(a1 + 32));
  v3 = *(void **)(a1 + 40);
  if (v3)
    xpc_dictionary_set_BOOL(v3, "BOOL_result", v2);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDCNGivenNameAndBirthdayForHandleID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2D598;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2D598(uint64_t a1)
{
  uint64_t result;

  IMDCNGivenNameAndBirthdayForHandleID(*(void **)(a1 + 32));
  if (*(_QWORD *)(a1 + 40))
    IMInsertDictionariesToXPCDictionary();
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDHandleRecordCreate_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _BOOL4 v9;
  _QWORD v10[11];

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1ABC2D668;
  v10[3] = &unk_1E5ABF688;
  v10[4] = a5;
  v10[5] = a6;
  v10[6] = a7;
  v10[7] = a8;
  v10[8] = a9;
  v10[9] = a3;
  v10[10] = a4;
  v9 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v10, v9);
}

void sub_1ABC2D668(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = IMDHandleRecordCreate(0, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(void **)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v6 = *(_QWORD *)(a1 + 48);
        v11 = 138412546;
        v12 = v5;
        v13 = 2112;
        v14 = v6;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Creating handle record for ID: %@  service: %@", (uint8_t *)&v11, 0x16u);
      }
    }
    _IMDHandleRecordBulkCopyXPCDictionary((uint64_t)v2, *(_QWORD *)(a1 + 72), 1);
  }
  else if (v3)
  {
    v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 48);
      v11 = 138412546;
      v12 = v8;
      v13 = 2112;
      v14 = v9;
      _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "Failed to create handle record for ID: %@  service: %@", (uint8_t *)&v11, 0x16u);
    }
  }
  v10 = *(_QWORD *)(a1 + 80);
  if (v10)
    (*(void (**)(void))(v10 + 16))();
  if (v2)
    CFRelease(v2);
}

void __XPCServerIMDHandleRecordBulkUpdate_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _BOOL4 v10;
  _QWORD v11[11];

  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1ABC2D878;
  v11[3] = &unk_1E5ABF6B0;
  v11[9] = a4;
  v11[10] = a5;
  v11[4] = a6;
  v11[5] = a7;
  v11[6] = a9;
  v11[7] = a8;
  v11[8] = a10;
  v10 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v11, v10);
}

uint64_t sub_1ABC2D878(uint64_t *a1)
{
  const void *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)IMDHandleRecordCreateFromRecordID(0, a1[10]);
  v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = a1[10];
        v6 = a1[4];
        v7 = a1[5];
        v8 = a1[6];
        v9 = a1[7];
        v10 = a1[8];
        v14 = 134219266;
        v15 = v5;
        v16 = 2112;
        v17 = v6;
        v18 = 2112;
        v19 = v7;
        v20 = 2112;
        v21 = v8;
        v22 = 2112;
        v23 = v9;
        v24 = 2112;
        v25 = v10;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Updating handle record for handle ID: %lld   ID: %@  country: %@  unformatted: %@  service: %@ personCentricID: %@", (uint8_t *)&v14, 0x3Eu);
      }
    }
    IMDHandleRecordBulkUpdate((uint64_t)v2, a1[4], a1[5], a1[7], a1[6], a1[8]);
    CFRelease(v2);
  }
  else if (v3)
  {
    v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = a1[10];
      v14 = 134217984;
      v15 = v12;
      _os_log_impl(&dword_1ABB60000, v11, OS_LOG_TYPE_INFO, "Failed handle record record ID: %lld", (uint8_t *)&v14, 0xCu);
    }
  }
  result = a1[9];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDHandleRecordCopyHandleForIDOnService_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v6;
  _QWORD v7[8];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC2DA8C;
  v7[3] = &unk_1E5ABF598;
  v7[4] = a5;
  v7[5] = a6;
  v7[6] = a3;
  v7[7] = a4;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1ABC2DA8C(uint64_t a1)
{
  const void *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)IMDHandleRecordCopyHandleForIDOnService(*(const __CFString **)(a1 + 32), *(const __CFString **)(a1 + 40));
  v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v6 = *(_QWORD *)(a1 + 40);
        v11 = 138412546;
        v12 = v5;
        v13 = 2112;
        v14 = v6;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Copied handle record for ID: %@  service: %@", (uint8_t *)&v11, 0x16u);
      }
    }
    _IMDHandleRecordBulkCopyXPCDictionary((uint64_t)v2, *(_QWORD *)(a1 + 48), 1);
    CFRelease(v2);
  }
  else if (v3)
  {
    v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 40);
      v11 = 138412546;
      v12 = v8;
      v13 = 2112;
      v14 = v9;
      _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "No handle record found for ID: %@  service: %@", (uint8_t *)&v11, 0x16u);
    }
  }
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordUnassociateMessageWithGUIDFromAttachmentWithGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v6;
  _QWORD v7[7];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC2DC7C;
  v7[3] = &unk_1E5ABF480;
  v7[4] = a5;
  v7[5] = a6;
  v7[6] = a4;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1ABC2DC7C(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = a1[4];
      v4 = a1[5];
      v6 = 138412546;
      v7 = v3;
      v8 = 2112;
      v9 = v4;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Unassociating message guid: %@  from attachment: %@", (uint8_t *)&v6, 0x16u);
    }
  }
  IMDMessageRecordUnassociateMessageWithGUIDFromAttachmentWithGUID(a1[4], a1[5]);
  result = a1[6];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v6;
  _QWORD v7[7];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC2DDC4;
  v7[3] = &unk_1E5ABF480;
  v7[4] = a5;
  v7[5] = a6;
  v7[6] = a4;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1ABC2DDC4(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = a1[4];
      v4 = a1[5];
      v6 = 138412546;
      v7 = v3;
      v8 = 2112;
      v9 = v4;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Associating message guid: %@  from attachment: %@", (uint8_t *)&v6, 0x16u);
    }
  }
  IMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID(a1[4], a1[5]);
  result = a1[6];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyMessagesForAssociatedGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2DF0C;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2DF0C(uint64_t a1)
{
  __CFString *v2;
  NSObject *v3;
  uint64_t v4;
  xpc_object_t v5;
  unint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  void *v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (__CFString *)IMDMessageRecordCopyMessagesForAssociatedGUID(*(const __CFString **)(a1 + 32));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v11 = 138412546;
      v12 = v4;
      v13 = 2048;
      v14 = -[__CFString count](v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copying messages for associated guid: %@   (Results: %ld)", (uint8_t *)&v11, 0x16u);
    }
  }
  v5 = xpc_array_create(0, 0);
  if (v5)
  {
    if (-[__CFString count](v2, "count"))
    {
      v6 = 0;
      do
      {
        v7 = -[__CFString objectAtIndex:](v2, "objectAtIndex:", v6);
        v8 = xpc_dictionary_create(0, 0, 0);
        if (v8)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v7, (uint64_t)v8, 1, 0);
          xpc_array_append_value(v5, v8);
          xpc_release(v8);
        }
        ++v6;
      }
      while (v6 < -[__CFString count](v2, "count"));
    }
    v9 = *(void **)(a1 + 40);
    if (v9)
      xpc_dictionary_set_value(v9, "array_result", v5);
    xpc_release(v5);
  }
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyMessagesForGUIDs_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2E12C;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2E12C(uint64_t a1)
{
  const __CFArray *v2;
  NSObject *v3;
  uint64_t v4;
  xpc_object_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;
  void *v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = IMDMessageRecordCopyMessagesForGUIDs(*(const __CFArray **)(a1 + 32));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v13 = 138412546;
      v14 = v4;
      v15 = 2048;
      v16 = -[__CFArray count](v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copying messages for guids: %@   (Results: %ld)", (uint8_t *)&v13, 0x16u);
    }
  }
  v5 = xpc_array_create(0, 0);
  if (v5)
  {
    v6 = -[__CFArray count](v2, "count");
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = v6;
      do
      {
        v9 = -[__CFArray objectAtIndex:](v2, "objectAtIndex:", v7);
        v10 = xpc_dictionary_create(0, 0, 0);
        if (v10)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v9, (uint64_t)v10, 1, 0);
          xpc_array_append_value(v5, v10);
          xpc_release(v10);
        }
        ++v7;
      }
      while (v8 != v7);
    }
    v11 = *(void **)(a1 + 40);
    if (v11)
      xpc_dictionary_set_value(v11, "array_result", v5);
    xpc_release(v5);
  }
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyMessagesBetweenRowIDs_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v6;
  _QWORD v7[8];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC2E354;
  v7[3] = &unk_1E5ABF5C0;
  v7[6] = a5;
  v7[7] = a6;
  v7[4] = a3;
  v7[5] = a4;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1ABC2E354(_QWORD *a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  void *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyMessagesBetweenRowIDs(a1[6], a1[7]);
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = a1[6];
      v4 = a1[7];
      v14 = 134218496;
      v15 = v5;
      v16 = 2048;
      v17 = v4;
      v18 = 2048;
      v19 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copying messages between rowID: %lld  and rowID: %lld   (Results: %ld)", (uint8_t *)&v14, 0x20u);
    }
  }
  v6 = xpc_array_create(0, 0);
  if (v6)
  {
    v7 = objc_msgSend(v2, "count");
    if (v7 >= 1)
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = objc_msgSend(v2, "objectAtIndex:", v8);
        v11 = xpc_dictionary_create(0, 0, 0);
        if (v11)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v10, (uint64_t)v11, 1, 0);
          xpc_array_append_value(v6, v11);
          xpc_release(v11);
        }
        ++v8;
      }
      while (v9 != v8);
    }
    v12 = (void *)a1[4];
    if (v12)
      xpc_dictionary_set_value(v12, "array_result", v6);
    xpc_release(v6);
  }
  if (v2)
    CFRelease(v2);
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyMessageForGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2E588;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

void sub_1ABC2E588(uint64_t a1)
{
  const __CFString *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  const __CFString *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = IMDMessageRecordCopyMessageForGUID(*(const __CFString **)(a1 + 32));
  v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v9 = 138412546;
        v10 = v5;
        v11 = 2112;
        v12 = v2;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Copy message for guid: %@   (Result: %@)", (uint8_t *)&v9, 0x16u);
      }
    }
    _IMDMessageRecordBulkCopyXPCDictionary((uint64_t)v2, *(_QWORD *)(a1 + 40), 1, 0);
  }
  else if (v3)
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v9 = 138412290;
      v10 = v7;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Failed to copy message for guid: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(void))(v8 + 16))();
  if (v2)
    CFRelease(v2);
}

void __XPCServerIMDMessageRecordCopyLastReadMessageForChatIdentifier_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2E774;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

void sub_1ABC2E774(uint64_t a1)
{
  const __CFString *MessageForChatIdentifier;
  int v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  const __CFString *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  MessageForChatIdentifier = IMDMessageRecordCopyLastReadMessageForChatIdentifier(*(const __CFString **)(a1 + 32));
  v3 = IMOSLoggingEnabled();
  if (MessageForChatIdentifier)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v9 = 138412546;
        v10 = v5;
        v11 = 2112;
        v12 = MessageForChatIdentifier;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Copy last read message for chat identifier: %@   (Result: %@)", (uint8_t *)&v9, 0x16u);
      }
    }
    _IMDMessageRecordBulkCopyXPCDictionary((uint64_t)MessageForChatIdentifier, *(_QWORD *)(a1 + 40), 1, 0);
  }
  else if (v3)
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v9 = 138412290;
      v10 = v7;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Failed to copy last read message for chat identifier: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(void))(v8 + 16))();
  if (MessageForChatIdentifier)
    CFRelease(MessageForChatIdentifier);
}

void __XPCServerIMDMessageRecordCopyMessageForRowID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2E960;
  v6[3] = &unk_1E5ABF4F8;
  v6[5] = a4;
  v6[6] = a5;
  v6[4] = a3;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

void sub_1ABC2E960(uint64_t *a1)
{
  const void *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  const void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)IMDMessageRecordCopyMessageForRowID(a1[6]);
  v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = a1[6];
        v9 = 134218242;
        v10 = v5;
        v11 = 2112;
        v12 = v2;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Copy message for RowID: %lld   (Result: %@)", (uint8_t *)&v9, 0x16u);
      }
    }
    _IMDMessageRecordBulkCopyXPCDictionary((uint64_t)v2, a1[4], 1, 0);
  }
  else if (v3)
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = a1[6];
      v9 = 134217984;
      v10 = v7;
      _os_log_impl(&dword_1ABB60000, v6, OS_LOG_TYPE_INFO, "Failed to copy message for rowID: %lld", (uint8_t *)&v9, 0xCu);
    }
  }
  v8 = a1[5];
  if (v8)
    (*(void (**)(void))(v8 + 16))();
  if (v2)
    CFRelease(v2);
}

void __XPCServerIMDMessageRecordCopyLastReceivedMessage_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC2EB48;
  v5[3] = &unk_1E5ABF430;
  v5[4] = a3;
  v5[5] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

void sub_1ABC2EB48(uint64_t a1)
{
  const void *ReceivedMessage;
  int v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  const void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  ReceivedMessage = (const void *)IMDMessageRecordCopyLastReceivedMessage();
  v3 = IMOSLoggingEnabled();
  if (ReceivedMessage)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v7 = 138412290;
        v8 = ReceivedMessage;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Copy last received message (Result: %@)", (uint8_t *)&v7, 0xCu);
      }
    }
    _IMDMessageRecordBulkCopyXPCDictionary((uint64_t)ReceivedMessage, *(_QWORD *)(a1 + 32), 1, 0);
  }
  else if (v3)
  {
    v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_1ABB60000, v5, OS_LOG_TYPE_INFO, "Failed to copy last received message", (uint8_t *)&v7, 2u);
    }
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(void))(v6 + 16))();
  if (ReceivedMessage)
    CFRelease(ReceivedMessage);
}

void __XPCServerIMDMessageRecordCopyLastReceivedMessageLimit_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2ED10;
  v6[3] = &unk_1E5ABF4F8;
  v6[5] = a4;
  v6[6] = a5;
  v6[4] = a3;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2ED10(_QWORD *a1)
{
  void *ReceivedMessageLimit;
  NSObject *v3;
  uint64_t v4;
  xpc_object_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;
  void *v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  ReceivedMessageLimit = (void *)IMDMessageRecordCopyLastReceivedMessageLimit(a1[6]);
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = a1[6];
      v13 = 134218240;
      v14 = v4;
      v15 = 2048;
      v16 = objc_msgSend(ReceivedMessageLimit, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copying last received messages with limit: %lld   (Results: %ld)", (uint8_t *)&v13, 0x16u);
    }
  }
  v5 = xpc_array_create(0, 0);
  if (v5)
  {
    v6 = objc_msgSend(ReceivedMessageLimit, "count");
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = v6;
      do
      {
        v9 = objc_msgSend(ReceivedMessageLimit, "objectAtIndex:", v7);
        v10 = xpc_dictionary_create(0, 0, 0);
        if (v10)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v9, (uint64_t)v10, 1, 0);
          xpc_array_append_value(v5, v10);
          xpc_release(v10);
        }
        ++v7;
      }
      while (v8 != v7);
    }
    v11 = (void *)a1[4];
    if (v11)
      xpc_dictionary_set_value(v11, "array_result", v5);
    xpc_release(v5);
  }
  if (ReceivedMessageLimit)
    CFRelease(ReceivedMessageLimit);
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyMessagesForRowIDs_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2EF38;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2EF38(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  xpc_object_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;
  void *v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyMessagesForRowIDs(*(const __CFArray **)(a1 + 32));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v13 = 138412546;
      v14 = v4;
      v15 = 2048;
      v16 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copying messages for rowIDs: %@   (Results: %ld)", (uint8_t *)&v13, 0x16u);
    }
  }
  v5 = xpc_array_create(0, 0);
  if (v5)
  {
    v6 = objc_msgSend(v2, "count");
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = v6;
      do
      {
        v9 = objc_msgSend(v2, "objectAtIndex:", v7);
        v10 = xpc_dictionary_create(0, 0, 0);
        if (v10)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v9, (uint64_t)v10, 1, 0);
          xpc_array_append_value(v5, v10);
          xpc_release(v10);
        }
        ++v7;
      }
      while (v8 != v7);
    }
    v11 = *(void **)(a1 + 40);
    if (v11)
      xpc_dictionary_set_value(v11, "array_result", v5);
    xpc_release(v5);
  }
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyNewMessagesForKnownRowIDs_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2F160;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2F160(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  xpc_object_t v5;
  void *v6;
  void *v7;
  uint64_t result;
  _QWORD v9[6];
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyNewMessagesForKnownRowIDs(*(void **)(a1 + 32));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v11 = v4;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copying messages for rowIDs: %@", buf, 0xCu);
    }
  }
  v5 = xpc_dictionary_create(0, 0, 0);
  v6 = v5;
  if (v5)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_1ABC2F2D0;
    v9[3] = &unk_1E5ABF6D8;
    v9[4] = *(_QWORD *)(a1 + 40);
    v9[5] = v5;
    objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v9);
    v7 = *(void **)(a1 + 40);
    if (v7)
      xpc_dictionary_set_value(v7, "dictionary_result", v6);
    xpc_release(v6);
  }
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1ABC2F2D0(uint64_t a1, void *a2, void *a3)
{
  xpc_object_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  void *v12;
  xpc_object_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const __CFNumber *v17;
  int64_t valuePtr;

  if (objc_msgSend(a2, "isEqualToString:", CFSTR("newMessages"))
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v6 = xpc_array_create(0, 0);
    v7 = objc_msgSend(a3, "count");
    if (v7 >= 1)
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = objc_msgSend(a3, "objectAtIndex:", v8);
        v11 = xpc_dictionary_create(0, 0, 0);
        if (v11)
        {
          v12 = v11;
          _IMDMessageRecordBulkCopyXPCDictionary(v10, (uint64_t)v11, 1, 0);
          xpc_array_append_value(v6, v12);
          xpc_release(v12);
        }
        ++v8;
      }
      while (v9 != v8);
    }
    if (*(_QWORD *)(a1 + 32))
      xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), "newMessages", v6);
    xpc_release(v6);
  }
  else if (objc_msgSend(a2, "isEqualToString:", CFSTR("readMessageIDs"))
         && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v13 = xpc_array_create(0, 0);
    v14 = objc_msgSend(a3, "count");
    if (v14 >= 1)
    {
      v15 = 0;
      v16 = v14;
      do
      {
        v17 = (const __CFNumber *)objc_msgSend(a3, "objectAtIndex:", v15);
        valuePtr = -1;
        CFNumberGetValue(v17, kCFNumberLongLongType, &valuePtr);
        if (valuePtr != -1)
          xpc_array_set_int64(v13, 0xFFFFFFFFFFFFFFFFLL, valuePtr);
        ++v15;
      }
      while (v16 != v15);
    }
    if (*(_QWORD *)(a1 + 32))
      xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), "readMessageIDs", v13);
    xpc_release(v13);
  }
  else if (objc_msgSend(a2, "isEqualToString:", CFSTR("lastFailedDate")))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      valuePtr = -1;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberLongLongType, &valuePtr);
      if (*(_QWORD *)(a1 + 32))
        xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 40), "lastFailedDate", valuePtr);
    }
  }
}

void __XPCServerIMDMessageRecordDeleteMessagesForGUIDs_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2F58C;
  v6[3] = &unk_1E5ABF430;
  v6[4] = a5;
  v6[5] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2F58C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v5 = 138412290;
      v6 = v3;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Delete messages for guids: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  IMDMessageRecordDeleteMessagesForGUIDs(*(const __CFArray **)(a1 + 32), 0);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordDeleteMessagesOlderThanDays_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC2F6C8;
  v6[3] = &unk_1E5ABF4D0;
  v6[4] = a4;
  v6[5] = a5;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC2F6C8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 40);
      v5 = 134217984;
      v6 = v3;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Delete messages older than %lld days", (uint8_t *)&v5, 0xCu);
    }
  }
  IMDMessageRecordDeleteMessagesOlderThanDays(*(_QWORD *)(a1 + 40), 0);
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyMessagesWithRoomnameOnServiceLimit_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BOOL4 v7;
  _QWORD v8[9];

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABC2F80C;
  v8[3] = &unk_1E5ABF610;
  v8[4] = a5;
  v8[5] = a6;
  v8[7] = a4;
  v8[8] = a7;
  v8[6] = a3;
  v7 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v8, v7);
}

uint64_t sub_1ABC2F80C(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  void *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyMessagesWithRoomnameOnServiceLimit(*(CFStringRef *)(a1 + 32), *(const __CFString **)(a1 + 40), *(_QWORD *)(a1 + 64));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v4 = *(_QWORD *)(a1 + 40);
      v14 = 138412802;
      v15 = v5;
      v16 = 2112;
      v17 = v4;
      v18 = 2048;
      v19 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copying messages for room name: %@ on service: %@   (Results: %ld)", (uint8_t *)&v14, 0x20u);
    }
  }
  v6 = xpc_array_create(0, 0);
  if (v6)
  {
    v7 = objc_msgSend(v2, "count");
    if (v7 >= 1)
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = objc_msgSend(v2, "objectAtIndex:", v8);
        v11 = xpc_dictionary_create(0, 0, 0);
        if (v11)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v10, (uint64_t)v11, 1, 0);
          xpc_array_append_value(v6, v11);
          xpc_release(v11);
        }
        ++v8;
      }
      while (v9 != v8);
    }
    v12 = *(void **)(a1 + 48);
    if (v12)
      xpc_dictionary_set_value(v12, "array_result", v6);
    xpc_release(v6);
  }
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesWithOptionalThreadIdentifierAndLimit_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  _QWORD v11[11];
  char v12;
  char v13;

  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1ABC2FA5C;
  v11[3] = &unk_1E5ABF700;
  v11[4] = a5;
  v11[5] = a6;
  v11[6] = a7;
  v11[7] = a8;
  v12 = a10;
  v13 = a11;
  v11[9] = a4;
  v11[10] = a9;
  v11[8] = a3;
  IMDPersistencePerformBlock(v11, 1);
}

uint64_t sub_1ABC2FA5C(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  const __CFString *v8;
  xpc_object_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  void *v15;
  uint64_t result;
  _BYTE v17[22];
  __int16 v18;
  const __CFString *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimitWithOptionalThreadIdentifier(*(void **)(a1 + 32), *(void **)(a1 + 40), *(_QWORD *)(a1 + 48), *(const __CFString **)(a1 + 56), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_QWORD *)(a1 + 80));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v4 = *(_QWORD *)(a1 + 40);
      v6 = *(unsigned __int8 *)(a1 + 88);
      v7 = objc_msgSend(v2, "count");
      v8 = CFSTR("YES");
      *(_DWORD *)v17 = 138413058;
      *(_QWORD *)&v17[4] = v5;
      *(_WORD *)&v17[12] = 2112;
      if (!v6)
        v8 = CFSTR("NO");
      *(_QWORD *)&v17[14] = v4;
      v18 = 2112;
      v19 = v8;
      v20 = 2048;
      v21 = v7;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copying messages for chat identifiers: %@ on services: %@ onlyMessages: %@   (Results: %ld)", v17, 0x2Au);
    }
  }
  v9 = xpc_array_create(0, 0);
  if (v9)
  {
    v10 = objc_msgSend(v2, "count");
    if (v10 >= 1)
    {
      v11 = 0;
      v12 = v10;
      do
      {
        v13 = objc_msgSend(v2, "objectAtIndex:", v11, *(_OWORD *)v17);
        v14 = xpc_dictionary_create(0, 0, 0);
        if (v14)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v13, (uint64_t)v14, 1, 0);
          xpc_array_append_value(v9, v14);
          xpc_release(v14);
        }
        ++v11;
      }
      while (v12 != v11);
    }
    v15 = *(void **)(a1 + 64);
    if (v15)
      xpc_dictionary_set_value(v15, "array_result", v9);
    xpc_release(v9);
  }
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifier_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _BOOL4 v10;
  _QWORD v11[12];

  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1ABC2FCD4;
  v11[3] = &unk_1E5ABF728;
  v11[4] = a5;
  v11[5] = a6;
  v11[10] = a9;
  v11[11] = a10;
  v11[6] = a7;
  v11[7] = a8;
  v11[8] = a3;
  v11[9] = a4;
  v10 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v11, v10);
}

uint64_t sub_1ABC2FCD4(uint64_t a1)
{
  const __CFArray *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  xpc_object_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t result;
  BOOL v21;
  BOOL value;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  value = 1;
  v21 = 1;
  v2 = IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesBeforeAndAfterGUIDWithOptionalThreadIdentifier(*(void **)(a1 + 32), *(void **)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(const __CFString **)(a1 + 56), (void (*)(void))&value, (void (*)(void))&v21);
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v4 = *(_QWORD *)(a1 + 40);
      v6 = -[__CFArray count](v2, "count");
      v7 = *(_QWORD *)(a1 + 80);
      v8 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)buf = 138413314;
      v24 = v5;
      v25 = 2112;
      v26 = v4;
      v27 = 2048;
      v28 = v6;
      v29 = 2048;
      v30 = v7;
      v31 = 2048;
      v32 = v8;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copying limited number of messages for chat identifiers: %@ on services: %@  (Results: %ld) numberOfMessagesBefore: %lld numberOfMessagesAfter: %lld", buf, 0x34u);
    }
  }
  v9 = xpc_array_create(0, 0);
  v10 = xpc_BOOL_create(value);
  v11 = xpc_BOOL_create(v21);
  if (v9)
  {
    v12 = -[__CFArray count](v2, "count");
    if (v12 >= 1)
    {
      v13 = 0;
      v14 = v12;
      do
      {
        v15 = -[__CFArray objectAtIndex:](v2, "objectAtIndex:", v13);
        v16 = xpc_dictionary_create(0, 0, 0);
        if (v16)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v15, (uint64_t)v16, 1, 0);
          xpc_array_append_value(v9, v16);
          xpc_release(v16);
        }
        ++v13;
      }
      while (v14 != v13);
    }
    v17 = *(void **)(a1 + 64);
    if (v17)
      xpc_dictionary_set_value(v17, "array_result", v9);
    xpc_release(v9);
  }
  if (v10)
  {
    v18 = *(void **)(a1 + 64);
    if (v18)
      xpc_dictionary_set_value(v18, "has_messages_before", v10);
    xpc_release(v10);
  }
  if (v11)
  {
    v19 = *(void **)(a1 + 64);
    if (v19)
      xpc_dictionary_set_value(v19, "has_messages_after", v11);
    xpc_release(v11);
  }
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyFrequentRepliesForChatIdentifiersOnServicesLimit_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BOOL4 v7;
  _QWORD v8[9];

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABC2FFA8;
  v8[3] = &unk_1E5ABF610;
  v8[4] = a5;
  v8[5] = a6;
  v8[7] = a4;
  v8[8] = a7;
  v8[6] = a3;
  v7 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v8, v7);
}

uint64_t sub_1ABC2FFA8(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyFrequentRepliesForChatIdentifiersOnServicesUpToLimit(*(void **)(a1 + 32), *(void **)(a1 + 40), *(_QWORD *)(a1 + 64));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v4 = *(_QWORD *)(a1 + 40);
      v12 = 138412802;
      v13 = v5;
      v14 = 2112;
      v15 = v4;
      v16 = 2048;
      v17 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copying frequent replies for chat identifiers: %@ on services: %@   (Results: %ld)", (uint8_t *)&v12, 0x20u);
    }
  }
  v6 = xpc_array_create(0, 0);
  if (v6)
  {
    v7 = objc_msgSend(v2, "count");
    if (v7 >= 1)
    {
      v8 = 0;
      v9 = v7;
      do
        xpc_array_set_string(v6, 0xFFFFFFFFFFFFFFFFLL, (const char *)objc_msgSend((id)objc_msgSend(v2, "objectAtIndex:", v8++), "UTF8String"));
      while (v9 != v8);
    }
    v10 = *(void **)(a1 + 48);
    if (v10)
      xpc_dictionary_set_value(v10, "array_result", v6);
    xpc_release(v6);
  }
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyGUIDsForMessagesWithChatIdentifiersOnServices_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v6;
  _QWORD v7[8];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC301A8;
  v7[3] = &unk_1E5ABF598;
  v7[4] = a5;
  v7[5] = a6;
  v7[6] = a3;
  v7[7] = a4;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1ABC301A8(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  xpc_object_t v11;
  void *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyGUIDsForMessagesWithChatIdentifiersOnServices(*(void **)(a1 + 32), *(void **)(a1 + 40));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v4 = *(_QWORD *)(a1 + 40);
      v14 = 138412802;
      v15 = v5;
      v16 = 2112;
      v17 = v4;
      v18 = 2048;
      v19 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copying guids for chat identifiers: %@ on services: %@   (Results: %ld)", (uint8_t *)&v14, 0x20u);
    }
  }
  v6 = xpc_array_create(0, 0);
  if (v6)
  {
    v7 = objc_msgSend(v2, "count");
    if (v7 >= 1)
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = (void *)objc_msgSend(v2, "objectAtIndex:", v8);
        v11 = xpc_dictionary_create(0, 0, 0);
        if (v11)
        {
          xpc_array_set_string(v6, 0xFFFFFFFFFFFFFFFFLL, (const char *)objc_msgSend(v10, "UTF8String"));
          xpc_release(v11);
        }
        ++v8;
      }
      while (v9 != v8);
    }
    v12 = *(void **)(a1 + 48);
    if (v12)
      xpc_dictionary_set_value(v12, "array_result", v6);
    xpc_release(v6);
  }
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDChatRemapChatsWithLastAddressedSIMIDToNewLastAddressedIDs_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BOOL4 v7;
  _QWORD v8[8];

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABC303D4;
  v8[3] = &unk_1E5ABF598;
  v8[4] = a5;
  v8[5] = a6;
  v8[6] = a7;
  v8[7] = a4;
  v7 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v8, v7);
}

uint64_t sub_1ABC303D4(uint64_t a1)
{
  uint64_t result;

  IMDChatRemapChatsWithLastAddressedSIMIDToNewLastAddressedIDs(*(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDChatGetMessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v6;
  _QWORD v7[8];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC30474;
  v7[3] = &unk_1E5ABF598;
  v7[4] = a5;
  v7[5] = a6;
  v7[6] = a3;
  v7[7] = a4;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1ABC30474(uint64_t a1)
{
  void *MessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  MessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs = (void *)IMDChatGetMessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs(*(void **)(a1 + 32), *(void **)(a1 + 40));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      v12 = v4;
      v13 = 2112;
      v14 = v5;
      v15 = 2112;
      v16 = MessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Getting last addressed labelID and last message date for chat identifiers: %@ and last addressed labelIDs: %@   (Results: %@)", buf, 0x20u);
    }
  }
  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    if (objc_msgSend(MessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs, "count"))
    {
      if (objc_msgSend(MessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs, "objectForKeyedSubscript:", CFSTR("labelID")))
      {
        v9 = objc_msgSend(MessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs, "objectForKeyedSubscript:", CFSTR("labelID"));
        v10 = 0;
        IMInsertNSStringsToXPCDictionary();
      }
      if (objc_msgSend(MessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs, "objectForKeyedSubscript:", CFSTR("date"), v9, v10))
      {
        xpc_dictionary_set_int64(v6, "date", objc_msgSend((id)objc_msgSend(MessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs, "objectForKeyedSubscript:", CFSTR("date")), "integerValue"));
      }
    }
    v7 = *(void **)(a1 + 48);
    if (v7)
      xpc_dictionary_set_value(v7, "dictionary_result", v6);
    xpc_release(v6);
  }
  if (MessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs)
    CFRelease(MessageDateAndLastAddressedLabelIDFromChatIdentifiersAndLastAddressedLabelIDs);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDChatGetMessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v6;
  _QWORD v7[8];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC30698;
  v7[3] = &unk_1E5ABF598;
  v7[4] = a5;
  v7[5] = a6;
  v7[6] = a3;
  v7[7] = a4;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1ABC30698(uint64_t a1)
{
  void *MessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  MessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles = (void *)IMDChatGetMessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles(*(void **)(a1 + 32), *(void **)(a1 + 40));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      v12 = v4;
      v13 = 2112;
      v14 = v5;
      v15 = 2112;
      v16 = MessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Getting last addressed handle and last message date for chat identifiers: %@ and last addressed handles: %@   (Results: %@)", buf, 0x20u);
    }
  }
  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    if (objc_msgSend(MessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles, "count"))
    {
      if (objc_msgSend(MessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles, "objectForKeyedSubscript:", CFSTR("handle")))
      {
        v9 = objc_msgSend(MessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles, "objectForKeyedSubscript:", CFSTR("handle"));
        v10 = 0;
        IMInsertNSStringsToXPCDictionary();
      }
      if (objc_msgSend(MessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles, "objectForKeyedSubscript:", CFSTR("date"), v9, v10))
      {
        xpc_dictionary_set_int64(v6, "date", objc_msgSend((id)objc_msgSend(MessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles, "objectForKeyedSubscript:", CFSTR("date")), "integerValue"));
      }
    }
    v7 = *(void **)(a1 + 48);
    if (v7)
      xpc_dictionary_set_value(v7, "dictionary_result", v6);
    xpc_release(v6);
  }
  if (MessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles)
    CFRelease(MessageDateAndLastAddressedHandleFromChatIdentifiersAndLastAddressedHandles);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServices_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BOOL4 v7;
  _QWORD v8[8];

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABC308BC;
  v8[3] = &unk_1E5ABF598;
  v8[4] = a5;
  v8[5] = a6;
  v8[6] = a7;
  v8[7] = a4;
  v7 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v8, v7);
}

uint64_t sub_1ABC308BC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = *(_QWORD *)(a1 + 40);
      v5 = *(_QWORD *)(a1 + 48);
      v7 = 138412802;
      v8 = v3;
      v9 = 2112;
      v10 = v4;
      v11 = 2112;
      v12 = v5;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Delete messages guids: %@ for chat identifiers: %@ on services: %@", (uint8_t *)&v7, 0x20u);
    }
  }
  IMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServices(*(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyMessagesWithHandleOnServiceLimit_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BOOL4 v7;
  _QWORD v8[9];

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABC30A18;
  v8[3] = &unk_1E5ABF610;
  v8[4] = a5;
  v8[5] = a6;
  v8[7] = a4;
  v8[8] = a7;
  v8[6] = a3;
  v7 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v8, v7);
}

uint64_t sub_1ABC30A18(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  xpc_object_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t v12;
  void *v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyMessagesWithHandleOnServiceLimit(*(const __CFString **)(a1 + 32), *(const __CFString **)(a1 + 40), *(_QWORD *)(a1 + 64));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v4 = *(_QWORD *)(a1 + 40);
      v6 = *(_QWORD *)(a1 + 64);
      v15 = 138413058;
      v16 = v5;
      v17 = 2112;
      v18 = v4;
      v19 = 2048;
      v20 = v6;
      v21 = 2048;
      v22 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copy messages with for handle: %@ on service: %@  limit: %lld  (Results: %ld)", (uint8_t *)&v15, 0x2Au);
    }
  }
  v7 = xpc_array_create(0, 0);
  if (v7)
  {
    v8 = objc_msgSend(v2, "count");
    if (v8 >= 1)
    {
      v9 = 0;
      v10 = v8;
      do
      {
        v11 = objc_msgSend(v2, "objectAtIndex:", v9);
        v12 = xpc_dictionary_create(0, 0, 0);
        if (v12)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v11, (uint64_t)v12, 1, 0);
          xpc_array_append_value(v7, v12);
          xpc_release(v12);
        }
        ++v9;
      }
      while (v10 != v9);
    }
    v13 = *(void **)(a1 + 48);
    if (v13)
      xpc_dictionary_set_value(v13, "array_result", v7);
    xpc_release(v7);
  }
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyMessageMatchingBodyStringWithChatIdentifiersServicesSkippingGUIDs_IPCAction(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  _BOOL4 v12;
  _QWORD v13[13];
  char v14;

  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1ABC30C78;
  v13[3] = &unk_1E5ABF750;
  v13[4] = a6;
  v13[5] = a7;
  v13[6] = a8;
  v13[7] = a9;
  *(double *)&v13[12] = a1;
  v14 = a10;
  v13[8] = a11;
  v13[9] = a12;
  v13[10] = a4;
  v13[11] = a5;
  v12 = sub_1ABC29340(a4);
  IMDPersistencePerformBlock(v13, v12);
}

void sub_1ABC30C78(uint64_t a1)
{
  const void *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  const void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)IMDMessageRecordCopyMessageMatchingBodyStringWithChatIdentifiersServicesSkippingGUIDs(*(const __CFString **)(a1 + 32), *(const __CFString **)(a1 + 40), *(const __CFArray **)(a1 + 48), *(const __CFArray **)(a1 + 56), *(unsigned __int8 *)(a1 + 104), *(const __CFArray **)(a1 + 64), *(const __CFArray **)(a1 + 72), *(double *)(a1 + 96));
  v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 64);
        v6 = *(_QWORD *)(a1 + 72);
        v7 = *(_QWORD *)(a1 + 40);
        v8 = *(_QWORD *)(a1 + 48);
        v15 = 138413314;
        v16 = v7;
        v17 = 2112;
        v18 = v5;
        v19 = 2112;
        v20 = v6;
        v21 = 2112;
        v22 = v8;
        v23 = 2112;
        v24 = v2;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Copy messages with handle: %@ matching body with for chatidentifiers: %@ on services: %@  skipping: %@  (Result: %@)", (uint8_t *)&v15, 0x34u);
      }
    }
    _IMDMessageRecordBulkCopyXPCDictionary((uint64_t)v2, *(_QWORD *)(a1 + 80), 1, 0);
  }
  else if (v3)
  {
    v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 64);
      v11 = *(_QWORD *)(a1 + 72);
      v12 = *(_QWORD *)(a1 + 40);
      v13 = *(_QWORD *)(a1 + 48);
      v15 = 138413058;
      v16 = v12;
      v17 = 2112;
      v18 = v10;
      v19 = 2112;
      v20 = v11;
      v21 = 2112;
      v22 = v13;
      _os_log_impl(&dword_1ABB60000, v9, OS_LOG_TYPE_INFO, "No message found with handle: %@ matching body with for chatidentifiers: %@ on services: %@  skipping: %@", (uint8_t *)&v15, 0x2Au);
    }
  }
  v14 = *(_QWORD *)(a1 + 88);
  if (v14)
    (*(void (**)(void))(v14 + 16))();
  if (v2)
    CFRelease(v2);
}

void __XPCServerIMDMessageRecordCopyMessageMatchingBodyStringWithHandleSkippingServicesSkippingGUIDs_IPCAction(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _BOOL4 v9;
  _QWORD v10[11];

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1ABC30EBC;
  v10[3] = &unk_1E5ABF6B0;
  v10[4] = a6;
  v10[5] = a7;
  v10[6] = a8;
  v10[7] = a9;
  *(double *)&v10[10] = a1;
  v10[8] = a4;
  v10[9] = a5;
  v9 = sub_1ABC29340(a4);
  IMDPersistencePerformBlock(v10, v9);
}

void sub_1ABC30EBC(uint64_t a1)
{
  const void *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  const void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)IMDMessageRecordCopyMessageMatchingBodyStringWithHandleSkippingServicesSkippingGUIDs(*(const __CFString **)(a1 + 32), *(const __CFString **)(a1 + 40), *(const __CFArray **)(a1 + 48), *(const __CFArray **)(a1 + 56), *(double *)(a1 + 80));
  v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 40);
        v6 = *(_QWORD *)(a1 + 48);
        v11 = 138412802;
        v12 = v5;
        v13 = 2112;
        v14 = v6;
        v15 = 2112;
        v16 = v2;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Copy messages with handle: %@ matching body skipping services: %@  (Result: %@)", (uint8_t *)&v11, 0x20u);
      }
    }
    _IMDMessageRecordBulkCopyXPCDictionary((uint64_t)v2, *(_QWORD *)(a1 + 64), 1, 0);
  }
  else if (v3)
  {
    v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      v11 = 138412546;
      v12 = v8;
      v13 = 2112;
      v14 = v9;
      _os_log_impl(&dword_1ABB60000, v7, OS_LOG_TYPE_INFO, "No message found with handle: %@ matching body skipping services: %@", (uint8_t *)&v11, 0x16u);
    }
  }
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
    (*(void (**)(void))(v10 + 16))();
  if (v2)
    CFRelease(v2);
}

void __XPCServerIMDMessageRecordCopyMessageMatchingBodyStringWithHandleMatchingServiceMatchingSOSSkippingGUID_IPCAction(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  _BOOL4 v10;
  _QWORD v11[11];
  char v12;

  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1ABC310D8;
  v11[3] = &unk_1E5ABF778;
  v11[4] = a6;
  v11[5] = a7;
  v12 = a9;
  v11[6] = a8;
  v11[7] = a10;
  *(double *)&v11[10] = a1;
  v11[8] = a4;
  v11[9] = a5;
  v10 = sub_1ABC29340(a4);
  IMDPersistencePerformBlock(v11, v10);
}

void sub_1ABC310D8(uint64_t a1)
{
  const void *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)IMDMessageRecordCopyMessageMatchingBodyStringWithHandleMatchingServiceMatchingSOSSkippingGUID(*(const __CFString **)(a1 + 32), *(const __CFString **)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 56), *(double *)(a1 + 80));
  v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 40);
        v6 = *(_QWORD *)(a1 + 48);
        v7 = *(unsigned __int8 *)(a1 + 88);
        v12 = 138413058;
        v13 = v5;
        v14 = 2112;
        v15 = v6;
        v16 = 1024;
        v17 = v7;
        v18 = 2112;
        v19 = v2;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Copy SOS messages with handle: %@ matching body matching service: %@ matchingIsSOS: %d (Result: %@)", (uint8_t *)&v12, 0x26u);
      }
    }
    _IMDMessageRecordBulkCopyXPCDictionary((uint64_t)v2, *(_QWORD *)(a1 + 64), 1, 0);
  }
  else if (v3)
  {
    v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(a1 + 48);
      v12 = 138412546;
      v13 = v9;
      v14 = 2112;
      v15 = v10;
      _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "No SOS duplicate message found with handle: %@ matching body matching service: %@", (uint8_t *)&v12, 0x16u);
    }
  }
  v11 = *(_QWORD *)(a1 + 72);
  if (v11)
    (*(void (**)(void))(v11 + 16))();
  if (v2)
    CFRelease(v2);
}

void __XPCServerIMDMessageRecordCopyMessageWithHandleOnServiceWithReplaceID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BOOL4 v7;
  _QWORD v8[9];

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1ABC312FC;
  v8[3] = &unk_1E5ABF610;
  v8[4] = a5;
  v8[5] = a6;
  v8[7] = a4;
  v8[8] = a7;
  v8[6] = a3;
  v7 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v8, v7);
}

void sub_1ABC312FC(uint64_t a1)
{
  const void *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  const void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)IMDMessageRecordCopyMessageWithHandleOnServiceWithReplaceID(*(const __CFString **)(a1 + 32), *(const __CFString **)(a1 + 40), *(_QWORD *)(a1 + 64));
  v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v6 = *(_QWORD *)(a1 + 40);
        v7 = *(_QWORD *)(a1 + 64);
        v13 = 138413058;
        v14 = v5;
        v15 = 2112;
        v16 = v6;
        v17 = 2048;
        v18 = v7;
        v19 = 2112;
        v20 = v2;
        _os_log_impl(&dword_1ABB60000, v4, OS_LOG_TYPE_INFO, "Copy message with handle: %@ on service: %@  replaceID: %lld (Result: %@)", (uint8_t *)&v13, 0x2Au);
      }
    }
    _IMDMessageRecordBulkCopyXPCDictionary((uint64_t)v2, *(_QWORD *)(a1 + 48), 1, 0);
  }
  else if (v3)
  {
    v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 64);
      v13 = 138412802;
      v14 = v9;
      v15 = 2112;
      v16 = v10;
      v17 = 2048;
      v18 = v11;
      _os_log_impl(&dword_1ABB60000, v8, OS_LOG_TYPE_INFO, "No message found with handle: %@ on service: %@  replaceID: %lld", (uint8_t *)&v13, 0x20u);
    }
  }
  v12 = *(_QWORD *)(a1 + 56);
  if (v12)
    (*(void (**)(void))(v12 + 16))();
  if (v2)
    CFRelease(v2);
}

void __XPCServerIMDMessageRecordCopyUndeliveredOneToOneiMessages_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC31524;
  v6[3] = &unk_1E5ABF4F8;
  v6[5] = a4;
  v6[6] = a5;
  v6[4] = a3;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC31524(_QWORD *a1)
{
  void *v2;
  NSObject *v3;
  xpc_object_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  void *v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyUndeliveredOneToOneiMessages(a1[6]);
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v12 = 134217984;
      v13 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copy undelivered 1-1 messages (Results: %ld)", (uint8_t *)&v12, 0xCu);
    }
  }
  v4 = xpc_array_create(0, 0);
  if (v4)
  {
    v5 = objc_msgSend(v2, "count");
    if (v5 >= 1)
    {
      v6 = 0;
      v7 = v5;
      do
      {
        v8 = objc_msgSend(v2, "objectAtIndex:", v6);
        v9 = xpc_dictionary_create(0, 0, 0);
        if (v9)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v8, (uint64_t)v9, 1, 0);
          xpc_array_append_value(v4, v9);
          xpc_release(v9);
        }
        ++v6;
      }
      while (v7 != v6);
    }
    v10 = (void *)a1[4];
    if (v10)
      xpc_dictionary_set_value(v10, "array_result", v4);
    xpc_release(v4);
  }
  if (v2)
    CFRelease(v2);
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyExpiringOrExpiredMessages_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC3173C;
  v6[3] = &unk_1E5ABF4F8;
  v6[5] = a4;
  v6[6] = a5;
  v6[4] = a3;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC3173C(_QWORD *a1)
{
  void *v2;
  NSObject *v3;
  xpc_object_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  void *v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyExpiringOrExpiredMessages(a1[6]);
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v12 = 134217984;
      v13 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copy expiring or expired messages (Results: %ld)", (uint8_t *)&v12, 0xCu);
    }
  }
  v4 = xpc_array_create(0, 0);
  if (v4)
  {
    v5 = objc_msgSend(v2, "count");
    if (v5 >= 1)
    {
      v6 = 0;
      v7 = v5;
      do
      {
        v8 = objc_msgSend(v2, "objectAtIndex:", v6);
        v9 = xpc_dictionary_create(0, 0, 0);
        if (v9)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v8, (uint64_t)v9, 1, 0);
          xpc_array_append_value(v4, v9);
          xpc_release(v9);
        }
        ++v6;
      }
      while (v7 != v6);
    }
    v10 = (void *)a1[4];
    if (v10)
      xpc_dictionary_set_value(v10, "array_result", v4);
    xpc_release(v4);
  }
  if (v2)
    CFRelease(v2);
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyUnsentUnfailedMessages_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC31954;
  v6[3] = &unk_1E5ABF4F8;
  v6[5] = a4;
  v6[6] = a5;
  v6[4] = a3;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC31954(_QWORD *a1)
{
  void *v2;
  NSObject *v3;
  xpc_object_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  void *v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyUnsentUnfailedMessages(a1[6]);
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v12 = 134217984;
      v13 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copy unsent messages (Results: %ld)", (uint8_t *)&v12, 0xCu);
    }
  }
  v4 = xpc_array_create(0, 0);
  if (v4)
  {
    v5 = objc_msgSend(v2, "count");
    if (v5 >= 1)
    {
      v6 = 0;
      v7 = v5;
      do
      {
        v8 = objc_msgSend(v2, "objectAtIndex:", v6);
        v9 = xpc_dictionary_create(0, 0, 0);
        if (v9)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v8, (uint64_t)v9, 1, 0);
          xpc_array_append_value(v4, v9);
          xpc_release(v9);
        }
        ++v6;
      }
      while (v7 != v6);
    }
    v10 = (void *)a1[4];
    if (v10)
      xpc_dictionary_set_value(v10, "array_result", v4);
    xpc_release(v4);
  }
  if (v2)
    CFRelease(v2);
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyMessageActionItemsForOriginalMessageGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC31B6C;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC31B6C(uint64_t *a1)
{
  void *v2;
  NSObject *v3;
  xpc_object_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  void *v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyMessageActionItemsForOriginalMessageGUID(a1[4]);
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v12 = 134217984;
      v13 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copy message action items for original message guid (Results: %ld)", (uint8_t *)&v12, 0xCu);
    }
  }
  v4 = xpc_array_create(0, 0);
  if (v4)
  {
    v5 = objc_msgSend(v2, "count");
    if (v5 >= 1)
    {
      v6 = 0;
      v7 = v5;
      do
      {
        v8 = objc_msgSend(v2, "objectAtIndex:", v6);
        v9 = xpc_dictionary_create(0, 0, 0);
        if (v9)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v8, (uint64_t)v9, 1, 0);
          xpc_array_append_value(v4, v9);
          xpc_release(v9);
        }
        ++v6;
      }
      while (v7 != v6);
    }
    v10 = (void *)a1[5];
    if (v10)
      xpc_dictionary_set_value(v10, "array_result", v4);
    xpc_release(v4);
  }
  if (v2)
    CFRelease(v2);
  result = a1[6];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCountAllUnreadMessages_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC31D80;
  v5[3] = &unk_1E5ABF430;
  v5[4] = a3;
  v5[5] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC31D80(uint64_t a1)
{
  int64_t v2;
  NSObject *v3;
  uint64_t result;
  int v5;
  int64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = IMDMessageRecordCountAllUnreadMessages();
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = 134217984;
      v6 = v2;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Unread message count: %lld", (uint8_t *)&v5, 0xCu);
    }
  }
  if (v2)
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "sint64_result", v2);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCountAllUnreadMessagesForChatGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC31EDC;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC31EDC(uint64_t a1)
{
  int64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  int64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = IMDMessageRecordCountAllUnreadMessagesForChatGUID(*(const __CFString **)(a1 + 32));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v6 = 134218242;
      v7 = v2;
      v8 = 2112;
      v9 = v4;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Unread message count: %lld  for chat GUID: %@", (uint8_t *)&v6, 0x16u);
    }
  }
  if (v2)
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 40), "sint64_result", v2);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCountAllUnreadMessagesForChatRowID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC3204C;
  v6[3] = &unk_1E5ABF4F8;
  v6[5] = a4;
  v6[6] = a5;
  v6[4] = a3;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC3204C(uint64_t a1)
{
  int64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  int64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = IMDMessageRecordCountAllUnreadMessagesForChatRowID(*(_QWORD *)(a1 + 48));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 48);
      v6 = 134218240;
      v7 = v2;
      v8 = 2048;
      v9 = v4;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Unread message count: %lld  for chat rowID: %lld", (uint8_t *)&v6, 0x16u);
    }
  }
  if (v2)
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "sint64_result", v2);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordLastFailedMessageRowID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC321B8;
  v5[3] = &unk_1E5ABF430;
  v5[4] = a3;
  v5[5] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC321B8(uint64_t a1)
{
  int64_t FailedMessageRowID;
  NSObject *v3;
  uint64_t result;
  int v5;
  int64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  FailedMessageRowID = IMDMessageRecordLastFailedMessageRowID();
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = 134217984;
      v6 = FailedMessageRowID;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Last failed message rowID: %lld", (uint8_t *)&v5, 0xCu);
    }
  }
  if (FailedMessageRowID)
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "sint64_result", FailedMessageRowID);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordLastSyncedMessageRowID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC32310;
  v5[3] = &unk_1E5ABF430;
  v5[4] = a3;
  v5[5] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC32310(uint64_t a1)
{
  int64_t SyncedMessageRowID;
  NSObject *v3;
  uint64_t result;
  int v5;
  int64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  SyncedMessageRowID = IMDMessageRecordLastSyncedMessageRowID();
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = 134217984;
      v6 = SyncedMessageRowID;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Last synced message rowID: %lld", (uint8_t *)&v5, 0xCu);
    }
  }
  if (SyncedMessageRowID)
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "sint64_result", SyncedMessageRowID);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordLastFailedMessageDate_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC32468;
  v5[3] = &unk_1E5ABF430;
  v5[4] = a3;
  v5[5] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC32468(uint64_t a1)
{
  int64_t FailedMessageDate;
  NSObject *v3;
  uint64_t result;
  int v5;
  int64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  FailedMessageDate = IMDMessageRecordLastFailedMessageDate();
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = 134217984;
      v6 = FailedMessageDate;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Last failed message rowID: %lld", (uint8_t *)&v5, 0xCu);
    }
  }
  if (FailedMessageDate)
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "sint64_result", FailedMessageDate);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordGetMostRecentMessageDate_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC325C0;
  v5[3] = &unk_1E5ABF430;
  v5[4] = a3;
  v5[5] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC325C0(uint64_t a1)
{
  int64_t MostRecentMessageDate;
  NSObject *v3;
  uint64_t result;
  int v5;
  int64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  MostRecentMessageDate = IMDMessageRecordGetMostRecentMessageDate();
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = 134217984;
      v6 = MostRecentMessageDate;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Most recent message date: %lld", (uint8_t *)&v5, 0xCu);
    }
  }
  if (MostRecentMessageDate)
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "sint64_result", MostRecentMessageDate);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordGetIndentifierForMessageWithGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC3271C;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC3271C(uint64_t a1)
{
  const __CFString *IndentifierForMessageWithGUID;
  NSObject *v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  __int16 v8;
  const __CFString *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  IndentifierForMessageWithGUID = IMDMessageRecordGetIndentifierForMessageWithGUID(*(CFStringRef *)(a1 + 32));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v6 = 138412546;
      v7 = v4;
      v8 = 2048;
      v9 = IndentifierForMessageWithGUID;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Get identifier for message guid: %@  result: %lld", (uint8_t *)&v6, 0x16u);
    }
  }
  if (IndentifierForMessageWithGUID)
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 40), "sint64_result", (int64_t)IndentifierForMessageWithGUID);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordMaxMessageIDFromChatMessageJoin_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC32888;
  v5[3] = &unk_1E5ABF430;
  v5[4] = a3;
  v5[5] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC32888(uint64_t a1)
{
  int64_t v2;
  uint64_t result;

  v2 = IMDMessageRecordMaxMessageIDFromChatMessageJoin();
  if (v2)
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "sint64_result", v2);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordGetMessagesSequenceNumber_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC32934;
  v5[3] = &unk_1E5ABF430;
  v5[4] = a3;
  v5[5] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC32934(uint64_t a1)
{
  int64_t MessagesSequenceNumber;
  NSObject *v3;
  uint64_t result;
  int v5;
  int64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  MessagesSequenceNumber = IMDMessageRecordGetMessagesSequenceNumber();
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = 134217984;
      v6 = MessagesSequenceNumber;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Get messages sequence number: %lld", (uint8_t *)&v5, 0xCu);
    }
  }
  if (MessagesSequenceNumber)
    xpc_dictionary_set_int64(*(xpc_object_t *)(a1 + 32), "int64_result", MessagesSequenceNumber);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordMarkMessageGUIDAsDeduplicated_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC32A8C;
  v6[3] = &unk_1E5ABF430;
  v6[4] = a5;
  v6[5] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC32A8C(uint64_t a1)
{
  CFIndex v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    IMDMessageRecordMarkMessageGUIDAsDeduplicated(v2);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordMarkFailedAllUnsentUnfailedMessages_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[5];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC32B28;
  v5[3] = &unk_1E5AB43E8;
  v5[4] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC32B28(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  uint8_t v4[16];

  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Mark all unsent messages failed", v4, 2u);
    }
  }
  IMDMessageRecordMarkFailedAllUnsentUnfailedMessages();
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordDeleteOrphanedMessages_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v4;
  _QWORD v5[5];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1ABC32C20;
  v5[3] = &unk_1E5AB43E8;
  v5[4] = a4;
  v4 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v5, v4);
}

uint64_t sub_1ABC32C20(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  uint8_t v4[16];

  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1ABB60000, v2, OS_LOG_TYPE_INFO, "Delete orphaned messages", v4, 2u);
    }
  }
  IMDMessageRecordDeleteOrphanedMessages();
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyAndMarkAsReadMessagesPriorToGuidMatchingChatGUIDs_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  _BOOL4 v8;
  _QWORD v9[9];
  char v10;

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1ABC32D24;
  v9[3] = &unk_1E5ABF7A0;
  v9[4] = a5;
  v9[5] = a6;
  v10 = a8;
  v9[6] = a7;
  v9[7] = a3;
  v9[8] = a4;
  v8 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v9, v8);
}

uint64_t sub_1ABC32D24(uint64_t a1)
{
  CFArrayRef MessagesPriorToGuidMatchingChatGUIDs;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  xpc_object_t v11;
  void *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  MessagesPriorToGuidMatchingChatGUIDs = IMDMessageRecordCopyAndMarkAsReadMessagesPriorToGuidMatchingChatGUIDs(*(__CFString **)(a1 + 32), *(const __CFArray **)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = *(_QWORD *)(a1 + 40);
      v14 = 138412802;
      v15 = v5;
      v16 = 2112;
      v17 = v4;
      v18 = 2048;
      v19 = -[__CFArray count](MessagesPriorToGuidMatchingChatGUIDs, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copy messages guids, and mark read, for chatGUIDs: %@ up to guid: %@  (Results: %ld)", (uint8_t *)&v14, 0x20u);
    }
  }
  v6 = xpc_array_create(0, 0);
  if (v6)
  {
    v7 = -[__CFArray count](MessagesPriorToGuidMatchingChatGUIDs, "count");
    if (v7 >= 1)
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = (void *)-[__CFArray objectAtIndex:](MessagesPriorToGuidMatchingChatGUIDs, "objectAtIndex:", v8);
        v11 = xpc_dictionary_create(0, 0, 0);
        if (v11)
        {
          xpc_array_set_string(v6, 0xFFFFFFFFFFFFFFFFLL, (const char *)objc_msgSend(v10, "UTF8String"));
          xpc_release(v11);
        }
        ++v8;
      }
      while (v9 != v8);
    }
    v12 = *(void **)(a1 + 56);
    if (v12)
      xpc_dictionary_set_value(v12, "array_result", v6);
    xpc_release(v6);
  }
  if (MessagesPriorToGuidMatchingChatGUIDs)
    CFRelease(MessagesPriorToGuidMatchingChatGUIDs);
  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyAllUnplayedMessageGUIDsForChatGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC32F54;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC32F54(uint64_t a1)
{
  CFMutableArrayRef v2;
  NSObject *v3;
  uint64_t v4;
  xpc_object_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  xpc_object_t v10;
  void *v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = IMDMessageRecordCopyAllUnplayedMessageGUIDsForChatGUID(*(const __CFString **)(a1 + 32));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v13 = 138412546;
      v14 = v4;
      v15 = 2048;
      v16 = -[__CFArray count](v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copy unplayed audio messages guids, for chat guid: %@  (Results: %ld)", (uint8_t *)&v13, 0x16u);
    }
  }
  v5 = xpc_array_create(0, 0);
  if (v5)
  {
    v6 = -[__CFArray count](v2, "count");
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = v6;
      do
      {
        v9 = (void *)-[__CFArray objectAtIndex:](v2, "objectAtIndex:", v7);
        v10 = xpc_dictionary_create(0, 0, 0);
        if (v10)
        {
          xpc_array_set_string(v5, 0xFFFFFFFFFFFFFFFFLL, (const char *)objc_msgSend(v9, "UTF8String"));
          xpc_release(v10);
        }
        ++v7;
      }
      while (v8 != v7);
    }
    v11 = *(void **)(a1 + 40);
    if (v11)
      xpc_dictionary_set_value(v11, "array_result", v5);
    xpc_release(v5);
  }
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyUnreadIncomingMessagesWithChatIdentifiersOnServicesToLimitFallbackGUID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v8;
  _QWORD v9[10];

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1ABC33174;
  v9[3] = &unk_1E5ABF7C8;
  v9[4] = a5;
  v9[5] = a6;
  v9[6] = a8;
  v9[7] = a3;
  v9[8] = a4;
  v9[9] = a7;
  v8 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v9, v8);
}

uint64_t sub_1ABC33174(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  xpc_object_t v13;
  void *v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyUnreadIncomingMessagesWithChatIdentifiersOnServicesToLimitFallbackGUID(*(void **)(a1 + 32), *(void **)(a1 + 40), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 48));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v4 = *(_QWORD *)(a1 + 40);
      v6 = *(_QWORD *)(a1 + 72);
      v7 = *(_QWORD *)(a1 + 48);
      v16 = 138413314;
      v17 = v5;
      v18 = 2112;
      v19 = v4;
      v20 = 2048;
      v21 = v6;
      v22 = 2112;
      v23 = v7;
      v24 = 2048;
      v25 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copy unread incoming messages chatIdentifiers:%@   services: %@   limit: %lld  fallbackGUID:%@ (Result: %lu)", (uint8_t *)&v16, 0x34u);
    }
  }
  v8 = xpc_array_create(0, 0);
  if (v8)
  {
    v9 = objc_msgSend(v2, "count");
    if (v9 >= 1)
    {
      v10 = 0;
      v11 = v9;
      do
      {
        v12 = objc_msgSend(v2, "objectAtIndex:", v10);
        v13 = xpc_dictionary_create(0, 0, 0);
        if (v13)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v12, (uint64_t)v13, 1, 0);
          xpc_array_append_value(v8, v13);
          xpc_release(v13);
        }
        ++v10;
      }
      while (v11 != v10);
    }
    v14 = *(void **)(a1 + 56);
    if (v14)
      xpc_dictionary_set_value(v14, "array_result", v8);
    xpc_release(v8);
  }
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyMessagesDataDetectionResults_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v6;
  _QWORD v7[8];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC333C8;
  v7[3] = &unk_1E5ABF5C0;
  v7[6] = a5;
  v7[7] = a6;
  v7[4] = a3;
  v7[5] = a4;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1ABC333C8(_QWORD *a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  void *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyMessagesDataDetectionResults(a1[6], a1[7]);
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = a1[6];
      v5 = a1[7];
      v14 = 134218496;
      v15 = v5;
      v16 = 2048;
      v17 = v4;
      v18 = 2048;
      v19 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copy DD result messages up to rowID: %lld  limit: %lld   (Result: %lu)", (uint8_t *)&v14, 0x20u);
    }
  }
  v6 = xpc_array_create(0, 0);
  if (v6)
  {
    v7 = objc_msgSend(v2, "count");
    if (v7 >= 1)
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = objc_msgSend(v2, "objectAtIndex:", v8);
        v11 = xpc_dictionary_create(0, 0, 0);
        if (v11)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v10, (uint64_t)v11, 1, 0);
          xpc_array_append_value(v6, v11);
          xpc_release(v11);
        }
        ++v8;
      }
      while (v9 != v8);
    }
    v12 = (void *)a1[4];
    if (v12)
      xpc_dictionary_set_value(v12, "array_result", v6);
    xpc_release(v6);
  }
  if (v2)
    CFRelease(v2);
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyMessagesWithReplyToGUIDs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;
  _QWORD v6[7];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1ABC335FC;
  v6[3] = &unk_1E5ABF480;
  v6[4] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v5 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v6, v5);
}

uint64_t sub_1ABC335FC(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  xpc_object_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;
  void *v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyMessagesWithReplyToGUIDs(*(void **)(a1 + 32));
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v13 = 138412290;
      v14 = v4;
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copy messages with reply to guid %@", (uint8_t *)&v13, 0xCu);
    }
  }
  if (v2)
  {
    v5 = xpc_array_create(0, 0);
    if (v5)
    {
      v6 = objc_msgSend(v2, "count");
      if (v6 >= 1)
      {
        v7 = 0;
        v8 = v6;
        do
        {
          v9 = objc_msgSend(v2, "objectAtIndex:", v7);
          v10 = xpc_dictionary_create(0, 0, 0);
          if (v10)
          {
            _IMDMessageRecordBulkCopyXPCDictionary(v9, (uint64_t)v10, 1, 0);
            xpc_array_append_value(v5, v10);
            xpc_release(v10);
          }
          ++v7;
        }
        while (v8 != v7);
      }
      v11 = *(void **)(a1 + 40);
      if (v11)
        xpc_dictionary_set_value(v11, "array_result", v5);
      xpc_release(v5);
    }
  }

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __XPCServerIMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID_IPCAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v6;
  _QWORD v7[8];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1ABC3380C;
  v7[3] = &unk_1E5ABF5C0;
  v7[6] = a5;
  v7[7] = a6;
  v7[4] = a3;
  v7[5] = a4;
  v6 = sub_1ABC29340(a3);
  IMDPersistencePerformBlock(v7, v6);
}

uint64_t sub_1ABC3380C(_QWORD *a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  void *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (void *)IMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID(a1[6], a1[7]);
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = a1[6];
      v5 = a1[7];
      v14 = 134218496;
      v15 = v5;
      v16 = 2048;
      v17 = v4;
      v18 = 2048;
      v19 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1ABB60000, v3, OS_LOG_TYPE_INFO, "Copy newest unread incoming messages up to rowID: %lld  limit: %lld   (Result: %lu)", (uint8_t *)&v14, 0x20u);
    }
  }
  v6 = xpc_array_create(0, 0);
  if (v6)
  {
    v7 = objc_msgSend(v2, "count");
    if (v7 >= 1)
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = objc_msgSend(v2, "objectAtIndex:", v8);
        v11 = xpc_dictionary_create(0, 0, 0);
        if (v11)
        {
          _IMDMessageRecordBulkCopyXPCDictionary(v10, (uint64_t)v11, 1, 0);
          xpc_array_append_value(v6, v11);
          xpc_release(v11);
        }
        ++v8;
      }
      while (v9 != v8);
    }
    v12 = (void *)a1[4];
    if (v12)
      xpc_dictionary_set_value(v12, "array_result", v6);
    xpc_release(v6);
  }
  if (v2)
    CFRelease(v2);
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

